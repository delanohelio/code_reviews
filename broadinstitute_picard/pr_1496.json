{"pr_number": 1496, "pr_title": "Bugfix for IdentifyContamiant + small improvements to Fingerprinting", "pr_author": "yfarjoun", "pr_createdAt": "2020-04-08T20:39:31Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1496", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NTM1Mg==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r408395352", "body": "For public API deprecation, adding a javadoc would be nice.\r\n```\r\n/**\r\n * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\r\n *\r\n * @deprecated since April 2020 Use {@link #setMaximalPLDifference(String)} instead.\r\n */\r\n```", "bodyText": "For public API deprecation, adding a javadoc would be nice.\n/**\n * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n *\n * @deprecated since April 2020 Use {@link #setMaximalPLDifference(String)} instead.\n */", "bodyHTML": "<p dir=\"auto\">For public API deprecation, adding a javadoc would be nice.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/**\n * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n *\n * @deprecated since April 2020 Use {@link #setMaximalPLDifference(String)} instead.\n */\"><pre><code>/**\n * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n *\n * @deprecated since April 2020 Use {@link #setMaximalPLDifference(String)} instead.\n */\n</code></pre></div>", "author": "pshapiro4broad", "createdAt": "2020-04-14T19:53:10Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -155,10 +158,15 @@ public void setGenotypingErrorRate(final double genotypingErrorRate) {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    @Deprecated //non-compliant method name.", "originalCommit": "ec07f3d851b8b4c1dfbec1043c3526b8d469ab8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex b7371e4a5..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,18 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    @Deprecated //non-compliant method name.\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     */\n-    public void setMaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n-    }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,6 +158,13 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     */\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        this.maximalPLDifference = maximalPLDifference;\n+    }\n+\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..b7371e4a5 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,10 +158,15 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    @Deprecated //non-compliant method name.\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        setMaximalPLDifference(maximalPLDifference);\n+    }\n+\n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n      */\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n+    public void setMaximalPLDifference(final int maximalPLDifference) {\n         this.maximalPLDifference = maximalPLDifference;\n     }\n \n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex b7371e4a5..9a57c9a79 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,17 +157,23 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    @Deprecated //non-compliant method name.\n+    /**\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n+     */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n         setMaximalPLDifference(maximalPLDifference);\n     }\n \n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n      */\n-    public void setMaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n-    }\n+    @Deprecated\n+    public void setMaximalPLDifference(final int maximalPLDifference) { }\n \n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 9a57c9a79..cb50bed55 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -157,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "8023e8a2c05403546998a7fa0a3069f7c0b99338", "url": "https://github.com/broadinstitute/picard/commit/8023e8a2c05403546998a7fa0a3069f7c0b99338", "message": "- remove max from loglikelihood before converting to probability to protect against an underflow", "committedDate": "2020-04-15T20:34:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4MTE2Mg==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422181162", "body": "whitespace, here and below\r\n```suggestion\r\n        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods, -max);\r\n```", "bodyText": "whitespace, here and below\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods,-max);\n          \n          \n            \n                    final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods, -max);", "bodyHTML": "<p dir=\"auto\">whitespace, here and below</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span>[] cappedLogLikelihoods <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MathUtil</span><span class=\"pl-k\">.</span>sum(logLikelihoods,<span class=\"pl-k\">-</span>max);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span>[] cappedLogLikelihoods <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MathUtil</span><span class=\"pl-k\">.</span>sum(logLikelihoods,<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span>max);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T14:38:44Z", "path": "src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package picard.fingerprint;\n+\n+import picard.util.MathUtil;\n+\n+public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLogLikelihoods {\n+    private final double cap;\n+\n+    // cap should be negative to indicate that you can never be too sure of anything (since the log likelihood is the\n+    //    log probability of an error, it's negative)\n+    public CappedHaplotypeProbabilities(final HaplotypeProbabilities haplotypeProbabilities, double cap) {\n+        super(haplotypeProbabilities.getHaplotype());\n+        this.cap = cap;\n+        final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n+        final double max = MathUtil.max(logLikelihoods);\n+        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods,-max);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\nindex 7b9a2fe8a..2c8e57c08 100644\n--- a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n+++ b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n", "chunk": "@@ -11,13 +34,13 @@ public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLog\n         super(haplotypeProbabilities.getHaplotype());\n         this.cap = cap;\n         final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n-        final double max = MathUtil.max(logLikelihoods);\n-        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods,-max);\n-        this.setLogLikelihoods(MathUtil.max(cappedLogLikelihoods,cap));\n+        final double[] cappedLogLikelihoods = MathUtil.subtractMax(logLikelihoods);\n+        this.setLogLikelihoods(MathUtil.capFromBelow(cappedLogLikelihoods, cap));\n     }\n \n+\n     @Override\n     public HaplotypeProbabilities deepCopy() {\n-        return new CappedHaplotypeProbabilities(this,cap);\n+        return new CappedHaplotypeProbabilities(this, cap);\n     }\n }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\ndeleted file mode 100644\nindex 2c8e57c08..000000000\n--- a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n+++ /dev/null\n", "chunk": "@@ -1,46 +0,0 @@\n-package picard.fingerprint;\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2010-2020 The Broad Institute\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-\n-import picard.util.MathUtil;\n-\n-public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLogLikelihoods {\n-    private final double cap;\n-\n-    // cap should be negative to indicate that you can never be too sure of anything (since the log likelihood is the\n-    //    log probability of an error, it's negative)\n-    public CappedHaplotypeProbabilities(final HaplotypeProbabilities haplotypeProbabilities, double cap) {\n-        super(haplotypeProbabilities.getHaplotype());\n-        this.cap = cap;\n-        final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n-        final double[] cappedLogLikelihoods = MathUtil.subtractMax(logLikelihoods);\n-        this.setLogLikelihoods(MathUtil.capFromBelow(cappedLogLikelihoods, cap));\n-    }\n-\n-\n-    @Override\n-    public HaplotypeProbabilities deepCopy() {\n-        return new CappedHaplotypeProbabilities(this, cap);\n-    }\n-}\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\nnew file mode 100644\nindex 000000000..7b9a2fe8a\n--- /dev/null\n+++ b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n", "chunk": "@@ -0,0 +1,23 @@\n+package picard.fingerprint;\n+\n+import picard.util.MathUtil;\n+\n+public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLogLikelihoods {\n+    private final double cap;\n+\n+    // cap should be negative to indicate that you can never be too sure of anything (since the log likelihood is the\n+    //    log probability of an error, it's negative)\n+    public CappedHaplotypeProbabilities(final HaplotypeProbabilities haplotypeProbabilities, double cap) {\n+        super(haplotypeProbabilities.getHaplotype());\n+        this.cap = cap;\n+        final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n+        final double max = MathUtil.max(logLikelihoods);\n+        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods,-max);\n+        this.setLogLikelihoods(MathUtil.max(cappedLogLikelihoods,cap));\n+    }\n+\n+    @Override\n+    public HaplotypeProbabilities deepCopy() {\n+        return new CappedHaplotypeProbabilities(this,cap);\n+    }\n+}\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\nindex 7b9a2fe8a..0bf052ef4 100644\n--- a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n+++ b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n", "chunk": "@@ -12,12 +35,12 @@ public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLog\n         this.cap = cap;\n         final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n         final double max = MathUtil.max(logLikelihoods);\n-        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods,-max);\n-        this.setLogLikelihoods(MathUtil.max(cappedLogLikelihoods,cap));\n+        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods, -max);\n+        this.setLogLikelihoods(MathUtil.max(cappedLogLikelihoods, cap));\n     }\n \n     @Override\n     public HaplotypeProbabilities deepCopy() {\n-        return new CappedHaplotypeProbabilities(this,cap);\n+        return new CappedHaplotypeProbabilities(this, cap);\n     }\n }\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\nindex 0bf052ef4..2c8e57c08 100644\n--- a/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n+++ b/src/main/java/picard/fingerprint/CappedHaplotypeProbabilities.java\n", "chunk": "@@ -34,11 +34,11 @@ public class CappedHaplotypeProbabilities extends HaplotypeProbabilitiesUsingLog\n         super(haplotypeProbabilities.getHaplotype());\n         this.cap = cap;\n         final double[] logLikelihoods = haplotypeProbabilities.getLogLikelihoods();\n-        final double max = MathUtil.max(logLikelihoods);\n-        final double[] cappedLogLikelihoods = MathUtil.sum(logLikelihoods, -max);\n-        this.setLogLikelihoods(MathUtil.max(cappedLogLikelihoods, cap));\n+        final double[] cappedLogLikelihoods = MathUtil.subtractMax(logLikelihoods);\n+        this.setLogLikelihoods(MathUtil.capFromBelow(cappedLogLikelihoods, cap));\n     }\n \n+\n     @Override\n     public HaplotypeProbabilities deepCopy() {\n         return new CappedHaplotypeProbabilities(this, cap);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NzU5MQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422197591", "body": "IMO it would make this clearer to create a local variable for the expression `fingerprintEntry.getValue()`", "bodyText": "IMO it would make this clearer to create a local variable for the expression fingerprintEntry.getValue()", "bodyHTML": "<p dir=\"auto\">IMO it would make this clearer to create a local variable for the expression <code>fingerprintEntry.getValue()</code></p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:07:04Z", "path": "src/main/java/picard/fingerprint/CrosscheckFingerprints.java", "diffHunk": "@@ -522,6 +531,18 @@ protected int doWork() {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex f53e82396..928fa5e4a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 928fa5e4a..2747cfa52 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,19 +522,6 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        return fpMap.entrySet().stream()\n-                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n-                    final Fingerprint value = entry.getValue();\n-                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n-\n-                    value.values().stream()\n-                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n-                            .forEach(cappedFp::add);\n-                    return cappedFp;\n-                }));\n-    }\n-\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 2747cfa52..30213ff83 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -522,6 +529,18 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n+                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n+                cappedFp.add(cappedHp);\n+            }\n+            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n+        }\n+    }\n+\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 30213ff83..03423a340 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -529,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5Nzk5OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422197998", "body": "whitespace missing after `,` in this method\r\n```suggestion\r\n            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(), fingerprintEntry.getValue().getSource(), fingerprintEntry.getValue().getInfo());\r\n```", "bodyText": "whitespace missing after , in this method\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n          \n          \n            \n                        final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(), fingerprintEntry.getValue().getSource(), fingerprintEntry.getValue().getInfo());", "bodyHTML": "<p dir=\"auto\">whitespace missing after <code>,</code> in this method</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Fingerprint</span> cappedFp <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Fingerprint</span>(fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getSample(),fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getSource(),fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getInfo());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Fingerprint</span> cappedFp <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Fingerprint</span>(fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getSample(),<span class=\"x x-first x-last\"> </span>fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getSource(),<span class=\"x x-first x-last\"> </span>fingerprintEntry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>getInfo());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:07:41Z", "path": "src/main/java/picard/fingerprint/CrosscheckFingerprints.java", "diffHunk": "@@ -522,6 +531,18 @@ protected int doWork() {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex f53e82396..928fa5e4a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 928fa5e4a..2747cfa52 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,19 +522,6 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        return fpMap.entrySet().stream()\n-                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n-                    final Fingerprint value = entry.getValue();\n-                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n-\n-                    value.values().stream()\n-                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n-                            .forEach(cappedFp::add);\n-                    return cappedFp;\n-                }));\n-    }\n-\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 2747cfa52..30213ff83 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -522,6 +529,18 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n+                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n+                cappedFp.add(cappedHp);\n+            }\n+            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n+        }\n+    }\n+\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 30213ff83..03423a340 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -529,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5OTM3MQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422199371", "body": "The code uses `keySet()` but then only uses `get()` on it. You should get the same effect by looping over `values()`. like\r\n```\r\n    for (HaplotypeProbabilities probabilities : fingerprintEntry.getValue().values()) {\r\n        HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\r\n        cappedFp.add(cappedHp);\r\n    }\r\n```", "bodyText": "The code uses keySet() but then only uses get() on it. You should get the same effect by looping over values(). like\n    for (HaplotypeProbabilities probabilities : fingerprintEntry.getValue().values()) {\n        HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n        cappedFp.add(cappedHp);\n    }", "bodyHTML": "<p dir=\"auto\">The code uses <code>keySet()</code> but then only uses <code>get()</code> on it. You should get the same effect by looping over <code>values()</code>. like</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    for (HaplotypeProbabilities probabilities : fingerprintEntry.getValue().values()) {\n        HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n        cappedFp.add(cappedHp);\n    }\"><pre><code>    for (HaplotypeProbabilities probabilities : fingerprintEntry.getValue().values()) {\n        HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n        cappedFp.add(cappedHp);\n    }\n</code></pre></div>", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:10:03Z", "path": "src/main/java/picard/fingerprint/CrosscheckFingerprints.java", "diffHunk": "@@ -522,6 +531,18 @@ protected int doWork() {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex f53e82396..928fa5e4a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 928fa5e4a..2747cfa52 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,19 +522,6 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        return fpMap.entrySet().stream()\n-                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n-                    final Fingerprint value = entry.getValue();\n-                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n-\n-                    value.values().stream()\n-                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n-                            .forEach(cappedFp::add);\n-                    return cappedFp;\n-                }));\n-    }\n-\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 2747cfa52..30213ff83 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -522,6 +529,18 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n+                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n+                cappedFp.add(cappedHp);\n+            }\n+            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n+        }\n+    }\n+\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 30213ff83..03423a340 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -529,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMDUzMw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422200533", "body": "This code modifies its argument in place. It looks like it replaces every entry with a new entry. If so, IMO a better model would be to create a new map with the new values and return the new map, instead of overwriting the argument.", "bodyText": "This code modifies its argument in place. It looks like it replaces every entry with a new entry. If so, IMO a better model would be to create a new map with the new values and return the new map, instead of overwriting the argument.", "bodyHTML": "<p dir=\"auto\">This code modifies its argument in place. It looks like it replaces every entry with a new entry. If so, IMO a better model would be to create a new map with the new values and return the new map, instead of overwriting the argument.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:12:21Z", "path": "src/main/java/picard/fingerprint/CrosscheckFingerprints.java", "diffHunk": "@@ -522,6 +531,18 @@ protected int doWork() {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n+                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n+                cappedFp.add(cappedHp);\n+            }\n+            fpMap.put(fingerprintEntry.getKey(), cappedFp);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwNDYwMw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422204603", "bodyText": "Not sure if streaming operations makes this code clearer or less clear, but here's one way to do this\n    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n        return\n            fpMap.entrySet().stream()\n                    .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n                        Fingerprint value = entry.getValue();\n                        final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n\n                        value.values().stream()\n                                .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n                                .forEach(cappedFp::add);\n                        return cappedFp;\n                    }));\n    }", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMDUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex f53e82396..928fa5e4a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 928fa5e4a..2747cfa52 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -531,19 +522,6 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        return fpMap.entrySet().stream()\n-                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n-                    final Fingerprint value = entry.getValue();\n-                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n-\n-                    value.values().stream()\n-                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n-                            .forEach(cappedFp::add);\n-                    return cappedFp;\n-                }));\n-    }\n-\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 2747cfa52..30213ff83 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -522,6 +529,18 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n+    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n+            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n+\n+            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n+                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n+                cappedFp.add(cappedHp);\n+            }\n+            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n+        }\n+    }\n+\n     /**\n      * Inspects the contents of sampleMapFile building a map of Sample->Sample.\n      * Checks for sanity, and then replaces in the fpMap,\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 30213ff83..03423a340 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -529,16 +531,17 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         }\n     }\n \n-    private void capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n-        for (Map.Entry<FingerprintIdDetails, Fingerprint> fingerprintEntry : fpMap.entrySet()) {\n-            final Fingerprint cappedFp = new Fingerprint(fingerprintEntry.getValue().getSample(),fingerprintEntry.getValue().getSource(),fingerprintEntry.getValue().getInfo());\n-\n-            for (HaplotypeBlock haplotypeBlock : fingerprintEntry.getValue().keySet()) {\n-                HaplotypeProbabilities cappedHp = new CappedHaplotypeProbabilities(fingerprintEntry.getValue().get(haplotypeBlock),-MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK);\n-                cappedFp.add(cappedHp);\n-            }\n-            fpMap.put(fingerprintEntry.getKey(), cappedFp);\n-        }\n+    private Map<FingerprintIdDetails, Fingerprint> capFingerprints(final Map<FingerprintIdDetails, Fingerprint> fpMap) {\n+        return fpMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n+                    final Fingerprint value = entry.getValue();\n+                    final Fingerprint cappedFp = new Fingerprint(value.getSample(), value.getSource(), value.getInfo());\n+\n+                    value.values().stream()\n+                            .map(probabilities -> new CappedHaplotypeProbabilities(probabilities, -MAX_EFFECT_OF_EACH_HAPLOTYPE_BLOCK))\n+                            .forEach(cappedFp::add);\n+                    return cappedFp;\n+                }));\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMTExNw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422201117", "body": "It looks like this should be `fpMap2`. If so, it would be nice to have a test that could've found this error.", "bodyText": "It looks like this should be fpMap2. If so, it would be nice to have a test that could've found this error.", "bodyHTML": "<p dir=\"auto\">It looks like this should be <code>fpMap2</code>. If so, it would be nice to have a test that could've found this error.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:13:22Z", "path": "src/main/java/picard/fingerprint/CrosscheckFingerprints.java", "diffHunk": "@@ -478,6 +485,8 @@ protected int doWork() {\n         } else {\n             log.info(\"Fingerprinting \" + unrolledFiles2.size() + \" SECOND_INPUT files.\");\n             final Map<FingerprintIdDetails, Fingerprint> fpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n+            capFingerprints(fpMap);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzIxNA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424037214", "bodyText": "OMG!", "author": "yfarjoun", "createdAt": "2020-05-12T21:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex f53e82396..928fa5e4a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -484,8 +484,8 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n             numUnexpected = crossCheckGrouped(fpMap, fpMap, metrics, Fingerprint.getFingerprintIdDetailsStringFunction(CROSSCHECK_BY), CROSSCHECK_BY);\n         } else {\n             log.info(\"Fingerprinting \" + unrolledFiles2.size() + \" SECOND_INPUT files.\");\n-            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n-            capFingerprints(fpMap);\n+            final Map<FingerprintIdDetails, Fingerprint> uncappedFpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n+            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = capFingerprints(uncappedFpMap2);\n \n \n             if (SECOND_INPUT_SAMPLE_MAP != null) {\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 928fa5e4a..2747cfa52 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -484,9 +477,7 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n             numUnexpected = crossCheckGrouped(fpMap, fpMap, metrics, Fingerprint.getFingerprintIdDetailsStringFunction(CROSSCHECK_BY), CROSSCHECK_BY);\n         } else {\n             log.info(\"Fingerprinting \" + unrolledFiles2.size() + \" SECOND_INPUT files.\");\n-            final Map<FingerprintIdDetails, Fingerprint> uncappedFpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n-            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = capFingerprints(uncappedFpMap2);\n-\n+            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n \n             if (SECOND_INPUT_SAMPLE_MAP != null) {\n                 remapFingerprints(fpMap2, SECOND_INPUT_SAMPLE_MAP, \"SECOND_INPUT_SAMPLE_MAP\");\n", "next_change": {"commit": "a15b45f3d5a418f78aba3238350ceb55be8470e4", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 2747cfa52..173767c0a 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -478,6 +485,8 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n         } else {\n             log.info(\"Fingerprinting \" + unrolledFiles2.size() + \" SECOND_INPUT files.\");\n             final Map<FingerprintIdDetails, Fingerprint> fpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n+            capFingerprints(fpMap);\n+\n \n             if (SECOND_INPUT_SAMPLE_MAP != null) {\n                 remapFingerprints(fpMap2, SECOND_INPUT_SAMPLE_MAP, \"SECOND_INPUT_SAMPLE_MAP\");\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\nindex 173767c0a..03423a340 100644\n--- a/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n+++ b/src/main/java/picard/fingerprint/CrosscheckFingerprints.java\n", "chunk": "@@ -484,8 +484,8 @@ public class CrosscheckFingerprints extends CommandLineProgram {\n             numUnexpected = crossCheckGrouped(fpMap, fpMap, metrics, Fingerprint.getFingerprintIdDetailsStringFunction(CROSSCHECK_BY), CROSSCHECK_BY);\n         } else {\n             log.info(\"Fingerprinting \" + unrolledFiles2.size() + \" SECOND_INPUT files.\");\n-            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n-            capFingerprints(fpMap);\n+            final Map<FingerprintIdDetails, Fingerprint> uncappedFpMap2 = checker.fingerprintFiles(unrolledFiles2, NUM_THREADS, 1, TimeUnit.DAYS);\n+            final Map<FingerprintIdDetails, Fingerprint> fpMap2 = capFingerprints(uncappedFpMap2);\n \n \n             if (SECOND_INPUT_SAMPLE_MAP != null) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwNTk5OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422205998", "body": "log can be static\r\n```suggestion\r\n    private static final Log log = Log.getInstance(ExtractFingerprint.class);\r\n```", "bodyText": "log can be static\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Log log = Log.getInstance(ExtractFingerprint.class);\n          \n          \n            \n                private static final Log log = Log.getInstance(ExtractFingerprint.class);", "bodyHTML": "<p dir=\"auto\">log can be static</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Log</span> log <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Log</span><span class=\"pl-k\">.</span>getInstance(<span class=\"pl-smi\">ExtractFingerprint</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">Log</span> log <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Log</span><span class=\"pl-k\">.</span>getInstance(<span class=\"pl-smi\">ExtractFingerprint</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:22:29Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Program to create a fingerprint for the <b>contaminating</b> sample when the level of contamination is both known and\n+ * uniform in the genome.\n+ *\n+ * @author Yossi Farjoun\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Computes/Extracts the fingerprint genotype likelihoods from the supplied SAM/BAM/VCF file.\" +\n+                \"It is given as a list of PLs at the fingerprinting sites.\",\n+        oneLineSummary = \"Computes a fingerprint from the supplied SAM/BAM file.\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class)\n+\n+public class ExtractFingerprint extends CommandLineProgram {\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"Input SAM or BAM file.\")\n+    public File INPUT;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output fingerprint file (VCF).\")\n+    public File OUTPUT;\n+\n+    @Argument(shortName = \"H\", doc = \"A file of haplotype information. The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting. See \" +\n+            \"https://software.broadinstitute.org/gatk/documentation/article?id=9526 for details.\")\n+    public File HAPLOTYPE_MAP;\n+\n+    @Argument(shortName = \"C\", doc = \"A value of estimated contamination in the input. A non-zero value will cause the program to provide a better estimate of the fingerprint in the presence of contaminating reads\",\n+            minValue = 0D, maxValue = 1D)\n+    public double CONTAMINATION;\n+\n+    @Argument(doc = \"The sample alias to associate with the resulting fingerprint. When null, <SAMPLE> is extracted from the input file and \\\"<SAMPLE>\\\" is used. \" +\n+            \"If argument EXTRACT_CONTAMINATION=true the resulting samplename will be \\\"<SAMPLE>-contamination\\\" (if not provided).\", optional = true)\n+    public String SAMPLE_ALIAS = null;\n+\n+    @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n+            \"effect that any given locus may have.\")\n+    public int LOCUS_MAX_READS = 200;\n+\n+    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")\n+    public boolean EXTRACT_CONTAMINATION = false;\n+\n+    @Override\n+    protected boolean requiresReference() {\n+        return true;\n+    }\n+\n+    private final Log log = Log.getInstance(ExtractFingerprint.class);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex 9d2c02652..c92297b82 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ExtractFingerprint extends CommandLineProgram {\n         return true;\n     }\n \n-    private final Log log = Log.getInstance(ExtractFingerprint.class);\n+    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n \n     @Override\n     protected int doWork() {\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..fe9edae96 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -80,21 +80,19 @@ public class ExtractFingerprint extends CommandLineProgram {\n         return true;\n     }\n \n-    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n+    private final Log log = Log.getInstance(ExtractFingerprint.class);\n \n     @Override\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n         IOUtil.assertFileIsWritable(OUTPUT);\n-        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n+        IOUtil.assertFileIsReadable(REFERENCE_SEQUENCE);\n \n         final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n \n         // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n-        if (!EXTRACT_CONTAMINATION) {\n-            CONTAMINATION = 1 - CONTAMINATION;\n-        }\n+        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n \n         checker.setLocusMaxReads(LOCUS_MAX_READS);\n         checker.setValidationStringency(VALIDATION_STRINGENCY);\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex fe9edae96..c92297b82 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -80,19 +80,21 @@ public class ExtractFingerprint extends CommandLineProgram {\n         return true;\n     }\n \n-    private final Log log = Log.getInstance(ExtractFingerprint.class);\n+    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n \n     @Override\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n         IOUtil.assertFileIsWritable(OUTPUT);\n-        IOUtil.assertFileIsReadable(REFERENCE_SEQUENCE);\n+        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n \n         final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n \n         // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n-        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n+        if (!EXTRACT_CONTAMINATION) {\n+            CONTAMINATION = 1 - CONTAMINATION;\n+        }\n \n         checker.setLocusMaxReads(LOCUS_MAX_READS);\n         checker.setValidationStringency(VALIDATION_STRINGENCY);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwNjY0MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422206640", "body": "please use `{` `}` for all `if`s\r\n```suggestion\r\n        if (!EXTRACT_CONTAMINATION) {\r\n            CONTAMINATION = 1 - CONTAMINATION;\r\n        }\r\n```", "bodyText": "please use { } for all ifs\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n          \n          \n            \n                    if (!EXTRACT_CONTAMINATION) {\n          \n          \n            \n                        CONTAMINATION = 1 - CONTAMINATION;\n          \n          \n            \n                    }", "bodyHTML": "<p dir=\"auto\">please use <code>{</code> <code>}</code> for all <code>if</code>s</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-c1\">EXTRACT_CONTAMINATION</span>) <span class=\"pl-c1 x x-first\">CONTAMINATION</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">1</span><span class=\"x\"> </span><span class=\"pl-k x\">-</span><span class=\"x\"> </span><span class=\"pl-c1 x\">CONTAMINATION</span><span class=\"x x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-c1\">EXTRACT_CONTAMINATION</span>) <span class=\"x x-first x-last\">{</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">CONTAMINATION</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">CONTAMINATION</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T15:23:46Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Program to create a fingerprint for the <b>contaminating</b> sample when the level of contamination is both known and\n+ * uniform in the genome.\n+ *\n+ * @author Yossi Farjoun\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Computes/Extracts the fingerprint genotype likelihoods from the supplied SAM/BAM/VCF file.\" +\n+                \"It is given as a list of PLs at the fingerprinting sites.\",\n+        oneLineSummary = \"Computes a fingerprint from the supplied SAM/BAM file.\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class)\n+\n+public class ExtractFingerprint extends CommandLineProgram {\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"Input SAM or BAM file.\")\n+    public File INPUT;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output fingerprint file (VCF).\")\n+    public File OUTPUT;\n+\n+    @Argument(shortName = \"H\", doc = \"A file of haplotype information. The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting. See \" +\n+            \"https://software.broadinstitute.org/gatk/documentation/article?id=9526 for details.\")\n+    public File HAPLOTYPE_MAP;\n+\n+    @Argument(shortName = \"C\", doc = \"A value of estimated contamination in the input. A non-zero value will cause the program to provide a better estimate of the fingerprint in the presence of contaminating reads\",\n+            minValue = 0D, maxValue = 1D)\n+    public double CONTAMINATION;\n+\n+    @Argument(doc = \"The sample alias to associate with the resulting fingerprint. When null, <SAMPLE> is extracted from the input file and \\\"<SAMPLE>\\\" is used. \" +\n+            \"If argument EXTRACT_CONTAMINATION=true the resulting samplename will be \\\"<SAMPLE>-contamination\\\" (if not provided).\", optional = true)\n+    public String SAMPLE_ALIAS = null;\n+\n+    @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n+            \"effect that any given locus may have.\")\n+    public int LOCUS_MAX_READS = 200;\n+\n+    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")\n+    public boolean EXTRACT_CONTAMINATION = false;\n+\n+    @Override\n+    protected boolean requiresReference() {\n+        return true;\n+    }\n+\n+    private final Log log = Log.getInstance(ExtractFingerprint.class);\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n+\n+        final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n+\n+        // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n+        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex 9d2c02652..c92297b82 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -92,7 +92,9 @@ public class ExtractFingerprint extends CommandLineProgram {\n         final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n \n         // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n-        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n+        if (!EXTRACT_CONTAMINATION) {\n+            CONTAMINATION = 1 - CONTAMINATION;\n+        }\n \n         checker.setLocusMaxReads(LOCUS_MAX_READS);\n         checker.setValidationStringency(VALIDATION_STRINGENCY);\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..fe9edae96 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -80,21 +80,19 @@ public class ExtractFingerprint extends CommandLineProgram {\n         return true;\n     }\n \n-    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n+    private final Log log = Log.getInstance(ExtractFingerprint.class);\n \n     @Override\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n         IOUtil.assertFileIsWritable(OUTPUT);\n-        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n+        IOUtil.assertFileIsReadable(REFERENCE_SEQUENCE);\n \n         final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n \n         // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n-        if (!EXTRACT_CONTAMINATION) {\n-            CONTAMINATION = 1 - CONTAMINATION;\n-        }\n+        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n \n         checker.setLocusMaxReads(LOCUS_MAX_READS);\n         checker.setValidationStringency(VALIDATION_STRINGENCY);\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex fe9edae96..c92297b82 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -80,19 +80,21 @@ public class ExtractFingerprint extends CommandLineProgram {\n         return true;\n     }\n \n-    private final Log log = Log.getInstance(ExtractFingerprint.class);\n+    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n \n     @Override\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n         IOUtil.assertFileIsWritable(OUTPUT);\n-        IOUtil.assertFileIsReadable(REFERENCE_SEQUENCE);\n+        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n \n         final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n \n         // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n-        if (!EXTRACT_CONTAMINATION) CONTAMINATION = 1 - CONTAMINATION;\n+        if (!EXTRACT_CONTAMINATION) {\n+            CONTAMINATION = 1 - CONTAMINATION;\n+        }\n \n         checker.setLocusMaxReads(LOCUS_MAX_READS);\n         checker.setValidationStringency(VALIDATION_STRINGENCY);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5MDA2Nw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422290067", "body": "It looks like this can be `final`\r\n```suggestion\r\n    private final Set<Path> missingRGFiles = new HashSet<>();\r\n```", "bodyText": "It looks like this can be final\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<Path> missingRGFiles = new HashSet<>();\n          \n          \n            \n                private final Set<Path> missingRGFiles = new HashSet<>();", "bodyHTML": "<p dir=\"auto\">It looks like this can be <code>final</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">Path</span>&gt;</span> missingRGFiles <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">Path</span>&gt;</span> missingRGFiles <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:07:42Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -116,6 +113,10 @@ public File getReferenceFasta() {\n \n     private boolean allowDuplicateReads = false;\n     private double pLossofHet = 0;\n+    private int locusMaxReads = 0;\n+    private String defaultSampleID = \"<UNKNOWN>\";\n+\n+    private Set<Path> missingRGFiles = new HashSet<>();", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -116,7 +116,7 @@ public class FingerprintChecker {\n     private int locusMaxReads = 0;\n     private String defaultSampleID = \"<UNKNOWN>\";\n \n-    private Set<Path> missingRGFiles = new HashSet<>();\n+    private final Set<Path> missingRGFiles = new HashSet<>();\n \n     private final Log log = Log.getInstance(FingerprintChecker.class);\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -116,7 +118,7 @@ public class FingerprintChecker {\n     private int locusMaxReads = 0;\n     private String defaultSampleID = \"<UNKNOWN>\";\n \n-    private final Set<Path> missingRGFiles = new HashSet<>();\n+    private Set<Path> missingRGFiles = new HashSet<>();\n \n     private final Log log = Log.getInstance(FingerprintChecker.class);\n \n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -118,7 +116,7 @@ public class FingerprintChecker {\n     private int locusMaxReads = 0;\n     private String defaultSampleID = \"<UNKNOWN>\";\n \n-    private Set<Path> missingRGFiles = new HashSet<>();\n+    private final Set<Path> missingRGFiles = new HashSet<>();\n \n     private final Log log = Log.getInstance(FingerprintChecker.class);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5NTExMA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422295110", "body": "Since the method you're forwarding to is also deprecated, it seems like this comment should also mention `CappedHaplotypeProbabilities`", "bodyText": "Since the method you're forwarding to is also deprecated, it seems like this comment should also mention CappedHaplotypeProbabilities", "bodyHTML": "<p dir=\"auto\">Since the method you're forwarding to is also deprecated, it seems like this comment should also mention <code>CappedHaplotypeProbabilities</code></p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:17:35Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -156,12 +157,23 @@ public void setGenotypingErrorRate(final double genotypingErrorRate) {\n     }\n \n     /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,6 +158,13 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     */\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        this.maximalPLDifference = maximalPLDifference;\n+    }\n+\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..b7371e4a5 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,10 +158,15 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    @Deprecated //non-compliant method name.\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        setMaximalPLDifference(maximalPLDifference);\n+    }\n+\n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n      */\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n+    public void setMaximalPLDifference(final int maximalPLDifference) {\n         this.maximalPLDifference = maximalPLDifference;\n     }\n \n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex b7371e4a5..9a57c9a79 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,17 +157,23 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    @Deprecated //non-compliant method name.\n+    /**\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n+     */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n         setMaximalPLDifference(maximalPLDifference);\n     }\n \n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n      */\n-    public void setMaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n-    }\n+    @Deprecated\n+    public void setMaximalPLDifference(final int maximalPLDifference) { }\n \n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 9a57c9a79..cb50bed55 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -157,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5NTQwMg==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422295402", "body": "Can you use `{@link CappedHaplotypeProbabilities}` here?", "bodyText": "Can you use {@link CappedHaplotypeProbabilities} here?", "bodyHTML": "<p dir=\"auto\">Can you use <code>{@link CappedHaplotypeProbabilities}</code> here?</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:18:10Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -156,12 +157,23 @@ public void setGenotypingErrorRate(final double genotypingErrorRate) {\n     }\n \n     /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n      */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n+        setMaximalPLDifference(maximalPLDifference);\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,6 +158,13 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     */\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        this.maximalPLDifference = maximalPLDifference;\n+    }\n+\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..b7371e4a5 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,10 +158,15 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    @Deprecated //non-compliant method name.\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        setMaximalPLDifference(maximalPLDifference);\n+    }\n+\n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n      */\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n+    public void setMaximalPLDifference(final int maximalPLDifference) {\n         this.maximalPLDifference = maximalPLDifference;\n     }\n \n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex b7371e4a5..9a57c9a79 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,17 +157,23 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    @Deprecated //non-compliant method name.\n+    /**\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n+     */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n         setMaximalPLDifference(maximalPLDifference);\n     }\n \n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n      */\n-    public void setMaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n-    }\n+    @Deprecated\n+    public void setMaximalPLDifference(final int maximalPLDifference) { }\n \n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 9a57c9a79..cb50bed55 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -157,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5NTc5MQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422295791", "body": "Why add a new method name with no contents that is deprecated?", "bodyText": "Why add a new method name with no contents that is deprecated?", "bodyHTML": "<p dir=\"auto\">Why add a new method name with no contents that is deprecated?</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:18:57Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -156,12 +157,23 @@ public void setGenotypingErrorRate(final double genotypingErrorRate) {\n     }\n \n     /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n      */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n+        setMaximalPLDifference(maximalPLDifference);\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n+     */\n+    @Deprecated\n+    public void setMaximalPLDifference(final int maximalPLDifference) { }", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODYxMw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424038613", "bodyText": "evolution", "author": "yfarjoun", "createdAt": "2020-05-12T21:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5NTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2ODc1OQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r431268759", "bodyText": "I'll just remove these as they don't do anything....better to have a compile error than a slient noop", "author": "yfarjoun", "createdAt": "2020-05-27T16:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5NTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -156,6 +158,13 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    /**\n+     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     */\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        this.maximalPLDifference = maximalPLDifference;\n+    }\n+\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..b7371e4a5 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,10 +158,15 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n+    @Deprecated //non-compliant method name.\n+    public void setmaximalPLDifference(final int maximalPLDifference) {\n+        setMaximalPLDifference(maximalPLDifference);\n+    }\n+\n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n      */\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n+    public void setMaximalPLDifference(final int maximalPLDifference) {\n         this.maximalPLDifference = maximalPLDifference;\n     }\n \n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex b7371e4a5..9a57c9a79 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -158,17 +157,23 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    @Deprecated //non-compliant method name.\n+    /**\n+     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n+     *\n+     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n+     * @since 16/4/2020\n+     */\n+    @Deprecated\n     public void setmaximalPLDifference(final int maximalPLDifference) {\n         setMaximalPLDifference(maximalPLDifference);\n     }\n \n     /**\n      * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n+     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n      */\n-    public void setMaximalPLDifference(final int maximalPLDifference) {\n-        this.maximalPLDifference = maximalPLDifference;\n-    }\n+    @Deprecated\n+    public void setMaximalPLDifference(final int maximalPLDifference) { }\n \n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 9a57c9a79..cb50bed55 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -157,24 +156,6 @@ public class FingerprintChecker {\n         this.genotypingErrorRate = genotypingErrorRate;\n     }\n \n-    /**\n-     * Does same thing as {@link #setMaximalPLDifference(int)} but named in the compliant way.\n-     *\n-     * @deprecated use {@link #setMaximalPLDifference(int)} instead.\n-     * @since 16/4/2020\n-     */\n-    @Deprecated\n-    public void setmaximalPLDifference(final int maximalPLDifference) {\n-        setMaximalPLDifference(maximalPLDifference);\n-    }\n-\n-    /**\n-     * Sets the maximal difference in PL scores considered when reading PLs from a VCF.\n-     * @deprecated since 04/2020. use CappedHaplotypeProbabilities and explicitly cap your probabilities.\n-     */\n-    @Deprecated\n-    public void setMaximalPLDifference(final int maximalPLDifference) { }\n-\n     public SAMFileHeader getHeader() {\n         return haplotypes.getHeader();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5Nzc4Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422297783", "body": "unnecessary `.toString()`\r\n```suggestion\r\n            log.debug(() -> \"At locus \" + info);\r\n```", "bodyText": "unnecessary .toString()\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(() -> \"At locus \" + info.toString());\n          \n          \n            \n                        log.debug(() -> \"At locus \" + info);", "bodyHTML": "<p dir=\"auto\">unnecessary <code>.toString()</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            log<span class=\"pl-k\">.</span>debug(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>At locus <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> info<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>debug(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>At locus <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> info);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:23:03Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -522,11 +539,8 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n         // Now go through the data at each locus and figure stuff out!\n         for (final SamLocusIterator.LocusInfo info : iterator) {\n \n-            // if statement to avoid string building.\n-            // TODO: replace with lambda version once htsjdk is rev'ed\n-            if (Log.isEnabled(Log.LogLevel.DEBUG)) {\n-                log.debug(\"At locus \" + info.toString());\n-            }\n+            log.debug(() -> \"At locus \" + info.toString());", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -539,7 +521,7 @@ public class FingerprintChecker {\n         // Now go through the data at each locus and figure stuff out!\n         for (final SamLocusIterator.LocusInfo info : iterator) {\n \n-            log.debug(() -> \"At locus \" + info.toString());\n+            log.debug(() -> \"At locus \" + info);\n \n             // TODO: Filter out the locus if the allele balance doesn't make sense for either a\n             // TODO: 50/50 het or a hom with some errors; in HS data with deep coverage any base\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -521,8 +525,11 @@ public class FingerprintChecker {\n         // Now go through the data at each locus and figure stuff out!\n         for (final SamLocusIterator.LocusInfo info : iterator) {\n \n-            log.debug(() -> \"At locus \" + info);\n-\n+            // if statement to avoid string building.\n+            // TODO: replace with lambda version once htsjdk is rev'ed\n+            if (Log.isEnabled(Log.LogLevel.DEBUG)) {\n+                log.debug(\"At locus \" + info.toString());\n+            }\n             // TODO: Filter out the locus if the allele balance doesn't make sense for either a\n             // TODO: 50/50 het or a hom with some errors; in HS data with deep coverage any base\n             // TODO: with major strand bias could cause errors\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..9a57c9a79 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -525,11 +540,8 @@ public class FingerprintChecker {\n         // Now go through the data at each locus and figure stuff out!\n         for (final SamLocusIterator.LocusInfo info : iterator) {\n \n-            // if statement to avoid string building.\n-            // TODO: replace with lambda version once htsjdk is rev'ed\n-            if (Log.isEnabled(Log.LogLevel.DEBUG)) {\n-                log.debug(\"At locus \" + info.toString());\n-            }\n+            log.debug(() -> \"At locus \" + info.toString());\n+\n             // TODO: Filter out the locus if the allele balance doesn't make sense for either a\n             // TODO: 50/50 het or a hom with some errors; in HS data with deep coverage any base\n             // TODO: with major strand bias could cause errors\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 9a57c9a79..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -540,7 +539,7 @@ public class FingerprintChecker {\n         // Now go through the data at each locus and figure stuff out!\n         for (final SamLocusIterator.LocusInfo info : iterator) {\n \n-            log.debug(() -> \"At locus \" + info.toString());\n+            log.debug(() -> \"At locus \" + info);\n \n             // TODO: Filter out the locus if the allele balance doesn't make sense for either a\n             // TODO: 50/50 het or a hom with some errors; in HS data with deep coverage any base\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwMzE4Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422303183", "body": "If `rg == null` then `fingerprintIdDetailsMap.containsKey(rg)` is always true because the `if` block above adds `null` to the map. So it seems like the `rg == null` test is unnecessary.", "bodyText": "If rg == null then fingerprintIdDetailsMap.containsKey(rg) is always true because the if block above adds null to the map. So it seems like the rg == null test is unnecessary.", "bodyHTML": "<p dir=\"auto\">If <code>rg == null</code> then <code>fingerprintIdDetailsMap.containsKey(rg)</code> is always true because the <code>if</code> block above adds <code>null</code> to the map. So it seems like the <code>rg == null</code> test is unnecessary.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:33:33Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -535,22 +549,31 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n             final HaplotypeBlock haplotypeBlock = this.haplotypes.getHaplotype(info.getSequenceName(), info.getPosition());\n             final Snp snp = this.haplotypes.getSnp(info.getSequenceName(), info.getPosition());\n \n-            for (final SamLocusIterator.RecordAndOffset rec : info.getRecordAndOffsets()) {\n+            // randomly select locusMaxReads elements from the list\n+            final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = locusMaxReads == 0 ?\n+                    info.getRecordAndOffsets() :\n+                    MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads, random);\n+\n+            for (final SamLocusIterator.RecordAndOffset rec : recordAndOffsetList) {\n                 final SAMReadGroupRecord rg = rec.getRecord().getReadGroup();\n                 final FingerprintIdDetails details;\n-                if (rg == null || !fingerprintIdDetailsMap.containsKey(rg)) {\n+\n+                // if there's a missing rg tag, add the unknown FP id to the map\n+                if (rg == null && !fingerprintIdDetailsMap.containsKey(null)) {\n+\n                     final FingerprintIdDetails unknownFPDetails = createUnknownFP(samFile, rec.getRecord());\n+\n                     fingerprintIdDetailsMap.put(null, unknownFPDetails);\n \n                     final Fingerprint fp = new Fingerprint(unknownFPDetails.sample, samFile, unknownFPDetails.platformUnit);\n                     fingerprintsByReadGroup.put(unknownFPDetails, fp);\n \n                     for (final HaplotypeBlock h : this.haplotypes.getHaplotypes()) {\n-                        fp.add(new HaplotypeProbabilitiesFromSequence(h));\n+                        fp.add(blockToProbMapper.apply(h));\n                     }\n                 }\n \n-                if (fingerprintIdDetailsMap.containsKey(rg)) {\n+                if (rg == null || fingerprintIdDetailsMap.containsKey(rg)) {", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -573,7 +555,7 @@ public class FingerprintChecker {\n                     }\n                 }\n \n-                if (rg == null || fingerprintIdDetailsMap.containsKey(rg)) {\n+                if (fingerprintIdDetailsMap.containsKey(rg)) {\n                     details = fingerprintIdDetailsMap.get(rg);\n \n                     final String readName = rec.getRecord().getReadName();\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -555,7 +562,7 @@ public class FingerprintChecker {\n                     }\n                 }\n \n-                if (fingerprintIdDetailsMap.containsKey(rg)) {\n+                if (rg == null || fingerprintIdDetailsMap.containsKey(rg)) {\n                     details = fingerprintIdDetailsMap.get(rg);\n \n                     final String readName = rec.getRecord().getReadName();\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -562,7 +573,7 @@ public class FingerprintChecker {\n                     }\n                 }\n \n-                if (rg == null || fingerprintIdDetailsMap.containsKey(rg)) {\n+                if (fingerprintIdDetailsMap.containsKey(rg)) {\n                     details = fingerprintIdDetailsMap.get(rg);\n \n                     final String readName = rec.getRecord().getReadName();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNDE1NA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422304154", "body": "`()`s unnecessary for single arg lambda\r\n```suggestion\r\n        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\r\n```", "bodyText": "()s unnecessary for single arg lambda\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n          \n          \n            \n                    final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));", "bodyHTML": "<p dir=\"auto\"><code>()</code>s unnecessary for single arg lambda</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">FingerprintIdDetails</span>, <span class=\"pl-smi\">Fingerprint</span>&gt;</span> fingerprintIdDetailsFingerprintMap <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>fingerprintSamFile(samFile, <span class=\"x x-first x-last\">(h)</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HaplotypeProbabilitiesFromContaminatorSequence</span>(h, contamination));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">FingerprintIdDetails</span>, <span class=\"pl-smi\">Fingerprint</span>&gt;</span> fingerprintIdDetailsFingerprintMap <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>fingerprintSamFile(samFile, <span class=\"x x-first x-last\">h</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HaplotypeProbabilitiesFromContaminatorSequence</span>(h, contamination));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:35:22Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -597,77 +620,16 @@ private FingerprintIdDetails createUnknownFP(final Path samFile, final SAMRecord\n      * Generates a per-sample Fingerprint for the contaminant in the supplied SAM file.\n      * Data is aggregated by sample, not read-group.\n      */\n-    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination, final int locusMaxReads) {\n-        final Map<String, Fingerprint> fingerprintsBySample = new HashMap<>();\n-\n-        try (final SamReader in = SamReaderFactory.makeDefault().enable(CACHE_FILE_BASED_INDEXES).open(samFile)) {\n-            checkDictionaryGoodForFingerprinting(in.getFileHeader().getSequenceDictionary());\n-\n-            final SamLocusIterator iterator = new SamLocusIterator(in, haplotypes.getIntervalList(), in.hasIndex());\n-            iterator.setEmitUncoveredLoci(true);\n-            iterator.setMappingQualityScoreCutoff(this.minimumMappingQuality);\n-            iterator.setQualityScoreCutoff(this.minimumBaseQuality);\n-\n-            // In some cases it is useful to allow duplicate reads to be used - the most common is in single-end\n-            // sequence data where the duplicate marking may have been overly aggressive, and there is useful\n-            // non-redundant data in the reads marked as \"duplicates'.\n-            if (this.allowDuplicateReads) {\n-                final List<SamRecordFilter> filters = new ArrayList<>(1);\n-                filters.add(new SecondaryAlignmentFilter());\n-                iterator.setSamFilters(filters);\n-            }\n+    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-            for (final SAMReadGroupRecord rg : in.getFileHeader().getReadGroups()) {\n-                if (!fingerprintsBySample.containsKey(rg.getSample())) {\n-                    final Fingerprint fingerprint = new Fingerprint(rg.getSample(),\n-                            samFile,\n-                            rg.getSample());\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -622,15 +604,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -604,13 +611,15 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        return fpIdDetailsBySample.entrySet().stream()\n+        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n+\n+        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -611,15 +622,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNDU0Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422304543", "body": "Personally I would use a shorter name here, but if you want to use this long name, then `by` should be capitalized.\r\n```suggestion\r\n        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintBySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\r\n```", "bodyText": "Personally I would use a shorter name here, but if you want to use this long name, then by should be capitalized.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n          \n          \n            \n                    final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintBySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,", "bodyHTML": "<p dir=\"auto\">Personally I would use a shorter name here, but if you want to use this long name, then <code>by</code> should be capitalized.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">FingerprintIdDetails</span>, <span class=\"pl-smi\">Fingerprint</span>&gt;</span> <span class=\"x x-first x-last\">fingerprintIdDetailsFingerprintbySample</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Fingerprint</span><span class=\"pl-k\">.</span>mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">FingerprintIdDetails</span>, <span class=\"pl-smi\">Fingerprint</span>&gt;</span> <span class=\"x x-first x-last\">fingerprintIdDetailsFingerprintBySample</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Fingerprint</span><span class=\"pl-k\">.</span>mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:36:12Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -597,77 +620,16 @@ private FingerprintIdDetails createUnknownFP(final Path samFile, final SAMRecord\n      * Generates a per-sample Fingerprint for the contaminant in the supplied SAM file.\n      * Data is aggregated by sample, not read-group.\n      */\n-    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination, final int locusMaxReads) {\n-        final Map<String, Fingerprint> fingerprintsBySample = new HashMap<>();\n-\n-        try (final SamReader in = SamReaderFactory.makeDefault().enable(CACHE_FILE_BASED_INDEXES).open(samFile)) {\n-            checkDictionaryGoodForFingerprinting(in.getFileHeader().getSequenceDictionary());\n-\n-            final SamLocusIterator iterator = new SamLocusIterator(in, haplotypes.getIntervalList(), in.hasIndex());\n-            iterator.setEmitUncoveredLoci(true);\n-            iterator.setMappingQualityScoreCutoff(this.minimumMappingQuality);\n-            iterator.setQualityScoreCutoff(this.minimumBaseQuality);\n-\n-            // In some cases it is useful to allow duplicate reads to be used - the most common is in single-end\n-            // sequence data where the duplicate marking may have been overly aggressive, and there is useful\n-            // non-redundant data in the reads marked as \"duplicates'.\n-            if (this.allowDuplicateReads) {\n-                final List<SamRecordFilter> filters = new ArrayList<>(1);\n-                filters.add(new SecondaryAlignmentFilter());\n-                iterator.setSamFilters(filters);\n-            }\n+    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-            for (final SAMReadGroupRecord rg : in.getFileHeader().getReadGroups()) {\n-                if (!fingerprintsBySample.containsKey(rg.getSample())) {\n-                    final Fingerprint fingerprint = new Fingerprint(rg.getSample(),\n-                            samFile,\n-                            rg.getSample());\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-                    for (final HaplotypeBlock h : this.haplotypes.getHaplotypes()) {\n-                        fingerprint.add(new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n-                    }\n-                    fingerprintsBySample.put(rg.getSample(), fingerprint);\n-                }\n-            }\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -622,15 +604,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -604,13 +611,15 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        return fpIdDetailsBySample.entrySet().stream()\n+        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n+\n+        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -611,15 +622,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNDc3OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422304778", "body": "Since this variable is returned directly it would be better IMO to return here rather than declaring a variable.", "bodyText": "Since this variable is returned directly it would be better IMO to return here rather than declaring a variable.", "bodyHTML": "<p dir=\"auto\">Since this variable is returned directly it would be better IMO to return here rather than declaring a variable.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:36:42Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -597,77 +620,16 @@ private FingerprintIdDetails createUnknownFP(final Path samFile, final SAMRecord\n      * Generates a per-sample Fingerprint for the contaminant in the supplied SAM file.\n      * Data is aggregated by sample, not read-group.\n      */\n-    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination, final int locusMaxReads) {\n-        final Map<String, Fingerprint> fingerprintsBySample = new HashMap<>();\n-\n-        try (final SamReader in = SamReaderFactory.makeDefault().enable(CACHE_FILE_BASED_INDEXES).open(samFile)) {\n-            checkDictionaryGoodForFingerprinting(in.getFileHeader().getSequenceDictionary());\n-\n-            final SamLocusIterator iterator = new SamLocusIterator(in, haplotypes.getIntervalList(), in.hasIndex());\n-            iterator.setEmitUncoveredLoci(true);\n-            iterator.setMappingQualityScoreCutoff(this.minimumMappingQuality);\n-            iterator.setQualityScoreCutoff(this.minimumBaseQuality);\n-\n-            // In some cases it is useful to allow duplicate reads to be used - the most common is in single-end\n-            // sequence data where the duplicate marking may have been overly aggressive, and there is useful\n-            // non-redundant data in the reads marked as \"duplicates'.\n-            if (this.allowDuplicateReads) {\n-                final List<SamRecordFilter> filters = new ArrayList<>(1);\n-                filters.add(new SecondaryAlignmentFilter());\n-                iterator.setSamFilters(filters);\n-            }\n+    public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-            for (final SAMReadGroupRecord rg : in.getFileHeader().getReadGroups()) {\n-                if (!fingerprintsBySample.containsKey(rg.getSample())) {\n-                    final Fingerprint fingerprint = new Fingerprint(rg.getSample(),\n-                            samFile,\n-                            rg.getSample());\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-                    for (final HaplotypeBlock h : this.haplotypes.getHaplotypes()) {\n-                        fingerprint.add(new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n-                    }\n-                    fingerprintsBySample.put(rg.getSample(), fingerprint);\n-                }\n-            }\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+                Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n+\n+        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 5f8aafe09..e9b61318e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -622,15 +604,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex e9b61318e..f2c22d704 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -604,13 +611,15 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        return fpIdDetailsBySample.entrySet().stream()\n+        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n+\n+        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex f2c22d704..4eb06457e 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n", "chunk": "@@ -611,15 +622,13 @@ public class FingerprintChecker {\n      */\n     public Map<String, Fingerprint> identifyContaminant(final Path samFile, final double contamination) {\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintMap = this.fingerprintSamFile(samFile, haplotypes.getIntervalList(), (h) -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsMap = this.fingerprintSamFile(samFile, h -> new HaplotypeProbabilitiesFromContaminatorSequence(h, contamination));\n \n-        final Map<FingerprintIdDetails, Fingerprint> fingerprintIdDetailsFingerprintbySample = Fingerprint.mergeFingerprintsBy(fingerprintIdDetailsFingerprintMap,\n+        final Map<FingerprintIdDetails, Fingerprint> fpIdDetailsBySample = Fingerprint.mergeFingerprintsBy(fpIdDetailsMap,\n                 Fingerprint.getFingerprintIdDetailsStringFunction(CrosscheckMetric.DataType.SAMPLE));\n \n-        final Map<String,Fingerprint> fingerprintsBySample = fingerprintIdDetailsFingerprintbySample.entrySet().stream()\n+        return fpIdDetailsBySample.entrySet().stream()\n                 .collect(Collectors.toMap(e -> e.getKey().sample, Map.Entry::getValue));\n-\n-        return fingerprintsBySample;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNTU5MQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422305591", "body": "This was added because there is a need to change the default sample ID outside of picard? It's not currently used.", "bodyText": "This was added because there is a need to change the default sample ID outside of picard? It's not currently used.", "bodyHTML": "<p dir=\"auto\">This was added because there is a need to change the default sample ID outside of picard? It's not currently used.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:38:30Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -931,4 +890,20 @@ public static MatchResults calculateMatchResults(final Fingerprint observedFp, f\n     public void setReferenceFasta(final File referenceFasta) {\n         this.referenceFasta = referenceFasta;\n     }\n+\n+    public int getLocusMaxReads() {\n+        return locusMaxReads;\n+    }\n+\n+    public void setLocusMaxReads(final int locusMaxReads) {\n+        this.locusMaxReads = locusMaxReads;\n+    }\n+\n+    public String getDefaultSampleID() {\n+        return defaultSampleID;\n+    }\n+\n+    public void setDefaultSampleID(final String defaultSampleID) {", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0MTE2OQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424041169", "bodyText": "picard/fingerprint/ExtractFingerprint.java:102\nthe getter isn't used, but I thought that if I'm using a setter I should probably have a getter....happy to remove it.", "author": "yfarjoun", "createdAt": "2020-05-12T21:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjY3NQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r426786675", "bodyText": "It's OK", "author": "pshapiro4broad", "createdAt": "2020-05-18T17:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNTU5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNjk1Ng==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422306956", "body": "whitespace\r\n```suggestion\r\n        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {\r\n```", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n          \n          \n            \n                    if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (snp<span class=\"pl-k\">.</span>getAllele1() <span class=\"pl-k\">!=</span> refAllele <span class=\"pl-k\">&amp;&amp;</span> snp<span class=\"pl-k\">.</span>getAllele2() <span class=\"pl-k\">!=</span> refAllele){</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (snp<span class=\"pl-k\">.</span>getAllele1() <span class=\"pl-k\">!=</span> refAllele <span class=\"pl-k\">&amp;&amp;</span> snp<span class=\"pl-k\">.</span>getAllele2() <span class=\"pl-k\">!=</span> refAllele)<span class=\"x x-first x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:41:14Z", "path": "src/main/java/picard/fingerprint/FingerprintUtils.java", "diffHunk": "@@ -137,15 +152,38 @@ private static VariantContext getVariantContext(final ReferenceSequenceFile refe\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 67cc7efb4..248b88377 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -152,7 +152,7 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {\n             throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n         }\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 248b88377..5b0e72b30 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -152,39 +137,15 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {\n-            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n-        }\n-\n-        final Allele alleleRef;\n-        final Allele alleleAlt;\n-        final int obsRef, obsAlt;\n-        final boolean swap12 = snp.getAllele2() == refAllele;\n-\n-        if (swap12) {\n-            alleleRef = Allele.create(snp.getAllele2(), true);\n-            alleleAlt = Allele.create(snp.getAllele1(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele2();\n-            obsAlt = haplotypeProbabilities.getObsAllele1();\n-        } else {\n-            alleleRef = Allele.create(snp.getAllele1(), true);\n-            alleleAlt = Allele.create(snp.getAllele2(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele1();\n-            obsAlt = haplotypeProbabilities.getObsAllele2();\n-        }\n-\n-        final double[] origPLs = haplotypeProbabilities.getLogLikelihoods();\n-        final double[] PLs =  Arrays.copyOf(origPLs,origPLs.length);\n-        if (swap12) {\n-            ArrayUtils.reverse(PLs);\n-        }\n-        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n+        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n+        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n+        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(PLs)\n-                .AD(new int[]{obsAlt, obsRef})\n+                .PL(haplotypeProbabilities.getLogLikelihoods())\n+                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 5b0e72b30..67cc7efb4 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -137,15 +152,38 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n+            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n+        }\n+\n+        final Allele alleleRef;\n+        final Allele alleleAlt;\n+        final int obsRef, obsAlt;\n+        final boolean swap12 = snp.getAllele2() == refAllele;\n+\n+        if (swap12) {\n+            alleleRef = Allele.create(snp.getAllele2(), true);\n+            alleleAlt = Allele.create(snp.getAllele1(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele2();\n+            obsAlt = haplotypeProbabilities.getObsAllele1();\n+        } else {\n+            alleleRef = Allele.create(snp.getAllele1(), true);\n+            alleleAlt = Allele.create(snp.getAllele2(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele1();\n+            obsAlt = haplotypeProbabilities.getObsAllele2();\n+        }\n+\n+        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);\n+        if (swap12) {\n+            ArrayUtils.reverse(PLs);\n+        }\n+        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(haplotypeProbabilities.getLogLikelihoods())\n-                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n+                .PL(PLs)\n+                .AD(new int[]{obsAlt, obsRef})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzgwOA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422307808", "body": "```suggestion\r\n        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(), HaplotypeProbabilities.NUM_GENOTYPES);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);\n          \n          \n            \n                    final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(), HaplotypeProbabilities.NUM_GENOTYPES);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span>[] <span class=\"pl-smi\">PLs</span> <span class=\"pl-k\">=</span>  <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>copyOf(haplotypeProbabilities<span class=\"pl-k\">.</span>getLogLikelihoods(),<span class=\"pl-smi\">HaplotypeProbabilities</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NUM_GENOTYPES</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span>[] <span class=\"pl-smi\">PLs</span> <span class=\"pl-k\">=</span>  <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>copyOf(haplotypeProbabilities<span class=\"pl-k\">.</span>getLogLikelihoods(),<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">HaplotypeProbabilities</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NUM_GENOTYPES</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:43:00Z", "path": "src/main/java/picard/fingerprint/FingerprintUtils.java", "diffHunk": "@@ -137,15 +152,38 @@ private static VariantContext getVariantContext(final ReferenceSequenceFile refe\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n+            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n+        }\n+\n+        final Allele alleleRef;\n+        final Allele alleleAlt;\n+        final int obsRef, obsAlt;\n+        final boolean swap12 = snp.getAllele2() == refAllele;\n+\n+        if (swap12) {\n+            alleleRef = Allele.create(snp.getAllele2(), true);\n+            alleleAlt = Allele.create(snp.getAllele1(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele2();\n+            obsAlt = haplotypeProbabilities.getObsAllele1();\n+        } else {\n+            alleleRef = Allele.create(snp.getAllele1(), true);\n+            alleleAlt = Allele.create(snp.getAllele2(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele1();\n+            obsAlt = haplotypeProbabilities.getObsAllele2();\n+        }\n+\n+        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTMzNQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422309335", "bodyText": "Is there a reason to use NUM_GENOTYPES here instead of haplotypeProbabilities.getLogLikelihoods().length? Using length would make it clearer what the code is doing; it's copying the entire array.", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0MTY5OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424041698", "bodyText": "shorter? but OK.", "author": "yfarjoun", "createdAt": "2020-05-12T21:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 67cc7efb4..248b88377 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -173,7 +173,8 @@ public class FingerprintUtils {\n             obsAlt = haplotypeProbabilities.getObsAllele2();\n         }\n \n-        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);\n+        final double[] origPLs = haplotypeProbabilities.getLogLikelihoods();\n+        final double[] PLs =  Arrays.copyOf(origPLs,origPLs.length);\n         if (swap12) {\n             ArrayUtils.reverse(PLs);\n         }\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 248b88377..5b0e72b30 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -152,39 +137,15 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {\n-            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n-        }\n-\n-        final Allele alleleRef;\n-        final Allele alleleAlt;\n-        final int obsRef, obsAlt;\n-        final boolean swap12 = snp.getAllele2() == refAllele;\n-\n-        if (swap12) {\n-            alleleRef = Allele.create(snp.getAllele2(), true);\n-            alleleAlt = Allele.create(snp.getAllele1(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele2();\n-            obsAlt = haplotypeProbabilities.getObsAllele1();\n-        } else {\n-            alleleRef = Allele.create(snp.getAllele1(), true);\n-            alleleAlt = Allele.create(snp.getAllele2(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele1();\n-            obsAlt = haplotypeProbabilities.getObsAllele2();\n-        }\n-\n-        final double[] origPLs = haplotypeProbabilities.getLogLikelihoods();\n-        final double[] PLs =  Arrays.copyOf(origPLs,origPLs.length);\n-        if (swap12) {\n-            ArrayUtils.reverse(PLs);\n-        }\n-        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n+        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n+        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n+        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(PLs)\n-                .AD(new int[]{obsAlt, obsRef})\n+                .PL(haplotypeProbabilities.getLogLikelihoods())\n+                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 5b0e72b30..67cc7efb4 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -137,15 +152,38 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n+            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n+        }\n+\n+        final Allele alleleRef;\n+        final Allele alleleAlt;\n+        final int obsRef, obsAlt;\n+        final boolean swap12 = snp.getAllele2() == refAllele;\n+\n+        if (swap12) {\n+            alleleRef = Allele.create(snp.getAllele2(), true);\n+            alleleAlt = Allele.create(snp.getAllele1(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele2();\n+            obsAlt = haplotypeProbabilities.getObsAllele1();\n+        } else {\n+            alleleRef = Allele.create(snp.getAllele1(), true);\n+            alleleAlt = Allele.create(snp.getAllele2(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele1();\n+            obsAlt = haplotypeProbabilities.getObsAllele2();\n+        }\n+\n+        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);\n+        if (swap12) {\n+            ArrayUtils.reverse(PLs);\n+        }\n+        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(haplotypeProbabilities.getLogLikelihoods())\n-                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n+                .PL(PLs)\n+                .AD(new int[]{obsAlt, obsRef})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNTczNw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r422315737", "body": "You can avoid updating this if the type of `LOD_SCORE` ever changes by using `String.valueOf()`\r\n```suggestion\r\n                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\r\n```", "bodyText": "You can avoid updating this if the type of LOD_SCORE ever changes by using String.valueOf()\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n          \n          \n            \n                            .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));", "bodyHTML": "<p dir=\"auto\">You can avoid updating this if the type of <code>LOD_SCORE</code> ever changes by using <code>String.valueOf()</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>groupingBy(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">CollectionUtil</span><span class=\"pl-k\">.</span>makeSet(<span class=\"pl-smi\">s<span class=\"pl-k\">.</span>LEFT_GROUP_VALUE</span>, <span class=\"pl-smi\">s<span class=\"pl-k\">.</span>RIGHT_GROUP_VALUE</span>), <span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>mapping(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi x x-first\">Double</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString</span>(<span class=\"pl-smi\">s<span class=\"pl-k\">.</span>LOD_SCORE</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>), <span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet())));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>groupingBy(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">CollectionUtil</span><span class=\"pl-k\">.</span>makeSet(<span class=\"pl-smi\">s<span class=\"pl-k\">.</span>LEFT_GROUP_VALUE</span>, <span class=\"pl-smi\">s<span class=\"pl-k\">.</span>RIGHT_GROUP_VALUE</span>), <span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>mapping(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">valueOf</span>(<span class=\"pl-smi\">s<span class=\"pl-k\">.</span>LOD_SCORE</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>), <span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet())));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-08T18:58:57Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -203,7 +204,8 @@ public void testCheckFingerprintsSam(final File samFile1, final File samFile2, f\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n+//                we sometimes get -0.0, and so the comparison fails...\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0MjgxMA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424042810", "bodyText": "odd case to worry about...but OK.", "author": "yfarjoun", "createdAt": "2020-05-12T21:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNTczNw=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 8fe3bc6bb..3906cdd9a 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,11 +206,11 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collected = metrics.stream()\n-//                we sometimes get -0.0, and so the comparison fails...\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n+        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n+                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 3906cdd9a..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -206,11 +202,10 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n-                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n+        final Map<Set<String>, Set<String>> collected = metrics.stream()\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": {"commit": "4f2243826f55e20a9acf92f6ebe8ade592749b1c", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 16fcfb80d..8fe3bc6bb 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,7 +204,8 @@ public class FingerprintCheckerTest {\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n+//                we sometimes get -0.0, and so the comparison fails...\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n \n         for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 8fe3bc6bb..fb633ef35 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -205,7 +205,7 @@ public class FingerprintCheckerTest {\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n //                we sometimes get -0.0, and so the comparison fails...\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n         for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex fb633ef35..3906cdd9a 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,11 +206,11 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collected = metrics.stream()\n-//                we sometimes get -0.0, and so the comparison fails...\n+        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n+                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n                 .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyOTQ2NA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r423729464", "body": "This operation is also done in `CappedHaplotypeProbabilities`, would it make sense to make a method for it in `MathUtil`?", "bodyText": "This operation is also done in CappedHaplotypeProbabilities, would it make sense to make a method for it in MathUtil?", "bodyHTML": "<p dir=\"auto\">This operation is also done in <code>CappedHaplotypeProbabilities</code>, would it make sense to make a method for it in <code>MathUtil</code>?</p>", "author": "pshapiro4broad", "createdAt": "2020-05-12T13:24:36Z", "path": "src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java", "diffHunk": "@@ -168,11 +169,15 @@ public HaplotypeProbabilitiesUsingLogLikelihoods merge(final HaplotypeProbabilit\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                ()->\"logLikelihood must have length 3, found \" + ll.length);\n+                () -> \"logLikelihood must have length 3, found \" + ll.length);\n+\n+//        protect from underflow\n+        double max = MathUtil.max(ll);\n+        final double[] maxRemoved = MathUtil.sum(ll, -max);", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 1616bb808..64f32c017 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -171,9 +171,8 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n                 () -> \"logLikelihood must have length 3, found \" + ll.length);\n \n-//        protect from underflow\n-        double max = MathUtil.max(ll);\n-        final double[] maxRemoved = MathUtil.sum(ll, -max);\n+        // protect from underflow\n+        final double[] maxRemoved = MathUtil.subtractMax(ll);\n \n         double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n         // normalize log rawLikelihoods:\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 64f32c017..41b1dd88e 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -169,14 +168,11 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                () -> \"logLikelihood must have length 3, found \" + ll.length);\n-\n-        // protect from underflow\n-        final double[] maxRemoved = MathUtil.subtractMax(ll);\n+                ()->\"logLikelihood must have length 3, found \" + ll.length);\n \n-        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n+        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(ll));\n         // normalize log rawLikelihoods:\n-        System.arraycopy(MathUtil.sum(maxRemoved, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n+        System.arraycopy(MathUtil.sum(ll, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n \n         likelihoodsNeedUpdating = true;\n         updateDependentValues();\n", "next_change": {"commit": "6c0bf1ba11dcb061008b496bb78644210d91b2f8", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 41b1dd88e..1616bb808 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -168,11 +169,15 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                ()->\"logLikelihood must have length 3, found \" + ll.length);\n+                () -> \"logLikelihood must have length 3, found \" + ll.length);\n+\n+//        protect from underflow\n+        double max = MathUtil.max(ll);\n+        final double[] maxRemoved = MathUtil.sum(ll, -max);\n \n-        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(ll));\n+        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n         // normalize log rawLikelihoods:\n-        System.arraycopy(MathUtil.sum(ll, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n+        System.arraycopy(MathUtil.sum(maxRemoved, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n \n         likelihoodsNeedUpdating = true;\n         updateDependentValues();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 1616bb808..64f32c017 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -171,9 +171,8 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n                 () -> \"logLikelihood must have length 3, found \" + ll.length);\n \n-//        protect from underflow\n-        double max = MathUtil.max(ll);\n-        final double[] maxRemoved = MathUtil.sum(ll, -max);\n+        // protect from underflow\n+        final double[] maxRemoved = MathUtil.subtractMax(ll);\n \n         double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n         // normalize log rawLikelihoods:\n", "next_change": {"commit": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 64f32c017..0c85bf42b 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -169,7 +169,7 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                () -> \"logLikelihood must have length 3, found \" + ll.length);\n+                () -> String.format(\"logLikelihood must have length %d, found %d\", NUM_GENOTYPES, ll.length));\n \n         // protect from underflow\n         final double[] maxRemoved = MathUtil.subtractMax(ll);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNzU4MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r423737580", "body": "This looks like a different operation than `MathUtil.max(double[])`. The usual rule for overloaded methods is that the overloaded method should perform the same operation as the original. The main use of overloads is so you can provide default argument values. Maybe 'maxCap()` and 'minCap()`?", "bodyText": "This looks like a different operation than MathUtil.max(double[]). The usual rule for overloaded methods is that the overloaded method should perform the same operation as the original. The main use of overloads is so you can provide default argument values. Maybe 'maxCap() and 'minCap()?", "bodyHTML": "<p dir=\"auto\">This looks like a different operation than <code>MathUtil.max(double[])</code>. The usual rule for overloaded methods is that the overloaded method should perform the same operation as the original. The main use of overloads is so you can provide default argument values. Maybe 'maxCap()<code> and 'minCap()</code>?</p>", "author": "pshapiro4broad", "createdAt": "2020-05-12T13:35:32Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -168,6 +168,18 @@ public static double max(final double[] nums) {\n         return nums[indexOfMax(nums)];\n     }\n \n+    /**\n+     * Returns the array capped (from below) by the value of scalar\n+     */\n+    public static double[] max(final double[] nums, final double scalar) {", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex e8d45369c..b37f23c0a 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -169,15 +169,14 @@ final public class MathUtil {\n     }\n \n     /**\n-     * Returns the array capped (from below) by the value of scalar\n+     * Returns the array capped (from below) by the value of floor\n      */\n-    public static double[] max(final double[] nums, final double scalar) {\n-        final double[] max = new double[nums.length];\n+    public static double[] capFromBelow(final double[] nums, final double floor) {\n+        final double[] floored = new double[nums.length];\n         for (int i = 0; i < nums.length; ++i) {\n-            max[i] = Math.max(nums[i], scalar);\n+            floored[i] = Math.max(nums[i], floor);\n         }\n-\n-        return max;\n+        return floored;\n     }\n \n     /**\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex b37f23c0a..96d1357ae 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -168,17 +168,6 @@ final public class MathUtil {\n         return nums[indexOfMax(nums)];\n     }\n \n-    /**\n-     * Returns the array capped (from below) by the value of floor\n-     */\n-    public static double[] capFromBelow(final double[] nums, final double floor) {\n-        final double[] floored = new double[nums.length];\n-        for (int i = 0; i < nums.length; ++i) {\n-            floored[i] = Math.max(nums[i], floor);\n-        }\n-        return floored;\n-    }\n-\n     /**\n      * Returns the index of the largest element in the array.  If there are multiple equal maxima then\n      * the earliest one in the array is returned.\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 96d1357ae..962ca9ba6 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -168,6 +168,18 @@ final public class MathUtil {\n         return nums[indexOfMax(nums)];\n     }\n \n+    /**\n+     * Returns the array capped (from below) by the value of scalar\n+     */\n+    public static double[] max(final double[] nums, final double scalar) {\n+        final double[] max = new double[nums.length];\n+        for (int i = 1; i < nums.length; ++i) {\n+            max[i] = Math.max(nums[i], scalar);\n+        }\n+\n+        return max;\n+    }\n+\n     /**\n      * Returns the index of the largest element in the array.  If there are multiple equal maxima then\n      * the earliest one in the array is returned.\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 962ca9ba6..b37f23c0a 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -169,15 +169,14 @@ final public class MathUtil {\n     }\n \n     /**\n-     * Returns the array capped (from below) by the value of scalar\n+     * Returns the array capped (from below) by the value of floor\n      */\n-    public static double[] max(final double[] nums, final double scalar) {\n-        final double[] max = new double[nums.length];\n-        for (int i = 1; i < nums.length; ++i) {\n-            max[i] = Math.max(nums[i], scalar);\n+    public static double[] capFromBelow(final double[] nums, final double floor) {\n+        final double[] floored = new double[nums.length];\n+        for (int i = 0; i < nums.length; ++i) {\n+            floored[i] = Math.max(nums[i], floor);\n         }\n-\n-        return max;\n+        return floored;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczODIyOQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r423738229", "body": "whitespace typo\r\n```suggestion\r\n    public void testSummaryAndDetailOutputs() {\r\n```", "bodyText": "whitespace typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void     testSummaryAndDetailOutputs() {\n          \n          \n            \n                public void testSummaryAndDetailOutputs() {", "bodyHTML": "<p dir=\"auto\">whitespace typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">    </span>testSummaryAndDetailOutputs() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testSummaryAndDetailOutputs() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-12T13:36:23Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -116,7 +119,7 @@ public void testMismatchingSamples2() {\n     }\n \n     @Test\n-    public void testSummaryAndDetailOutputs() {\n+    public void     testSummaryAndDetailOutputs() {", "originalCommit": "dd0f393166439fde9dda25cf8b2fcdb190548291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -119,7 +126,7 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n     }\n \n     @Test\n-    public void     testSummaryAndDetailOutputs() {\n+    public void testSummaryAndDetailOutputs() {\n         String[] args = new String[]{\n                 \"I=\" + TEST_INPUT_VCF1,\n                 \"S=\" + TEST_DATA_DIR + \"/tempCheckFPDir/summary\",\n", "next_change": {"commit": "4f2243826f55e20a9acf92f6ebe8ade592749b1c", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..14d0e30f4 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -126,7 +119,7 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n     }\n \n     @Test\n-    public void testSummaryAndDetailOutputs() {\n+    public void     testSummaryAndDetailOutputs() {\n         String[] args = new String[]{\n                 \"I=\" + TEST_INPUT_VCF1,\n                 \"S=\" + TEST_DATA_DIR + \"/tempCheckFPDir/summary\",\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -119,7 +126,7 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n     }\n \n     @Test\n-    public void     testSummaryAndDetailOutputs() {\n+    public void testSummaryAndDetailOutputs() {\n         String[] args = new String[]{\n                 \"I=\" + TEST_INPUT_VCF1,\n                 \"S=\" + TEST_DATA_DIR + \"/tempCheckFPDir/summary\",\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMjM0MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424522340", "body": "Would it be odd for `Fingerprint.merge()` to return itself? that would make streaming ops like this a bit cleaner to write.", "bodyText": "Would it be odd for Fingerprint.merge() to return itself? that would make streaming ops like this a bit cleaner to write.", "bodyHTML": "<p dir=\"auto\">Would it be odd for <code>Fingerprint.merge()</code> to return itself? that would make streaming ops like this a bit cleaner to write.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:19:40Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -181,6 +185,62 @@ public void testIdentifyContaminant() {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n+    @Test\n+    public void testFPToVC() throws IOException {\n+\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n+                \"NA12892\",null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce((a, b) -> {\n+                    a.merge(b);", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3ODQ2Ng==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r431278466", "bodyText": "good idea.", "author": "yfarjoun", "createdAt": "2020-05-27T16:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMjM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -191,36 +198,29 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n         final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n \n-       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n \n         checker.setLocusMaxReads(100);\n         final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n         Assert.assertNotNull(fingerprint);\n \n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n         tempFile.deleteOnExit();\n \n-        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n-                \"NA12892\",null);\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n \n         final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n         Assert.assertNotNull(NA12892FromVCF);\n \n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n \n-\n         final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n         Assert.assertNotNull(NA12891_fp);\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..7ffccdb00 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -192,47 +181,15 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Test\n-    public void testFPToVC() throws IOException {\n-\n-        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n-        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n-\n-        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n-\n-        checker.setLocusMaxReads(100);\n-        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n-        Assert.assertNotNull(fingerprint);\n-\n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n-        tempFile.deleteOnExit();\n-\n-        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n-                \"NA12892\", null);\n-\n-        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n-        Assert.assertNotNull(NA12892FromVCF);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n-\n-        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12891_fp);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n-\n-        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12892_fp);\n+    @Override\n+    public String getCommandLineProgramName() {\n+        return CheckFingerprint.class.getSimpleName();\n+    }\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n+        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 7ffccdb00..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -181,15 +192,47 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n+    @Test\n+    public void testFPToVC() throws IOException {\n \n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMjY1OQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424522659", "body": "whitespace\r\n```suggestion\r\n        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\r\n```", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n          \n          \n            \n                    final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"pl-k\">final</span> <span class=\"pl-smi\">FingerprintChecker</span> checker <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FingerprintChecker</span>(<span class=\"pl-c1\">SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"x x-first x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">FingerprintChecker</span> checker <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FingerprintChecker</span>(<span class=\"pl-c1\">SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:20:02Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -181,6 +185,62 @@ public void testIdentifyContaminant() {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n+    @Test\n+    public void testFPToVC() throws IOException {\n+\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -191,36 +198,29 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n         final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n \n-       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n \n         checker.setLocusMaxReads(100);\n         final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n         Assert.assertNotNull(fingerprint);\n \n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n         tempFile.deleteOnExit();\n \n-        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n-                \"NA12892\",null);\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n \n         final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n         Assert.assertNotNull(NA12892FromVCF);\n \n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n \n-\n         final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n         Assert.assertNotNull(NA12891_fp);\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..7ffccdb00 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -192,47 +181,15 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Test\n-    public void testFPToVC() throws IOException {\n-\n-        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n-        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n-\n-        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n-\n-        checker.setLocusMaxReads(100);\n-        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n-        Assert.assertNotNull(fingerprint);\n-\n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n-        tempFile.deleteOnExit();\n-\n-        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n-                \"NA12892\", null);\n-\n-        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n-        Assert.assertNotNull(NA12892FromVCF);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n-\n-        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12891_fp);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n-\n-        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12892_fp);\n+    @Override\n+    public String getCommandLineProgramName() {\n+        return CheckFingerprint.class.getSimpleName();\n+    }\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n+        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 7ffccdb00..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -181,15 +192,47 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n+    @Test\n+    public void testFPToVC() throws IOException {\n \n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMjgyMA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424522820", "body": "whitespace\r\n```suggestion\r\n        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\r\n```", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n          \n          \n            \n                    final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">File</span> tempFile <span class=\"pl-k\">=</span> <span class=\"pl-smi\">File</span><span class=\"pl-k\">.</span>createTempFile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testWriteFingerprint<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.vcf<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">File</span> tempFile <span class=\"pl-k\">=</span> <span class=\"pl-smi\">File</span><span class=\"pl-k\">.</span>createTempFile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testWriteFingerprint<span class=\"pl-pds\">\"</span></span>,<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.vcf<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:20:16Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -181,6 +185,62 @@ public void testIdentifyContaminant() {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n+    @Test\n+    public void testFPToVC() throws IOException {\n+\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -191,36 +198,29 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n         final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n \n-       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n \n         checker.setLocusMaxReads(100);\n         final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n         Assert.assertNotNull(fingerprint);\n \n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n         tempFile.deleteOnExit();\n \n-        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n-                \"NA12892\",null);\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n \n         final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n         Assert.assertNotNull(NA12892FromVCF);\n \n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n \n-\n         final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n         Assert.assertNotNull(NA12891_fp);\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..7ffccdb00 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -192,47 +181,15 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Test\n-    public void testFPToVC() throws IOException {\n-\n-        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n-        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n-\n-        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n-\n-        checker.setLocusMaxReads(100);\n-        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n-        Assert.assertNotNull(fingerprint);\n-\n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n-        tempFile.deleteOnExit();\n-\n-        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n-                \"NA12892\", null);\n-\n-        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n-        Assert.assertNotNull(NA12892FromVCF);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n-\n-        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12891_fp);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n-\n-        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12892_fp);\n+    @Override\n+    public String getCommandLineProgramName() {\n+        return CheckFingerprint.class.getSimpleName();\n+    }\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n+        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 7ffccdb00..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -181,15 +192,47 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n+    @Test\n+    public void testFPToVC() throws IOException {\n \n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzAxOQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424523019", "body": "whitespace\r\n```suggestion\r\n        FingerprintUtils.writeFingerPrint(fingerprint,tempFile, SHIFTED_REFERENCE,\r\n                        \"NA12892\", null);\r\n```", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n          \n          \n            \n                    FingerprintUtils.writeFingerPrint(fingerprint,tempFile, SHIFTED_REFERENCE,\n          \n          \n            \n                                    \"NA12892\", null);", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">FingerprintUtils</span><span class=\"pl-k\">.</span>writeFingerPrint(fingerprint,tempFile,<span class=\"pl-c1\">SHIFTED_REFERENCE</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">FingerprintUtils</span><span class=\"pl-k\">.</span>writeFingerPrint(fingerprint,tempFile,<span class=\"x x-first x-last\"> </span><span class=\"pl-c1\">SHIFTED_REFERENCE</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NA12892<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">null</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:20:34Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -181,6 +185,62 @@ public void testIdentifyContaminant() {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n+    @Test\n+    public void testFPToVC() throws IOException {\n+\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -191,36 +198,29 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n         final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n \n-       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n \n         checker.setLocusMaxReads(100);\n         final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n         Assert.assertNotNull(fingerprint);\n \n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n         tempFile.deleteOnExit();\n \n-        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n-                \"NA12892\",null);\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n \n         final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n         Assert.assertNotNull(NA12892FromVCF);\n \n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n \n-\n         final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n         Assert.assertNotNull(NA12891_fp);\n \n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..7ffccdb00 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -192,47 +181,15 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Test\n-    public void testFPToVC() throws IOException {\n-\n-        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n-        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n-\n-        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n-\n-        checker.setLocusMaxReads(100);\n-        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n-        Assert.assertNotNull(fingerprint);\n-\n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n-        tempFile.deleteOnExit();\n-\n-        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n-                \"NA12892\", null);\n-\n-        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n-        Assert.assertNotNull(NA12892FromVCF);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n-\n-        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12891_fp);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n-\n-        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12892_fp);\n+    @Override\n+    public String getCommandLineProgramName() {\n+        return CheckFingerprint.class.getSimpleName();\n+    }\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n+        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 7ffccdb00..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -181,15 +192,47 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n+    @Test\n+    public void testFPToVC() throws IOException {\n \n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzU2OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424523568", "body": "more whitespace.\r\n```suggestion\r\n        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\r\n```", "bodyText": "more whitespace.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() >1D);\n          \n          \n            \n                    Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);", "bodyHTML": "<p dir=\"auto\">more whitespace.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertTrue(<span class=\"pl-smi\">FingerprintChecker</span><span class=\"pl-k\">.</span>calculateMatchResults(<span class=\"pl-smi\">NA12892FromVCF</span>, <span class=\"pl-smi\">NA12892_fp</span>)<span class=\"pl-k\">.</span>getLOD() <span class=\"pl-k\">&gt;</span><span class=\"pl-c1\">1D</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertTrue(<span class=\"pl-smi\">FingerprintChecker</span><span class=\"pl-k\">.</span>calculateMatchResults(<span class=\"pl-smi\">NA12892FromVCF</span>, <span class=\"pl-smi\">NA12892_fp</span>)<span class=\"pl-k\">.</span>getLOD() <span class=\"pl-k\">&gt;</span><span class=\"x x-first x-last\"> </span><span class=\"pl-c1\">1D</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:21:17Z", "path": "src/test/java/picard/fingerprint/CheckFingerprintTest.java", "diffHunk": "@@ -181,6 +185,62 @@ public void testIdentifyContaminant() {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n+    @Test\n+    public void testFPToVC() throws IOException {\n+\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+       final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\",\".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint,tempFile,SHIFTED_REFERENCE,\n+                \"NA12892\",null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce((a, b) -> {\n+                    a.merge(b);\n+                    return a;\n+                })\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce((a, b) -> {\n+                    a.merge(b);\n+                    return a;\n+                })\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce((a, b) -> {\n+                    a.merge(b);\n+                    return a;\n+                })\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() >1D);", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 14d0e30f4..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -228,28 +228,11 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n \n         final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n                 .values().stream()\n-                .reduce((a, b) -> {\n-                    a.merge(b);\n-                    return a;\n-                })\n+                .reduce(Fingerprint::merge)\n                 .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n         Assert.assertNotNull(NA12892_fp);\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() >1D);\n-    }\n-\n-\n-\n-\n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n-\n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 03c8dcda1..7ffccdb00 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -192,47 +181,15 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Test\n-    public void testFPToVC() throws IOException {\n-\n-        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n-        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n-\n-        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n-\n-        checker.setLocusMaxReads(100);\n-        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n-        Assert.assertNotNull(fingerprint);\n-\n-        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n-        tempFile.deleteOnExit();\n-\n-        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n-                \"NA12892\", null);\n-\n-        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n-        Assert.assertNotNull(NA12892FromVCF);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n-\n-        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12891_fp);\n-\n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n-\n-        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n-                .values().stream()\n-                .reduce(Fingerprint::merge)\n-                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n-        Assert.assertNotNull(NA12892_fp);\n+    @Override\n+    public String getCommandLineProgramName() {\n+        return CheckFingerprint.class.getSimpleName();\n+    }\n \n-        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n+        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/CheckFingerprintTest.java b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\nindex 7ffccdb00..03c8dcda1 100644\n--- a/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n+++ b/src/test/java/picard/fingerprint/CheckFingerprintTest.java\n", "chunk": "@@ -181,15 +192,47 @@ public class CheckFingerprintTest extends CommandLineProgramTest {\n         Assert.assertTrue(FingerprintChecker.calculateMatchResults(fpContaminant, fpContaminated).getLOD() < -4D);\n     }\n \n-    @Override\n-    public String getCommandLineProgramName() {\n-        return CheckFingerprint.class.getSimpleName();\n-    }\n+    @Test\n+    public void testFPToVC() throws IOException {\n \n-    @BeforeClass\n-    public void setup() throws IOException {\n-        NA12891_named_NA12892_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12891_named_NA12892.vcf\"), \"fingerprint\");\n-        NA12892_1_vcf = VcfTestUtils.createTemporaryIndexedVcfFromInput(new File(TEST_DATA_DIR, \"NA12892.vcf\"), \"fingerprint\");\n+        final File Na12892 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.shifted.for.crams.r1.sam\");\n+        final File Na12891 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.shifted.for.crams.r1.sam\");\n+\n+        final FingerprintChecker checker = new FingerprintChecker(SHIFTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+\n+        checker.setLocusMaxReads(100);\n+        final Fingerprint fingerprint = checker.identifyContaminant(Na12892.toPath(), 1).get(\"NA12892\");\n+        Assert.assertNotNull(fingerprint);\n+\n+        final File tempFile = File.createTempFile(\"testWriteFingerprint\", \".vcf\");\n+        tempFile.deleteOnExit();\n+\n+        FingerprintUtils.writeFingerPrint(fingerprint, tempFile, SHIFTED_REFERENCE,\n+                \"NA12892\", null);\n+\n+        final Fingerprint NA12892FromVCF = checker.fingerprintFiles(Collections.singleton(tempFile.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminant\"));\n+        Assert.assertNotNull(NA12892FromVCF);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(fingerprint, NA12892FromVCF).getLOD() > 1D);\n+\n+        final Fingerprint NA12891_fp = checker.fingerprintFiles(Collections.singleton(Na12891.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12891_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12891_fp, NA12892FromVCF).getLOD() < -4D);\n+\n+        final Fingerprint NA12892_fp = checker.fingerprintFiles(Collections.singleton(Na12892.toPath()), 1, 1, TimeUnit.DAYS)\n+                .values().stream()\n+                .reduce(Fingerprint::merge)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Did not find any data for contaminated\"));\n+        Assert.assertNotNull(NA12892_fp);\n+\n+        Assert.assertTrue(FingerprintChecker.calculateMatchResults(NA12892FromVCF, NA12892_fp).getLOD() > 1D);\n     }\n \n     @DataProvider(name = \"samsToFingerprint\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNTA0Nw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r424525047", "body": "unless you're commenting out code, `//` comments should left align with the current indent line.", "bodyText": "unless you're commenting out code, // comments should left align with the current indent line.", "bodyHTML": "<p dir=\"auto\">unless you're commenting out code, <code>//</code> comments should left align with the current indent line.</p>", "author": "pshapiro4broad", "createdAt": "2020-05-13T15:23:13Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -203,7 +204,8 @@ public void testCheckFingerprintsSam(final File samFile1, final File samFile2, f\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n+//                we sometimes get -0.0, and so the comparison fails...", "originalCommit": "b4e687e1ab780bf8e8c6d58a689227fffd272dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex fb633ef35..3906cdd9a 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,11 +206,11 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collected = metrics.stream()\n-//                we sometimes get -0.0, and so the comparison fails...\n+        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n+                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n                 .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 3906cdd9a..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -206,11 +202,10 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n-                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n+        final Map<Set<String>, Set<String>> collected = metrics.stream()\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": {"commit": "4f2243826f55e20a9acf92f6ebe8ade592749b1c", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 16fcfb80d..8fe3bc6bb 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,7 +204,8 @@ public class FingerprintCheckerTest {\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> s.LOD_SCORE.toString(), Collectors.toSet())));\n+//                we sometimes get -0.0, and so the comparison fails...\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n \n         for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n", "next_change": {"commit": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 8fe3bc6bb..fb633ef35 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -205,7 +205,7 @@ public class FingerprintCheckerTest {\n \n         final Map<Set<String>, Set<String>> collected = metrics.stream()\n //                we sometimes get -0.0, and so the comparison fails...\n-                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> Double.toString(s.LOD_SCORE + 0), Collectors.toSet())));\n+                .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n         for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n             if (entry.getValue().size() > 1) {\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex fb633ef35..3906cdd9a 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n", "chunk": "@@ -203,11 +206,11 @@ public class FingerprintCheckerTest {\n         metricsFileReader.read(new FileReader(metricsFile));\n         final List<CrosscheckMetric> metrics = metricsFileReader.getMetrics();\n \n-        final Map<Set<String>, Set<String>> collected = metrics.stream()\n-//                we sometimes get -0.0, and so the comparison fails...\n+        final Map<Set<String>, Set<String>> collectedLOD = metrics.stream()\n+                // we sometimes get -0.0, and so the comparison fails...hence the 'String.valueOf(s.LOD_SCORE + 0)'\n                 .collect(Collectors.groupingBy(s -> CollectionUtil.makeSet(s.LEFT_GROUP_VALUE, s.RIGHT_GROUP_VALUE), Collectors.mapping(s -> String.valueOf(s.LOD_SCORE + 0), Collectors.toSet())));\n \n-        for (Map.Entry<Set<String>, Set<String>> entry : collected.entrySet()) {\n+        for (Map.Entry<Set<String>, Set<String>> entry : collectedLOD.entrySet()) {\n             if (entry.getValue().size() > 1) {\n \n                 final List<CrosscheckMetric> mismatchingMetrics = metrics.stream()\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "url": "https://github.com/broadinstitute/picard/commit/1e2562d57d409510b99a64ed5c18d521d73d6f69", "message": "- this is the bugfix for the tumor normal bug", "committedDate": "2020-05-29T21:39:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4Mzc5Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r433283793", "body": "```suggestion\r\n     * Returns the array capped (from above) by the value of top\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the array capped (from above) by the value of floor\n          \n          \n            \n                 * Returns the array capped (from above) by the value of top", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> the array capped (from above) by the value of <span class=\"x x-first x-last\">floor</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> the array capped (from above) by the value of <span class=\"x x-first x-last\">top</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-06-01T14:55:30Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -251,6 +271,18 @@ public static byte min(final byte[] nums) {\n         return min;\n     }\n \n+    /**\n+     * Returns the array capped (from above) by the value of floor", "originalCommit": "1e2562d57d409510b99a64ed5c18d521d73d6f69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex b37f23c0a..96d1357ae 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -271,18 +251,6 @@ final public class MathUtil {\n         return min;\n     }\n \n-    /**\n-     * Returns the array capped (from above) by the value of floor\n-     */\n-    public static double[] capFromAbove(final double[] nums, final double top) {\n-        final double[] capped = new double[nums.length];\n-        for (int i = 0; i < nums.length; ++i) {\n-            capped[i] = Math.min(nums[i], top);\n-        }\n-\n-        return capped;\n-    }\n-\n     /**\n      * Returns the index of the smallest element in the array.  If there are multiple equal minima then\n      * the earliest one in the array is returned.\n", "next_change": {"commit": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 96d1357ae..962ca9ba6 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -251,6 +263,18 @@ final public class MathUtil {\n         return min;\n     }\n \n+    /**\n+     * Returns the array capped by the value of scalar\n+     */\n+    public static double[] min(final double[] nums, final double scalar) {\n+        final double[] min = new double[nums.length];\n+        for (int i = 1; i < nums.length; ++i) {\n+            min[i] = Math.min(nums[i], scalar);\n+        }\n+\n+        return min;\n+    }\n+\n     /**\n      * Returns the index of the smallest element in the array.  If there are multiple equal minima then\n      * the earliest one in the array is returned.\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 962ca9ba6..b37f23c0a 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -264,15 +272,15 @@ final public class MathUtil {\n     }\n \n     /**\n-     * Returns the array capped by the value of scalar\n+     * Returns the array capped (from above) by the value of floor\n      */\n-    public static double[] min(final double[] nums, final double scalar) {\n-        final double[] min = new double[nums.length];\n-        for (int i = 1; i < nums.length; ++i) {\n-            min[i] = Math.min(nums[i], scalar);\n+    public static double[] capFromAbove(final double[] nums, final double top) {\n+        final double[] capped = new double[nums.length];\n+        for (int i = 0; i < nums.length; ++i) {\n+            capped[i] = Math.min(nums[i], top);\n         }\n \n-        return min;\n+        return capped;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwMTU1NQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r433901555", "body": "must have length 3, or must have length NUM_GENOTYPES?", "bodyText": "must have length 3, or must have length NUM_GENOTYPES?", "bodyHTML": "<p dir=\"auto\">must have length 3, or must have length NUM_GENOTYPES?</p>", "author": "fleharty", "createdAt": "2020-06-02T14:03:58Z", "path": "src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java", "diffHunk": "@@ -168,11 +169,14 @@ public HaplotypeProbabilitiesUsingLogLikelihoods merge(final HaplotypeProbabilit\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                ()->\"logLikelihood must have length 3, found \" + ll.length);\n+                () -> \"logLikelihood must have length 3, found \" + ll.length);", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxOTE4Nw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435319187", "bodyText": "it's the same. I just don't like magic numbers in the code...I mind them less in error messages, but I'm happy to change it.", "author": "yfarjoun", "createdAt": "2020-06-04T14:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwMTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 64f32c017..41b1dd88e 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -169,14 +168,11 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                () -> \"logLikelihood must have length 3, found \" + ll.length);\n-\n-        // protect from underflow\n-        final double[] maxRemoved = MathUtil.subtractMax(ll);\n+                ()->\"logLikelihood must have length 3, found \" + ll.length);\n \n-        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n+        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(ll));\n         // normalize log rawLikelihoods:\n-        System.arraycopy(MathUtil.sum(maxRemoved, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n+        System.arraycopy(MathUtil.sum(ll, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n \n         likelihoodsNeedUpdating = true;\n         updateDependentValues();\n", "next_change": {"commit": "6c0bf1ba11dcb061008b496bb78644210d91b2f8", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 41b1dd88e..1616bb808 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -168,11 +169,15 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                ()->\"logLikelihood must have length 3, found \" + ll.length);\n+                () -> \"logLikelihood must have length 3, found \" + ll.length);\n+\n+//        protect from underflow\n+        double max = MathUtil.max(ll);\n+        final double[] maxRemoved = MathUtil.sum(ll, -max);\n \n-        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(ll));\n+        double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n         // normalize log rawLikelihoods:\n-        System.arraycopy(MathUtil.sum(ll, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n+        System.arraycopy(MathUtil.sum(maxRemoved, -Math.log10(sum)), 0, loglikelihoods, 0, NUM_GENOTYPES);\n \n         likelihoodsNeedUpdating = true;\n         updateDependentValues();\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 1616bb808..64f32c017 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -171,9 +171,8 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n                 () -> \"logLikelihood must have length 3, found \" + ll.length);\n \n-//        protect from underflow\n-        double max = MathUtil.max(ll);\n-        final double[] maxRemoved = MathUtil.sum(ll, -max);\n+        // protect from underflow\n+        final double[] maxRemoved = MathUtil.subtractMax(ll);\n \n         double sum = MathUtil.sum(MathUtil.getProbabilityFromLog(maxRemoved));\n         // normalize log rawLikelihoods:\n", "next_change": {"commit": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\nindex 64f32c017..0c85bf42b 100644\n--- a/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n+++ b/src/main/java/picard/fingerprint/HaplotypeProbabilitiesUsingLogLikelihoods.java\n", "chunk": "@@ -169,7 +169,7 @@ abstract class HaplotypeProbabilitiesUsingLogLikelihoods extends HaplotypeProbab\n \n     public void setLogLikelihoods(final double[] ll) {\n         ValidationUtils.validateArg(ll.length == NUM_GENOTYPES,\n-                () -> \"logLikelihood must have length 3, found \" + ll.length);\n+                () -> String.format(\"logLikelihood must have length %d, found %d\", NUM_GENOTYPES, ll.length));\n \n         // protect from underflow\n         final double[] maxRemoved = MathUtil.subtractMax(ll);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyNzk3MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r433927970", "body": "Could you add unit tests for this function.", "bodyText": "Could you add unit tests for this function.", "bodyHTML": "<p dir=\"auto\">Could you add unit tests for this function.</p>", "author": "fleharty", "createdAt": "2020-06-02T14:38:33Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -209,6 +220,15 @@ public static int indexOfMax(final long[] nums) {\n         return index;\n     }\n \n+    /* Find the maximal value of the array and return a new array\n+    consisting of that value subtracted from the original array\n+     */\n+    public static double[] subtractMax(final double[] logLikelihoods) {", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMTU4MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435321580", "bodyText": "sure.", "author": "yfarjoun", "createdAt": "2020-06-04T14:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyNzk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex b56f6ab52..96d1357ae 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -220,15 +209,6 @@ final public class MathUtil {\n         return index;\n     }\n \n-    /* Find the maximal value of the array and return a new array\n-    consisting of that value subtracted from the original array\n-     */\n-    public static double[] subtractMax(final double[] logLikelihoods) {\n-        final double max = MathUtil.max(logLikelihoods);\n-        return MathUtil.sum(logLikelihoods, -max);\n-    }\n-\n-\n     /**\n      * Returns the smallest value stored in the array.\n      */\n", "next_change": {"commit": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "changed_code": [{"header": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 96d1357ae..b37f23c0a 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n", "chunk": "@@ -209,6 +220,15 @@ final public class MathUtil {\n         return index;\n     }\n \n+    /* Find the maximal value of the array and return a new array\n+    consisting of that value subtracted from the original array\n+     */\n+    public static double[] subtractMax(final double[] logLikelihoods) {\n+        final double max = MathUtil.max(logLikelihoods);\n+        return MathUtil.sum(logLikelihoods, -max);\n+    }\n+\n+\n     /**\n      * Returns the smallest value stored in the array.\n      */\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NjU1Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r434746553", "body": "2020, and in a few other files.", "bodyText": "2020, and in a few other files.", "bodyHTML": "<p dir=\"auto\">2020, and in a few other files.</p>", "author": "fleharty", "createdAt": "2020-06-03T17:47:18Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMjYxNw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435322617", "bodyText": "Only changing new files.", "author": "yfarjoun", "createdAt": "2020-06-04T14:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NjU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..554300296 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -1,7 +1,7 @@\n /*\n  * The MIT License\n  *\n- * Copyright (c) 2018 The Broad Institute\n+ * Copyright (c) 2020 The Broad Institute\n  *\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NzU2OA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r434747568", "body": "Is this true that this limits the effect any locus can have, and if so, isn't 200 really a lot?  Why not 30 or 50?", "bodyText": "Is this true that this limits the effect any locus can have, and if so, isn't 200 really a lot?  Why not 30 or 50?", "bodyHTML": "<p dir=\"auto\">Is this true that this limits the effect any locus can have, and if so, isn't 200 really a lot?  Why not 30 or 50?</p>", "author": "fleharty", "createdAt": "2020-06-03T17:48:58Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Program to create a fingerprint for the <b>contaminating</b> sample when the level of contamination is both known and\n+ * uniform in the genome.\n+ *\n+ * @author Yossi Farjoun\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Computes/Extracts the fingerprint genotype likelihoods from the supplied SAM/BAM/VCF file.\" +\n+                \"It is given as a list of PLs at the fingerprinting sites.\",\n+        oneLineSummary = \"Computes a fingerprint from the supplied SAM/BAM file.\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class)\n+\n+public class ExtractFingerprint extends CommandLineProgram {\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"Input SAM or BAM file.\")\n+    public File INPUT;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output fingerprint file (VCF).\")\n+    public File OUTPUT;\n+\n+    @Argument(shortName = \"H\", doc = \"A file of haplotype information. The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting. See \" +\n+            \"https://software.broadinstitute.org/gatk/documentation/article?id=9526 for details.\")\n+    public File HAPLOTYPE_MAP;\n+\n+    @Argument(shortName = \"C\", doc = \"A value of estimated contamination in the input. A non-zero value will cause the program to provide a better estimate of the fingerprint in the presence of contaminating reads\",\n+            minValue = 0D, maxValue = 1D)\n+    public double CONTAMINATION;\n+\n+    @Argument(doc = \"The sample alias to associate with the resulting fingerprint. When null, <SAMPLE> is extracted from the input file and \\\"<SAMPLE>\\\" is used. \" +\n+            \"If argument EXTRACT_CONTAMINATION=true the resulting samplename will be \\\"<SAMPLE>-contamination\\\" (if not provided).\", optional = true)\n+    public String SAMPLE_ALIAS = null;\n+\n+    @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n+            \"effect that any given locus may have.\")", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMzc4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435323786", "bodyText": "ok. going with 50. :-)", "author": "yfarjoun", "createdAt": "2020-06-04T14:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..554300296 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -69,10 +69,10 @@ public class ExtractFingerprint extends CommandLineProgram {\n \n     @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n             \"effect that any given locus may have.\")\n-    public int LOCUS_MAX_READS = 200;\n+    public int LOCUS_MAX_READS = 50;\n \n-    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n-            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")\n+    @Argument(doc = \"Extract a fingerprint for the contaminating sample (instead of the contaminated sample). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminant, using the SM value from the SAM header.\")\n     public boolean EXTRACT_CONTAMINATION = false;\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2OTEwMA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r434769100", "body": "<SAMPLE>-contamination", "bodyText": "-contamination", "bodyHTML": "<p dir=\"auto\">-contamination</p>", "author": "fleharty", "createdAt": "2020-06-03T18:26:16Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Program to create a fingerprint for the <b>contaminating</b> sample when the level of contamination is both known and\n+ * uniform in the genome.\n+ *\n+ * @author Yossi Farjoun\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Computes/Extracts the fingerprint genotype likelihoods from the supplied SAM/BAM/VCF file.\" +\n+                \"It is given as a list of PLs at the fingerprinting sites.\",\n+        oneLineSummary = \"Computes a fingerprint from the supplied SAM/BAM file.\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class)\n+\n+public class ExtractFingerprint extends CommandLineProgram {\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"Input SAM or BAM file.\")\n+    public File INPUT;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output fingerprint file (VCF).\")\n+    public File OUTPUT;\n+\n+    @Argument(shortName = \"H\", doc = \"A file of haplotype information. The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting. See \" +\n+            \"https://software.broadinstitute.org/gatk/documentation/article?id=9526 for details.\")\n+    public File HAPLOTYPE_MAP;\n+\n+    @Argument(shortName = \"C\", doc = \"A value of estimated contamination in the input. A non-zero value will cause the program to provide a better estimate of the fingerprint in the presence of contaminating reads\",\n+            minValue = 0D, maxValue = 1D)\n+    public double CONTAMINATION;\n+\n+    @Argument(doc = \"The sample alias to associate with the resulting fingerprint. When null, <SAMPLE> is extracted from the input file and \\\"<SAMPLE>\\\" is used. \" +\n+            \"If argument EXTRACT_CONTAMINATION=true the resulting samplename will be \\\"<SAMPLE>-contamination\\\" (if not provided).\", optional = true)\n+    public String SAMPLE_ALIAS = null;\n+\n+    @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n+            \"effect that any given locus may have.\")\n+    public int LOCUS_MAX_READS = 200;\n+\n+    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNTYwNQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435325605", "bodyText": "oops.", "author": "yfarjoun", "createdAt": "2020-06-04T14:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2OTEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..554300296 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -69,10 +69,10 @@ public class ExtractFingerprint extends CommandLineProgram {\n \n     @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n             \"effect that any given locus may have.\")\n-    public int LOCUS_MAX_READS = 200;\n+    public int LOCUS_MAX_READS = 50;\n \n-    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n-            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")\n+    @Argument(doc = \"Extract a fingerprint for the contaminating sample (instead of the contaminated sample). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminant, using the SM value from the SAM header.\")\n     public boolean EXTRACT_CONTAMINATION = false;\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MDE0MA==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r434770140", "body": "Would this be better as a try-with-resources block?", "bodyText": "Would this be better as a try-with-resources block?", "bodyHTML": "<p dir=\"auto\">Would this be better as a try-with-resources block?</p>", "author": "fleharty", "createdAt": "2020-06-03T18:28:08Z", "path": "src/main/java/picard/fingerprint/ExtractFingerprint.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2018 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Program to create a fingerprint for the <b>contaminating</b> sample when the level of contamination is both known and\n+ * uniform in the genome.\n+ *\n+ * @author Yossi Farjoun\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Computes/Extracts the fingerprint genotype likelihoods from the supplied SAM/BAM/VCF file.\" +\n+                \"It is given as a list of PLs at the fingerprinting sites.\",\n+        oneLineSummary = \"Computes a fingerprint from the supplied SAM/BAM file.\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class)\n+\n+public class ExtractFingerprint extends CommandLineProgram {\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"Input SAM or BAM file.\")\n+    public File INPUT;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output fingerprint file (VCF).\")\n+    public File OUTPUT;\n+\n+    @Argument(shortName = \"H\", doc = \"A file of haplotype information. The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting. See \" +\n+            \"https://software.broadinstitute.org/gatk/documentation/article?id=9526 for details.\")\n+    public File HAPLOTYPE_MAP;\n+\n+    @Argument(shortName = \"C\", doc = \"A value of estimated contamination in the input. A non-zero value will cause the program to provide a better estimate of the fingerprint in the presence of contaminating reads\",\n+            minValue = 0D, maxValue = 1D)\n+    public double CONTAMINATION;\n+\n+    @Argument(doc = \"The sample alias to associate with the resulting fingerprint. When null, <SAMPLE> is extracted from the input file and \\\"<SAMPLE>\\\" is used. \" +\n+            \"If argument EXTRACT_CONTAMINATION=true the resulting samplename will be \\\"<SAMPLE>-contamination\\\" (if not provided).\", optional = true)\n+    public String SAMPLE_ALIAS = null;\n+\n+    @Argument(doc = \"The maximum number of reads to use as evidence for any given locus. This is provided as a way to limit the \" +\n+            \"effect that any given locus may have.\")\n+    public int LOCUS_MAX_READS = 200;\n+\n+    @Argument(doc = \"Extract a fingerprint for the contaminat sample (instead of the contaminant). Setting to true changes the effect of SAMPLE_ALIAS when null. \" +\n+            \"It names the sample in the VCF <SAMPLE>-contaminated, using the SM value from the SAM header.\")\n+    public boolean EXTRACT_CONTAMINATION = false;\n+\n+    @Override\n+    protected boolean requiresReference() {\n+        return true;\n+    }\n+\n+    private static final Log log = Log.getInstance(ExtractFingerprint.class);\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(HAPLOTYPE_MAP);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+        IOUtil.assertFileIsReadable(referenceSequence.getReferenceFile());\n+\n+        final FingerprintChecker checker = new FingerprintChecker(HAPLOTYPE_MAP);\n+\n+        // if we want the contaminated fingerprint instead, we need to change the value of CONTAMINATION:\n+        if (!EXTRACT_CONTAMINATION) {\n+            CONTAMINATION = 1 - CONTAMINATION;\n+        }\n+\n+        checker.setLocusMaxReads(LOCUS_MAX_READS);\n+        checker.setValidationStringency(VALIDATION_STRINGENCY);\n+\n+        if (SAMPLE_ALIAS != null) {\n+            checker.setDefaultSampleID(SAMPLE_ALIAS);\n+        }\n+\n+        final Map<String, Fingerprint> fingerprintMap = checker.identifyContaminant(INPUT.toPath(), CONTAMINATION);\n+\n+        if (fingerprintMap.size() != 1) {\n+            log.error(\"Expected exactly 1 fingerprint, found \" + fingerprintMap.size());\n+            throw new IllegalArgumentException(\"Expected exactly 1 fingerprint in Input file, found \" + fingerprintMap.size());\n+        }\n+\n+        final Map.Entry<String, Fingerprint> soleEntry = fingerprintMap.entrySet().iterator().next();\n+\n+        final String sampleToUse = getSampleToUse(soleEntry.getKey());\n+\n+        try {", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNjEwOQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435326109", "bodyText": "what needs to be closed here?", "author": "yfarjoun", "createdAt": "2020-06-04T14:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MDE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex c92297b82..fe9edae96 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -115,7 +113,7 @@ public class ExtractFingerprint extends CommandLineProgram {\n         final String sampleToUse = getSampleToUse(soleEntry.getKey());\n \n         try {\n-            FingerprintUtils.writeFingerPrint(soleEntry.getValue(), OUTPUT, referenceSequence.getReferenceFile(), sampleToUse, \"PLs derived from \" + INPUT + \" using an assumed contamination of \" + this.CONTAMINATION);\n+            FingerprintUtils.writeFingerPrint(soleEntry.getValue(), OUTPUT, REFERENCE_SEQUENCE, sampleToUse, \"PLs derived from \" + INPUT + \" using an assumed contamination of \" + this.CONTAMINATION);\n         } catch (Exception e) {\n             log.error(e);\n         }\n", "next_change": {"commit": "ac7eed46b81ce0ffa6ee1ce12eacbdda2f978e8c", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/ExtractFingerprint.java b/src/main/java/picard/fingerprint/ExtractFingerprint.java\nindex fe9edae96..9d2c02652 100644\n--- a/src/main/java/picard/fingerprint/ExtractFingerprint.java\n+++ b/src/main/java/picard/fingerprint/ExtractFingerprint.java\n", "chunk": "@@ -113,7 +113,7 @@ public class ExtractFingerprint extends CommandLineProgram {\n         final String sampleToUse = getSampleToUse(soleEntry.getKey());\n \n         try {\n-            FingerprintUtils.writeFingerPrint(soleEntry.getValue(), OUTPUT, REFERENCE_SEQUENCE, sampleToUse, \"PLs derived from \" + INPUT + \" using an assumed contamination of \" + this.CONTAMINATION);\n+            FingerprintUtils.writeFingerPrint(soleEntry.getValue(), OUTPUT, referenceSequence.getReferenceFile(), sampleToUse, \"PLs derived from \" + INPUT + \" using an assumed contamination of \" + this.CONTAMINATION);\n         } catch (Exception e) {\n             log.error(e);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODk2NQ==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r434818965", "body": "Why do you have snp.getAllele2() != refAllele?\r\nIsn't allele1 always the reference allele?", "bodyText": "Why do you have snp.getAllele2() != refAllele?\nIsn't allele1 always the reference allele?", "bodyHTML": "<p dir=\"auto\">Why do you have snp.getAllele2() != refAllele?<br>\nIsn't allele1 always the reference allele?</p>", "author": "fleharty", "createdAt": "2020-06-03T19:57:37Z", "path": "src/main/java/picard/fingerprint/FingerprintUtils.java", "diffHunk": "@@ -137,15 +152,39 @@ private static VariantContext getVariantContext(final ReferenceSequenceFile refe\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {", "originalCommit": "2f3365c844b11d8d06413b05d1b1df18bd41601b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3Mzc4Mw==", "url": "https://github.com/broadinstitute/picard/pull/1496#discussion_r435373783", "bodyText": "not in the haplotype DB file. in order to deal with snps that are phased in trans. Technically, the columns are MAJOR_ALLELE and MINOR_ALLELE, so you see, the reference could be the minor allele....", "author": "yfarjoun", "createdAt": "2020-06-04T16:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 248b88377..5b0e72b30 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -152,39 +137,15 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele) {\n-            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n-        }\n-\n-        final Allele alleleRef;\n-        final Allele alleleAlt;\n-        final int obsRef, obsAlt;\n-        final boolean swap12 = snp.getAllele2() == refAllele;\n-\n-        if (swap12) {\n-            alleleRef = Allele.create(snp.getAllele2(), true);\n-            alleleAlt = Allele.create(snp.getAllele1(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele2();\n-            obsAlt = haplotypeProbabilities.getObsAllele1();\n-        } else {\n-            alleleRef = Allele.create(snp.getAllele1(), true);\n-            alleleAlt = Allele.create(snp.getAllele2(), false);\n-            obsRef = haplotypeProbabilities.getObsAllele1();\n-            obsAlt = haplotypeProbabilities.getObsAllele2();\n-        }\n-\n-        final double[] origPLs = haplotypeProbabilities.getLogLikelihoods();\n-        final double[] PLs =  Arrays.copyOf(origPLs,origPLs.length);\n-        if (swap12) {\n-            ArrayUtils.reverse(PLs);\n-        }\n-        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n+        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n+        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n+        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(PLs)\n-                .AD(new int[]{obsAlt, obsRef})\n+                .PL(haplotypeProbabilities.getLogLikelihoods())\n+                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": {"commit": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "changed_code": [{"header": "diff --git a/src/main/java/picard/fingerprint/FingerprintUtils.java b/src/main/java/picard/fingerprint/FingerprintUtils.java\nindex 5b0e72b30..67cc7efb4 100644\n--- a/src/main/java/picard/fingerprint/FingerprintUtils.java\n+++ b/src/main/java/picard/fingerprint/FingerprintUtils.java\n", "chunk": "@@ -137,15 +152,38 @@ public class FingerprintUtils {\n                 snp.getPos(),\n                 snp.getPos()).getBases()[0]);\n \n-        final Allele allele1 = Allele.create(snp.getAllele1(), snp.getAllele1() == refAllele);\n-        final Allele allele2 = Allele.create(snp.getAllele2(), snp.getAllele2() == refAllele);\n-        final List<Allele> alleles = Arrays.asList(allele1, allele2);\n+        if (snp.getAllele1() != refAllele && snp.getAllele2() != refAllele){\n+            throw new PicardException(\"Don't know how to deal with missing reference allele in fingerprinting map\");\n+        }\n+\n+        final Allele alleleRef;\n+        final Allele alleleAlt;\n+        final int obsRef, obsAlt;\n+        final boolean swap12 = snp.getAllele2() == refAllele;\n+\n+        if (swap12) {\n+            alleleRef = Allele.create(snp.getAllele2(), true);\n+            alleleAlt = Allele.create(snp.getAllele1(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele2();\n+            obsAlt = haplotypeProbabilities.getObsAllele1();\n+        } else {\n+            alleleRef = Allele.create(snp.getAllele1(), true);\n+            alleleAlt = Allele.create(snp.getAllele2(), false);\n+            obsRef = haplotypeProbabilities.getObsAllele1();\n+            obsAlt = haplotypeProbabilities.getObsAllele2();\n+        }\n+\n+        final double[] PLs =  Arrays.copyOf(haplotypeProbabilities.getLogLikelihoods(),HaplotypeProbabilities.NUM_GENOTYPES);\n+        if (swap12) {\n+            ArrayUtils.reverse(PLs);\n+        }\n+        final List<Allele> alleles = Arrays.asList(alleleRef, alleleAlt);\n \n         final Genotype gt = new GenotypeBuilder()\n                 .DP(haplotypeProbabilities.getTotalObs())\n                 .noAttributes()\n-                .PL(haplotypeProbabilities.getLogLikelihoods())\n-                .AD(new int[]{haplotypeProbabilities.getObsAllele1(), haplotypeProbabilities.getObsAllele2()})\n+                .PL(PLs)\n+                .AD(new int[]{obsAlt, obsRef})\n                 .name(sample)\n                 .make();\n         try {\n", "next_change": null}]}}]}}, {"oid": "f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "url": "https://github.com/broadinstitute/picard/commit/f1cc15bc759ed69e4cb7f52c80572067bb63d66f", "message": "- A few modifications to programs involved in fingerprinting so that we would be able to process files with reads that lack a rg tag. should not affect results from valid files.", "committedDate": "2020-06-04T16:06:22Z", "type": "commit"}, {"oid": "ac7eed46b81ce0ffa6ee1ce12eacbdda2f978e8c", "url": "https://github.com/broadinstitute/picard/commit/ac7eed46b81ce0ffa6ee1ce12eacbdda2f978e8c", "message": "- corrected source of reference sequence", "committedDate": "2020-06-04T16:06:22Z", "type": "commit"}, {"oid": "320d03e0b2bcd48114827f88307238b5b6df8f47", "url": "https://github.com/broadinstitute/picard/commit/320d03e0b2bcd48114827f88307238b5b6df8f47", "message": "- no cap on VCF PL", "committedDate": "2020-06-04T16:06:23Z", "type": "commit"}, {"oid": "eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "url": "https://github.com/broadinstitute/picard/commit/eb6c07e292cb4cb019d3b4fb2de0f0f97ae06139", "message": "- fix GIANT bug in IdentifyContaminant (haplotypesBlocks that had the reference base as the \"minor\" allele were not converted correctly to VCF)\n- remove cap on PL when dealing with VCF (not sure why it was there in the first place)\n- general cleanups.", "committedDate": "2020-06-04T16:06:23Z", "type": "commit"}, {"oid": "0b448c3cc538264cd1e2425d1c95bc153b0bab14", "url": "https://github.com/broadinstitute/picard/commit/0b448c3cc538264cd1e2425d1c95bc153b0bab14", "message": "- test write to VCF", "committedDate": "2020-06-04T16:06:23Z", "type": "commit"}, {"oid": "6c0bf1ba11dcb061008b496bb78644210d91b2f8", "url": "https://github.com/broadinstitute/picard/commit/6c0bf1ba11dcb061008b496bb78644210d91b2f8", "message": "- remove max from loglikelihood before converting to probability to protect against an underflow", "committedDate": "2020-06-04T16:06:24Z", "type": "commit"}, {"oid": "203f49524e40a33704c048ced4e6cddf1599ad72", "url": "https://github.com/broadinstitute/picard/commit/203f49524e40a33704c048ced4e6cddf1599ad72", "message": "- added deprecation notices", "committedDate": "2020-06-04T16:06:24Z", "type": "commit"}, {"oid": "9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "url": "https://github.com/broadinstitute/picard/commit/9ab7694b2596f2d4a3fd4ccdd7f1423be9096abc", "message": "- bringing back the cap on fingerprints...in a more holistic way.", "committedDate": "2020-06-04T16:06:24Z", "type": "commit"}, {"oid": "a15b45f3d5a418f78aba3238350ceb55be8470e4", "url": "https://github.com/broadinstitute/picard/commit/a15b45f3d5a418f78aba3238350ceb55be8470e4", "message": "- checkpointing", "committedDate": "2020-06-04T16:06:25Z", "type": "commit"}, {"oid": "891d2e76ef2231d04d922fe780d28f305b0c750c", "url": "https://github.com/broadinstitute/picard/commit/891d2e76ef2231d04d922fe780d28f305b0c750c", "message": "- OOPS", "committedDate": "2020-06-04T16:06:25Z", "type": "commit"}, {"oid": "9bfb7a5a66dba025d6f9e8876362f2c772c61311", "url": "https://github.com/broadinstitute/picard/commit/9bfb7a5a66dba025d6f9e8876362f2c772c61311", "message": "- increased test coverage", "committedDate": "2020-06-04T16:06:25Z", "type": "commit"}, {"oid": "4f2243826f55e20a9acf92f6ebe8ade592749b1c", "url": "https://github.com/broadinstitute/picard/commit/4f2243826f55e20a9acf92f6ebe8ade592749b1c", "message": "-adjust test for lack of cap.", "committedDate": "2020-06-04T16:06:25Z", "type": "commit"}, {"oid": "eac67cea7e64b8e4e9f9826d6310b13691336d40", "url": "https://github.com/broadinstitute/picard/commit/eac67cea7e64b8e4e9f9826d6310b13691336d40", "message": "- first round of responding to review.", "committedDate": "2020-06-04T16:06:26Z", "type": "commit"}, {"oid": "348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "url": "https://github.com/broadinstitute/picard/commit/348ed72a34036ce0bd73d5a69dbcb031a3d3dd72", "message": "- responding to review\n- found another bug...this time in the implementation of the tumor-aware LOD....\n- this PR includes tests that fail and commented code that will fix them in a subsequent commit", "committedDate": "2020-06-04T16:06:26Z", "type": "commit"}, {"oid": "d20ffc134ed65d26e2f9222c10ca1f697ad51980", "url": "https://github.com/broadinstitute/picard/commit/d20ffc134ed65d26e2f9222c10ca1f697ad51980", "message": "- this is the bugfix for the tumor normal bug", "committedDate": "2020-06-04T16:06:26Z", "type": "commit"}, {"oid": "b542e92f527e13ccfe6f9a376c355842c7988170", "url": "https://github.com/broadinstitute/picard/commit/b542e92f527e13ccfe6f9a376c355842c7988170", "message": "- typo in javaDoc", "committedDate": "2020-06-04T16:06:27Z", "type": "commit"}, {"oid": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "url": "https://github.com/broadinstitute/picard/commit/a020edbfca4eb5a5ee42ed42e8078e9551702477", "message": "-responding to review comments", "committedDate": "2020-06-04T16:06:27Z", "type": "commit"}, {"oid": "a020edbfca4eb5a5ee42ed42e8078e9551702477", "url": "https://github.com/broadinstitute/picard/commit/a020edbfca4eb5a5ee42ed42e8078e9551702477", "message": "-responding to review comments", "committedDate": "2020-06-04T16:06:27Z", "type": "forcePushed"}]}