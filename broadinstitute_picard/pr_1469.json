{"pr_number": 1469, "pr_title": "Fixes LiftoverVCF for indels (again)", "pr_author": "yfarjoun", "pr_createdAt": "2020-02-15T20:22:04Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1469", "timeline": [{"oid": "1a2e5eee95c6a434a10f153026c0c87eba230feb", "url": "https://github.com/broadinstitute/picard/commit/1a2e5eee95c6a434a10f153026c0c87eba230feb", "message": "- included getStop from rev'ed htsJDK.\n- fixes (again) #1258 which was still broken due to the call to \"make()\" in the presence of a mismatching \"END\" attribute and \"getEnd()\" result.", "committedDate": "2020-02-15T20:17:03Z", "type": "commit"}, {"oid": "b9c680235e6fc20682185be5b2e41d8edc3b07b5", "url": "https://github.com/broadinstitute/picard/commit/b9c680235e6fc20682185be5b2e41d8edc3b07b5", "message": "- typos", "committedDate": "2020-02-15T21:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5OTUxMw==", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r380799513", "body": "bingo", "bodyText": "bingo", "bodyHTML": "<p dir=\"auto\">bingo</p>", "author": "nh13", "createdAt": "2020-02-18T16:48:35Z", "path": "src/test/java/picard/util/LiftoverVcfTest.java", "diffHunk": "@@ -1124,36 +1149,73 @@ public void testLeftAlignVariants(final VariantContext source, final ReferenceSe\n         stop = 1049;\n         offset = 0;\n         builder.start(start).stop(stop).alleles(CollectionUtil.makeList(AAAARef, AAA));\n-        result_builder.start(start + offset).stop(stop + offset).alleles(CollectionUtil.makeList(AAAARef, AAA));\n+        resultBuilder.start(start + offset).stop(stop + offset).alleles(CollectionUtil.makeList(AAAARef, AAA));\n         genotypeBuilder.alleles(builder.getAlleles());\n-        resultGenotypeBuilder.alleles(result_builder.getAlleles());\n+        resultGenotypeBuilder.alleles(resultBuilder.getAlleles());\n         builder.genotypes(genotypeBuilder.make());\n-        result_builder.genotypes(resultGenotypeBuilder.make());\n-        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), result_builder.make()});\n+        resultBuilder.genotypes(resultGenotypeBuilder.make());\n+        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), resultBuilder.make()});\n \n         // near start of second interval snp\n         builder.source(\"test13\");\n         start = 1046;\n         builder.start(start).stop(start).alleles(CollectionUtil.makeList(ARef, T));\n-        result_builder.start(start + offset).stop(start + offset).alleles(CollectionUtil.makeList(ARef, T));\n+        resultBuilder.start(start + offset).stop(start + offset).alleles(CollectionUtil.makeList(ARef, T));\n         genotypeBuilder.alleles(builder.getAlleles());\n-        resultGenotypeBuilder.alleles(result_builder.getAlleles());\n+        resultGenotypeBuilder.alleles(resultBuilder.getAlleles());\n         builder.genotypes(genotypeBuilder.make());\n-        result_builder.genotypes(resultGenotypeBuilder.make());\n-        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), result_builder.make()});\n+        resultBuilder.genotypes(resultGenotypeBuilder.make());\n+        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), resultBuilder.make()});\n \n         return tests.iterator();\n     }\n \n-    @Test(dataProvider = \"indelNoFlipData\")\n-    public void testLiftOverSimpleIndels(final LiftOver liftOver, final ReferenceSequence reference, final VariantContext source, final VariantContext result) {\n+    @DataProvider\n+    public Iterator<Object[]> cleanIndelNoFlipData(){\n+        Iterator<Object[]> sourceIterator = indelNoFlipData();\n \n-        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), .95);\n+        return new Iterator<Object[]>() {\n+            @Override\n+            public boolean hasNext() {\n+                return sourceIterator.hasNext();\n+            }\n+\n+            @Override\n+            public Object[] next() {\n+                final Object[] next = sourceIterator.next();\n+                final LiftOver liftOver = (LiftOver) next[0];\n+                final VariantContext source = (VariantContext) next[2];\n+                final VariantContext result = (VariantContext) next[3];\n+                return new Object[]{\n+                        liftOver,\n+                        Optional.ofNullable(source).map(v -> new VariantContextBuilder(v).rmAttribute(VCFConstants.END_KEY).make()).orElse(null),\n+                        Optional.ofNullable(result).map(v -> new VariantContextBuilder(v).rmAttribute(VCFConstants.END_KEY).make()).orElse(null)\n+                };\n+            }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"cleanIndelNoFlipData\")\n+    public void testLiftOverSimpleIndels(final LiftOver liftOver, final VariantContext source, final VariantContext result) {\n+\n+        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), 1);\n+\n+        final VariantContextBuilder vcb = LiftoverUtils.liftSimpleVariantContext(source, target);\n+        // liftSimpleVariantContext doesn't take care of end attributes...\n \n-        VariantContextBuilder vcb = LiftoverUtils.liftSimpleVariantContext(source, target);\n         VcfTestUtils.assertEquals(vcb == null ? null : vcb.make(), result);\n     }\n \n+    @Test(dataProvider = \"indelNoFlipData\")\n+    public void testLiftOverIndels(final LiftOver liftOver, final ReferenceSequence reference, final VariantContext source, final VariantContext result) {\n+\n+        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), 1);\n+", "originalCommit": "b9c680235e6fc20682185be5b2e41d8edc3b07b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2366b461d715a3ac4e2766b13a39fe29f2862c97", "url": "https://github.com/broadinstitute/picard/commit/2366b461d715a3ac4e2766b13a39fe29f2862c97", "message": "- making Symbolic Alleles great again!", "committedDate": "2020-02-18T20:27:02Z", "type": "commit"}, {"oid": "f93689dd5e1cdb05a0f3d6e9207fb88d16f2ef4b", "url": "https://github.com/broadinstitute/picard/commit/f93689dd5e1cdb05a0f3d6e9207fb88d16f2ef4b", "message": "- WIP. problems with tests....", "committedDate": "2020-02-19T12:46:55Z", "type": "commit"}, {"oid": "828705bdd73486698c7540d441db0db5dd59f8e2", "url": "https://github.com/broadinstitute/picard/commit/828705bdd73486698c7540d441db0db5dd59f8e2", "message": "- WIP. problems with tests....", "committedDate": "2020-02-19T20:33:10Z", "type": "commit"}, {"oid": "34d676561eaefa65fa35902db93436982693347d", "url": "https://github.com/broadinstitute/picard/commit/34d676561eaefa65fa35902db93436982693347d", "message": "- Greatly simplified liftover logic for indels.\n- Symbolic alleles are now lifted over as well, by simply carrying them along.", "committedDate": "2020-02-19T22:42:29Z", "type": "commit"}, {"oid": "6f81b94e4550d918e454711e4fb9a1d96929ff40", "url": "https://github.com/broadinstitute/picard/commit/6f81b94e4550d918e454711e4fb9a1d96929ff40", "message": "- cleanup", "committedDate": "2020-02-19T22:52:03Z", "type": "commit"}, {"oid": "cd95c01cda9f8f61f638a6007281b1730858d92c", "url": "https://github.com/broadinstitute/picard/commit/cd95c01cda9f8f61f638a6007281b1730858d92c", "message": "Merge branch 'master' into yf_liftover_still_has_issues_with_END_attribute", "committedDate": "2020-03-25T19:30:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MjgwMA==", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r382172800", "body": "Not sure if the sun/oracle java code guidelines cover streaming operations yet, but I think it's more readable if each stream segment starts a new line:\r\n```\r\n        return vc.getAlleles().stream()\r\n                .filter(a -> !a.isSymbolic())\r\n                .filter(a -> !a.equals(Allele.SPAN_DEL))\r\n                .anyMatch(a -> a.length() != 1);\r\n```", "bodyText": "Not sure if the sun/oracle java code guidelines cover streaming operations yet, but I think it's more readable if each stream segment starts a new line:\n        return vc.getAlleles().stream()\n                .filter(a -> !a.isSymbolic())\n                .filter(a -> !a.equals(Allele.SPAN_DEL))\n                .anyMatch(a -> a.length() != 1);", "bodyHTML": "<p dir=\"auto\">Not sure if the sun/oracle java code guidelines cover streaming operations yet, but I think it's more readable if each stream segment starts a new line:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        return vc.getAlleles().stream()\n                .filter(a -&gt; !a.isSymbolic())\n                .filter(a -&gt; !a.equals(Allele.SPAN_DEL))\n                .anyMatch(a -&gt; a.length() != 1);\"><pre><code>        return vc.getAlleles().stream()\n                .filter(a -&gt; !a.isSymbolic())\n                .filter(a -&gt; !a.equals(Allele.SPAN_DEL))\n                .anyMatch(a -&gt; a.length() != 1);\n</code></pre></div>", "author": "pshapiro4broad", "createdAt": "2020-02-20T18:16:16Z", "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -182,33 +190,30 @@ protected static VariantContextBuilder reverseComplementVariantContext(final Var\n         return vcb;\n     }\n \n-    private static List<Allele> reverseComplementAlleles(final List<Allele> originalAlleles, final Interval target, final ReferenceSequence refSeq, final boolean isIndel, final boolean addToStart) {\n+    private static boolean isIndelForLiftover(final VariantContext vc){\n+        final Allele ref = vc.getReference();\n+        if (ref.length() != 1) {\n+            return true;\n+        }\n+\n+       return vc.getAlleles().stream().filter(a -> !a.isSymbolic()).filter(a -> !a.equals(Allele.SPAN_DEL)).", "originalCommit": "34d676561eaefa65fa35902db93436982693347d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1MzcxOA==", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r403053718", "body": "whitespace\r\n```suggestion\r\n                .filter(a -> !a.equals(Allele.SPAN_DEL) && !a.isSymbolic())\r\n```\r\nalso, above you write `filter(a -> !a.isSymbolic()).filter(a -> !a.equals(Allele.SPAN_DEL)`. The version with one call to `filter()` is probably clearer, either way I would use the same form in both places to be consistent.", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(a->!a.equals(Allele.SPAN_DEL)&&!a.isSymbolic())\n          \n          \n            \n                            .filter(a -> !a.equals(Allele.SPAN_DEL) && !a.isSymbolic())\n          \n      \n    \n    \n  \n\nalso, above you write filter(a -> !a.isSymbolic()).filter(a -> !a.equals(Allele.SPAN_DEL). The version with one call to filter() is probably clearer, either way I would use the same form in both places to be consistent.", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .filter(a<span class=\"pl-k x x-first\">-</span><span class=\"pl-k x x-last\">&gt;</span><span class=\"pl-k\">!</span>a<span class=\"pl-k\">.</span>equals(<span class=\"pl-smi\">Allele</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SPAN_DEL</span>)<span class=\"pl-k\"><span class=\"x x-first x-last\">&amp;&amp;</span>!</span>a<span class=\"pl-k\">.</span>isSymbolic())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .filter(a<span class=\"x x-first\"> </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>a<span class=\"pl-k\">.</span>equals(<span class=\"pl-smi\">Allele</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SPAN_DEL</span>)<span class=\"x x-first\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>a<span class=\"pl-k\">.</span>isSymbolic())</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">also, above you write <code>filter(a -&gt; !a.isSymbolic()).filter(a -&gt; !a.equals(Allele.SPAN_DEL)</code>. The version with one call to <code>filter()</code> is probably clearer, either way I would use the same form in both places to be consistent.</p>", "author": "pshapiro4broad", "createdAt": "2020-04-03T14:40:27Z", "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -365,7 +359,9 @@ protected static void leftAlignVariant(final VariantContextBuilder builder, fina\n \n         // Put each allele into the alleleBasesMap unless it is a spanning deletion.\n         // Spanning deletions are dealt with as a special case later in fixedAlleleMap.\n-        alleles.stream().filter(a->!a.equals(Allele.SPAN_DEL)).forEach(a -> alleleBasesMap.put(a, a.getBases()));\n+        alleles.stream()\n+                .filter(a->!a.equals(Allele.SPAN_DEL)&&!a.isSymbolic())", "originalCommit": "cd95c01cda9f8f61f638a6007281b1730858d92c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDc3OQ==", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r403054779", "body": "whitespace\r\n```suggestion\r\n    private static boolean isIndelForLiftover(final VariantContext vc) {\r\n```", "bodyText": "whitespace\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isIndelForLiftover(final VariantContext vc){\n          \n          \n            \n                private static boolean isIndelForLiftover(final VariantContext vc) {", "bodyHTML": "<p dir=\"auto\">whitespace</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">boolean</span> isIndelForLiftover(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">VariantContext</span> vc){</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">boolean</span> isIndelForLiftover(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">VariantContext</span> vc)<span class=\"x x-first x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pshapiro4broad", "createdAt": "2020-04-03T14:41:54Z", "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -183,33 +184,26 @@ protected static VariantContextBuilder reverseComplementVariantContext(final Var\n         return vcb;\n     }\n \n-    private static List<Allele> reverseComplementAlleles(final List<Allele> originalAlleles, final Interval target, final ReferenceSequence refSeq, final boolean isIndel, final boolean addToStart) {\n-        final List<Allele> alleles = new ArrayList<>();\n-\n-        for (final Allele oldAllele : originalAlleles) {\n-            alleles.add(LiftoverUtils.reverseComplement(oldAllele, target, refSeq, isIndel, addToStart));\n+    private static boolean isIndelForLiftover(final VariantContext vc){", "originalCommit": "cd95c01cda9f8f61f638a6007281b1730858d92c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f59b04eed5bb74fe6e6d6f2dfd8429e2eb375be1", "url": "https://github.com/broadinstitute/picard/commit/f59b04eed5bb74fe6e6d6f2dfd8429e2eb375be1", "message": "-whitespaces", "committedDate": "2020-04-03T18:46:06Z", "type": "commit"}, {"oid": "6a1bdbe027602054500561f71cf7cbda4214e7b4", "url": "https://github.com/broadinstitute/picard/commit/6a1bdbe027602054500561f71cf7cbda4214e7b4", "message": "Merge branch 'master' into yf_liftover_still_has_issues_with_END_attribute", "committedDate": "2020-04-06T15:37:35Z", "type": "commit"}]}