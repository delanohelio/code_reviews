{"pr_number": 1463, "pr_title": "Port CombineVcfs from picard private to picard", "pr_createdAt": "2020-02-05T19:39:38Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1463", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4NTE3Nw==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375485177", "bodyText": "Could use Arrays.asList(inputVcf1, inputVcf2);", "author": "pshapiro4broad", "createdAt": "2020-02-05T20:16:48Z", "path": "src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package picard.arrays.illumina;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import picard.arrays.CombineGenotypingArrayVcfs;\n+import picard.vcf.VcfTestUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CombineGenotypingArrayVcfsTest {\n+    private static final Path TEST_DATA_DIR = Paths.get(\"testdata/picard/arrays/\");\n+\n+    @Test()\n+    public void testCombineGenotypingArrayVcfs() throws IOException {\n+        final CombineGenotypingArrayVcfs combineGenotypingArrayVcfs = new CombineGenotypingArrayVcfs();\n+        final File inputVcf1 = TEST_DATA_DIR.resolve(\"input.vcf\").toFile();\n+        final File inputVcf2 = TEST_DATA_DIR.resolve(\"input2.vcf\").toFile();\n+        final List<File> inputs = new ArrayList<File>();", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzIyMg==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375577222", "bodyText": "It's true.", "author": "gbggrant", "createdAt": "2020-02-06T00:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4NTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java b/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\nindex e120621c3..084e79efa 100644\n--- a/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\n+++ b/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\n", "chunk": "@@ -20,9 +22,7 @@ public class CombineGenotypingArrayVcfsTest {\n         final CombineGenotypingArrayVcfs combineGenotypingArrayVcfs = new CombineGenotypingArrayVcfs();\n         final File inputVcf1 = TEST_DATA_DIR.resolve(\"input.vcf\").toFile();\n         final File inputVcf2 = TEST_DATA_DIR.resolve(\"input2.vcf\").toFile();\n-        final List<File> inputs = new ArrayList<File>();\n-        inputs.add(inputVcf1);\n-        inputs.add(inputVcf2);\n+        final List<File> inputs = Arrays.asList(inputVcf1, inputVcf2);\n \n         final File output = File.createTempFile(\"output\", \".vcf\");\n         output.deleteOnExit();\n", "next_change": {"commit": "65b642797fe495b4d7e9e45ad3ddbb241e2450cb", "changed_code": [{"header": "diff --git a/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java b/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\nindex 084e79efa..8b07981e4 100644\n--- a/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\n+++ b/src/test/java/picard/arrays/illumina/CombineGenotypingArrayVcfsTest.java\n", "chunk": "@@ -20,8 +20,8 @@ public class CombineGenotypingArrayVcfsTest {\n     @Test()\n     public void testCombineGenotypingArrayVcfs() throws IOException {\n         final CombineGenotypingArrayVcfs combineGenotypingArrayVcfs = new CombineGenotypingArrayVcfs();\n-        final File inputVcf1 = TEST_DATA_DIR.resolve(\"input.vcf\").toFile();\n-        final File inputVcf2 = TEST_DATA_DIR.resolve(\"input2.vcf\").toFile();\n+        final File inputVcf1 = TEST_DATA_DIR.resolve(\"input_for_combine.vcf\").toFile();\n+        final File inputVcf2 = TEST_DATA_DIR.resolve(\"input2_for_combine.vcf\").toFile();\n         final List<File> inputs = Arrays.asList(inputVcf1, inputVcf2);\n \n         final File output = File.createTempFile(\"output\", \".vcf\");\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4OTYyOQ==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375489629", "bodyText": "can be replaced with\n            genotypes.addAll(vc.getGenotypes());", "author": "pshapiro4broad", "createdAt": "2020-02-05T20:26:55Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +\n+                    \"and combines them into a single VCF. \" +\n+                    \"The input VCFs must have the same sequence dictionary and same list of variant loci. \" +\n+                    \"The input VCFs must not share sample Ids. \" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n+                    \"      INPUT=input1.vcf \\\\<br />\" +\n+                    \"      INPUT=input2.vcf \\\\<br />\" +\n+                    \"      OUTPUT=output.vcf\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName= StandardOptionDefinitions.INPUT_SHORT_NAME,  doc=\"Input VCF file(s).\")\n+    public List<File> INPUT;\n+\n+    @Argument(shortName=StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc=\"Output VCF file.\")\n+    public File OUTPUT;\n+\n+    private final Log log = Log.getInstance(CombineGenotypingArrayVcfs.class);\n+\n+    final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n+\n+    public CombineGenotypingArrayVcfs() {\n+        CREATE_INDEX = true;\n+    }\n+\n+    // These items will be removed from the merged header\n+    private final Set<String> sampleSpecificHeaders = new HashSet<String>(Arrays.asList(\n+            InfiniumVcfFields.ANALYSIS_VERSION_NUMBER,\n+            InfiniumVcfFields.AUTOCALL_DATE,\n+            InfiniumVcfFields.AUTOCALL_GENDER,\n+            InfiniumVcfFields.CHIP_WELL_BARCODE,\n+            InfiniumVcfFields.EXPECTED_GENDER,\n+            InfiniumVcfFields.FINGERPRINT_GENDER,\n+            InfiniumVcfFields.IMAGING_DATE,\n+            InfiniumVcfFields.P_95_GREEN,\n+            InfiniumVcfFields.P_95_RED,\n+            InfiniumVcfFields.SAMPLE_ALIAS,\n+            InfiniumVcfFields.SCANNER_NAME,\n+            \"Biotin(Bgnd)\", \"Biotin(High)\",\n+            \"DNP(Bgnd)\", \"DNP(High)\", \"Extension(A)\", \"Extension(C)\", \"Extension(G)\", \"Extension(T)\",\n+            \"Hyb(High)\", \"Hyb(Low)\", \"Hyb(Medium)\", \"NP(A)\", \"NP(C)\", \"NP(G)\", \"NP(T)\",\n+            \"NSB(Bgnd)Blue\", \"NSB(Bgnd)Green\", \"NSB(Bgnd)Purple\", \"NSB(Bgnd)Red\", \"Restore\",\n+            \"String(MM)\", \"String(PM)\", \"TargetRemoval\",\n+            \"fileDate\"));\n+\n+\n+    @Override\n+    public int doWork() {\n+        log.info(\"Checking inputs.\");\n+        final List<File> UNROLLED_INPUT = IOUtil.unrollFiles(INPUT, IOUtil.VCF_EXTENSIONS);\n+        for (final File f: UNROLLED_INPUT) IOUtil.assertFileIsReadable(f);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        final SAMSequenceDictionary sequenceDictionary = VCFFileReader.getSequenceDictionary(UNROLLED_INPUT.get(0));\n+\n+        final List<String> sampleList = new ArrayList<String>();\n+        final Collection<CloseableIterator<VariantContext>> iteratorCollection = new ArrayList<>(UNROLLED_INPUT.size());\n+        final Collection<VCFHeader> headers = new HashSet<VCFHeader>(UNROLLED_INPUT.size());\n+\n+        Set<String> sampleNames = new HashSet<>();\n+\n+        for (final File file : UNROLLED_INPUT) {\n+            final VCFFileReader fileReader = new VCFFileReader(file, false);\n+            final VCFHeader fileHeader = fileReader.getFileHeader();\n+\n+            for (final String sampleName : fileHeader.getSampleNamesInOrder()) {\n+                if (!sampleNames.add(sampleName)) {\n+                    throw new IllegalArgumentException(\"Input file \" + file.getAbsolutePath() + \" contains a sample entry (\" + sampleName + \") that appears in another input file.\");\n+                }\n+                sampleList.add(sampleName);\n+            }\n+\n+            headers.add(fileHeader);\n+            iteratorCollection.add(fileReader.iterator());\n+        }\n+\n+        if (CREATE_INDEX && sequenceDictionary == null) {\n+            throw new PicardException(\"A sequence dictionary must be available (either through the input file or by setting it explicitly) when creating indexed output.\");\n+        }\n+\n+        final VariantContextWriterBuilder builder = new VariantContextWriterBuilder()\n+                .setOutputFile(OUTPUT)\n+                .setReferenceDictionary(sequenceDictionary);\n+        if (CREATE_INDEX) {\n+            builder.setOption(Options.INDEX_ON_THE_FLY);\n+        }\n+        final VariantContextWriter writer = builder.build();\n+\n+        Set<VCFHeaderLine> headerLines = VCFUtils.smartMergeHeaders(headers, false);\n+        headerLines.removeIf(line -> sampleSpecificHeaders.contains(line.getKey()));\n+        writer.writeHeader(new VCFHeader(headerLines, sampleList));\n+\n+        int closedIteratorCount = 0;\n+        while (closedIteratorCount == 0) {\n+            List<VariantContext> variantContexts = new ArrayList<>();\n+            for (final CloseableIterator<VariantContext> iterator: iteratorCollection) {\n+                if (iterator.hasNext()) {\n+                    variantContexts.add(iterator.next());\n+                } else {\n+                    closedIteratorCount++;\n+                }\n+            }\n+            if (closedIteratorCount == 0) {\n+                progressLogger.record(variantContexts.get(0).getContig(), variantContexts.get(0).getStart());\n+                writer.add(merge(variantContexts));\n+            }\n+        }\n+        if (closedIteratorCount != iteratorCollection.size()) {\n+            throw new PicardException(\"Mismatch in number of variants among input VCFs\");\n+        }\n+        writer.close();\n+        return 0;\n+    }\n+\n+    /**\n+     * Merges multiple VariantContexts all for the same locus into a single hybrid.\n+     *\n+     * @param variantContexts           list of VCs\n+     * @return new VariantContext       representing the merge of variantContexts\n+     */\n+    public static VariantContext merge(final List<VariantContext> variantContexts) {\n+        if ( variantContexts == null || variantContexts.isEmpty() )\n+            return null;\n+\n+        // establish the baseline info from the first VC\n+        final VariantContext first = variantContexts.get(0);\n+        final String name = first.getSource();\n+\n+        final Set<String> filters = new HashSet<>();\n+\n+        int depth = 0;\n+        double log10PError = CommonInfo.NO_LOG10_PERROR;\n+        boolean anyVCHadFiltersApplied = false;\n+        GenotypesContext genotypes = GenotypesContext.create();\n+\n+        // Go through all the VCs, verify that the loci and ID and other attributes agree.\n+        final Map<String, Object> firstAttributes = first.getAttributes();\n+        for (final VariantContext vc : variantContexts ) {\n+            if ((vc.getStart() != first.getStart()) || (!vc.getContig().equals(first.getContig()))) {\n+                throw new PicardException(\"Mismatch in loci among input VCFs\");\n+            }\n+            if (!vc.getID().equals(first.getID())) {\n+                throw new PicardException(\"Mismatch in ID field among input VCFs\");\n+            }\n+            if (!vc.getReference().equals(first.getReference())) {\n+                throw new PicardException(\"Mismatch in REF allele among input VCFs\");\n+            }\n+            checkThatAllelesMatch(vc, first);\n+\n+            for (final Genotype g : vc.getGenotypes()) {", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzQxOA==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375577418", "bodyText": "So true.", "author": "gbggrant", "createdAt": "2020-02-06T00:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4OTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -200,9 +211,7 @@ public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n             }\n             checkThatAllelesMatch(vc, first);\n \n-            for (final Genotype g : vc.getGenotypes()) {\n-                genotypes.add(g);\n-            }\n+            genotypes.addAll(vc.getGenotypes());\n \n             // We always take the QUAL of the first VC with a non-MISSING qual for the combined value\n             if ( log10PError == CommonInfo.NO_LOG10_PERROR )\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTMzNw==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375491337", "bodyText": "Could use try-with-resources here to avoid explicit close() below.", "author": "pshapiro4broad", "createdAt": "2020-02-05T20:30:32Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +\n+                    \"and combines them into a single VCF. \" +\n+                    \"The input VCFs must have the same sequence dictionary and same list of variant loci. \" +\n+                    \"The input VCFs must not share sample Ids. \" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n+                    \"      INPUT=input1.vcf \\\\<br />\" +\n+                    \"      INPUT=input2.vcf \\\\<br />\" +\n+                    \"      OUTPUT=output.vcf\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName= StandardOptionDefinitions.INPUT_SHORT_NAME,  doc=\"Input VCF file(s).\")\n+    public List<File> INPUT;\n+\n+    @Argument(shortName=StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc=\"Output VCF file.\")\n+    public File OUTPUT;\n+\n+    private final Log log = Log.getInstance(CombineGenotypingArrayVcfs.class);\n+\n+    final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n+\n+    public CombineGenotypingArrayVcfs() {\n+        CREATE_INDEX = true;\n+    }\n+\n+    // These items will be removed from the merged header\n+    private final Set<String> sampleSpecificHeaders = new HashSet<String>(Arrays.asList(\n+            InfiniumVcfFields.ANALYSIS_VERSION_NUMBER,\n+            InfiniumVcfFields.AUTOCALL_DATE,\n+            InfiniumVcfFields.AUTOCALL_GENDER,\n+            InfiniumVcfFields.CHIP_WELL_BARCODE,\n+            InfiniumVcfFields.EXPECTED_GENDER,\n+            InfiniumVcfFields.FINGERPRINT_GENDER,\n+            InfiniumVcfFields.IMAGING_DATE,\n+            InfiniumVcfFields.P_95_GREEN,\n+            InfiniumVcfFields.P_95_RED,\n+            InfiniumVcfFields.SAMPLE_ALIAS,\n+            InfiniumVcfFields.SCANNER_NAME,\n+            \"Biotin(Bgnd)\", \"Biotin(High)\",\n+            \"DNP(Bgnd)\", \"DNP(High)\", \"Extension(A)\", \"Extension(C)\", \"Extension(G)\", \"Extension(T)\",\n+            \"Hyb(High)\", \"Hyb(Low)\", \"Hyb(Medium)\", \"NP(A)\", \"NP(C)\", \"NP(G)\", \"NP(T)\",\n+            \"NSB(Bgnd)Blue\", \"NSB(Bgnd)Green\", \"NSB(Bgnd)Purple\", \"NSB(Bgnd)Red\", \"Restore\",\n+            \"String(MM)\", \"String(PM)\", \"TargetRemoval\",\n+            \"fileDate\"));\n+\n+\n+    @Override\n+    public int doWork() {\n+        log.info(\"Checking inputs.\");\n+        final List<File> UNROLLED_INPUT = IOUtil.unrollFiles(INPUT, IOUtil.VCF_EXTENSIONS);\n+        for (final File f: UNROLLED_INPUT) IOUtil.assertFileIsReadable(f);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        final SAMSequenceDictionary sequenceDictionary = VCFFileReader.getSequenceDictionary(UNROLLED_INPUT.get(0));\n+\n+        final List<String> sampleList = new ArrayList<String>();\n+        final Collection<CloseableIterator<VariantContext>> iteratorCollection = new ArrayList<>(UNROLLED_INPUT.size());\n+        final Collection<VCFHeader> headers = new HashSet<VCFHeader>(UNROLLED_INPUT.size());\n+\n+        Set<String> sampleNames = new HashSet<>();\n+\n+        for (final File file : UNROLLED_INPUT) {\n+            final VCFFileReader fileReader = new VCFFileReader(file, false);\n+            final VCFHeader fileHeader = fileReader.getFileHeader();\n+\n+            for (final String sampleName : fileHeader.getSampleNamesInOrder()) {\n+                if (!sampleNames.add(sampleName)) {\n+                    throw new IllegalArgumentException(\"Input file \" + file.getAbsolutePath() + \" contains a sample entry (\" + sampleName + \") that appears in another input file.\");\n+                }\n+                sampleList.add(sampleName);\n+            }\n+\n+            headers.add(fileHeader);\n+            iteratorCollection.add(fileReader.iterator());\n+        }\n+\n+        if (CREATE_INDEX && sequenceDictionary == null) {\n+            throw new PicardException(\"A sequence dictionary must be available (either through the input file or by setting it explicitly) when creating indexed output.\");\n+        }\n+\n+        final VariantContextWriterBuilder builder = new VariantContextWriterBuilder()\n+                .setOutputFile(OUTPUT)\n+                .setReferenceDictionary(sequenceDictionary);\n+        if (CREATE_INDEX) {\n+            builder.setOption(Options.INDEX_ON_THE_FLY);\n+        }\n+        final VariantContextWriter writer = builder.build();", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Nzg4OQ==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r377897889", "bodyText": "Yes.", "author": "gbggrant", "createdAt": "2020-02-11T21:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -137,31 +148,31 @@ public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n         if (CREATE_INDEX) {\n             builder.setOption(Options.INDEX_ON_THE_FLY);\n         }\n-        final VariantContextWriter writer = builder.build();\n-\n-        Set<VCFHeaderLine> headerLines = VCFUtils.smartMergeHeaders(headers, false);\n-        headerLines.removeIf(line -> sampleSpecificHeaders.contains(line.getKey()));\n-        writer.writeHeader(new VCFHeader(headerLines, sampleList));\n-\n-        int closedIteratorCount = 0;\n-        while (closedIteratorCount == 0) {\n-            List<VariantContext> variantContexts = new ArrayList<>();\n-            for (final CloseableIterator<VariantContext> iterator: iteratorCollection) {\n-                if (iterator.hasNext()) {\n-                    variantContexts.add(iterator.next());\n-                } else {\n-                    closedIteratorCount++;\n+        try (final VariantContextWriter writer = builder.build()) {\n+            Set<VCFHeaderLine> headerLines = VCFUtils.smartMergeHeaders(headers, false);\n+            headerLines.removeIf(line -> sampleSpecificHeaders.contains(line.getKey()));\n+            writer.writeHeader(new VCFHeader(headerLines, sampleList));\n+\n+            int closedIteratorCount = 0;\n+            while (closedIteratorCount == 0) {\n+                List<VariantContext> variantContexts = new ArrayList<>();\n+                for (final CloseableIterator<VariantContext> iterator: iteratorCollection) {\n+                    if (iterator.hasNext()) {\n+                        variantContexts.add(iterator.next());\n+                    } else {\n+                        closedIteratorCount++;\n+                    }\n+                }\n+                if (closedIteratorCount == 0) {\n+                    progressLogger.record(variantContexts.get(0).getContig(), variantContexts.get(0).getStart());\n+                    writer.add(merge(variantContexts));\n                 }\n             }\n-            if (closedIteratorCount == 0) {\n-                progressLogger.record(variantContexts.get(0).getContig(), variantContexts.get(0).getStart());\n-                writer.add(merge(variantContexts));\n+            if (closedIteratorCount != iteratorCollection.size()) {\n+                throw new PicardException(\"Mismatch in number of variants among input VCFs\");\n             }\n         }\n-        if (closedIteratorCount != iteratorCollection.size()) {\n-            throw new PicardException(\"Mismatch in number of variants among input VCFs\");\n-        }\n-        writer.close();\n+\n         return 0;\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTk5Ng==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375491996", "bodyText": "Can be replaced with assertFilesAreReadable\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (final File f: UNROLLED_INPUT) IOUtil.assertFileIsReadable(f);\n          \n          \n            \n                   IOUtil.assertFilesAreReadable(UNROLLED_INPUT);", "author": "pshapiro4broad", "createdAt": "2020-02-05T20:31:56Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +\n+                    \"and combines them into a single VCF. \" +\n+                    \"The input VCFs must have the same sequence dictionary and same list of variant loci. \" +\n+                    \"The input VCFs must not share sample Ids. \" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n+                    \"      INPUT=input1.vcf \\\\<br />\" +\n+                    \"      INPUT=input2.vcf \\\\<br />\" +\n+                    \"      OUTPUT=output.vcf\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName= StandardOptionDefinitions.INPUT_SHORT_NAME,  doc=\"Input VCF file(s).\")\n+    public List<File> INPUT;\n+\n+    @Argument(shortName=StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc=\"Output VCF file.\")\n+    public File OUTPUT;\n+\n+    private final Log log = Log.getInstance(CombineGenotypingArrayVcfs.class);\n+\n+    final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n+\n+    public CombineGenotypingArrayVcfs() {\n+        CREATE_INDEX = true;\n+    }\n+\n+    // These items will be removed from the merged header\n+    private final Set<String> sampleSpecificHeaders = new HashSet<String>(Arrays.asList(\n+            InfiniumVcfFields.ANALYSIS_VERSION_NUMBER,\n+            InfiniumVcfFields.AUTOCALL_DATE,\n+            InfiniumVcfFields.AUTOCALL_GENDER,\n+            InfiniumVcfFields.CHIP_WELL_BARCODE,\n+            InfiniumVcfFields.EXPECTED_GENDER,\n+            InfiniumVcfFields.FINGERPRINT_GENDER,\n+            InfiniumVcfFields.IMAGING_DATE,\n+            InfiniumVcfFields.P_95_GREEN,\n+            InfiniumVcfFields.P_95_RED,\n+            InfiniumVcfFields.SAMPLE_ALIAS,\n+            InfiniumVcfFields.SCANNER_NAME,\n+            \"Biotin(Bgnd)\", \"Biotin(High)\",\n+            \"DNP(Bgnd)\", \"DNP(High)\", \"Extension(A)\", \"Extension(C)\", \"Extension(G)\", \"Extension(T)\",\n+            \"Hyb(High)\", \"Hyb(Low)\", \"Hyb(Medium)\", \"NP(A)\", \"NP(C)\", \"NP(G)\", \"NP(T)\",\n+            \"NSB(Bgnd)Blue\", \"NSB(Bgnd)Green\", \"NSB(Bgnd)Purple\", \"NSB(Bgnd)Red\", \"Restore\",\n+            \"String(MM)\", \"String(PM)\", \"TargetRemoval\",\n+            \"fileDate\"));\n+\n+\n+    @Override\n+    public int doWork() {\n+        log.info(\"Checking inputs.\");\n+        final List<File> UNROLLED_INPUT = IOUtil.unrollFiles(INPUT, IOUtil.VCF_EXTENSIONS);\n+        for (final File f: UNROLLED_INPUT) IOUtil.assertFileIsReadable(f);", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NzYyNg==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375577626", "bodyText": "That's a good point.", "author": "gbggrant", "createdAt": "2020-02-06T00:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -101,7 +112,7 @@ public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n     public int doWork() {\n         log.info(\"Checking inputs.\");\n         final List<File> UNROLLED_INPUT = IOUtil.unrollFiles(INPUT, IOUtil.VCF_EXTENSIONS);\n-        for (final File f: UNROLLED_INPUT) IOUtil.assertFileIsReadable(f);\n+        IOUtil.assertFilesAreReadable(UNROLLED_INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n         final SAMSequenceDictionary sequenceDictionary = VCFFileReader.getSequenceDictionary(UNROLLED_INPUT.get(0));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNjMwMw==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375506303", "bodyText": "Is it worth documenting here or in a comment when one would use this instead of MergeVcfs? They do seem pretty different but the names are similar.", "author": "pshapiro4broad", "createdAt": "2020-02-05T21:03:30Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNTI3Mg==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r377915272", "bodyText": "Not sure if I want to address this in the documentation.  I'll add a comment.  MergeVcfs doesn't support the use case here.  Where we have multiple input VCFs each with a different sample name.  There used to be a tool in GATK 3 (not implemented in 4) called CombineVariants that did support this use case, but it merged duplicate sites, so we implemented this tool.", "author": "gbggrant", "createdAt": "2020-02-11T21:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNjMwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNjQ4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375506486", "bodyText": "I think this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n          \n          \n            \n                                \"java -jar picard.jar CombineGenotypingArrayVcfs \\\\<br />\" +", "author": "pshapiro4broad", "createdAt": "2020-02-05T21:03:54Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +\n+                    \"and combines them into a single VCF. \" +\n+                    \"The input VCFs must have the same sequence dictionary and same list of variant loci. \" +\n+                    \"The input VCFs must not share sample Ids. \" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MzI1Ng==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375583256", "bodyText": "Yeah, I cut and pasted an example usage obviously.", "author": "gbggrant", "createdAt": "2020-02-06T00:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNjQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -56,7 +67,7 @@ public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n                     \"The input VCFs must not share sample Ids. \" +\n                     \"<h4>Usage example:</h4>\" +\n                     \"<pre>\" +\n-                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n+                    \"java -jar picard.jar CombineGenotypingArrayVcfs \\\\<br />\" +\n                     \"      INPUT=input1.vcf \\\\<br />\" +\n                     \"      INPUT=input2.vcf \\\\<br />\" +\n                     \"      OUTPUT=output.vcf\" +\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzAzOQ==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375507039", "bodyText": "Is there a reason why you didn't bring over the comment from picard-private's CombineVcfs?", "author": "pshapiro4broad", "createdAt": "2020-02-05T21:05:09Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Nzc2NA==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r377897764", "bodyText": "No, was trying to capture it in the usage.  But I've added the comments now.", "author": "gbggrant", "createdAt": "2020-02-11T21:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -39,8 +38,20 @@ import java.util.TreeMap;\n import java.util.TreeSet;\n \n /**\n- * A simple program to combine multiple genotyping array VCF files into one VCF\n+ * A simple program to combine multiple genotyping array VCFs into one VCF\n+ * The input VCFs must have the same sequence dictionary and same list of variant loci.\n+ * The input files must not share sample Ids.\n+ * The input files must have the same contig lists.\n+ * Throws IllegalArgumentException if the contig lists\n+ * are not present in the input files, or are not identical\n+ * this class uses the GATK to merge headers, which may throw exceptions if the headers\n+ * cannot be merged. See VCFUtils.smartMergeHeaders for details.\n+ * <p/>\n+ * An index file is created for the output file by default. Using an output file name with a\n+ * \".gz\" extension will create gzip-compressed output.\n  *\n+ * Note that this tool is written to handle a use case not supported by MergeVcfs (merging multiple\n+ * VCFs, each for a different sample).\n  */\n @CommandLineProgramProperties(\n         summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n", "next_change": {"commit": "ed1591621298d22b96f7324a52cb49df240d5702", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 4948db172..12e6d5c33 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -52,6 +52,9 @@ import java.util.TreeSet;\n  *\n  * Note that this tool is written to handle a use case not supported by MergeVcfs (merging multiple\n  * VCFs, each for a different sample).\n+ * Note also that this tool is similar intent to the GATK tool CombineVariants (which is in GATK3, but not in 4).\n+ * There are some array-specific features in this tool that probably could be generalized in CombineVariants when/if\n+ * that is installed in GATK4.\n  */\n @CommandLineProgramProperties(\n         summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzM3MA==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375507370", "bodyText": "sort modifiers\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n          \n          \n            \n                private final ProgressLogger progressLogger = new ProgressLogger(log, 10000);", "author": "pshapiro4broad", "createdAt": "2020-02-05T21:05:54Z", "path": "src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package picard.arrays;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.variant.variantcontext.CommonInfo;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.VariantContextUtils;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;\n+import htsjdk.variant.vcf.VCFConstants;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import htsjdk.variant.vcf.VCFHeader;\n+import htsjdk.variant.vcf.VCFHeaderLine;\n+import htsjdk.variant.vcf.VCFUtils;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.arrays.illumina.InfiniumVcfFields;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+/**\n+ * A simple program to combine multiple genotyping array VCF files into one VCF\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = CombineGenotypingArrayVcfs.USAGE_DETAILS,\n+        oneLineSummary = \"Program to combine multiple genotyping array VCF files into one VCF.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"CombineGenotypingArrayVcfs takes one or more VCF files, as generated by GtcToVcf \" +\n+                    \"and combines them into a single VCF. \" +\n+                    \"The input VCFs must have the same sequence dictionary and same list of variant loci. \" +\n+                    \"The input VCFs must not share sample Ids. \" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n+                    \"      INPUT=input1.vcf \\\\<br />\" +\n+                    \"      INPUT=input2.vcf \\\\<br />\" +\n+                    \"      OUTPUT=output.vcf\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName= StandardOptionDefinitions.INPUT_SHORT_NAME,  doc=\"Input VCF file(s).\")\n+    public List<File> INPUT;\n+\n+    @Argument(shortName=StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc=\"Output VCF file.\")\n+    public File OUTPUT;\n+\n+    private final Log log = Log.getInstance(CombineGenotypingArrayVcfs.class);\n+\n+    final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);", "originalCommit": "76e9d1fa33e1ab3277993e3d19d79c8b5e37ef16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MzM4OA==", "url": "https://github.com/broadinstitute/picard/pull/1463#discussion_r375583388", "bodyText": "hmm.", "author": "gbggrant", "createdAt": "2020-02-06T00:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "changed_code": [{"header": "diff --git a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\nindex 653cd3a13..4948db172 100644\n--- a/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n+++ b/src/main/java/picard/arrays/CombineGenotypingArrayVcfs.java\n", "chunk": "@@ -70,7 +81,7 @@ public class CombineGenotypingArrayVcfs extends CommandLineProgram {\n \n     private final Log log = Log.getInstance(CombineGenotypingArrayVcfs.class);\n \n-    final private ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n+    private final ProgressLogger progressLogger = new ProgressLogger(log, 10000);\n \n     public CombineGenotypingArrayVcfs() {\n         CREATE_INDEX = true;\n", "next_change": null}]}}, {"oid": "f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "url": "https://github.com/broadinstitute/picard/commit/f6a959dd926e0798b9e0ecd148416a3d62c04bb2", "message": "Porting CombineVcfs from picard private to picard\nAdded a duplicate record to test VCFs to catch modifications that might merge records.\nAdded a negative test.", "committedDate": "2020-02-12T14:55:46Z", "type": "forcePushed"}, {"oid": "ed1591621298d22b96f7324a52cb49df240d5702", "url": "https://github.com/broadinstitute/picard/commit/ed1591621298d22b96f7324a52cb49df240d5702", "message": "Porting CombineVcfs from picard private to picard\nAdded a duplicate record to test VCFs to catch modifications that might merge records.\nAdded a negative test.", "committedDate": "2020-02-12T15:11:23Z", "type": "commit"}, {"oid": "ed1591621298d22b96f7324a52cb49df240d5702", "url": "https://github.com/broadinstitute/picard/commit/ed1591621298d22b96f7324a52cb49df240d5702", "message": "Porting CombineVcfs from picard private to picard\nAdded a duplicate record to test VCFs to catch modifications that might merge records.\nAdded a negative test.", "committedDate": "2020-02-12T15:11:23Z", "type": "forcePushed"}, {"oid": "65b642797fe495b4d7e9e45ad3ddbb241e2450cb", "url": "https://github.com/broadinstitute/picard/commit/65b642797fe495b4d7e9e45ad3ddbb241e2450cb", "message": "Fix broken tests.  Rename some files more clearly.", "committedDate": "2020-02-12T16:30:25Z", "type": "commit"}]}