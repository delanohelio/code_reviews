{"pr_number": 1703, "pr_title": "Moves the search index into its own table.", "pr_author": "dbernstein", "pr_createdAt": "2020-06-18T19:03:03Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1703", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzQ4Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442443487", "body": "The first 2 clauses could be expressed as `StringUtils.isBlank(fields)`", "bodyText": "The first 2 clauses could be expressed as StringUtils.isBlank(fields)", "bodyHTML": "<p dir=\"auto\">The first 2 clauses could be expressed as <code>StringUtils.isBlank(fields)</code></p>", "author": "pwinckles", "createdAt": "2020-06-18T19:09:27Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java", "diffHunk": "@@ -87,15 +89,30 @@ public Response doSearch(@QueryParam(value = \"condition\") final List<String> con\n                 final var parsedCondition = parse(condition, identifierConverter());\n                 conditionList.add(parsedCondition);\n             }\n-            final var params = new SearchParameters(conditionList, maxResults, offset);\n+\n+            List<Condition.Field> parsedFields = null;\n+            if (fields == null || fields.trim().length() == 0 || fields.equals(\"*\")) {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Mzc0NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443793745", "bodyText": "will fix.", "author": "dbernstein", "createdAt": "2020-06-22T20:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\nindex 17ae088037..4054f9647d 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n", "chunk": "@@ -91,7 +92,7 @@ public class FedoraSearch extends FedoraBaseResource {\n             }\n \n             List<Condition.Field> parsedFields = null;\n-            if (fields == null || fields.trim().length() == 0 || fields.equals(\"*\")) {\n+            if (StringUtils.isBlank(fields) || fields.equals(\"*\")) {\n                 parsedFields = Arrays.asList(Condition.Field.values());\n             } else {\n                 parsedFields = new ArrayList<>();\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\nindex 4054f9647d..17ae088037 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n", "chunk": "@@ -92,7 +91,7 @@ public class FedoraSearch extends FedoraBaseResource {\n             }\n \n             List<Condition.Field> parsedFields = null;\n-            if (StringUtils.isBlank(fields) || fields.equals(\"*\")) {\n+            if (fields == null || fields.trim().length() == 0 || fields.equals(\"*\")) {\n                 parsedFields = Arrays.asList(Condition.Field.values());\n             } else {\n                 parsedFields = new ArrayList<>();\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\nindex 17ae088037..4054f9647d 100644\n--- a/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n+++ b/fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java\n", "chunk": "@@ -91,7 +92,7 @@ public class FedoraSearch extends FedoraBaseResource {\n             }\n \n             List<Condition.Field> parsedFields = null;\n-            if (fields == null || fields.trim().length() == 0 || fields.equals(\"*\")) {\n+            if (StringUtils.isBlank(fields) || fields.equals(\"*\")) {\n                 parsedFields = Arrays.asList(Condition.Field.values());\n             } else {\n                 parsedFields = new ArrayList<>();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MzMxOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442453319", "body": "I don't think this needs a transaction, does it?", "bodyText": "I don't think this needs a transaction, does it?", "bodyHTML": "<p dir=\"auto\">I don't think this needs a transaction, does it?</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:29:11Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.PaginationInfo;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.search.api.SearchResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+\n+\n+/**\n+ * An implementation of the {@link SearchIndex}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class DbSearchIndexImpl implements SearchIndex {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DbSearchIndexImpl.class);\n+    private static final String SIMPLE_SEARCH_TABLE = \"simple_search\";\n+    private static final String DDL = \"sql/default-search-index.sql\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Setup database table and connection\n+     */\n+    @PostConstruct\n+    public void setup() {\n+        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                this.dataSource);\n+        this.jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n+\n+    @Override\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        var paramCount = 1;\n+\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            final var field = condition.getField();\n+            final var operation = condition.getOperator();\n+            var object = condition.getObject();\n+            if (field.equals(Condition.Field.FEDORA_ID) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n+                //parse date\n+                try {\n+                    final var instant = InstantParser.parse(object);\n+                    final var paramName = \"param\" + paramCount++;\n+                    whereClauses.add(field + \" \" + operation.getStringValue() +\n+                            \" :\" + paramName);\n+                    parameterSource.addValue(paramName, new Date(instant.toEpochMilli()), Types.TIMESTAMP);\n+                } catch (Exception ex) {\n+                    throw new InvalidQueryException(ex.getMessage());\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \\\"\" + condition + \"\\\"\");\n+            }\n+        }\n+\n+        final var fields = parameters.getFields().stream().map(x -> x.toString()).collect(Collectors.toList());\n+        final var sql =\n+                new StringBuilder(\"SELECT \" + String.join(\",\", fields) + \" FROM \" + SIMPLE_SEARCH_TABLE);\n+\n+        if (!whereClauses.isEmpty()) {\n+            sql.append(\" WHERE \");\n+            for (var it = whereClauses.iterator(); it.hasNext(); ) {\n+                sql.append(it.next());\n+                if (it.hasNext()) {\n+                    sql.append(\" AND \");\n+                }\n+            }\n+        }\n+        sql.append(\" ORDER BY \" + Condition.Field.FEDORA_ID);\n+        sql.append(\" LIMIT :limit OFFSET :offset\");\n+        parameterSource.addValue(\"limit\", parameters.getMaxResults());\n+        parameterSource.addValue(\"offset\", parameters.getOffset());\n+\n+        final var rowMapper = new RowMapper<Map<String, Object>>() {\n+            @Override\n+            public Map<String, Object> mapRow(final ResultSet rs, final int rowNum) throws SQLException {\n+                final Map<String, Object> map = new HashMap<>();\n+                for (String f : fields) {\n+                    var value = rs.getObject(f);\n+                    if (value instanceof Timestamp) {\n+                        value = ISO_INSTANT.format(Instant.ofEpochMilli(((Timestamp) value).getTime()));\n+                    }\n+                    map.put(f, value);\n+                }\n+                return map;\n+            }\n+        };\n+\n+        final List<Map<String, Object>> items = jdbcTemplate.query(sql.toString(), parameterSource, rowMapper);\n+        final var pagination = new PaginationInfo(parameters.getMaxResults(), parameters.getOffset());\n+        LOGGER.debug(\"Search query with parameters: {} - {}\", sql, parameters);\n+        return new SearchResult(items, pagination);\n+    }\n+\n+    @Override\n+    public void addUpdateIndex(final FedoraId fedoraId, final Instant created, final Instant modified,\n+                               final Long size, final String mimetype) {\n+        final var fullId = fedoraId.getFullId();\n+        final var selectParams = new MapSqlParameterSource();\n+        selectParams.addValue(\"fedora_id\", fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE fedora_id = :fedora_id\",\n+                selectParams);\n+\n+        final var txId = UUID.randomUUID().toString();\n+        executeInDbTransaction(txId, status -> {\n+            try {\n+\n+                final var params = new MapSqlParameterSource();\n+                params.addValue(\"fedora_id\", fullId);\n+                params.addValue(\"modified\", modified);\n+\n+                if (result.size() > 0) {\n+                    //update\n+                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n+                    jdbcTemplate.update(sql, params);\n+                } else {\n+                    params.addValue(\"created\", created);\n+\n+                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:fedora_id, :modified, :created)\";\n+                    jdbcTemplate.update(sql, params);\n+                }\n+                return null;\n+            } catch (Exception e) {\n+                status.setRollbackOnly();\n+                throw new RepositoryRuntimeException(\"Failed add/updated the search index for : \" + fullId, e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void removeFromIndex(final FedoraId fedoraId) {\n+        final var txId = UUID.randomUUID().toString();\n+        executeInDbTransaction(txId, status -> {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNDU1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443804554", "bodyText": "good catch.  I'll remove.", "author": "dbernstein", "createdAt": "2020-06-22T20:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MzMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -209,20 +214,14 @@ public class DbSearchIndexImpl implements SearchIndex {\n \n     @Override\n     public void removeFromIndex(final FedoraId fedoraId) {\n-        final var txId = UUID.randomUUID().toString();\n-        executeInDbTransaction(txId, status -> {\n-            try {\n-                final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fedoraId.getFullId());\n-                final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n-                jdbcTemplate.update(sql, params);\n-                return null;\n-            } catch (Exception e) {\n-                status.setRollbackOnly();\n-                throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" +\n-                        fedoraId.getFullId(), e);\n-            }\n-        });\n+        try {\n+            final var params = new MapSqlParameterSource();\n+            params.addValue(\"fedora_id\", fedoraId.getFullId());\n+            final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n+            jdbcTemplate.update(sql, params);\n+        } catch (DataAccessException ex) {\n+            throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" + fedoraId.getFullId());\n+        }\n     }\n \n     private <T> T executeInDbTransaction(final String txId, final TransactionCallback<T> callback) {\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..1bddc3423b 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -214,14 +209,20 @@ public class DbSearchIndexImpl implements SearchIndex {\n \n     @Override\n     public void removeFromIndex(final FedoraId fedoraId) {\n-        try {\n-            final var params = new MapSqlParameterSource();\n-            params.addValue(\"fedora_id\", fedoraId.getFullId());\n-            final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n-            jdbcTemplate.update(sql, params);\n-        } catch (DataAccessException ex) {\n-            throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" + fedoraId.getFullId());\n-        }\n+        final var txId = UUID.randomUUID().toString();\n+        executeInDbTransaction(txId, status -> {\n+            try {\n+                final var params = new MapSqlParameterSource();\n+                params.addValue(\"fedora_id\", fedoraId.getFullId());\n+                final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n+                jdbcTemplate.update(sql, params);\n+                return null;\n+            } catch (Exception e) {\n+                status.setRollbackOnly();\n+                throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" +\n+                        fedoraId.getFullId(), e);\n+            }\n+        });\n     }\n \n     private <T> T executeInDbTransaction(final String txId, final TransactionCallback<T> callback) {\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -209,20 +214,14 @@ public class DbSearchIndexImpl implements SearchIndex {\n \n     @Override\n     public void removeFromIndex(final FedoraId fedoraId) {\n-        final var txId = UUID.randomUUID().toString();\n-        executeInDbTransaction(txId, status -> {\n-            try {\n-                final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fedoraId.getFullId());\n-                final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n-                jdbcTemplate.update(sql, params);\n-                return null;\n-            } catch (Exception e) {\n-                status.setRollbackOnly();\n-                throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" +\n-                        fedoraId.getFullId(), e);\n-            }\n-        });\n+        try {\n+            final var params = new MapSqlParameterSource();\n+            params.addValue(\"fedora_id\", fedoraId.getFullId());\n+            final var sql = \"DELETE FROM \" + SIMPLE_SEARCH_TABLE + \" WHERE fedora_id = :fedora_id;\";\n+            jdbcTemplate.update(sql, params);\n+        } catch (DataAccessException ex) {\n+            throw new RepositoryRuntimeException(\"Failed to delete search index entry for \" + fedoraId.getFullId());\n+        }\n     }\n \n     private <T> T executeInDbTransaction(final String txId, final TransactionCallback<T> callback) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1NDQzNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442454434", "body": "This seems more like a debug level log", "bodyText": "This seems more like a debug level log", "bodyHTML": "<p dir=\"auto\">This seems more like a debug level log</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:31:17Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.fcrepo.search.impl;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.observer.Event;\n+import org.fcrepo.kernel.api.observer.EventType;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import java.util.Set;\n+\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_CREATION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_DELETION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_MODIFICATION;\n+\n+/**\n+ * This class listens to events from the event bus and updates the search\n+ * index accordingly.\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class SearchIndexUpdater {\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private SearchIndex searchIndex;\n+\n+    @Inject\n+    private ResourceFactory resourceFactory;\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    private static Logger LOGGER = LoggerFactory.getLogger(SearchIndexUpdater.class);\n+    private static final Set<EventType> HANDLED_TYPES = Sets.newHashSet(RESOURCE_CREATION, RESOURCE_MODIFICATION,\n+            RESOURCE_DELETION);\n+\n+    @Subscribe\n+    public void onEvent(final Event event) {\n+        LOGGER.info(\"event={}\", event);", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNTE4Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443805187", "bodyText": "Yes, I agree.", "author": "dbernstein", "createdAt": "2020-06-22T20:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1NDQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..2c58f1d8e9 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -68,23 +67,25 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n-    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.debug(\"event={}\", event);\n+        LOGGER.info(\"event={}\", event);\n         try {\n-            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n-                this.searchIndex.removeFromIndex(fedoraId);\n-            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n-                final var session = persistentStorageSessionManager.getReadOnlySession();\n-                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+            for (EventType et : types) {\n+                final var fedoraId = event.getFedoraId();\n+                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n+                    final var session = persistentStorageSessionManager.getReadOnlySession();\n+                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                            headers.getContentSize(), headers.getMimeType());\n+                } else if (RESOURCE_DELETION.equals(et)) {\n+                    this.searchIndex.removeFromIndex(fedoraId);\n+                }\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n+\n     }\n \n     /**\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..7d4dad0941 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -79,8 +79,7 @@ public class SearchIndexUpdater {\n             } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n                 final var session = persistentStorageSessionManager.getReadOnlySession();\n                 final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+                this.searchIndex.addUpdateIndex(headers);\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1ODU5NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442458595", "body": "This should probably be annotated with `@AllowConcurrentEvents`", "bodyText": "This should probably be annotated with @AllowConcurrentEvents", "bodyHTML": "<p dir=\"auto\">This should probably be annotated with <code>@AllowConcurrentEvents</code></p>", "author": "pwinckles", "createdAt": "2020-06-18T19:38:14Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.fcrepo.search.impl;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.observer.Event;\n+import org.fcrepo.kernel.api.observer.EventType;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import java.util.Set;\n+\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_CREATION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_DELETION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_MODIFICATION;\n+\n+/**\n+ * This class listens to events from the event bus and updates the search\n+ * index accordingly.\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class SearchIndexUpdater {\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private SearchIndex searchIndex;\n+\n+    @Inject\n+    private ResourceFactory resourceFactory;\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    private static Logger LOGGER = LoggerFactory.getLogger(SearchIndexUpdater.class);\n+    private static final Set<EventType> HANDLED_TYPES = Sets.newHashSet(RESOURCE_CREATION, RESOURCE_MODIFICATION,\n+            RESOURCE_DELETION);\n+\n+    @Subscribe\n+    public void onEvent(final Event event) {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNTM2Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443805362", "bodyText": "Certainly.", "author": "dbernstein", "createdAt": "2020-06-22T20:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1ODU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..2c58f1d8e9 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -68,23 +67,25 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n-    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.debug(\"event={}\", event);\n+        LOGGER.info(\"event={}\", event);\n         try {\n-            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n-                this.searchIndex.removeFromIndex(fedoraId);\n-            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n-                final var session = persistentStorageSessionManager.getReadOnlySession();\n-                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+            for (EventType et : types) {\n+                final var fedoraId = event.getFedoraId();\n+                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n+                    final var session = persistentStorageSessionManager.getReadOnlySession();\n+                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                            headers.getContentSize(), headers.getMimeType());\n+                } else if (RESOURCE_DELETION.equals(et)) {\n+                    this.searchIndex.removeFromIndex(fedoraId);\n+                }\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n+\n     }\n \n     /**\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..7d4dad0941 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -79,8 +79,7 @@ public class SearchIndexUpdater {\n             } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n                 final var session = persistentStorageSessionManager.getReadOnlySession();\n                 final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+                this.searchIndex.addUpdateIndex(headers);\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MTA2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442461067", "body": "I don't think this class needs this constructor, does it?", "bodyText": "I don't think this class needs this constructor, does it?", "bodyHTML": "<p dir=\"auto\">I don't think this class needs this constructor, does it?</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:41:35Z", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -63,12 +63,18 @@\n     @Inject\n     private ContainmentIndex containmentIndex;\n \n+    @Inject\n+    private SearchIndex searchIndex;\n+\n     @Inject\n     private TransactionManager transactionManager;\n \n     @Inject\n     private OcflRepository ocflRepository;\n \n+    public IndexBuilderImpl() {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNTgxOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443805818", "bodyText": "Yes - somehow I unintentionally  introduced that.", "author": "dbernstein", "createdAt": "2020-06-22T20:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\nindex 3578780baa..0ccb4b8c97 100644\n--- a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n+++ b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n", "chunk": "@@ -72,9 +72,6 @@ public class IndexBuilderImpl implements IndexBuilder {\n     @Inject\n     private OcflRepository ocflRepository;\n \n-    public IndexBuilderImpl() {\n-    }\n-\n     @Override\n     public void rebuildIfNecessary() {\n         if (shouldRebuild()) {\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\nindex 0ccb4b8c97..3578780baa 100644\n--- a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n+++ b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n", "chunk": "@@ -72,6 +72,9 @@ public class IndexBuilderImpl implements IndexBuilder {\n     @Inject\n     private OcflRepository ocflRepository;\n \n+    public IndexBuilderImpl() {\n+    }\n+\n     @Override\n     public void rebuildIfNecessary() {\n         if (shouldRebuild()) {\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\nindex 3578780baa..0ccb4b8c97 100644\n--- a/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n+++ b/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java\n", "chunk": "@@ -72,9 +72,6 @@ public class IndexBuilderImpl implements IndexBuilder {\n     @Inject\n     private OcflRepository ocflRepository;\n \n-    public IndexBuilderImpl() {\n-    }\n-\n     @Override\n     public void rebuildIfNecessary() {\n         if (shouldRebuild()) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442462212", "body": "Does this module have access to the `ResourceHeaders` interface? If so, it might be nice to have an api that just took `FedoraId` and `ResourceHeaders` rather than having to pass each value individually.", "bodyText": "Does this module have access to the ResourceHeaders interface? If so, it might be nice to have an api that just took FedoraId and ResourceHeaders rather than having to pass each value individually.", "bodyHTML": "<p dir=\"auto\">Does this module have access to the <code>ResourceHeaders</code> interface? If so, it might be nice to have an api that just took <code>FedoraId</code> and <code>ResourceHeaders</code> rather than having to pass each value individually.</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:43:58Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchIndex.java", "diffHunk": "@@ -17,11 +17,31 @@\n  */\n package org.fcrepo.search.api;\n \n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+\n+import java.time.Instant;\n+\n /**\n- * An interface defining search operations\n+ * An interface defining search index management operations\n+ *\n  * @author dbernstein\n  */\n-public interface SearchService {\n+public interface SearchIndex {\n+\n+    /**\n+     * @param fedoraId\n+     * @param created\n+     * @param modified\n+     * @param size\n+     * @param mimetype\n+     */\n+    void addUpdateIndex(final FedoraId fedoraId, final Instant created, final Instant modified,", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NzIyOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442487229", "bodyText": "Yeah - that's valid.  I wasn't sure if we wanted to couple the interface too tightly here.", "author": "dbernstein", "createdAt": "2020-06-18T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNjU4NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443806585", "bodyText": "I'm inclined to leave it as is - perhaps @awoods  may want to weigh in.", "author": "dbernstein", "createdAt": "2020-06-22T20:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDQwMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r446940401", "bodyText": "Are these the only fields that this method is going to accept, or are you planning on indexing more ResourceHeaders fields in the future as you build search out? If you're not planning on adding more, I'm okay with it. Otherwise, I think it would be better to have a different object in this method instead of an ever growing parameter list.", "author": "pwinckles", "createdAt": "2020-06-29T12:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNTk2Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r447935963", "bodyText": "It appears that this PR removed all the other fields, so it is now FEDORA_ID, MODIFIED or CREATED? Or is that not part of this?", "author": "whikloj", "createdAt": "2020-06-30T19:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MjM2NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r447982364", "bodyText": "So we will be adding fields  (size and mimetype) to this list.   I suppose we could have ResourceHeaders passed in.  I'm not sure why I was initially resistant to it.\n@whikloj :  the other fields will be added back in when they are actually supported by search.  Yes I did remove them to keep things tidy until we actually need them.", "author": "dbernstein", "createdAt": "2020-06-30T21:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MjQ1OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r447982458", "bodyText": "I will use ResourceHeaders.", "author": "dbernstein", "createdAt": "2020-06-30T21:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchIndex.java b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchIndex.java\nindex 82bdab79bb..8e18898fed 100644\n--- a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchIndex.java\n+++ b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchIndex.java\n", "chunk": "@@ -29,17 +28,15 @@ import java.time.Instant;\n public interface SearchIndex {\n \n     /**\n-     * @param fedoraId\n-     * @param created\n-     * @param modified\n-     * @param size\n-     * @param mimetype\n+     * Adds or updates the index with the resource header information.\n+     * @param resourceHeaders The resource headers associated with the resource\n+\n      */\n-    void addUpdateIndex(final FedoraId fedoraId, final Instant created, final Instant modified,\n-                        final Long size, final String mimetype);\n+    void addUpdateIndex(ResourceHeaders resourceHeaders);\n \n     /**\n-     * @param fedoraId\n+     * Removes indexed fields associated with the specified Fedora ID\n+     * @param fedoraId The Fedora ID\n      */\n     void removeFromIndex(FedoraId fedoraId);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjcwMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442462701", "body": "Should probably update the `toString` to include the additional fields.", "bodyText": "Should probably update the toString to include the additional fields.", "bodyHTML": "<p dir=\"auto\">Should probably update the <code>toString</code> to include the additional fields.</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:44:53Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java", "diffHunk": "@@ -74,6 +78,14 @@ public int getMaxResults() {\n         return conditions;\n     }\n \n+    /**\n+     * Returns the list of fields to display in the results.\n+     * @return\n+     */\n+    public List<Condition.Field> getFields() {\n+        return fields;\n+    }\n+\n     @Override\n     public String toString() {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNjY4OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443806688", "bodyText": "Will do.", "author": "dbernstein", "createdAt": "2020-06-22T20:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\nindex 198a5b4a7d..1fd949fc7f 100644\n--- a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n+++ b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n", "chunk": "@@ -92,6 +92,7 @@ public class SearchParameters {\n         helper.add(\"conditions\", conditions);\n         helper.add(\"maxResults\", maxResults);\n         helper.add(\"offset\", offset);\n+        helper.add(\"fields\", fields);\n         return helper.toString();\n     }\n }\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\nindex 1fd949fc7f..198a5b4a7d 100644\n--- a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n+++ b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n", "chunk": "@@ -92,7 +92,6 @@ public class SearchParameters {\n         helper.add(\"conditions\", conditions);\n         helper.add(\"maxResults\", maxResults);\n         helper.add(\"offset\", offset);\n-        helper.add(\"fields\", fields);\n         return helper.toString();\n     }\n }\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\nindex 198a5b4a7d..1fd949fc7f 100644\n--- a/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n+++ b/fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java\n", "chunk": "@@ -92,6 +92,7 @@ public class SearchParameters {\n         helper.add(\"conditions\", conditions);\n         helper.add(\"maxResults\", maxResults);\n         helper.add(\"offset\", offset);\n+        helper.add(\"fields\", fields);\n         return helper.toString();\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MzQ1NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442463455", "body": "Do we need to take any sql injection precautions here?", "bodyText": "Do we need to take any sql injection precautions here?", "bodyHTML": "<p dir=\"auto\">Do we need to take any sql injection precautions here?</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:46:16Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.PaginationInfo;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.search.api.SearchResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+\n+\n+/**\n+ * An implementation of the {@link SearchIndex}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class DbSearchIndexImpl implements SearchIndex {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DbSearchIndexImpl.class);\n+    private static final String SIMPLE_SEARCH_TABLE = \"simple_search\";\n+    private static final String DDL = \"sql/default-search-index.sql\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Setup database table and connection\n+     */\n+    @PostConstruct\n+    public void setup() {\n+        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                this.dataSource);\n+        this.jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n+\n+    @Override\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        var paramCount = 1;\n+\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            final var field = condition.getField();\n+            final var operation = condition.getOperator();\n+            var object = condition.getObject();\n+            if (field.equals(Condition.Field.FEDORA_ID) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNDM2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443814367", "bodyText": "Yes - good catch - I'll use parameterSource for those.", "author": "dbernstein", "createdAt": "2020-06-22T20:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MzQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -104,15 +106,17 @@ public class DbSearchIndexImpl implements SearchIndex {\n             final var field = condition.getField();\n             final var operation = condition.getOperator();\n             var object = condition.getObject();\n-            if (field.equals(Condition.Field.FEDORA_ID) &&\n+            if (field.equals(FEDORA_ID) &&\n                     condition.getOperator().equals(Condition.Operator.EQ)) {\n                 if (!object.equals(\"*\")) {\n+                    final var fedoraIdParam = \"fedoraId\";\n                     if (object.contains(\"*\")) {\n                         object = object.replace(\"*\", \"%\");\n-                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n+                        whereClauses.add(FEDORA_ID + \" like :\" + fedoraIdParam);\n                     } else {\n-                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n+                        whereClauses.add(FEDORA_ID + \" = :\" + fedoraIdParam);\n                     }\n+                    parameterSource.addValue(fedoraIdParam, object);\n                 }\n             } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n                 //parse date\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..1bddc3423b 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -106,17 +104,15 @@ public class DbSearchIndexImpl implements SearchIndex {\n             final var field = condition.getField();\n             final var operation = condition.getOperator();\n             var object = condition.getObject();\n-            if (field.equals(FEDORA_ID) &&\n+            if (field.equals(Condition.Field.FEDORA_ID) &&\n                     condition.getOperator().equals(Condition.Operator.EQ)) {\n                 if (!object.equals(\"*\")) {\n-                    final var fedoraIdParam = \"fedoraId\";\n                     if (object.contains(\"*\")) {\n                         object = object.replace(\"*\", \"%\");\n-                        whereClauses.add(FEDORA_ID + \" like :\" + fedoraIdParam);\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n                     } else {\n-                        whereClauses.add(FEDORA_ID + \" = :\" + fedoraIdParam);\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n                     }\n-                    parameterSource.addValue(fedoraIdParam, object);\n                 }\n             } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n                 //parse date\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -104,15 +106,17 @@ public class DbSearchIndexImpl implements SearchIndex {\n             final var field = condition.getField();\n             final var operation = condition.getOperator();\n             var object = condition.getObject();\n-            if (field.equals(Condition.Field.FEDORA_ID) &&\n+            if (field.equals(FEDORA_ID) &&\n                     condition.getOperator().equals(Condition.Operator.EQ)) {\n                 if (!object.equals(\"*\")) {\n+                    final var fedoraIdParam = \"fedoraId\";\n                     if (object.contains(\"*\")) {\n                         object = object.replace(\"*\", \"%\");\n-                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n+                        whereClauses.add(FEDORA_ID + \" like :\" + fedoraIdParam);\n                     } else {\n-                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n+                        whereClauses.add(FEDORA_ID + \" = :\" + fedoraIdParam);\n                     }\n+                    parameterSource.addValue(fedoraIdParam, object);\n                 }\n             } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n                 //parse date\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NjAzNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442466034", "body": "Small simplification:\r\n\r\n```java\r\nfinal String sql;\r\n\r\nif (result.size() > 0) {\r\n    sql = \"...\";\r\n} else {\r\n    params.add...;\r\n    sql = \"...\";\r\n}\r\n\r\njdbcTemplate.update(sql, params);\r\n```", "bodyText": "Small simplification:\nfinal String sql;\n\nif (result.size() > 0) {\n    sql = \"...\";\n} else {\n    params.add...;\n    sql = \"...\";\n}\n\njdbcTemplate.update(sql, params);", "bodyHTML": "<p dir=\"auto\">Small simplification:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final String sql;\n\nif (result.size() &gt; 0) {\n    sql = &quot;...&quot;;\n} else {\n    params.add...;\n    sql = &quot;...&quot;;\n}\n\njdbcTemplate.update(sql, params);\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> sql;\n\n<span class=\"pl-k\">if</span> (result<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n    sql <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>...<span class=\"pl-pds\">\"</span></span>;\n} <span class=\"pl-k\">else</span> {\n    params<span class=\"pl-k\">.</span>add<span class=\"pl-k\">.</span><span class=\"pl-c1\">..</span>;\n    sql <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>...<span class=\"pl-pds\">\"</span></span>;\n}\n\njdbcTemplate<span class=\"pl-k\">.</span>update(sql, params);</pre></div>", "author": "pwinckles", "createdAt": "2020-06-18T19:51:24Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.PaginationInfo;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.search.api.SearchResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+\n+\n+/**\n+ * An implementation of the {@link SearchIndex}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class DbSearchIndexImpl implements SearchIndex {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DbSearchIndexImpl.class);\n+    private static final String SIMPLE_SEARCH_TABLE = \"simple_search\";\n+    private static final String DDL = \"sql/default-search-index.sql\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Setup database table and connection\n+     */\n+    @PostConstruct\n+    public void setup() {\n+        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                this.dataSource);\n+        this.jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n+\n+    @Override\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        var paramCount = 1;\n+\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            final var field = condition.getField();\n+            final var operation = condition.getOperator();\n+            var object = condition.getObject();\n+            if (field.equals(Condition.Field.FEDORA_ID) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n+                //parse date\n+                try {\n+                    final var instant = InstantParser.parse(object);\n+                    final var paramName = \"param\" + paramCount++;\n+                    whereClauses.add(field + \" \" + operation.getStringValue() +\n+                            \" :\" + paramName);\n+                    parameterSource.addValue(paramName, new Date(instant.toEpochMilli()), Types.TIMESTAMP);\n+                } catch (Exception ex) {\n+                    throw new InvalidQueryException(ex.getMessage());\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \\\"\" + condition + \"\\\"\");\n+            }\n+        }\n+\n+        final var fields = parameters.getFields().stream().map(x -> x.toString()).collect(Collectors.toList());\n+        final var sql =\n+                new StringBuilder(\"SELECT \" + String.join(\",\", fields) + \" FROM \" + SIMPLE_SEARCH_TABLE);\n+\n+        if (!whereClauses.isEmpty()) {\n+            sql.append(\" WHERE \");\n+            for (var it = whereClauses.iterator(); it.hasNext(); ) {\n+                sql.append(it.next());\n+                if (it.hasNext()) {\n+                    sql.append(\" AND \");\n+                }\n+            }\n+        }\n+        sql.append(\" ORDER BY \" + Condition.Field.FEDORA_ID);\n+        sql.append(\" LIMIT :limit OFFSET :offset\");\n+        parameterSource.addValue(\"limit\", parameters.getMaxResults());\n+        parameterSource.addValue(\"offset\", parameters.getOffset());\n+\n+        final var rowMapper = new RowMapper<Map<String, Object>>() {\n+            @Override\n+            public Map<String, Object> mapRow(final ResultSet rs, final int rowNum) throws SQLException {\n+                final Map<String, Object> map = new HashMap<>();\n+                for (String f : fields) {\n+                    var value = rs.getObject(f);\n+                    if (value instanceof Timestamp) {\n+                        value = ISO_INSTANT.format(Instant.ofEpochMilli(((Timestamp) value).getTime()));\n+                    }\n+                    map.put(f, value);\n+                }\n+                return map;\n+            }\n+        };\n+\n+        final List<Map<String, Object>> items = jdbcTemplate.query(sql.toString(), parameterSource, rowMapper);\n+        final var pagination = new PaginationInfo(parameters.getMaxResults(), parameters.getOffset());\n+        LOGGER.debug(\"Search query with parameters: {} - {}\", sql, parameters);\n+        return new SearchResult(items, pagination);\n+    }\n+\n+    @Override\n+    public void addUpdateIndex(final FedoraId fedoraId, final Instant created, final Instant modified,\n+                               final Long size, final String mimetype) {\n+        final var fullId = fedoraId.getFullId();\n+        final var selectParams = new MapSqlParameterSource();\n+        selectParams.addValue(\"fedora_id\", fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE fedora_id = :fedora_id\",\n+                selectParams);\n+\n+        final var txId = UUID.randomUUID().toString();\n+        executeInDbTransaction(txId, status -> {\n+            try {\n+\n+                final var params = new MapSqlParameterSource();\n+                params.addValue(\"fedora_id\", fullId);\n+                params.addValue(\"modified\", modified);\n+\n+                if (result.size() > 0) {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNjMwNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443836307", "bodyText": "+1", "author": "dbernstein", "createdAt": "2020-06-22T21:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NjAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -174,31 +178,32 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        selectParams.addValue(\"fedora_id\", fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE fedora_id = :fedora_id\",\n-                selectParams);\n+        final var fedoraIdParam = FEDORA_ID.toString();\n+        selectParams.addValue(fedoraIdParam, fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fullId);\n-                params.addValue(\"modified\", modified);\n-\n+                params.addValue( fedoraIdParam, fullId);\n+                final var modifiedParam = \"modified\";\n+                params.addValue(modifiedParam, modified);\n+                final String sql;\n                 if (result.size() > 0) {\n                     //update\n-                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n+                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    params.addValue(\"created\", created);\n-\n-                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:fedora_id, :modified, :created)\";\n-                    jdbcTemplate.update(sql, params);\n+                    final var createdParam = \"created\";\n+                    params.addValue(createdParam, created);\n+                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n+                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..1bddc3423b 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -178,32 +174,31 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        final var fedoraIdParam = FEDORA_ID.toString();\n-        selectParams.addValue(fedoraIdParam, fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n+        selectParams.addValue(\"fedora_id\", fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE fedora_id = :fedora_id\",\n+                selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue( fedoraIdParam, fullId);\n-                final var modifiedParam = \"modified\";\n-                params.addValue(modifiedParam, modified);\n-                final String sql;\n+                params.addValue(\"fedora_id\", fullId);\n+                params.addValue(\"modified\", modified);\n+\n                 if (result.size() > 0) {\n                     //update\n-                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n+                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    final var createdParam = \"created\";\n-                    params.addValue(createdParam, created);\n-                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n+                    params.addValue(\"created\", created);\n+\n+                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:fedora_id, :modified, :created)\";\n+                    jdbcTemplate.update(sql, params);\n                 }\n-                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -174,31 +178,32 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        selectParams.addValue(\"fedora_id\", fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE fedora_id = :fedora_id\",\n-                selectParams);\n+        final var fedoraIdParam = FEDORA_ID.toString();\n+        selectParams.addValue(fedoraIdParam, fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fullId);\n-                params.addValue(\"modified\", modified);\n-\n+                params.addValue( fedoraIdParam, fullId);\n+                final var modifiedParam = \"modified\";\n+                params.addValue(modifiedParam, modified);\n+                final String sql;\n                 if (result.size() > 0) {\n                     //update\n-                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n+                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    params.addValue(\"created\", created);\n-\n-                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:fedora_id, :modified, :created)\";\n-                    jdbcTemplate.update(sql, params);\n+                    final var createdParam = \"created\";\n+                    params.addValue(createdParam, created);\n+                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n+                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..7934b62331 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -199,7 +199,8 @@ public class DbSearchIndexImpl implements SearchIndex {\n                     jdbcTemplate.update(sql, params);\n                 } else {\n                     final var createdParam = \"created\";\n-                    params.addValue(createdParam, created);\n+                    ;\n+                    params.addValue(createdParam, new Timestamp(resourceHeaders.getCreatedDate().toEpochMilli()));\n                     sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n                             \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NzEzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442467138", "body": "You can also get this with `ZoneOffset.UTC`", "bodyText": "You can also get this with ZoneOffset.UTC", "bodyHTML": "<p dir=\"auto\">You can also get this with <code>ZoneOffset.UTC</code></p>", "author": "pwinckles", "createdAt": "2020-06-18T19:53:31Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.time.format.DateTimeFormatter.ISO_DATE_TIME;\n+import static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n+import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;\n+\n+/**\n+ * A utility class for parsing a variety of different date/time formats into an Instant.\n+ *\n+ * @author dbernstein\n+ */\n+public class InstantParser {\n+\n+    private static final List<DateTimeFormatter> VALID_DATE_FORMATS = new ArrayList<>();\n+\n+    static {\n+        VALID_DATE_FORMATS.add(ISO_DATE_TIME);\n+        VALID_DATE_FORMATS.add(ISO_OFFSET_DATE_TIME);\n+        VALID_DATE_FORMATS.add(RFC_1123_DATE_TIME);\n+        final var zoneId = ZoneId.of(\"UTC\");", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\nindex 4ba6296891..c890a35f64 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n", "chunk": "@@ -42,7 +42,7 @@ public class InstantParser {\n         VALID_DATE_FORMATS.add(ISO_DATE_TIME);\n         VALID_DATE_FORMATS.add(ISO_OFFSET_DATE_TIME);\n         VALID_DATE_FORMATS.add(RFC_1123_DATE_TIME);\n-        final var zoneId = ZoneId.of(\"UTC\");\n+        final var zoneId = ZoneOffset.UTC;\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd\")\n                 .parseDefaulting(ChronoField.NANO_OF_DAY, 0).toFormatter().withZone(zoneId));\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyyMMdd\")\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\nindex c890a35f64..4ba6296891 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n", "chunk": "@@ -42,7 +42,7 @@ public class InstantParser {\n         VALID_DATE_FORMATS.add(ISO_DATE_TIME);\n         VALID_DATE_FORMATS.add(ISO_OFFSET_DATE_TIME);\n         VALID_DATE_FORMATS.add(RFC_1123_DATE_TIME);\n-        final var zoneId = ZoneOffset.UTC;\n+        final var zoneId = ZoneId.of(\"UTC\");\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd\")\n                 .parseDefaulting(ChronoField.NANO_OF_DAY, 0).toFormatter().withZone(zoneId));\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyyMMdd\")\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\nindex 4ba6296891..c890a35f64 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/InstantParser.java\n", "chunk": "@@ -42,7 +42,7 @@ public class InstantParser {\n         VALID_DATE_FORMATS.add(ISO_DATE_TIME);\n         VALID_DATE_FORMATS.add(ISO_OFFSET_DATE_TIME);\n         VALID_DATE_FORMATS.add(RFC_1123_DATE_TIME);\n-        final var zoneId = ZoneId.of(\"UTC\");\n+        final var zoneId = ZoneOffset.UTC;\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd\")\n                 .parseDefaulting(ChronoField.NANO_OF_DAY, 0).toFormatter().withZone(zoneId));\n         VALID_DATE_FORMATS.add(new DateTimeFormatterBuilder().appendPattern(\"yyyyMMdd\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQ5OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442468498", "body": "I'm not sure there's a guaranteed event type ordering, so if multiple events occur on the same object in the same transaction, the search index could be updated in the wrong order here.", "bodyText": "I'm not sure there's a guaranteed event type ordering, so if multiple events occur on the same object in the same transaction, the search index could be updated in the wrong order here.", "bodyHTML": "<p dir=\"auto\">I'm not sure there's a guaranteed event type ordering, so if multiple events occur on the same object in the same transaction, the search index could be updated in the wrong order here.</p>", "author": "pwinckles", "createdAt": "2020-06-18T19:56:02Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.fcrepo.search.impl;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.observer.Event;\n+import org.fcrepo.kernel.api.observer.EventType;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import java.util.Set;\n+\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_CREATION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_DELETION;\n+import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_MODIFICATION;\n+\n+/**\n+ * This class listens to events from the event bus and updates the search\n+ * index accordingly.\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class SearchIndexUpdater {\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private SearchIndex searchIndex;\n+\n+    @Inject\n+    private ResourceFactory resourceFactory;\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    private static Logger LOGGER = LoggerFactory.getLogger(SearchIndexUpdater.class);\n+    private static final Set<EventType> HANDLED_TYPES = Sets.newHashSet(RESOURCE_CREATION, RESOURCE_MODIFICATION,\n+            RESOURCE_DELETION);\n+\n+    @Subscribe\n+    public void onEvent(final Event event) {\n+        LOGGER.info(\"event={}\", event);\n+        try {\n+            final var types = event.getTypes();\n+            for (EventType et : types) {", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MDkyMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442880920", "bodyText": "This is a good point, and because the only thing we care is that something happened to the resource maybe regardless of the event we should just see if the resource exists. If it does reindex and if not delete.\nIn which case it would be good to not reindex for multiple quickly occurring events. Like an aggregator which collects all the events that occur on a single resource in a specified time frame and then reduces them to a single action.", "author": "whikloj", "createdAt": "2020-06-19T14:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MDU5Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443840597", "bodyText": "I'm not sure that I understand the issue here.\nAre you saying that a single event can have a \"delete\",  a \"create\" and an \"update\" event type?", "author": "dbernstein", "createdAt": "2020-06-22T21:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2MDkzNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443860937", "bodyText": "I'll integrate @whikloj 's suggestion.", "author": "dbernstein", "createdAt": "2020-06-22T22:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..2c58f1d8e9 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -68,23 +67,25 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n-    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.debug(\"event={}\", event);\n+        LOGGER.info(\"event={}\", event);\n         try {\n-            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n-                this.searchIndex.removeFromIndex(fedoraId);\n-            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n-                final var session = persistentStorageSessionManager.getReadOnlySession();\n-                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+            for (EventType et : types) {\n+                final var fedoraId = event.getFedoraId();\n+                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n+                    final var session = persistentStorageSessionManager.getReadOnlySession();\n+                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                            headers.getContentSize(), headers.getMimeType());\n+                } else if (RESOURCE_DELETION.equals(et)) {\n+                    this.searchIndex.removeFromIndex(fedoraId);\n+                }\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n+\n     }\n \n     /**\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 2c58f1d8e9..1e1a43afbe 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -67,25 +68,23 @@ public class SearchIndexUpdater {\n             RESOURCE_DELETION);\n \n     @Subscribe\n+    @AllowConcurrentEvents\n     public void onEvent(final Event event) {\n-        LOGGER.info(\"event={}\", event);\n+        LOGGER.debug(\"event={}\", event);\n         try {\n+            final var fedoraId = event.getFedoraId();\n             final var types = event.getTypes();\n-            for (EventType et : types) {\n-                final var fedoraId = event.getFedoraId();\n-                if (RESOURCE_CREATION.equals(et) || RESOURCE_MODIFICATION.equals(et)) {\n-                    final var session = persistentStorageSessionManager.getReadOnlySession();\n-                    final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                    this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                            headers.getContentSize(), headers.getMimeType());\n-                } else if (RESOURCE_DELETION.equals(et)) {\n-                    this.searchIndex.removeFromIndex(fedoraId);\n-                }\n+            if (types.contains(RESOURCE_DELETION) && !resourceFactory.doesResourceExist(null, fedoraId)) {\n+                this.searchIndex.removeFromIndex(fedoraId);\n+            } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n+                final var session = persistentStorageSessionManager.getReadOnlySession();\n+                final var headers = session.getHeaders(fedoraId.getFullId(), null);\n+                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n+                        headers.getContentSize(), headers.getMimeType());\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n         }\n-\n     }\n \n     /**\n", "next_change": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\nindex 1e1a43afbe..7d4dad0941 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchIndexUpdater.java\n", "chunk": "@@ -79,8 +79,7 @@ public class SearchIndexUpdater {\n             } else if (types.contains(RESOURCE_CREATION) || types.contains(RESOURCE_MODIFICATION)) {\n                 final var session = persistentStorageSessionManager.getReadOnlySession();\n                 final var headers = session.getHeaders(fedoraId.getFullId(), null);\n-                this.searchIndex.addUpdateIndex(fedoraId, headers.getCreatedDate(), headers.getLastModifiedDate(),\n-                        headers.getContentSize(), headers.getMimeType());\n+                this.searchIndex.addUpdateIndex(headers);\n             }\n         } catch (final PersistentStorageException e) {\n             LOGGER.error(\"Failed to handle event: \" + event, e);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2ODgyNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442868825", "body": "Since the value of `DDL` doesn't change it could either be removed or moved to a debug level.", "bodyText": "Since the value of DDL doesn't change it could either be removed or moved to a debug level.", "bodyHTML": "<p dir=\"auto\">Since the value of <code>DDL</code> doesn't change it could either be removed or moved to a debug level.</p>", "author": "whikloj", "createdAt": "2020-06-19T14:21:23Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.PaginationInfo;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.search.api.SearchResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+\n+\n+/**\n+ * An implementation of the {@link SearchIndex}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class DbSearchIndexImpl implements SearchIndex {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DbSearchIndexImpl.class);\n+    private static final String SIMPLE_SEARCH_TABLE = \"simple_search\";\n+    private static final String DDL = \"sql/default-search-index.sql\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Setup database table and connection\n+     */\n+    @PostConstruct\n+    public void setup() {\n+        LOGGER.info(\"Applying ddl: {}\", DDL);", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNDE5MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r443814191", "bodyText": "will change to debug.", "author": "dbernstein", "createdAt": "2020-06-22T20:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2ODgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -82,7 +84,7 @@ public class DbSearchIndexImpl implements SearchIndex {\n      */\n     @PostConstruct\n     public void setup() {\n-        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        LOGGER.debug(\"Applying ddl: {}\", DDL);\n         DatabasePopulatorUtils.execute(\n                 new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n                 this.dataSource);\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..1bddc3423b 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -84,7 +82,7 @@ public class DbSearchIndexImpl implements SearchIndex {\n      */\n     @PostConstruct\n     public void setup() {\n-        LOGGER.debug(\"Applying ddl: {}\", DDL);\n+        LOGGER.info(\"Applying ddl: {}\", DDL);\n         DatabasePopulatorUtils.execute(\n                 new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n                 this.dataSource);\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -82,7 +84,7 @@ public class DbSearchIndexImpl implements SearchIndex {\n      */\n     @PostConstruct\n     public void setup() {\n-        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        LOGGER.debug(\"Applying ddl: {}\", DDL);\n         DatabasePopulatorUtils.execute(\n                 new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n                 this.dataSource);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MzI3MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r442873271", "body": "Can use `Condition.Field.FEDORA_ID` here and the line above, ie.\r\n```\r\n        final var result = jdbcTemplate.queryForList(\"SELECT \" + Condition.Field.FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\r\n                        \" WHERE \" + Condition.Field.FEDORA_ID + \" = :fedora_id\",\r\n```", "bodyText": "Can use Condition.Field.FEDORA_ID here and the line above, ie.\n        final var result = jdbcTemplate.queryForList(\"SELECT \" + Condition.Field.FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n                        \" WHERE \" + Condition.Field.FEDORA_ID + \" = :fedora_id\",", "bodyHTML": "<p dir=\"auto\">Can use <code>Condition.Field.FEDORA_ID</code> here and the line above, ie.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final var result = jdbcTemplate.queryForList(&quot;SELECT &quot; + Condition.Field.FEDORA_ID + &quot; FROM &quot; + SIMPLE_SEARCH_TABLE +\n                        &quot; WHERE &quot; + Condition.Field.FEDORA_ID + &quot; = :fedora_id&quot;,\"><pre><code>        final var result = jdbcTemplate.queryForList(\"SELECT \" + Condition.Field.FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n                        \" WHERE \" + Condition.Field.FEDORA_ID + \" = :fedora_id\",\n</code></pre></div>", "author": "whikloj", "createdAt": "2020-06-19T14:29:21Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.impl;\n+\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.PaginationInfo;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.search.api.SearchResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+\n+\n+/**\n+ * An implementation of the {@link SearchIndex}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class DbSearchIndexImpl implements SearchIndex {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DbSearchIndexImpl.class);\n+    private static final String SIMPLE_SEARCH_TABLE = \"simple_search\";\n+    private static final String DDL = \"sql/default-search-index.sql\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Setup database table and connection\n+     */\n+    @PostConstruct\n+    public void setup() {\n+        LOGGER.info(\"Applying ddl: {}\", DDL);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                this.dataSource);\n+        this.jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n+\n+    @Override\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        var paramCount = 1;\n+\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            final var field = condition.getField();\n+            final var operation = condition.getOperator();\n+            var object = condition.getObject();\n+            if (field.equals(Condition.Field.FEDORA_ID) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(Condition.Field.FEDORA_ID + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n+                //parse date\n+                try {\n+                    final var instant = InstantParser.parse(object);\n+                    final var paramName = \"param\" + paramCount++;\n+                    whereClauses.add(field + \" \" + operation.getStringValue() +\n+                            \" :\" + paramName);\n+                    parameterSource.addValue(paramName, new Date(instant.toEpochMilli()), Types.TIMESTAMP);\n+                } catch (Exception ex) {\n+                    throw new InvalidQueryException(ex.getMessage());\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \\\"\" + condition + \"\\\"\");\n+            }\n+        }\n+\n+        final var fields = parameters.getFields().stream().map(x -> x.toString()).collect(Collectors.toList());\n+        final var sql =\n+                new StringBuilder(\"SELECT \" + String.join(\",\", fields) + \" FROM \" + SIMPLE_SEARCH_TABLE);\n+\n+        if (!whereClauses.isEmpty()) {\n+            sql.append(\" WHERE \");\n+            for (var it = whereClauses.iterator(); it.hasNext(); ) {\n+                sql.append(it.next());\n+                if (it.hasNext()) {\n+                    sql.append(\" AND \");\n+                }\n+            }\n+        }\n+        sql.append(\" ORDER BY \" + Condition.Field.FEDORA_ID);\n+        sql.append(\" LIMIT :limit OFFSET :offset\");\n+        parameterSource.addValue(\"limit\", parameters.getMaxResults());\n+        parameterSource.addValue(\"offset\", parameters.getOffset());\n+\n+        final var rowMapper = new RowMapper<Map<String, Object>>() {\n+            @Override\n+            public Map<String, Object> mapRow(final ResultSet rs, final int rowNum) throws SQLException {\n+                final Map<String, Object> map = new HashMap<>();\n+                for (String f : fields) {\n+                    var value = rs.getObject(f);\n+                    if (value instanceof Timestamp) {\n+                        value = ISO_INSTANT.format(Instant.ofEpochMilli(((Timestamp) value).getTime()));\n+                    }\n+                    map.put(f, value);\n+                }\n+                return map;\n+            }\n+        };\n+\n+        final List<Map<String, Object>> items = jdbcTemplate.query(sql.toString(), parameterSource, rowMapper);\n+        final var pagination = new PaginationInfo(parameters.getMaxResults(), parameters.getOffset());\n+        LOGGER.debug(\"Search query with parameters: {} - {}\", sql, parameters);\n+        return new SearchResult(items, pagination);\n+    }\n+\n+    @Override\n+    public void addUpdateIndex(final FedoraId fedoraId, final Instant created, final Instant modified,\n+                               final Long size, final String mimetype) {\n+        final var fullId = fedoraId.getFullId();\n+        final var selectParams = new MapSqlParameterSource();\n+        selectParams.addValue(\"fedora_id\", fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE fedora_id = :fedora_id\",", "originalCommit": "e96979a32bdfaec42dd7dd0b38d6048d35cfe3cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -174,31 +178,32 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        selectParams.addValue(\"fedora_id\", fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE fedora_id = :fedora_id\",\n-                selectParams);\n+        final var fedoraIdParam = FEDORA_ID.toString();\n+        selectParams.addValue(fedoraIdParam, fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fullId);\n-                params.addValue(\"modified\", modified);\n-\n+                params.addValue( fedoraIdParam, fullId);\n+                final var modifiedParam = \"modified\";\n+                params.addValue(modifiedParam, modified);\n+                final String sql;\n                 if (result.size() > 0) {\n                     //update\n-                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n+                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    params.addValue(\"created\", created);\n-\n-                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:fedora_id, :modified, :created)\";\n-                    jdbcTemplate.update(sql, params);\n+                    final var createdParam = \"created\";\n+                    params.addValue(createdParam, created);\n+                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n+                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "702efc5bba82ec738af731747a0be3672bc08eb6", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..1bddc3423b 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -178,32 +174,31 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        final var fedoraIdParam = FEDORA_ID.toString();\n-        selectParams.addValue(fedoraIdParam, fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n+        selectParams.addValue(\"fedora_id\", fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE fedora_id = :fedora_id\",\n+                selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue( fedoraIdParam, fullId);\n-                final var modifiedParam = \"modified\";\n-                params.addValue(modifiedParam, modified);\n-                final String sql;\n+                params.addValue(\"fedora_id\", fullId);\n+                params.addValue(\"modified\", modified);\n+\n                 if (result.size() > 0) {\n                     //update\n-                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n+                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    final var createdParam = \"created\";\n-                    params.addValue(createdParam, created);\n-                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n+                    params.addValue(\"created\", created);\n+\n+                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:fedora_id, :modified, :created)\";\n+                    jdbcTemplate.update(sql, params);\n                 }\n-                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "99427588ce9d21e31a52c215bb32b5e56127c055", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 1bddc3423b..37322e506f 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -174,31 +178,32 @@ public class DbSearchIndexImpl implements SearchIndex {\n                                final Long size, final String mimetype) {\n         final var fullId = fedoraId.getFullId();\n         final var selectParams = new MapSqlParameterSource();\n-        selectParams.addValue(\"fedora_id\", fullId);\n-        final var result = jdbcTemplate.queryForList(\"SELECT fedora_id FROM \" + SIMPLE_SEARCH_TABLE +\n-                        \" WHERE fedora_id = :fedora_id\",\n-                selectParams);\n+        final var fedoraIdParam = FEDORA_ID.toString();\n+        selectParams.addValue(fedoraIdParam, fullId);\n+        final var result = jdbcTemplate.queryForList(\"SELECT \" + FEDORA_ID + \" FROM \" + SIMPLE_SEARCH_TABLE +\n+                        \" WHERE \" + FEDORA_ID + \" = :\" + fedoraIdParam, selectParams);\n \n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n \n                 final var params = new MapSqlParameterSource();\n-                params.addValue(\"fedora_id\", fullId);\n-                params.addValue(\"modified\", modified);\n-\n+                params.addValue( fedoraIdParam, fullId);\n+                final var modifiedParam = \"modified\";\n+                params.addValue(modifiedParam, modified);\n+                final String sql;\n                 if (result.size() > 0) {\n                     //update\n-                    final var sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n-                            \" SET modified=:modified  WHERE fedora_id = :fedora_id;\";\n+                    sql = \"UPDATE \" + SIMPLE_SEARCH_TABLE +\n+                            \" SET modified=:\" + modifiedParam + \" WHERE fedora_id = :\" + fedoraIdParam + \";\";\n                     jdbcTemplate.update(sql, params);\n                 } else {\n-                    params.addValue(\"created\", created);\n-\n-                    final var sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n-                            \"VALUES(:fedora_id, :modified, :created)\";\n-                    jdbcTemplate.update(sql, params);\n+                    final var createdParam = \"created\";\n+                    params.addValue(createdParam, created);\n+                    sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n+                            \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n+                jdbcTemplate.update(sql, params);\n                 return null;\n             } catch (Exception e) {\n                 status.setRollbackOnly();\n", "next_change": {"commit": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "changed_code": [{"header": "diff --git a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\nindex 37322e506f..7934b62331 100644\n--- a/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n+++ b/fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java\n", "chunk": "@@ -199,7 +199,8 @@ public class DbSearchIndexImpl implements SearchIndex {\n                     jdbcTemplate.update(sql, params);\n                 } else {\n                     final var createdParam = \"created\";\n-                    params.addValue(createdParam, created);\n+                    ;\n+                    params.addValue(createdParam, new Timestamp(resourceHeaders.getCreatedDate().toEpochMilli()));\n                     sql = \"INSERT INTO \" + SIMPLE_SEARCH_TABLE + \" (fedora_id, modified, created) \" +\n                             \"VALUES(:\" + fedoraIdParam + \", :\" + modifiedParam + \", :\" + createdParam + \")\";\n                 }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "url": "https://github.com/fcrepo/fcrepo/commit/7c8b36fe23f6555d13b51e0b70ef9b60eb03126b", "message": "Address PR feedback.", "committedDate": "2020-06-22T22:47:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzMzkwMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r447933901", "body": "The size of `result.getItems().size()` is asserted as 0 above, so this stream is never run and can probably be removed.", "bodyText": "The size of result.getItems().size() is asserted as 0 above, so this stream is never run and can probably be removed.", "bodyHTML": "<p dir=\"auto\">The size of <code>result.getItems().size()</code> is asserted as 0 above, so this stream is never run and can probably be removed.</p>", "author": "whikloj", "createdAt": "2020-06-30T19:39:50Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java", "diffHunk": "@@ -124,11 +136,184 @@ public void testWildcardMatchingOnPartialFedoraId() throws Exception {\n                 assertEquals(\"expected \" + count + \" items where condition = \" + condition, count,\n                         result.getItems().size());\n \n-                result.getItems().stream().map(x -> x.get(\"fedora_id\"))\n+                result.getItems().stream().map(x -> x.get(FEDORA_ID.toString()))\n                         .forEach(x -> assertTrue(x.toString().startsWith(urlPrefix)));\n             }\n         }\n+    }\n+\n+    @Test\n+    public void testUpdateSearchIndexOnResourceUpdate() throws Exception {\n+        final var resourceId = createResources(1).get(0);\n+        final var condition = FEDORA_ID + \"=\" + resourceId;\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        String modified = null;\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected 1 item where condition = \" + condition, 1,\n+                    result.getItems().size());\n+            modified = result.getItems().get(0).get(MODIFIED.toString()).toString();\n+        }\n+\n+        final var patch = new HttpPatch(resourceId);\n+        patch.setHeader(\"Content-Type\", \"application/sparql-update\");\n+        patch.setEntity(new StringEntity(\"insert data { <> <http://example/blah> \\\"Blah\\\". }\"));\n+        try (final CloseableHttpResponse response = execute(patch)) {\n+            assertEquals(NO_CONTENT.getStatusCode(), getStatus(response));\n+        }\n+\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected 1 item where condition = \" + condition, 1,\n+                    result.getItems().size());\n+            final var newModified = result.getItems().get(0).get(MODIFIED.toString()).toString();\n+            assertNotEquals(\"Modified date should have changed  but it did not.\", modified, newModified);\n+        }\n+    }\n+\n+    @Test\n+    public void testUpdateSearchIndexOnResourceDelete() throws Exception {\n+        final var resourceId = createResources(1).get(0);\n+        final var condition = FEDORA_ID + \"=\" + resourceId;\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected 1 item where condition = \" + condition, 1,\n+                    result.getItems().size());\n+        }\n+\n+        final var httpDelete = new HttpDelete(resourceId);\n+        try (final CloseableHttpResponse response = execute(httpDelete)) {\n+            assertEquals(NO_CONTENT.getStatusCode(), getStatus(response));\n+        }\n+\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected 0 items where condition = \" + condition, 0,\n+                    result.getItems().size());\n+        }\n+    }\n+\n+    public void testModifiedGreaterAndLessThan() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final int count = 1;\n+        final var instant = Instant.now();\n+        final var now = instant.toString();\n+        final var tomorrow = instant.plus(Duration.ofDays(1)).toString();\n+        createResources(id, count);\n+        final var fedoraId = FEDORA_ID_PREFIX + \"/\" + id;\n+        final var fedoraIdCondition = FEDORA_ID + \"=\" + fedoraId;\n+        final var lessThanNow = MODIFIED + \"<\" + now;\n+        final var greaterThanNow = MODIFIED + \">\" + now;\n+        final var lessThanTomorrow = MODIFIED + \"<\" + tomorrow;\n+        final var greaterThanTomorrow = MODIFIED + \">\" + tomorrow;\n+\n+        //no results for resources modified before now\n+        String searchUrl =\n+                getSearchEndpoint() + \"condition=\" + encode(fedoraIdCondition) + \"&\" + lessThanNow;\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected no results\", 0,\n+                    result.getItems().size());\n+            result.getItems().stream().map(x -> x.get(\"fedora_id\"))\n+                    .forEach(x -> assertTrue(x.toString().equals(fedoraId)));\n+        }\n+        //no results for resources modified after tomorrow\n+        searchUrl =\n+                getSearchEndpoint() + \"condition=\" + encode(fedoraIdCondition) + \"&\" + greaterThanTomorrow;\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                    SearchResult.class);\n+            assertEquals(\"expected no results\", 0,\n+                    result.getItems().size());\n+            result.getItems().stream().map(x -> x.get(\"fedora_id\"))\n+                    .forEach(x -> assertTrue(x.toString().equals(fedoraId)));", "originalCommit": "953df4bfa0f7f851715333e0b19f0ac9b806680c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NTAwNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1703#discussion_r447985005", "bodyText": "Good eye.", "author": "dbernstein", "createdAt": "2020-06-30T21:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzMzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa9d68dad2cf74e45fbe071357871296d95be003", "changed_code": [{"header": "diff --git a/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java b/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java\nindex abff0261b9..33c622e3b8 100644\n--- a/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java\n+++ b/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java\n", "chunk": "@@ -243,8 +241,6 @@ public class FedoraSearchIT extends AbstractResourceIT {\n                     SearchResult.class);\n             assertEquals(\"expected no results\", 0,\n                     result.getItems().size());\n-            result.getItems().stream().map(x -> x.get(\"fedora_id\"))\n-                    .forEach(x -> assertTrue(x.toString().equals(fedoraId)));\n         }\n \n         // ensure that greater than now returns a result\n", "next_change": null}]}}, {"oid": "702efc5bba82ec738af731747a0be3672bc08eb6", "url": "https://github.com/fcrepo/fcrepo/commit/702efc5bba82ec738af731747a0be3672bc08eb6", "message": "Moves the search index into its own table.\nAdds support for searching by modified and created dates.\nAdds support for customizing the output fields of your search.\nBy default all fields returned.\n\nResolves:\nhttps://jira.lyrasis.org/browse/FCREPO-3349\nhttps://jira.lyrasis.org/browse/FCREPO-3353\nhttps://jira.lyrasis.org/browse/FCREPO-3354", "committedDate": "2020-07-02T16:56:39Z", "type": "commit"}, {"oid": "99427588ce9d21e31a52c215bb32b5e56127c055", "url": "https://github.com/fcrepo/fcrepo/commit/99427588ce9d21e31a52c215bb32b5e56127c055", "message": "Address PR feedback.", "committedDate": "2020-07-02T16:56:40Z", "type": "commit"}, {"oid": "aa9d68dad2cf74e45fbe071357871296d95be003", "url": "https://github.com/fcrepo/fcrepo/commit/aa9d68dad2cf74e45fbe071357871296d95be003", "message": "Removes unnecessary assertions.", "committedDate": "2020-07-02T16:56:40Z", "type": "commit"}, {"oid": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "url": "https://github.com/fcrepo/fcrepo/commit/92e065a1efe1422fbbe4c2d3a6e2506178751958", "message": "Refactors SearchIndex.addUpdateIndex() method to take a single (ResourceHeaders) parameter.", "committedDate": "2020-07-02T18:16:41Z", "type": "commit"}, {"oid": "92e065a1efe1422fbbe4c2d3a6e2506178751958", "url": "https://github.com/fcrepo/fcrepo/commit/92e065a1efe1422fbbe4c2d3a6e2506178751958", "message": "Refactors SearchIndex.addUpdateIndex() method to take a single (ResourceHeaders) parameter.", "committedDate": "2020-07-02T18:16:41Z", "type": "forcePushed"}]}