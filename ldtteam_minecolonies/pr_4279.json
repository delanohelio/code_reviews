{"pr_number": 4279, "pr_title": "Feature/uni 1.15", "pr_author": "Raycoms", "pr_createdAt": "2020-01-28T16:10:48Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/4279", "merge_commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "timeline": [{"oid": "074d03ec950ec64b1741060180a9be94c70adef0", "url": "https://github.com/ldtteam/minecolonies/commit/074d03ec950ec64b1741060180a9be94c70adef0", "message": "Port Uni", "committedDate": "2020-01-26T10:11:32Z", "type": "commit"}, {"oid": "01cb94c1d2203f2add21ce0d727b06815a5e6a56", "url": "https://github.com/ldtteam/minecolonies/commit/01cb94c1d2203f2add21ce0d727b06815a5e6a56", "message": "fix deco controller rot", "committedDate": "2020-01-26T10:11:39Z", "type": "commit"}, {"oid": "5360b20f73c1aa074e67fb9a92124a302199e45e", "url": "https://github.com/ldtteam/minecolonies/commit/5360b20f73c1aa074e67fb9a92124a302199e45e", "message": "Fix porting", "committedDate": "2020-01-26T11:43:28Z", "type": "commit"}, {"oid": "880185ed6ed5308e19abc5cbfd5994b0a38c4ec5", "url": "https://github.com/ldtteam/minecolonies/commit/880185ed6ed5308e19abc5cbfd5994b0a38c4ec5", "message": "Setup block and building, job etc", "committedDate": "2020-01-26T12:12:00Z", "type": "commit"}, {"oid": "4cb5ed79c49eb7d7f370a5c7f5268b5b9d5999ed", "url": "https://github.com/ldtteam/minecolonies/commit/4cb5ed79c49eb7d7f370a5c7f5268b5b9d5999ed", "message": "Finish building registry", "committedDate": "2020-01-26T13:21:12Z", "type": "commit"}, {"oid": "6db35c24d5c9aa0c0e5a6c0e0cfc68322b3e74c2", "url": "https://github.com/ldtteam/minecolonies/commit/6db35c24d5c9aa0c0e5a6c0e0cfc68322b3e74c2", "message": "Initital setup for GUI handling", "committedDate": "2020-01-26T18:41:59Z", "type": "commit"}, {"oid": "71caeac077bd3349afcbcd2bf1f7072f2d040097", "url": "https://github.com/ldtteam/minecolonies/commit/71caeac077bd3349afcbcd2bf1f7072f2d040097", "message": "Add research requirements", "committedDate": "2020-01-26T21:34:31Z", "type": "commit"}, {"oid": "acf56d33e9d1d0984135e902ac9fa7667018e2ed", "url": "https://github.com/ldtteam/minecolonies/commit/acf56d33e9d1d0984135e902ac9fa7667018e2ed", "message": "Separate colony research elements from global research elements", "committedDate": "2020-01-27T15:24:41Z", "type": "commit"}, {"oid": "fbeedab410375dda19cebc9726a2d7ed3fd15e3f", "url": "https://github.com/ldtteam/minecolonies/commit/fbeedab410375dda19cebc9726a2d7ed3fd15e3f", "message": "Further research setup", "committedDate": "2020-01-28T16:10:06Z", "type": "commit"}, {"oid": "46190bd150cbe8cd733e2f0ec4e740c7054baeb5", "url": "https://github.com/ldtteam/minecolonies/commit/46190bd150cbe8cd733e2f0ec4e740c7054baeb5", "message": "Add disabled button fix research time, block research", "committedDate": "2020-01-28T16:59:48Z", "type": "commit"}, {"oid": "4beee685ceadc3d4ca22070c86344cdfb5aa2513", "url": "https://github.com/ldtteam/minecolonies/commit/4beee685ceadc3d4ca22070c86344cdfb5aa2513", "message": "Add AI add University schematics", "committedDate": "2020-01-28T21:06:46Z", "type": "commit"}, {"oid": "7840ab0b541309516b99034a9c2e49f03acf345d", "url": "https://github.com/ldtteam/minecolonies/commit/7840ab0b541309516b99034a9c2e49f03acf345d", "message": "remove todo, fix schematic", "committedDate": "2020-01-28T21:09:05Z", "type": "commit"}, {"oid": "afe0182a81c38d9faa7fb6bf877ac3ed9c481c92", "url": "https://github.com/ldtteam/minecolonies/commit/afe0182a81c38d9faa7fb6bf877ac3ed9c481c92", "message": "Further GUI requirements", "committedDate": "2020-01-28T21:31:06Z", "type": "commit"}, {"oid": "08b92a56f4671f19c2a990eead9faf3774c96f5d", "url": "https://github.com/ldtteam/minecolonies/commit/08b92a56f4671f19c2a990eead9faf3774c96f5d", "message": "Improve UI significantly", "committedDate": "2020-01-31T10:48:30Z", "type": "commit"}, {"oid": "538c95dbef5e471120ac03bc6079e1436dbcee86", "url": "https://github.com/ldtteam/minecolonies/commit/538c95dbef5e471120ac03bc6079e1436dbcee86", "message": "Cleanup and add first effect", "committedDate": "2020-01-31T13:47:40Z", "type": "commit"}, {"oid": "8564f7311a8a5f89f7d446c4a435431cedb276e9", "url": "https://github.com/ldtteam/minecolonies/commit/8564f7311a8a5f89f7d446c4a435431cedb276e9", "message": "Apply effects", "committedDate": "2020-01-31T14:39:30Z", "type": "commit"}, {"oid": "be95ffb67b922c955513a95671daddd0c263c79a", "url": "https://github.com/ldtteam/minecolonies/commit/be95ffb67b922c955513a95671daddd0c263c79a", "message": "Constants cleanup", "committedDate": "2020-01-31T15:07:59Z", "type": "commit"}, {"oid": "37d83e4b58bde9863f47dc0448b9a2cc11a17883", "url": "https://github.com/ldtteam/minecolonies/commit/37d83e4b58bde9863f47dc0448b9a2cc11a17883", "message": "Fix spacing", "committedDate": "2020-01-31T15:16:35Z", "type": "commit"}, {"oid": "319f9b0794a1b3bd1b720880304801d5d133a7b5", "url": "https://github.com/ldtteam/minecolonies/commit/319f9b0794a1b3bd1b720880304801d5d133a7b5", "message": "update depdencies", "committedDate": "2020-01-31T16:00:34Z", "type": "commit"}, {"oid": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "url": "https://github.com/ldtteam/minecolonies/commit/2745453088fcceb20e9ce9bab5514fa88dc7f692", "message": "fix page desc", "committedDate": "2020-01-31T16:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjUwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373586504", "body": "which type of research?^^ could use some more details ", "bodyText": "which type of research?^^ could use some more details", "bodyHTML": "<p dir=\"auto\">which type of research?^^ could use some more details</p>", "author": "someaddons", "createdAt": "2020-01-31T17:07:11Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IResearch interface which represents one type of research.", "originalCommit": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTUxNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373591514", "bodyText": "good point, fixed", "author": "Raycoms", "createdAt": "2020-01-31T17:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9086ccc9027ee3a99ad1dd4ec72fd23fe9e1caa", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/GlobalResearch.java b/src/api/java/com/minecolonies/api/research/GlobalResearch.java\nindex d402f527ff..bfe10e9c85 100644\n--- a/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n", "chunk": "@@ -26,7 +26,7 @@ import org.jetbrains.annotations.NotNull;\n import java.util.*;\n \n /**\n- * The implementation of the IResearch interface which represents one type of research.\n+ * The implementation of the IGlobalResearch interface which represents the research on the global level.\n  */\n public class GlobalResearch implements IGlobalResearch\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/GlobalResearch.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nsimilarity index 87%\nrename from src/api/java/com/minecolonies/api/research/GlobalResearch.java\nrename to src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nindex d402f527ff..1d9f2a859d 100644\n--- a/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\n", "chunk": "@@ -19,14 +17,13 @@ import net.minecraft.item.ItemStack;\n import net.minecraft.util.ResourceLocation;\n import net.minecraftforge.common.ForgeConfigSpec;\n import net.minecraftforge.items.IItemHandler;\n-import net.minecraftforge.items.wrapper.InvWrapper;\n import net.minecraftforge.registries.ForgeRegistries;\n import org.jetbrains.annotations.NotNull;\n \n import java.util.*;\n \n /**\n- * The implementation of the IResearch interface which represents one type of research.\n+ * The implementation of the IGlobalResearch interface which represents the research on the global level.\n  */\n public class GlobalResearch implements IGlobalResearch\n {\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA0OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373589048", "body": "should we mark the colony dirty here to save the resource consume?", "bodyText": "should we mark the colony dirty here to save the resource consume?", "bodyHTML": "<p dir=\"auto\">should we mark the colony dirty here to save the resource consume?</p>", "author": "someaddons", "createdAt": "2020-01-31T17:13:18Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IResearch interface which represents one type of research.\n+ */\n+public class GlobalResearch implements IGlobalResearch\n+{\n+    /**\n+     * The costList of the research.\n+     */\n+    private final List<ItemStorage> costList = new ArrayList<>();\n+\n+    /**\n+     * The parent research which has to be completed first.\n+     */\n+    private String parent = \"\";\n+\n+    /**\n+     * The string id of the research.\n+     */\n+    private final String id;\n+\n+    /**\n+     * The research branch.\n+     */\n+    private final String branch;\n+\n+    /**\n+     * The description of the research.\n+     */\n+    private final String desc;\n+\n+    /**\n+     * The research effect of this research.\n+     */\n+    private final IResearchEffect effect;\n+\n+    /**\n+     * The depth level in the tree.\n+     */\n+    private final int depth;\n+\n+    /**\n+     * If the research has an only child.\n+     */\n+    private boolean onlyChild;\n+\n+    /**\n+     * List of childs of a research.\n+     */\n+    private final List<String> childs = new ArrayList<>();\n+\n+    /**\n+     * The requirement for this research.\n+     */\n+    private IResearchRequirement requirement;\n+\n+    /**\n+     * Create the new research.\n+     * @param id it's id.\n+     * @param desc it's description text.\n+     * @param effect it's effect.\n+     * @param depth the depth in the tree.\n+     * @param branch the branch it is on.\n+     */\n+    public GlobalResearch(final String id, final String branch, final String desc, final int depth, final IResearchEffect effect)\n+    {\n+        this.id = id;\n+        this.desc = desc;\n+        this.effect = effect;\n+        this.depth = depth;\n+        this.branch = branch;\n+        this.effect.setParent(id, branch);\n+    }\n+\n+    @Override\n+    public boolean canResearch(final int uni_level, @NotNull final LocalResearchTree localTree)\n+    {\n+        final IGlobalResearch parentResearch = parent.isEmpty() ? null : GlobalResearchTree.researchTree.getResearch(branch, parent);\n+        final ILocalResearch localParentResearch = parent.isEmpty() ? null : localTree.getResearch(branch, parentResearch.getId());\n+        final ILocalResearch localResearch = localTree.getResearch(this.getBranch(), this.getId());\n+\n+        return localResearch == null && canDisplay(uni_level) && (parentResearch == null || localParentResearch != null && localParentResearch.getState() == ResearchState.FINISHED) && ( parentResearch == null || !parentResearch.hasResearchedChild(localTree) || !parentResearch.hasOnlyChild()) && (depth < 6 || !localTree.branchAlreadyResearchedLevelSix(branch));\n+    }\n+\n+    @Override\n+    public boolean canDisplay(final int uni_level)\n+    {\n+        return uni_level >= depth;\n+    }\n+\n+    @Override\n+    public void loadCostFromConfig()\n+    {\n+        costList.clear();\n+        try\n+        {\n+            final CommonConfiguration configuration = MinecoloniesAPIProxy.getInstance().getConfig().getCommon();\n+            final ForgeConfigSpec.ConfigValue<List<? extends String>> researchCost = (ForgeConfigSpec.ConfigValue<List<? extends String>>) configuration.getClass().getDeclaredField(id).get(configuration);\n+            for (final String cost : researchCost.get())\n+            {\n+                final String[] tuple = cost.split(\"\\\\*\");\n+                final Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation(tuple[0]));\n+                if (item == null)\n+                {\n+                    Log.getLogger().warn(\"Couldn't retrieve research costList from config for \" + branch + \"/\" + id + \" for item: \" + tuple[0]);\n+                    return;\n+                }\n+                costList.add(new ItemStorage(new ItemStack(item, 1), Integer.parseInt(tuple[1]), false));\n+            }\n+        }\n+        catch (final NoSuchFieldException | IllegalAccessException | NumberFormatException e)\n+        {\n+            Log.getLogger().warn(\"Couldn't retrieve research costList from config for \" + branch + \"/\" + id + \" !\", e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean hasEnoughResources(final IItemHandler inventory)\n+    {\n+        for (final ItemStorage cost: costList)\n+        {\n+            final int count = InventoryUtils.getItemCountInItemHandler(inventory, stack -> !ItemStackUtils.isEmpty(stack) && stack.isItemEqual(cost.getItemStack()));\n+            if (count < cost.getAmount())\n+            {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public List<ItemStorage> getCostList()\n+    {\n+        return ImmutableList.copyOf(costList);\n+    }\n+\n+    @Override\n+    public void startResearch(@NotNull final PlayerEntity player, @NotNull final LocalResearchTree localResearchTree)\n+    {\n+        if (localResearchTree.getResearch(this.branch, this.id) == null && hasEnoughResources(new InvWrapper(player.inventory)))\n+        {\n+            final ILocalResearch research = new LocalResearch(this.id, this.branch, this.depth);\n+            research.setState(ResearchState.IN_PROGRESS);\n+            localResearchTree.addResearch(branch, research);", "originalCommit": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTY2Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373591667", "bodyText": "We mark the colony dirty after we call this in the message.", "author": "Raycoms", "createdAt": "2020-01-31T17:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "fed4014480e54ddfb991cdeff213f62603b56411", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/GlobalResearch.java b/src/api/java/com/minecolonies/api/research/GlobalResearch.java\nindex d402f527ff..425e442fa2 100644\n--- a/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n", "chunk": "@@ -163,7 +163,7 @@ public class GlobalResearch implements IGlobalResearch\n     @Override\n     public void startResearch(@NotNull final PlayerEntity player, @NotNull final LocalResearchTree localResearchTree)\n     {\n-        if (localResearchTree.getResearch(this.branch, this.id) == null && hasEnoughResources(new InvWrapper(player.inventory)))\n+        if (localResearchTree.getResearch(this.branch, this.id) == null)\n         {\n             final ILocalResearch research = new LocalResearch(this.id, this.branch, this.depth);\n             research.setState(ResearchState.IN_PROGRESS);\n", "next_change": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/GlobalResearch.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nsimilarity index 91%\nrename from src/api/java/com/minecolonies/api/research/GlobalResearch.java\nrename to src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nindex 425e442fa2..f146a1d56d 100644\n--- a/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\n", "chunk": "@@ -161,7 +157,7 @@ public class GlobalResearch implements IGlobalResearch\n     }\n \n     @Override\n-    public void startResearch(@NotNull final PlayerEntity player, @NotNull final LocalResearchTree localResearchTree)\n+    public void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree)\n     {\n         if (localResearchTree.getResearch(this.branch, this.id) == null)\n         {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/GlobalResearch.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nsimilarity index 87%\nrename from src/api/java/com/minecolonies/api/research/GlobalResearch.java\nrename to src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\nindex d402f527ff..1d9f2a859d 100644\n--- a/src/api/java/com/minecolonies/api/research/GlobalResearch.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearch.java\n", "chunk": "@@ -161,9 +157,9 @@ public class GlobalResearch implements IGlobalResearch\n     }\n \n     @Override\n-    public void startResearch(@NotNull final PlayerEntity player, @NotNull final LocalResearchTree localResearchTree)\n+    public void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree)\n     {\n-        if (localResearchTree.getResearch(this.branch, this.id) == null && hasEnoughResources(new InvWrapper(player.inventory)))\n+        if (localResearchTree.getResearch(this.branch, this.id) == null)\n         {\n             final ILocalResearch research = new LocalResearch(this.id, this.branch, this.depth);\n             research.setState(ResearchState.IN_PROGRESS);\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"oid": "a9086ccc9027ee3a99ad1dd4ec72fd23fe9e1caa", "url": "https://github.com/ldtteam/minecolonies/commit/a9086ccc9027ee3a99ad1dd4ec72fd23fe9e1caa", "message": "fix loading", "committedDate": "2020-01-31T17:26:00Z", "type": "commit"}, {"oid": "fed4014480e54ddfb991cdeff213f62603b56411", "url": "https://github.com/ldtteam/minecolonies/commit/fed4014480e54ddfb991cdeff213f62603b56411", "message": "some research fixes", "committedDate": "2020-01-31T18:47:20Z", "type": "commit"}, {"oid": "9e472711bc69e39d0bf4954cdd84a341b3c8b396", "url": "https://github.com/ldtteam/minecolonies/commit/9e472711bc69e39d0bf4954cdd84a341b3c8b396", "message": "fix arrows", "committedDate": "2020-01-31T21:43:44Z", "type": "commit"}, {"oid": "acda0130d3d32398850a70908387ef9a57e5a7a6", "url": "https://github.com/ldtteam/minecolonies/commit/acda0130d3d32398850a70908387ef9a57e5a7a6", "message": "fix university schematic", "committedDate": "2020-02-01T17:57:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODg1Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798852", "body": "This should be an interface and possibly in its own manager.", "bodyText": "This should be an interface and possibly in its own manager.", "bodyHTML": "<p dir=\"auto\">This should be an interface and possibly in its own manager.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:57:28Z", "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "diffHunk": "@@ -259,6 +261,18 @@\n      */\n     boolean isRemote();\n \n+    /**\n+     * Getter for the research tree.\n+     * @return the colony own research tree.\n+     */\n+    LocalResearchTree getResearchTree();", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 5804b9498e..48b9f8bd1e 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -265,13 +265,13 @@ public interface IColony\n      * Getter for the research tree.\n      * @return the colony own research tree.\n      */\n-    LocalResearchTree getResearchTree();\n+    ILocalResearchTree getResearchTree();\n \n     /**\n      * Get the colonies own research effects.\n      * @return the ResearchEffects object.\n      */\n-    ResearchEffects getResearchEffects();\n+    IResearchEffects getResearchEffects();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 48b9f8bd1e..d0fe919cf5 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -262,16 +261,10 @@ public interface IColony\n     boolean isRemote();\n \n     /**\n-     * Getter for the research tree.\n-     * @return the colony own research tree.\n+     * Get the research manager.\n+     * @return the research manager object.\n      */\n-    ILocalResearchTree getResearchTree();\n-\n-    /**\n-     * Get the colonies own research effects.\n-     * @return the ResearchEffects object.\n-     */\n-    IResearchEffects getResearchEffects();\n+    IResearchManager getResearchManager();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 5804b9498e..d0fe919cf5 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -262,16 +261,10 @@ public interface IColony\n     boolean isRemote();\n \n     /**\n-     * Getter for the research tree.\n-     * @return the colony own research tree.\n+     * Get the research manager.\n+     * @return the research manager object.\n      */\n-    LocalResearchTree getResearchTree();\n-\n-    /**\n-     * Get the colonies own research effects.\n-     * @return the ResearchEffects object.\n-     */\n-    ResearchEffects getResearchEffects();\n+    IResearchManager getResearchManager();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": {"commit": "3004c9f66cc2474053828ce3a949d6695795944a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex d0fe919cf5..6644126787 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -273,16 +244,13 @@ public interface IColony\n \n     /**\n      * Get the last time mercenaries were used.\n+     * @return the mercenary use time.\n      */\n     long getMercenaryUseTime();\n \n \n     CompoundNBT getColonyTag();\n \n-    int getNightsSinceLastRaid();\n-\n-    void setNightsSinceLastRaid(int nights);\n-\n     boolean isNeedToMourn();\n \n     void setNeedToMourn(boolean needToMourn, String name);\n", "next_change": {"commit": "0aab02bba91c874e598ae3cd69bd0d0849bdd9c3", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 6644126787..63ec125c1f 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -244,11 +269,11 @@ public interface IColony\n \n     /**\n      * Get the last time mercenaries were used.\n+     *\n      * @return the mercenary use time.\n      */\n     long getMercenaryUseTime();\n \n-\n     CompoundNBT getColonyTag();\n \n     boolean isNeedToMourn();\n", "next_change": {"commit": "35af8153057bd038cbf2d944fae7ba65c0eab0a3", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nold mode 100644\nnew mode 100755\nindex 63ec125c1f..c795e403e7\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -276,12 +324,6 @@ public interface IColony\n \n     CompoundNBT getColonyTag();\n \n-    boolean isNeedToMourn();\n-\n-    void setNeedToMourn(boolean needToMourn, String name);\n-\n-    boolean isMourning();\n-\n     boolean isColonyUnderAttack();\n \n     boolean isValidAttackingPlayer(PlayerEntity entity);\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex c795e403e7..1a96f1b9ce 100755\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -322,23 +319,23 @@ public interface IColony\n      */\n     long getMercenaryUseTime();\n \n-    CompoundNBT getColonyTag();\n+    CompoundTag getColonyTag();\n \n     boolean isColonyUnderAttack();\n \n-    boolean isValidAttackingPlayer(PlayerEntity entity);\n+    boolean isValidAttackingPlayer(Player entity);\n \n     boolean isValidAttackingGuard(AbstractEntityCitizen entity);\n \n-    void setColonyColor(TextFormatting color);\n+    void setColonyColor(ChatFormatting color);\n \n-    void setColonyFlag(ListNBT patterns);\n+    void setColonyFlag(ListTag patterns);\n \n     void setManualHousing(boolean manualHousing);\n \n     void addWayPoint(BlockPos pos, BlockState newWayPointState);\n \n-    void addGuardToAttackers(AbstractEntityCitizen entityCitizen, PlayerEntity followPlayer);\n+    void addGuardToAttackers(AbstractEntityCitizen entityCitizen, Player followPlayer);\n \n     void addFreePosition(BlockPos pos);\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "0e6abc963cba6d6680f9217a1ae7f809c96ac045", "committedDate": "2020-03-21 20:14:24 +0100", "message": "Hotfix sided error (#4475)"}, {"oid": "a7e534dd0d2eb7daa4d00ec5011effd69fa81014", "committedDate": "2020-04-13 12:07:18 +0100", "message": "Feature/min stock (#4622)"}, {"oid": "a91918484379a8f0d367922f6e914376c8f045c1", "committedDate": "2020-04-17 09:21:07 +0100", "message": "Happiness (#4651)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "0aab02bba91c874e598ae3cd69bd0d0849bdd9c3", "committedDate": "2020-06-20 21:27:22 +0100", "message": "Add the rallying banner (#5217)"}, {"oid": "a8687cf4f3b4557ce78172e6650914f6b5d05f9c", "committedDate": "2020-06-29 09:34:29 +0100", "message": "Fixes (#5290)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "59f9f01950901d13538f862e843f593824e2be0a", "committedDate": "2020-07-12 12:13:52 +0100", "message": "Do a bunch of prting"}, {"oid": "12d036fb2a2ee6873b01f23f53150b21685e45e3", "committedDate": "2020-07-13 10:08:51 +0100", "message": "Fix pos"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "committedDate": "2020-08-08 20:17:57 +0100", "message": "Colony flag banners (#5506)"}, {"oid": "c05309df62cd84851aabb7ccfcb2ac638387aa1d", "committedDate": "2020-09-14 17:43:22 +0100", "message": "Add colony event log to Town Hall (#5751)"}, {"oid": "7b471e15e3d3de76535a9dd21dbf92c4308b420c", "committedDate": "2020-11-22 18:40:35 +0000", "message": "Fix/registrykey (#6136)"}, {"oid": "de529decf59b546aec312e1cd1845efdaf7e3d2e", "committedDate": "2021-02-24 13:48:34 +0000", "message": "Chunkloading/set blockstate fixes (#6594)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "committedDate": "2021-04-25 13:29:24 +0100", "message": "Unlock item tooltip (#6943)"}, {"oid": "fd4bbe96963a468c33a93ed8963fbaf27eba6dbc", "committedDate": "2021-05-20 14:30:10 +0100", "message": "fix issue 7117 (#7118)"}, {"oid": "35af8153057bd038cbf2d944fae7ba65c0eab0a3", "committedDate": "2021-06-11 16:30:27 +0100", "message": "Feature/family (#7205)"}, {"oid": "38db0532c53e262fbd4d4d57fd67292c463a4f21", "committedDate": "2021-06-24 00:47:51 +0200", "message": "Integrated buildings support (#7235)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "3f55a05eeaf9ddf926bf84b5c2c6a6127cb8e535", "committedDate": "2021-07-22 18:25:00 +0100", "message": "Feature/style switch (#7417)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "24ad5e30abb3eed9a98715210a6f71bca1174d61", "committedDate": "2021-11-20 11:37:23 +0000", "message": "some fixes (#7787)"}, {"oid": "7e2c4e74b29f136b31f797eafd958ea8085e2436", "committedDate": "2021-12-12 20:45:20 +0000", "message": "Feature/empty villages (#7846)"}, {"oid": "7209da2adcd6ad858f1096ab7b59e8985df3a87f", "committedDate": "2022-03-27 16:25:55 -0300", "message": "Add leisure (#8175)"}, {"oid": "f37e9ab5ce7a9ed86bfea5d841def8a2cf10ac21", "committedDate": "2022-05-02 15:21:39 -0300", "message": "Merge branch 'lang-changes-port' into version/1.18"}, {"oid": "c1ded9a0885e588b5d2694932af2535408c34a2e", "committedDate": "2022-07-28 10:11:18 +0200", "message": "port"}, {"oid": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "committedDate": "2022-08-22 09:23:04 +0100", "message": "1.19 buildtool prep (#8572)"}, {"oid": "22697d94db624fa1c783cb335a8b1d81c01b1391", "committedDate": "2022-09-12 17:21:53 +0100", "message": "Add colony name style switch for patreons (#8646)"}, {"oid": "5a0ef0943169bd6d922807978f527cbe895cf99f", "committedDate": "2022-11-06 17:20:39 +0000", "message": "Feature/1.19 stats (#8736)"}, {"oid": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "committedDate": "2023-04-16 09:18:32 +0200", "message": "Feature/quests (#9046)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODg2Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798862", "body": "Again this should be an interface and in its own manager.", "bodyText": "Again this should be an interface and in its own manager.", "bodyHTML": "<p dir=\"auto\">Again this should be an interface and in its own manager.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:57:44Z", "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "diffHunk": "@@ -259,6 +261,18 @@\n      */\n     boolean isRemote();\n \n+    /**\n+     * Getter for the research tree.\n+     * @return the colony own research tree.\n+     */\n+    LocalResearchTree getResearchTree();\n+\n+    /**\n+     * Get the colonies own research effects.\n+     * @return the ResearchEffects object.\n+     */\n+    ResearchEffects getResearchEffects();", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 5804b9498e..48b9f8bd1e 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -265,13 +265,13 @@ public interface IColony\n      * Getter for the research tree.\n      * @return the colony own research tree.\n      */\n-    LocalResearchTree getResearchTree();\n+    ILocalResearchTree getResearchTree();\n \n     /**\n      * Get the colonies own research effects.\n      * @return the ResearchEffects object.\n      */\n-    ResearchEffects getResearchEffects();\n+    IResearchEffects getResearchEffects();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 48b9f8bd1e..d0fe919cf5 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -262,16 +261,10 @@ public interface IColony\n     boolean isRemote();\n \n     /**\n-     * Getter for the research tree.\n-     * @return the colony own research tree.\n+     * Get the research manager.\n+     * @return the research manager object.\n      */\n-    ILocalResearchTree getResearchTree();\n-\n-    /**\n-     * Get the colonies own research effects.\n-     * @return the ResearchEffects object.\n-     */\n-    IResearchEffects getResearchEffects();\n+    IResearchManager getResearchManager();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 5804b9498e..d0fe919cf5 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -262,16 +261,10 @@ public interface IColony\n     boolean isRemote();\n \n     /**\n-     * Getter for the research tree.\n-     * @return the colony own research tree.\n+     * Get the research manager.\n+     * @return the research manager object.\n      */\n-    LocalResearchTree getResearchTree();\n-\n-    /**\n-     * Get the colonies own research effects.\n-     * @return the ResearchEffects object.\n-     */\n-    ResearchEffects getResearchEffects();\n+    IResearchManager getResearchManager();\n \n     /**\n      * Save the time when mercenaries are used, to set a cooldown.\n", "next_change": {"commit": "3004c9f66cc2474053828ce3a949d6695795944a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex d0fe919cf5..6644126787 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -273,16 +244,13 @@ public interface IColony\n \n     /**\n      * Get the last time mercenaries were used.\n+     * @return the mercenary use time.\n      */\n     long getMercenaryUseTime();\n \n \n     CompoundNBT getColonyTag();\n \n-    int getNightsSinceLastRaid();\n-\n-    void setNightsSinceLastRaid(int nights);\n-\n     boolean isNeedToMourn();\n \n     void setNeedToMourn(boolean needToMourn, String name);\n", "next_change": {"commit": "0aab02bba91c874e598ae3cd69bd0d0849bdd9c3", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex 6644126787..63ec125c1f 100644\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -244,11 +269,11 @@ public interface IColony\n \n     /**\n      * Get the last time mercenaries were used.\n+     *\n      * @return the mercenary use time.\n      */\n     long getMercenaryUseTime();\n \n-\n     CompoundNBT getColonyTag();\n \n     boolean isNeedToMourn();\n", "next_change": {"commit": "35af8153057bd038cbf2d944fae7ba65c0eab0a3", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nold mode 100644\nnew mode 100755\nindex 63ec125c1f..c795e403e7\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -276,12 +324,6 @@ public interface IColony\n \n     CompoundNBT getColonyTag();\n \n-    boolean isNeedToMourn();\n-\n-    void setNeedToMourn(boolean needToMourn, String name);\n-\n-    boolean isMourning();\n-\n     boolean isColonyUnderAttack();\n \n     boolean isValidAttackingPlayer(PlayerEntity entity);\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/IColony.java b/src/api/java/com/minecolonies/api/colony/IColony.java\nindex c795e403e7..1a96f1b9ce 100755\n--- a/src/api/java/com/minecolonies/api/colony/IColony.java\n+++ b/src/api/java/com/minecolonies/api/colony/IColony.java\n", "chunk": "@@ -322,23 +319,23 @@ public interface IColony\n      */\n     long getMercenaryUseTime();\n \n-    CompoundNBT getColonyTag();\n+    CompoundTag getColonyTag();\n \n     boolean isColonyUnderAttack();\n \n-    boolean isValidAttackingPlayer(PlayerEntity entity);\n+    boolean isValidAttackingPlayer(Player entity);\n \n     boolean isValidAttackingGuard(AbstractEntityCitizen entity);\n \n-    void setColonyColor(TextFormatting color);\n+    void setColonyColor(ChatFormatting color);\n \n-    void setColonyFlag(ListNBT patterns);\n+    void setColonyFlag(ListTag patterns);\n \n     void setManualHousing(boolean manualHousing);\n \n     void addWayPoint(BlockPos pos, BlockState newWayPointState);\n \n-    void addGuardToAttackers(AbstractEntityCitizen entityCitizen, PlayerEntity followPlayer);\n+    void addGuardToAttackers(AbstractEntityCitizen entityCitizen, Player followPlayer);\n \n     void addFreePosition(BlockPos pos);\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "0e6abc963cba6d6680f9217a1ae7f809c96ac045", "committedDate": "2020-03-21 20:14:24 +0100", "message": "Hotfix sided error (#4475)"}, {"oid": "a7e534dd0d2eb7daa4d00ec5011effd69fa81014", "committedDate": "2020-04-13 12:07:18 +0100", "message": "Feature/min stock (#4622)"}, {"oid": "a91918484379a8f0d367922f6e914376c8f045c1", "committedDate": "2020-04-17 09:21:07 +0100", "message": "Happiness (#4651)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "0aab02bba91c874e598ae3cd69bd0d0849bdd9c3", "committedDate": "2020-06-20 21:27:22 +0100", "message": "Add the rallying banner (#5217)"}, {"oid": "a8687cf4f3b4557ce78172e6650914f6b5d05f9c", "committedDate": "2020-06-29 09:34:29 +0100", "message": "Fixes (#5290)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "59f9f01950901d13538f862e843f593824e2be0a", "committedDate": "2020-07-12 12:13:52 +0100", "message": "Do a bunch of prting"}, {"oid": "12d036fb2a2ee6873b01f23f53150b21685e45e3", "committedDate": "2020-07-13 10:08:51 +0100", "message": "Fix pos"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "committedDate": "2020-08-08 20:17:57 +0100", "message": "Colony flag banners (#5506)"}, {"oid": "c05309df62cd84851aabb7ccfcb2ac638387aa1d", "committedDate": "2020-09-14 17:43:22 +0100", "message": "Add colony event log to Town Hall (#5751)"}, {"oid": "7b471e15e3d3de76535a9dd21dbf92c4308b420c", "committedDate": "2020-11-22 18:40:35 +0000", "message": "Fix/registrykey (#6136)"}, {"oid": "de529decf59b546aec312e1cd1845efdaf7e3d2e", "committedDate": "2021-02-24 13:48:34 +0000", "message": "Chunkloading/set blockstate fixes (#6594)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "committedDate": "2021-04-25 13:29:24 +0100", "message": "Unlock item tooltip (#6943)"}, {"oid": "fd4bbe96963a468c33a93ed8963fbaf27eba6dbc", "committedDate": "2021-05-20 14:30:10 +0100", "message": "fix issue 7117 (#7118)"}, {"oid": "35af8153057bd038cbf2d944fae7ba65c0eab0a3", "committedDate": "2021-06-11 16:30:27 +0100", "message": "Feature/family (#7205)"}, {"oid": "38db0532c53e262fbd4d4d57fd67292c463a4f21", "committedDate": "2021-06-24 00:47:51 +0200", "message": "Integrated buildings support (#7235)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "3f55a05eeaf9ddf926bf84b5c2c6a6127cb8e535", "committedDate": "2021-07-22 18:25:00 +0100", "message": "Feature/style switch (#7417)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "24ad5e30abb3eed9a98715210a6f71bca1174d61", "committedDate": "2021-11-20 11:37:23 +0000", "message": "some fixes (#7787)"}, {"oid": "7e2c4e74b29f136b31f797eafd958ea8085e2436", "committedDate": "2021-12-12 20:45:20 +0000", "message": "Feature/empty villages (#7846)"}, {"oid": "7209da2adcd6ad858f1096ab7b59e8985df3a87f", "committedDate": "2022-03-27 16:25:55 -0300", "message": "Add leisure (#8175)"}, {"oid": "f37e9ab5ce7a9ed86bfea5d841def8a2cf10ac21", "committedDate": "2022-05-02 15:21:39 -0300", "message": "Merge branch 'lang-changes-port' into version/1.18"}, {"oid": "c1ded9a0885e588b5d2694932af2535408c34a2e", "committedDate": "2022-07-28 10:11:18 +0200", "message": "port"}, {"oid": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "committedDate": "2022-08-22 09:23:04 +0100", "message": "1.19 buildtool prep (#8572)"}, {"oid": "22697d94db624fa1c783cb335a8b1d81c01b1391", "committedDate": "2022-09-12 17:21:53 +0100", "message": "Add colony name style switch for patreons (#8646)"}, {"oid": "5a0ef0943169bd6d922807978f527cbe895cf99f", "committedDate": "2022-11-06 17:20:39 +0000", "message": "Feature/1.19 stats (#8736)"}, {"oid": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "committedDate": "2023-04-16 09:18:32 +0200", "message": "Feature/quests (#9046)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODk2MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798960", "body": "This class is probably not supposed to be part of the api.", "bodyText": "This class is probably not supposed to be part of the api.", "bodyHTML": "<p dir=\"auto\">This class is probably not supposed to be part of the api.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:59:48Z", "path": "src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.minecolonies.api.crafting;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ */\n+public class ItemStorageFactory implements IItemStorageFactory", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNjMzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r374216336", "bodyText": "Still part of the api...", "author": "OrionDevelopment", "createdAt": "2020-02-03T16:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java b/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java\nindex 5495b61cdc..bd57e2149f 100644\n--- a/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java\n+++ b/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java\n", "chunk": "@@ -9,7 +9,7 @@ import net.minecraft.nbt.CompoundNBT;\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ * Factory implementation taking care of creating new instances, serializing and deserializing ItemStorage.\n  */\n public class ItemStorageFactory implements IItemStorageFactory\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java b/src/main/java/com/minecolonies/coremod/colony/crafting/ItemStorageFactory.java\nsimilarity index 90%\nrename from src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java\nrename to src/main/java/com/minecolonies/coremod/colony/crafting/ItemStorageFactory.java\nindex 5495b61cdc..f043f7d41c 100644\n--- a/src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/crafting/ItemStorageFactory.java\n", "chunk": "@@ -1,15 +1,17 @@\n-package com.minecolonies.api.crafting;\n+package com.minecolonies.coremod.colony.crafting;\n \n import com.google.common.reflect.TypeToken;\n import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.crafting.IItemStorageFactory;\n+import com.minecolonies.api.crafting.ItemStorage;\n import com.minecolonies.api.util.constant.TypeConstants;\n import net.minecraft.item.ItemStack;\n import net.minecraft.nbt.CompoundNBT;\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ * Factory implementation taking care of creating new instances, serializing and deserializing ItemStorage.\n  */\n public class ItemStorageFactory implements IItemStorageFactory\n {\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTAyNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799026", "body": "I am pretty sure that this class should not be in the api.", "bodyText": "I am pretty sure that this class should not be in the api.", "bodyHTML": "<p dir=\"auto\">I am pretty sure that this class should not be in the api.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:00:48Z", "path": "src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * Certain building research requirements.\n+ */\n+public class BuildingResearchRequirement implements IResearchRequirement", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java b/src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\nsimilarity index 91%\nrename from src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java\nrename to src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\nindex 4ea043356f..e83cc917d9 100644\n--- a/src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java\n+++ b/src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\n", "chunk": "@@ -1,7 +1,7 @@\n-package com.minecolonies.api.research;\n+package com.minecolonies.coremod.research;\n \n import com.minecolonies.api.colony.IColony;\n-import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.IResearchRequirement;\n import net.minecraft.util.text.TranslationTextComponent;\n \n /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java b/src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\nsimilarity index 91%\nrename from src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java\nrename to src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\nindex 4ea043356f..e83cc917d9 100644\n--- a/src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java\n+++ b/src/main/java/com/minecolonies/coremod/research/BuildingResearchRequirement.java\n", "chunk": "@@ -1,7 +1,7 @@\n-package com.minecolonies.api.research;\n+package com.minecolonies.coremod.research;\n \n import com.minecolonies.api.colony.IColony;\n-import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.IResearchRequirement;\n import net.minecraft.util.text.TranslationTextComponent;\n \n /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTEwOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799109", "body": "Again should not be part of the api.", "bodyText": "Again should not be part of the api.", "bodyHTML": "<p dir=\"auto\">Again should not be part of the api.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:01:46Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IGlobalResearch interface which represents the research on the global level.\n+ */\n+public class GlobalResearch implements IGlobalResearch", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTIwOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799209", "body": "Again this should not be part of the api.", "bodyText": "Again this should not be part of the api.", "bodyHTML": "<p dir=\"auto\">Again this should not be part of the api.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:03:22Z", "path": "src/api/java/com/minecolonies/api/research/LocalResearch.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.ResearchEffects;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.util.ResearchState;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.BASE_RESEARCH_TIME;\n+\n+/**\n+ * The implementation of the ILocalResearch interface which represents one type of research, stored in each colony.\n+ */\n+public class LocalResearch implements ILocalResearch", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/LocalResearch.java b/src/main/java/com/minecolonies/coremod/research/LocalResearch.java\nsimilarity index 81%\nrename from src/api/java/com/minecolonies/api/research/LocalResearch.java\nrename to src/main/java/com/minecolonies/coremod/research/LocalResearch.java\nindex cbe21c3427..5048d090f1 100644\n--- a/src/api/java/com/minecolonies/api/research/LocalResearch.java\n+++ b/src/main/java/com/minecolonies/coremod/research/LocalResearch.java\n", "chunk": "@@ -1,7 +1,9 @@\n-package com.minecolonies.api.research;\n+package com.minecolonies.coremod.research;\n \n-import com.minecolonies.api.research.effects.ResearchEffects;\n+import com.minecolonies.api.research.effects.IResearchEffects;\n+import com.minecolonies.api.research.interfaces.IGlobalResearchTree;\n import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearchTree;\n import com.minecolonies.api.research.util.ResearchState;\n \n import static com.minecolonies.api.research.util.ResearchConstants.BASE_RESEARCH_TIME;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/LocalResearch.java b/src/main/java/com/minecolonies/coremod/research/LocalResearch.java\nsimilarity index 80%\nrename from src/api/java/com/minecolonies/api/research/LocalResearch.java\nrename to src/main/java/com/minecolonies/coremod/research/LocalResearch.java\nindex cbe21c3427..706d592ae3 100644\n--- a/src/api/java/com/minecolonies/api/research/LocalResearch.java\n+++ b/src/main/java/com/minecolonies/coremod/research/LocalResearch.java\n", "chunk": "@@ -1,7 +1,9 @@\n-package com.minecolonies.api.research;\n+package com.minecolonies.coremod.research;\n \n-import com.minecolonies.api.research.effects.ResearchEffects;\n-import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.research.ILocalResearch;\n+import com.minecolonies.api.research.ILocalResearchTree;\n import com.minecolonies.api.research.util.ResearchState;\n \n import static com.minecolonies.api.research.util.ResearchConstants.BASE_RESEARCH_TIME;\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTI2NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799264", "body": "Again this should be abstracted away into an interface if need be and then this implementation should not be in the api.", "bodyText": "Again this should be abstracted away into an interface if need be and then this implementation should not be in the api.", "bodyHTML": "<p dir=\"auto\">Again this should be abstracted away into an interface if need be and then this implementation should not be in the api.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:04:19Z", "path": "src/api/java/com/minecolonies/api/research/LocalResearchTree.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.NBTUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public class LocalResearchTree", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/LocalResearchTree.java b/src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\nsimilarity index 78%\nrename from src/api/java/com/minecolonies/api/research/LocalResearchTree.java\nrename to src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\nindex e012b49709..76b9a4a1f1 100644\n--- a/src/api/java/com/minecolonies/api/research/LocalResearchTree.java\n+++ b/src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\n", "chunk": "@@ -17,7 +18,7 @@ import static com.minecolonies.api.research.util.ResearchConstants.*;\n /**\n  * The class which contains all research.\n  */\n-public class LocalResearchTree\n+public class LocalResearchTree implements ILocalResearchTree\n {\n     /**\n      * The map containing all researches by ID.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/LocalResearchTree.java b/src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\nsimilarity index 71%\nrename from src/api/java/com/minecolonies/api/research/LocalResearchTree.java\nrename to src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\nindex e012b49709..a13aa9f032 100644\n--- a/src/api/java/com/minecolonies/api/research/LocalResearchTree.java\n+++ b/src/main/java/com/minecolonies/coremod/research/LocalResearchTree.java\n", "chunk": "@@ -17,7 +20,7 @@ import static com.minecolonies.api.research.util.ResearchConstants.*;\n /**\n  * The class which contains all research.\n  */\n-public class LocalResearchTree\n+public class LocalResearchTree implements ILocalResearchTree\n {\n     /**\n      * The map containing all researches by ID.\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTI4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799287", "body": "Create an interface.....", "bodyText": "Create an interface.....", "bodyHTML": "<p dir=\"auto\">Create an interface.....</p>", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:04:54Z", "path": "src/api/java/com/minecolonies/api/research/ResearchTree.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.util.NBTUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.TAG_RESEARCH_TREE;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public class ResearchTree", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d935530402a3d2b2aa14bd75b4de258b507652", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ResearchTree.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\nsimilarity index 75%\nrename from src/api/java/com/minecolonies/api/research/ResearchTree.java\nrename to src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\nindex 6637cbe066..f33a92cb53 100644\n--- a/src/api/java/com/minecolonies/api/research/ResearchTree.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\n", "chunk": "@@ -16,28 +17,20 @@ import static com.minecolonies.api.research.util.ResearchConstants.TAG_RESEARCH_\n /**\n  * The class which contains all research.\n  */\n-public class ResearchTree\n+public class GlobalResearchTree implements IGlobalResearchTree\n {\n     /**\n      * The map containing all researches by ID.\n      */\n     private final Map<String, Map<String, IGlobalResearch>> researchTree = new HashMap<>();\n \n-    /**\n-     * Get a research by id.\n-     * @param id the id of the research.\n-     * @param branch the branch of the research.\n-     * @return the IResearch object.\n-     */\n+    @Override\n     public IGlobalResearch getResearch(final String branch, final String id)\n     {\n         return researchTree.get(branch).get(id);\n     }\n \n-    /**\n-     * Add a research to the tree.\n-     * @param research the research to add.\n-     */\n+    @Override\n     public void addResearch(final String branch, final IGlobalResearch research)\n     {\n         final Map<String, IGlobalResearch> branchMap;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ResearchTree.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\nsimilarity index 74%\nrename from src/api/java/com/minecolonies/api/research/ResearchTree.java\nrename to src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\nindex 6637cbe066..ee0b4fbd0c 100644\n--- a/src/api/java/com/minecolonies/api/research/ResearchTree.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearchTree.java\n", "chunk": "@@ -16,28 +17,20 @@ import static com.minecolonies.api.research.util.ResearchConstants.TAG_RESEARCH_\n /**\n  * The class which contains all research.\n  */\n-public class ResearchTree\n+public class GlobalResearchTree implements IGlobalResearchTree\n {\n     /**\n      * The map containing all researches by ID.\n      */\n     private final Map<String, Map<String, IGlobalResearch>> researchTree = new HashMap<>();\n \n-    /**\n-     * Get a research by id.\n-     * @param id the id of the research.\n-     * @param branch the branch of the research.\n-     * @return the IResearch object.\n-     */\n+    @Override\n     public IGlobalResearch getResearch(final String branch, final String id)\n     {\n         return researchTree.get(branch).get(id);\n     }\n \n-    /**\n-     * Add a research to the tree.\n-     * @param research the research to add.\n-     */\n+    @Override\n     public void addResearch(final String branch, final IGlobalResearch research)\n     {\n         final Map<String, IGlobalResearch> branchMap;\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"oid": "8910933f6d30df52820df47a14313dddabf9d700", "url": "https://github.com/ldtteam/minecolonies/commit/8910933f6d30df52820df47a14313dddabf9d700", "message": "Merge remote-tracking branch 'origin/version/1.15' into feature/uni-1.15", "committedDate": "2020-02-01T20:33:38Z", "type": "commit"}, {"oid": "39d935530402a3d2b2aa14bd75b4de258b507652", "url": "https://github.com/ldtteam/minecolonies/commit/39d935530402a3d2b2aa14bd75b4de258b507652", "message": "Interfaces everywhere", "committedDate": "2020-02-01T21:25:40Z", "type": "commit"}, {"oid": "827da864e6904d9d61373325064a898ab41ddeaa", "url": "https://github.com/ldtteam/minecolonies/commit/827da864e6904d9d61373325064a898ab41ddeaa", "message": "fix types", "committedDate": "2020-02-01T21:28:16Z", "type": "commit"}, {"oid": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "url": "https://github.com/ldtteam/minecolonies/commit/b4e969d1a1f6699b1a41f344641b21b5d600586f", "message": "remove not necessary tag", "committedDate": "2020-02-01T21:28:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg1MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832850", "body": "How does this return a double modifier?", "bodyText": "How does this return a double modifier?", "bodyHTML": "<p dir=\"auto\">How does this return a double modifier?</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:47:48Z", "path": "src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.minecolonies.api.research.effects;\n+\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The modifier research effect, it returns a double modifier.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjU0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836547", "bodyText": "Wrong javadoc", "author": "Raycoms", "createdAt": "2020-02-02T10:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nindex f5d806311a..06177a82ff 100644\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -1,10 +1,9 @@\n package com.minecolonies.api.research.effects;\n \n-import com.minecolonies.api.research.interfaces.IResearchEffect;\n-import net.minecraft.util.text.TranslationTextComponent;\n+import com.minecolonies.api.research.IResearchEffect;\n \n /**\n- * The modifier research effect, it returns a double modifier.\n+ * Abstract research effect.\n  */\n public abstract class AbstractResearchEffect<T> implements IResearchEffect<T>\n {\n", "next_change": {"commit": "5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nindex 06177a82ff..a63f2cbd0c 100644\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -1,7 +1,5 @@\n package com.minecolonies.api.research.effects;\n \n-import com.minecolonies.api.research.IResearchEffect;\n-\n /**\n  * Abstract research effect.\n  */\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nindex f5d806311a..a63f2cbd0c 100644\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -1,10 +1,7 @@\n package com.minecolonies.api.research.effects;\n \n-import com.minecolonies.api.research.interfaces.IResearchEffect;\n-import net.minecraft.util.text.TranslationTextComponent;\n-\n /**\n- * The modifier research effect, it returns a double modifier.\n+ * Abstract research effect.\n  */\n public abstract class AbstractResearchEffect<T> implements IResearchEffect<T>\n {\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nold mode 100644\nnew mode 100755\nindex a63f2cbd0c..ba845060fa\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -1,5 +1,7 @@\n package com.minecolonies.api.research.effects;\n \n+import net.minecraft.util.ResourceLocation;\n+\n /**\n  * Abstract research effect.\n  */\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nindex ba845060fa..e87b2b55aa 100755\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -1,6 +1,6 @@\n package com.minecolonies.api.research.effects;\n \n-import net.minecraft.util.ResourceLocation;\n+import net.minecraft.resources.ResourceLocation;\n \n /**\n  * Abstract research effect.\n", "next_change": null}]}}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\nold mode 100644\nnew mode 100755\nindex a63f2cbd0c..ba845060fa\n--- a/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java\n", "chunk": "@@ -8,19 +10,20 @@ public abstract class AbstractResearchEffect<T> implements IResearchEffect<T>\n     /**\n      * The String id of the research effect.\n      */\n-    private final String id;\n+    private final ResourceLocation id;\n \n     /**\n      * The constructor to create a new research effect.\n+     *\n      * @param id the id to unlock.\n      */\n-    public AbstractResearchEffect(final String id)\n+    public AbstractResearchEffect(final ResourceLocation id)\n     {\n         this.id = id;\n     }\n \n     @Override\n-    public String getId()\n+    public ResourceLocation getId()\n     {\n         return this.id;\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832880", "body": "Rename to IResearchEffectsManager.", "bodyText": "Rename to IResearchEffectsManager.", "bodyHTML": "<p dir=\"auto\">Rename to IResearchEffectsManager.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:48:23Z", "path": "src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.minecolonies.api.research.effects;\n+\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * The map of unlocked research effects of a given colony.\n+ */\n+public interface IResearchEffects", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjg1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836851", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T11:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java b/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java\ndeleted file mode 100644\nindex 3e9cc47226..0000000000\n--- a/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java\n+++ /dev/null\n", "chunk": "@@ -1,38 +0,0 @@\n-package com.minecolonies.api.research.effects;\n-\n-import com.minecolonies.api.research.interfaces.IResearchEffect;\n-import net.minecraft.nbt.CompoundNBT;\n-import org.jetbrains.annotations.NotNull;\n-\n-/**\n- * The map of unlocked research effects of a given colony.\n- */\n-public interface IResearchEffects\n-{\n-    /**\n-     * Get the research effect which is assigned to a particular string.\n-     * @param id the id of the effect.\n-     * @param type it's type.\n-     * @param <W> the Generic type.\n-     * @return one of the expected type or null.\n-     */\n-    public <W extends IResearchEffect> W getEffect(final String id, @NotNull final Class<W> type);\n-\n-    /**\n-     * Apply the effect to the research effects class.\n-     * @param effect the effect to apply.\n-     */\n-    public void applyEffect(final IResearchEffect effect);\n-\n-    /**\n-     * Write the research tree to NBT.\n-     * @param compound the compound.\n-     */\n-    public void writeToNBT(final CompoundNBT compound);\n-\n-    /**\n-     * Read the research tree from NBT.\n-     * @param compound the compound to read it from.\n-     */\n-    public void readFromNBT(final CompoundNBT compound);\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java b/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java\ndeleted file mode 100644\nindex 3e9cc47226..0000000000\n--- a/src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java\n+++ /dev/null\n", "chunk": "@@ -1,38 +0,0 @@\n-package com.minecolonies.api.research.effects;\n-\n-import com.minecolonies.api.research.interfaces.IResearchEffect;\n-import net.minecraft.nbt.CompoundNBT;\n-import org.jetbrains.annotations.NotNull;\n-\n-/**\n- * The map of unlocked research effects of a given colony.\n- */\n-public interface IResearchEffects\n-{\n-    /**\n-     * Get the research effect which is assigned to a particular string.\n-     * @param id the id of the effect.\n-     * @param type it's type.\n-     * @param <W> the Generic type.\n-     * @return one of the expected type or null.\n-     */\n-    public <W extends IResearchEffect> W getEffect(final String id, @NotNull final Class<W> type);\n-\n-    /**\n-     * Apply the effect to the research effects class.\n-     * @param effect the effect to apply.\n-     */\n-    public void applyEffect(final IResearchEffect effect);\n-\n-    /**\n-     * Write the research tree to NBT.\n-     * @param compound the compound.\n-     */\n-    public void writeToNBT(final CompoundNBT compound);\n-\n-    /**\n-     * Read the research tree from NBT.\n-     * @param compound the compound to read it from.\n-     */\n-    public void readFromNBT(final CompoundNBT compound);\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk1MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832950", "body": "Since it is part of the api anyway -> Scap the interfaces package name and just dump them in the parent.", "bodyText": "Since it is part of the api anyway -> Scap the interfaces package name and just dump them in the parent.", "bodyHTML": "<p dir=\"auto\">Since it is part of the api anyway -&gt; Scap the interfaces package name and just dump them in the parent.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:49:17Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjU1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836551", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T10:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nsimilarity index 96%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7009e3ce69..7f8f5e03b6 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -1,5 +1,6 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n+import com.google.common.collect.ImmutableList;\n import com.minecolonies.api.crafting.ItemStorage;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraftforge.items.IItemHandler;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nsimilarity index 88%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7009e3ce69..d7737c98c9 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -1,6 +1,8 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n+import com.google.common.collect.ImmutableList;\n import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.effects.IResearchEffect;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraftforge.items.IItemHandler;\n import org.jetbrains.annotations.NotNull;\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk3Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832977", "body": "ImmutableList....", "bodyText": "ImmutableList....", "bodyHTML": "<p dir=\"auto\">ImmutableList....</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:49:39Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjkxMA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836910", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T11:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nsimilarity index 96%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7009e3ce69..7f8f5e03b6 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -110,7 +111,7 @@ public interface IGlobalResearch\n     /**\n      * Get the list of childs of the research.\n      */\n-    List<String> getChilds();\n+    ImmutableList<String> getChilds();\n \n     /**\n      * Set the parent of a research.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nsimilarity index 88%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7009e3ce69..d7737c98c9 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -108,9 +110,9 @@ public interface IGlobalResearch\n     void addChild(IGlobalResearch child);\n \n     /**\n-     * Get the list of childs of the research.\n+     * Get the list of children of the research.\n      */\n-    List<String> getChilds();\n+    ImmutableList<String> getChilds();\n \n     /**\n      * Set the parent of a research.\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzAwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833006", "body": "In my opinion a single research might have more then one effect in the future. This should already be accommodated in the api from the get go.", "bodyText": "In my opinion a single research might have more then one effect in the future. This should already be accommodated in the api from the get go.", "bodyHTML": "<p dir=\"auto\">In my opinion a single research might have more then one effect in the future. This should already be accommodated in the api from the get go.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:50:22Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);\n+    /**\n+     * Getter for the research requirement.\n+     * @return the requirement.\n+     */\n+    IResearchRequirement getResearchRequirement();\n+\n+    /**\n+     * Get the effect of the research.\n+     * @return the effect.\n+     */\n+    IResearchEffect getEffect();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNzA0OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373837048", "bodyText": "For now I wanted to do this 1 research = 1 effect, especially to make it easier to display it in the UI", "author": "Raycoms", "createdAt": "2020-02-02T11:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzAwNg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA0Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833043", "body": "In my opinion, it might be a nice idea to have requests which have multiple requirements.\r\nThis could be adapted by making this a collection.", "bodyText": "In my opinion, it might be a nice idea to have requests which have multiple requirements.\nThis could be adapted by making this a collection.", "bodyHTML": "<p dir=\"auto\">In my opinion, it might be a nice idea to have requests which have multiple requirements.<br>\nThis could be adapted by making this a collection.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:50:52Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);\n+    /**\n+     * Getter for the research requirement.\n+     * @return the requirement.\n+     */\n+    IResearchRequirement getResearchRequirement();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA1OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833058", "body": "Again it might be a good idea to make it possible for a single research to have multiple requirements.", "bodyText": "Again it might be a good idea to make it possible for a single research to have multiple requirements.", "bodyHTML": "<p dir=\"auto\">Again it might be a good idea to make it possible for a single research to have multiple requirements.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:11Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA2NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833064", "body": "Nice much better.", "bodyText": "Nice much better.", "bodyHTML": "<p dir=\"auto\">Nice much better.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:24Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nsimilarity index 93%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 348e7e5462..31fd434925 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -6,7 +6,7 @@ import net.minecraft.nbt.CompoundNBT;\n import java.util.*;\n \n /**\n- * The class which contains all research.\n+ * The interface for the object that holds all research globally.\n  */\n public interface IGlobalResearchTree\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nsimilarity index 93%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 348e7e5462..31fd434925 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -6,7 +6,7 @@ import net.minecraft.nbt.CompoundNBT;\n import java.util.*;\n \n /**\n- * The class which contains all research.\n+ * The interface for the object that holds all research globally.\n  */\n public interface IGlobalResearchTree\n {\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA5Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833093", "body": "This is not a class.\r\nAnd this documentation can be made better.", "bodyText": "This is not a class.\nAnd this documentation can be made better.", "bodyHTML": "<p dir=\"auto\">This is not a class.<br>\nAnd this documentation can be made better.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:39Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nsimilarity index 96%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 348e7e5462..4fddf7c054 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n import com.minecolonies.api.MinecoloniesAPIProxy;\n import net.minecraft.nbt.CompoundNBT;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nsimilarity index 93%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 348e7e5462..31fd434925 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n import com.minecolonies.api.MinecoloniesAPIProxy;\n import net.minecraft.nbt.CompoundNBT;\n", "next_change": null}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nsimilarity index 93%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 348e7e5462..31fd434925 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -6,7 +6,7 @@ import net.minecraft.nbt.CompoundNBT;\n import java.util.*;\n \n /**\n- * The class which contains all research.\n+ * The interface for the object that holds all research globally.\n  */\n public interface IGlobalResearchTree\n {\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzEzMg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833132", "body": "In my opinion a branch should be denoted as a single root research element which gets unlocked by default.\r\nAs such all ids should be unique and the notion of branches should not be needed.", "bodyText": "In my opinion a branch should be denoted as a single root research element which gets unlocked by default.\nAs such all ids should be unique and the notion of branches should not be needed.", "bodyHTML": "<p dir=\"auto\">In my opinion a branch should be denoted as a single root research element which gets unlocked by default.<br>\nAs such all ids should be unique and the notion of branches should not be needed.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:52:20Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzIxMw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833213", "body": "Yeah not sure about the design decision to treat branches differently, but i guess it could work.\r\n\r\nOne question though why is there not an object that represents a branch with at least the following properties:\r\n+ id\r\n+ display translation key\r\n+ display icon\r\n??\r\n\r\nWould allow for much better UX experience and tracking -> Possibly register the objects via a forge registry?", "bodyText": "Yeah not sure about the design decision to treat branches differently, but i guess it could work.\nOne question though why is there not an object that represents a branch with at least the following properties:\n\nid\ndisplay translation key\ndisplay icon\n??\n\nWould allow for much better UX experience and tracking -> Possibly register the objects via a forge registry?", "bodyHTML": "<p dir=\"auto\">Yeah not sure about the design decision to treat branches differently, but i guess it could work.</p>\n<p dir=\"auto\">One question though why is there not an object that represents a branch with at least the following properties:</p>\n<ul dir=\"auto\">\n<li>id</li>\n<li>display translation key</li>\n<li>display icon<br>\n??</li>\n</ul>\n<p dir=\"auto\">Would allow for much better UX experience and tracking -&gt; Possibly register the objects via a forge registry?</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:53:51Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzI3Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833273", "body": "I am not sure why we are writing global objects into NBT.\r\nThis tree should be constant and as such no reading and writing from NBT should be required.\r\n\r\nIf this tree is not constant, it has no reason to exist, since then it can not 100% reliably be used as a reference for the local colony trees.", "bodyText": "I am not sure why we are writing global objects into NBT.\nThis tree should be constant and as such no reading and writing from NBT should be required.\nIf this tree is not constant, it has no reason to exist, since then it can not 100% reliably be used as a reference for the local colony trees.", "bodyHTML": "<p dir=\"auto\">I am not sure why we are writing global objects into NBT.<br>\nThis tree should be constant and as such no reading and writing from NBT should be required.</p>\n<p dir=\"auto\">If this tree is not constant, it has no reason to exist, since then it can not 100% reliably be used as a reference for the local colony trees.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:55:04Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();\n+\n+    /**\n+     * Get the primary research of a certain branch.\n+     * @param branch the branch it belongs to.\n+     * @return the list of research without parent.\n+     */\n+    List<String> getPrimaryResearch(final String branch);\n+\n+    /**\n+     * Write the research tree to NBT.\n+     * @param compound the compound.\n+     */\n+    void writeToNBT(final CompoundNBT compound);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMwMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833301", "body": "Cost? Why is this handled separately? Are you possibly initializing this object too early?\r\nIf so this should be handled differently.", "bodyText": "Cost? Why is this handled separately? Are you possibly initializing this object too early?\nIf so this should be handled differently.", "bodyHTML": "<p dir=\"auto\">Cost? Why is this handled separately? Are you possibly initializing this object too early?<br>\nIf so this should be handled differently.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:55:46Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();\n+\n+    /**\n+     * Get the primary research of a certain branch.\n+     * @param branch the branch it belongs to.\n+     * @return the list of research without parent.\n+     */\n+    List<String> getPrimaryResearch(final String branch);\n+\n+    /**\n+     * Write the research tree to NBT.\n+     * @param compound the compound.\n+     */\n+    void writeToNBT(final CompoundNBT compound);\n+\n+    /**\n+     * Read the research tree from NBT.\n+     * @param compound the compound to read it from.\n+    +\n+     */\n+    void readFromNBT(final CompoundNBT compound);\n+\n+    /**\n+     * Load cost for all research.\n+     */\n+    void loadCost();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMyOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833329", "body": "Nope", "bodyText": "Nope", "bodyHTML": "<p dir=\"auto\">Nope</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:56:15Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzM1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833351", "bodyText": "It does not contain all research and it is not a class.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nsimilarity index 85%\nrename from src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex d3e3dc534d..6673cc588c 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -1,6 +1,6 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n-import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n import net.minecraft.nbt.CompoundNBT;\n import java.util.List;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nsimilarity index 77%\nrename from src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex d3e3dc534d..9ecc63fc3f 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -1,6 +1,6 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n-import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n import net.minecraft.nbt.CompoundNBT;\n import java.util.List;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzQzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833436", "body": "TBH The way global and local trees are implemented right now leaves a lot to be desired.\r\n\r\nIn my eyes the global research tree should be build once at startup, and then referenced by the colony.\r\nThe local tree just is a kind of lookup structure that says: This colony has this research done. It does not even need to be a tree, but a map with some state suffices. Effects of completed researches can then be easily looked up in the global and if we ever change the global it will automatically update all the locals.", "bodyText": "TBH The way global and local trees are implemented right now leaves a lot to be desired.\nIn my eyes the global research tree should be build once at startup, and then referenced by the colony.\nThe local tree just is a kind of lookup structure that says: This colony has this research done. It does not even need to be a tree, but a map with some state suffices. Effects of completed researches can then be easily looked up in the global and if we ever change the global it will automatically update all the locals.", "bodyHTML": "<p dir=\"auto\">TBH The way global and local trees are implemented right now leaves a lot to be desired.</p>\n<p dir=\"auto\">In my eyes the global research tree should be build once at startup, and then referenced by the colony.<br>\nThe local tree just is a kind of lookup structure that says: This colony has this research done. It does not even need to be a tree, but a map with some state suffices. Effects of completed researches can then be easily looked up in the global and if we ever change the global it will automatically update all the locals.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:58:14Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface ILocalResearchTree", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nsimilarity index 85%\nrename from src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex d3e3dc534d..6673cc588c 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -1,6 +1,6 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n-import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n import net.minecraft.nbt.CompoundNBT;\n import java.util.List;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nsimilarity index 77%\nrename from src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\nrename to src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex d3e3dc534d..9ecc63fc3f 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -1,6 +1,6 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n-import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n import net.minecraft.nbt.CompoundNBT;\n import java.util.List;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzUyMw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833523", "body": "This is named wrongly, or implemented wrongly.\r\n\r\nAs it states right now this is implemented as research effect type. However an effect type should have no notion of its branch, description etc.\r\n\r\nEspecially should an effect have no notion of its parent..... An effect should be active or not, based on if a research marks it as active or not....\r\n\r\nThis should be redesigned, cause right now it is a bit of a mess.", "bodyText": "This is named wrongly, or implemented wrongly.\nAs it states right now this is implemented as research effect type. However an effect type should have no notion of its branch, description etc.\nEspecially should an effect have no notion of its parent..... An effect should be active or not, based on if a research marks it as active or not....\nThis should be redesigned, cause right now it is a bit of a mess.", "bodyHTML": "<p dir=\"auto\">This is named wrongly, or implemented wrongly.</p>\n<p dir=\"auto\">As it states right now this is implemented as research effect type. However an effect type should have no notion of its branch, description etc.</p>\n<p dir=\"auto\">Especially should an effect have no notion of its parent..... An effect should be active or not, based on if a research marks it as active or not....</p>\n<p dir=\"auto\">This should be redesigned, cause right now it is a bit of a mess.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:00:08Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The effect of a research.\n+ * @param <T> the type of the value.\n+ */\n+public interface IResearchEffect<T>", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java b/src/api/java/com/minecolonies/api/research/IResearchEffect.java\nsimilarity index 53%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java\nrename to src/api/java/com/minecolonies/api/research/IResearchEffect.java\nindex fc659a901a..4401a2bae7 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/IResearchEffect.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n import net.minecraft.util.text.TranslationTextComponent;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java b/src/api/java/com/minecolonies/api/research/effects/IResearchEffect.java\nsimilarity index 53%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java\nrename to src/api/java/com/minecolonies/api/research/effects/IResearchEffect.java\nindex fc659a901a..abd04f87c7 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java\n+++ b/src/api/java/com/minecolonies/api/research/effects/IResearchEffect.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research.effects;\n \n import net.minecraft.util.text.TranslationTextComponent;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzU2MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833561", "body": "Nope. Document better this tells me nothing about what this interface does.", "bodyText": "Nope. Document better this tells me nothing about what this interface does.", "bodyHTML": "<p dir=\"auto\">Nope. Document better this tells me nothing about what this interface does.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:00:38Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * Interface of research requirements.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java b/src/api/java/com/minecolonies/api/research/IResearchRequirement.java\nsimilarity index 91%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java\nrename to src/api/java/com/minecolonies/api/research/IResearchRequirement.java\nindex c17a6c901f..f840ffb4e5 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java\n+++ b/src/api/java/com/minecolonies/api/research/IResearchRequirement.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n import com.minecolonies.api.colony.IColony;\n import net.minecraft.util.text.TranslationTextComponent;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java b/src/api/java/com/minecolonies/api/research/IResearchRequirement.java\nsimilarity index 91%\nrename from src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java\nrename to src/api/java/com/minecolonies/api/research/IResearchRequirement.java\nindex c17a6c901f..f840ffb4e5 100644\n--- a/src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java\n+++ b/src/api/java/com/minecolonies/api/research/IResearchRequirement.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.minecolonies.api.research.interfaces;\n+package com.minecolonies.api.research;\n \n import com.minecolonies.api.colony.IColony;\n import net.minecraft.util.text.TranslationTextComponent;\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzcyMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833721", "body": "This does not work. You also need to check if removedSize is bigger then the localCount, so you will need to simulate first. You have no idea how the IItemHandler is implemented, if it even allows partial extraction. Just because you now only use it for extraction from the Player or Citizen does not mean this is a valid utility implementation, and we might possibly run into this problem in the future.", "bodyText": "This does not work. You also need to check if removedSize is bigger then the localCount, so you will need to simulate first. You have no idea how the IItemHandler is implemented, if it even allows partial extraction. Just because you now only use it for extraction from the Player or Citizen does not mean this is a valid utility implementation, and we might possibly run into this problem in the future.", "bodyHTML": "<p dir=\"auto\">This does not work. You also need to check if removedSize is bigger then the localCount, so you will need to simulate first. You have no idea how the IItemHandler is implemented, if it even allows partial extraction. Just because you now only use it for extraction from the Player or Citizen does not mean this is a valid utility implementation, and we might possibly run into this problem in the future.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:03:28Z", "path": "src/api/java/com/minecolonies/api/util/InventoryUtils.java", "diffHunk": "@@ -2084,6 +2084,40 @@ public static boolean removeStackFromItemHandler(final IItemHandler handler, fin\n         return false;\n     }\n \n+    /**\n+     * Remove a stack with a certain qty from a given Itemhandler\n+     *\n+     * @param handler the itemHandler.\n+     * @param input   the stack to remove.\n+     * @param count the amount to remove.\n+     */\n+    public static void removeStackFromItemHandler(final IItemHandler handler, final ItemStack input, final int count)\n+    {\n+        final ItemStack workingStack = input.copy();\n+        int localCount = count;\n+        int tries = 0;\n+        while (tries < count)\n+        {\n+            final int slot = findFirstSlotInItemHandlerNotEmptyWith(handler, stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(workingStack, stack));\n+            if (slot == -1)\n+            {\n+                return;\n+            }\n+\n+            final int removedSize = ItemStackUtils.getSize(handler.extractItem(slot, localCount, false));", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "424a778c33866c96b41457fcaeaaa4974fbf347a", "committedDate": "2020-03-07 20:25:33 +0000", "message": "Inventoryutils issues (#4385)"}, {"oid": "3faf5863623e265b16f58c7784fb0a97ffda52ed", "committedDate": "2020-03-13 18:16:45 +0000", "message": "Again fixes (#4428)"}, {"oid": "ff794786beadb6b4ad286a9d6e3b3004b862c10c", "committedDate": "2020-03-15 21:33:37 +0100", "message": "Rework citizen entity handling, should avoid fake citizens. (#4439)"}, {"oid": "51520d3dcba0e33c0848c360b73aa85a95460250", "committedDate": "2020-03-21 19:24:43 +0100", "message": "Supply loot/ fix furnace users"}, {"oid": "9c4deb05463f37ef69881b44aacfd8afab27508f", "committedDate": "2020-04-19 12:56:14 +0200", "message": "Publish artifacts (#4677)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "0b72e4106257ab08e3096f14f96e8fafc6b860b7", "committedDate": "2020-05-03 14:41:19 +0100", "message": "Add some missing javadoc (#4861)"}, {"oid": "8958ce0e30774786a7dbfb5418dd9dba46539828", "committedDate": "2020-05-09 09:26:09 +0100", "message": "Feature/mechanist (#4933)"}, {"oid": "1c6ecc1eb73d7752d7025c688bfe02cd6cf3a79a", "committedDate": "2020-06-15 12:53:24 +0100", "message": "Improve spawner in raids, improve ticks (#5199)"}, {"oid": "0a816c6a9cd8d3d51a13cc36e60db6ae24bc46a5", "committedDate": "2020-06-21 11:35:06 +0100", "message": "Feature/new workers (#5230)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "d0c390dc50687eedb47c4ceed0682699ee15788b", "committedDate": "2020-07-09 12:34:14 +0100", "message": "Fix crafter (#5360)"}, {"oid": "e2046de56432e28bd1de1b1f69d742c265fb10f6", "committedDate": "2020-07-18 13:56:18 +0100", "message": "Inventory util/debug (#5394)"}, {"oid": "abc4c0d4442fd6b3dbf468c637b1e87e5716f342", "committedDate": "2020-08-01 16:32:43 +0100", "message": "Perf improvements (#5482)"}, {"oid": "333a8c78472d7058b0412a96551c270dcb5e95c4", "committedDate": "2020-08-08 12:22:07 +0100", "message": "Some small fixes (#5516)"}, {"oid": "ab5f477c12bd91fc8a9f9f471d55c170df0771ea", "committedDate": "2020-08-24 15:39:21 +0100", "message": "Performance fixes and disable endermen"}, {"oid": "c5bb21b789eadaf7e4f81f2c790a4cad9ff91d0e", "committedDate": "2020-08-27 22:36:55 +0100", "message": "Fix some edge cases in the smeltercrafter & improve the postbox (#5657)"}, {"oid": "99ceb1715064bed7b6cd6ecf6b70efa713cace05", "committedDate": "2020-09-08 09:25:32 +0100", "message": "Delivery fixed (#5725)"}, {"oid": "be7267d8edbba6d38ce3c0b2a9d9d2cc5ce74544", "committedDate": "2020-10-21 22:05:19 +0100", "message": "Fix #5880 (#5957)"}, {"oid": "4788cf44596d47a1a41f31bc7b1aaa54598a9503", "committedDate": "2020-10-21 22:05:24 +0100", "message": "Multi-Output recipes, and reliable secondary outputs (#5905)"}, {"oid": "5fdcada67663bce4ee5955b0f35bd87727574bd4", "committedDate": "2020-10-28 21:56:38 +0000", "message": "INV IMPROVEMENTS (#5996)"}, {"oid": "162d5dd36c96bf496b1bb579917b03a9119241b3", "committedDate": "2020-11-01 12:58:59 +0000", "message": "Fix a few performance issues (#6004)"}, {"oid": "810b38fb7ccea88e4541458784cf3643befc80d7", "committedDate": "2020-11-03 09:08:34 +0000", "message": "Small fixes (#6019)"}, {"oid": "e9d89e22bf843bd307d86cc4402d3d8648a408ef", "committedDate": "2020-11-10 20:33:00 +0000", "message": "Fix #6048 and fix inventory detection issues"}, {"oid": "8115c6ad88967b7df7ddee7905bf711df76e4417", "committedDate": "2021-03-06 17:54:10 +0000", "message": "Enable tool retention/durability burn (#6587)"}, {"oid": "ac57ddd61d66d7f68dd026ac53a0b8f86c8c35dc", "committedDate": "2021-03-13 00:09:07 +0000", "message": "Make Sifter use real items as meshes (#6687)"}, {"oid": "334c6f2b084a5efd78e7612aab608e8e208d5bbe", "committedDate": "2021-03-28 13:46:42 +0100", "message": "Better fluid handling, small fixes (#6822)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "63c081a2b9789c3bb306e8fa6b2956f1848e7e4a", "committedDate": "2021-05-17 00:48:46 +0100", "message": "finish the tree stuff (#7079)"}, {"oid": "5c510fd877052fdcf2067f97a2a749c9410b378a", "committedDate": "2021-06-06 16:40:32 +0100", "message": "Allow players to set the flowers the beekeeper feeds to his bees (#7181)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "bb1285a1dfcdd34310754de24e0adb482212ef44", "committedDate": "2021-07-07 20:34:53 +0100", "message": "more forgiving pickup logic (#7371)"}, {"oid": "587f3c8a0e746f8e0a16a17aa933cc57d441f207", "committedDate": "2021-08-25 23:43:46 +0100", "message": "propperly handle mineshaft changes 7294 (#7527)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "163879a0b3b531398d7dfd8043a2294fbb8d7688", "committedDate": "2021-08-28 16:03:50 -0300", "message": "Further progress"}, {"oid": "1e22797214b95da9a1922096116038eb0ea17f39", "committedDate": "2021-08-29 15:29:01 -0300", "message": "Further porting"}, {"oid": "de2149f5a71bd096c13d901d9fd6a4e02869b83c", "committedDate": "2021-10-12 12:49:48 +0100", "message": "Several fixes (#7646)"}, {"oid": "054dfbd1d7fdeae45fc938fc7a452a91eed3ffed", "committedDate": "2021-10-15 12:20:58 -0300", "message": "fix hiring with enchanted books, fix building"}, {"oid": "9edd6f8d8f6556c7ab1358f313b09e87a77deee3", "committedDate": "2021-10-29 16:43:08 -0300", "message": "Small fixes (#7724)"}, {"oid": "5eed256f5852cbc9620c8303b0a3156b91c73968", "committedDate": "2022-05-01 22:04:07 -0300", "message": "fix 8291 (#8292)"}, {"oid": "3cecf3c72fcd4044fb249c6007baf199d24c2550", "committedDate": "2022-05-01 22:04:12 -0300", "message": "Crusher improvements (#8305)"}, {"oid": "f37e9ab5ce7a9ed86bfea5d841def8a2cf10ac21", "committedDate": "2022-05-02 15:21:39 -0300", "message": "Merge branch 'lang-changes-port' into version/1.18"}, {"oid": "3b97d437cd1160e627ecfe7ed4e248ed5a8a5bb4", "committedDate": "2022-05-22 12:32:18 -0300", "message": "add new crusher research (#8370)"}, {"oid": "6cb661694972eb330d04c4aaa5085fbfb57720f5", "committedDate": "2022-07-31 11:31:34 +0200", "message": "Don't be so generous with food (#8513)"}, {"oid": "240df885cb4c62015a936bb613f621e7dc2d3e2d", "committedDate": "2022-11-06 17:12:28 +0000", "message": "Two fixes (#8748)"}, {"oid": "5a0ef0943169bd6d922807978f527cbe895cf99f", "committedDate": "2022-11-06 17:20:39 +0000", "message": "Feature/1.19 stats (#8736)"}, {"oid": "6aec46b0a319045b74a82152d8042876a20250a1", "committedDate": "2022-12-04 19:32:45 +0100", "message": "Feature/perf (#8801)"}, {"oid": "eb4d915745f0dfed7fac6ef19c4d7240036b9a3d", "committedDate": "2023-01-05 19:57:16 +0100", "message": "Feature/map port (#8859)"}, {"oid": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "committedDate": "2023-04-16 09:18:32 +0200", "message": "Feature/quests (#9046)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc4Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833783", "body": "Nope no reason for this object to be here!", "bodyText": "Nope no reason for this object to be here!", "bodyHTML": "<p dir=\"auto\">Nope no reason for this object to be here!</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:04:38Z", "path": "src/main/java/com/minecolonies/coremod/MineColonies.java", "diffHunk": "@@ -67,6 +70,11 @@\n      */\n     private static Configuration config;\n \n+    /**\n+     * Create the global research tree.\n+     */\n+    private static IGlobalResearchTree globalResearchTree;", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc5MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833790", "bodyText": "The api needs to manage this, Minecolonies should not hold an instance to it.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex d4e3ac9e02..ea37eaaf5d 100644\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -70,11 +69,6 @@ public class MineColonies\n      */\n     private static Configuration config;\n \n-    /**\n-     * Create the global research tree.\n-     */\n-    private static IGlobalResearchTree globalResearchTree;\n-\n     /**\n      * The proxy.\n      */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex d4e3ac9e02..f6040830f1 100644\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -70,11 +69,6 @@ public class MineColonies\n      */\n     private static Configuration config;\n \n-    /**\n-     * Create the global research tree.\n-     */\n-    private static IGlobalResearchTree globalResearchTree;\n-\n     /**\n      * The proxy.\n      */\n", "next_change": {"commit": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex f6040830f1..5272022751 100644\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -72,18 +84,17 @@ public class MineColonies\n     /**\n      * The proxy.\n      */\n-    public static final IProxy proxy = DistExecutor.runForDist(() -> ClientProxy::new, () -> ServerProxy::new);\n+    public static final IProxy proxy = DistExecutor.safeRunForDist(() -> ClientProxy::new, () -> ServerProxy::new);\n \n     public MineColonies()\n     {\n         LanguageHandler.loadLangPath(\"assets/minecolonies/lang/%s.json\"); // hotfix config comments, it's ugly bcs it's gonna be replaced\n         config = new Configuration();\n \n-        Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(BarbarianSpawnEventHandler.class);\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(EventHandler.class);\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(FMLEventHandler.class);\n-        DistExecutor.runWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(ClientEventHandler.class));\n-        DistExecutor.runWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(DebugRendererChunkBorder.class));\n+        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(ClientEventHandler.class));\n+        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(DebugRendererChunkBorder.class));\n         Mod.EventBusSubscriber.Bus.MOD.bus().get().register(CommonProxy.class);\n \n         Mod.EventBusSubscriber.Bus.MOD.bus().get().addListener(GatherDataHandler::dataGeneratorSetup);\n", "next_change": {"commit": "9732befaf792645795ca7c3d650f99077b0165ad", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nold mode 100644\nnew mode 100755\nindex 5272022751..17c13fc2ed\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -94,6 +99,8 @@ public class MineColonies\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(EventHandler.class);\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(FMLEventHandler.class);\n         DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(ClientEventHandler.class));\n+        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(HighlightManager.class));\n+\n         DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(DebugRendererChunkBorder.class));\n         Mod.EventBusSubscriber.Bus.MOD.bus().get().register(CommonProxy.class);\n \n", "next_change": {"commit": "66d9f52c4caf082931a62dd2c576cd9cbea1c52b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 17c13fc2ed..d4cdbf3d0b 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -89,19 +95,21 @@ public class MineColonies\n     /**\n      * The proxy.\n      */\n-    public static final IProxy proxy = DistExecutor.safeRunForDist(() -> ClientProxy::new, () -> ServerProxy::new);\n+    public static final IProxy proxy = DistExecutor.unsafeRunForDist(() -> ClientProxy::new, () -> ServerProxy::new);\n \n     public MineColonies()\n     {\n         LanguageHandler.loadLangPath(\"assets/minecolonies/lang/%s.json\"); // hotfix config comments, it's ugly bcs it's gonna be replaced\n         config = new Configuration();\n \n+        Consumer<TagsUpdatedEvent> onTagsLoaded = (event) -> ModTags.tagsLoaded = true;\n+        MinecraftForge.EVENT_BUS.addListener(onTagsLoaded);\n+\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(EventHandler.class);\n         Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(FMLEventHandler.class);\n         DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(ClientEventHandler.class));\n         DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(HighlightManager.class));\n \n-        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(DebugRendererChunkBorder.class));\n         Mod.EventBusSubscriber.Bus.MOD.bus().get().register(CommonProxy.class);\n \n         Mod.EventBusSubscriber.Bus.MOD.bus().get().addListener(GatherDataHandler::dataGeneratorSetup);\n", "next_change": {"commit": "aa25f220cad6827371ca0c8596678b51d59b4370", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex d4cdbf3d0b..76719f39e0 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -116,6 +115,11 @@ public class MineColonies\n \n         Mod.EventBusSubscriber.Bus.MOD.bus().get().register(this.getClass());\n \n+        // Temporary additional\n+        Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(TagWorkAroundEventHandler.TagEventHandler.class);\n+        Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(TagWorkAroundEventHandler.TagFMLEventHandlers.class);\n+        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> Mod.EventBusSubscriber.Bus.FORGE.bus().get().register(TagWorkAroundEventHandler.TagClientEventHandler.class));\n+\n         InteractionValidatorInitializer.init();\n         proxy.setupApi();\n     }\n", "next_change": {"commit": "7e2c4e74b29f136b31f797eafd958ea8085e2436", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 76719f39e0..45aed4a212 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -122,6 +100,14 @@ public class MineColonies\n \n         InteractionValidatorInitializer.init();\n         proxy.setupApi();\n+\n+        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n+        MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n+        modEventBus.addListener(MineColoniesStructures::setup);\n+\n+        IEventBus forgeBus = MinecraftForge.EVENT_BUS;\n+        forgeBus.addListener(EventPriority.NORMAL, MineColoniesStructures::addDimensionalSpacing);\n+        forgeBus.addListener(EventPriority.NORMAL, EmptyColonyStructure::setupStructureSpawns);\n     }\n \n     /**\n", "next_change": {"commit": "f7eb3c2b4b71fa70664bb93ed6387c790a31b83f", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 45aed4a212..05d1787de2 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -103,10 +102,8 @@ public class MineColonies\n \n         IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n         MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n-        modEventBus.addListener(MineColoniesStructures::setup);\n \n         IEventBus forgeBus = MinecraftForge.EVENT_BUS;\n-        forgeBus.addListener(EventPriority.NORMAL, MineColoniesStructures::addDimensionalSpacing);\n         forgeBus.addListener(EventPriority.NORMAL, EmptyColonyStructure::setupStructureSpawns);\n     }\n \n", "next_change": {"commit": "c9d0792364ddcee03235d815a67e137db4a53f71", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 05d1787de2..c0d2255546 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -102,9 +102,6 @@ public class MineColonies\n \n         IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n         MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n-\n-        IEventBus forgeBus = MinecraftForge.EVENT_BUS;\n-        forgeBus.addListener(EventPriority.NORMAL, EmptyColonyStructure::setupStructureSpawns);\n     }\n \n     /**\n", "next_change": {"commit": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex c0d2255546..ef38380704 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -110,9 +113,9 @@ public class MineColonies\n      * @param event the registery event for items.\n      */\n     @SubscribeEvent\n-    public static void registerSounds(@NotNull final RegistryEvent.Register<SoundEvent> event)\n+    public static void registerSounds(@NotNull final RegisterEvent event)\n     {\n-        ModSoundEvents.registerSounds(event.getRegistry());\n+        ModSoundEvents.registerSounds(event.getForgeRegistry());\n     }\n \n     @SubscribeEvent\n", "next_change": {"commit": "8a289e6c6dcfda351239e5162bdbeb841d09c5c7", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex ef38380704..0a4f4b90e8 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -115,7 +125,10 @@ public class MineColonies\n     @SubscribeEvent\n     public static void registerSounds(@NotNull final RegisterEvent event)\n     {\n-        ModSoundEvents.registerSounds(event.getForgeRegistry());\n+        if (event.getRegistryKey().equals(ForgeRegistries.Keys.SOUND_EVENTS))\n+        {\n+            ModSoundEvents.registerSounds(event.getForgeRegistry());\n+        }\n     }\n \n     @SubscribeEvent\n", "next_change": {"commit": "96c6124860fd0705b108334ec720d8e5ebc1eb94", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 0a4f4b90e8..3f5948dfaa 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -117,20 +117,6 @@ public class MineColonies\n         MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n     }\n \n-    /**\n-     * Called when registering sounds, we have to register all our mod items here.\n-     *\n-     * @param event the registery event for items.\n-     */\n-    @SubscribeEvent\n-    public static void registerSounds(@NotNull final RegisterEvent event)\n-    {\n-        if (event.getRegistryKey().equals(ForgeRegistries.Keys.SOUND_EVENTS))\n-        {\n-            ModSoundEvents.registerSounds(event.getForgeRegistry());\n-        }\n-    }\n-\n     @SubscribeEvent\n     @OnlyIn(Dist.CLIENT)\n     public static void onStitch(final TextureStitchEvent.Pre event)\n", "next_change": {"commit": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 3f5948dfaa..47bb1a6458 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -115,6 +119,8 @@ public class MineColonies\n \n         IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n         MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n+\n+        SurvivalBlueprintHandlers.registerHandler(new SurvivalHandler());\n     }\n \n     @SubscribeEvent\n", "next_change": {"commit": "6b19cccfc48a03a68539e800d734fab77a7e8693", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/MineColonies.java b/src/main/java/com/minecolonies/coremod/MineColonies.java\nindex 47bb1a6458..fe892eb6a8 100755\n--- a/src/main/java/com/minecolonies/coremod/MineColonies.java\n+++ b/src/main/java/com/minecolonies/coremod/MineColonies.java\n", "chunk": "@@ -121,6 +122,7 @@ public class MineColonies\n         MineColoniesStructures.DEFERRED_REGISTRY_STRUCTURE.register(modEventBus);\n \n         SurvivalBlueprintHandlers.registerHandler(new SurvivalHandler());\n+        SurvivalBlueprintHandlers.registerHandler(new SuppliesHandler());\n     }\n \n     @SubscribeEvent\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "cd1e7949f609907f257bf442f8e9a4664e8c4572", "committedDate": "2020-04-11 10:48:07 +0100", "message": "Feature + Civilian Research Tree (#4608)"}, {"oid": "90073defd72ac45179600bfdfb481244f784e86a", "committedDate": "2020-04-22 20:06:48 +0100", "message": "Sound rework (#4694)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "2dd9cadab5eb98fe52f6f34f20c12bc94a296945", "committedDate": "2020-05-03 14:33:17 +0100", "message": "Egyptian raiders (#4847)"}, {"oid": "a666c45e26235ad836f14330637959f9983d7b85", "committedDate": "2020-05-20 10:13:44 +0100", "message": "Feature/amazons (#4940)"}, {"oid": "5990a2da92911a0dda555bddabdfcbf5b1451198", "committedDate": "2020-06-06 09:56:28 +0100", "message": "Feature/vikings (#5153)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "884422164e6bb9e25ef74df31524d595da20be4f", "committedDate": "2020-07-12 09:32:35 +0100", "message": "Initial 1.16 setup"}, {"oid": "0dffbb02db9471c2278e7bcf3cc3df79f6dd5fe7", "committedDate": "2020-07-12 14:50:52 +0100", "message": "Next batch"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "039de9daf31beb09b885de3365c54197ab995ce7", "committedDate": "2020-07-25 17:16:27 +0100", "message": "Fix raids"}, {"oid": "51a99744072fb6284b6ef6f6e93f10eb6a83a84c", "committedDate": "2020-07-30 16:50:09 +0100", "message": "New mappings"}, {"oid": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "committedDate": "2020-08-08 20:17:57 +0100", "message": "Colony flag banners (#5506)"}, {"oid": "9732befaf792645795ca7c3d650f99077b0165ad", "committedDate": "2020-08-22 22:47:58 +0100", "message": "Feature/improvements (#5636)"}, {"oid": "1c0e728b0d707426cdebb884e11e3d398190f263", "committedDate": "2020-08-27 16:21:33 +0100", "message": "Fix archer mobs"}, {"oid": "5a67505c9b6fc0c5801ed53afe65c1881b74997d", "committedDate": "2020-08-31 21:49:49 +0100", "message": "bump structurize"}, {"oid": "c73652976fd93c47b0641fdee55d8348a7851c5e", "committedDate": "2020-09-11 17:21:46 +0100", "message": "Adds gate blocks, for additional raid protection (#5727)"}, {"oid": "4364fd296f10da9e02deeb5120128815f390741a", "committedDate": "2020-09-29 12:31:09 +0100", "message": "Version bump and mapping bump"}, {"oid": "67e9dcecc7ad3b9a50b051981213f4c2400040af", "committedDate": "2020-10-07 16:57:42 +0100", "message": "Hotfix message issues (#5891)"}, {"oid": "0cfb2f453ca4c4356af3a8796dfddea2dc82ece6", "committedDate": "2020-10-16 15:47:49 +0100", "message": "Serveral fixes (#5928)"}, {"oid": "9b584898e730141e32c7b1de1e7abedd69bddc66", "committedDate": "2020-11-17 22:36:59 +0000", "message": "move to tags + world loading fix (#6092)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "66d9f52c4caf082931a62dd2c576cd9cbea1c52b", "committedDate": "2021-03-06 17:52:36 +0000", "message": "Fix colony border rendering (#6675)"}, {"oid": "70271772ab3a09fa5a440deaf69984418a263477", "committedDate": "2021-03-11 15:50:46 +0000", "message": "Optimize imports (#6662)"}, {"oid": "aa25f220cad6827371ca0c8596678b51d59b4370", "committedDate": "2021-03-30 01:03:29 +0100", "message": "Disease Config File Improvements, Better Compatibility Manager Reloading, Research Fixes (#6798)"}, {"oid": "38296b0417ae19aaa4748ca42e72328e5e285cb3", "committedDate": "2021-04-11 18:17:34 +0100", "message": "Colony Color/Progress Settings, Fixes enableDebugLogging (#6907)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "86fd80ba4eb078fd3008316d15e91482e69378ea", "committedDate": "2021-07-15 20:43:20 +0100", "message": "New Barracks Setup (#7385)"}, {"oid": "f384b146c7aa822cb19fc49fd10c4c92db9b6ce4", "committedDate": "2021-08-15 18:35:26 +0100", "message": "Study improvement, solve deprecated, assistant interference improvement (#7500)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "d998c542e62d490e6cf1990e6cd0801c00967326", "committedDate": "2021-08-28 16:26:32 -0300", "message": "Small adjustments"}, {"oid": "319f778abdaa19647484aff3d96f22e3ae13ab3e", "committedDate": "2021-08-29 11:06:21 -0300", "message": "finish blockentity and screen rendering"}, {"oid": "11dfe17e1cdb6b7ab277ea755224214a182cb196", "committedDate": "2021-08-29 16:21:20 -0300", "message": "Moar"}, {"oid": "1a3fd9639e4338de23331c6fea6b7a1295ea7740", "committedDate": "2021-08-30 10:51:12 -0300", "message": "Fix most models"}, {"oid": "769072128f52d0334e3d21377c2c1de0a25da578", "committedDate": "2021-08-30 11:16:05 -0300", "message": "Move into proper handler"}, {"oid": "dfcc686c99098f11033a00546e0908bdc5514611", "committedDate": "2021-10-07 01:11:25 +0100", "message": "Rendering port (#7624)"}, {"oid": "f5a62786dc7aa96c935e8121f46f92637e576794", "committedDate": "2021-11-14 12:20:20 +0000", "message": "Fisherman loot tables and datagen for 1.17 (#7768)"}, {"oid": "6886e92c0207e1287f2470058a5cf863422e96c9", "committedDate": "2021-12-01 11:16:45 -0300", "message": "1.18 port Part 1"}, {"oid": "7e2c4e74b29f136b31f797eafd958ea8085e2436", "committedDate": "2021-12-12 20:45:20 +0000", "message": "Feature/empty villages (#7846)"}, {"oid": "228b1f09dadef51bb113a97d51bfb2feb86c3310", "committedDate": "2022-01-30 21:57:13 -0300", "message": "Port Quarry to 1.18"}, {"oid": "f2c910f0d8389d98016b91799f4576ff1dd0f2ae", "committedDate": "2022-02-27 21:41:23 -0300", "message": "Feature/witch (#8084)"}, {"oid": "17153f0cc7f20a83301359a953dd82b95a3a4ef9", "committedDate": "2022-03-03 19:57:12 +0000", "message": "Tags and recipes datagen (#8104)"}, {"oid": "f7eb3c2b4b71fa70664bb93ed6387c790a31b83f", "committedDate": "2022-03-04 11:38:33 -0300", "message": "code port, structures left"}, {"oid": "c9d0792364ddcee03235d815a67e137db4a53f71", "committedDate": "2022-03-04 13:28:16 -0300", "message": "stage"}, {"oid": "fa51aeb65a6736373b618d36f78d227683dbeb3a", "committedDate": "2022-03-10 09:17:41 -0300", "message": "Merge branch 'amazon-spearman-port' into version/1.18"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}, {"oid": "8a289e6c6dcfda351239e5162bdbeb841d09c5c7", "committedDate": "2022-06-17 06:00:26 -0300", "message": "more registry mess"}, {"oid": "51c73f79c64c34e0d1c0d3f80275f18e8785f059", "committedDate": "2022-06-17 06:16:07 -0300", "message": "more progress on registries"}, {"oid": "c65e6f06a69ac29eb9686ad888823cb0a02a64f1", "committedDate": "2022-06-17 07:06:41 -0300", "message": "\"running\""}, {"oid": "96c6124860fd0705b108334ec720d8e5ebc1eb94", "committedDate": "2022-06-17 15:11:29 -0300", "message": "playable"}, {"oid": "3f754afcebcc94547c12e03a1e62dcdd7ebcb0b4", "committedDate": "2022-06-18 13:30:40 -0300", "message": "some more setup"}, {"oid": "18f4ddfe36753efdd43b46f45fc14b0768ccf86a", "committedDate": "2022-06-19 07:20:44 -0300", "message": "adjust, and gen"}, {"oid": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "committedDate": "2022-08-22 09:23:04 +0100", "message": "1.19 buildtool prep (#8572)"}, {"oid": "6b19cccfc48a03a68539e800d734fab77a7e8693", "committedDate": "2022-09-04 10:52:39 +0100", "message": "Shape and supply tool updates (#8607)"}, {"oid": "f5326be51d0b8a2458789ba7079712c33755595a", "committedDate": "2022-09-12 17:13:59 +0100", "message": "Migrate CompatibilityManager to fully server-sided (#8546) (#8649)"}, {"oid": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "committedDate": "2023-03-20 18:11:55 +0100", "message": "Try to load the RS reconfiguration system from common configuration entries. (#9022)"}, {"oid": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "committedDate": "2023-04-16 09:18:32 +0200", "message": "Feature/quests (#9046)"}, {"oid": "cbe14a3680b73f22a89b8a23aa85c7fca61b811d", "committedDate": "2023-04-25 09:20:05 +0200", "message": "Load the RS System configuration when the common configuration gets loaded, and also output additional log entries. (#9101)"}, {"oid": "835a45a8409c5a5932c7703ab586c97f11ca4f30", "committedDate": "2023-04-25 09:28:43 +0200", "message": "Happiness rework (#9092)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzgwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833806", "body": "Why was this removed?!?!?!??!!??!?!?!?!", "bodyText": "Why was this removed?!?!?!??!!??!?!?!?!", "bodyHTML": "<p dir=\"auto\">Why was this removed?!?!?!??!!??!?!?!?!</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:05:11Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java", "diffHunk": "@@ -107,10 +107,6 @@ public void onButtonClicked(@NotNull final Button button)\n             buttons.get(button.getID()).accept(button);\n             Network.getNetwork().sendToServer(new ClickGuiButtonTriggerMessage(button.getID(), this.resource));\n         }\n-        else", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjkzNw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836937", "bodyText": "Because we do not handle all buttons like this and it spams the console when we don't.", "author": "Raycoms", "createdAt": "2020-02-02T11:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzgwNg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d513985c41d12f6cefe2b5439d446578111db0b8", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java b/src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java\nold mode 100644\nnew mode 100755\nindex ea7bee73df..e6c876bb72\n--- a/src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java\n", "chunk": "@@ -90,18 +117,6 @@ public abstract class AbstractWindowSkeleton extends Window implements ButtonHan\n     @Override\n     public void onButtonClicked(@NotNull final Button button)\n     {\n-        switch (button.getID())\n-        {\n-            case BUTTON_PREVPAGE:\n-                setPage(BUTTON_PREVPAGE);\n-                return;\n-            case BUTTON_NEXTPAGE:\n-                setPage(BUTTON_NEXTPAGE);\n-                return;\n-            default:\n-                break;\n-        }\n-\n         if (buttons.containsKey(button.getID()))\n         {\n             buttons.get(button.getID()).accept(button);\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "634ca8ae189edc8e59bdbba7d0de4814d3bdcd08", "committedDate": "2020-05-03 17:21:01 +1000", "message": "Refactors all our network messages (#4850)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "d513985c41d12f6cefe2b5439d446578111db0b8", "committedDate": "2021-02-15 22:42:08 +0000", "message": "1.16/bump structurize (#6502)"}, {"oid": "cd9baf396d56ad994782d1caba00656c56aa82a8", "committedDate": "2021-08-28 14:07:06 -0300", "message": "fix blockout to blockui"}, {"oid": "69386c0528997093d6566e6084ed9d7cee16e174", "committedDate": "2021-08-28 14:10:42 -0300", "message": "solve BO window rename"}, {"oid": "d52362a3ba184f991164260c03d960500777874e", "committedDate": "2021-09-02 13:44:10 -0300", "message": "Some adjustments -> Image rendering broken @Nightenom"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzkyOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833929", "body": "Okey i do not understand your definition logic here:\r\nHey i do have a research manager cause i was asked to implement it -> But I still refuse to rewrite the surface properly and just leave the methods here?\r\n\r\nThese two methods have nothing directly to do with the colony -> The colony needs to give access to the manager (as with all other managers) and the manager gives access to these two methods. Not the colony gives access to the managers values....", "bodyText": "Okey i do not understand your definition logic here:\nHey i do have a research manager cause i was asked to implement it -> But I still refuse to rewrite the surface properly and just leave the methods here?\nThese two methods have nothing directly to do with the colony -> The colony needs to give access to the manager (as with all other managers) and the manager gives access to these two methods. Not the colony gives access to the managers values....", "bodyHTML": "<p dir=\"auto\">Okey i do not understand your definition logic here:<br>\nHey i do have a research manager cause i was asked to implement it -&gt; But I still refuse to rewrite the surface properly and just leave the methods here?</p>\n<p dir=\"auto\">These two methods have nothing directly to do with the colony -&gt; The colony needs to give access to the manager (as with all other managers) and the manager gives access to these two methods. Not the colony gives access to the managers values....</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:07:33Z", "path": "src/main/java/com/minecolonies/coremod/colony/Colony.java", "diffHunk": "@@ -814,6 +832,18 @@ public boolean isRemote()\n         return false;\n     }\n \n+    @Override", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/Colony.java b/src/main/java/com/minecolonies/coremod/colony/Colony.java\nindex 0275e947de..856a9cf200 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/Colony.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/Colony.java\n", "chunk": "@@ -833,15 +830,9 @@ public class Colony implements IColony\n     }\n \n     @Override\n-    public ILocalResearchTree getResearchTree()\n+    public IResearchManager getResearchManager()\n     {\n-        return this.researchManager.getResearchTree();\n-    }\n-\n-    @Override\n-    public IResearchEffects getResearchEffects()\n-    {\n-        return this.researchManager.getResearchEffects();\n+        return this.researchManager;\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/Colony.java b/src/main/java/com/minecolonies/coremod/colony/Colony.java\nindex 0275e947de..856a9cf200 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/Colony.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/Colony.java\n", "chunk": "@@ -833,15 +830,9 @@ public class Colony implements IColony\n     }\n \n     @Override\n-    public ILocalResearchTree getResearchTree()\n+    public IResearchManager getResearchManager()\n     {\n-        return this.researchManager.getResearchTree();\n-    }\n-\n-    @Override\n-    public IResearchEffects getResearchEffects()\n-    {\n-        return this.researchManager.getResearchEffects();\n+        return this.researchManager;\n     }\n \n     /**\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/Colony.java b/src/main/java/com/minecolonies/coremod/colony/Colony.java\nindex 856a9cf200..64d395e61a 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/Colony.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/Colony.java\n", "chunk": "@@ -841,12 +948,19 @@ public class Colony implements IColony\n      * @param w World object.\n      */\n     @Override\n-    public void onWorldLoad(@NotNull final World w)\n+    public void onWorldLoad(@NotNull final Level w)\n     {\n-        this.world = w;\n-        // Register a new event handler\n-        eventHandler = new ColonyPermissionEventHandler(this);\n-        MinecraftForge.EVENT_BUS.register(eventHandler);\n+        if (w.dimension() == dimensionId)\n+        {\n+            this.world = w;\n+            // Register a new event handler\n+            if (eventHandler == null)\n+            {\n+                eventHandler = new ColonyPermissionEventHandler(this);\n+                MinecraftForge.EVENT_BUS.register(eventHandler);\n+            }\n+            setColonyColor(this.colonyTeamColor);\n+        }\n     }\n \n     /**\n", "next_change": {"commit": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/Colony.java b/src/main/java/com/minecolonies/coremod/colony/Colony.java\nindex 64d395e61a..36f6647078 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/Colony.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/Colony.java\n", "chunk": "@@ -957,6 +1002,7 @@ public class Colony implements IColony\n             if (eventHandler == null)\n             {\n                 eventHandler = new ColonyPermissionEventHandler(this);\n+                questManager.onWorldLoad();\n                 MinecraftForge.EVENT_BUS.register(eventHandler);\n             }\n             setColonyColor(this.colonyTeamColor);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "f0f44dbf2cccedcdac91c65d7bc4f1b6b13f7dcf", "committedDate": "2020-02-23 10:38:51 +0000", "message": "Fix/several (#4351)"}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "972ddf2605c77db60879eb525a52cb757445e98f", "committedDate": "2020-03-13 10:03:25 +0100", "message": "Fix citizen limit calculation (#4228) (#4426)"}, {"oid": "1fdde5f3da396a306134f6cffb814e17bb79d1f0", "committedDate": "2020-03-20 08:57:10 +0000", "message": "Feature/skill rework (#4447)"}, {"oid": "0e6abc963cba6d6680f9217a1ae7f809c96ac045", "committedDate": "2020-03-21 20:14:24 +0100", "message": "Hotfix sided error (#4475)"}, {"oid": "a7e534dd0d2eb7daa4d00ec5011effd69fa81014", "committedDate": "2020-04-13 12:07:18 +0100", "message": "Feature/min stock (#4622)"}, {"oid": "ea8486dfa827acd31e1d865dac970a3fca9affd6", "committedDate": "2020-04-13 12:15:00 +0100", "message": "Colony creation gui (#4615)"}, {"oid": "a91918484379a8f0d367922f6e914376c8f045c1", "committedDate": "2020-04-17 09:21:07 +0100", "message": "Happiness (#4651)"}, {"oid": "5fc5e89d5003a69b49a418bc00cc3d8c9995edea", "committedDate": "2020-04-23 12:21:38 +0100", "message": "Raiders and other Fixes (#4711)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "90e86aec59b8980fcdd8b4c9a2f24c58f21a52f6", "committedDate": "2020-04-29 09:28:32 +0100", "message": "Fix dimension change (#4791)"}, {"oid": "1f65754b1bee41f719bd117e2e5d3c51c4e56f2d", "committedDate": "2020-04-30 12:12:53 +0100", "message": "so much air (#4798)"}, {"oid": "634ca8ae189edc8e59bdbba7d0de4814d3bdcd08", "committedDate": "2020-05-03 17:21:01 +1000", "message": "Refactors all our network messages (#4850)"}, {"oid": "0b72e4106257ab08e3096f14f96e8fafc6b860b7", "committedDate": "2020-05-03 14:41:19 +0100", "message": "Add some missing javadoc (#4861)"}, {"oid": "cbcc9ab07b0f154c3fc16e9b902747f7acb57f6b", "committedDate": "2020-05-14 18:46:08 +0100", "message": "Fix/losing items (#4996)"}, {"oid": "606b1123adf35df88cf98859484bc0927c194537", "committedDate": "2020-05-25 20:23:08 +0200", "message": "Updates initial colony happiness (#5078)"}, {"oid": "bd5c77752d3aa40951339a4e267514aaa2455f3a", "committedDate": "2020-05-28 22:07:48 +0100", "message": "Adds chat notification when all citizens (other than guards) are sleeping (#5070)"}, {"oid": "f4fdb5ba6c1518ed91ff9d4c4a8769548f26c823", "committedDate": "2020-05-30 12:29:18 +0100", "message": "Feature/sleep notifications (#5109)"}, {"oid": "d19f575c5ba65fd1b59e732d6e6086c38803f503", "committedDate": "2020-06-01 19:54:24 +0100", "message": "Add icons (#5105)"}, {"oid": "164abbf0a54f659555f7ba8e7d4251787659925e", "committedDate": "2020-06-07 19:36:02 +0100", "message": "Variable texture (#5155)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "0aab02bba91c874e598ae3cd69bd0d0849bdd9c3", "committedDate": "2020-06-20 21:27:22 +0100", "message": "Add the rallying banner (#5217)"}, {"oid": "a8687cf4f3b4557ce78172e6650914f6b5d05f9c", "committedDate": "2020-06-29 09:34:29 +0100", "message": "Fixes (#5290)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "59f9f01950901d13538f862e843f593824e2be0a", "committedDate": "2020-07-12 12:13:52 +0100", "message": "Do a bunch of prting"}, {"oid": "4db5678ee53fd4dd5712a95567d5350296179e20", "committedDate": "2020-07-14 19:40:14 +0100", "message": "bunch of fixes"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "0ad1af5ec8fde1c78471c7358e7bd1f0754e12cd", "committedDate": "2020-08-01 16:31:37 +0100", "message": "setup more nether support"}, {"oid": "abc4c0d4442fd6b3dbf468c637b1e87e5716f342", "committedDate": "2020-08-01 16:32:43 +0100", "message": "Perf improvements (#5482)"}, {"oid": "75f6dbbb6ad8fc055fd802f67c4496c743351dbd", "committedDate": "2020-08-05 08:49:09 +0100", "message": "Guard improvements (#5481)"}, {"oid": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "committedDate": "2020-08-08 20:17:57 +0100", "message": "Colony flag banners (#5506)"}, {"oid": "4c22ef8db1403b03eab6a662de1ea023ba4f3bd4", "committedDate": "2020-08-09 08:57:47 +0100", "message": "fix"}, {"oid": "25af14a05fbd409fc48f37a1b60b0ccb1d162fdf", "committedDate": "2020-08-15 17:35:38 +0200", "message": "Ported to a running version of 1.16.2"}, {"oid": "bae35a3bd512cdc2e84ada26043126a2c139b990", "committedDate": "2020-08-16 14:32:48 +0200", "message": "Transfer common to server config"}, {"oid": "f47246c2d7ba221381a340966ab5acc303b4bac3", "committedDate": "2020-08-29 19:03:12 +0100", "message": "Enable Offline Time for research + small fixes (#5658)"}, {"oid": "ab1b4a23be29fda75720988370d9e56f2287bd2e", "committedDate": "2020-09-08 09:33:17 +0100", "message": "Adds more dynamic difficulty to raids (#5726)"}, {"oid": "fd67f8f23c7fc5fb7c75ed85cc0798b5068fcf67", "committedDate": "2020-09-11 17:22:30 +0100", "message": "Raid biome chance and some fixes (#5756)"}, {"oid": "c05309df62cd84851aabb7ccfcb2ac638387aa1d", "committedDate": "2020-09-14 17:43:22 +0100", "message": "Add colony event log to Town Hall (#5751)"}, {"oid": "3fada986dcdf13536fc309fc93f3a630f6c9575b", "committedDate": "2020-09-20 12:48:13 +0100", "message": "Raidfixes and adjustments (#5803)"}, {"oid": "2d1e823397260708acb60b004df5aa8c783275bd", "committedDate": "2020-09-29 11:12:05 +0100", "message": "Feature/partial chunkload (#5839)"}, {"oid": "b5017776a079e1d6daa184266af8d97f6bc7827b", "committedDate": "2020-09-29 12:04:37 +0100", "message": "Fix setup"}, {"oid": "4364fd296f10da9e02deeb5120128815f390741a", "committedDate": "2020-09-29 12:31:09 +0100", "message": "Version bump and mapping bump"}, {"oid": "c1bda0dbb7b2bc2a496d20947a77eb841e8af14f", "committedDate": "2020-10-04 18:03:19 +0100", "message": "Feature/research improvements (#5869)"}, {"oid": "5164f9b01bbb7b8d17089b34b253820392b2f584", "committedDate": "2020-10-22 19:24:52 +0100", "message": "Hotfix chunkload mess"}, {"oid": "7b471e15e3d3de76535a9dd21dbf92c4308b420c", "committedDate": "2020-11-22 18:40:35 +0000", "message": "Fix/registrykey (#6136)"}, {"oid": "fe7717f13b6478623e9b01f4eb9f15c9784939cd", "committedDate": "2020-11-29 20:27:42 +0000", "message": "fix #6161 (#6167)"}, {"oid": "0bb1398d22f7c32014674a1d3e86e037a0554018", "committedDate": "2020-12-07 20:21:57 +0000", "message": "Add fixes (#6210)"}, {"oid": "6779fe315636edac1d976831f206ace480e8da54", "committedDate": "2020-12-07 20:26:42 +0000", "message": "Fix/archer pos (#6207)"}, {"oid": "8391beff58cd2c4c5145f52df3081d2b21359758", "committedDate": "2020-12-15 08:44:05 +0000", "message": "Fix building size calculation with height (#6241)"}, {"oid": "de529decf59b546aec312e1cd1845efdaf7e3d2e", "committedDate": "2021-02-24 13:48:34 +0000", "message": "Chunkloading/set blockstate fixes (#6594)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "f963926187f7e80716558810b8b6ffc7991dcb4f", "committedDate": "2021-03-16 17:00:50 +0000", "message": "Specifies colony name in chat messages (#6723)"}, {"oid": "b886cbdfbf36e6557c2d78a23aaab52a3443f516", "committedDate": "2021-03-18 11:01:52 +0000", "message": "Improve Research Branch Customizability (#6722)"}, {"oid": "3bfd4087a7294d1a575ce3a0059e3895e837d19b", "committedDate": "2021-04-03 17:43:05 +0100", "message": "hotfix chunks not unloaded #6850"}, {"oid": "38296b0417ae19aaa4748ca42e72328e5e285cb3", "committedDate": "2021-04-11 18:17:34 +0100", "message": "Colony Color/Progress Settings, Fixes enableDebugLogging (#6907)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "committedDate": "2021-04-25 13:29:24 +0100", "message": "Unlock item tooltip (#6943)"}, {"oid": "9d5cfcf80b5bc0d1497ecdec602f5385f9448048", "committedDate": "2021-04-26 23:18:26 +0100", "message": "ItemStorage fixes, Tooltips, Beekeeper_2 Research (#7006)"}, {"oid": "9d99a64f982ddf32d7dff349aabf0260af23d5f7", "committedDate": "2021-05-25 12:45:18 +0100", "message": "Add custom ranks (#6855)"}, {"oid": "35af8153057bd038cbf2d944fae7ba65c0eab0a3", "committedDate": "2021-06-11 16:30:27 +0100", "message": "Feature/family (#7205)"}, {"oid": "38db0532c53e262fbd4d4d57fd67292c463a4f21", "committedDate": "2021-06-24 00:47:51 +0200", "message": "Integrated buildings support (#7235)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "3f55a05eeaf9ddf926bf84b5c2c6a6127cb8e535", "committedDate": "2021-07-22 18:25:00 +0100", "message": "Feature/style switch (#7417)"}, {"oid": "6330489b0ee96fd7901823c0564da06a2cff0fab", "committedDate": "2021-08-15 08:52:34 -0300", "message": "Solve \"todo: 1.17\""}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "08ecd90a3a1d428516d8e84b4672e003a57efe03", "committedDate": "2021-10-08 11:46:15 +0100", "message": "Fix research building detection (#7632)"}, {"oid": "f70a7b09c915974488273996e7dba0a90a1408f3", "committedDate": "2021-10-17 08:45:13 -0300", "message": "Fix PVP related chat messages. (#7677)"}, {"oid": "24ad5e30abb3eed9a98715210a6f71bca1174d61", "committedDate": "2021-11-20 11:37:23 +0000", "message": "some fixes (#7787)"}, {"oid": "6886e92c0207e1287f2470058a5cf863422e96c9", "committedDate": "2021-12-01 11:16:45 -0300", "message": "1.18 port Part 1"}, {"oid": "7e2c4e74b29f136b31f797eafd958ea8085e2436", "committedDate": "2021-12-12 20:45:20 +0000", "message": "Feature/empty villages (#7846)"}, {"oid": "7209da2adcd6ad858f1096ab7b59e8985df3a87f", "committedDate": "2022-03-27 16:25:55 -0300", "message": "Add leisure (#8175)"}, {"oid": "0b7ede430017a50133d157d1a7d36374413797df", "committedDate": "2022-04-12 00:05:20 +0100", "message": "Add citizen direct item interactions (#8241)"}, {"oid": "f37e9ab5ce7a9ed86bfea5d841def8a2cf10ac21", "committedDate": "2022-05-02 15:21:39 -0300", "message": "Merge branch 'lang-changes-port' into version/1.18"}, {"oid": "af6e1c77cbf6cdd40c8cb708f255821026efe237", "committedDate": "2022-05-11 22:36:33 -0300", "message": "Seve fixes (#8359)"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "c1ded9a0885e588b5d2694932af2535408c34a2e", "committedDate": "2022-07-28 10:11:18 +0200", "message": "port"}, {"oid": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "committedDate": "2022-08-22 09:23:04 +0100", "message": "1.19 buildtool prep (#8572)"}, {"oid": "22697d94db624fa1c783cb335a8b1d81c01b1391", "committedDate": "2022-09-12 17:21:53 +0100", "message": "Add colony name style switch for patreons (#8646)"}, {"oid": "5a0ef0943169bd6d922807978f527cbe895cf99f", "committedDate": "2022-11-06 17:20:39 +0000", "message": "Feature/1.19 stats (#8736)"}, {"oid": "6aec46b0a319045b74a82152d8042876a20250a1", "committedDate": "2022-12-04 19:32:45 +0100", "message": "Feature/perf (#8801)"}, {"oid": "0002e5395f5fe17044e82c21c146802ff4bcaf8b", "committedDate": "2023-02-21 22:51:09 +0100", "message": "Add config for chunkloading time (#8948)"}, {"oid": "d98e0b6a9dbb4466758035679eca0a4fa1c1c8e5", "committedDate": "2023-04-16 09:18:32 +0200", "message": "Feature/quests (#9046)"}, {"oid": "835a45a8409c5a5932c7703ab586c97f11ca4f30", "committedDate": "2023-04-25 09:28:43 +0200", "message": "Happiness rework (#9092)"}, {"oid": "f58c78dbe7d0efdee6dc71874295882a36a478ae", "committedDate": "2023-06-08 09:32:31 +0200", "message": "Feature/more quest related stuff (#9156)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDAwMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834001", "body": "Why is this an effect?!?!?!?\r\nThis is a research condition.\r\n\r\nConditions -> Research -> Effects....", "bodyText": "Why is this an effect?!?!?!?\nThis is a research condition.\nConditions -> Research -> Effects....", "bodyHTML": "<p dir=\"auto\">Why is this an effect?!?!?!?<br>\nThis is a research condition.</p>\n<p dir=\"auto\">Conditions -&gt; Research -&gt; Effects....</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:08:43Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java", "diffHunk": "@@ -96,6 +98,18 @@ public void onDestroyed()\n         super.onDestroyed();\n     }\n \n+    @Override\n+    public void requestUpgrade(final PlayerEntity player, final BlockPos builder)\n+    {\n+        final UnlockResearchEffect effect = colony.getResearchEffects().getEffect(\"Barracks\", UnlockResearchEffect.class);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDEzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834134", "bodyText": "Oh no hold on i get it!\nThis is an effect that unlocks a given option.....\nWell okey disregard the previous comment! -> But still this needs to be better named. UnlockBuildingEffect or UnlockAbilityEffect are more appropriately named for buildings and citizen feature locking. Cause right now i had to read 6 classes to understand what is going on.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 33fe505edf..5cec310edd 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -101,7 +101,7 @@ public class BuildingBarracks extends AbstractBuilding\n     @Override\n     public void requestUpgrade(final PlayerEntity player, final BlockPos builder)\n     {\n-        final UnlockResearchEffect effect = colony.getResearchEffects().getEffect(\"Barracks\", UnlockResearchEffect.class);\n+        final UnlockBuildingResearchEffect effect = colony.getResearchManager().getResearchEffects().getEffect(\"Barracks\", UnlockBuildingResearchEffect.class);\n         if (effect == null)\n         {\n             player.sendMessage(new TranslationTextComponent(\"com.minecolonies.coremod.research.havetounlock\"));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 33fe505edf..5cec310edd 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -101,7 +101,7 @@ public class BuildingBarracks extends AbstractBuilding\n     @Override\n     public void requestUpgrade(final PlayerEntity player, final BlockPos builder)\n     {\n-        final UnlockResearchEffect effect = colony.getResearchEffects().getEffect(\"Barracks\", UnlockResearchEffect.class);\n+        final UnlockBuildingResearchEffect effect = colony.getResearchManager().getResearchEffects().getEffect(\"Barracks\", UnlockBuildingResearchEffect.class);\n         if (effect == null)\n         {\n             player.sendMessage(new TranslationTextComponent(\"com.minecolonies.coremod.research.havetounlock\"));\n", "next_change": {"commit": "a86d299410ca7dbb3f1a9baa7d02b84c96fe029a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nold mode 100644\nnew mode 100755\nindex 5cec310edd..9231639a3e\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -104,7 +115,7 @@ public class BuildingBarracks extends AbstractBuilding\n         final UnlockBuildingResearchEffect effect = colony.getResearchManager().getResearchEffects().getEffect(\"Barracks\", UnlockBuildingResearchEffect.class);\n         if (effect == null)\n         {\n-            player.sendMessage(new TranslationTextComponent(\"com.minecolonies.coremod.research.havetounlock\"));\n+            player.sendMessage(new TranslationTextComponent(\"com.minecolonies.coremod.research.havetounlock\"), player.getUniqueID());\n             return;\n         }\n         super.requestUpgrade(player, builder);\n", "next_change": {"commit": "fa02fffde0f64943502d569b7229a14e6d36aa35", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 9231639a3e..bd59cab088 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -112,7 +113,7 @@ public class BuildingBarracks extends AbstractBuilding\n     @Override\n     public void requestUpgrade(final PlayerEntity player, final BlockPos builder)\n     {\n-        final UnlockBuildingResearchEffect effect = colony.getResearchManager().getResearchEffects().getEffect(\"Barracks\", UnlockBuildingResearchEffect.class);\n+        final UnlockBuildingResearchEffect effect = colony.getResearchManager().getResearchEffects().getEffect(ResearchInitializer.BARRACKS_RESEARCH, UnlockBuildingResearchEffect.class);\n         if (effect == null)\n         {\n             player.sendMessage(new TranslationTextComponent(\"com.minecolonies.coremod.research.havetounlock\"), player.getUniqueID());\n", "next_change": {"commit": "741815f5d1242cc07ede5be8ec9ef64092c4f105", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex bd59cab088..6be5df2b69 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -122,6 +123,13 @@ public class BuildingBarracks extends AbstractBuilding\n         super.requestUpgrade(player, builder);\n     }\n \n+    @Override\n+    public void onUpgradeComplete(final int newLevel)\n+    {\n+        super.onUpgradeComplete(newLevel);\n+        colony.getBuildingManager().guardBuildingChangedAt(this, newLevel);\n+    }\n+\n     @Override\n     public void registerBlockPosition(@NotNull final BlockState block, @NotNull final BlockPos pos, @NotNull final World world)\n     {\n", "next_change": {"commit": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 6be5df2b69..21ea6bbcdb 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -138,14 +124,14 @@ public class BuildingBarracks extends AbstractBuilding\n         {\n             if (world.getBlockState(pos).getBlock() != ModBlocks.blockHutBarracksTower)\n             {\n-                world.setBlockState(pos, ModBlocks.blockHutBarracksTower.getDefaultState().with(BlockBarracksTowerSubstitution.FACING, block.get(AbstractBlockHut.FACING)));\n-                final TileEntity tile = world.getTileEntity(pos);\n+                world.setBlockAndUpdate(pos, ModBlocks.blockHutBarracksTower.defaultBlockState().setValue(BlockBarracksTowerSubstitution.FACING, block.getValue(BlockBarracksTowerSubstitution.FACING)));\n+                final TileEntity tile = world.getBlockEntity(pos);\n                 if (tile instanceof TileEntityColonyBuilding)\n                 {\n                     ((TileEntityColonyBuilding) tile).setMirror(this.isMirrored());\n                     ((TileEntityColonyBuilding) tile).setStyle(this.getStyle());\n                 }\n-                getColony().getBuildingManager().addNewBuilding((TileEntityColonyBuilding) world.getTileEntity(pos), world);\n+                getColony().getBuildingManager().addNewBuilding((TileEntityColonyBuilding) world.getBlockEntity(pos), world);\n             }\n             final IBuilding building = getColony().getBuildingManager().getBuilding(pos);\n             if (building instanceof BuildingBarracksTower)\n", "next_change": {"commit": "86fd80ba4eb078fd3008316d15e91482e69378ea", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 21ea6bbcdb..7e991b1dfd 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -120,19 +116,8 @@ public class BuildingBarracks extends AbstractBuilding\n     public void registerBlockPosition(@NotNull final BlockState block, @NotNull final BlockPos pos, @NotNull final World world)\n     {\n         super.registerBlockPosition(block, pos, world);\n-        if (block.getBlock() == ModBlocks.blockBarracksTowerSubstitution || block.getBlock() == ModBlocks.blockHutBarracksTower)\n+        if (block.getBlock() == ModBlocks.blockHutBarracksTower)\n         {\n-            if (world.getBlockState(pos).getBlock() != ModBlocks.blockHutBarracksTower)\n-            {\n-                world.setBlockAndUpdate(pos, ModBlocks.blockHutBarracksTower.defaultBlockState().setValue(BlockBarracksTowerSubstitution.FACING, block.getValue(BlockBarracksTowerSubstitution.FACING)));\n-                final TileEntity tile = world.getBlockEntity(pos);\n-                if (tile instanceof TileEntityColonyBuilding)\n-                {\n-                    ((TileEntityColonyBuilding) tile).setMirror(this.isMirrored());\n-                    ((TileEntityColonyBuilding) tile).setStyle(this.getStyle());\n-                }\n-                getColony().getBuildingManager().addNewBuilding((TileEntityColonyBuilding) world.getBlockEntity(pos), world);\n-            }\n             final IBuilding building = getColony().getBuildingManager().getBuilding(pos);\n             if (building instanceof BuildingBarracksTower)\n             {\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 7e991b1dfd..22a35adeb3 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -113,7 +113,7 @@ public class BuildingBarracks extends AbstractBuilding\n     }\n \n     @Override\n-    public void registerBlockPosition(@NotNull final BlockState block, @NotNull final BlockPos pos, @NotNull final World world)\n+    public void registerBlockPosition(@NotNull final BlockState block, @NotNull final BlockPos pos, @NotNull final Level world)\n     {\n         super.registerBlockPosition(block, pos, world);\n         if (block.getBlock() == ModBlocks.blockHutBarracksTower)\n", "next_change": {"commit": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\nindex 22a35adeb3..3d74c55237 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java\n", "chunk": "@@ -121,7 +120,7 @@ public class BuildingBarracks extends AbstractBuilding\n             final IBuilding building = getColony().getBuildingManager().getBuilding(pos);\n             if (building instanceof BuildingBarracksTower)\n             {\n-                building.setStyle(this.getStyle());\n+                building.setStructurePack(this.getStructurePack());\n                 ((BuildingBarracksTower) building).addBarracks(getPosition());\n                 if (!towers.contains(pos))\n                 {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "6fffde63730729fde2924d3bcf56f09979777c92", "committedDate": "2020-03-07 21:37:25 +0100", "message": "hotfix inventory call from merge issue, fixing build"}, {"oid": "f23c9c3ccf582882f60734b57f9fe775b4ac09b8", "committedDate": "2020-04-25 19:06:20 +0200", "message": "Claim fixes and some view fixes (#4753)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "a86d299410ca7dbb3f1a9baa7d02b84c96fe029a", "committedDate": "2020-07-12 17:21:03 +0100", "message": "Tough sunday"}, {"oid": "77ad843bfc1b360bb10fb62d2972548f55726e94", "committedDate": "2020-08-19 09:28:58 +0100", "message": "Bunch o fixes (#5603)"}, {"oid": "fa02fffde0f64943502d569b7229a14e6d36aa35", "committedDate": "2020-09-03 23:11:11 +0100", "message": "Show a tooltip on not yet researched hut blocks (#5662)"}, {"oid": "741815f5d1242cc07ede5be8ec9ef64092c4f105", "committedDate": "2020-09-11 17:21:21 +0100", "message": "Add citizens complaining about no guard nearby (#5744)"}, {"oid": "75f43862dec809ec076f1d4f20b14e7b0d8ed39c", "committedDate": "2020-11-15 16:05:37 +0000", "message": "Advancements improvements (#6071)"}, {"oid": "ef3688985c3074fba823102ecfef664c6f963a0c", "committedDate": "2020-11-15 16:14:30 +0000", "message": "Feature/building rework 0.1 (#5939)"}, {"oid": "9263ceea67ca3998256afe293a3ab86e5e3c3515", "committedDate": "2021-02-07 22:32:34 +0000", "message": "finished rewrite of barracks radius (#6501)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "5d8cd06eeca33d405c1888c2660c4d62db8e30ba", "committedDate": "2021-04-04 13:41:21 +0100", "message": "Feature/settings module (#6852)"}, {"oid": "17dc5024e17cb3c7453649144bae9e65e78f2fc6", "committedDate": "2021-06-23 00:26:31 +0100", "message": "Barracks Minimum Stock + Crafting Tweaks (#7255)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "86fd80ba4eb078fd3008316d15e91482e69378ea", "committedDate": "2021-07-15 20:43:20 +0100", "message": "New Barracks Setup (#7385)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "cd9baf396d56ad994782d1caba00656c56aa82a8", "committedDate": "2021-08-28 14:07:06 -0300", "message": "fix blockout to blockui"}, {"oid": "69386c0528997093d6566e6084ed9d7cee16e174", "committedDate": "2021-08-28 14:10:42 -0300", "message": "solve BO window rename"}, {"oid": "08ecd90a3a1d428516d8e84b4672e003a57efe03", "committedDate": "2021-10-08 11:46:15 +0100", "message": "Fix research building detection (#7632)"}, {"oid": "6886e92c0207e1287f2470058a5cf863422e96c9", "committedDate": "2021-12-01 11:16:45 -0300", "message": "1.18 port Part 1"}, {"oid": "a4f49a592ab8aba15da7f99e1c7a68de5f232b30", "committedDate": "2022-08-22 09:23:04 +0100", "message": "1.19 buildtool prep (#8572)"}, {"oid": "240df885cb4c62015a936bb613f621e7dc2d3e2d", "committedDate": "2022-11-06 17:12:28 +0000", "message": "Two fixes (#8748)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834177", "body": "This is 6 classes further in the review and here i understood what UnlockResearchEffect does..... Not well named.... No comment explaining what this variable is doing and checking.", "bodyText": "This is 6 classes further in the review and here i understood what UnlockResearchEffect does..... Not well named.... No comment explaining what this variable is doing and checking.", "bodyHTML": "<p dir=\"auto\">This is 6 classes further in the review and here i understood what UnlockResearchEffect does..... Not well named.... No comment explaining what this variable is doing and checking.</p>", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:11:57Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java", "diffHunk": "@@ -111,12 +111,12 @@ protected int getAttackDelay()\n      */\n     protected IAIState attackProtect()\n     {\n-        final int shieldSlot = InventoryUtils.findFirstSlotInItemHandlerWith(getInventory(),\n-          Items.SHIELD);\n+        final int shieldSlot = InventoryUtils.findFirstSlotInItemHandlerWith(getInventory(), Items.SHIELD);\n \n         if (target != null && target.isAlive())\n         {\n-            if (shieldSlot != -1)\n+            final UnlockResearchEffect effect = worker.getCitizenColonyHandler().getColony().getResearchEffects().getEffect(\"Shield Usage\", UnlockResearchEffect.class);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE5OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834199", "bodyText": "BTW this can simply be a boolean check -> getResearchEffects.has(\"Shield Usage\").", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDIxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834211", "bodyText": "Also Constants!", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "441a982c02fd9180b902c75f079aec71cfb13c7b", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nindex 6062bbacde..9ba9ac1395 100644\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -115,7 +116,8 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight>\n \n         if (target != null && target.isAlive())\n         {\n-            final UnlockResearchEffect effect = worker.getCitizenColonyHandler().getColony().getResearchEffects().getEffect(\"Shield Usage\", UnlockResearchEffect.class);\n+            final UnlockAbilityResearchEffect\n+              effect = worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffect(\"Shield Usage\", UnlockAbilityResearchEffect.class);\n             if (effect != null && shieldSlot != -1)\n             {\n                 worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nindex 6062bbacde..9ba9ac1395 100644\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -115,7 +116,8 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight>\n \n         if (target != null && target.isAlive())\n         {\n-            final UnlockResearchEffect effect = worker.getCitizenColonyHandler().getColony().getResearchEffects().getEffect(\"Shield Usage\", UnlockResearchEffect.class);\n+            final UnlockAbilityResearchEffect\n+              effect = worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffect(\"Shield Usage\", UnlockAbilityResearchEffect.class);\n             if (effect != null && shieldSlot != -1)\n             {\n                 worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n", "next_change": {"commit": "5f7ad82f9c291d343b724e135f289e8d1a649b50", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nindex 9ba9ac1395..927f4ed979 100644\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -117,7 +120,7 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight>\n         if (target != null && target.isAlive())\n         {\n             final UnlockAbilityResearchEffect\n-              effect = worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffect(\"Shield Usage\", UnlockAbilityResearchEffect.class);\n+              effect = worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffect(SHIELD_USAGE, UnlockAbilityResearchEffect.class);\n             if (effect != null && shieldSlot != -1)\n             {\n                 worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n", "next_change": {"commit": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nold mode 100644\nnew mode 100755\nindex 927f4ed979..9eb8e4cbc1\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -126,6 +168,11 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight>\n                 worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n                 worker.setActiveHand(Hand.OFF_HAND);\n \n+                // Apply the colony Flag to the shield\n+                ItemStack shieldStack = worker.getInventoryCitizen().getHeldItem(Hand.OFF_HAND);\n+                CompoundNBT nbt = shieldStack.getOrCreateChildTag(\"BlockEntityTag\");\n+                nbt.put(TAG_BANNER_PATTERNS, worker.getCitizenColonyHandler().getColony().getColonyFlag());\n+\n                 worker.faceEntity(target, (float) TURN_AROUND, (float) TURN_AROUND);\n                 worker.decreaseSaturationForContinuousAction();\n             }\n", "next_change": {"commit": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nindex 9eb8e4cbc1..a8e1e82c41 100755\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -161,19 +159,17 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight, AbstractBui\n \n         if (target != null && target.isAlive())\n         {\n-            final UnlockAbilityResearchEffect\n-              effect = worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffect(SHIELD_USAGE, UnlockAbilityResearchEffect.class);\n-            if (effect != null && shieldSlot != -1)\n+            if (worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(SHIELD_USAGE) > 0 && shieldSlot != -1)\n             {\n                 worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n-                worker.setActiveHand(Hand.OFF_HAND);\n+                worker.startUsingItem(Hand.OFF_HAND);\n \n                 // Apply the colony Flag to the shield\n                 ItemStack shieldStack = worker.getInventoryCitizen().getHeldItem(Hand.OFF_HAND);\n-                CompoundNBT nbt = shieldStack.getOrCreateChildTag(\"BlockEntityTag\");\n+                CompoundNBT nbt = shieldStack.getOrCreateTagElement(\"BlockEntityTag\");\n                 nbt.put(TAG_BANNER_PATTERNS, worker.getCitizenColonyHandler().getColony().getColonyFlag());\n \n-                worker.faceEntity(target, (float) TURN_AROUND, (float) TURN_AROUND);\n+                worker.lookAt(target, (float) TURN_AROUND, (float) TURN_AROUND);\n                 worker.decreaseSaturationForContinuousAction();\n             }\n         }\n", "next_change": {"commit": "47e1e5ba99f0430317a897addb31678eda83b0b6", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\nindex a8e1e82c41..c5a5d1fab5 100755\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java\n", "chunk": "@@ -144,201 +44,10 @@ public class EntityAIKnight extends AbstractEntityAIGuard<JobKnight, AbstractBui\n     protected List<ItemStack> itemsNiceToHave()\n     {\n         final List<ItemStack> list = super.itemsNiceToHave();\n-        list.add(new ItemStack(Items.SHIELD, 1));\n-        return list;\n-    }\n-\n-    /**\n-     * Check if the guard can protect himself with a shield And if so, do it.\n-     *\n-     * @return The next IAIState.\n-     */\n-    protected IAIState attackProtect()\n-    {\n-        final int shieldSlot = InventoryUtils.findFirstSlotInItemHandlerWith(getInventory(), Items.SHIELD);\n-\n-        if (target != null && target.isAlive())\n-        {\n-            if (worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(SHIELD_USAGE) > 0 && shieldSlot != -1)\n-            {\n-                worker.getCitizenItemHandler().setHeldItem(Hand.OFF_HAND, shieldSlot);\n-                worker.startUsingItem(Hand.OFF_HAND);\n-\n-                // Apply the colony Flag to the shield\n-                ItemStack shieldStack = worker.getInventoryCitizen().getHeldItem(Hand.OFF_HAND);\n-                CompoundNBT nbt = shieldStack.getOrCreateTagElement(\"BlockEntityTag\");\n-                nbt.put(TAG_BANNER_PATTERNS, worker.getCitizenColonyHandler().getColony().getColonyFlag());\n-\n-                worker.lookAt(target, (float) TURN_AROUND, (float) TURN_AROUND);\n-                worker.decreaseSaturationForContinuousAction();\n-            }\n-        }\n-\n-        return GUARD_ATTACK_PHYSICAL;\n-    }\n-\n-    /**\n-     * attackPhysical tries to launch an attack. Ticked every 8 Ticks\n-     *\n-     * @return the next state to go to.\n-     */\n-    protected IAIState attackPhysical()\n-    {\n-        final IAIState state = preAttackChecks();\n-        if (state != getState())\n-        {\n-            worker.getNavigation().stop();\n-            worker.getMoveControl().strafe(0, 0);\n-            setDelay(STANDARD_DELAY);\n-            worker.getCitizenData().setVisibleStatus(VisibleCitizenStatus.WORKING);\n-            return state;\n-        }\n-\n-        fighttimer = COMBAT_TIME;\n-        moveInAttackPosition();\n-        reduceAttackDelay(GUARD_ATTACK_INTERVAL);\n-        if (currentAttackDelay > 0)\n+        if (worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(SHIELD_USAGE) > 0)\n         {\n-            return GUARD_ATTACK_PROTECT;\n+            list.add(new ItemStack(Items.SHIELD, 1));\n         }\n-\n-        if (!isInAttackDistance(new BlockPos(target.position())))\n-        {\n-            return getState();\n-        }\n-\n-        currentAttackDelay = getAttackDelay();\n-        worker.lookAt(target, (float) TURN_AROUND, (float) TURN_AROUND);\n-\n-        worker.swing(Hand.MAIN_HAND);\n-        worker.playSound(SoundEvents.PLAYER_ATTACK_SWEEP, (float) BASIC_VOLUME, (float) SoundUtils.getRandomPitch(worker.getRandom()));\n-\n-        double damageToBeDealt = getAttackDamage();\n-\n-        if (worker.getHealth() <= worker.getMaxHealth() * 0.2D)\n-        {\n-            damageToBeDealt *= 2;\n-        }\n-\n-        final DamageSource source = new NamedDamageSource(worker.getName().getString(), worker);\n-        if (MineColonies.getConfig().getServer().pvp_mode.get() && target instanceof PlayerEntity)\n-        {\n-            source.bypassArmor();\n-        }\n-\n-        final int fireLevel = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.FIRE_ASPECT, worker.getItemInHand(Hand.MAIN_HAND));\n-        if (fireLevel > 0)\n-        {\n-            target.setSecondsOnFire(fireLevel * 80);\n-        }\n-\n-        if (knockbackAoeCooldown <= 0)\n-        {\n-            if (worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(KNIGHT_WHIRLWIND) > 0\n-                  && worker.getRandom().nextInt(KNOCKBACK_CHANCE) == 0)\n-            {\n-                List<LivingEntity> entities = this.world.getLoadedEntitiesOfClass(LivingEntity.class, worker.getBoundingBox().inflate(2.0D, 0.5D, 2.0D));\n-                for (LivingEntity livingentity : entities)\n-                {\n-                    if (livingentity != worker && (!worker.isAlliedTo(livingentity)) && (!(livingentity instanceof ArmorStandEntity)))\n-                    {\n-                        livingentity.knockback(\n-                          2F,\n-                          MathHelper.sin(livingentity.yRot * ((float) Math.PI)),\n-                          (-MathHelper.cos(livingentity.yRot * ((float) Math.PI))));\n-                        livingentity.hurt(source, (float) (damageToBeDealt / entities.size()));\n-                    }\n-                }\n-\n-                this.world.playSound(null,\n-                  worker.getX(),\n-                  worker.getY(),\n-                  worker.getZ(),\n-                  SoundEvents.PLAYER_ATTACK_SWEEP,\n-                  worker.getSoundSource(),\n-                  1.0F,\n-                  1.0F);\n-\n-                double d0 = (double) (-MathHelper.sin(worker.yRot * ((float) Math.PI / 180)));\n-                double d1 = (double) MathHelper.cos(worker.yRot * ((float) Math.PI / 180));\n-                if (worker.level instanceof ServerWorld)\n-                {\n-                    ((ServerWorld) worker.level).sendParticles(ParticleTypes.SWEEP_ATTACK,\n-                      worker.getX() + d0,\n-                      worker.getY(0.5D),\n-                      worker.getZ() + d1,\n-                      2,\n-                      d0,\n-                      0.0D,\n-                      d1,\n-                      0.0D);\n-                }\n-\n-                knockbackAoeCooldown = KNOCKBACK_COOLDOWN;\n-            }\n-        }\n-\n-\n-        target.hurt(source, (float) damageToBeDealt);\n-        target.setLastHurtByMob(worker);\n-        if (target instanceof MobEntity)\n-        {\n-            if (worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(KNIGHT_TAUNT) > 0)\n-            {\n-                ((MobEntity) target).setTarget(worker);\n-            }\n-        }\n-\n-        worker.decreaseSaturationForContinuousAction();\n-\n-        worker.getCitizenItemHandler().damageItemInHand(Hand.MAIN_HAND, 1);\n-\n-        return GUARD_ATTACK_PHYSICAL;\n-    }\n-\n-    private int getAttackDamage()\n-    {\n-        if (worker.getCitizenData() != null)\n-        {\n-            int addDmg = 0;\n-\n-            final ItemStack heldItem = worker.getItemInHand(Hand.MAIN_HAND);\n-\n-            if (ItemStackUtils.doesItemServeAsWeapon(heldItem))\n-            {\n-                if (heldItem.getItem() instanceof SwordItem)\n-                {\n-                    addDmg += ((SwordItem) heldItem.getItem()).getDamage() + BASE_PHYSICAL_DAMAGE;\n-                }\n-                else\n-                {\n-                    addDmg += TinkersToolHelper.getDamage(heldItem);\n-                }\n-                addDmg += EnchantmentHelper.getDamageBonus(heldItem, target.getMobType()) / 2.5;\n-            }\n-\n-            addDmg += worker.getCitizenColonyHandler().getColony().getResearchManager().getResearchEffects().getEffectStrength(MELEE_DAMAGE);\n-\n-            return (int) ((addDmg) * MineColonies.getConfig().getServer().knightDamageMult.get());\n-        }\n-        return (int) (BASE_PHYSICAL_DAMAGE * MineColonies.getConfig().getServer().knightDamageMult.get());\n-    }\n-\n-    @Override\n-    protected double getCombatSpeedBonus()\n-    {\n-        return worker.getCitizenData().getCitizenSkillHandler().getLevel(Skill.Adaptability) * SPEED_LEVEL_BONUS;\n-    }\n-\n-    @Override\n-    public void moveInAttackPosition()\n-    {\n-        worker.getNavigation().moveTo(target, getCombatMovementSpeed());\n-    }\n-\n-    @Override\n-    public Class<AbstractBuildingGuards> getExpectedBuildingClass()\n-    {\n-        return AbstractBuildingGuards.class;\n+        return list;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "5f7ad82f9c291d343b724e135f289e8d1a649b50", "committedDate": "2020-02-11 09:33:24 -0300", "message": "Finish research combat tree (#4315)"}, {"oid": "2e7441743e5f7be71b8350ea26bd75f448290123", "committedDate": "2020-02-16 18:42:51 -0300", "message": "Fix death messages (#4336)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "a8815ead1fbbdd84b39921ac7eac994ea5d513ee", "committedDate": "2020-04-23 14:53:53 +0100", "message": "Jdoc fixes (#4725)"}, {"oid": "d2510aca15a669f2e74b936d18cc2892c069bd89", "committedDate": "2020-06-03 17:40:39 +0100", "message": "Knight taunt (#5138)"}, {"oid": "93aeaee756c9fc6b749be35574da80ee20c4b16e", "committedDate": "2020-06-04 01:11:54 +0200", "message": "Hotfix knight attack npe (#5150)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "0dffbb02db9471c2278e7bcf3cc3df79f6dd5fe7", "committedDate": "2020-07-12 14:50:52 +0100", "message": "Next batch"}, {"oid": "a86d299410ca7dbb3f1a9baa7d02b84c96fe029a", "committedDate": "2020-07-12 17:21:03 +0100", "message": "Tough sunday"}, {"oid": "56d152166ba78ce3a7cc003c7640553a8df03ba6", "committedDate": "2020-07-19 17:55:16 +0100", "message": "Add visible status indicators for citizens (#5371)"}, {"oid": "75f6dbbb6ad8fc055fd802f67c4496c743351dbd", "committedDate": "2020-08-05 08:49:09 +0100", "message": "Guard improvements (#5481)"}, {"oid": "2db74dcf22a9e445f1446846a885a23e971e674b", "committedDate": "2020-08-05 08:57:50 +0100", "message": "fix compile errors"}, {"oid": "8f9ab8d354c63129e8e65483d6f3640aa01069ef", "committedDate": "2020-08-08 20:17:57 +0100", "message": "Colony flag banners (#5506)"}, {"oid": "bae35a3bd512cdc2e84ada26043126a2c139b990", "committedDate": "2020-08-16 14:32:48 +0200", "message": "Transfer common to server config"}, {"oid": "ab1b4a23be29fda75720988370d9e56f2287bd2e", "committedDate": "2020-09-08 09:33:17 +0100", "message": "Adds more dynamic difficulty to raids (#5726)"}, {"oid": "d9c79fb24dafc9e37dbf6e2160d4ed0c4104ce7b", "committedDate": "2020-12-27 22:29:25 +0000", "message": "Several fixes (#6297)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "f365c7b75dd0eab660c5d330afc55047c2397bed", "committedDate": "2021-04-19 00:05:01 +0100", "message": "make getOwnBuilding not null (#6951)"}, {"oid": "5602a946d2b915495d0e0ad9958099169ca138dd", "committedDate": "2021-05-27 19:57:32 +0100", "message": "Fix tinker's compat (#7163)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "d14de7f0841132bf92ce2485ceae65622f1ee625", "committedDate": "2021-07-11 20:02:52 +0100", "message": "Constant and import cleanup (#7368)"}, {"oid": "a8d03f3332cec8380c947865df3c5b0814fe0e12", "committedDate": "2021-07-18 12:45:50 +0100", "message": "Add threat tables to citizens/guards (#7398)"}, {"oid": "47e1e5ba99f0430317a897addb31678eda83b0b6", "committedDate": "2021-08-04 16:42:50 +0100", "message": "add combat ai based on threattables for both raiders and guards (#7452)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "5152ed9a20fdac372a1085d85f18bf9a532c606c", "committedDate": "2021-11-28 17:16:57 +0000", "message": "Small fix + direct warehouse assignment (#7812)"}]}, {"oid": "441a982c02fd9180b902c75f079aec71cfb13c7b", "url": "https://github.com/ldtteam/minecolonies/commit/441a982c02fd9180b902c75f079aec71cfb13c7b", "message": "Apply comments", "committedDate": "2020-02-02T11:30:07Z", "type": "commit"}, {"oid": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "url": "https://github.com/ldtteam/minecolonies/commit/2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "message": "fix order", "committedDate": "2020-02-02T11:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880770", "body": "This is definitely something that would be removed once Datapack support is added. ", "bodyText": "This is definitely something that would be removed once Datapack support is added.", "bodyHTML": "<p dir=\"auto\">This is definitely something that would be removed once Datapack support is added.</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:28:50Z", "path": "src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java", "diffHunk": "@@ -156,6 +157,38 @@\n     public final ForgeConfigSpec.BooleanValue creativeResolve;\n     public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n \n+    /*  --------------------------------------------------------------------------------- *\n+     *  ------------------- ######## Research Settings ######## ------------------- *\n+     *  --------------------------------------------------------------------------------- */\n+\n+    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tactictraining;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc5Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880796", "bodyText": "Also, is the capitalization supposed to be all lowercase?", "author": "Asherslab", "createdAt": "2020-02-02T22:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQxNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886414", "bodyText": "yeah, it's all lowercase so we can load the values from here.", "author": "Raycoms", "createdAt": "2020-02-02T23:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nold mode 100644\nnew mode 100755\nindex cc84b77d88..9a6b893f35\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -126,34 +126,36 @@ public class CommonConfiguration extends AbstractConfiguration\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfCompostableItems;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyBlocks;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> crusherProduction ;\n+    public final ForgeConfigSpec.ConfigValue<List<? extends String>> crusherProduction;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterMeshes;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> siftableBlocks;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterDrops;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfPlantables;\n     public final ForgeConfigSpec.ConfigValue<List<? extends String>> enchantments;\n-    public final ForgeConfigSpec.DoubleValue enchanterExperienceMultiplier;\n+    public final ForgeConfigSpec.DoubleValue                         enchanterExperienceMultiplier;\n+    public final ForgeConfigSpec.IntValue                            dynamicTreeHarvestSize;\n+    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diseases;\n \n-    public final ForgeConfigSpec.IntValue dynamicTreeHarvestSize;\n \n     /*  ------------------------------------------------------------------------------ *\n      *  ------------------- ######## Pathfinding Settings ######## ------------------- *\n      *  ------------------------------------------------------------------------------ */\n \n     public final ForgeConfigSpec.BooleanValue pathfindingDebugDraw;\n-    public final ForgeConfigSpec.IntValue pathfindingDebugVerbosity;\n-    public final ForgeConfigSpec.IntValue pathfindingMaxThreadCount;\n-    public final ForgeConfigSpec.IntValue pathfindingMaxNodes;\n+    public final ForgeConfigSpec.IntValue     pathfindingDebugVerbosity;\n+    public final ForgeConfigSpec.IntValue     pathfindingMaxThreadCount;\n+    public final ForgeConfigSpec.IntValue     pathfindingMaxNodes;\n+    public final ForgeConfigSpec.IntValue     minimumRailsToPath;\n \n     /*  --------------------------------------------------------------------------------- *\n      *  ------------------- ######## Request System Settings ######## ------------------- *\n      *  --------------------------------------------------------------------------------- */\n \n     public final ForgeConfigSpec.BooleanValue enableDebugLogging;\n-    public final ForgeConfigSpec.IntValue maximalRetries;\n-    public final ForgeConfigSpec.IntValue delayBetweenRetries;\n-    public final ForgeConfigSpec.IntValue maximalBuildingsToGather;\n-    public final ForgeConfigSpec.IntValue minimalBuildingsToGather;\n+    public final ForgeConfigSpec.IntValue     maximalRetries;\n+    public final ForgeConfigSpec.IntValue     delayBetweenRetries;\n+    public final ForgeConfigSpec.IntValue     maximalBuildingsToGather;\n+    public final ForgeConfigSpec.IntValue     minimalBuildingsToGather;\n     public final ForgeConfigSpec.BooleanValue creativeResolve;\n     public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n \n", "next_change": {"commit": "bae35a3bd512cdc2e84ada26043126a2c139b990", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\ndeleted file mode 100755\nindex 9a6b893f35..0000000000\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ /dev/null\n", "chunk": "@@ -1,1338 +0,0 @@\n-package com.minecolonies.api.configuration;\n-\n-import net.minecraftforge.common.ForgeConfigSpec;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static com.minecolonies.api.util.constant.Constants.*;\n-\n-/**\n- * Mod common configuration. Loaded everywhere, not synced.\n- */\n-public class CommonConfiguration extends AbstractConfiguration\n-{\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Gameplay settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     initialCitizenAmount;\n-    public final ForgeConfigSpec.BooleanValue builderPlaceConstructionTape;\n-    public final ForgeConfigSpec.BooleanValue playerGetsGuidebookOnFirstJoin;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteSupplyChests;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteColonies;\n-    public final ForgeConfigSpec.BooleanValue allowOtherDimColonies;\n-    public final ForgeConfigSpec.IntValue     citizenRespawnInterval;\n-    public final ForgeConfigSpec.IntValue     maxCitizenPerColony;\n-    public final ForgeConfigSpec.BooleanValue builderInfiniteResources;\n-    public final ForgeConfigSpec.BooleanValue limitToOneWareHousePerColony;\n-    public final ForgeConfigSpec.IntValue     builderBuildBlockDelay;\n-    public final ForgeConfigSpec.IntValue     blockMiningDelayModifier;\n-    public final ForgeConfigSpec.IntValue     maxBlocksCheckedByBuilder;\n-    public final ForgeConfigSpec.IntValue     chatFrequency;\n-    public final ForgeConfigSpec.BooleanValue enableInDevelopmentFeatures;\n-    public final ForgeConfigSpec.BooleanValue alwaysRenderNameTag;\n-    public final ForgeConfigSpec.DoubleValue  growthModifier;\n-    public final ForgeConfigSpec.BooleanValue workersAlwaysWorkInRain;\n-    public final ForgeConfigSpec.BooleanValue sendEnteringLeavingMessages;\n-    public final ForgeConfigSpec.BooleanValue allowPlayerSchematics;\n-    public final ForgeConfigSpec.IntValue     allowGlobalNameChanges;\n-    public final ForgeConfigSpec.BooleanValue holidayFeatures;\n-    public final ForgeConfigSpec.IntValue     updateRate;\n-    public final ForgeConfigSpec.IntValue     dirtFromCompost;\n-    public final ForgeConfigSpec.IntValue     luckyBlockChance;\n-    public final ForgeConfigSpec.BooleanValue fixOrphanedChunks;\n-    public final ForgeConfigSpec.BooleanValue restrictBuilderUnderground;\n-    public final ForgeConfigSpec.DoubleValue  fisherSpongeChance;\n-    public final ForgeConfigSpec.IntValue     minThLevelToTeleport;\n-    public final ForgeConfigSpec.BooleanValue suggestBuildToolPlacement;\n-    public final ForgeConfigSpec.DoubleValue  foodModifier;\n-    public final ForgeConfigSpec.BooleanValue disableCitizenVoices;\n-    public final ForgeConfigSpec.IntValue     diseaseModifier;\n-    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Command settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     teleportBuffer;\n-    public final ForgeConfigSpec.IntValue     opLevelForServer;\n-    public final ForgeConfigSpec.IntValue     autoDeleteColoniesInHours;\n-    public final ForgeConfigSpec.BooleanValue autoDestroyColonyBlocks;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseRTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseColonyTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAllyTHTeleport;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseHomeTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseShowColonyInfoCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseKillCitizensCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAddOfficerCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseDeleteColonyCommand;\n-    public final ForgeConfigSpec.IntValue     numberOfAttemptsForSafeTP;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Claim settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     maxColonySize;\n-    public final ForgeConfigSpec.IntValue     minColonyDistance;\n-    public final ForgeConfigSpec.IntValue     initialColonySize;\n-    public final ForgeConfigSpec.BooleanValue restrictColonyPlacement;\n-    public final ForgeConfigSpec.IntValue     maxDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.IntValue     minDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.BooleanValue protectVillages;\n-    public final ForgeConfigSpec.BooleanValue officersReceiveAdvancements;\n-\n-    /*  ------------------------------------------------------------------------- *\n-     *  ------------------- ######## Combat Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue doBarbariansSpawn;\n-    public final ForgeConfigSpec.IntValue     barbarianHordeDifficulty;\n-    public final ForgeConfigSpec.IntValue     spawnBarbarianSize;\n-    public final ForgeConfigSpec.IntValue     maxBarbarianSize;\n-    public final ForgeConfigSpec.BooleanValue doBarbariansBreakThroughWalls;\n-    public final ForgeConfigSpec.IntValue     averageNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.IntValue     minimumNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.BooleanValue shouldRaidersBreakDoors;\n-    public final ForgeConfigSpec.BooleanValue mobAttackCitizens;\n-    public final ForgeConfigSpec.BooleanValue citizenCallForHelp;\n-    public final ForgeConfigSpec.BooleanValue rangerEnchants;\n-    public final ForgeConfigSpec.DoubleValue  rangerDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  knightDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  guardHealthMult;\n-    public final ForgeConfigSpec.BooleanValue pvp_mode;\n-    public final ForgeConfigSpec.IntValue     daysUntilPirateshipsDespawn;\n-    public final ForgeConfigSpec.IntValue     maxYForBarbarians;\n-\n-    /*  ----------------------------------------------------------------------------- *\n-     *  ------------------- ######## Permission Settings ######## ------------------- *\n-     *  ----------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue                        enableColonyProtection;\n-    public final ForgeConfigSpec.BooleanValue                        turnOffExplosionsInColonies;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> specialPermGroup;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> freeToInteractBlocks;\n-    public final ForgeConfigSpec.IntValue                            secondsBetweenPermissionMessages;\n-\n-    /*  -------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Compatibility Settings ######## ------------------- *\n-     *  -------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> extraOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardResourceLocations;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> configListStudyItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfCompostableItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> crusherProduction;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterMeshes;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> siftableBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterDrops;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfPlantables;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> enchantments;\n-    public final ForgeConfigSpec.DoubleValue                         enchanterExperienceMultiplier;\n-    public final ForgeConfigSpec.IntValue                            dynamicTreeHarvestSize;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diseases;\n-\n-\n-    /*  ------------------------------------------------------------------------------ *\n-     *  ------------------- ######## Pathfinding Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------------ */\n-\n-    public final ForgeConfigSpec.BooleanValue pathfindingDebugDraw;\n-    public final ForgeConfigSpec.IntValue     pathfindingDebugVerbosity;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxThreadCount;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxNodes;\n-    public final ForgeConfigSpec.IntValue     minimumRailsToPath;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Request System Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue enableDebugLogging;\n-    public final ForgeConfigSpec.IntValue     maximalRetries;\n-    public final ForgeConfigSpec.IntValue     delayBetweenRetries;\n-    public final ForgeConfigSpec.IntValue     maximalBuildingsToGather;\n-    public final ForgeConfigSpec.IntValue     minimalBuildingsToGather;\n-    public final ForgeConfigSpec.BooleanValue creativeResolve;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Research Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tactictraining;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedswords;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> squiretraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> knighttraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captaintraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captainoftheguard;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedbows;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tickshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> multishot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rapidshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterbowman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoidance;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> parry;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> repost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> duelist;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> provost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterswordsman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> taunt;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improveddodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedevasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agilearcher;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> boiledleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironskin;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondskin;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> regeneration;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evade;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flee;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotfoot;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> feint;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fear;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> retreat;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullretreat;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> accuracy;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> quickdraw;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> powerattack;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> mightycleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whirlwind;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> preciseshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> penetratingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> piercingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woundingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deadlyaim;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> higherlearning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> morebooks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bookworm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bachelor;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> master;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> phd;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nurture;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hormones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> puberty;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> growth;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> beanstalk;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> keen;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> outpost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hamlet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> village;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> city;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diligent;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> studious;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> scholarly;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reflective;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> academic;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rails;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nimble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agile;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> swift;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> athlete;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stamina;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resistance;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resilience;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> vitality;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fortitude;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> indefatigability;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> healingcream;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandages;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compress;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cast;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gourmand;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gorger;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stuffer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> epicure;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> glutton;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> circus;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> festival;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> spectacle;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> opera;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theater;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel2;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatyaneed;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stringwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> thoselungs;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainbowheaven;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> veinminer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> goodveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> richveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> amazingveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> motherlode;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ability;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> skills;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tools;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> seemsautomatic;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> madness;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hittingiron;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stonecake;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hardened;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reinforced;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelbracing;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondcoated;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> memoryaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cheatsheet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> recipebook;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rtm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woodwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sieving;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> space;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> capacity;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullstock;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theflintstones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rockingroll;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> isthisredstone;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> redstonepowered;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavymachinery;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatisthisspeed;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> biodegradable;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flowerpower;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> letitgrow;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bonemeal;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dung;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fertilizer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> magiccompost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> lightning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deeppockets;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> loaded;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavilyloaded;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gildedhammer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> doubletrouble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotboots;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> pavetheroad;\n-\n-    /**\n-     * Builds common configuration.\n-     *\n-     * @param builder config builder\n-     */\n-    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n-    {\n-        createCategory(builder, \"gameplay\");\n-\n-        initialCitizenAmount = defineInteger(builder, \"initialcitizenamount\", 4, 1, 10);\n-        builderPlaceConstructionTape = defineBoolean(builder, \"builderplaceconstructiontape\", true);\n-        playerGetsGuidebookOnFirstJoin = defineBoolean(builder, \"playergetsguidebookonfirstjoin\", true);\n-        allowInfiniteSupplyChests = defineBoolean(builder, \"allowinfinitesupplychests\", false);\n-        allowInfiniteColonies = defineBoolean(builder, \"allowinfinitecolonies\", false);\n-        allowOtherDimColonies = defineBoolean(builder, \"allowotherdimcolonies\", false);\n-        citizenRespawnInterval = defineInteger(builder, \"citizenrespawninterval\", 60, CITIZEN_RESPAWN_INTERVAL_MIN, CITIZEN_RESPAWN_INTERVAL_MAX);\n-        maxCitizenPerColony = defineInteger(builder, \"maxcitizenpercolony\", 75, 4, 500);\n-        builderInfiniteResources = defineBoolean(builder, \"builderinfiniteresources\", false);\n-        limitToOneWareHousePerColony = defineBoolean(builder, \"limittoonewarehousepercolony\", true);\n-        builderBuildBlockDelay = defineInteger(builder, \"builderbuildblockdelay\", 15, 1, 500);\n-        blockMiningDelayModifier = defineInteger(builder, \"blockminingdelaymodifier\", 500, 1, 10000);\n-        maxBlocksCheckedByBuilder = defineInteger(builder, \"maxblockscheckedbybuilder\", 1000, 1000, 100000);\n-        chatFrequency = defineInteger(builder, \"chatfrequency\", 30, 1, 100);\n-        enableInDevelopmentFeatures = defineBoolean(builder, \"enableindevelopmentfeatures\", false);\n-        alwaysRenderNameTag = defineBoolean(builder, \"alwaysrendernametag\", true);\n-        growthModifier = defineDouble(builder, \"growthmodifier\", 1, 1, 100);\n-        workersAlwaysWorkInRain = defineBoolean(builder, \"workersalwaysworkinrain\", false);\n-        sendEnteringLeavingMessages = defineBoolean(builder, \"sendenteringleavingmessages\", true);\n-        allowPlayerSchematics = defineBoolean(builder, \"allowplayerschematics\", false);\n-        allowGlobalNameChanges = defineInteger(builder, \"allowglobalnamechanges\", 1, -1, 1);\n-        holidayFeatures = defineBoolean(builder, \"holidayfeatures\", true);\n-        updateRate = defineInteger(builder, \"updaterate\", 1, 0, 100);\n-        dirtFromCompost = defineInteger(builder, \"dirtfromcompost\", 1, 0, 100);\n-        luckyBlockChance = defineInteger(builder, \"luckyblockchance\", 1, 0, 100);\n-        fixOrphanedChunks = defineBoolean(builder, \"fixorphanedchunks\", false);\n-        restrictBuilderUnderground = defineBoolean(builder, \"restrictbuilderunderground\", true);\n-        fisherSpongeChance = defineDouble(builder, \"fisherspongechance\", 0.1, 0, 100);\n-        minThLevelToTeleport = defineInteger(builder, \"minthleveltoteleport\", 3, 0, 5);\n-        suggestBuildToolPlacement = defineBoolean(builder, \"suggestbuildtoolplacement\", true);\n-        foodModifier = defineDouble(builder, \"foodmodifier\", 1.0, 0, 100);\n-        disableCitizenVoices = defineBoolean(builder, \"disablecitizenvoices\", false);\n-        diseaseModifier = defineInteger(builder, \"diseasemodifier\", 5, 1, 100);\n-        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n-\n-        swapToCategory(builder, \"commands\");\n-\n-        teleportBuffer = defineInteger(builder, \"teleportbuffer\", 120, 30, 99999);\n-        opLevelForServer = defineInteger(builder, \"oplevelforserver\", 3, 0, 3);\n-        autoDeleteColoniesInHours = defineInteger(builder, \"autodeletecoloniesinhours\", 0, 168, 10000);\n-        autoDestroyColonyBlocks = defineBoolean(builder, \"autodestroycolonyblocks\", true);\n-        canPlayerUseRTPCommand = defineBoolean(builder, \"canplayerusertpcommand\", true);\n-        canPlayerUseColonyTPCommand = defineBoolean(builder, \"canplayerusecolonytpcommand\", false);\n-        canPlayerUseAllyTHTeleport = defineBoolean(builder, \"canplayeruseallytownhallteleport\", true);\n-        canPlayerUseHomeTPCommand = defineBoolean(builder, \"canplayerusehometpcommand\", true);\n-        canPlayerUseShowColonyInfoCommand = defineBoolean(builder, \"canplayeruseshowcolonyinfocommand\", true);\n-        canPlayerUseKillCitizensCommand = defineBoolean(builder, \"canplayerusekillcitizenscommand\", true);\n-        canPlayerUseAddOfficerCommand = defineBoolean(builder, \"canplayeruseaddofficercommand\", true);\n-        canPlayerUseDeleteColonyCommand = defineBoolean(builder, \"canplayerusedeletecolonycommand\", true);\n-        numberOfAttemptsForSafeTP = defineInteger(builder, \"numberofattemptsforsafetp\", 4, 1, 10);\n-\n-\n-        swapToCategory(builder, \"claims\");\n-\n-        maxColonySize = defineInteger(builder, \"maxColonySize\", 20, 1, 50);\n-        minColonyDistance = defineInteger(builder, \"minColonyDistance\", 8, 1, 200);\n-        initialColonySize = defineInteger(builder, \"initialColonySize\", 4, 1, 200);\n-        restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        maxDistanceFromWorldSpawn = defineInteger(builder, \"maxdistancefromworldspawn\", 8000, 1000, 100000);\n-        minDistanceFromWorldSpawn = defineInteger(builder, \"mindistancefromworldspawn\", 512, 1, 1000);\n-        protectVillages = defineBoolean(builder, \"protectvillages\", false);\n-        officersReceiveAdvancements = defineBoolean(builder, \"officersreceiveadvancements\", true);\n-\n-        swapToCategory(builder, \"combat\");\n-\n-        doBarbariansSpawn = defineBoolean(builder, \"dobarbariansspawn\", true);\n-        barbarianHordeDifficulty = defineInteger(builder, \"barbarianhordedifficulty\", DEFAULT_BARBARIAN_DIFFICULTY, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n-        spawnBarbarianSize = defineInteger(builder, \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n-        maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 80, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n-        doBarbariansBreakThroughWalls = defineBoolean(builder, \"dobarbariansbreakthroughwalls\", true);\n-        averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 7, 1, 10);\n-        minimumNumberOfNightsBetweenRaids = defineInteger(builder, \"minimumnumberofnightsbetweenraids\", 5, 1, 30);\n-        mobAttackCitizens = defineBoolean(builder, \"mobattackcitizens\", true);\n-        shouldRaidersBreakDoors = defineBoolean(builder, \"shouldraiderbreakdoors\", true);\n-        citizenCallForHelp = defineBoolean(builder, \"citizencallforhelp\", true);\n-        rangerEnchants = defineBoolean(builder, \"rangerenchants\", true);\n-        rangerDamageMult = defineDouble(builder, \"rangerdamagemult\", 1.0, 0.1, 5.0);\n-        knightDamageMult = defineDouble(builder, \"knightdamagemult\", 1.0, 0.1, 5.0);\n-        guardHealthMult = defineDouble(builder, \"guardhealthmult\", 1.0, 0.1, 5.0);\n-        pvp_mode = defineBoolean(builder, \"pvp_mode\", false);\n-        daysUntilPirateshipsDespawn = defineInteger(builder, \"daysuntilpirateshipsdespawn\", 3, 1, 10);\n-        maxYForBarbarians = defineInteger(builder, \"maxyforbarbarians\", 200, 1, 500);\n-\n-        swapToCategory(builder, \"permissions\");\n-\n-        enableColonyProtection = defineBoolean(builder, \"enablecolonyprotection\", true);\n-        turnOffExplosionsInColonies = defineBoolean(builder, \"turnoffexplosionsincolonies\", true);\n-        specialPermGroup = defineList(builder, \"specialpermgroup\",\n-          Arrays.asList\n-                   (\"_Raycoms_\"),\n-          s -> s instanceof String);\n-        freeToInteractBlocks = defineList(builder, \"freetointeractblocks\",\n-          Arrays.asList\n-                   (\"dirt\",\n-                     \"0 0 0\"),\n-          s -> s instanceof String);\n-        secondsBetweenPermissionMessages = defineInteger(builder, \"secondsBetweenPermissionMessages\", 30, 1, 1000);\n-\n-\n-        swapToCategory(builder, \"compatibility\");\n-\n-        extraOres = defineList(builder, \"extraOres\",\n-          Arrays.asList\n-                   (\"minestuck:ore_cruxite\",\n-                     \"minestuck:ore_uranium\"),\n-          s -> s instanceof String);\n-        guardResourceLocations = defineList(builder, \"guardresourcelocations\",\n-          Arrays.asList\n-                   (\"minecraft:slime\",\n-                     \"tconstruct:blueslime\"),\n-          s -> s instanceof String);\n-        configListStudyItems = defineList(builder, \"configliststudyitems\",\n-          Arrays.asList\n-                   (\"minecraft:paper;400;100\"),\n-          s -> s instanceof String);\n-        listOfCompostableItems = defineList(builder, \"listOfCompostableItems\",\n-          Arrays.asList\n-                   (\"minecraft:rotten_flesh\",\n-                     \"minecraft:brown_mushroom\",\n-                     \"minecraft:red_mushroom\",\n-                     \"minecraft:feather\",\n-                     \"minecraft:pumpkin\",\n-                     \"minecraft:carved_pumpkin\",\n-                     \"minecraft:grass\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:fern\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:kelp\",\n-                     \"minecraft:seagrass\",\n-                     \"minecraft:cactus\",\n-                     \"minecraft:sugar_cane\",\n-                     \"minecraft:vine\",\n-                     \"minecraft:cocoa_beans\",\n-                     \"minecraft:lily_pad\",\n-                     \"minecraft:sea_pickle\",\n-                     \"minecraft:wheat\",\n-                     \"minecraft:brown_mushroom_block\",\n-                     \"minecraft:red_mushroom_block\",\n-                     \"minecraft:mushroom_stem\",\n-                     \"minecraft:cake\",\n-                     \"minecraft:rabbit_foot\",\n-                     \"minecraft:fermented_spider_eye\",\n-                     \"saplings\",\n-                     \"flowers\",\n-                     \"leaves\"),\n-          s -> s instanceof String);\n-        luckyBlocks = defineList(builder, \"luckyblocks\",\n-          Arrays.asList\n-                   (\"minecraft:stone\",\n-                     \"minecraft:cobblestone\"),\n-          s -> s instanceof String);\n-        luckyOres = defineList(builder, \"luckyores\",\n-          Arrays.asList\n-                   (\"minecraft:coal_ore!64\",\n-                     \"minecraft:iron_ore!32\",\n-                     \"minecraft:gold_ore!16\",\n-                     \"minecraft:redstone_ore!8\",\n-                     \"minecraft:lapis_ore!4\",\n-                     \"minecraft:diamond_ore!2\",\n-                     \"minecraft:emerald_ore!1\"),\n-          s -> s instanceof String);\n-        crusherProduction = defineList(builder, \"crusherproduction\",\n-          Arrays.asList\n-                   (\"minecraft:cobblestone!minecraft:gravel\",\n-                     \"minecraft:gravel!minecraft:sand\",\n-                     \"minecraft:sand!minecraft:clay\"),\n-          s -> s instanceof String);\n-        sifterMeshes = defineList(builder, \"siftermeshes\",\n-          Arrays.asList\n-                   (\"minecraft:string,0\",\n-                     \"minecraft:flint,0.1\",\n-                     \"minecraft:iron_ingot,0.1\",\n-                     \"minecraft:diamond,0.1\"),\n-          s -> s instanceof String);\n-        siftableBlocks = defineList(builder, \"siftableblocks\",\n-          Arrays.asList\n-                   (\"minecraft:dirt\",\n-                     \"minecraft:sand\",\n-                     \"minecraft:gravel\",\n-                     \"minecraft:soul_sand\"),\n-          s -> s instanceof String);\n-\n-        sifterDrops = defineList(builder, \"sifterdrops\",\n-          Arrays.asList\n-                   (//Dirt with String mesh\n-                     \"0,0,minecraft:wheat_seeds,25\",\n-                     \"0,0,minecraft:oak_sapling,1\",\n-                     \"0,0,minecraft:birch_sapling,1\",\n-                     \"0,0,minecraft:spruce_sapling,1\",\n-                     \"0,0,minecraft:jungle_sapling,1\",\n-\n-                     //Dirt with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"0,1,minecraft:wheat_seeds,50\",\n-                     \"0,1,minecraft:oak_sapling,5\",\n-                     \"0,1,minecraft:birch_sapling,5\",\n-                     \"0,1,minecraft:spruce_sapling,5\",\n-                     \"0,1,minecraft:jungle_sapling,5\",\n-                     \"0,1,minecraft:carrot:0,1\",\n-                     \"0,1,minecraft:potato:0,1\",\n-\n-                     //Dirt with iron mesh\n-                     \"0,2,minecraft:wheat_seeds,50\",\n-                     \"0,2,minecraft:oak_sapling,10\",\n-                     \"0,2,minecraft:birch_sapling,10\",\n-                     \"0,2,minecraft:spruce_sapling,10\",\n-                     \"0,2,minecraft:jungle_sapling,10\",\n-                     \"0,2,minecraft:pumpkin_seeds:0,1\",\n-                     \"0,2,minecraft:melon_seeds:0,1\",\n-                     \"0,2,minecraft:beetroot_seeds:0,1\",\n-                     \"0,2,minecraft:carrot,1\",\n-                     \"0,2,minecraft:potato,1\",\n-                     \"0,2,minecraft:dark_oak_sapling,1\",\n-                     \"0,2,minecraft:acacia_sapling,1\",\n-\n-                     //Dirt with diamond mesh\n-                     \"0,3,minecraft:wheat_seeds,25\",\n-                     \"0,3,minecraft:oak_sapling,10\",\n-                     \"0,3,minecraft:birch_sapling,10\",\n-                     \"0,3,minecraft:spruce_sapling,10\",\n-                     \"0,3,minecraft:jungle_sapling,10\",\n-                     \"0,3,minecraft:pumpkin_seeds:0,5\",\n-                     \"0,3,minecraft:melon_seeds:0,5\",\n-                     \"0,3,minecraft:beetroot_seeds:0,5\",\n-                     \"0,3,minecraft:carrot:0,5\",\n-                     \"0,3,minecraft:potato:0,5\",\n-                     \"0,3,minecraft:dark_oak_sapling,5\",\n-                     \"0,3,minecraft:acacia_sapling,5\",\n-\n-                     //Sand with string mesh\n-                     \"1,0,minecraft:cactus,2.5\",\n-                     \"1,0,minecraft:sugar_cane,2.5\",\n-\n-                     //Sand with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"1,1,minecraft:cactus,5\",\n-                     \"1,1,minecraft:sugar_cane,5\",\n-                     \"1,1,minecraft:gold_nugget,5\",\n-\n-                     //Sand with iron mesh\n-                     \"1,2,minecraft:cactus,10\",\n-                     \"1,2,minecraft:sugar_cane,10\",\n-                     \"1,2,minecraft:cocoa_beans,10\",\n-                     \"1,2,minecraft:gold_nugget,10\",\n-\n-                     //Sand with diamond mesh\n-                     \"1,3,minecraft:cactus,15\",\n-                     \"1,3,minecraft:sugar_cane,15\",\n-                     \"1,3,minecraft:cocoa_beans,15\",\n-                     \"1,3,minecraft:gold_nugget,15\",\n-\n-                     //Gravel with string mesh\n-                     \"2,0,minecraft:iron_nugget,5\",\n-                     \"2,0,minecraft:flint,5\",\n-                     \"2,0,minecraft:coal,5\",\n-\n-                     //Gravel with flint mesh\n-                     \"2,1,minecraft:redstone,10\",\n-                     \"2,1,minecraft:iron_nugget,10\",\n-                     \"2,1,minecraft:flint,10\",\n-                     \"2,1,minecraft:coal,10\",\n-\n-                     //Gravel with iron mesh\n-                     \"2,2,minecraft:redstone,15\",\n-                     \"2,2,minecraft:iron_nugget,15\",\n-                     \"2,2,minecraft:coal,15\",\n-                     \"2,2,minecraft:lapis_lazuli,5\",\n-                     \"2,2,minecraft:iron_ingot,1\",\n-                     \"2,2,minecraft:gold_ingot,1\",\n-                     \"2,2,minecraft:emerald,1\",\n-                     \"2,2,minecraft:diamond,1\",\n-\n-                     //Gravel with diamond mesh\n-                     \"2,3,minecraft:redstone,20\",\n-                     \"2,3,minecraft:coal,20\",\n-                     \"2,3,minecraft:lapis_lazuli,10\",\n-                     \"2,3,minecraft:iron_ingot,2.5\",\n-                     \"2,3,minecraft:gold_ingot,2.5\",\n-                     \"2,3,minecraft:emerald,2.5\",\n-                     \"2,3,minecraft:diamond,2.5\",\n-\n-                     //Soulsand with string mesh\n-                     \"3,0,minecraft:nether_wart,5\",\n-                     \"3,0,minecraft:quartz,5\",\n-\n-                     //Soulsand with flint mesh\n-                     \"3,1,minecraft:nether_wart,10\",\n-                     \"3,1,minecraft:quartz,10\",\n-                     \"3,1,minecraft:glowstone_dust,5\",\n-\n-                     //Soulsand with iron mesh\n-                     \"3,2,minecraft:nether_wart,10\",\n-                     \"3,2,minecraft:quartz,10\",\n-                     \"3,2,minecraft:glowstone_dust,10\",\n-                     \"3,2,minecraft:blaze_powder,1\",\n-                     \"3,2,minecraft:magma_cream,1\",\n-\n-                     //Soulsand with diamond mesh\n-                     \"3,3,minecraft:nether_wart,15\",\n-                     \"3,3,minecraft:quartz,15\",\n-                     \"3,3,minecraft:glowstone_dust,15\",\n-                     \"3,3,minecraft:blaze_powder,5\",\n-                     \"3,3,minecraft:magma_cream,5\",\n-                     \"3,3,minecraft:player_head,5\"),\n-          s -> s instanceof String);\n-\n-        listOfPlantables = defineList(builder, \"listofplantables\",\n-          Arrays.asList\n-                   (\"minecraft:sunflower\",\n-                     \"minecraft:lilac\",\n-                     \"minecraft:rose_bush\",\n-                     \"minecraft:peony\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:fern\",\n-                     \"small_flowers\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchantments = defineList(builder, \"enchantments\",\n-          Arrays.asList\n-                   (\n-                     \"1,minecraft:aqua_affinity,1,50\",\n-                     \"1,minecraft:bane_of_arthropods,1,50\",\n-                     \"1,minecraft:blast_protection,1,50\",\n-                     \"1,minecraft:depth_strider,1,50\",\n-                     \"1,minecraft:feather_falling,1,50\",\n-                     \"1,minecraft:fire_aspect,1,50\",\n-                     \"1,minecraft:fire_protection,1,50\",\n-                     \"1,minecraft:flame,1,50\",\n-                     \"1,minecraft:frost_walker,1,50\",\n-                     \"1,minecraft:knockback,1,50\",\n-                     \"1,minecraft:looting,1,50\",\n-                     \"1,minecraft:power,1,50\",\n-                     \"1,minecraft:projectile_protection,1,50\",\n-                     \"1,minecraft:protection,1,50\",\n-                     \"1,minecraft:punch,1,50\",\n-                     \"1,minecraft:respiration,1,50\",\n-                     \"1,minecraft:sharpness,1,50\",\n-                     \"1,minecraft:smite,1,50\",\n-                     \"1,minecraft:sweeping,1,50\",\n-                     \"1,minecraft:unbreaking,1,50\",\n-\n-                     \"2,minecraft:aqua_affinity,2,25\",\n-                     \"2,minecraft:bane_of_arthropods,2,25\",\n-                     \"2,minecraft:blast_protection,2,25\",\n-                     \"2,minecraft:depth_strider,2,25\",\n-                     \"2,minecraft:feather_falling,2,25\",\n-                     \"2,minecraft:fire_aspect,2,25\",\n-                     \"2,minecraft:fire_protection,2,25\",\n-                     \"2,minecraft:flame,2,25\",\n-                     \"2,minecraft:frost_walker,2,25\",\n-                     \"2,minecraft:knockback,2,25\",\n-                     \"2,minecraft:looting,2,25\",\n-                     \"2,minecraft:power,2,25\",\n-                     \"2,minecraft:projectile_protection,2,25\",\n-                     \"2,minecraft:protection,2,25\",\n-                     \"2,minecraft:punch,2,25\",\n-                     \"2,minecraft:respiration,2,25\",\n-                     \"2,minecraft:sharpness,2,25\",\n-                     \"2,minecraft:smite,2,25\",\n-                     \"2,minecraft:sweeping,2,25\",\n-                     \"2,minecraft:unbreaking,2,25\",\n-\n-                     \"3,minecraft:aqua_affinity,3,15\",\n-                     \"3,minecraft:bane_of_arthropods,3,15\",\n-                     \"3,minecraft:blast_protection,3,15\",\n-                     \"3,minecraft:depth_strider,3,15\",\n-                     \"3,minecraft:feather_falling,3,15\",\n-                     \"3,minecraft:fire_aspect,3,15\",\n-                     \"3,minecraft:fire_protection,3,15\",\n-                     \"3,minecraft:flame,3,15\",\n-                     \"3,minecraft:frost_walker,3,15\",\n-                     \"3,minecraft:knockback,3,15\",\n-                     \"3,minecraft:looting,3,15\",\n-                     \"3,minecraft:power,3,15\",\n-                     \"3,minecraft:projectile_protection,3,15\",\n-                     \"3,minecraft:protection,3,15\",\n-                     \"3,minecraft:punch,3,15\",\n-                     \"3,minecraft:respiration,3,15\",\n-                     \"3,minecraft:sharpness,3,15\",\n-                     \"3,minecraft:smite,3,15\",\n-                     \"3,minecraft:sweeping,3,15\",\n-                     \"3,minecraft:unbreaking,3,15\",\n-\n-                     \"4,minecraft:aqua_affinity,4,5\",\n-                     \"4,minecraft:bane_of_arthropods,4,5\",\n-                     \"4,minecraft:blast_protection,4,5\",\n-                     \"4,minecraft:depth_strider,4,5\",\n-                     \"4,minecraft:feather_falling,4,5\",\n-                     \"4,minecraft:fire_aspect,4,5\",\n-                     \"4,minecraft:fire_protection,4,5\",\n-                     \"4,minecraft:flame,4,5\",\n-                     \"4,minecraft:frost_walker,4,5\",\n-                     \"4,minecraft:infinity,1,5\",\n-                     \"4,minecraft:knockback,4,5\",\n-                     \"4,minecraft:looting,4,5\",\n-                     \"4,minecraft:power,4,5\",\n-                     \"4,minecraft:projectile_protection,4,5\",\n-                     \"4,minecraft:protection,4,5\",\n-                     \"4,minecraft:punch,4,5\",\n-                     \"4,minecraft:respiration,4,5\",\n-                     \"4,minecraft:sharpness,4,5\",\n-                     \"4,minecraft:smite,4,5\",\n-                     \"4,minecraft:sweeping,4,5\",\n-                     \"4,minecraft:unbreaking,4,5\",\n-\n-                     \"5,minecraft:aqua_affinity,5,1\",\n-                     \"5,minecraft:bane_of_arthropods,5,1\",\n-                     \"5,minecraft:blast_protection,5,1\",\n-                     \"5,minecraft:depth_strider,5,1\",\n-                     \"5,minecraft:feather_falling,5,1\",\n-                     \"5,minecraft:fire_aspect,5,1\",\n-                     \"5,minecraft:fire_protection,5,1\",\n-                     \"5,minecraft:flame,5,1\",\n-                     \"5,minecraft:frost_walker,5,1\",\n-                     \"5,minecraft:infinity,1,1\",\n-                     \"5,minecraft:knockback,5,1\",\n-                     \"5,minecraft:looting,5,1\",\n-                     \"5,minecraft:mending,1,1\",\n-                     \"5,minecraft:power,5,1\",\n-                     \"5,minecraft:projectile_protection,5,1\",\n-                     \"5,minecraft:protection,5,1\",\n-                     \"5,minecraft:punch,5,1\",\n-                     \"5,minecraft:respiration,5,1\",\n-                     \"5,minecraft:sharpness,5,1\",\n-                     \"5,minecraft:smite,5,1\",\n-                     \"5,minecraft:sweeping,5,1\",\n-                     \"5,minecraft:unbreaking,5,1\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchanterExperienceMultiplier = defineDouble(builder, \"enchanterexperiencemultiplier\", 2, 1, 10);\n-\n-        dynamicTreeHarvestSize = defineInteger(builder, \"dynamictreeharvestsize\", 5, 1, 5);\n-\n-        diseases = defineList(builder, \"diseases\",\n-          Arrays.asList(\"Influenza,100,minecraft:carrot,minecraft:potato\",\n-            \"Measles,10,minecraft:dandelion,minecraft:kelp,minecraft:poppy\",\n-            \"Smallpox,1,minecraft:honeycomb,minecraft:golden_apple\"),\n-          s -> s instanceof String);\n-\n-        swapToCategory(builder, \"pathfinding\");\n-\n-        minimumRailsToPath = defineInteger(builder, \"minimumrailstopath\", 5, 5, 100);\n-        pathfindingDebugDraw = defineBoolean(builder, \"pathfindingdebugdraw\", false);\n-        pathfindingDebugVerbosity = defineInteger(builder, \"pathfindingdebugverbosity\", 0, 0, 10);\n-        pathfindingMaxThreadCount = defineInteger(builder, \"pathfindingmaxthreadcount\", 2, 1, 10);\n-        pathfindingMaxNodes = defineInteger(builder, \"pathfindingmaxnodes\", 5000, 1, 10000);\n-\n-\n-        swapToCategory(builder, \"requestSystem\");\n-\n-        enableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n-        maximalRetries = defineInteger(builder, \"maximalretries\", 3, 1, 10);\n-        delayBetweenRetries = defineInteger(builder, \"delaybetweenretries\", 1200, 30, 10000);\n-        maximalBuildingsToGather = defineInteger(builder, \"maximalbuildingstogather\", 6, 1, 50);\n-        minimalBuildingsToGather = defineInteger(builder, \"minimalbuildingstogather\", 3, 1, 50);\n-        creativeResolve = defineBoolean(builder, \"creativeresolve\", false);\n-        canPlayerUseResetCommand = defineBoolean(builder, \"canplayeruseresetcommand\", false);\n-\n-        swapToCategory(builder, \"research\");\n-\n-        tactictraining = defineList(builder, \"tactictraining\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        improvedswords = defineList(builder, \"improvedswords\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        squiretraining = defineList(builder, \"squiretraining\",\n-          Collections.singletonList(\"minecraft:shield*4\"),\n-          s -> s instanceof String);\n-        knighttraining = defineList(builder, \"knighttraining\",\n-          Collections.singletonList(\"minecraft:shield*8\"),\n-          s -> s instanceof String);\n-        captaintraining = defineList(builder, \"captaintraining\",\n-          Collections.singletonList(\"minecraft:shield*16\"),\n-          s -> s instanceof String);\n-        captainoftheguard = defineList(builder, \"captainoftheguard\",\n-          Collections.singletonList(\"minecraft:shield*27\"),\n-          s -> s instanceof String);\n-\n-        improvedbows = defineList(builder, \"improvedbows\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        tickshot = defineList(builder, \"tickshot\",\n-          Collections.singletonList(\"minecraft:bow*5\"),\n-          s -> s instanceof String);\n-        multishot = defineList(builder, \"multishot\",\n-          Collections.singletonList(\"minecraft:bow*9\"),\n-          s -> s instanceof String);\n-        rapidshot = defineList(builder, \"rapidshot\",\n-          Collections.singletonList(\"minecraft:bow*18\"),\n-          s -> s instanceof String);\n-        masterbowman = defineList(builder, \"masterbowman\",\n-          Collections.singletonList(\"minecraft:bow*27\"),\n-          s -> s instanceof String);\n-\n-        avoidance = defineList(builder, \"avoidance\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        parry = defineList(builder, \"parry\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        repost = defineList(builder, \"repost\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        duelist = defineList(builder, \"duelist\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        provost = defineList(builder, \"provost\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        masterswordsman = defineList(builder, \"masterswordsman\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        dodge = defineList(builder, \"dodge\",\n-          Collections.singletonList(\"minecraft:leather*16\"),\n-          s -> s instanceof String);\n-        improveddodge = defineList(builder, \"improveddodge\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        evasion = defineList(builder, \"evasion\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        improvedevasion = defineList(builder, \"improvedevasion\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        agilearcher = defineList(builder, \"agilearcher\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.improvedleather = defineList(builder, \"improvedleather\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        this.boiledleather = defineList(builder, \"boiledleather\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        this.ironskin = defineList(builder, \"ironskin\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        this.ironarmour = defineList(builder, \"ironarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        this.steelarmour = defineList(builder, \"steelarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.diamondskin = defineList(builder, \"diamondskin\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.regeneration = defineList(builder, \"regeneration\",\n-          Collections.singletonList(\"minecraft:emerald*1\"),\n-          s -> s instanceof String);\n-\n-        this.feint = defineList(builder, \"feint\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.fear = defineList(builder, \"fear\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.retreat = defineList(builder, \"retreat\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.fullretreat = defineList(builder, \"fullretreat\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.avoid = defineList(builder, \"avoid\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.evade = defineList(builder, \"evade\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.flee = defineList(builder, \"flee\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.hotfoot = defineList(builder, \"hotfoot\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.accuracy = defineList(builder, \"accuracy\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.quickdraw = defineList(builder, \"quickdraw\",\n-          Collections.singletonList(\"minecraft:iron_block*2\"),\n-          s -> s instanceof String);\n-        this.powerattack = defineList(builder, \"powerattack\",\n-          Collections.singletonList(\"minecraft:iron_block*4\"),\n-          s -> s instanceof String);\n-        this.cleave = defineList(builder, \"cleave\",\n-          Collections.singletonList(\"minecraft:iron_block*8\"),\n-          s -> s instanceof String);\n-        this.mightycleave = defineList(builder, \"mightycleave\",\n-          Collections.singletonList(\"minecraft:iron_block*16\"),\n-          s -> s instanceof String);\n-        this.whirlwind = defineList(builder, \"whirlwind\",\n-          Collections.singletonList(\"minecraft:iron_block*32\"),\n-          s -> s instanceof String);\n-\n-        this.preciseshot = defineList(builder, \"preciseshot\",\n-          Collections.singletonList(\"minecraft:flint*16\"),\n-          s -> s instanceof String);\n-        this.penetratingshot = defineList(builder, \"penetratingshot\",\n-          Collections.singletonList(\"minecraft:flint*32\"),\n-          s -> s instanceof String);\n-        this.piercingshot = defineList(builder, \"piercingshot\",\n-          Collections.singletonList(\"minecraft:flint*64\"),\n-          s -> s instanceof String);\n-        this.woundingshot = defineList(builder, \"woundingshot\",\n-          Collections.singletonList(\"minecraft:flint*128\"),\n-          s -> s instanceof String);\n-        this.deadlyaim = defineList(builder, \"deadlyaim\",\n-          Collections.singletonList(\"minecraft:flint*256\"),\n-          s -> s instanceof String);\n-\n-        this.higherlearning = defineList(builder, \"higherlearning\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-\n-        this.morebooks = defineList(builder, \"morebooks\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.bookworm = defineList(builder, \"bookworm\",\n-          Collections.singletonList(\"minecraft:bookshelf*6\"),\n-          s -> s instanceof String);\n-        this.bachelor = defineList(builder, \"bachelor\",\n-          Collections.singletonList(\"minecraft:bookshelf*12\"),\n-          s -> s instanceof String);\n-        this.master = defineList(builder, \"master\",\n-          Collections.singletonList(\"minecraft:bookshelf*32\"),\n-          s -> s instanceof String);\n-        this.phd = defineList(builder, \"phd\",\n-          Collections.singletonList(\"minecraft:bookshelf*64\"),\n-          s -> s instanceof String);\n-\n-        this.nurture = defineList(builder, \"nurture\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*32\"),\n-          s -> s instanceof String);\n-        this.hormones = defineList(builder, \"hormones\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*64\"),\n-          s -> s instanceof String);\n-        this.puberty = defineList(builder, \"puberty\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*128\"),\n-          s -> s instanceof String);\n-        this.growth = defineList(builder, \"growth\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*256\"),\n-          s -> s instanceof String);\n-        this.beanstalk = defineList(builder, \"beanstalk\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*512\"),\n-          s -> s instanceof String);\n-\n-        this.keen = defineList(builder, \"keen\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-        this.outpost = defineList(builder, \"outpost\",\n-          Collections.singletonList(\"minecraft:cooked_beef*64\"),\n-          s -> s instanceof String);\n-        this.hamlet = defineList(builder, \"hamlet\",\n-          Collections.singletonList(\"minecraft:cooked_beef*128\"),\n-          s -> s instanceof String);\n-        this.village = defineList(builder, \"village\",\n-          Collections.singletonList(\"minecraft:cooked_beef*256\"),\n-          s -> s instanceof String);\n-        this.city = defineList(builder, \"city\",\n-          Collections.singletonList(\"minecraft:cooked_beef*512\"),\n-          s -> s instanceof String);\n-\n-        this.diligent = defineList(builder, \"diligent\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.studious = defineList(builder, \"studious\",\n-          Collections.singletonList(\"minecraft:book*12\"),\n-          s -> s instanceof String);\n-        this.scholarly = defineList(builder, \"scholarly\",\n-          Collections.singletonList(\"minecraft:book*24\"),\n-          s -> s instanceof String);\n-        this.reflective = defineList(builder, \"reflective\",\n-          Collections.singletonList(\"minecraft:book*48\"),\n-          s -> s instanceof String);\n-        this.academic = defineList(builder, \"academic\",\n-          Collections.singletonList(\"minecraft:book*128\"),\n-          s -> s instanceof String);\n-\n-        this.rails = defineList(builder, \"rails\",\n-          Collections.singletonList(\"minecraft:rail*64\"),\n-          s -> s instanceof String);\n-        this.nimble = defineList(builder, \"nimble\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*1\"),\n-          s -> s instanceof String);\n-        this.agile = defineList(builder, \"agile\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*10\"),\n-          s -> s instanceof String);\n-        this.swift = defineList(builder, \"swift\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*32\"),\n-          s -> s instanceof String);\n-        this.athlete = defineList(builder, \"athlete\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*64\"),\n-          s -> s instanceof String);\n-\n-        this.stamina = defineList(builder, \"stamina\",\n-          Collections.singletonList(\"minecraft:carrot*1\"),\n-          s -> s instanceof String);\n-\n-        this.resistance = defineList(builder, \"resistance\",\n-          Collections.singletonList(\"minecraft:golden_apple*1\"),\n-          s -> s instanceof String);\n-        this.resilience = defineList(builder, \"resilience\",\n-          Collections.singletonList(\"minecraft:golden_apple*8\"),\n-          s -> s instanceof String);\n-        this.vitality = defineList(builder, \"vitality\",\n-          Collections.singletonList(\"minecraft:golden_apple*16\"),\n-          s -> s instanceof String);\n-        this.fortitude = defineList(builder, \"fortitude\",\n-          Collections.singletonList(\"minecraft:golden_apple*32\"),\n-          s -> s instanceof String);\n-        this.indefatigability = defineList(builder, \"indefatigability\",\n-          Collections.singletonList(\"minecraft:golden_apple*64\"),\n-          s -> s instanceof String);\n-\n-        this.bandaid = defineList(builder, \"bandaid\",\n-          Collections.singletonList(\"minecraft:golden_carrot*1\"),\n-          s -> s instanceof String);\n-        this.healingcream = defineList(builder, \"healingcream\",\n-          Collections.singletonList(\"minecraft:golden_carrot*8\"),\n-          s -> s instanceof String);\n-        this.bandages = defineList(builder, \"bandages\",\n-          Collections.singletonList(\"minecraft:golden_carrot*16\"),\n-          s -> s instanceof String);\n-        this.compress = defineList(builder, \"compress\",\n-          Collections.singletonList(\"minecraft:golden_carrot*32\"),\n-          s -> s instanceof String);\n-        this.cast = defineList(builder, \"cast\",\n-          Collections.singletonList(\"minecraft:golden_carrot*64\"),\n-          s -> s instanceof String);\n-\n-        this.gourmand = defineList(builder, \"gourmand\",\n-          Collections.singletonList(\"minecraft:cookie*32\"),\n-          s -> s instanceof String);\n-        this.gorger = defineList(builder, \"gorger\",\n-          Collections.singletonList(\"minecraft:cookie*64\"),\n-          s -> s instanceof String);\n-        this.stuffer = defineList(builder, \"stuffer\",\n-          Collections.singletonList(\"minecraft:cookie*128\"),\n-          s -> s instanceof String);\n-        this.epicure = defineList(builder, \"epicure\",\n-          Collections.singletonList(\"minecraft:cookie*256\"),\n-          s -> s instanceof String);\n-        this.glutton = defineList(builder, \"glutton\",\n-          Collections.singletonList(\"minecraft:cookie*512\"),\n-          s -> s instanceof String);\n-\n-        this.circus = defineList(builder, \"circus\",\n-          Collections.singletonList(\"minecraft:cake*1\"),\n-          s -> s instanceof String);\n-        this.festival = defineList(builder, \"festival\",\n-          Collections.singletonList(\"minecraft:cake*9\"),\n-          s -> s instanceof String);\n-        this.spectacle = defineList(builder, \"spectacle\",\n-          Collections.singletonList(\"minecraft:cake*18\"),\n-          s -> s instanceof String);\n-        this.opera = defineList(builder, \"opera\",\n-          Collections.singletonList(\"minecraft:cake*27\"),\n-          s -> s instanceof String);\n-        this.theater = defineList(builder, \"theater\",\n-          Collections.singletonList(\"minecraft:enchanted_golden_apple*16\"),\n-          s -> s instanceof String);\n-\n-        this.firstaid = defineList(builder, \"firstaid\",\n-          Collections.singletonList(\"minecraft:hay_block*8\"),\n-          s -> s instanceof String);\n-        this.firstaid2 = defineList(builder, \"firstaid2\",\n-          Collections.singletonList(\"minecraft:hay_block*16\"),\n-          s -> s instanceof String);\n-        this.livesaver = defineList(builder, \"livesaver\",\n-          Collections.singletonList(\"minecraft:hay_block*32\"),\n-          s -> s instanceof String);\n-        this.livesaver2 = defineList(builder, \"livesaver2\",\n-          Collections.singletonList(\"minecraft:hay_block*64\"),\n-          s -> s instanceof String);\n-        this.guardianangel = defineList(builder, \"guardianangel\",\n-          Collections.singletonList(\"minecraft:hay_block*128\"),\n-          s -> s instanceof String);\n-        this.guardianangel2 = defineList(builder, \"guardianangel2\",\n-          Collections.singletonList(\"minecraft:hay_block*256\"),\n-          s -> s instanceof String);\n-\n-        whatyaneed = defineList(builder, \"whatyaneed\",\n-          Collections.singletonList(\"minecraft:redstone*64\"),\n-          s -> s instanceof String);\n-        stringwork = defineList(builder, \"stringwork\",\n-          Collections.singletonList(\"minecraft:string*16\"),\n-          s -> s instanceof String);\n-        thoselungs = defineList(builder, \"thoselungs\",\n-          Collections.singletonList(\"minecraft:glass*64\"),\n-          s -> s instanceof String);\n-        rainbowheaven = defineList(builder, \"rainbowheaven\",\n-          Collections.singletonList(\"minecraft:poppy*64\"),\n-          s -> s instanceof String);\n-\n-        this.veinminer = defineList(builder, \"veinminer\",\n-          Collections.singletonList(\"minecraft:iron_ore*32\"),\n-          s -> s instanceof String);\n-        this.goodveins = defineList(builder, \"goodveins\",\n-          Collections.singletonList(\"minecraft:iron_ore*64\"),\n-          s -> s instanceof String);\n-        this.richveins = defineList(builder, \"richveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*32\"),\n-          s -> s instanceof String);\n-        this.amazingveins = defineList(builder, \"amazingveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*64\"),\n-          s -> s instanceof String);\n-        this.motherlode = defineList(builder, \"motherlode\",\n-          Collections.singletonList(\"minecraft:diamond_ore*64\"),\n-          s -> s instanceof String);\n-\n-        this.ability = defineList(builder, \"ability\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.skills = defineList(builder, \"skills\",\n-          Collections.singletonList(\"minecraft:iron_ingot*128\"),\n-          s -> s instanceof String);\n-        this.tools = defineList(builder, \"tools\",\n-          Collections.singletonList(\"minecraft:iron_ingot*256\"),\n-          s -> s instanceof String);\n-        this.seemsautomatic = defineList(builder, \"seemsautomatic\",\n-          Collections.singletonList(\"minecraft:iron_ingot*512\"),\n-          s -> s instanceof String);\n-        this.madness = defineList(builder, \"madness\",\n-          Collections.singletonList(\"minecraft:iron_ingot*1024\"),\n-          s -> s instanceof String);\n-\n-        this.hittingiron = defineList(builder, \"hittingiron\",\n-          Collections.singletonList(\"minecraft:anvil*1\"),\n-          s -> s instanceof String);\n-        this.stonecake = defineList(builder, \"stonecake\",\n-          Collections.singletonList(\"minecraft:chiseled_stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.hardened = defineList(builder, \"hardened\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        this.reinforced = defineList(builder, \"reinforced\",\n-          Collections.singletonList(\"minecraft:diamond*32\"),\n-          s -> s instanceof String);\n-        this.steelbracing = defineList(builder, \"steelbracing\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-        this.diamondcoated = defineList(builder, \"diamondcoated\",\n-          Collections.singletonList(\"minecraft:diamond*128\"),\n-          s -> s instanceof String);\n-\n-        this.memoryaid = defineList(builder, \"memoryaid\",\n-          Collections.singletonList(\"minecraft:paper*32\"),\n-          s -> s instanceof String);\n-        this.cheatsheet = defineList(builder, \"cheatsheet\",\n-          Collections.singletonList(\"minecraft:paper*64\"),\n-          s -> s instanceof String);\n-        this.recipebook = defineList(builder, \"recipebook\",\n-          Collections.singletonList(\"minecraft:paper*128\"),\n-          s -> s instanceof String);\n-        this.rtm = defineList(builder, \"rtm\",\n-          Collections.singletonList(\"minecraft:paper*256\"),\n-          s -> s instanceof String);\n-        this.rainman = defineList(builder, \"rainman\",\n-          Collections.singletonList(\"minecraft:salmon_bucket*27\"),\n-          s -> s instanceof String);\n-\n-        this.woodwork = defineList(builder, \"woodwork\",\n-          Collections.singletonList(\"minecraft:oak_planks*64\"),\n-          s -> s instanceof String);\n-        this.sieving = defineList(builder, \"sieving\",\n-          Collections.singletonList(\"minecraft:string*64\"),\n-          s -> s instanceof String);\n-        this.space = defineList(builder, \"space\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*16\"),\n-          s -> s instanceof String);\n-        this.capacity = defineList(builder, \"capacity\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*32\"),\n-          s -> s instanceof String);\n-        this.fullstock = defineList(builder, \"fullstock\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*64\"),\n-          s -> s instanceof String);\n-\n-        this.theflintstones = defineList(builder, \"theflintstones\",\n-          Collections.singletonList(\"minecraft:stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.rockingroll = defineList(builder, \"rockingroll\",\n-          Collections.singletonList(\"minecraft:stone*64\"),\n-          s -> s instanceof String);\n-\n-        this.hot = defineList(builder, \"hot\",\n-          Collections.singletonList(\"minecraft:lava_bucket*4\"),\n-          s -> s instanceof String);\n-        this.isthisredstone = defineList(builder, \"isthisredstone\",\n-          Collections.singletonList(\"minecraft:redstone*128\"),\n-          s -> s instanceof String);\n-        this.redstonepowered = defineList(builder, \"redstonepowered\",\n-          Collections.singletonList(\"minecraft:redstone*256\"),\n-          s -> s instanceof String);\n-        this.heavymachinery = defineList(builder, \"heavymachinery\",\n-          Collections.singletonList(\"minecraft:redstone*512\"),\n-          s -> s instanceof String);\n-        this.whatisthisspeed = defineList(builder, \"whatisthisspeed\",\n-          Collections.singletonList(\"minecraft:redstone*1024\"),\n-          s -> s instanceof String);\n-        this.lightning = defineList(builder, \"lightning\",\n-          Collections.singletonList(\"minecraft:redstone*2048\"),\n-          s -> s instanceof String);\n-\n-        this.biodegradable = defineList(builder, \"biodegradable\",\n-          Collections.singletonList(\"minecraft:bone_meal*64\"),\n-          s -> s instanceof String);\n-        this.flowerpower = defineList(builder, \"flowerpower\",\n-          Collections.singletonList(\"minecolonies:compost*64\"),\n-          s -> s instanceof String);\n-\n-        this.letitgrow = defineList(builder, \"letitgrow\",\n-          Collections.singletonList(\"minecolonies:compost*16\"),\n-          s -> s instanceof String);\n-\n-        this.bonemeal = defineList(builder, \"bonemeal\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*64\"),\n-          s -> s instanceof String);\n-        this.dung = defineList(builder, \"dung\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*128\"),\n-          s -> s instanceof String);\n-        this.compost = defineList(builder, \"compost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*256\"),\n-          s -> s instanceof String);\n-        this.fertilizer = defineList(builder, \"fertilizer\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*512\"),\n-          s -> s instanceof String);\n-        this.magiccompost = defineList(builder, \"magiccompost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*2048\"),\n-          s -> s instanceof String);\n-\n-        this.loaded = defineList(builder, \"loaded\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-        this.heavilyloaded = defineList(builder, \"heavilyloaded\",\n-          Collections.singletonList(\"minecraft:emerald*128\"),\n-          s -> s instanceof String);\n-        this.deeppockets = defineList(builder, \"deeppockets\",\n-          Collections.singletonList(\"minecraft:emerald*256\"),\n-          s -> s instanceof String);\n-\n-        List<String> tauntCosts = new ArrayList<String>();\n-        tauntCosts.add(\"minecraft:rotten_flesh*8\");\n-        tauntCosts.add(\"minecraft:bone*8\");\n-        tauntCosts.add(\"minecraft:spider_eye*8\");\n-        taunt = defineList(builder, \"taunt\",\n-          tauntCosts,\n-          s -> s instanceof String);\n-\n-        this.gildedhammer = defineList(builder, \"gildedhammer\",\n-          Arrays.asList(\"minecraft:gravel*64\", \"minecraft:sand*64\", \"minecraft:clay*64\"),\n-          s -> s instanceof String);\n-        this.doubletrouble = defineList(builder, \"doubletrouble\",\n-          Arrays.asList(\"minecraft:bamboo*64\", \"minecraft:sugar_cane*64\", \"minecraft:cactus*64\"),\n-          s -> s instanceof String);\n-        this.hotboots = defineList(builder, \"hotboots\",\n-          Arrays.asList(\"minecraft:leather*32\", \"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.pavetheroad = defineList(builder, \"pavetheroad\",\n-          Collections.singletonList(\"minecraft:white_concrete*32\"),\n-          s -> s instanceof String);\n-\n-        finishCategory(builder);\n-    }\n-}\n", "next_change": {"commit": "25931682555c4095f1dddee973e3eb19be364b52", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nnew file mode 100644\nindex 0000000000..608c14790b\n--- /dev/null\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -0,0 +1,20 @@\n+package com.minecolonies.api.configuration;\n+\n+import net.minecraftforge.common.ForgeConfigSpec;\n+\n+public class CommonConfiguration extends AbstractConfiguration\n+{\n+    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n+\n+    /**\n+     * Builds client configuration.\n+     *\n+     * @param builder config builder\n+     */\n+    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n+    {\n+        createCategory(builder, \"gameplay\");\n+        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n+        finishCategory(builder);\n+    }\n+}\n", "next_change": {"commit": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex 608c14790b..f235a068b9 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -16,5 +17,9 @@ public class CommonConfiguration extends AbstractConfiguration\n         createCategory(builder, \"gameplay\");\n         generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n         finishCategory(builder);\n+\n+        createCategory(builder, \"requestsystem\");\n+        rsEnableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n+        finishCategory(builder);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "5f7ad82f9c291d343b724e135f289e8d1a649b50", "committedDate": "2020-02-11 09:33:24 -0300", "message": "Finish research combat tree (#4315)"}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "d00ba98ab055b3708b586b0953c41e2a928ede15", "committedDate": "2020-03-08 18:17:20 +0000", "message": "Feature/hospital (#4396)"}, {"oid": "51520d3dcba0e33c0848c360b73aa85a95460250", "committedDate": "2020-03-21 19:24:43 +0100", "message": "Supply loot/ fix furnace users"}, {"oid": "6f4b692aa5d172cb9bd10b0bc4306843996d9dec", "committedDate": "2020-04-03 19:19:54 +0100", "message": "Adds guards patrolling together (#4565)"}, {"oid": "cd1e7949f609907f257bf442f8e9a4664e8c4572", "committedDate": "2020-04-11 10:48:07 +0100", "message": "Feature + Civilian Research Tree (#4608)"}, {"oid": "f21c869287e813eb7b9d81d00e57c5a85cc2d637", "committedDate": "2020-04-11 10:48:27 +0100", "message": "Fix duplicate config option luckyblocks and add compostables (#4601)"}, {"oid": "f98c16ac3b30a24456c5f80392af855a81acc87e", "committedDate": "2020-04-14 14:12:48 +0100", "message": "Feature/technology branch (#4629)"}, {"oid": "1183c64062d140b06362d0940ecb55ecac1d53a3", "committedDate": "2020-04-20 14:34:17 +0100", "message": "Feature/Inv citizen research (#4685)"}, {"oid": "ac346e525cd1dd66e843ae3e05425a53856c44db", "committedDate": "2020-04-21 11:25:33 +0100", "message": "small fixes (#4691)"}, {"oid": "3d2cfef23ee57fd49eaba8a419eddc4b6332a52d", "committedDate": "2020-04-25 15:33:06 +0100", "message": "Glassblower (#4751)"}, {"oid": "f23c9c3ccf582882f60734b57f9fe775b4ac09b8", "committedDate": "2020-04-25 19:06:20 +0200", "message": "Claim fixes and some view fixes (#4753)"}, {"oid": "8ab591e47b66d5674c99d8cc7ed5d736ad70d934", "committedDate": "2020-04-25 18:09:47 +0100", "message": "Small adjustments (#4754)"}, {"oid": "7cee98da53ca49d0540b0894b0d5e625558b5361", "committedDate": "2020-04-30 11:20:43 +0100", "message": "Feature/dyer (#4807)"}, {"oid": "eb91b1def7ebf06a964fb5e92cc38d8cb11f7a09", "committedDate": "2020-05-01 20:37:21 +0100", "message": "Raid fixes and adjustments (#4827)"}, {"oid": "4db033f9365a0f149e8cb07f66e00d540c8e4f33", "committedDate": "2020-05-05 14:23:12 +0200", "message": "Add Fletcher Worker (#4890)"}, {"oid": "8958ce0e30774786a7dbfb5418dd9dba46539828", "committedDate": "2020-05-09 09:26:09 +0100", "message": "Feature/mechanist (#4933)"}, {"oid": "6c87a2a39e061f7b10d9b3041c05b06742aa944f", "committedDate": "2020-05-14 18:45:13 +0100", "message": "Feature/plantation (#4950)"}, {"oid": "d2510aca15a669f2e74b936d18cc2892c069bd89", "committedDate": "2020-06-03 17:40:39 +0100", "message": "Knight taunt (#5138)"}, {"oid": "ad69b35a01b14d0244ecec073396ce51579c9aa3", "committedDate": "2020-06-07 13:36:40 +0100", "message": "Removes plantantion flowers from florist (#5111)"}, {"oid": "68d47083185edfb98965e322acad63ef017065c9", "committedDate": "2020-06-07 19:35:39 +0100", "message": "Feature research effects (#5166)"}, {"oid": "0a816c6a9cd8d3d51a13cc36e60db6ae24bc46a5", "committedDate": "2020-06-21 11:35:06 +0100", "message": "Feature/new workers (#5230)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "2f28d69e7af931c9425b0439bbc3615324cab5e3", "committedDate": "2020-07-04 11:27:24 +0100", "message": "Adjustments (#5338)"}, {"oid": "e2046de56432e28bd1de1b1f69d742c265fb10f6", "committedDate": "2020-07-18 13:56:18 +0100", "message": "Inventory util/debug (#5394)"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "3dc3f50baf6116415814376c6eb54006c6ffd0d1", "committedDate": "2020-07-18 16:08:22 +0100", "message": "Skip the Chit-Chat (#5399)"}, {"oid": "75f6dbbb6ad8fc055fd802f67c4496c743351dbd", "committedDate": "2020-08-05 08:49:09 +0100", "message": "Guard improvements (#5481)"}, {"oid": "50680f84edda3214bba8952f21d25ecb42f0091f", "committedDate": "2020-08-08 20:18:02 +0100", "message": "Recipes/tweaks (#5518)"}, {"oid": "b42068af6ff5ad0382a18e5b941b13da9486f782", "committedDate": "2020-08-10 08:57:49 +0100", "message": "Somefixes (#5540)"}, {"oid": "266dc863689d47213e775d15a4dfafff7d828b5c", "committedDate": "2020-08-12 16:07:53 +0100", "message": "Fix sitting hitbox (#5556)"}, {"oid": "25af14a05fbd409fc48f37a1b60b0ccb1d162fdf", "committedDate": "2020-08-15 17:35:38 +0200", "message": "Ported to a running version of 1.16.2"}, {"oid": "bae35a3bd512cdc2e84ada26043126a2c139b990", "committedDate": "2020-08-16 14:32:48 +0200", "message": "Transfer common to server config"}, {"oid": "25931682555c4095f1dddee973e3eb19be364b52", "committedDate": "2022-05-27 07:38:35 -0300", "message": "Fix supply loottable injection config (#7849)"}, {"oid": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "committedDate": "2023-03-20 18:11:55 +0100", "message": "Try to load the RS reconfiguration system from common configuration entries. (#9022)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDgzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880834", "body": "Is that going to cause issues for pre-existing worlds?", "bodyText": "Is that going to cause issues for pre-existing worlds?", "bodyHTML": "<p dir=\"auto\">Is that going to cause issues for pre-existing worlds?</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:29:47Z", "path": "src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java", "diffHunk": "@@ -224,7 +257,7 @@ protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n         townHallPadding = defineInteger(builder, \"townhallpadding\", 20, 1, 20000);\n         townHallPaddingChunk = defineInteger(builder, \"townhallpaddingchunk\", 1, 1, 200);\n         restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", false);\n+        enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", true);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQyMg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886422", "bodyText": "No", "author": "Raycoms", "createdAt": "2020-02-02T23:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDgzNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d00ba98ab055b3708b586b0953c41e2a928ede15", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex cc84b77d88..c1f4289918 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -249,9 +283,7 @@ public class CommonConfiguration extends AbstractConfiguration\n \n \n         swapToCategory(builder, \"claims\");\n-\n-        /*workingRangeTownHall = defineInteger(builder, \"workingrangetownhall\", 0, 0, 0);*/\n-\n+        \n         workingRangeTownHallChunks = defineInteger(builder, \"workingrangetownhallchunks\", 8, 1, 50);\n         minTownHallPadding = defineInteger(builder, \"mintownhallpadding\", 3, 1, 200);\n         townHallPadding = defineInteger(builder, \"townhallpadding\", 20, 1, 20000);\n", "next_change": {"commit": "6f4b692aa5d172cb9bd10b0bc4306843996d9dec", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex c1f4289918..105305cc96 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -283,11 +284,10 @@ public class CommonConfiguration extends AbstractConfiguration\n \n \n         swapToCategory(builder, \"claims\");\n-        \n-        workingRangeTownHallChunks = defineInteger(builder, \"workingrangetownhallchunks\", 8, 1, 50);\n-        minTownHallPadding = defineInteger(builder, \"mintownhallpadding\", 3, 1, 200);\n-        townHallPadding = defineInteger(builder, \"townhallpadding\", 20, 1, 20000);\n-        townHallPaddingChunk = defineInteger(builder, \"townhallpaddingchunk\", 1, 1, 200);\n+\n+        workingRangeTownHallChunks = defineInteger(builder, \"workingrangetownhallchunks\", 20, 1, 50);\n+        minTownHallPadding = defineInteger(builder, \"mintownhallpadding\", 10, 1, 200);\n+        townHallPaddingChunk = defineInteger(builder, \"townhallpaddingchunk\", 5, 1, 200);\n         restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n         enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", true);\n         maxDistanceFromWorldSpawn = defineInteger(builder, \"maxdistancefromworldspawn\", 8000, 1000, 100000);\n", "next_change": {"commit": "f23c9c3ccf582882f60734b57f9fe775b4ac09b8", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex 105305cc96..d35eb4e521 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -285,11 +409,10 @@ public class CommonConfiguration extends AbstractConfiguration\n \n         swapToCategory(builder, \"claims\");\n \n-        workingRangeTownHallChunks = defineInteger(builder, \"workingrangetownhallchunks\", 20, 1, 50);\n-        minTownHallPadding = defineInteger(builder, \"mintownhallpadding\", 10, 1, 200);\n-        townHallPaddingChunk = defineInteger(builder, \"townhallpaddingchunk\", 5, 1, 200);\n+        maxColonySize = defineInteger(builder, \"maxColonySize\", 20, 1, 50);\n+        minColonyDistance = defineInteger(builder, \"minColonyDistance\", 8, 1, 200);\n+        initialColonySize = defineInteger(builder, \"initialColonySize\", 4, 1, 200);\n         restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", true);\n         maxDistanceFromWorldSpawn = defineInteger(builder, \"maxdistancefromworldspawn\", 8000, 1000, 100000);\n         minDistanceFromWorldSpawn = defineInteger(builder, \"mindistancefromworldspawn\", 512, 1, 1000);\n         protectVillages = defineBoolean(builder, \"protectvillages\", false);\n", "next_change": {"commit": "eb91b1def7ebf06a964fb5e92cc38d8cb11f7a09", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex d35eb4e521..052ee6c9d6 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -421,12 +421,12 @@ public class CommonConfiguration extends AbstractConfiguration\n         swapToCategory(builder, \"combat\");\n \n         doBarbariansSpawn = defineBoolean(builder, \"dobarbariansspawn\", true);\n-        barbarianHordeDifficulty = defineInteger(builder,  \"barbarianhordedifficulty\", 5, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n+        barbarianHordeDifficulty = defineInteger(builder, \"barbarianhordedifficulty\", DEFAULT_BARBARIAN_DIFFICULTY, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n         spawnBarbarianSize = defineInteger(builder,  \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n-        maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 20, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n+        maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 80, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n         doBarbariansBreakThroughWalls = defineBoolean(builder, \"dobarbariansbreakthroughwalls\", true);\n-        averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 5, 1, 10);\n-        minimumNumberOfNightsBetweenRaids = defineInteger(builder, \"minimumnumberofnightsbetweenraids\", 3, 1, 30);\n+        averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 7, 1, 10);\n+        minimumNumberOfNightsBetweenRaids = defineInteger(builder, \"minimumnumberofnightsbetweenraids\", 5, 1, 30);\n         mobAttackCitizens = defineBoolean(builder, \"mobattackcitizens\", true);\n         shouldRaidersBreakDoors = defineBoolean(builder, \"shouldraiderbreakdoors\", true);\n         citizenCallForHelp = defineBoolean(builder, \"citizencallforhelp\", true);\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nold mode 100644\nnew mode 100755\nindex 052ee6c9d6..9a6b893f35\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -422,7 +430,7 @@ public class CommonConfiguration extends AbstractConfiguration\n \n         doBarbariansSpawn = defineBoolean(builder, \"dobarbariansspawn\", true);\n         barbarianHordeDifficulty = defineInteger(builder, \"barbarianhordedifficulty\", DEFAULT_BARBARIAN_DIFFICULTY, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n-        spawnBarbarianSize = defineInteger(builder,  \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n+        spawnBarbarianSize = defineInteger(builder, \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n         maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 80, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n         doBarbariansBreakThroughWalls = defineBoolean(builder, \"dobarbariansbreakthroughwalls\", true);\n         averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 7, 1, 10);\n", "next_change": {"commit": "bae35a3bd512cdc2e84ada26043126a2c139b990", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\ndeleted file mode 100755\nindex 9a6b893f35..0000000000\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ /dev/null\n", "chunk": "@@ -1,1338 +0,0 @@\n-package com.minecolonies.api.configuration;\n-\n-import net.minecraftforge.common.ForgeConfigSpec;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static com.minecolonies.api.util.constant.Constants.*;\n-\n-/**\n- * Mod common configuration. Loaded everywhere, not synced.\n- */\n-public class CommonConfiguration extends AbstractConfiguration\n-{\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Gameplay settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     initialCitizenAmount;\n-    public final ForgeConfigSpec.BooleanValue builderPlaceConstructionTape;\n-    public final ForgeConfigSpec.BooleanValue playerGetsGuidebookOnFirstJoin;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteSupplyChests;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteColonies;\n-    public final ForgeConfigSpec.BooleanValue allowOtherDimColonies;\n-    public final ForgeConfigSpec.IntValue     citizenRespawnInterval;\n-    public final ForgeConfigSpec.IntValue     maxCitizenPerColony;\n-    public final ForgeConfigSpec.BooleanValue builderInfiniteResources;\n-    public final ForgeConfigSpec.BooleanValue limitToOneWareHousePerColony;\n-    public final ForgeConfigSpec.IntValue     builderBuildBlockDelay;\n-    public final ForgeConfigSpec.IntValue     blockMiningDelayModifier;\n-    public final ForgeConfigSpec.IntValue     maxBlocksCheckedByBuilder;\n-    public final ForgeConfigSpec.IntValue     chatFrequency;\n-    public final ForgeConfigSpec.BooleanValue enableInDevelopmentFeatures;\n-    public final ForgeConfigSpec.BooleanValue alwaysRenderNameTag;\n-    public final ForgeConfigSpec.DoubleValue  growthModifier;\n-    public final ForgeConfigSpec.BooleanValue workersAlwaysWorkInRain;\n-    public final ForgeConfigSpec.BooleanValue sendEnteringLeavingMessages;\n-    public final ForgeConfigSpec.BooleanValue allowPlayerSchematics;\n-    public final ForgeConfigSpec.IntValue     allowGlobalNameChanges;\n-    public final ForgeConfigSpec.BooleanValue holidayFeatures;\n-    public final ForgeConfigSpec.IntValue     updateRate;\n-    public final ForgeConfigSpec.IntValue     dirtFromCompost;\n-    public final ForgeConfigSpec.IntValue     luckyBlockChance;\n-    public final ForgeConfigSpec.BooleanValue fixOrphanedChunks;\n-    public final ForgeConfigSpec.BooleanValue restrictBuilderUnderground;\n-    public final ForgeConfigSpec.DoubleValue  fisherSpongeChance;\n-    public final ForgeConfigSpec.IntValue     minThLevelToTeleport;\n-    public final ForgeConfigSpec.BooleanValue suggestBuildToolPlacement;\n-    public final ForgeConfigSpec.DoubleValue  foodModifier;\n-    public final ForgeConfigSpec.BooleanValue disableCitizenVoices;\n-    public final ForgeConfigSpec.IntValue     diseaseModifier;\n-    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Command settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     teleportBuffer;\n-    public final ForgeConfigSpec.IntValue     opLevelForServer;\n-    public final ForgeConfigSpec.IntValue     autoDeleteColoniesInHours;\n-    public final ForgeConfigSpec.BooleanValue autoDestroyColonyBlocks;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseRTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseColonyTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAllyTHTeleport;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseHomeTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseShowColonyInfoCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseKillCitizensCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAddOfficerCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseDeleteColonyCommand;\n-    public final ForgeConfigSpec.IntValue     numberOfAttemptsForSafeTP;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Claim settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     maxColonySize;\n-    public final ForgeConfigSpec.IntValue     minColonyDistance;\n-    public final ForgeConfigSpec.IntValue     initialColonySize;\n-    public final ForgeConfigSpec.BooleanValue restrictColonyPlacement;\n-    public final ForgeConfigSpec.IntValue     maxDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.IntValue     minDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.BooleanValue protectVillages;\n-    public final ForgeConfigSpec.BooleanValue officersReceiveAdvancements;\n-\n-    /*  ------------------------------------------------------------------------- *\n-     *  ------------------- ######## Combat Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue doBarbariansSpawn;\n-    public final ForgeConfigSpec.IntValue     barbarianHordeDifficulty;\n-    public final ForgeConfigSpec.IntValue     spawnBarbarianSize;\n-    public final ForgeConfigSpec.IntValue     maxBarbarianSize;\n-    public final ForgeConfigSpec.BooleanValue doBarbariansBreakThroughWalls;\n-    public final ForgeConfigSpec.IntValue     averageNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.IntValue     minimumNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.BooleanValue shouldRaidersBreakDoors;\n-    public final ForgeConfigSpec.BooleanValue mobAttackCitizens;\n-    public final ForgeConfigSpec.BooleanValue citizenCallForHelp;\n-    public final ForgeConfigSpec.BooleanValue rangerEnchants;\n-    public final ForgeConfigSpec.DoubleValue  rangerDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  knightDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  guardHealthMult;\n-    public final ForgeConfigSpec.BooleanValue pvp_mode;\n-    public final ForgeConfigSpec.IntValue     daysUntilPirateshipsDespawn;\n-    public final ForgeConfigSpec.IntValue     maxYForBarbarians;\n-\n-    /*  ----------------------------------------------------------------------------- *\n-     *  ------------------- ######## Permission Settings ######## ------------------- *\n-     *  ----------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue                        enableColonyProtection;\n-    public final ForgeConfigSpec.BooleanValue                        turnOffExplosionsInColonies;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> specialPermGroup;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> freeToInteractBlocks;\n-    public final ForgeConfigSpec.IntValue                            secondsBetweenPermissionMessages;\n-\n-    /*  -------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Compatibility Settings ######## ------------------- *\n-     *  -------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> extraOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardResourceLocations;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> configListStudyItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfCompostableItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> crusherProduction;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterMeshes;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> siftableBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterDrops;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfPlantables;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> enchantments;\n-    public final ForgeConfigSpec.DoubleValue                         enchanterExperienceMultiplier;\n-    public final ForgeConfigSpec.IntValue                            dynamicTreeHarvestSize;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diseases;\n-\n-\n-    /*  ------------------------------------------------------------------------------ *\n-     *  ------------------- ######## Pathfinding Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------------ */\n-\n-    public final ForgeConfigSpec.BooleanValue pathfindingDebugDraw;\n-    public final ForgeConfigSpec.IntValue     pathfindingDebugVerbosity;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxThreadCount;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxNodes;\n-    public final ForgeConfigSpec.IntValue     minimumRailsToPath;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Request System Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue enableDebugLogging;\n-    public final ForgeConfigSpec.IntValue     maximalRetries;\n-    public final ForgeConfigSpec.IntValue     delayBetweenRetries;\n-    public final ForgeConfigSpec.IntValue     maximalBuildingsToGather;\n-    public final ForgeConfigSpec.IntValue     minimalBuildingsToGather;\n-    public final ForgeConfigSpec.BooleanValue creativeResolve;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Research Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tactictraining;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedswords;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> squiretraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> knighttraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captaintraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captainoftheguard;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedbows;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tickshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> multishot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rapidshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterbowman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoidance;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> parry;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> repost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> duelist;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> provost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterswordsman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> taunt;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improveddodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedevasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agilearcher;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> boiledleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironskin;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondskin;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> regeneration;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evade;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flee;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotfoot;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> feint;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fear;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> retreat;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullretreat;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> accuracy;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> quickdraw;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> powerattack;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> mightycleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whirlwind;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> preciseshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> penetratingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> piercingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woundingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deadlyaim;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> higherlearning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> morebooks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bookworm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bachelor;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> master;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> phd;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nurture;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hormones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> puberty;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> growth;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> beanstalk;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> keen;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> outpost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hamlet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> village;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> city;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diligent;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> studious;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> scholarly;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reflective;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> academic;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rails;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nimble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agile;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> swift;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> athlete;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stamina;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resistance;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resilience;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> vitality;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fortitude;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> indefatigability;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> healingcream;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandages;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compress;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cast;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gourmand;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gorger;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stuffer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> epicure;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> glutton;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> circus;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> festival;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> spectacle;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> opera;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theater;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel2;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatyaneed;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stringwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> thoselungs;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainbowheaven;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> veinminer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> goodveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> richveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> amazingveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> motherlode;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ability;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> skills;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tools;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> seemsautomatic;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> madness;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hittingiron;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stonecake;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hardened;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reinforced;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelbracing;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondcoated;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> memoryaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cheatsheet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> recipebook;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rtm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woodwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sieving;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> space;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> capacity;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullstock;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theflintstones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rockingroll;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> isthisredstone;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> redstonepowered;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavymachinery;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatisthisspeed;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> biodegradable;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flowerpower;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> letitgrow;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bonemeal;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dung;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fertilizer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> magiccompost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> lightning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deeppockets;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> loaded;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavilyloaded;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gildedhammer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> doubletrouble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotboots;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> pavetheroad;\n-\n-    /**\n-     * Builds common configuration.\n-     *\n-     * @param builder config builder\n-     */\n-    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n-    {\n-        createCategory(builder, \"gameplay\");\n-\n-        initialCitizenAmount = defineInteger(builder, \"initialcitizenamount\", 4, 1, 10);\n-        builderPlaceConstructionTape = defineBoolean(builder, \"builderplaceconstructiontape\", true);\n-        playerGetsGuidebookOnFirstJoin = defineBoolean(builder, \"playergetsguidebookonfirstjoin\", true);\n-        allowInfiniteSupplyChests = defineBoolean(builder, \"allowinfinitesupplychests\", false);\n-        allowInfiniteColonies = defineBoolean(builder, \"allowinfinitecolonies\", false);\n-        allowOtherDimColonies = defineBoolean(builder, \"allowotherdimcolonies\", false);\n-        citizenRespawnInterval = defineInteger(builder, \"citizenrespawninterval\", 60, CITIZEN_RESPAWN_INTERVAL_MIN, CITIZEN_RESPAWN_INTERVAL_MAX);\n-        maxCitizenPerColony = defineInteger(builder, \"maxcitizenpercolony\", 75, 4, 500);\n-        builderInfiniteResources = defineBoolean(builder, \"builderinfiniteresources\", false);\n-        limitToOneWareHousePerColony = defineBoolean(builder, \"limittoonewarehousepercolony\", true);\n-        builderBuildBlockDelay = defineInteger(builder, \"builderbuildblockdelay\", 15, 1, 500);\n-        blockMiningDelayModifier = defineInteger(builder, \"blockminingdelaymodifier\", 500, 1, 10000);\n-        maxBlocksCheckedByBuilder = defineInteger(builder, \"maxblockscheckedbybuilder\", 1000, 1000, 100000);\n-        chatFrequency = defineInteger(builder, \"chatfrequency\", 30, 1, 100);\n-        enableInDevelopmentFeatures = defineBoolean(builder, \"enableindevelopmentfeatures\", false);\n-        alwaysRenderNameTag = defineBoolean(builder, \"alwaysrendernametag\", true);\n-        growthModifier = defineDouble(builder, \"growthmodifier\", 1, 1, 100);\n-        workersAlwaysWorkInRain = defineBoolean(builder, \"workersalwaysworkinrain\", false);\n-        sendEnteringLeavingMessages = defineBoolean(builder, \"sendenteringleavingmessages\", true);\n-        allowPlayerSchematics = defineBoolean(builder, \"allowplayerschematics\", false);\n-        allowGlobalNameChanges = defineInteger(builder, \"allowglobalnamechanges\", 1, -1, 1);\n-        holidayFeatures = defineBoolean(builder, \"holidayfeatures\", true);\n-        updateRate = defineInteger(builder, \"updaterate\", 1, 0, 100);\n-        dirtFromCompost = defineInteger(builder, \"dirtfromcompost\", 1, 0, 100);\n-        luckyBlockChance = defineInteger(builder, \"luckyblockchance\", 1, 0, 100);\n-        fixOrphanedChunks = defineBoolean(builder, \"fixorphanedchunks\", false);\n-        restrictBuilderUnderground = defineBoolean(builder, \"restrictbuilderunderground\", true);\n-        fisherSpongeChance = defineDouble(builder, \"fisherspongechance\", 0.1, 0, 100);\n-        minThLevelToTeleport = defineInteger(builder, \"minthleveltoteleport\", 3, 0, 5);\n-        suggestBuildToolPlacement = defineBoolean(builder, \"suggestbuildtoolplacement\", true);\n-        foodModifier = defineDouble(builder, \"foodmodifier\", 1.0, 0, 100);\n-        disableCitizenVoices = defineBoolean(builder, \"disablecitizenvoices\", false);\n-        diseaseModifier = defineInteger(builder, \"diseasemodifier\", 5, 1, 100);\n-        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n-\n-        swapToCategory(builder, \"commands\");\n-\n-        teleportBuffer = defineInteger(builder, \"teleportbuffer\", 120, 30, 99999);\n-        opLevelForServer = defineInteger(builder, \"oplevelforserver\", 3, 0, 3);\n-        autoDeleteColoniesInHours = defineInteger(builder, \"autodeletecoloniesinhours\", 0, 168, 10000);\n-        autoDestroyColonyBlocks = defineBoolean(builder, \"autodestroycolonyblocks\", true);\n-        canPlayerUseRTPCommand = defineBoolean(builder, \"canplayerusertpcommand\", true);\n-        canPlayerUseColonyTPCommand = defineBoolean(builder, \"canplayerusecolonytpcommand\", false);\n-        canPlayerUseAllyTHTeleport = defineBoolean(builder, \"canplayeruseallytownhallteleport\", true);\n-        canPlayerUseHomeTPCommand = defineBoolean(builder, \"canplayerusehometpcommand\", true);\n-        canPlayerUseShowColonyInfoCommand = defineBoolean(builder, \"canplayeruseshowcolonyinfocommand\", true);\n-        canPlayerUseKillCitizensCommand = defineBoolean(builder, \"canplayerusekillcitizenscommand\", true);\n-        canPlayerUseAddOfficerCommand = defineBoolean(builder, \"canplayeruseaddofficercommand\", true);\n-        canPlayerUseDeleteColonyCommand = defineBoolean(builder, \"canplayerusedeletecolonycommand\", true);\n-        numberOfAttemptsForSafeTP = defineInteger(builder, \"numberofattemptsforsafetp\", 4, 1, 10);\n-\n-\n-        swapToCategory(builder, \"claims\");\n-\n-        maxColonySize = defineInteger(builder, \"maxColonySize\", 20, 1, 50);\n-        minColonyDistance = defineInteger(builder, \"minColonyDistance\", 8, 1, 200);\n-        initialColonySize = defineInteger(builder, \"initialColonySize\", 4, 1, 200);\n-        restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        maxDistanceFromWorldSpawn = defineInteger(builder, \"maxdistancefromworldspawn\", 8000, 1000, 100000);\n-        minDistanceFromWorldSpawn = defineInteger(builder, \"mindistancefromworldspawn\", 512, 1, 1000);\n-        protectVillages = defineBoolean(builder, \"protectvillages\", false);\n-        officersReceiveAdvancements = defineBoolean(builder, \"officersreceiveadvancements\", true);\n-\n-        swapToCategory(builder, \"combat\");\n-\n-        doBarbariansSpawn = defineBoolean(builder, \"dobarbariansspawn\", true);\n-        barbarianHordeDifficulty = defineInteger(builder, \"barbarianhordedifficulty\", DEFAULT_BARBARIAN_DIFFICULTY, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n-        spawnBarbarianSize = defineInteger(builder, \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n-        maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 80, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n-        doBarbariansBreakThroughWalls = defineBoolean(builder, \"dobarbariansbreakthroughwalls\", true);\n-        averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 7, 1, 10);\n-        minimumNumberOfNightsBetweenRaids = defineInteger(builder, \"minimumnumberofnightsbetweenraids\", 5, 1, 30);\n-        mobAttackCitizens = defineBoolean(builder, \"mobattackcitizens\", true);\n-        shouldRaidersBreakDoors = defineBoolean(builder, \"shouldraiderbreakdoors\", true);\n-        citizenCallForHelp = defineBoolean(builder, \"citizencallforhelp\", true);\n-        rangerEnchants = defineBoolean(builder, \"rangerenchants\", true);\n-        rangerDamageMult = defineDouble(builder, \"rangerdamagemult\", 1.0, 0.1, 5.0);\n-        knightDamageMult = defineDouble(builder, \"knightdamagemult\", 1.0, 0.1, 5.0);\n-        guardHealthMult = defineDouble(builder, \"guardhealthmult\", 1.0, 0.1, 5.0);\n-        pvp_mode = defineBoolean(builder, \"pvp_mode\", false);\n-        daysUntilPirateshipsDespawn = defineInteger(builder, \"daysuntilpirateshipsdespawn\", 3, 1, 10);\n-        maxYForBarbarians = defineInteger(builder, \"maxyforbarbarians\", 200, 1, 500);\n-\n-        swapToCategory(builder, \"permissions\");\n-\n-        enableColonyProtection = defineBoolean(builder, \"enablecolonyprotection\", true);\n-        turnOffExplosionsInColonies = defineBoolean(builder, \"turnoffexplosionsincolonies\", true);\n-        specialPermGroup = defineList(builder, \"specialpermgroup\",\n-          Arrays.asList\n-                   (\"_Raycoms_\"),\n-          s -> s instanceof String);\n-        freeToInteractBlocks = defineList(builder, \"freetointeractblocks\",\n-          Arrays.asList\n-                   (\"dirt\",\n-                     \"0 0 0\"),\n-          s -> s instanceof String);\n-        secondsBetweenPermissionMessages = defineInteger(builder, \"secondsBetweenPermissionMessages\", 30, 1, 1000);\n-\n-\n-        swapToCategory(builder, \"compatibility\");\n-\n-        extraOres = defineList(builder, \"extraOres\",\n-          Arrays.asList\n-                   (\"minestuck:ore_cruxite\",\n-                     \"minestuck:ore_uranium\"),\n-          s -> s instanceof String);\n-        guardResourceLocations = defineList(builder, \"guardresourcelocations\",\n-          Arrays.asList\n-                   (\"minecraft:slime\",\n-                     \"tconstruct:blueslime\"),\n-          s -> s instanceof String);\n-        configListStudyItems = defineList(builder, \"configliststudyitems\",\n-          Arrays.asList\n-                   (\"minecraft:paper;400;100\"),\n-          s -> s instanceof String);\n-        listOfCompostableItems = defineList(builder, \"listOfCompostableItems\",\n-          Arrays.asList\n-                   (\"minecraft:rotten_flesh\",\n-                     \"minecraft:brown_mushroom\",\n-                     \"minecraft:red_mushroom\",\n-                     \"minecraft:feather\",\n-                     \"minecraft:pumpkin\",\n-                     \"minecraft:carved_pumpkin\",\n-                     \"minecraft:grass\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:fern\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:kelp\",\n-                     \"minecraft:seagrass\",\n-                     \"minecraft:cactus\",\n-                     \"minecraft:sugar_cane\",\n-                     \"minecraft:vine\",\n-                     \"minecraft:cocoa_beans\",\n-                     \"minecraft:lily_pad\",\n-                     \"minecraft:sea_pickle\",\n-                     \"minecraft:wheat\",\n-                     \"minecraft:brown_mushroom_block\",\n-                     \"minecraft:red_mushroom_block\",\n-                     \"minecraft:mushroom_stem\",\n-                     \"minecraft:cake\",\n-                     \"minecraft:rabbit_foot\",\n-                     \"minecraft:fermented_spider_eye\",\n-                     \"saplings\",\n-                     \"flowers\",\n-                     \"leaves\"),\n-          s -> s instanceof String);\n-        luckyBlocks = defineList(builder, \"luckyblocks\",\n-          Arrays.asList\n-                   (\"minecraft:stone\",\n-                     \"minecraft:cobblestone\"),\n-          s -> s instanceof String);\n-        luckyOres = defineList(builder, \"luckyores\",\n-          Arrays.asList\n-                   (\"minecraft:coal_ore!64\",\n-                     \"minecraft:iron_ore!32\",\n-                     \"minecraft:gold_ore!16\",\n-                     \"minecraft:redstone_ore!8\",\n-                     \"minecraft:lapis_ore!4\",\n-                     \"minecraft:diamond_ore!2\",\n-                     \"minecraft:emerald_ore!1\"),\n-          s -> s instanceof String);\n-        crusherProduction = defineList(builder, \"crusherproduction\",\n-          Arrays.asList\n-                   (\"minecraft:cobblestone!minecraft:gravel\",\n-                     \"minecraft:gravel!minecraft:sand\",\n-                     \"minecraft:sand!minecraft:clay\"),\n-          s -> s instanceof String);\n-        sifterMeshes = defineList(builder, \"siftermeshes\",\n-          Arrays.asList\n-                   (\"minecraft:string,0\",\n-                     \"minecraft:flint,0.1\",\n-                     \"minecraft:iron_ingot,0.1\",\n-                     \"minecraft:diamond,0.1\"),\n-          s -> s instanceof String);\n-        siftableBlocks = defineList(builder, \"siftableblocks\",\n-          Arrays.asList\n-                   (\"minecraft:dirt\",\n-                     \"minecraft:sand\",\n-                     \"minecraft:gravel\",\n-                     \"minecraft:soul_sand\"),\n-          s -> s instanceof String);\n-\n-        sifterDrops = defineList(builder, \"sifterdrops\",\n-          Arrays.asList\n-                   (//Dirt with String mesh\n-                     \"0,0,minecraft:wheat_seeds,25\",\n-                     \"0,0,minecraft:oak_sapling,1\",\n-                     \"0,0,minecraft:birch_sapling,1\",\n-                     \"0,0,minecraft:spruce_sapling,1\",\n-                     \"0,0,minecraft:jungle_sapling,1\",\n-\n-                     //Dirt with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"0,1,minecraft:wheat_seeds,50\",\n-                     \"0,1,minecraft:oak_sapling,5\",\n-                     \"0,1,minecraft:birch_sapling,5\",\n-                     \"0,1,minecraft:spruce_sapling,5\",\n-                     \"0,1,minecraft:jungle_sapling,5\",\n-                     \"0,1,minecraft:carrot:0,1\",\n-                     \"0,1,minecraft:potato:0,1\",\n-\n-                     //Dirt with iron mesh\n-                     \"0,2,minecraft:wheat_seeds,50\",\n-                     \"0,2,minecraft:oak_sapling,10\",\n-                     \"0,2,minecraft:birch_sapling,10\",\n-                     \"0,2,minecraft:spruce_sapling,10\",\n-                     \"0,2,minecraft:jungle_sapling,10\",\n-                     \"0,2,minecraft:pumpkin_seeds:0,1\",\n-                     \"0,2,minecraft:melon_seeds:0,1\",\n-                     \"0,2,minecraft:beetroot_seeds:0,1\",\n-                     \"0,2,minecraft:carrot,1\",\n-                     \"0,2,minecraft:potato,1\",\n-                     \"0,2,minecraft:dark_oak_sapling,1\",\n-                     \"0,2,minecraft:acacia_sapling,1\",\n-\n-                     //Dirt with diamond mesh\n-                     \"0,3,minecraft:wheat_seeds,25\",\n-                     \"0,3,minecraft:oak_sapling,10\",\n-                     \"0,3,minecraft:birch_sapling,10\",\n-                     \"0,3,minecraft:spruce_sapling,10\",\n-                     \"0,3,minecraft:jungle_sapling,10\",\n-                     \"0,3,minecraft:pumpkin_seeds:0,5\",\n-                     \"0,3,minecraft:melon_seeds:0,5\",\n-                     \"0,3,minecraft:beetroot_seeds:0,5\",\n-                     \"0,3,minecraft:carrot:0,5\",\n-                     \"0,3,minecraft:potato:0,5\",\n-                     \"0,3,minecraft:dark_oak_sapling,5\",\n-                     \"0,3,minecraft:acacia_sapling,5\",\n-\n-                     //Sand with string mesh\n-                     \"1,0,minecraft:cactus,2.5\",\n-                     \"1,0,minecraft:sugar_cane,2.5\",\n-\n-                     //Sand with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"1,1,minecraft:cactus,5\",\n-                     \"1,1,minecraft:sugar_cane,5\",\n-                     \"1,1,minecraft:gold_nugget,5\",\n-\n-                     //Sand with iron mesh\n-                     \"1,2,minecraft:cactus,10\",\n-                     \"1,2,minecraft:sugar_cane,10\",\n-                     \"1,2,minecraft:cocoa_beans,10\",\n-                     \"1,2,minecraft:gold_nugget,10\",\n-\n-                     //Sand with diamond mesh\n-                     \"1,3,minecraft:cactus,15\",\n-                     \"1,3,minecraft:sugar_cane,15\",\n-                     \"1,3,minecraft:cocoa_beans,15\",\n-                     \"1,3,minecraft:gold_nugget,15\",\n-\n-                     //Gravel with string mesh\n-                     \"2,0,minecraft:iron_nugget,5\",\n-                     \"2,0,minecraft:flint,5\",\n-                     \"2,0,minecraft:coal,5\",\n-\n-                     //Gravel with flint mesh\n-                     \"2,1,minecraft:redstone,10\",\n-                     \"2,1,minecraft:iron_nugget,10\",\n-                     \"2,1,minecraft:flint,10\",\n-                     \"2,1,minecraft:coal,10\",\n-\n-                     //Gravel with iron mesh\n-                     \"2,2,minecraft:redstone,15\",\n-                     \"2,2,minecraft:iron_nugget,15\",\n-                     \"2,2,minecraft:coal,15\",\n-                     \"2,2,minecraft:lapis_lazuli,5\",\n-                     \"2,2,minecraft:iron_ingot,1\",\n-                     \"2,2,minecraft:gold_ingot,1\",\n-                     \"2,2,minecraft:emerald,1\",\n-                     \"2,2,minecraft:diamond,1\",\n-\n-                     //Gravel with diamond mesh\n-                     \"2,3,minecraft:redstone,20\",\n-                     \"2,3,minecraft:coal,20\",\n-                     \"2,3,minecraft:lapis_lazuli,10\",\n-                     \"2,3,minecraft:iron_ingot,2.5\",\n-                     \"2,3,minecraft:gold_ingot,2.5\",\n-                     \"2,3,minecraft:emerald,2.5\",\n-                     \"2,3,minecraft:diamond,2.5\",\n-\n-                     //Soulsand with string mesh\n-                     \"3,0,minecraft:nether_wart,5\",\n-                     \"3,0,minecraft:quartz,5\",\n-\n-                     //Soulsand with flint mesh\n-                     \"3,1,minecraft:nether_wart,10\",\n-                     \"3,1,minecraft:quartz,10\",\n-                     \"3,1,minecraft:glowstone_dust,5\",\n-\n-                     //Soulsand with iron mesh\n-                     \"3,2,minecraft:nether_wart,10\",\n-                     \"3,2,minecraft:quartz,10\",\n-                     \"3,2,minecraft:glowstone_dust,10\",\n-                     \"3,2,minecraft:blaze_powder,1\",\n-                     \"3,2,minecraft:magma_cream,1\",\n-\n-                     //Soulsand with diamond mesh\n-                     \"3,3,minecraft:nether_wart,15\",\n-                     \"3,3,minecraft:quartz,15\",\n-                     \"3,3,minecraft:glowstone_dust,15\",\n-                     \"3,3,minecraft:blaze_powder,5\",\n-                     \"3,3,minecraft:magma_cream,5\",\n-                     \"3,3,minecraft:player_head,5\"),\n-          s -> s instanceof String);\n-\n-        listOfPlantables = defineList(builder, \"listofplantables\",\n-          Arrays.asList\n-                   (\"minecraft:sunflower\",\n-                     \"minecraft:lilac\",\n-                     \"minecraft:rose_bush\",\n-                     \"minecraft:peony\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:fern\",\n-                     \"small_flowers\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchantments = defineList(builder, \"enchantments\",\n-          Arrays.asList\n-                   (\n-                     \"1,minecraft:aqua_affinity,1,50\",\n-                     \"1,minecraft:bane_of_arthropods,1,50\",\n-                     \"1,minecraft:blast_protection,1,50\",\n-                     \"1,minecraft:depth_strider,1,50\",\n-                     \"1,minecraft:feather_falling,1,50\",\n-                     \"1,minecraft:fire_aspect,1,50\",\n-                     \"1,minecraft:fire_protection,1,50\",\n-                     \"1,minecraft:flame,1,50\",\n-                     \"1,minecraft:frost_walker,1,50\",\n-                     \"1,minecraft:knockback,1,50\",\n-                     \"1,minecraft:looting,1,50\",\n-                     \"1,minecraft:power,1,50\",\n-                     \"1,minecraft:projectile_protection,1,50\",\n-                     \"1,minecraft:protection,1,50\",\n-                     \"1,minecraft:punch,1,50\",\n-                     \"1,minecraft:respiration,1,50\",\n-                     \"1,minecraft:sharpness,1,50\",\n-                     \"1,minecraft:smite,1,50\",\n-                     \"1,minecraft:sweeping,1,50\",\n-                     \"1,minecraft:unbreaking,1,50\",\n-\n-                     \"2,minecraft:aqua_affinity,2,25\",\n-                     \"2,minecraft:bane_of_arthropods,2,25\",\n-                     \"2,minecraft:blast_protection,2,25\",\n-                     \"2,minecraft:depth_strider,2,25\",\n-                     \"2,minecraft:feather_falling,2,25\",\n-                     \"2,minecraft:fire_aspect,2,25\",\n-                     \"2,minecraft:fire_protection,2,25\",\n-                     \"2,minecraft:flame,2,25\",\n-                     \"2,minecraft:frost_walker,2,25\",\n-                     \"2,minecraft:knockback,2,25\",\n-                     \"2,minecraft:looting,2,25\",\n-                     \"2,minecraft:power,2,25\",\n-                     \"2,minecraft:projectile_protection,2,25\",\n-                     \"2,minecraft:protection,2,25\",\n-                     \"2,minecraft:punch,2,25\",\n-                     \"2,minecraft:respiration,2,25\",\n-                     \"2,minecraft:sharpness,2,25\",\n-                     \"2,minecraft:smite,2,25\",\n-                     \"2,minecraft:sweeping,2,25\",\n-                     \"2,minecraft:unbreaking,2,25\",\n-\n-                     \"3,minecraft:aqua_affinity,3,15\",\n-                     \"3,minecraft:bane_of_arthropods,3,15\",\n-                     \"3,minecraft:blast_protection,3,15\",\n-                     \"3,minecraft:depth_strider,3,15\",\n-                     \"3,minecraft:feather_falling,3,15\",\n-                     \"3,minecraft:fire_aspect,3,15\",\n-                     \"3,minecraft:fire_protection,3,15\",\n-                     \"3,minecraft:flame,3,15\",\n-                     \"3,minecraft:frost_walker,3,15\",\n-                     \"3,minecraft:knockback,3,15\",\n-                     \"3,minecraft:looting,3,15\",\n-                     \"3,minecraft:power,3,15\",\n-                     \"3,minecraft:projectile_protection,3,15\",\n-                     \"3,minecraft:protection,3,15\",\n-                     \"3,minecraft:punch,3,15\",\n-                     \"3,minecraft:respiration,3,15\",\n-                     \"3,minecraft:sharpness,3,15\",\n-                     \"3,minecraft:smite,3,15\",\n-                     \"3,minecraft:sweeping,3,15\",\n-                     \"3,minecraft:unbreaking,3,15\",\n-\n-                     \"4,minecraft:aqua_affinity,4,5\",\n-                     \"4,minecraft:bane_of_arthropods,4,5\",\n-                     \"4,minecraft:blast_protection,4,5\",\n-                     \"4,minecraft:depth_strider,4,5\",\n-                     \"4,minecraft:feather_falling,4,5\",\n-                     \"4,minecraft:fire_aspect,4,5\",\n-                     \"4,minecraft:fire_protection,4,5\",\n-                     \"4,minecraft:flame,4,5\",\n-                     \"4,minecraft:frost_walker,4,5\",\n-                     \"4,minecraft:infinity,1,5\",\n-                     \"4,minecraft:knockback,4,5\",\n-                     \"4,minecraft:looting,4,5\",\n-                     \"4,minecraft:power,4,5\",\n-                     \"4,minecraft:projectile_protection,4,5\",\n-                     \"4,minecraft:protection,4,5\",\n-                     \"4,minecraft:punch,4,5\",\n-                     \"4,minecraft:respiration,4,5\",\n-                     \"4,minecraft:sharpness,4,5\",\n-                     \"4,minecraft:smite,4,5\",\n-                     \"4,minecraft:sweeping,4,5\",\n-                     \"4,minecraft:unbreaking,4,5\",\n-\n-                     \"5,minecraft:aqua_affinity,5,1\",\n-                     \"5,minecraft:bane_of_arthropods,5,1\",\n-                     \"5,minecraft:blast_protection,5,1\",\n-                     \"5,minecraft:depth_strider,5,1\",\n-                     \"5,minecraft:feather_falling,5,1\",\n-                     \"5,minecraft:fire_aspect,5,1\",\n-                     \"5,minecraft:fire_protection,5,1\",\n-                     \"5,minecraft:flame,5,1\",\n-                     \"5,minecraft:frost_walker,5,1\",\n-                     \"5,minecraft:infinity,1,1\",\n-                     \"5,minecraft:knockback,5,1\",\n-                     \"5,minecraft:looting,5,1\",\n-                     \"5,minecraft:mending,1,1\",\n-                     \"5,minecraft:power,5,1\",\n-                     \"5,minecraft:projectile_protection,5,1\",\n-                     \"5,minecraft:protection,5,1\",\n-                     \"5,minecraft:punch,5,1\",\n-                     \"5,minecraft:respiration,5,1\",\n-                     \"5,minecraft:sharpness,5,1\",\n-                     \"5,minecraft:smite,5,1\",\n-                     \"5,minecraft:sweeping,5,1\",\n-                     \"5,minecraft:unbreaking,5,1\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchanterExperienceMultiplier = defineDouble(builder, \"enchanterexperiencemultiplier\", 2, 1, 10);\n-\n-        dynamicTreeHarvestSize = defineInteger(builder, \"dynamictreeharvestsize\", 5, 1, 5);\n-\n-        diseases = defineList(builder, \"diseases\",\n-          Arrays.asList(\"Influenza,100,minecraft:carrot,minecraft:potato\",\n-            \"Measles,10,minecraft:dandelion,minecraft:kelp,minecraft:poppy\",\n-            \"Smallpox,1,minecraft:honeycomb,minecraft:golden_apple\"),\n-          s -> s instanceof String);\n-\n-        swapToCategory(builder, \"pathfinding\");\n-\n-        minimumRailsToPath = defineInteger(builder, \"minimumrailstopath\", 5, 5, 100);\n-        pathfindingDebugDraw = defineBoolean(builder, \"pathfindingdebugdraw\", false);\n-        pathfindingDebugVerbosity = defineInteger(builder, \"pathfindingdebugverbosity\", 0, 0, 10);\n-        pathfindingMaxThreadCount = defineInteger(builder, \"pathfindingmaxthreadcount\", 2, 1, 10);\n-        pathfindingMaxNodes = defineInteger(builder, \"pathfindingmaxnodes\", 5000, 1, 10000);\n-\n-\n-        swapToCategory(builder, \"requestSystem\");\n-\n-        enableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n-        maximalRetries = defineInteger(builder, \"maximalretries\", 3, 1, 10);\n-        delayBetweenRetries = defineInteger(builder, \"delaybetweenretries\", 1200, 30, 10000);\n-        maximalBuildingsToGather = defineInteger(builder, \"maximalbuildingstogather\", 6, 1, 50);\n-        minimalBuildingsToGather = defineInteger(builder, \"minimalbuildingstogather\", 3, 1, 50);\n-        creativeResolve = defineBoolean(builder, \"creativeresolve\", false);\n-        canPlayerUseResetCommand = defineBoolean(builder, \"canplayeruseresetcommand\", false);\n-\n-        swapToCategory(builder, \"research\");\n-\n-        tactictraining = defineList(builder, \"tactictraining\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        improvedswords = defineList(builder, \"improvedswords\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        squiretraining = defineList(builder, \"squiretraining\",\n-          Collections.singletonList(\"minecraft:shield*4\"),\n-          s -> s instanceof String);\n-        knighttraining = defineList(builder, \"knighttraining\",\n-          Collections.singletonList(\"minecraft:shield*8\"),\n-          s -> s instanceof String);\n-        captaintraining = defineList(builder, \"captaintraining\",\n-          Collections.singletonList(\"minecraft:shield*16\"),\n-          s -> s instanceof String);\n-        captainoftheguard = defineList(builder, \"captainoftheguard\",\n-          Collections.singletonList(\"minecraft:shield*27\"),\n-          s -> s instanceof String);\n-\n-        improvedbows = defineList(builder, \"improvedbows\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        tickshot = defineList(builder, \"tickshot\",\n-          Collections.singletonList(\"minecraft:bow*5\"),\n-          s -> s instanceof String);\n-        multishot = defineList(builder, \"multishot\",\n-          Collections.singletonList(\"minecraft:bow*9\"),\n-          s -> s instanceof String);\n-        rapidshot = defineList(builder, \"rapidshot\",\n-          Collections.singletonList(\"minecraft:bow*18\"),\n-          s -> s instanceof String);\n-        masterbowman = defineList(builder, \"masterbowman\",\n-          Collections.singletonList(\"minecraft:bow*27\"),\n-          s -> s instanceof String);\n-\n-        avoidance = defineList(builder, \"avoidance\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        parry = defineList(builder, \"parry\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        repost = defineList(builder, \"repost\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        duelist = defineList(builder, \"duelist\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        provost = defineList(builder, \"provost\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        masterswordsman = defineList(builder, \"masterswordsman\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        dodge = defineList(builder, \"dodge\",\n-          Collections.singletonList(\"minecraft:leather*16\"),\n-          s -> s instanceof String);\n-        improveddodge = defineList(builder, \"improveddodge\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        evasion = defineList(builder, \"evasion\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        improvedevasion = defineList(builder, \"improvedevasion\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        agilearcher = defineList(builder, \"agilearcher\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.improvedleather = defineList(builder, \"improvedleather\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        this.boiledleather = defineList(builder, \"boiledleather\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        this.ironskin = defineList(builder, \"ironskin\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        this.ironarmour = defineList(builder, \"ironarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        this.steelarmour = defineList(builder, \"steelarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.diamondskin = defineList(builder, \"diamondskin\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.regeneration = defineList(builder, \"regeneration\",\n-          Collections.singletonList(\"minecraft:emerald*1\"),\n-          s -> s instanceof String);\n-\n-        this.feint = defineList(builder, \"feint\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.fear = defineList(builder, \"fear\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.retreat = defineList(builder, \"retreat\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.fullretreat = defineList(builder, \"fullretreat\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.avoid = defineList(builder, \"avoid\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.evade = defineList(builder, \"evade\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.flee = defineList(builder, \"flee\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.hotfoot = defineList(builder, \"hotfoot\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.accuracy = defineList(builder, \"accuracy\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.quickdraw = defineList(builder, \"quickdraw\",\n-          Collections.singletonList(\"minecraft:iron_block*2\"),\n-          s -> s instanceof String);\n-        this.powerattack = defineList(builder, \"powerattack\",\n-          Collections.singletonList(\"minecraft:iron_block*4\"),\n-          s -> s instanceof String);\n-        this.cleave = defineList(builder, \"cleave\",\n-          Collections.singletonList(\"minecraft:iron_block*8\"),\n-          s -> s instanceof String);\n-        this.mightycleave = defineList(builder, \"mightycleave\",\n-          Collections.singletonList(\"minecraft:iron_block*16\"),\n-          s -> s instanceof String);\n-        this.whirlwind = defineList(builder, \"whirlwind\",\n-          Collections.singletonList(\"minecraft:iron_block*32\"),\n-          s -> s instanceof String);\n-\n-        this.preciseshot = defineList(builder, \"preciseshot\",\n-          Collections.singletonList(\"minecraft:flint*16\"),\n-          s -> s instanceof String);\n-        this.penetratingshot = defineList(builder, \"penetratingshot\",\n-          Collections.singletonList(\"minecraft:flint*32\"),\n-          s -> s instanceof String);\n-        this.piercingshot = defineList(builder, \"piercingshot\",\n-          Collections.singletonList(\"minecraft:flint*64\"),\n-          s -> s instanceof String);\n-        this.woundingshot = defineList(builder, \"woundingshot\",\n-          Collections.singletonList(\"minecraft:flint*128\"),\n-          s -> s instanceof String);\n-        this.deadlyaim = defineList(builder, \"deadlyaim\",\n-          Collections.singletonList(\"minecraft:flint*256\"),\n-          s -> s instanceof String);\n-\n-        this.higherlearning = defineList(builder, \"higherlearning\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-\n-        this.morebooks = defineList(builder, \"morebooks\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.bookworm = defineList(builder, \"bookworm\",\n-          Collections.singletonList(\"minecraft:bookshelf*6\"),\n-          s -> s instanceof String);\n-        this.bachelor = defineList(builder, \"bachelor\",\n-          Collections.singletonList(\"minecraft:bookshelf*12\"),\n-          s -> s instanceof String);\n-        this.master = defineList(builder, \"master\",\n-          Collections.singletonList(\"minecraft:bookshelf*32\"),\n-          s -> s instanceof String);\n-        this.phd = defineList(builder, \"phd\",\n-          Collections.singletonList(\"minecraft:bookshelf*64\"),\n-          s -> s instanceof String);\n-\n-        this.nurture = defineList(builder, \"nurture\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*32\"),\n-          s -> s instanceof String);\n-        this.hormones = defineList(builder, \"hormones\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*64\"),\n-          s -> s instanceof String);\n-        this.puberty = defineList(builder, \"puberty\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*128\"),\n-          s -> s instanceof String);\n-        this.growth = defineList(builder, \"growth\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*256\"),\n-          s -> s instanceof String);\n-        this.beanstalk = defineList(builder, \"beanstalk\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*512\"),\n-          s -> s instanceof String);\n-\n-        this.keen = defineList(builder, \"keen\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-        this.outpost = defineList(builder, \"outpost\",\n-          Collections.singletonList(\"minecraft:cooked_beef*64\"),\n-          s -> s instanceof String);\n-        this.hamlet = defineList(builder, \"hamlet\",\n-          Collections.singletonList(\"minecraft:cooked_beef*128\"),\n-          s -> s instanceof String);\n-        this.village = defineList(builder, \"village\",\n-          Collections.singletonList(\"minecraft:cooked_beef*256\"),\n-          s -> s instanceof String);\n-        this.city = defineList(builder, \"city\",\n-          Collections.singletonList(\"minecraft:cooked_beef*512\"),\n-          s -> s instanceof String);\n-\n-        this.diligent = defineList(builder, \"diligent\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.studious = defineList(builder, \"studious\",\n-          Collections.singletonList(\"minecraft:book*12\"),\n-          s -> s instanceof String);\n-        this.scholarly = defineList(builder, \"scholarly\",\n-          Collections.singletonList(\"minecraft:book*24\"),\n-          s -> s instanceof String);\n-        this.reflective = defineList(builder, \"reflective\",\n-          Collections.singletonList(\"minecraft:book*48\"),\n-          s -> s instanceof String);\n-        this.academic = defineList(builder, \"academic\",\n-          Collections.singletonList(\"minecraft:book*128\"),\n-          s -> s instanceof String);\n-\n-        this.rails = defineList(builder, \"rails\",\n-          Collections.singletonList(\"minecraft:rail*64\"),\n-          s -> s instanceof String);\n-        this.nimble = defineList(builder, \"nimble\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*1\"),\n-          s -> s instanceof String);\n-        this.agile = defineList(builder, \"agile\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*10\"),\n-          s -> s instanceof String);\n-        this.swift = defineList(builder, \"swift\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*32\"),\n-          s -> s instanceof String);\n-        this.athlete = defineList(builder, \"athlete\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*64\"),\n-          s -> s instanceof String);\n-\n-        this.stamina = defineList(builder, \"stamina\",\n-          Collections.singletonList(\"minecraft:carrot*1\"),\n-          s -> s instanceof String);\n-\n-        this.resistance = defineList(builder, \"resistance\",\n-          Collections.singletonList(\"minecraft:golden_apple*1\"),\n-          s -> s instanceof String);\n-        this.resilience = defineList(builder, \"resilience\",\n-          Collections.singletonList(\"minecraft:golden_apple*8\"),\n-          s -> s instanceof String);\n-        this.vitality = defineList(builder, \"vitality\",\n-          Collections.singletonList(\"minecraft:golden_apple*16\"),\n-          s -> s instanceof String);\n-        this.fortitude = defineList(builder, \"fortitude\",\n-          Collections.singletonList(\"minecraft:golden_apple*32\"),\n-          s -> s instanceof String);\n-        this.indefatigability = defineList(builder, \"indefatigability\",\n-          Collections.singletonList(\"minecraft:golden_apple*64\"),\n-          s -> s instanceof String);\n-\n-        this.bandaid = defineList(builder, \"bandaid\",\n-          Collections.singletonList(\"minecraft:golden_carrot*1\"),\n-          s -> s instanceof String);\n-        this.healingcream = defineList(builder, \"healingcream\",\n-          Collections.singletonList(\"minecraft:golden_carrot*8\"),\n-          s -> s instanceof String);\n-        this.bandages = defineList(builder, \"bandages\",\n-          Collections.singletonList(\"minecraft:golden_carrot*16\"),\n-          s -> s instanceof String);\n-        this.compress = defineList(builder, \"compress\",\n-          Collections.singletonList(\"minecraft:golden_carrot*32\"),\n-          s -> s instanceof String);\n-        this.cast = defineList(builder, \"cast\",\n-          Collections.singletonList(\"minecraft:golden_carrot*64\"),\n-          s -> s instanceof String);\n-\n-        this.gourmand = defineList(builder, \"gourmand\",\n-          Collections.singletonList(\"minecraft:cookie*32\"),\n-          s -> s instanceof String);\n-        this.gorger = defineList(builder, \"gorger\",\n-          Collections.singletonList(\"minecraft:cookie*64\"),\n-          s -> s instanceof String);\n-        this.stuffer = defineList(builder, \"stuffer\",\n-          Collections.singletonList(\"minecraft:cookie*128\"),\n-          s -> s instanceof String);\n-        this.epicure = defineList(builder, \"epicure\",\n-          Collections.singletonList(\"minecraft:cookie*256\"),\n-          s -> s instanceof String);\n-        this.glutton = defineList(builder, \"glutton\",\n-          Collections.singletonList(\"minecraft:cookie*512\"),\n-          s -> s instanceof String);\n-\n-        this.circus = defineList(builder, \"circus\",\n-          Collections.singletonList(\"minecraft:cake*1\"),\n-          s -> s instanceof String);\n-        this.festival = defineList(builder, \"festival\",\n-          Collections.singletonList(\"minecraft:cake*9\"),\n-          s -> s instanceof String);\n-        this.spectacle = defineList(builder, \"spectacle\",\n-          Collections.singletonList(\"minecraft:cake*18\"),\n-          s -> s instanceof String);\n-        this.opera = defineList(builder, \"opera\",\n-          Collections.singletonList(\"minecraft:cake*27\"),\n-          s -> s instanceof String);\n-        this.theater = defineList(builder, \"theater\",\n-          Collections.singletonList(\"minecraft:enchanted_golden_apple*16\"),\n-          s -> s instanceof String);\n-\n-        this.firstaid = defineList(builder, \"firstaid\",\n-          Collections.singletonList(\"minecraft:hay_block*8\"),\n-          s -> s instanceof String);\n-        this.firstaid2 = defineList(builder, \"firstaid2\",\n-          Collections.singletonList(\"minecraft:hay_block*16\"),\n-          s -> s instanceof String);\n-        this.livesaver = defineList(builder, \"livesaver\",\n-          Collections.singletonList(\"minecraft:hay_block*32\"),\n-          s -> s instanceof String);\n-        this.livesaver2 = defineList(builder, \"livesaver2\",\n-          Collections.singletonList(\"minecraft:hay_block*64\"),\n-          s -> s instanceof String);\n-        this.guardianangel = defineList(builder, \"guardianangel\",\n-          Collections.singletonList(\"minecraft:hay_block*128\"),\n-          s -> s instanceof String);\n-        this.guardianangel2 = defineList(builder, \"guardianangel2\",\n-          Collections.singletonList(\"minecraft:hay_block*256\"),\n-          s -> s instanceof String);\n-\n-        whatyaneed = defineList(builder, \"whatyaneed\",\n-          Collections.singletonList(\"minecraft:redstone*64\"),\n-          s -> s instanceof String);\n-        stringwork = defineList(builder, \"stringwork\",\n-          Collections.singletonList(\"minecraft:string*16\"),\n-          s -> s instanceof String);\n-        thoselungs = defineList(builder, \"thoselungs\",\n-          Collections.singletonList(\"minecraft:glass*64\"),\n-          s -> s instanceof String);\n-        rainbowheaven = defineList(builder, \"rainbowheaven\",\n-          Collections.singletonList(\"minecraft:poppy*64\"),\n-          s -> s instanceof String);\n-\n-        this.veinminer = defineList(builder, \"veinminer\",\n-          Collections.singletonList(\"minecraft:iron_ore*32\"),\n-          s -> s instanceof String);\n-        this.goodveins = defineList(builder, \"goodveins\",\n-          Collections.singletonList(\"minecraft:iron_ore*64\"),\n-          s -> s instanceof String);\n-        this.richveins = defineList(builder, \"richveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*32\"),\n-          s -> s instanceof String);\n-        this.amazingveins = defineList(builder, \"amazingveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*64\"),\n-          s -> s instanceof String);\n-        this.motherlode = defineList(builder, \"motherlode\",\n-          Collections.singletonList(\"minecraft:diamond_ore*64\"),\n-          s -> s instanceof String);\n-\n-        this.ability = defineList(builder, \"ability\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.skills = defineList(builder, \"skills\",\n-          Collections.singletonList(\"minecraft:iron_ingot*128\"),\n-          s -> s instanceof String);\n-        this.tools = defineList(builder, \"tools\",\n-          Collections.singletonList(\"minecraft:iron_ingot*256\"),\n-          s -> s instanceof String);\n-        this.seemsautomatic = defineList(builder, \"seemsautomatic\",\n-          Collections.singletonList(\"minecraft:iron_ingot*512\"),\n-          s -> s instanceof String);\n-        this.madness = defineList(builder, \"madness\",\n-          Collections.singletonList(\"minecraft:iron_ingot*1024\"),\n-          s -> s instanceof String);\n-\n-        this.hittingiron = defineList(builder, \"hittingiron\",\n-          Collections.singletonList(\"minecraft:anvil*1\"),\n-          s -> s instanceof String);\n-        this.stonecake = defineList(builder, \"stonecake\",\n-          Collections.singletonList(\"minecraft:chiseled_stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.hardened = defineList(builder, \"hardened\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        this.reinforced = defineList(builder, \"reinforced\",\n-          Collections.singletonList(\"minecraft:diamond*32\"),\n-          s -> s instanceof String);\n-        this.steelbracing = defineList(builder, \"steelbracing\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-        this.diamondcoated = defineList(builder, \"diamondcoated\",\n-          Collections.singletonList(\"minecraft:diamond*128\"),\n-          s -> s instanceof String);\n-\n-        this.memoryaid = defineList(builder, \"memoryaid\",\n-          Collections.singletonList(\"minecraft:paper*32\"),\n-          s -> s instanceof String);\n-        this.cheatsheet = defineList(builder, \"cheatsheet\",\n-          Collections.singletonList(\"minecraft:paper*64\"),\n-          s -> s instanceof String);\n-        this.recipebook = defineList(builder, \"recipebook\",\n-          Collections.singletonList(\"minecraft:paper*128\"),\n-          s -> s instanceof String);\n-        this.rtm = defineList(builder, \"rtm\",\n-          Collections.singletonList(\"minecraft:paper*256\"),\n-          s -> s instanceof String);\n-        this.rainman = defineList(builder, \"rainman\",\n-          Collections.singletonList(\"minecraft:salmon_bucket*27\"),\n-          s -> s instanceof String);\n-\n-        this.woodwork = defineList(builder, \"woodwork\",\n-          Collections.singletonList(\"minecraft:oak_planks*64\"),\n-          s -> s instanceof String);\n-        this.sieving = defineList(builder, \"sieving\",\n-          Collections.singletonList(\"minecraft:string*64\"),\n-          s -> s instanceof String);\n-        this.space = defineList(builder, \"space\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*16\"),\n-          s -> s instanceof String);\n-        this.capacity = defineList(builder, \"capacity\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*32\"),\n-          s -> s instanceof String);\n-        this.fullstock = defineList(builder, \"fullstock\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*64\"),\n-          s -> s instanceof String);\n-\n-        this.theflintstones = defineList(builder, \"theflintstones\",\n-          Collections.singletonList(\"minecraft:stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.rockingroll = defineList(builder, \"rockingroll\",\n-          Collections.singletonList(\"minecraft:stone*64\"),\n-          s -> s instanceof String);\n-\n-        this.hot = defineList(builder, \"hot\",\n-          Collections.singletonList(\"minecraft:lava_bucket*4\"),\n-          s -> s instanceof String);\n-        this.isthisredstone = defineList(builder, \"isthisredstone\",\n-          Collections.singletonList(\"minecraft:redstone*128\"),\n-          s -> s instanceof String);\n-        this.redstonepowered = defineList(builder, \"redstonepowered\",\n-          Collections.singletonList(\"minecraft:redstone*256\"),\n-          s -> s instanceof String);\n-        this.heavymachinery = defineList(builder, \"heavymachinery\",\n-          Collections.singletonList(\"minecraft:redstone*512\"),\n-          s -> s instanceof String);\n-        this.whatisthisspeed = defineList(builder, \"whatisthisspeed\",\n-          Collections.singletonList(\"minecraft:redstone*1024\"),\n-          s -> s instanceof String);\n-        this.lightning = defineList(builder, \"lightning\",\n-          Collections.singletonList(\"minecraft:redstone*2048\"),\n-          s -> s instanceof String);\n-\n-        this.biodegradable = defineList(builder, \"biodegradable\",\n-          Collections.singletonList(\"minecraft:bone_meal*64\"),\n-          s -> s instanceof String);\n-        this.flowerpower = defineList(builder, \"flowerpower\",\n-          Collections.singletonList(\"minecolonies:compost*64\"),\n-          s -> s instanceof String);\n-\n-        this.letitgrow = defineList(builder, \"letitgrow\",\n-          Collections.singletonList(\"minecolonies:compost*16\"),\n-          s -> s instanceof String);\n-\n-        this.bonemeal = defineList(builder, \"bonemeal\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*64\"),\n-          s -> s instanceof String);\n-        this.dung = defineList(builder, \"dung\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*128\"),\n-          s -> s instanceof String);\n-        this.compost = defineList(builder, \"compost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*256\"),\n-          s -> s instanceof String);\n-        this.fertilizer = defineList(builder, \"fertilizer\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*512\"),\n-          s -> s instanceof String);\n-        this.magiccompost = defineList(builder, \"magiccompost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*2048\"),\n-          s -> s instanceof String);\n-\n-        this.loaded = defineList(builder, \"loaded\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-        this.heavilyloaded = defineList(builder, \"heavilyloaded\",\n-          Collections.singletonList(\"minecraft:emerald*128\"),\n-          s -> s instanceof String);\n-        this.deeppockets = defineList(builder, \"deeppockets\",\n-          Collections.singletonList(\"minecraft:emerald*256\"),\n-          s -> s instanceof String);\n-\n-        List<String> tauntCosts = new ArrayList<String>();\n-        tauntCosts.add(\"minecraft:rotten_flesh*8\");\n-        tauntCosts.add(\"minecraft:bone*8\");\n-        tauntCosts.add(\"minecraft:spider_eye*8\");\n-        taunt = defineList(builder, \"taunt\",\n-          tauntCosts,\n-          s -> s instanceof String);\n-\n-        this.gildedhammer = defineList(builder, \"gildedhammer\",\n-          Arrays.asList(\"minecraft:gravel*64\", \"minecraft:sand*64\", \"minecraft:clay*64\"),\n-          s -> s instanceof String);\n-        this.doubletrouble = defineList(builder, \"doubletrouble\",\n-          Arrays.asList(\"minecraft:bamboo*64\", \"minecraft:sugar_cane*64\", \"minecraft:cactus*64\"),\n-          s -> s instanceof String);\n-        this.hotboots = defineList(builder, \"hotboots\",\n-          Arrays.asList(\"minecraft:leather*32\", \"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.pavetheroad = defineList(builder, \"pavetheroad\",\n-          Collections.singletonList(\"minecraft:white_concrete*32\"),\n-          s -> s instanceof String);\n-\n-        finishCategory(builder);\n-    }\n-}\n", "next_change": {"commit": "25931682555c4095f1dddee973e3eb19be364b52", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nnew file mode 100644\nindex 0000000000..608c14790b\n--- /dev/null\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -0,0 +1,20 @@\n+package com.minecolonies.api.configuration;\n+\n+import net.minecraftforge.common.ForgeConfigSpec;\n+\n+public class CommonConfiguration extends AbstractConfiguration\n+{\n+    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n+\n+    /**\n+     * Builds client configuration.\n+     *\n+     * @param builder config builder\n+     */\n+    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n+    {\n+        createCategory(builder, \"gameplay\");\n+        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n+        finishCategory(builder);\n+    }\n+}\n", "next_change": {"commit": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex 608c14790b..f235a068b9 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -16,5 +17,9 @@ public class CommonConfiguration extends AbstractConfiguration\n         createCategory(builder, \"gameplay\");\n         generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n         finishCategory(builder);\n+\n+        createCategory(builder, \"requestsystem\");\n+        rsEnableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n+        finishCategory(builder);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nold mode 100644\nnew mode 100755\nindex 052ee6c9d6..9a6b893f35\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -431,27 +439,27 @@ public class CommonConfiguration extends AbstractConfiguration\n         shouldRaidersBreakDoors = defineBoolean(builder, \"shouldraiderbreakdoors\", true);\n         citizenCallForHelp = defineBoolean(builder, \"citizencallforhelp\", true);\n         rangerEnchants = defineBoolean(builder, \"rangerenchants\", true);\n-        rangerDamageMult = defineDouble(builder,  \"rangerdamagemult\", 1.0, 0.1, 5.0);\n-        knightDamageMult = defineDouble(builder,  \"knightdamagemult\", 1.0, 0.1, 5.0);\n-        guardHealthMult = defineDouble(builder,  \"guardhealthmult\", 1.0, 0.1, 5.0);\n-        pvp_mode = defineBoolean(builder,   \"pvp_mode\", false);\n-        daysUntilPirateshipsDespawn = defineInteger(builder,  \"daysuntilpirateshipsdespawn\", 3, 1, 10);\n-        maxYForBarbarians = defineInteger(builder,  \"maxyforbarbarians\", 200, 1, 500);\n+        rangerDamageMult = defineDouble(builder, \"rangerdamagemult\", 1.0, 0.1, 5.0);\n+        knightDamageMult = defineDouble(builder, \"knightdamagemult\", 1.0, 0.1, 5.0);\n+        guardHealthMult = defineDouble(builder, \"guardhealthmult\", 1.0, 0.1, 5.0);\n+        pvp_mode = defineBoolean(builder, \"pvp_mode\", false);\n+        daysUntilPirateshipsDespawn = defineInteger(builder, \"daysuntilpirateshipsdespawn\", 3, 1, 10);\n+        maxYForBarbarians = defineInteger(builder, \"maxyforbarbarians\", 200, 1, 500);\n \n         swapToCategory(builder, \"permissions\");\n \n-        enableColonyProtection = defineBoolean(builder,  \"enablecolonyprotection\", true);\n+        enableColonyProtection = defineBoolean(builder, \"enablecolonyprotection\", true);\n         turnOffExplosionsInColonies = defineBoolean(builder, \"turnoffexplosionsincolonies\", true);\n         specialPermGroup = defineList(builder, \"specialpermgroup\",\n           Arrays.asList\n-                   (\"_Raycoms_\" ),\n+                   (\"_Raycoms_\"),\n           s -> s instanceof String);\n         freeToInteractBlocks = defineList(builder, \"freetointeractblocks\",\n           Arrays.asList\n                    (\"dirt\",\n-                     \"0 0 0\" ),\n+                     \"0 0 0\"),\n           s -> s instanceof String);\n-        secondsBetweenPermissionMessages = defineInteger(builder, \"secondsBetweenPermissionMessages\",  30, 1, 1000);\n+        secondsBetweenPermissionMessages = defineInteger(builder, \"secondsBetweenPermissionMessages\", 30, 1, 1000);\n \n \n         swapToCategory(builder, \"compatibility\");\n", "next_change": {"commit": "bae35a3bd512cdc2e84ada26043126a2c139b990", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\ndeleted file mode 100755\nindex 9a6b893f35..0000000000\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ /dev/null\n", "chunk": "@@ -1,1338 +0,0 @@\n-package com.minecolonies.api.configuration;\n-\n-import net.minecraftforge.common.ForgeConfigSpec;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static com.minecolonies.api.util.constant.Constants.*;\n-\n-/**\n- * Mod common configuration. Loaded everywhere, not synced.\n- */\n-public class CommonConfiguration extends AbstractConfiguration\n-{\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Gameplay settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     initialCitizenAmount;\n-    public final ForgeConfigSpec.BooleanValue builderPlaceConstructionTape;\n-    public final ForgeConfigSpec.BooleanValue playerGetsGuidebookOnFirstJoin;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteSupplyChests;\n-    public final ForgeConfigSpec.BooleanValue allowInfiniteColonies;\n-    public final ForgeConfigSpec.BooleanValue allowOtherDimColonies;\n-    public final ForgeConfigSpec.IntValue     citizenRespawnInterval;\n-    public final ForgeConfigSpec.IntValue     maxCitizenPerColony;\n-    public final ForgeConfigSpec.BooleanValue builderInfiniteResources;\n-    public final ForgeConfigSpec.BooleanValue limitToOneWareHousePerColony;\n-    public final ForgeConfigSpec.IntValue     builderBuildBlockDelay;\n-    public final ForgeConfigSpec.IntValue     blockMiningDelayModifier;\n-    public final ForgeConfigSpec.IntValue     maxBlocksCheckedByBuilder;\n-    public final ForgeConfigSpec.IntValue     chatFrequency;\n-    public final ForgeConfigSpec.BooleanValue enableInDevelopmentFeatures;\n-    public final ForgeConfigSpec.BooleanValue alwaysRenderNameTag;\n-    public final ForgeConfigSpec.DoubleValue  growthModifier;\n-    public final ForgeConfigSpec.BooleanValue workersAlwaysWorkInRain;\n-    public final ForgeConfigSpec.BooleanValue sendEnteringLeavingMessages;\n-    public final ForgeConfigSpec.BooleanValue allowPlayerSchematics;\n-    public final ForgeConfigSpec.IntValue     allowGlobalNameChanges;\n-    public final ForgeConfigSpec.BooleanValue holidayFeatures;\n-    public final ForgeConfigSpec.IntValue     updateRate;\n-    public final ForgeConfigSpec.IntValue     dirtFromCompost;\n-    public final ForgeConfigSpec.IntValue     luckyBlockChance;\n-    public final ForgeConfigSpec.BooleanValue fixOrphanedChunks;\n-    public final ForgeConfigSpec.BooleanValue restrictBuilderUnderground;\n-    public final ForgeConfigSpec.DoubleValue  fisherSpongeChance;\n-    public final ForgeConfigSpec.IntValue     minThLevelToTeleport;\n-    public final ForgeConfigSpec.BooleanValue suggestBuildToolPlacement;\n-    public final ForgeConfigSpec.DoubleValue  foodModifier;\n-    public final ForgeConfigSpec.BooleanValue disableCitizenVoices;\n-    public final ForgeConfigSpec.IntValue     diseaseModifier;\n-    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Command settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     teleportBuffer;\n-    public final ForgeConfigSpec.IntValue     opLevelForServer;\n-    public final ForgeConfigSpec.IntValue     autoDeleteColoniesInHours;\n-    public final ForgeConfigSpec.BooleanValue autoDestroyColonyBlocks;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseRTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseColonyTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAllyTHTeleport;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseHomeTPCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseShowColonyInfoCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseKillCitizensCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseAddOfficerCommand;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseDeleteColonyCommand;\n-    public final ForgeConfigSpec.IntValue     numberOfAttemptsForSafeTP;\n-\n-    /*  --------------------------------------------------------------------------- *\n-     *  ------------------- ######## Claim settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.IntValue     maxColonySize;\n-    public final ForgeConfigSpec.IntValue     minColonyDistance;\n-    public final ForgeConfigSpec.IntValue     initialColonySize;\n-    public final ForgeConfigSpec.BooleanValue restrictColonyPlacement;\n-    public final ForgeConfigSpec.IntValue     maxDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.IntValue     minDistanceFromWorldSpawn;\n-    public final ForgeConfigSpec.BooleanValue protectVillages;\n-    public final ForgeConfigSpec.BooleanValue officersReceiveAdvancements;\n-\n-    /*  ------------------------------------------------------------------------- *\n-     *  ------------------- ######## Combat Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue doBarbariansSpawn;\n-    public final ForgeConfigSpec.IntValue     barbarianHordeDifficulty;\n-    public final ForgeConfigSpec.IntValue     spawnBarbarianSize;\n-    public final ForgeConfigSpec.IntValue     maxBarbarianSize;\n-    public final ForgeConfigSpec.BooleanValue doBarbariansBreakThroughWalls;\n-    public final ForgeConfigSpec.IntValue     averageNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.IntValue     minimumNumberOfNightsBetweenRaids;\n-    public final ForgeConfigSpec.BooleanValue shouldRaidersBreakDoors;\n-    public final ForgeConfigSpec.BooleanValue mobAttackCitizens;\n-    public final ForgeConfigSpec.BooleanValue citizenCallForHelp;\n-    public final ForgeConfigSpec.BooleanValue rangerEnchants;\n-    public final ForgeConfigSpec.DoubleValue  rangerDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  knightDamageMult;\n-    public final ForgeConfigSpec.DoubleValue  guardHealthMult;\n-    public final ForgeConfigSpec.BooleanValue pvp_mode;\n-    public final ForgeConfigSpec.IntValue     daysUntilPirateshipsDespawn;\n-    public final ForgeConfigSpec.IntValue     maxYForBarbarians;\n-\n-    /*  ----------------------------------------------------------------------------- *\n-     *  ------------------- ######## Permission Settings ######## ------------------- *\n-     *  ----------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue                        enableColonyProtection;\n-    public final ForgeConfigSpec.BooleanValue                        turnOffExplosionsInColonies;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> specialPermGroup;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> freeToInteractBlocks;\n-    public final ForgeConfigSpec.IntValue                            secondsBetweenPermissionMessages;\n-\n-    /*  -------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Compatibility Settings ######## ------------------- *\n-     *  -------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> extraOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardResourceLocations;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> configListStudyItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfCompostableItems;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> luckyOres;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> crusherProduction;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterMeshes;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> siftableBlocks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sifterDrops;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> listOfPlantables;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> enchantments;\n-    public final ForgeConfigSpec.DoubleValue                         enchanterExperienceMultiplier;\n-    public final ForgeConfigSpec.IntValue                            dynamicTreeHarvestSize;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diseases;\n-\n-\n-    /*  ------------------------------------------------------------------------------ *\n-     *  ------------------- ######## Pathfinding Settings ######## ------------------- *\n-     *  ------------------------------------------------------------------------------ */\n-\n-    public final ForgeConfigSpec.BooleanValue pathfindingDebugDraw;\n-    public final ForgeConfigSpec.IntValue     pathfindingDebugVerbosity;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxThreadCount;\n-    public final ForgeConfigSpec.IntValue     pathfindingMaxNodes;\n-    public final ForgeConfigSpec.IntValue     minimumRailsToPath;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Request System Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.BooleanValue enableDebugLogging;\n-    public final ForgeConfigSpec.IntValue     maximalRetries;\n-    public final ForgeConfigSpec.IntValue     delayBetweenRetries;\n-    public final ForgeConfigSpec.IntValue     maximalBuildingsToGather;\n-    public final ForgeConfigSpec.IntValue     minimalBuildingsToGather;\n-    public final ForgeConfigSpec.BooleanValue creativeResolve;\n-    public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n-\n-    /*  --------------------------------------------------------------------------------- *\n-     *  ------------------- ######## Research Settings ######## ------------------- *\n-     *  --------------------------------------------------------------------------------- */\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tactictraining;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedswords;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> squiretraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> knighttraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captaintraining;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> captainoftheguard;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedbows;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tickshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> multishot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rapidshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterbowman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoidance;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> parry;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> repost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> duelist;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> provost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> masterswordsman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> taunt;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improveddodge;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedevasion;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agilearcher;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> improvedleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> boiledleather;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironskin;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ironarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelarmour;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondskin;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> regeneration;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> avoid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> evade;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flee;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotfoot;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> feint;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fear;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> retreat;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullretreat;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> accuracy;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> quickdraw;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> powerattack;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> mightycleave;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whirlwind;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> preciseshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> penetratingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> piercingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woundingshot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deadlyaim;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> higherlearning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> morebooks;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bookworm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bachelor;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> master;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> phd;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nurture;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hormones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> puberty;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> growth;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> beanstalk;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> keen;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> outpost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hamlet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> village;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> city;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diligent;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> studious;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> scholarly;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reflective;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> academic;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rails;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> nimble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> agile;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> swift;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> athlete;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stamina;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resistance;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> resilience;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> vitality;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fortitude;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> indefatigability;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> healingcream;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bandages;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compress;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cast;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gourmand;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gorger;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stuffer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> epicure;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> glutton;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> circus;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> festival;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> spectacle;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> opera;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theater;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> firstaid2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> livesaver2;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> guardianangel2;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatyaneed;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stringwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> thoselungs;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainbowheaven;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> veinminer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> goodveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> richveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> amazingveins;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> motherlode;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> ability;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> skills;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tools;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> seemsautomatic;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> madness;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hittingiron;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> stonecake;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hardened;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> reinforced;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> steelbracing;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> diamondcoated;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> memoryaid;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> cheatsheet;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> recipebook;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rtm;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rainman;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> woodwork;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> sieving;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> space;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> capacity;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fullstock;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> theflintstones;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> rockingroll;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hot;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> isthisredstone;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> redstonepowered;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavymachinery;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> whatisthisspeed;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> biodegradable;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> flowerpower;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> letitgrow;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> bonemeal;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> dung;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> compost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> fertilizer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> magiccompost;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> lightning;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> deeppockets;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> loaded;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> heavilyloaded;\n-\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> gildedhammer;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> doubletrouble;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> hotboots;\n-    public final ForgeConfigSpec.ConfigValue<List<? extends String>> pavetheroad;\n-\n-    /**\n-     * Builds common configuration.\n-     *\n-     * @param builder config builder\n-     */\n-    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n-    {\n-        createCategory(builder, \"gameplay\");\n-\n-        initialCitizenAmount = defineInteger(builder, \"initialcitizenamount\", 4, 1, 10);\n-        builderPlaceConstructionTape = defineBoolean(builder, \"builderplaceconstructiontape\", true);\n-        playerGetsGuidebookOnFirstJoin = defineBoolean(builder, \"playergetsguidebookonfirstjoin\", true);\n-        allowInfiniteSupplyChests = defineBoolean(builder, \"allowinfinitesupplychests\", false);\n-        allowInfiniteColonies = defineBoolean(builder, \"allowinfinitecolonies\", false);\n-        allowOtherDimColonies = defineBoolean(builder, \"allowotherdimcolonies\", false);\n-        citizenRespawnInterval = defineInteger(builder, \"citizenrespawninterval\", 60, CITIZEN_RESPAWN_INTERVAL_MIN, CITIZEN_RESPAWN_INTERVAL_MAX);\n-        maxCitizenPerColony = defineInteger(builder, \"maxcitizenpercolony\", 75, 4, 500);\n-        builderInfiniteResources = defineBoolean(builder, \"builderinfiniteresources\", false);\n-        limitToOneWareHousePerColony = defineBoolean(builder, \"limittoonewarehousepercolony\", true);\n-        builderBuildBlockDelay = defineInteger(builder, \"builderbuildblockdelay\", 15, 1, 500);\n-        blockMiningDelayModifier = defineInteger(builder, \"blockminingdelaymodifier\", 500, 1, 10000);\n-        maxBlocksCheckedByBuilder = defineInteger(builder, \"maxblockscheckedbybuilder\", 1000, 1000, 100000);\n-        chatFrequency = defineInteger(builder, \"chatfrequency\", 30, 1, 100);\n-        enableInDevelopmentFeatures = defineBoolean(builder, \"enableindevelopmentfeatures\", false);\n-        alwaysRenderNameTag = defineBoolean(builder, \"alwaysrendernametag\", true);\n-        growthModifier = defineDouble(builder, \"growthmodifier\", 1, 1, 100);\n-        workersAlwaysWorkInRain = defineBoolean(builder, \"workersalwaysworkinrain\", false);\n-        sendEnteringLeavingMessages = defineBoolean(builder, \"sendenteringleavingmessages\", true);\n-        allowPlayerSchematics = defineBoolean(builder, \"allowplayerschematics\", false);\n-        allowGlobalNameChanges = defineInteger(builder, \"allowglobalnamechanges\", 1, -1, 1);\n-        holidayFeatures = defineBoolean(builder, \"holidayfeatures\", true);\n-        updateRate = defineInteger(builder, \"updaterate\", 1, 0, 100);\n-        dirtFromCompost = defineInteger(builder, \"dirtfromcompost\", 1, 0, 100);\n-        luckyBlockChance = defineInteger(builder, \"luckyblockchance\", 1, 0, 100);\n-        fixOrphanedChunks = defineBoolean(builder, \"fixorphanedchunks\", false);\n-        restrictBuilderUnderground = defineBoolean(builder, \"restrictbuilderunderground\", true);\n-        fisherSpongeChance = defineDouble(builder, \"fisherspongechance\", 0.1, 0, 100);\n-        minThLevelToTeleport = defineInteger(builder, \"minthleveltoteleport\", 3, 0, 5);\n-        suggestBuildToolPlacement = defineBoolean(builder, \"suggestbuildtoolplacement\", true);\n-        foodModifier = defineDouble(builder, \"foodmodifier\", 1.0, 0, 100);\n-        disableCitizenVoices = defineBoolean(builder, \"disablecitizenvoices\", false);\n-        diseaseModifier = defineInteger(builder, \"diseasemodifier\", 5, 1, 100);\n-        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n-\n-        swapToCategory(builder, \"commands\");\n-\n-        teleportBuffer = defineInteger(builder, \"teleportbuffer\", 120, 30, 99999);\n-        opLevelForServer = defineInteger(builder, \"oplevelforserver\", 3, 0, 3);\n-        autoDeleteColoniesInHours = defineInteger(builder, \"autodeletecoloniesinhours\", 0, 168, 10000);\n-        autoDestroyColonyBlocks = defineBoolean(builder, \"autodestroycolonyblocks\", true);\n-        canPlayerUseRTPCommand = defineBoolean(builder, \"canplayerusertpcommand\", true);\n-        canPlayerUseColonyTPCommand = defineBoolean(builder, \"canplayerusecolonytpcommand\", false);\n-        canPlayerUseAllyTHTeleport = defineBoolean(builder, \"canplayeruseallytownhallteleport\", true);\n-        canPlayerUseHomeTPCommand = defineBoolean(builder, \"canplayerusehometpcommand\", true);\n-        canPlayerUseShowColonyInfoCommand = defineBoolean(builder, \"canplayeruseshowcolonyinfocommand\", true);\n-        canPlayerUseKillCitizensCommand = defineBoolean(builder, \"canplayerusekillcitizenscommand\", true);\n-        canPlayerUseAddOfficerCommand = defineBoolean(builder, \"canplayeruseaddofficercommand\", true);\n-        canPlayerUseDeleteColonyCommand = defineBoolean(builder, \"canplayerusedeletecolonycommand\", true);\n-        numberOfAttemptsForSafeTP = defineInteger(builder, \"numberofattemptsforsafetp\", 4, 1, 10);\n-\n-\n-        swapToCategory(builder, \"claims\");\n-\n-        maxColonySize = defineInteger(builder, \"maxColonySize\", 20, 1, 50);\n-        minColonyDistance = defineInteger(builder, \"minColonyDistance\", 8, 1, 200);\n-        initialColonySize = defineInteger(builder, \"initialColonySize\", 4, 1, 200);\n-        restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        maxDistanceFromWorldSpawn = defineInteger(builder, \"maxdistancefromworldspawn\", 8000, 1000, 100000);\n-        minDistanceFromWorldSpawn = defineInteger(builder, \"mindistancefromworldspawn\", 512, 1, 1000);\n-        protectVillages = defineBoolean(builder, \"protectvillages\", false);\n-        officersReceiveAdvancements = defineBoolean(builder, \"officersreceiveadvancements\", true);\n-\n-        swapToCategory(builder, \"combat\");\n-\n-        doBarbariansSpawn = defineBoolean(builder, \"dobarbariansspawn\", true);\n-        barbarianHordeDifficulty = defineInteger(builder, \"barbarianhordedifficulty\", DEFAULT_BARBARIAN_DIFFICULTY, MIN_BARBARIAN_DIFFICULTY, MAX_BARBARIAN_DIFFICULTY);\n-        spawnBarbarianSize = defineInteger(builder, \"spawnbarbariansize\", 5, MIN_SPAWN_BARBARIAN_HORDE_SIZE, MAX_SPAWN_BARBARIAN_HORDE_SIZE);\n-        maxBarbarianSize = defineInteger(builder, \"maxBarbarianSize\", 80, MIN_BARBARIAN_HORDE_SIZE, MAX_BARBARIAN_HORDE_SIZE);\n-        doBarbariansBreakThroughWalls = defineBoolean(builder, \"dobarbariansbreakthroughwalls\", true);\n-        averageNumberOfNightsBetweenRaids = defineInteger(builder, \"averagenumberofnightsbetweenraids\", 7, 1, 10);\n-        minimumNumberOfNightsBetweenRaids = defineInteger(builder, \"minimumnumberofnightsbetweenraids\", 5, 1, 30);\n-        mobAttackCitizens = defineBoolean(builder, \"mobattackcitizens\", true);\n-        shouldRaidersBreakDoors = defineBoolean(builder, \"shouldraiderbreakdoors\", true);\n-        citizenCallForHelp = defineBoolean(builder, \"citizencallforhelp\", true);\n-        rangerEnchants = defineBoolean(builder, \"rangerenchants\", true);\n-        rangerDamageMult = defineDouble(builder, \"rangerdamagemult\", 1.0, 0.1, 5.0);\n-        knightDamageMult = defineDouble(builder, \"knightdamagemult\", 1.0, 0.1, 5.0);\n-        guardHealthMult = defineDouble(builder, \"guardhealthmult\", 1.0, 0.1, 5.0);\n-        pvp_mode = defineBoolean(builder, \"pvp_mode\", false);\n-        daysUntilPirateshipsDespawn = defineInteger(builder, \"daysuntilpirateshipsdespawn\", 3, 1, 10);\n-        maxYForBarbarians = defineInteger(builder, \"maxyforbarbarians\", 200, 1, 500);\n-\n-        swapToCategory(builder, \"permissions\");\n-\n-        enableColonyProtection = defineBoolean(builder, \"enablecolonyprotection\", true);\n-        turnOffExplosionsInColonies = defineBoolean(builder, \"turnoffexplosionsincolonies\", true);\n-        specialPermGroup = defineList(builder, \"specialpermgroup\",\n-          Arrays.asList\n-                   (\"_Raycoms_\"),\n-          s -> s instanceof String);\n-        freeToInteractBlocks = defineList(builder, \"freetointeractblocks\",\n-          Arrays.asList\n-                   (\"dirt\",\n-                     \"0 0 0\"),\n-          s -> s instanceof String);\n-        secondsBetweenPermissionMessages = defineInteger(builder, \"secondsBetweenPermissionMessages\", 30, 1, 1000);\n-\n-\n-        swapToCategory(builder, \"compatibility\");\n-\n-        extraOres = defineList(builder, \"extraOres\",\n-          Arrays.asList\n-                   (\"minestuck:ore_cruxite\",\n-                     \"minestuck:ore_uranium\"),\n-          s -> s instanceof String);\n-        guardResourceLocations = defineList(builder, \"guardresourcelocations\",\n-          Arrays.asList\n-                   (\"minecraft:slime\",\n-                     \"tconstruct:blueslime\"),\n-          s -> s instanceof String);\n-        configListStudyItems = defineList(builder, \"configliststudyitems\",\n-          Arrays.asList\n-                   (\"minecraft:paper;400;100\"),\n-          s -> s instanceof String);\n-        listOfCompostableItems = defineList(builder, \"listOfCompostableItems\",\n-          Arrays.asList\n-                   (\"minecraft:rotten_flesh\",\n-                     \"minecraft:brown_mushroom\",\n-                     \"minecraft:red_mushroom\",\n-                     \"minecraft:feather\",\n-                     \"minecraft:pumpkin\",\n-                     \"minecraft:carved_pumpkin\",\n-                     \"minecraft:grass\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:fern\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:kelp\",\n-                     \"minecraft:seagrass\",\n-                     \"minecraft:cactus\",\n-                     \"minecraft:sugar_cane\",\n-                     \"minecraft:vine\",\n-                     \"minecraft:cocoa_beans\",\n-                     \"minecraft:lily_pad\",\n-                     \"minecraft:sea_pickle\",\n-                     \"minecraft:wheat\",\n-                     \"minecraft:brown_mushroom_block\",\n-                     \"minecraft:red_mushroom_block\",\n-                     \"minecraft:mushroom_stem\",\n-                     \"minecraft:cake\",\n-                     \"minecraft:rabbit_foot\",\n-                     \"minecraft:fermented_spider_eye\",\n-                     \"saplings\",\n-                     \"flowers\",\n-                     \"leaves\"),\n-          s -> s instanceof String);\n-        luckyBlocks = defineList(builder, \"luckyblocks\",\n-          Arrays.asList\n-                   (\"minecraft:stone\",\n-                     \"minecraft:cobblestone\"),\n-          s -> s instanceof String);\n-        luckyOres = defineList(builder, \"luckyores\",\n-          Arrays.asList\n-                   (\"minecraft:coal_ore!64\",\n-                     \"minecraft:iron_ore!32\",\n-                     \"minecraft:gold_ore!16\",\n-                     \"minecraft:redstone_ore!8\",\n-                     \"minecraft:lapis_ore!4\",\n-                     \"minecraft:diamond_ore!2\",\n-                     \"minecraft:emerald_ore!1\"),\n-          s -> s instanceof String);\n-        crusherProduction = defineList(builder, \"crusherproduction\",\n-          Arrays.asList\n-                   (\"minecraft:cobblestone!minecraft:gravel\",\n-                     \"minecraft:gravel!minecraft:sand\",\n-                     \"minecraft:sand!minecraft:clay\"),\n-          s -> s instanceof String);\n-        sifterMeshes = defineList(builder, \"siftermeshes\",\n-          Arrays.asList\n-                   (\"minecraft:string,0\",\n-                     \"minecraft:flint,0.1\",\n-                     \"minecraft:iron_ingot,0.1\",\n-                     \"minecraft:diamond,0.1\"),\n-          s -> s instanceof String);\n-        siftableBlocks = defineList(builder, \"siftableblocks\",\n-          Arrays.asList\n-                   (\"minecraft:dirt\",\n-                     \"minecraft:sand\",\n-                     \"minecraft:gravel\",\n-                     \"minecraft:soul_sand\"),\n-          s -> s instanceof String);\n-\n-        sifterDrops = defineList(builder, \"sifterdrops\",\n-          Arrays.asList\n-                   (//Dirt with String mesh\n-                     \"0,0,minecraft:wheat_seeds,25\",\n-                     \"0,0,minecraft:oak_sapling,1\",\n-                     \"0,0,minecraft:birch_sapling,1\",\n-                     \"0,0,minecraft:spruce_sapling,1\",\n-                     \"0,0,minecraft:jungle_sapling,1\",\n-\n-                     //Dirt with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"0,1,minecraft:wheat_seeds,50\",\n-                     \"0,1,minecraft:oak_sapling,5\",\n-                     \"0,1,minecraft:birch_sapling,5\",\n-                     \"0,1,minecraft:spruce_sapling,5\",\n-                     \"0,1,minecraft:jungle_sapling,5\",\n-                     \"0,1,minecraft:carrot:0,1\",\n-                     \"0,1,minecraft:potato:0,1\",\n-\n-                     //Dirt with iron mesh\n-                     \"0,2,minecraft:wheat_seeds,50\",\n-                     \"0,2,minecraft:oak_sapling,10\",\n-                     \"0,2,minecraft:birch_sapling,10\",\n-                     \"0,2,minecraft:spruce_sapling,10\",\n-                     \"0,2,minecraft:jungle_sapling,10\",\n-                     \"0,2,minecraft:pumpkin_seeds:0,1\",\n-                     \"0,2,minecraft:melon_seeds:0,1\",\n-                     \"0,2,minecraft:beetroot_seeds:0,1\",\n-                     \"0,2,minecraft:carrot,1\",\n-                     \"0,2,minecraft:potato,1\",\n-                     \"0,2,minecraft:dark_oak_sapling,1\",\n-                     \"0,2,minecraft:acacia_sapling,1\",\n-\n-                     //Dirt with diamond mesh\n-                     \"0,3,minecraft:wheat_seeds,25\",\n-                     \"0,3,minecraft:oak_sapling,10\",\n-                     \"0,3,minecraft:birch_sapling,10\",\n-                     \"0,3,minecraft:spruce_sapling,10\",\n-                     \"0,3,minecraft:jungle_sapling,10\",\n-                     \"0,3,minecraft:pumpkin_seeds:0,5\",\n-                     \"0,3,minecraft:melon_seeds:0,5\",\n-                     \"0,3,minecraft:beetroot_seeds:0,5\",\n-                     \"0,3,minecraft:carrot:0,5\",\n-                     \"0,3,minecraft:potato:0,5\",\n-                     \"0,3,minecraft:dark_oak_sapling,5\",\n-                     \"0,3,minecraft:acacia_sapling,5\",\n-\n-                     //Sand with string mesh\n-                     \"1,0,minecraft:cactus,2.5\",\n-                     \"1,0,minecraft:sugar_cane,2.5\",\n-\n-                     //Sand with flfinal ForgeConfigSpec.IntValue mesh\n-                     \"1,1,minecraft:cactus,5\",\n-                     \"1,1,minecraft:sugar_cane,5\",\n-                     \"1,1,minecraft:gold_nugget,5\",\n-\n-                     //Sand with iron mesh\n-                     \"1,2,minecraft:cactus,10\",\n-                     \"1,2,minecraft:sugar_cane,10\",\n-                     \"1,2,minecraft:cocoa_beans,10\",\n-                     \"1,2,minecraft:gold_nugget,10\",\n-\n-                     //Sand with diamond mesh\n-                     \"1,3,minecraft:cactus,15\",\n-                     \"1,3,minecraft:sugar_cane,15\",\n-                     \"1,3,minecraft:cocoa_beans,15\",\n-                     \"1,3,minecraft:gold_nugget,15\",\n-\n-                     //Gravel with string mesh\n-                     \"2,0,minecraft:iron_nugget,5\",\n-                     \"2,0,minecraft:flint,5\",\n-                     \"2,0,minecraft:coal,5\",\n-\n-                     //Gravel with flint mesh\n-                     \"2,1,minecraft:redstone,10\",\n-                     \"2,1,minecraft:iron_nugget,10\",\n-                     \"2,1,minecraft:flint,10\",\n-                     \"2,1,minecraft:coal,10\",\n-\n-                     //Gravel with iron mesh\n-                     \"2,2,minecraft:redstone,15\",\n-                     \"2,2,minecraft:iron_nugget,15\",\n-                     \"2,2,minecraft:coal,15\",\n-                     \"2,2,minecraft:lapis_lazuli,5\",\n-                     \"2,2,minecraft:iron_ingot,1\",\n-                     \"2,2,minecraft:gold_ingot,1\",\n-                     \"2,2,minecraft:emerald,1\",\n-                     \"2,2,minecraft:diamond,1\",\n-\n-                     //Gravel with diamond mesh\n-                     \"2,3,minecraft:redstone,20\",\n-                     \"2,3,minecraft:coal,20\",\n-                     \"2,3,minecraft:lapis_lazuli,10\",\n-                     \"2,3,minecraft:iron_ingot,2.5\",\n-                     \"2,3,minecraft:gold_ingot,2.5\",\n-                     \"2,3,minecraft:emerald,2.5\",\n-                     \"2,3,minecraft:diamond,2.5\",\n-\n-                     //Soulsand with string mesh\n-                     \"3,0,minecraft:nether_wart,5\",\n-                     \"3,0,minecraft:quartz,5\",\n-\n-                     //Soulsand with flint mesh\n-                     \"3,1,minecraft:nether_wart,10\",\n-                     \"3,1,minecraft:quartz,10\",\n-                     \"3,1,minecraft:glowstone_dust,5\",\n-\n-                     //Soulsand with iron mesh\n-                     \"3,2,minecraft:nether_wart,10\",\n-                     \"3,2,minecraft:quartz,10\",\n-                     \"3,2,minecraft:glowstone_dust,10\",\n-                     \"3,2,minecraft:blaze_powder,1\",\n-                     \"3,2,minecraft:magma_cream,1\",\n-\n-                     //Soulsand with diamond mesh\n-                     \"3,3,minecraft:nether_wart,15\",\n-                     \"3,3,minecraft:quartz,15\",\n-                     \"3,3,minecraft:glowstone_dust,15\",\n-                     \"3,3,minecraft:blaze_powder,5\",\n-                     \"3,3,minecraft:magma_cream,5\",\n-                     \"3,3,minecraft:player_head,5\"),\n-          s -> s instanceof String);\n-\n-        listOfPlantables = defineList(builder, \"listofplantables\",\n-          Arrays.asList\n-                   (\"minecraft:sunflower\",\n-                     \"minecraft:lilac\",\n-                     \"minecraft:rose_bush\",\n-                     \"minecraft:peony\",\n-                     \"minecraft:tall_grass\",\n-                     \"minecraft:large_fern\",\n-                     \"minecraft:fern\",\n-                     \"small_flowers\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchantments = defineList(builder, \"enchantments\",\n-          Arrays.asList\n-                   (\n-                     \"1,minecraft:aqua_affinity,1,50\",\n-                     \"1,minecraft:bane_of_arthropods,1,50\",\n-                     \"1,minecraft:blast_protection,1,50\",\n-                     \"1,minecraft:depth_strider,1,50\",\n-                     \"1,minecraft:feather_falling,1,50\",\n-                     \"1,minecraft:fire_aspect,1,50\",\n-                     \"1,minecraft:fire_protection,1,50\",\n-                     \"1,minecraft:flame,1,50\",\n-                     \"1,minecraft:frost_walker,1,50\",\n-                     \"1,minecraft:knockback,1,50\",\n-                     \"1,minecraft:looting,1,50\",\n-                     \"1,minecraft:power,1,50\",\n-                     \"1,minecraft:projectile_protection,1,50\",\n-                     \"1,minecraft:protection,1,50\",\n-                     \"1,minecraft:punch,1,50\",\n-                     \"1,minecraft:respiration,1,50\",\n-                     \"1,minecraft:sharpness,1,50\",\n-                     \"1,minecraft:smite,1,50\",\n-                     \"1,minecraft:sweeping,1,50\",\n-                     \"1,minecraft:unbreaking,1,50\",\n-\n-                     \"2,minecraft:aqua_affinity,2,25\",\n-                     \"2,minecraft:bane_of_arthropods,2,25\",\n-                     \"2,minecraft:blast_protection,2,25\",\n-                     \"2,minecraft:depth_strider,2,25\",\n-                     \"2,minecraft:feather_falling,2,25\",\n-                     \"2,minecraft:fire_aspect,2,25\",\n-                     \"2,minecraft:fire_protection,2,25\",\n-                     \"2,minecraft:flame,2,25\",\n-                     \"2,minecraft:frost_walker,2,25\",\n-                     \"2,minecraft:knockback,2,25\",\n-                     \"2,minecraft:looting,2,25\",\n-                     \"2,minecraft:power,2,25\",\n-                     \"2,minecraft:projectile_protection,2,25\",\n-                     \"2,minecraft:protection,2,25\",\n-                     \"2,minecraft:punch,2,25\",\n-                     \"2,minecraft:respiration,2,25\",\n-                     \"2,minecraft:sharpness,2,25\",\n-                     \"2,minecraft:smite,2,25\",\n-                     \"2,minecraft:sweeping,2,25\",\n-                     \"2,minecraft:unbreaking,2,25\",\n-\n-                     \"3,minecraft:aqua_affinity,3,15\",\n-                     \"3,minecraft:bane_of_arthropods,3,15\",\n-                     \"3,minecraft:blast_protection,3,15\",\n-                     \"3,minecraft:depth_strider,3,15\",\n-                     \"3,minecraft:feather_falling,3,15\",\n-                     \"3,minecraft:fire_aspect,3,15\",\n-                     \"3,minecraft:fire_protection,3,15\",\n-                     \"3,minecraft:flame,3,15\",\n-                     \"3,minecraft:frost_walker,3,15\",\n-                     \"3,minecraft:knockback,3,15\",\n-                     \"3,minecraft:looting,3,15\",\n-                     \"3,minecraft:power,3,15\",\n-                     \"3,minecraft:projectile_protection,3,15\",\n-                     \"3,minecraft:protection,3,15\",\n-                     \"3,minecraft:punch,3,15\",\n-                     \"3,minecraft:respiration,3,15\",\n-                     \"3,minecraft:sharpness,3,15\",\n-                     \"3,minecraft:smite,3,15\",\n-                     \"3,minecraft:sweeping,3,15\",\n-                     \"3,minecraft:unbreaking,3,15\",\n-\n-                     \"4,minecraft:aqua_affinity,4,5\",\n-                     \"4,minecraft:bane_of_arthropods,4,5\",\n-                     \"4,minecraft:blast_protection,4,5\",\n-                     \"4,minecraft:depth_strider,4,5\",\n-                     \"4,minecraft:feather_falling,4,5\",\n-                     \"4,minecraft:fire_aspect,4,5\",\n-                     \"4,minecraft:fire_protection,4,5\",\n-                     \"4,minecraft:flame,4,5\",\n-                     \"4,minecraft:frost_walker,4,5\",\n-                     \"4,minecraft:infinity,1,5\",\n-                     \"4,minecraft:knockback,4,5\",\n-                     \"4,minecraft:looting,4,5\",\n-                     \"4,minecraft:power,4,5\",\n-                     \"4,minecraft:projectile_protection,4,5\",\n-                     \"4,minecraft:protection,4,5\",\n-                     \"4,minecraft:punch,4,5\",\n-                     \"4,minecraft:respiration,4,5\",\n-                     \"4,minecraft:sharpness,4,5\",\n-                     \"4,minecraft:smite,4,5\",\n-                     \"4,minecraft:sweeping,4,5\",\n-                     \"4,minecraft:unbreaking,4,5\",\n-\n-                     \"5,minecraft:aqua_affinity,5,1\",\n-                     \"5,minecraft:bane_of_arthropods,5,1\",\n-                     \"5,minecraft:blast_protection,5,1\",\n-                     \"5,minecraft:depth_strider,5,1\",\n-                     \"5,minecraft:feather_falling,5,1\",\n-                     \"5,minecraft:fire_aspect,5,1\",\n-                     \"5,minecraft:fire_protection,5,1\",\n-                     \"5,minecraft:flame,5,1\",\n-                     \"5,minecraft:frost_walker,5,1\",\n-                     \"5,minecraft:infinity,1,1\",\n-                     \"5,minecraft:knockback,5,1\",\n-                     \"5,minecraft:looting,5,1\",\n-                     \"5,minecraft:mending,1,1\",\n-                     \"5,minecraft:power,5,1\",\n-                     \"5,minecraft:projectile_protection,5,1\",\n-                     \"5,minecraft:protection,5,1\",\n-                     \"5,minecraft:punch,5,1\",\n-                     \"5,minecraft:respiration,5,1\",\n-                     \"5,minecraft:sharpness,5,1\",\n-                     \"5,minecraft:smite,5,1\",\n-                     \"5,minecraft:sweeping,5,1\",\n-                     \"5,minecraft:unbreaking,5,1\"\n-                   ),\n-          s -> s instanceof String);\n-\n-        enchanterExperienceMultiplier = defineDouble(builder, \"enchanterexperiencemultiplier\", 2, 1, 10);\n-\n-        dynamicTreeHarvestSize = defineInteger(builder, \"dynamictreeharvestsize\", 5, 1, 5);\n-\n-        diseases = defineList(builder, \"diseases\",\n-          Arrays.asList(\"Influenza,100,minecraft:carrot,minecraft:potato\",\n-            \"Measles,10,minecraft:dandelion,minecraft:kelp,minecraft:poppy\",\n-            \"Smallpox,1,minecraft:honeycomb,minecraft:golden_apple\"),\n-          s -> s instanceof String);\n-\n-        swapToCategory(builder, \"pathfinding\");\n-\n-        minimumRailsToPath = defineInteger(builder, \"minimumrailstopath\", 5, 5, 100);\n-        pathfindingDebugDraw = defineBoolean(builder, \"pathfindingdebugdraw\", false);\n-        pathfindingDebugVerbosity = defineInteger(builder, \"pathfindingdebugverbosity\", 0, 0, 10);\n-        pathfindingMaxThreadCount = defineInteger(builder, \"pathfindingmaxthreadcount\", 2, 1, 10);\n-        pathfindingMaxNodes = defineInteger(builder, \"pathfindingmaxnodes\", 5000, 1, 10000);\n-\n-\n-        swapToCategory(builder, \"requestSystem\");\n-\n-        enableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n-        maximalRetries = defineInteger(builder, \"maximalretries\", 3, 1, 10);\n-        delayBetweenRetries = defineInteger(builder, \"delaybetweenretries\", 1200, 30, 10000);\n-        maximalBuildingsToGather = defineInteger(builder, \"maximalbuildingstogather\", 6, 1, 50);\n-        minimalBuildingsToGather = defineInteger(builder, \"minimalbuildingstogather\", 3, 1, 50);\n-        creativeResolve = defineBoolean(builder, \"creativeresolve\", false);\n-        canPlayerUseResetCommand = defineBoolean(builder, \"canplayeruseresetcommand\", false);\n-\n-        swapToCategory(builder, \"research\");\n-\n-        tactictraining = defineList(builder, \"tactictraining\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        improvedswords = defineList(builder, \"improvedswords\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        squiretraining = defineList(builder, \"squiretraining\",\n-          Collections.singletonList(\"minecraft:shield*4\"),\n-          s -> s instanceof String);\n-        knighttraining = defineList(builder, \"knighttraining\",\n-          Collections.singletonList(\"minecraft:shield*8\"),\n-          s -> s instanceof String);\n-        captaintraining = defineList(builder, \"captaintraining\",\n-          Collections.singletonList(\"minecraft:shield*16\"),\n-          s -> s instanceof String);\n-        captainoftheguard = defineList(builder, \"captainoftheguard\",\n-          Collections.singletonList(\"minecraft:shield*27\"),\n-          s -> s instanceof String);\n-\n-        improvedbows = defineList(builder, \"improvedbows\",\n-          Collections.singletonList(\"minecraft:iron_block*6\"),\n-          s -> s instanceof String);\n-        tickshot = defineList(builder, \"tickshot\",\n-          Collections.singletonList(\"minecraft:bow*5\"),\n-          s -> s instanceof String);\n-        multishot = defineList(builder, \"multishot\",\n-          Collections.singletonList(\"minecraft:bow*9\"),\n-          s -> s instanceof String);\n-        rapidshot = defineList(builder, \"rapidshot\",\n-          Collections.singletonList(\"minecraft:bow*18\"),\n-          s -> s instanceof String);\n-        masterbowman = defineList(builder, \"masterbowman\",\n-          Collections.singletonList(\"minecraft:bow*27\"),\n-          s -> s instanceof String);\n-\n-        avoidance = defineList(builder, \"avoidance\",\n-          Collections.singletonList(\"minecraft:iron_block*3\"),\n-          s -> s instanceof String);\n-\n-        parry = defineList(builder, \"parry\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        repost = defineList(builder, \"repost\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        duelist = defineList(builder, \"duelist\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        provost = defineList(builder, \"provost\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        masterswordsman = defineList(builder, \"masterswordsman\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        dodge = defineList(builder, \"dodge\",\n-          Collections.singletonList(\"minecraft:leather*16\"),\n-          s -> s instanceof String);\n-        improveddodge = defineList(builder, \"improveddodge\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        evasion = defineList(builder, \"evasion\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        improvedevasion = defineList(builder, \"improvedevasion\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        agilearcher = defineList(builder, \"agilearcher\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.improvedleather = defineList(builder, \"improvedleather\",\n-          Collections.singletonList(\"minecraft:leather*32\"),\n-          s -> s instanceof String);\n-        this.boiledleather = defineList(builder, \"boiledleather\",\n-          Collections.singletonList(\"minecraft:leather*64\"),\n-          s -> s instanceof String);\n-        this.ironskin = defineList(builder, \"ironskin\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-        this.ironarmour = defineList(builder, \"ironarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*32\"),\n-          s -> s instanceof String);\n-        this.steelarmour = defineList(builder, \"steelarmour\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.diamondskin = defineList(builder, \"diamondskin\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-\n-        this.regeneration = defineList(builder, \"regeneration\",\n-          Collections.singletonList(\"minecraft:emerald*1\"),\n-          s -> s instanceof String);\n-\n-        this.feint = defineList(builder, \"feint\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.fear = defineList(builder, \"fear\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.retreat = defineList(builder, \"retreat\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.fullretreat = defineList(builder, \"fullretreat\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.avoid = defineList(builder, \"avoid\",\n-          Collections.singletonList(\"minecraft:emerald*8\"),\n-          s -> s instanceof String);\n-        this.evade = defineList(builder, \"evade\",\n-          Collections.singletonList(\"minecraft:emerald*16\"),\n-          s -> s instanceof String);\n-        this.flee = defineList(builder, \"flee\",\n-          Collections.singletonList(\"minecraft:emerald*32\"),\n-          s -> s instanceof String);\n-        this.hotfoot = defineList(builder, \"hotfoot\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-\n-        this.accuracy = defineList(builder, \"accuracy\",\n-          Collections.singletonList(\"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.quickdraw = defineList(builder, \"quickdraw\",\n-          Collections.singletonList(\"minecraft:iron_block*2\"),\n-          s -> s instanceof String);\n-        this.powerattack = defineList(builder, \"powerattack\",\n-          Collections.singletonList(\"minecraft:iron_block*4\"),\n-          s -> s instanceof String);\n-        this.cleave = defineList(builder, \"cleave\",\n-          Collections.singletonList(\"minecraft:iron_block*8\"),\n-          s -> s instanceof String);\n-        this.mightycleave = defineList(builder, \"mightycleave\",\n-          Collections.singletonList(\"minecraft:iron_block*16\"),\n-          s -> s instanceof String);\n-        this.whirlwind = defineList(builder, \"whirlwind\",\n-          Collections.singletonList(\"minecraft:iron_block*32\"),\n-          s -> s instanceof String);\n-\n-        this.preciseshot = defineList(builder, \"preciseshot\",\n-          Collections.singletonList(\"minecraft:flint*16\"),\n-          s -> s instanceof String);\n-        this.penetratingshot = defineList(builder, \"penetratingshot\",\n-          Collections.singletonList(\"minecraft:flint*32\"),\n-          s -> s instanceof String);\n-        this.piercingshot = defineList(builder, \"piercingshot\",\n-          Collections.singletonList(\"minecraft:flint*64\"),\n-          s -> s instanceof String);\n-        this.woundingshot = defineList(builder, \"woundingshot\",\n-          Collections.singletonList(\"minecraft:flint*128\"),\n-          s -> s instanceof String);\n-        this.deadlyaim = defineList(builder, \"deadlyaim\",\n-          Collections.singletonList(\"minecraft:flint*256\"),\n-          s -> s instanceof String);\n-\n-        this.higherlearning = defineList(builder, \"higherlearning\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-\n-        this.morebooks = defineList(builder, \"morebooks\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.bookworm = defineList(builder, \"bookworm\",\n-          Collections.singletonList(\"minecraft:bookshelf*6\"),\n-          s -> s instanceof String);\n-        this.bachelor = defineList(builder, \"bachelor\",\n-          Collections.singletonList(\"minecraft:bookshelf*12\"),\n-          s -> s instanceof String);\n-        this.master = defineList(builder, \"master\",\n-          Collections.singletonList(\"minecraft:bookshelf*32\"),\n-          s -> s instanceof String);\n-        this.phd = defineList(builder, \"phd\",\n-          Collections.singletonList(\"minecraft:bookshelf*64\"),\n-          s -> s instanceof String);\n-\n-        this.nurture = defineList(builder, \"nurture\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*32\"),\n-          s -> s instanceof String);\n-        this.hormones = defineList(builder, \"hormones\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*64\"),\n-          s -> s instanceof String);\n-        this.puberty = defineList(builder, \"puberty\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*128\"),\n-          s -> s instanceof String);\n-        this.growth = defineList(builder, \"growth\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*256\"),\n-          s -> s instanceof String);\n-        this.beanstalk = defineList(builder, \"beanstalk\",\n-          Collections.singletonList(\"minecraft:cooked_chicken*512\"),\n-          s -> s instanceof String);\n-\n-        this.keen = defineList(builder, \"keen\",\n-          Collections.singletonList(\"minecraft:book*3\"),\n-          s -> s instanceof String);\n-        this.outpost = defineList(builder, \"outpost\",\n-          Collections.singletonList(\"minecraft:cooked_beef*64\"),\n-          s -> s instanceof String);\n-        this.hamlet = defineList(builder, \"hamlet\",\n-          Collections.singletonList(\"minecraft:cooked_beef*128\"),\n-          s -> s instanceof String);\n-        this.village = defineList(builder, \"village\",\n-          Collections.singletonList(\"minecraft:cooked_beef*256\"),\n-          s -> s instanceof String);\n-        this.city = defineList(builder, \"city\",\n-          Collections.singletonList(\"minecraft:cooked_beef*512\"),\n-          s -> s instanceof String);\n-\n-        this.diligent = defineList(builder, \"diligent\",\n-          Collections.singletonList(\"minecraft:book*6\"),\n-          s -> s instanceof String);\n-        this.studious = defineList(builder, \"studious\",\n-          Collections.singletonList(\"minecraft:book*12\"),\n-          s -> s instanceof String);\n-        this.scholarly = defineList(builder, \"scholarly\",\n-          Collections.singletonList(\"minecraft:book*24\"),\n-          s -> s instanceof String);\n-        this.reflective = defineList(builder, \"reflective\",\n-          Collections.singletonList(\"minecraft:book*48\"),\n-          s -> s instanceof String);\n-        this.academic = defineList(builder, \"academic\",\n-          Collections.singletonList(\"minecraft:book*128\"),\n-          s -> s instanceof String);\n-\n-        this.rails = defineList(builder, \"rails\",\n-          Collections.singletonList(\"minecraft:rail*64\"),\n-          s -> s instanceof String);\n-        this.nimble = defineList(builder, \"nimble\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*1\"),\n-          s -> s instanceof String);\n-        this.agile = defineList(builder, \"agile\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*10\"),\n-          s -> s instanceof String);\n-        this.swift = defineList(builder, \"swift\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*32\"),\n-          s -> s instanceof String);\n-        this.athlete = defineList(builder, \"athlete\",\n-          Collections.singletonList(\"minecraft:rabbit_foot*64\"),\n-          s -> s instanceof String);\n-\n-        this.stamina = defineList(builder, \"stamina\",\n-          Collections.singletonList(\"minecraft:carrot*1\"),\n-          s -> s instanceof String);\n-\n-        this.resistance = defineList(builder, \"resistance\",\n-          Collections.singletonList(\"minecraft:golden_apple*1\"),\n-          s -> s instanceof String);\n-        this.resilience = defineList(builder, \"resilience\",\n-          Collections.singletonList(\"minecraft:golden_apple*8\"),\n-          s -> s instanceof String);\n-        this.vitality = defineList(builder, \"vitality\",\n-          Collections.singletonList(\"minecraft:golden_apple*16\"),\n-          s -> s instanceof String);\n-        this.fortitude = defineList(builder, \"fortitude\",\n-          Collections.singletonList(\"minecraft:golden_apple*32\"),\n-          s -> s instanceof String);\n-        this.indefatigability = defineList(builder, \"indefatigability\",\n-          Collections.singletonList(\"minecraft:golden_apple*64\"),\n-          s -> s instanceof String);\n-\n-        this.bandaid = defineList(builder, \"bandaid\",\n-          Collections.singletonList(\"minecraft:golden_carrot*1\"),\n-          s -> s instanceof String);\n-        this.healingcream = defineList(builder, \"healingcream\",\n-          Collections.singletonList(\"minecraft:golden_carrot*8\"),\n-          s -> s instanceof String);\n-        this.bandages = defineList(builder, \"bandages\",\n-          Collections.singletonList(\"minecraft:golden_carrot*16\"),\n-          s -> s instanceof String);\n-        this.compress = defineList(builder, \"compress\",\n-          Collections.singletonList(\"minecraft:golden_carrot*32\"),\n-          s -> s instanceof String);\n-        this.cast = defineList(builder, \"cast\",\n-          Collections.singletonList(\"minecraft:golden_carrot*64\"),\n-          s -> s instanceof String);\n-\n-        this.gourmand = defineList(builder, \"gourmand\",\n-          Collections.singletonList(\"minecraft:cookie*32\"),\n-          s -> s instanceof String);\n-        this.gorger = defineList(builder, \"gorger\",\n-          Collections.singletonList(\"minecraft:cookie*64\"),\n-          s -> s instanceof String);\n-        this.stuffer = defineList(builder, \"stuffer\",\n-          Collections.singletonList(\"minecraft:cookie*128\"),\n-          s -> s instanceof String);\n-        this.epicure = defineList(builder, \"epicure\",\n-          Collections.singletonList(\"minecraft:cookie*256\"),\n-          s -> s instanceof String);\n-        this.glutton = defineList(builder, \"glutton\",\n-          Collections.singletonList(\"minecraft:cookie*512\"),\n-          s -> s instanceof String);\n-\n-        this.circus = defineList(builder, \"circus\",\n-          Collections.singletonList(\"minecraft:cake*1\"),\n-          s -> s instanceof String);\n-        this.festival = defineList(builder, \"festival\",\n-          Collections.singletonList(\"minecraft:cake*9\"),\n-          s -> s instanceof String);\n-        this.spectacle = defineList(builder, \"spectacle\",\n-          Collections.singletonList(\"minecraft:cake*18\"),\n-          s -> s instanceof String);\n-        this.opera = defineList(builder, \"opera\",\n-          Collections.singletonList(\"minecraft:cake*27\"),\n-          s -> s instanceof String);\n-        this.theater = defineList(builder, \"theater\",\n-          Collections.singletonList(\"minecraft:enchanted_golden_apple*16\"),\n-          s -> s instanceof String);\n-\n-        this.firstaid = defineList(builder, \"firstaid\",\n-          Collections.singletonList(\"minecraft:hay_block*8\"),\n-          s -> s instanceof String);\n-        this.firstaid2 = defineList(builder, \"firstaid2\",\n-          Collections.singletonList(\"minecraft:hay_block*16\"),\n-          s -> s instanceof String);\n-        this.livesaver = defineList(builder, \"livesaver\",\n-          Collections.singletonList(\"minecraft:hay_block*32\"),\n-          s -> s instanceof String);\n-        this.livesaver2 = defineList(builder, \"livesaver2\",\n-          Collections.singletonList(\"minecraft:hay_block*64\"),\n-          s -> s instanceof String);\n-        this.guardianangel = defineList(builder, \"guardianangel\",\n-          Collections.singletonList(\"minecraft:hay_block*128\"),\n-          s -> s instanceof String);\n-        this.guardianangel2 = defineList(builder, \"guardianangel2\",\n-          Collections.singletonList(\"minecraft:hay_block*256\"),\n-          s -> s instanceof String);\n-\n-        whatyaneed = defineList(builder, \"whatyaneed\",\n-          Collections.singletonList(\"minecraft:redstone*64\"),\n-          s -> s instanceof String);\n-        stringwork = defineList(builder, \"stringwork\",\n-          Collections.singletonList(\"minecraft:string*16\"),\n-          s -> s instanceof String);\n-        thoselungs = defineList(builder, \"thoselungs\",\n-          Collections.singletonList(\"minecraft:glass*64\"),\n-          s -> s instanceof String);\n-        rainbowheaven = defineList(builder, \"rainbowheaven\",\n-          Collections.singletonList(\"minecraft:poppy*64\"),\n-          s -> s instanceof String);\n-\n-        this.veinminer = defineList(builder, \"veinminer\",\n-          Collections.singletonList(\"minecraft:iron_ore*32\"),\n-          s -> s instanceof String);\n-        this.goodveins = defineList(builder, \"goodveins\",\n-          Collections.singletonList(\"minecraft:iron_ore*64\"),\n-          s -> s instanceof String);\n-        this.richveins = defineList(builder, \"richveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*32\"),\n-          s -> s instanceof String);\n-        this.amazingveins = defineList(builder, \"amazingveins\",\n-          Collections.singletonList(\"minecraft:gold_ore*64\"),\n-          s -> s instanceof String);\n-        this.motherlode = defineList(builder, \"motherlode\",\n-          Collections.singletonList(\"minecraft:diamond_ore*64\"),\n-          s -> s instanceof String);\n-\n-        this.ability = defineList(builder, \"ability\",\n-          Collections.singletonList(\"minecraft:iron_ingot*64\"),\n-          s -> s instanceof String);\n-        this.skills = defineList(builder, \"skills\",\n-          Collections.singletonList(\"minecraft:iron_ingot*128\"),\n-          s -> s instanceof String);\n-        this.tools = defineList(builder, \"tools\",\n-          Collections.singletonList(\"minecraft:iron_ingot*256\"),\n-          s -> s instanceof String);\n-        this.seemsautomatic = defineList(builder, \"seemsautomatic\",\n-          Collections.singletonList(\"minecraft:iron_ingot*512\"),\n-          s -> s instanceof String);\n-        this.madness = defineList(builder, \"madness\",\n-          Collections.singletonList(\"minecraft:iron_ingot*1024\"),\n-          s -> s instanceof String);\n-\n-        this.hittingiron = defineList(builder, \"hittingiron\",\n-          Collections.singletonList(\"minecraft:anvil*1\"),\n-          s -> s instanceof String);\n-        this.stonecake = defineList(builder, \"stonecake\",\n-          Collections.singletonList(\"minecraft:chiseled_stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.hardened = defineList(builder, \"hardened\",\n-          Collections.singletonList(\"minecraft:diamond*16\"),\n-          s -> s instanceof String);\n-        this.reinforced = defineList(builder, \"reinforced\",\n-          Collections.singletonList(\"minecraft:diamond*32\"),\n-          s -> s instanceof String);\n-        this.steelbracing = defineList(builder, \"steelbracing\",\n-          Collections.singletonList(\"minecraft:diamond*64\"),\n-          s -> s instanceof String);\n-        this.diamondcoated = defineList(builder, \"diamondcoated\",\n-          Collections.singletonList(\"minecraft:diamond*128\"),\n-          s -> s instanceof String);\n-\n-        this.memoryaid = defineList(builder, \"memoryaid\",\n-          Collections.singletonList(\"minecraft:paper*32\"),\n-          s -> s instanceof String);\n-        this.cheatsheet = defineList(builder, \"cheatsheet\",\n-          Collections.singletonList(\"minecraft:paper*64\"),\n-          s -> s instanceof String);\n-        this.recipebook = defineList(builder, \"recipebook\",\n-          Collections.singletonList(\"minecraft:paper*128\"),\n-          s -> s instanceof String);\n-        this.rtm = defineList(builder, \"rtm\",\n-          Collections.singletonList(\"minecraft:paper*256\"),\n-          s -> s instanceof String);\n-        this.rainman = defineList(builder, \"rainman\",\n-          Collections.singletonList(\"minecraft:salmon_bucket*27\"),\n-          s -> s instanceof String);\n-\n-        this.woodwork = defineList(builder, \"woodwork\",\n-          Collections.singletonList(\"minecraft:oak_planks*64\"),\n-          s -> s instanceof String);\n-        this.sieving = defineList(builder, \"sieving\",\n-          Collections.singletonList(\"minecraft:string*64\"),\n-          s -> s instanceof String);\n-        this.space = defineList(builder, \"space\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*16\"),\n-          s -> s instanceof String);\n-        this.capacity = defineList(builder, \"capacity\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*32\"),\n-          s -> s instanceof String);\n-        this.fullstock = defineList(builder, \"fullstock\",\n-          Collections.singletonList(\"minecolonies:blockminecoloniesrack*64\"),\n-          s -> s instanceof String);\n-\n-        this.theflintstones = defineList(builder, \"theflintstones\",\n-          Collections.singletonList(\"minecraft:stone_bricks*64\"),\n-          s -> s instanceof String);\n-        this.rockingroll = defineList(builder, \"rockingroll\",\n-          Collections.singletonList(\"minecraft:stone*64\"),\n-          s -> s instanceof String);\n-\n-        this.hot = defineList(builder, \"hot\",\n-          Collections.singletonList(\"minecraft:lava_bucket*4\"),\n-          s -> s instanceof String);\n-        this.isthisredstone = defineList(builder, \"isthisredstone\",\n-          Collections.singletonList(\"minecraft:redstone*128\"),\n-          s -> s instanceof String);\n-        this.redstonepowered = defineList(builder, \"redstonepowered\",\n-          Collections.singletonList(\"minecraft:redstone*256\"),\n-          s -> s instanceof String);\n-        this.heavymachinery = defineList(builder, \"heavymachinery\",\n-          Collections.singletonList(\"minecraft:redstone*512\"),\n-          s -> s instanceof String);\n-        this.whatisthisspeed = defineList(builder, \"whatisthisspeed\",\n-          Collections.singletonList(\"minecraft:redstone*1024\"),\n-          s -> s instanceof String);\n-        this.lightning = defineList(builder, \"lightning\",\n-          Collections.singletonList(\"minecraft:redstone*2048\"),\n-          s -> s instanceof String);\n-\n-        this.biodegradable = defineList(builder, \"biodegradable\",\n-          Collections.singletonList(\"minecraft:bone_meal*64\"),\n-          s -> s instanceof String);\n-        this.flowerpower = defineList(builder, \"flowerpower\",\n-          Collections.singletonList(\"minecolonies:compost*64\"),\n-          s -> s instanceof String);\n-\n-        this.letitgrow = defineList(builder, \"letitgrow\",\n-          Collections.singletonList(\"minecolonies:compost*16\"),\n-          s -> s instanceof String);\n-\n-        this.bonemeal = defineList(builder, \"bonemeal\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*64\"),\n-          s -> s instanceof String);\n-        this.dung = defineList(builder, \"dung\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*128\"),\n-          s -> s instanceof String);\n-        this.compost = defineList(builder, \"compost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*256\"),\n-          s -> s instanceof String);\n-        this.fertilizer = defineList(builder, \"fertilizer\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*512\"),\n-          s -> s instanceof String);\n-        this.magiccompost = defineList(builder, \"magiccompost\",\n-          Collections.singletonList(\"minecraft:wheat_seeds*2048\"),\n-          s -> s instanceof String);\n-\n-        this.loaded = defineList(builder, \"loaded\",\n-          Collections.singletonList(\"minecraft:emerald*64\"),\n-          s -> s instanceof String);\n-        this.heavilyloaded = defineList(builder, \"heavilyloaded\",\n-          Collections.singletonList(\"minecraft:emerald*128\"),\n-          s -> s instanceof String);\n-        this.deeppockets = defineList(builder, \"deeppockets\",\n-          Collections.singletonList(\"minecraft:emerald*256\"),\n-          s -> s instanceof String);\n-\n-        List<String> tauntCosts = new ArrayList<String>();\n-        tauntCosts.add(\"minecraft:rotten_flesh*8\");\n-        tauntCosts.add(\"minecraft:bone*8\");\n-        tauntCosts.add(\"minecraft:spider_eye*8\");\n-        taunt = defineList(builder, \"taunt\",\n-          tauntCosts,\n-          s -> s instanceof String);\n-\n-        this.gildedhammer = defineList(builder, \"gildedhammer\",\n-          Arrays.asList(\"minecraft:gravel*64\", \"minecraft:sand*64\", \"minecraft:clay*64\"),\n-          s -> s instanceof String);\n-        this.doubletrouble = defineList(builder, \"doubletrouble\",\n-          Arrays.asList(\"minecraft:bamboo*64\", \"minecraft:sugar_cane*64\", \"minecraft:cactus*64\"),\n-          s -> s instanceof String);\n-        this.hotboots = defineList(builder, \"hotboots\",\n-          Arrays.asList(\"minecraft:leather*32\", \"minecraft:iron_ingot*16\"),\n-          s -> s instanceof String);\n-\n-        this.pavetheroad = defineList(builder, \"pavetheroad\",\n-          Collections.singletonList(\"minecraft:white_concrete*32\"),\n-          s -> s instanceof String);\n-\n-        finishCategory(builder);\n-    }\n-}\n", "next_change": {"commit": "25931682555c4095f1dddee973e3eb19be364b52", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nnew file mode 100644\nindex 0000000000..608c14790b\n--- /dev/null\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -0,0 +1,20 @@\n+package com.minecolonies.api.configuration;\n+\n+import net.minecraftforge.common.ForgeConfigSpec;\n+\n+public class CommonConfiguration extends AbstractConfiguration\n+{\n+    public final ForgeConfigSpec.BooleanValue generateSupplyLoot;\n+\n+    /**\n+     * Builds client configuration.\n+     *\n+     * @param builder config builder\n+     */\n+    protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n+    {\n+        createCategory(builder, \"gameplay\");\n+        generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n+        finishCategory(builder);\n+    }\n+}\n", "next_change": {"commit": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\nindex 608c14790b..f235a068b9 100644\n--- a/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n+++ b/src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java\n", "chunk": "@@ -16,5 +17,9 @@ public class CommonConfiguration extends AbstractConfiguration\n         createCategory(builder, \"gameplay\");\n         generateSupplyLoot = defineBoolean(builder, \"generatesupplyloot\", true);\n         finishCategory(builder);\n+\n+        createCategory(builder, \"requestsystem\");\n+        rsEnableDebugLogging = defineBoolean(builder, \"enabledebuglogging\", false);\n+        finishCategory(builder);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "5f7ad82f9c291d343b724e135f289e8d1a649b50", "committedDate": "2020-02-11 09:33:24 -0300", "message": "Finish research combat tree (#4315)"}, {"oid": "46b17973144567eaecdc2957af71ea7451fcedb1", "committedDate": "2020-03-07 09:01:34 +0000", "message": "Raiders rework for 1.15 (#4393)"}, {"oid": "d00ba98ab055b3708b586b0953c41e2a928ede15", "committedDate": "2020-03-08 18:17:20 +0000", "message": "Feature/hospital (#4396)"}, {"oid": "51520d3dcba0e33c0848c360b73aa85a95460250", "committedDate": "2020-03-21 19:24:43 +0100", "message": "Supply loot/ fix furnace users"}, {"oid": "6f4b692aa5d172cb9bd10b0bc4306843996d9dec", "committedDate": "2020-04-03 19:19:54 +0100", "message": "Adds guards patrolling together (#4565)"}, {"oid": "cd1e7949f609907f257bf442f8e9a4664e8c4572", "committedDate": "2020-04-11 10:48:07 +0100", "message": "Feature + Civilian Research Tree (#4608)"}, {"oid": "f21c869287e813eb7b9d81d00e57c5a85cc2d637", "committedDate": "2020-04-11 10:48:27 +0100", "message": "Fix duplicate config option luckyblocks and add compostables (#4601)"}, {"oid": "f98c16ac3b30a24456c5f80392af855a81acc87e", "committedDate": "2020-04-14 14:12:48 +0100", "message": "Feature/technology branch (#4629)"}, {"oid": "1183c64062d140b06362d0940ecb55ecac1d53a3", "committedDate": "2020-04-20 14:34:17 +0100", "message": "Feature/Inv citizen research (#4685)"}, {"oid": "ac346e525cd1dd66e843ae3e05425a53856c44db", "committedDate": "2020-04-21 11:25:33 +0100", "message": "small fixes (#4691)"}, {"oid": "3d2cfef23ee57fd49eaba8a419eddc4b6332a52d", "committedDate": "2020-04-25 15:33:06 +0100", "message": "Glassblower (#4751)"}, {"oid": "f23c9c3ccf582882f60734b57f9fe775b4ac09b8", "committedDate": "2020-04-25 19:06:20 +0200", "message": "Claim fixes and some view fixes (#4753)"}, {"oid": "8ab591e47b66d5674c99d8cc7ed5d736ad70d934", "committedDate": "2020-04-25 18:09:47 +0100", "message": "Small adjustments (#4754)"}, {"oid": "7cee98da53ca49d0540b0894b0d5e625558b5361", "committedDate": "2020-04-30 11:20:43 +0100", "message": "Feature/dyer (#4807)"}, {"oid": "eb91b1def7ebf06a964fb5e92cc38d8cb11f7a09", "committedDate": "2020-05-01 20:37:21 +0100", "message": "Raid fixes and adjustments (#4827)"}, {"oid": "4db033f9365a0f149e8cb07f66e00d540c8e4f33", "committedDate": "2020-05-05 14:23:12 +0200", "message": "Add Fletcher Worker (#4890)"}, {"oid": "8958ce0e30774786a7dbfb5418dd9dba46539828", "committedDate": "2020-05-09 09:26:09 +0100", "message": "Feature/mechanist (#4933)"}, {"oid": "6c87a2a39e061f7b10d9b3041c05b06742aa944f", "committedDate": "2020-05-14 18:45:13 +0100", "message": "Feature/plantation (#4950)"}, {"oid": "d2510aca15a669f2e74b936d18cc2892c069bd89", "committedDate": "2020-06-03 17:40:39 +0100", "message": "Knight taunt (#5138)"}, {"oid": "ad69b35a01b14d0244ecec073396ce51579c9aa3", "committedDate": "2020-06-07 13:36:40 +0100", "message": "Removes plantantion flowers from florist (#5111)"}, {"oid": "68d47083185edfb98965e322acad63ef017065c9", "committedDate": "2020-06-07 19:35:39 +0100", "message": "Feature research effects (#5166)"}, {"oid": "0a816c6a9cd8d3d51a13cc36e60db6ae24bc46a5", "committedDate": "2020-06-21 11:35:06 +0100", "message": "Feature/new workers (#5230)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "2f28d69e7af931c9425b0439bbc3615324cab5e3", "committedDate": "2020-07-04 11:27:24 +0100", "message": "Adjustments (#5338)"}, {"oid": "e2046de56432e28bd1de1b1f69d742c265fb10f6", "committedDate": "2020-07-18 13:56:18 +0100", "message": "Inventory util/debug (#5394)"}, {"oid": "673a22a82414c0a9808fe7e051879b302b3ba39a", "committedDate": "2020-07-18 14:30:24 +0100", "message": "Tavern port"}, {"oid": "3dc3f50baf6116415814376c6eb54006c6ffd0d1", "committedDate": "2020-07-18 16:08:22 +0100", "message": "Skip the Chit-Chat (#5399)"}, {"oid": "75f6dbbb6ad8fc055fd802f67c4496c743351dbd", "committedDate": "2020-08-05 08:49:09 +0100", "message": "Guard improvements (#5481)"}, {"oid": "50680f84edda3214bba8952f21d25ecb42f0091f", "committedDate": "2020-08-08 20:18:02 +0100", "message": "Recipes/tweaks (#5518)"}, {"oid": "b42068af6ff5ad0382a18e5b941b13da9486f782", "committedDate": "2020-08-10 08:57:49 +0100", "message": "Somefixes (#5540)"}, {"oid": "266dc863689d47213e775d15a4dfafff7d828b5c", "committedDate": "2020-08-12 16:07:53 +0100", "message": "Fix sitting hitbox (#5556)"}, {"oid": "25af14a05fbd409fc48f37a1b60b0ccb1d162fdf", "committedDate": "2020-08-15 17:35:38 +0200", "message": "Ported to a running version of 1.16.2"}, {"oid": "bae35a3bd512cdc2e84ada26043126a2c139b990", "committedDate": "2020-08-16 14:32:48 +0200", "message": "Transfer common to server config"}, {"oid": "25931682555c4095f1dddee973e3eb19be364b52", "committedDate": "2022-05-27 07:38:35 -0300", "message": "Fix supply loottable injection config (#7849)"}, {"oid": "44d35a1429c8d8b196e11c3650b04207fe2599cd", "committedDate": "2023-03-20 18:11:55 +0100", "message": "Try to load the RS reconfiguration system from common configuration entries. (#9022)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881311", "body": "only at the top of the review, so not entirely certain what ItemStorage is being used for but I got the general gist. Why're we using the ItemStorage class here? We don't need any of the same data for research criteria that we do for crafting. Take a look at the ItemPredicate class from vanilla, very useful class and might be better suited to our needs? especially once using datapacks.\r\nmy main issue is that once we move to datapacks these classes will most likely have no need", "bodyText": "only at the top of the review, so not entirely certain what ItemStorage is being used for but I got the general gist. Why're we using the ItemStorage class here? We don't need any of the same data for research criteria that we do for crafting. Take a look at the ItemPredicate class from vanilla, very useful class and might be better suited to our needs? especially once using datapacks.\nmy main issue is that once we move to datapacks these classes will most likely have no need", "bodyHTML": "<p dir=\"auto\">only at the top of the review, so not entirely certain what ItemStorage is being used for but I got the general gist. Why're we using the ItemStorage class here? We don't need any of the same data for research criteria that we do for crafting. Take a look at the ItemPredicate class from vanilla, very useful class and might be better suited to our needs? especially once using datapacks.<br>\nmy main issue is that once we move to datapacks these classes will most likely have no need</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:36:50Z", "path": "src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.minecolonies.api.crafting;\n+\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactory;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.PARAMS_ITEMSTORAGE;\n+\n+/**\n+ * Interface for the IItemStorageFactory which is responsible for creating and maintaining ItemStorage objects.\n+ */\n+public interface IItemStorageFactory extends IFactory<FactoryVoidInput, ItemStorage>", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQ3MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886471", "bodyText": "This is for an entire different usecase, it's so that we can serialize itemStorages better.\nNothing related directly to research.\nWe still will need this, always.", "author": "Raycoms", "createdAt": "2020-02-02T23:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDkyMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373890921", "bodyText": "okay not research related. i thought it was", "author": "Asherslab", "createdAt": "2020-02-03T00:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java b/src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java\nold mode 100644\nnew mode 100755\nindex 128b851fb4..fb787c1a7f\n--- a/src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java\n+++ b/src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java\n", "chunk": "@@ -3,8 +3,7 @@ package com.minecolonies.api.crafting;\n import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n import com.minecolonies.api.colony.requestsystem.factory.IFactory;\n import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n-import com.minecolonies.api.colony.requestsystem.token.IToken;\n-import net.minecraft.item.ItemStack;\n+import net.minecraft.world.item.ItemStack;\n import org.jetbrains.annotations.NotNull;\n \n import static com.minecolonies.api.util.constant.Constants.PARAMS_ITEMSTORAGE;\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "c00736d6ca8918a27560efcb0ea5de7e85d8f18d", "committedDate": "2021-05-02 16:39:55 +0100", "message": "Fix ItemStorage serialization, ensure that matching information persists in RecipeStorage (#7029)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTYyNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881624", "body": "Is there a reason we're using String IDs and not resource locations? would be better suited for when research isn't statically (code) defined. or even just for when other mods add it", "bodyText": "Is there a reason we're using String IDs and not resource locations? would be better suited for when research isn't statically (code) defined. or even just for when other mods add it", "bodyHTML": "<p dir=\"auto\">Is there a reason we're using String IDs and not resource locations? would be better suited for when research isn't statically (code) defined. or even just for when other mods add it</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:42:04Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjUzOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886538", "bodyText": "I want to avoid resource location where they are not strictly necessary, it's a lot of code and storage overhead and extra comparisons etc needed somewhere where we only expect strings to be added. There is no \"different mod require different locations\" necessity here.", "author": "Raycoms", "createdAt": "2020-02-02T23:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTYyNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex 7f8f5e03b6..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -41,62 +46,71 @@ public interface IGlobalResearch\n \n     /**\n      * Get the cost list from the research.\n+     *\n      * @return the list.\n      */\n     List<ItemStorage> getCostList();\n \n     /**\n      * Start the research.\n-     * @param player the player starting it.\n-     * @param localResearchTree  the local research tree to store in the colony.\n+     *\n+     * @param player            the player starting it.\n+     * @param localResearchTree the local research tree to store in the colony.\n      */\n     void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n \n     /**\n      * Human readable description of research.\n+     *\n      * @return the description.\n      */\n     String getDesc();\n \n     /**\n      * Getter of the id of the research.\n+     *\n      * @return the String id.\n      */\n     String getId();\n \n     /**\n      * Get the id of the parent IResearch.\n+     *\n      * @return the string id.\n      */\n     String getParent();\n \n     /**\n      * Get the string name of the branch.\n+     *\n      * @return the branch name.\n      */\n     String getBranch();\n \n     /**\n      * Get the depth in the research tree.\n+     *\n      * @return the depth.\n      */\n     int getDepth();\n \n     /**\n-     * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can e researched.\n+     * Check if this research is an only child research. This means, after researching one child no other childs can be researched.\n+     *\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n \n     /**\n      * Set if a research should only allow one child.\n+     *\n      * @param onlyChild the param to set.\n      */\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n-     * Check if this research has other childs.\n+     * Check if this research has other children and if one of these children has been research already.\n+     *\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTY4Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881686", "body": "I also think branch names could be resource locations?", "bodyText": "I also think branch names could be resource locations?", "bodyHTML": "<p dir=\"auto\">I also think branch names could be resource locations?</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:42:51Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjU1Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886557", "bodyText": "same thing here. Resourcelocations are only useful when we want to localize it for our mod and we're afraid another mod uses the same id.", "author": "Raycoms", "createdAt": "2020-02-02T23:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTY4Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex 7f8f5e03b6..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -41,62 +46,71 @@ public interface IGlobalResearch\n \n     /**\n      * Get the cost list from the research.\n+     *\n      * @return the list.\n      */\n     List<ItemStorage> getCostList();\n \n     /**\n      * Start the research.\n-     * @param player the player starting it.\n-     * @param localResearchTree  the local research tree to store in the colony.\n+     *\n+     * @param player            the player starting it.\n+     * @param localResearchTree the local research tree to store in the colony.\n      */\n     void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n \n     /**\n      * Human readable description of research.\n+     *\n      * @return the description.\n      */\n     String getDesc();\n \n     /**\n      * Getter of the id of the research.\n+     *\n      * @return the String id.\n      */\n     String getId();\n \n     /**\n      * Get the id of the parent IResearch.\n+     *\n      * @return the string id.\n      */\n     String getParent();\n \n     /**\n      * Get the string name of the branch.\n+     *\n      * @return the branch name.\n      */\n     String getBranch();\n \n     /**\n      * Get the depth in the research tree.\n+     *\n      * @return the depth.\n      */\n     int getDepth();\n \n     /**\n-     * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can e researched.\n+     * Check if this research is an only child research. This means, after researching one child no other childs can be researched.\n+     *\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n \n     /**\n      * Set if a research should only allow one child.\n+     *\n      * @param onlyChild the param to set.\n      */\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n-     * Check if this research has other childs.\n+     * Check if this research has other children and if one of these children has been research already.\n+     *\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": null}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTcyNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881724", "body": "typo here btw", "bodyText": "typo here btw", "bodyHTML": "<p dir=\"auto\">typo here btw</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:43:28Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..8a2665d17c 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -84,7 +84,7 @@ public interface IGlobalResearch\n \n     /**\n      * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can e researched.\n+     * This means, after researching one child no other childs can be researched.\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..d7737c98c9 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -84,7 +85,7 @@ public interface IGlobalResearch\n \n     /**\n      * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can e researched.\n+     * This means, after researching one child no other childs can be researched.\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex d7737c98c9..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -42,62 +46,71 @@ public interface IGlobalResearch\n \n     /**\n      * Get the cost list from the research.\n+     *\n      * @return the list.\n      */\n     List<ItemStorage> getCostList();\n \n     /**\n      * Start the research.\n-     * @param player the player starting it.\n-     * @param localResearchTree  the local research tree to store in the colony.\n+     *\n+     * @param player            the player starting it.\n+     * @param localResearchTree the local research tree to store in the colony.\n      */\n     void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n \n     /**\n      * Human readable description of research.\n+     *\n      * @return the description.\n      */\n     String getDesc();\n \n     /**\n      * Getter of the id of the research.\n+     *\n      * @return the String id.\n      */\n     String getId();\n \n     /**\n      * Get the id of the parent IResearch.\n+     *\n      * @return the string id.\n      */\n     String getParent();\n \n     /**\n      * Get the string name of the branch.\n+     *\n      * @return the branch name.\n      */\n     String getBranch();\n \n     /**\n      * Get the depth in the research tree.\n+     *\n      * @return the depth.\n      */\n     int getDepth();\n \n     /**\n-     * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can be researched.\n+     * Check if this research is an only child research. This means, after researching one child no other childs can be researched.\n+     *\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n \n     /**\n      * Set if a research should only allow one child.\n+     *\n      * @param onlyChild the param to set.\n      */\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n      * Check if this research has other children and if one of these children has been research already.\n+     *\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTc5MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881790", "body": "this method name doesn't match the javadoc's description, something like `hasChildren` would make more sense, unless the javadoc is wrong", "bodyText": "this method name doesn't match the javadoc's description, something like hasChildren would make more sense, unless the javadoc is wrong", "bodyHTML": "<p dir=\"auto\">this method name doesn't match the javadoc's description, something like <code>hasChildren</code> would make more sense, unless the javadoc is wrong</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:44:34Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..8a2665d17c 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -96,7 +96,7 @@ public interface IGlobalResearch\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n-     * Check if this research has other childs.\n+     * Check if this research has other children and if one of these children has been research already.\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..d7737c98c9 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -96,7 +97,7 @@ public interface IGlobalResearch\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n-     * Check if this research has other childs.\n+     * Check if this research has other children and if one of these children has been research already.\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex d7737c98c9..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -42,62 +46,71 @@ public interface IGlobalResearch\n \n     /**\n      * Get the cost list from the research.\n+     *\n      * @return the list.\n      */\n     List<ItemStorage> getCostList();\n \n     /**\n      * Start the research.\n-     * @param player the player starting it.\n-     * @param localResearchTree  the local research tree to store in the colony.\n+     *\n+     * @param player            the player starting it.\n+     * @param localResearchTree the local research tree to store in the colony.\n      */\n     void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n \n     /**\n      * Human readable description of research.\n+     *\n      * @return the description.\n      */\n     String getDesc();\n \n     /**\n      * Getter of the id of the research.\n+     *\n      * @return the String id.\n      */\n     String getId();\n \n     /**\n      * Get the id of the parent IResearch.\n+     *\n      * @return the string id.\n      */\n     String getParent();\n \n     /**\n      * Get the string name of the branch.\n+     *\n      * @return the branch name.\n      */\n     String getBranch();\n \n     /**\n      * Get the depth in the research tree.\n+     *\n      * @return the depth.\n      */\n     int getDepth();\n \n     /**\n-     * Check if this research is an only child research.\n-     * This means, after researching one child no other childs can be researched.\n+     * Check if this research is an only child research. This means, after researching one child no other childs can be researched.\n+     *\n      * @return true if so.\n      */\n     boolean hasOnlyChild();\n \n     /**\n      * Set if a research should only allow one child.\n+     *\n      * @param onlyChild the param to set.\n      */\n     void setOnlyChild(boolean onlyChild);\n \n     /**\n      * Check if this research has other children and if one of these children has been research already.\n+     *\n      * @param localTree the local tree of the colony.\n      * @return true if so.\n      */\n", "next_change": null}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex d7737c98c9..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -105,35 +118,43 @@ public interface IGlobalResearch\n \n     /**\n      * Add a child to a research.\n+     *\n      * @param child the child to add.\n      */\n     void addChild(IGlobalResearch child);\n \n     /**\n      * Get the list of children of the research.\n+     *\n+     * @return a copy of the list of child identifiers.\n      */\n     ImmutableList<String> getChilds();\n \n     /**\n      * Set the parent of a research.\n+     *\n      * @param id the id of the parent.\n      */\n     void setParent(String id);\n \n     /**\n      * Set the research requirement.\n+     *\n      * @param requirement the requirement.\n      */\n     void setRequirement(final IResearchRequirement requirement);\n+\n     /**\n      * Getter for the research requirement.\n+     *\n      * @return the requirement.\n      */\n     IResearchRequirement getResearchRequirement();\n \n     /**\n      * Get the effect of the research.\n+     *\n      * @return the effect.\n      */\n-    IResearchEffect getEffect();\n+    IResearchEffect<?> getEffect();\n }\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 544b2efb72..0fe4925787 100755\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -123,38 +169,55 @@ public interface IGlobalResearch\n      */\n     void addChild(IGlobalResearch child);\n \n+    /**\n+     * Add a child to a research, without setting parentage.\n+     * @param child the child to add\n+     */\n+    void addChild(final ResourceLocation child);\n+\n+    /**\n+     * Add an individual cost.\n+     * @param cost the individual item to add to the cost list, as an ItemStorage.\n+     */\n+    void addCost(final ItemStorage cost);\n+\n+    /**\n+     * Add an individual effect.\n+     * @param effect the individual effect to add to the research, as a IResearchEffect.\n+     */\n+    void addEffect(final IResearchEffect<?> effect);\n+\n+    /**\n+     * Add an individual requirement\n+     * @param requirement the individual requirement to add to the research, as an IResearchRequirement.\n+     */\n+    void addRequirement(final IResearchRequirement requirement);\n+\n     /**\n      * Get the list of children of the research.\n      *\n      * @return a copy of the list of child identifiers.\n      */\n-    ImmutableList<String> getChilds();\n+    List<ResourceLocation> getChildren();\n \n     /**\n      * Set the parent of a research.\n      *\n      * @param id the id of the parent.\n      */\n-    void setParent(String id);\n-\n-    /**\n-     * Set the research requirement.\n-     *\n-     * @param requirement the requirement.\n-     */\n-    void setRequirement(final IResearchRequirement requirement);\n+    void setParent(ResourceLocation id);\n \n     /**\n      * Getter for the research requirement.\n      *\n      * @return the requirement.\n      */\n-    IResearchRequirement getResearchRequirement();\n+    List<IResearchRequirement> getResearchRequirement();\n \n     /**\n      * Get the effect of the research.\n      *\n      * @return the effect.\n      */\n-    IResearchEffect<?> getEffect();\n+    List<IResearchEffect<?>> getEffects();\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTg1Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881852", "body": "plural child is children", "bodyText": "plural child is children", "bodyHTML": "<p dir=\"auto\">plural child is children</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:45:28Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    ImmutableList<String> getChilds();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..8a2665d17c 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -109,7 +109,7 @@ public interface IGlobalResearch\n     void addChild(IGlobalResearch child);\n \n     /**\n-     * Get the list of childs of the research.\n+     * Get the list of children of the research.\n      */\n     ImmutableList<String> getChilds();\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 7f8f5e03b6..d7737c98c9 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -109,7 +110,7 @@ public interface IGlobalResearch\n     void addChild(IGlobalResearch child);\n \n     /**\n-     * Get the list of childs of the research.\n+     * Get the list of children of the research.\n      */\n     ImmutableList<String> getChilds();\n \n", "next_change": {"commit": "3004c9f66cc2474053828ce3a949d6695795944a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex d7737c98c9..ec88c8cb8f 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -111,6 +112,7 @@ public interface IGlobalResearch\n \n     /**\n      * Get the list of children of the research.\n+     * @return a copy of the list of child identifiers.\n      */\n     ImmutableList<String> getChilds();\n \n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nold mode 100644\nnew mode 100755\nindex ec88c8cb8f..544b2efb72\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -106,36 +118,43 @@ public interface IGlobalResearch\n \n     /**\n      * Add a child to a research.\n+     *\n      * @param child the child to add.\n      */\n     void addChild(IGlobalResearch child);\n \n     /**\n      * Get the list of children of the research.\n+     *\n      * @return a copy of the list of child identifiers.\n      */\n     ImmutableList<String> getChilds();\n \n     /**\n      * Set the parent of a research.\n+     *\n      * @param id the id of the parent.\n      */\n     void setParent(String id);\n \n     /**\n      * Set the research requirement.\n+     *\n      * @param requirement the requirement.\n      */\n     void setRequirement(final IResearchRequirement requirement);\n+\n     /**\n      * Getter for the research requirement.\n+     *\n      * @return the requirement.\n      */\n     IResearchRequirement getResearchRequirement();\n \n     /**\n      * Get the effect of the research.\n+     *\n      * @return the effect.\n      */\n-    IResearchEffect getEffect();\n+    IResearchEffect<?> getEffect();\n }\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\nindex 544b2efb72..0fe4925787 100755\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearch.java\n", "chunk": "@@ -123,38 +169,55 @@ public interface IGlobalResearch\n      */\n     void addChild(IGlobalResearch child);\n \n+    /**\n+     * Add a child to a research, without setting parentage.\n+     * @param child the child to add\n+     */\n+    void addChild(final ResourceLocation child);\n+\n+    /**\n+     * Add an individual cost.\n+     * @param cost the individual item to add to the cost list, as an ItemStorage.\n+     */\n+    void addCost(final ItemStorage cost);\n+\n+    /**\n+     * Add an individual effect.\n+     * @param effect the individual effect to add to the research, as a IResearchEffect.\n+     */\n+    void addEffect(final IResearchEffect<?> effect);\n+\n+    /**\n+     * Add an individual requirement\n+     * @param requirement the individual requirement to add to the research, as an IResearchRequirement.\n+     */\n+    void addRequirement(final IResearchRequirement requirement);\n+\n     /**\n      * Get the list of children of the research.\n      *\n      * @return a copy of the list of child identifiers.\n      */\n-    ImmutableList<String> getChilds();\n+    List<ResourceLocation> getChildren();\n \n     /**\n      * Set the parent of a research.\n      *\n      * @param id the id of the parent.\n      */\n-    void setParent(String id);\n-\n-    /**\n-     * Set the research requirement.\n-     *\n-     * @param requirement the requirement.\n-     */\n-    void setRequirement(final IResearchRequirement requirement);\n+    void setParent(ResourceLocation id);\n \n     /**\n      * Getter for the research requirement.\n      *\n      * @return the requirement.\n      */\n-    IResearchRequirement getResearchRequirement();\n+    List<IResearchRequirement> getResearchRequirement();\n \n     /**\n      * Get the effect of the research.\n      *\n      * @return the effect.\n      */\n-    IResearchEffect<?> getEffect();\n+    List<IResearchEffect<?>> getEffects();\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjAxMA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882010", "body": "yeah i definitely think branches should use ResourceLocation IDs not strings", "bodyText": "yeah i definitely think branches should use ResourceLocation IDs not strings", "bodyHTML": "<p dir=\"auto\">yeah i definitely think branches should use ResourceLocation IDs not strings</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:47:22Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3004c9f66cc2474053828ce3a949d6695795944a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 4fddf7c054..75a594db27 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -30,6 +30,7 @@ public interface IGlobalResearchTree\n     /**\n      * Add a research to the tree.\n      * @param research the research to add.\n+     * @param branch the branch of the research.\n      */\n     void addResearch(final String branch, final IGlobalResearch research);\n \n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nold mode 100644\nnew mode 100755\nindex 75a594db27..7e2e2afcea\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -29,19 +31,22 @@ public interface IGlobalResearchTree\n \n     /**\n      * Add a research to the tree.\n+     *\n      * @param research the research to add.\n-     * @param branch the branch of the research.\n+     * @param branch   the branch of the research.\n      */\n     void addResearch(final String branch, final IGlobalResearch research);\n \n     /**\n      * Get the list of all branches.\n+     *\n      * @return the list of branches.\n      */\n     List<String> getBranches();\n \n     /**\n      * Get the primary research of a certain branch.\n+     *\n      * @param branch the branch it belongs to.\n      * @return the list of research without parent.\n      */\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 7e2e2afcea..d1e032be47 100755\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -27,22 +39,80 @@ public interface IGlobalResearchTree\n      * @param branch the branch of the research.\n      * @return the IResearch object.\n      */\n-    IGlobalResearch getResearch(final String branch, final String id);\n+    IGlobalResearch getResearch(final ResourceLocation branch, final ResourceLocation id);\n+\n+    /**\n+     * Get an effect id for a particular research\n+     * @param id    the id of the research.\n+     * @return the effect id\n+     */\n+    List<IResearchEffect<?>> getEffectsForResearch(final @NotNull ResourceLocation id);\n+\n+    /**\n+     * Check if a research exists, by id.\n+     *\n+     * @param id     the id of the research.\n+     * @param branch the branch of the research.\n+     * @return true if the research exists, false if it does not.\n+     */\n+    boolean hasResearch(final ResourceLocation branch, final ResourceLocation id);\n+\n+    /**\n+     * Check if a research exists, by id.\n+     *\n+     * @param id     the id of the research.\n+     * @return true if the research exists, false if it does not.\n+     */\n+    boolean hasResearch(final ResourceLocation id);\n \n     /**\n      * Add a research to the tree.\n      *\n      * @param research the research to add.\n      * @param branch   the branch of the research.\n+     * @param isDynamic  true if reloaded with world events (ie data packs, onWorldLoad), false if assigned statically once.\n      */\n-    void addResearch(final String branch, final IGlobalResearch research);\n+    void addResearch(final ResourceLocation branch, final IGlobalResearch research, final boolean isDynamic);\n \n     /**\n      * Get the list of all branches.\n      *\n      * @return the list of branches.\n      */\n-    List<String> getBranches();\n+    List<ResourceLocation> getBranches();\n+\n+    /**\n+     * Resets all dynamically assigned research.\n+     */\n+    void reset();\n+\n+    /**\n+     * Set name on an individual branch.\n+     * @param branchId      Machine identifier of the branch\n+     * @param branchName    Human-readable or translation key name for the branch.\n+     */\n+    void setBranchName(final ResourceLocation branchId, final TranslationTextComponent branchName);\n+\n+    /**\n+     * Gets the name on an individual branch.\n+     * @param branchId      Machine identifier of the branch\n+     * @return    Human-readable or translation key name for the branch.\n+     */\n+    TranslationTextComponent getBranchName(final ResourceLocation branchId);\n+\n+    /**\n+     * Set base time on an individual branch.\n+     * @param branchId      Machine identifier of the branch\n+     * @param baseTime      Base duration of the research.\n+     */\n+    void setBranchTime(final ResourceLocation branchId, final double baseTime);\n+\n+    /**\n+     * Set base time on an individual branch.\n+     * @param branchId      Machine identifier of the branch\n+     * @return              Base duration of the research.\n+     */\n+    double getBranchTime(final ResourceLocation branchId);\n \n     /**\n      * Get the primary research of a certain branch.\n", "next_change": {"commit": "b886cbdfbf36e6557c2d78a23aaab52a3443f516", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nold mode 100755\nnew mode 100644\nindex d1e032be47..5a32f31ff4\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -75,44 +75,30 @@ public interface IGlobalResearchTree\n     void addResearch(final ResourceLocation branch, final IGlobalResearch research, final boolean isDynamic);\n \n     /**\n-     * Get the list of all branches.\n-     *\n-     * @return the list of branches.\n+     * Add data for a research branch, used to contain translation texts, research speed, and other properties.\n+     * @param branchId    the branch Id.\n+     * @param branchData  the data.\n      */\n-    List<ResourceLocation> getBranches();\n+    void addBranchData(final ResourceLocation branchId, final IGlobalResearchBranch branchData);\n \n     /**\n-     * Resets all dynamically assigned research.\n-     */\n-    void reset();\n-\n-    /**\n-     * Set name on an individual branch.\n-     * @param branchId      Machine identifier of the branch\n-     * @param branchName    Human-readable or translation key name for the branch.\n-     */\n-    void setBranchName(final ResourceLocation branchId, final TranslationTextComponent branchName);\n-\n-    /**\n-     * Gets the name on an individual branch.\n-     * @param branchId      Machine identifier of the branch\n-     * @return    Human-readable or translation key name for the branch.\n+     * Get the list of all branch ids.\n+     *\n+     * @return the list of branches.\n      */\n-    TranslationTextComponent getBranchName(final ResourceLocation branchId);\n+    List<ResourceLocation> getBranches();\n \n     /**\n-     * Set base time on an individual branch.\n-     * @param branchId      Machine identifier of the branch\n-     * @param baseTime      Base duration of the research.\n+     * Get the specific GlobalResearchBranch data for a specific branch id.\n+     *\n+     * @param branchId  the branch of the research\n      */\n-    void setBranchTime(final ResourceLocation branchId, final double baseTime);\n+    IGlobalResearchBranch getBranchData(final ResourceLocation branchId);\n \n     /**\n-     * Set base time on an individual branch.\n-     * @param branchId      Machine identifier of the branch\n-     * @return              Base duration of the research.\n+     * Resets all dynamically assigned research.\n      */\n-    double getBranchTime(final ResourceLocation branchId);\n+    void reset();\n \n     /**\n      * Get the primary research of a certain branch.\n", "next_change": null}]}}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex 7e2e2afcea..d1e032be47 100755\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -50,7 +120,35 @@ public interface IGlobalResearchTree\n      * @param branch the branch it belongs to.\n      * @return the list of research without parent.\n      */\n-    List<String> getPrimaryResearch(final String branch);\n+    List<ResourceLocation> getPrimaryResearch(final ResourceLocation branch);\n+\n+    /**\n+     * Get the list of researches that are intended to start automatically\n+     * once their requirements are met.\n+     * @return the list of research.\n+     */\n+    HashSet<IGlobalResearch> getAutostartResearches();\n+\n+    /**\n+     * Validates and gets the list of research reset costs, if any are set, from their configuration values.\n+     * @return the list of items in ItemStorage format.\n+     */\n+    List<ItemStorage> getResearchResetCosts();\n+\n+    /**\n+     * Checks if a specific research effect has been registered, whether or not it is unlocked.\n+     * @param id   the effect's identifier.\n+     * @return true if present, false if not registered.\n+     */\n+    boolean hasResearchEffect(final ResourceLocation id);\n+\n+    /**\n+     * Checks if the research requirements are completed, for a given colony.\n+     * @param requirements   the research requirements.\n+     * @param colony         the colony to test against.\n+     * @return               true if complete.\n+     */\n+    boolean isResearchRequirementsFulfilled(final List<IResearchRequirement> requirements, final IColony colony);\n \n     /**\n      * Write the research tree to NBT.\n", "next_change": {"commit": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nold mode 100755\nnew mode 100644\nindex d1e032be47..f1e8a151af\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -150,20 +154,6 @@ public interface IGlobalResearchTree\n      */\n     boolean isResearchRequirementsFulfilled(final List<IResearchRequirement> requirements, final IColony colony);\n \n-    /**\n-     * Write the research tree to NBT.\n-     *\n-     * @param compound the compound.\n-     */\n-    void writeToNBT(final CompoundNBT compound);\n-\n-    /**\n-     * Read the research tree from NBT.\n-     *\n-     * @param compound the compound to read it from.\n-     */\n-    void readFromNBT(final CompoundNBT compound);\n-\n     /**\n      * Handle messages in the client from the server describing the Global Research Tree.\n      * Only used for remote clients.\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\nindex f1e8a151af..f30ebe288a 100644\n--- a/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java\n", "chunk": "@@ -159,7 +158,7 @@ public interface IGlobalResearchTree\n      * Only used for remote clients.\n      * @param buf       the buffer of received network data.\n      */\n-    IMessage handleGlobalResearchTreeMessage(final PacketBuffer buf);\n+    IMessage handleGlobalResearchTreeMessage(final FriendlyByteBuf buf);\n \n     /**\n      * Sends messages to the client from the server describing the Global Research Tree.\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "16b920aeb36a81e191bb10e8450756748a7a8b1b", "committedDate": "2020-12-04 08:24:22 +0000", "message": "Fix evaluation of custom recipes (#5875)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "b886cbdfbf36e6557c2d78a23aaab52a3443f516", "committedDate": "2021-03-18 11:01:52 +0000", "message": "Improve Research Branch Customizability (#6722)"}, {"oid": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "committedDate": "2021-04-25 13:29:24 +0100", "message": "Unlock item tooltip (#6943)"}, {"oid": "d14de7f0841132bf92ce2485ceae65622f1ee625", "committedDate": "2021-07-11 20:02:52 +0100", "message": "Constant and import cleanup (#7368)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjE5Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882193", "body": "Could you refine this to describe the fact that this is for the current research item that is being worked on in the colony?", "bodyText": "Could you refine this to describe the fact that this is for the current research item that is being worked on in the colony?", "bodyHTML": "<p dir=\"auto\">Could you refine this to describe the fact that this is for the current research item that is being worked on in the colony?</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:49:56Z", "path": "src/api/java/com/minecolonies/api/research/ILocalResearch.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import com.minecolonies.api.research.util.ResearchState;\n+\n+/**\n+ * Interface defining how a local research at a colony is.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearch.java b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\nindex 21b16d7372..f710fdf7e2 100644\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n", "chunk": "@@ -5,6 +5,7 @@ import com.minecolonies.api.research.util.ResearchState;\n \n /**\n  * Interface defining how a local research at a colony is.\n+ * This represents how a colony stores researches they finished or started.\n  */\n public interface ILocalResearch\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearch.java b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\nindex 21b16d7372..f710fdf7e2 100644\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n", "chunk": "@@ -5,6 +5,7 @@ import com.minecolonies.api.research.util.ResearchState;\n \n /**\n  * Interface defining how a local research at a colony is.\n+ * This represents how a colony stores researches they finished or started.\n  */\n public interface ILocalResearch\n {\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearch.java b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\nold mode 100644\nnew mode 100755\nindex f710fdf7e2..8dbf22d815\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearch.java\n", "chunk": "@@ -4,57 +4,65 @@ import com.minecolonies.api.research.effects.IResearchEffectManager;\n import com.minecolonies.api.research.util.ResearchState;\n \n /**\n- * Interface defining how a local research at a colony is.\n- * This represents how a colony stores researches they finished or started.\n+ * Interface defining how a local research at a colony is. This represents how a colony stores researches they finished or started.\n  */\n public interface ILocalResearch\n {\n     /**\n      * Getter for the progress of the research.\n+     *\n      * @return the progress in ticks.\n      */\n     int getProgress();\n \n     /**\n      * Getter of the id of the research.\n+     *\n      * @return the String id.\n      */\n     String getId();\n \n     /**\n      * Get the ResearchState of the research.\n+     *\n      * @return the current state.\n      */\n     ResearchState getState();\n \n     /**\n      * Get the string name of the branch.\n+     *\n      * @return the branch name.\n      */\n     String getBranch();\n \n     /**\n      * Getter for the research depth.\n+     *\n      * @return the depth.\n      */\n     int getDepth();\n \n     /**\n      * Set the current research state.\n+     *\n      * @param value the state to set.\n      */\n     void setState(ResearchState value);\n \n     /**\n      * Set the research progress.\n+     *\n      * @param progress the progress to set.\n      */\n     void setProgress(int progress);\n \n     /**\n      * Tick the research to execute it.\n+     *\n      * @param effects the research effects class which holds the information of the colony.\n-     * @param tree the research tree which holds the currently explored tree.\n+     * @param tree    the research tree which holds the currently explored tree.\n+     * @return true if effective.\n      */\n-    void research(IResearchEffectManager effects, ILocalResearchTree tree);\n+    boolean research(IResearchEffectManager effects, ILocalResearchTree tree);\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "f32cd6deb512e86bb17d4f256cb4d2e9cbb1440b", "committedDate": "2020-04-16 10:26:07 +0100", "message": "Fix/#4624 (#4641)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjM0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882347", "body": "that's a long method name. could be more concise? `isBranchAboveLevel6`. better yet, that's a very specific method, could we instead do `getHighestResearchedLevel` and then compare it where it's needed to 6 or etc. ", "bodyText": "that's a long method name. could be more concise? isBranchAboveLevel6. better yet, that's a very specific method, could we instead do getHighestResearchedLevel and then compare it where it's needed to 6 or etc.", "bodyHTML": "<p dir=\"auto\">that's a long method name. could be more concise? <code>isBranchAboveLevel6</code>. better yet, that's a very specific method, could we instead do <code>getHighestResearchedLevel</code> and then compare it where it's needed to 6 or etc.</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:52:45Z", "path": "src/api/java/com/minecolonies/api/research/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface ILocalResearchTree\n+{\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    ILocalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final ILocalResearch research);\n+\n+    /**\n+     * Check if a branch already researched a level 6 research.\n+     * @param branch the branch to check.\n+     * @return true if so.\n+     */\n+    boolean branchAlreadyResearchedLevelSix(final String branch);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex 6673cc588c..9ecc63fc3f 100644\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -25,10 +25,11 @@ public interface ILocalResearchTree\n \n     /**\n      * Check if a branch already researched a level 6 research.\n+     * This is important since only 1 of these can be researched for each branch.\n      * @param branch the branch to check.\n      * @return true if so.\n      */\n-    boolean branchAlreadyResearchedLevelSix(final String branch);\n+    boolean branchFinishedHighestLevel(final String branch);\n \n     /**\n      * Get a list of all research in progress.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex 6673cc588c..9ecc63fc3f 100644\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -25,10 +25,11 @@ public interface ILocalResearchTree\n \n     /**\n      * Check if a branch already researched a level 6 research.\n+     * This is important since only 1 of these can be researched for each branch.\n      * @param branch the branch to check.\n      * @return true if so.\n      */\n-    boolean branchAlreadyResearchedLevelSix(final String branch);\n+    boolean branchFinishedHighestLevel(final String branch);\n \n     /**\n      * Get a list of all research in progress.\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nold mode 100644\nnew mode 100755\nindex 9ecc63fc3f..f408a1fe45\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -19,13 +21,15 @@ public interface ILocalResearchTree\n \n     /**\n      * Add a research to the tree.\n+     *\n      * @param research the research to add.\n+     * @param branch   the branch of the research.\n      */\n     void addResearch(final String branch, final ILocalResearch research);\n \n     /**\n-     * Check if a branch already researched a level 6 research.\n-     * This is important since only 1 of these can be researched for each branch.\n+     * Check if a branch already researched a level 6 research. This is important since only 1 of these can be researched for each branch.\n+     *\n      * @param branch the branch to check.\n      * @return true if so.\n      */\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex f408a1fe45..0c571c9247 100755\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -25,7 +29,7 @@ public interface ILocalResearchTree\n      * @param research the research to add.\n      * @param branch   the branch of the research.\n      */\n-    void addResearch(final String branch, final ILocalResearch research);\n+    void addResearch(final ResourceLocation branch, final ILocalResearch research);\n \n     /**\n      * Check if a branch already researched a level 6 research. This is important since only 1 of these can be researched for each branch.\n", "next_change": null}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex f408a1fe45..0c571c9247 100755\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -33,7 +37,7 @@ public interface ILocalResearchTree\n      * @param branch the branch to check.\n      * @return true if so.\n      */\n-    boolean branchFinishedHighestLevel(final String branch);\n+    boolean branchFinishedHighestLevel(final ResourceLocation branch);\n \n     /**\n      * Get a list of all research in progress.\n", "next_change": null}]}}, {"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nold mode 100644\nnew mode 100755\nindex 9ecc63fc3f..f408a1fe45\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -33,26 +37,30 @@ public interface ILocalResearchTree\n \n     /**\n      * Get a list of all research in progress.\n+     *\n      * @return the list.\n      */\n     List<ILocalResearch> getResearchInProgress();\n \n     /**\n      * Finish a research and remove it from the inProgress list.\n+     *\n      * @param id the id of the research to remove.\n      */\n     void finishResearch(final String id);\n \n     /**\n      * Write the research tree to NBT.\n+     *\n      * @param compound the compound.\n      */\n     void writeToNBT(final CompoundNBT compound);\n \n     /**\n      * Read the research tree from NBT.\n+     *\n      * @param compound the compound to read it from.\n-     * @param effects the effects.\n+     * @param effects  the effects.\n      */\n     void readFromNBT(final CompoundNBT compound, final IResearchEffectManager effects);\n }\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\nindex f408a1fe45..9788734a20 100755\n--- a/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n+++ b/src/api/java/com/minecolonies/api/research/ILocalResearchTree.java\n", "chunk": "@@ -62,5 +90,5 @@ public interface ILocalResearchTree\n      * @param compound the compound to read it from.\n      * @param effects  the effects.\n      */\n-    void readFromNBT(final CompoundNBT compound, final IResearchEffectManager effects);\n+    void readFromNBT(final CompoundTag compound, final IResearchEffectManager effects);\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQzOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882438", "body": "ResourceLocation here", "bodyText": "ResourceLocation here", "bodyHTML": "<p dir=\"auto\">ResourceLocation here</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:53:58Z", "path": "src/api/java/com/minecolonies/api/research/IResearchEffect.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.minecolonies.api.research;\n+\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The effect of a research.\n+ * @param <T> the type of the value.\n+ */\n+public interface IResearchEffect<T>\n+{\n+    /**\n+     * Get the effect of the research.\n+     * @return the effect.\n+     */\n+    T getEffect();\n+\n+    /**\n+     * Set the research effect.\n+     * @param effect the value to set it to.\n+     */\n+    void setEffect(T effect);\n+\n+    /**\n+     * Getter for the ID of the effect.\n+     * @return the String id.\n+     */\n+    String getId();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQ4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882487", "body": "this javadoc makes it sound like only one colony \"holds the tree and effects\", I'd assume that isn't so? ", "bodyText": "this javadoc makes it sound like only one colony \"holds the tree and effects\", I'd assume that isn't so?", "bodyHTML": "<p dir=\"auto\">this javadoc makes it sound like only one colony \"holds the tree and effects\", I'd assume that isn't so?</p>", "author": "Asherslab", "createdAt": "2020-02-02T22:55:04Z", "path": "src/api/java/com/minecolonies/api/research/IResearchManager.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Research manager of the colony holding the tree and effects.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjM4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886380", "bodyText": "Only one colony holds its own local tree", "author": "Raycoms", "createdAt": "2020-02-02T23:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQ4Nw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IResearchManager.java b/src/api/java/com/minecolonies/api/research/IResearchManager.java\nold mode 100644\nnew mode 100755\nindex badd17fbc9..b6209b61ac\n--- a/src/api/java/com/minecolonies/api/research/IResearchManager.java\n+++ b/src/api/java/com/minecolonies/api/research/IResearchManager.java\n", "chunk": "@@ -1,7 +1,9 @@\n package com.minecolonies.api.research;\n \n import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import net.minecraft.block.Block;\n import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.ResourceLocation;\n import org.jetbrains.annotations.NotNull;\n \n /**\n", "next_change": {"commit": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/research/IResearchManager.java b/src/api/java/com/minecolonies/api/research/IResearchManager.java\nindex b6209b61ac..070718f832 100755\n--- a/src/api/java/com/minecolonies/api/research/IResearchManager.java\n+++ b/src/api/java/com/minecolonies/api/research/IResearchManager.java\n", "chunk": "@@ -1,9 +1,9 @@\n package com.minecolonies.api.research;\n \n import com.minecolonies.api.research.effects.IResearchEffectManager;\n-import net.minecraft.block.Block;\n-import net.minecraft.nbt.CompoundNBT;\n-import net.minecraft.util.ResourceLocation;\n+import net.minecraft.world.level.block.Block;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.resources.ResourceLocation;\n import org.jetbrains.annotations.NotNull;\n \n /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzAwOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883008", "body": "should be `RESEARCHER_ID`", "bodyText": "should be RESEARCHER_ID", "bodyHTML": "<p dir=\"auto\">should be <code>RESEARCHER_ID</code></p>", "author": "Asherslab", "createdAt": "2020-02-02T23:03:00Z", "path": "src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n     public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n+    public static final ResourceLocation RESEARCH_ID       = new ResourceLocation(Constants.MOD_ID,\"researcher\");;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex e8e5504b49..02e9821fd4 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -35,7 +35,7 @@ public final class ModJobs\n     public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n     public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n-    public static final ResourceLocation RESEARCH_ID       = new ResourceLocation(Constants.MOD_ID,\"researcher\");;\n+    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");;\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex e8e5504b49..02e9821fd4 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -35,7 +35,7 @@ public final class ModJobs\n     public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n     public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n-    public static final ResourceLocation RESEARCH_ID       = new ResourceLocation(Constants.MOD_ID,\"researcher\");;\n+    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");;\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "d00ba98ab055b3708b586b0953c41e2a928ede15", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 02e9821fd4..6d2205b115 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -35,7 +35,8 @@ public final class ModJobs\n     public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n     public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n-    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");;\n+    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");\n+    public static final ResourceLocation HEALER_ID         = new ResourceLocation(Constants.MOD_ID,\"healer\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "fe395ea80a260da5a9ee329c19258c7814c926e9", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 6d2205b115..3b04363f74 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -37,6 +37,8 @@ public final class ModJobs\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n     public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");\n     public static final ResourceLocation HEALER_ID         = new ResourceLocation(Constants.MOD_ID,\"healer\");\n+    public static final ResourceLocation PUPIL_ID          = new ResourceLocation(Constants.MOD_ID,\"pupil\");\n+    public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID,\"teacher\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "3d2cfef23ee57fd49eaba8a419eddc4b6332a52d", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 3b04363f74..5002e26a68 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -39,6 +39,7 @@ public final class ModJobs\n     public static final ResourceLocation HEALER_ID         = new ResourceLocation(Constants.MOD_ID,\"healer\");\n     public static final ResourceLocation PUPIL_ID          = new ResourceLocation(Constants.MOD_ID,\"pupil\");\n     public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID,\"teacher\");\n+    public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID,\"glassblower\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "7cee98da53ca49d0540b0894b0d5e625558b5361", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 5002e26a68..936c63abd6 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -40,6 +40,7 @@ public final class ModJobs\n     public static final ResourceLocation PUPIL_ID          = new ResourceLocation(Constants.MOD_ID,\"pupil\");\n     public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID,\"teacher\");\n     public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID,\"glassblower\");\n+    public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID,\"dyer\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "4db033f9365a0f149e8cb07f66e00d540c8e4f33", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 936c63abd6..cd723338c1 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -41,6 +41,7 @@ public final class ModJobs\n     public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID,\"teacher\");\n     public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID,\"glassblower\");\n     public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID,\"dyer\");\n+    public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "8958ce0e30774786a7dbfb5418dd9dba46539828", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex cd723338c1..02d27a037d 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -42,6 +42,7 @@ public final class ModJobs\n     public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID,\"glassblower\");\n     public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID,\"dyer\");\n     public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n+    public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID,\"mechanic\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "6c87a2a39e061f7b10d9b3041c05b06742aa944f", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 02d27a037d..39a7f1cb40 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -43,6 +43,7 @@ public final class ModJobs\n     public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID,\"dyer\");\n     public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n     public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID,\"mechanic\");\n+    public static final ResourceLocation PLANTER_ID        = new ResourceLocation(Constants.MOD_ID,\"planter\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "0a816c6a9cd8d3d51a13cc36e60db6ae24bc46a5", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 39a7f1cb40..8baeefe755 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -44,6 +44,8 @@ public final class ModJobs\n     public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n     public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID,\"mechanic\");\n     public static final ResourceLocation PLANTER_ID        = new ResourceLocation(Constants.MOD_ID,\"planter\");\n+    public static final ResourceLocation RABBIT_ID     = new ResourceLocation(Constants.MOD_ID,\"rabbitherder\");\n+    public static final ResourceLocation CONCRETE_ID    = new ResourceLocation(Constants.MOD_ID,\"concretemixer\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "07f05f2a2f00d94946f943bfa16ee5ccd59bda4e", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 8baeefe755..286aa681ed 100644\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -44,8 +44,9 @@ public final class ModJobs\n     public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n     public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID,\"mechanic\");\n     public static final ResourceLocation PLANTER_ID        = new ResourceLocation(Constants.MOD_ID,\"planter\");\n-    public static final ResourceLocation RABBIT_ID     = new ResourceLocation(Constants.MOD_ID,\"rabbitherder\");\n-    public static final ResourceLocation CONCRETE_ID    = new ResourceLocation(Constants.MOD_ID,\"concretemixer\");\n+    public static final ResourceLocation RABBIT_ID         = new ResourceLocation(Constants.MOD_ID,\"rabbitherder\");\n+    public static final ResourceLocation CONCRETE_ID       = new ResourceLocation(Constants.MOD_ID,\"concretemixer\");\n+    public static final ResourceLocation BEEKEEPER_ID      = new ResourceLocation(Constants.MOD_ID,\"beekeeper\");\n \n     public static       JobEntry         placeHolder;\n     public static       JobEntry         builder;\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nold mode 100644\nnew mode 100755\nindex 286aa681ed..9d7eef0757\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -8,86 +8,86 @@ public final class ModJobs\n {\n \n     public static final ResourceLocation PLACEHOLDER_ID    = new ResourceLocation(Constants.MOD_ID, \"placeholder\");\n-    public static final ResourceLocation BUILDER_ID        = new ResourceLocation(Constants.MOD_ID,\"builder\");\n-    public static final ResourceLocation DELIVERY_ID       = new ResourceLocation(Constants.MOD_ID,\"deliveryman\");\n-    public static final ResourceLocation MINER_ID          = new ResourceLocation(Constants.MOD_ID,\"miner\");\n-    public static final ResourceLocation LUMBERJACK_ID     = new ResourceLocation(Constants.MOD_ID,\"lumberjack\");\n-    public static final ResourceLocation FARMER_ID         = new ResourceLocation(Constants.MOD_ID,\"farmer\");\n-    public static final ResourceLocation FISHERMAN_ID      = new ResourceLocation(Constants.MOD_ID,\"fisherman\");\n-    public static final ResourceLocation BAKER_ID          = new ResourceLocation(Constants.MOD_ID,\"baker\");\n-    public static final ResourceLocation COOK_ID           = new ResourceLocation(Constants.MOD_ID,\"cook\");\n-    public static final ResourceLocation SHEPHERD_ID       = new ResourceLocation(Constants.MOD_ID,\"shepherd\");\n-    public static final ResourceLocation COWBOY_ID         = new ResourceLocation(Constants.MOD_ID,\"cowboy\");\n-    public static final ResourceLocation SWINE_HERDER_ID   = new ResourceLocation(Constants.MOD_ID,\"swineherder\");\n-    public static final ResourceLocation CHICKEN_HERDER_ID = new ResourceLocation(Constants.MOD_ID,\"chickenherder\");\n-    public static final ResourceLocation SMELTER_ID        = new ResourceLocation(Constants.MOD_ID,\"smelter\");\n-    public static final ResourceLocation RANGER_ID         = new ResourceLocation(Constants.MOD_ID,\"ranger\");\n-    public static final ResourceLocation KNIGHT_ID         = new ResourceLocation(Constants.MOD_ID,\"knight\");\n-    public static final ResourceLocation COMPOSTER_ID      = new ResourceLocation(Constants.MOD_ID,\"composter\");\n-    public static final ResourceLocation STUDENT_ID        = new ResourceLocation(Constants.MOD_ID,\"student\");\n-    public static final ResourceLocation ARCHER_ID         = new ResourceLocation(Constants.MOD_ID,\"archertraining\");\n-    public static final ResourceLocation COMBAT_ID         = new ResourceLocation(Constants.MOD_ID,\"combattraining\");\n-    public static final ResourceLocation SAWMILL_ID        = new ResourceLocation(Constants.MOD_ID,\"sawmill\");\n-    public static final ResourceLocation BLACKSMITH_ID     = new ResourceLocation(Constants.MOD_ID,\"blacksmith\");\n-    public static final ResourceLocation STONEMASON_ID     = new ResourceLocation(Constants.MOD_ID,\"stonemason\");\n-    public static final ResourceLocation STONE_SMELTERY_ID = new ResourceLocation(Constants.MOD_ID,\"stonesmeltery\");\n-    public static final ResourceLocation CRUSHER_ID        = new ResourceLocation(Constants.MOD_ID,\"crusher\");\n-    public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n-    public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n-    public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n-    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID,\"researcher\");\n-    public static final ResourceLocation HEALER_ID         = new ResourceLocation(Constants.MOD_ID,\"healer\");\n-    public static final ResourceLocation PUPIL_ID          = new ResourceLocation(Constants.MOD_ID,\"pupil\");\n-    public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID,\"teacher\");\n-    public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID,\"glassblower\");\n-    public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID,\"dyer\");\n-    public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID,\"fletcher\");\n-    public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID,\"mechanic\");\n-    public static final ResourceLocation PLANTER_ID        = new ResourceLocation(Constants.MOD_ID,\"planter\");\n-    public static final ResourceLocation RABBIT_ID         = new ResourceLocation(Constants.MOD_ID,\"rabbitherder\");\n-    public static final ResourceLocation CONCRETE_ID       = new ResourceLocation(Constants.MOD_ID,\"concretemixer\");\n-    public static final ResourceLocation BEEKEEPER_ID      = new ResourceLocation(Constants.MOD_ID,\"beekeeper\");\n+    public static final ResourceLocation BUILDER_ID        = new ResourceLocation(Constants.MOD_ID, \"builder\");\n+    public static final ResourceLocation DELIVERY_ID       = new ResourceLocation(Constants.MOD_ID, \"deliveryman\");\n+    public static final ResourceLocation MINER_ID          = new ResourceLocation(Constants.MOD_ID, \"miner\");\n+    public static final ResourceLocation LUMBERJACK_ID     = new ResourceLocation(Constants.MOD_ID, \"lumberjack\");\n+    public static final ResourceLocation FARMER_ID         = new ResourceLocation(Constants.MOD_ID, \"farmer\");\n+    public static final ResourceLocation FISHERMAN_ID      = new ResourceLocation(Constants.MOD_ID, \"fisherman\");\n+    public static final ResourceLocation BAKER_ID          = new ResourceLocation(Constants.MOD_ID, \"baker\");\n+    public static final ResourceLocation COOK_ID           = new ResourceLocation(Constants.MOD_ID, \"cook\");\n+    public static final ResourceLocation SHEPHERD_ID       = new ResourceLocation(Constants.MOD_ID, \"shepherd\");\n+    public static final ResourceLocation COWBOY_ID         = new ResourceLocation(Constants.MOD_ID, \"cowboy\");\n+    public static final ResourceLocation SWINE_HERDER_ID   = new ResourceLocation(Constants.MOD_ID, \"swineherder\");\n+    public static final ResourceLocation CHICKEN_HERDER_ID = new ResourceLocation(Constants.MOD_ID, \"chickenherder\");\n+    public static final ResourceLocation SMELTER_ID        = new ResourceLocation(Constants.MOD_ID, \"smelter\");\n+    public static final ResourceLocation RANGER_ID         = new ResourceLocation(Constants.MOD_ID, \"ranger\");\n+    public static final ResourceLocation KNIGHT_ID         = new ResourceLocation(Constants.MOD_ID, \"knight\");\n+    public static final ResourceLocation COMPOSTER_ID      = new ResourceLocation(Constants.MOD_ID, \"composter\");\n+    public static final ResourceLocation STUDENT_ID        = new ResourceLocation(Constants.MOD_ID, \"student\");\n+    public static final ResourceLocation ARCHER_ID         = new ResourceLocation(Constants.MOD_ID, \"archertraining\");\n+    public static final ResourceLocation COMBAT_ID         = new ResourceLocation(Constants.MOD_ID, \"combattraining\");\n+    public static final ResourceLocation SAWMILL_ID        = new ResourceLocation(Constants.MOD_ID, \"sawmill\");\n+    public static final ResourceLocation BLACKSMITH_ID     = new ResourceLocation(Constants.MOD_ID, \"blacksmith\");\n+    public static final ResourceLocation STONEMASON_ID     = new ResourceLocation(Constants.MOD_ID, \"stonemason\");\n+    public static final ResourceLocation STONE_SMELTERY_ID = new ResourceLocation(Constants.MOD_ID, \"stonesmeltery\");\n+    public static final ResourceLocation CRUSHER_ID        = new ResourceLocation(Constants.MOD_ID, \"crusher\");\n+    public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID, \"sifter\");\n+    public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID, \"florist\");\n+    public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID, \"enchanter\");\n+    public static final ResourceLocation RESEARCHER_ID     = new ResourceLocation(Constants.MOD_ID, \"researcher\");\n+    public static final ResourceLocation HEALER_ID         = new ResourceLocation(Constants.MOD_ID, \"healer\");\n+    public static final ResourceLocation PUPIL_ID          = new ResourceLocation(Constants.MOD_ID, \"pupil\");\n+    public static final ResourceLocation TEACHER_ID        = new ResourceLocation(Constants.MOD_ID, \"teacher\");\n+    public static final ResourceLocation GLASSBLOWER_ID    = new ResourceLocation(Constants.MOD_ID, \"glassblower\");\n+    public static final ResourceLocation DYER_ID           = new ResourceLocation(Constants.MOD_ID, \"dyer\");\n+    public static final ResourceLocation FLETCHER_ID       = new ResourceLocation(Constants.MOD_ID, \"fletcher\");\n+    public static final ResourceLocation MECHANIC_ID       = new ResourceLocation(Constants.MOD_ID, \"mechanic\");\n+    public static final ResourceLocation PLANTER_ID        = new ResourceLocation(Constants.MOD_ID, \"planter\");\n+    public static final ResourceLocation RABBIT_ID         = new ResourceLocation(Constants.MOD_ID, \"rabbitherder\");\n+    public static final ResourceLocation CONCRETE_ID       = new ResourceLocation(Constants.MOD_ID, \"concretemixer\");\n+    public static final ResourceLocation BEEKEEPER_ID      = new ResourceLocation(Constants.MOD_ID, \"beekeeper\");\n \n-    public static       JobEntry         placeHolder;\n-    public static       JobEntry         builder;\n-    public static       JobEntry         delivery;\n-    public static       JobEntry         miner;\n-    public static       JobEntry         lumberjack;\n-    public static       JobEntry         farmer;\n-    public static       JobEntry         fisherman;\n-    public static       JobEntry         baker;\n-    public static       JobEntry         cook;\n-    public static       JobEntry         shepherd;\n-    public static       JobEntry         cowboy;\n-    public static       JobEntry         swineHerder;\n-    public static       JobEntry         chickenHerder;\n-    public static       JobEntry         smelter;\n-    public static       JobEntry         ranger;\n-    public static       JobEntry         knight;\n-    public static       JobEntry         composter;\n-    public static       JobEntry         student;\n-    public static       JobEntry         archer;\n-    public static       JobEntry         combat;\n-    public static       JobEntry         sawmill;\n-    public static       JobEntry         blacksmith;\n-    public static       JobEntry         stoneMason;\n-    public static       JobEntry         stoneSmeltery;\n-    public static       JobEntry         crusher;\n-    public static       JobEntry         sifter;\n-    public static       JobEntry         florist;\n-    public static       JobEntry         enchanter;\n-    public static       JobEntry         researcher;\n-    public static       JobEntry         healer;\n-    public static       JobEntry         pupil;\n-    public static       JobEntry         teacher;\n-    public static       JobEntry         glassblower;\n-    public static       JobEntry         dyer;\n-    public static       JobEntry         fletcher;\n-    public static       JobEntry         mechanic;\n-    public static       JobEntry         planter;\n-    public static       JobEntry         rabbitHerder;\n-    public static       JobEntry         concreteMixer;\n-    public static       JobEntry         beekeeper;\n+    public static JobEntry placeHolder;\n+    public static JobEntry builder;\n+    public static JobEntry delivery;\n+    public static JobEntry miner;\n+    public static JobEntry lumberjack;\n+    public static JobEntry farmer;\n+    public static JobEntry fisherman;\n+    public static JobEntry baker;\n+    public static JobEntry cook;\n+    public static JobEntry shepherd;\n+    public static JobEntry cowboy;\n+    public static JobEntry swineHerder;\n+    public static JobEntry chickenHerder;\n+    public static JobEntry smelter;\n+    public static JobEntry ranger;\n+    public static JobEntry knight;\n+    public static JobEntry composter;\n+    public static JobEntry student;\n+    public static JobEntry archer;\n+    public static JobEntry combat;\n+    public static JobEntry sawmill;\n+    public static JobEntry blacksmith;\n+    public static JobEntry stoneMason;\n+    public static JobEntry stoneSmeltery;\n+    public static JobEntry crusher;\n+    public static JobEntry sifter;\n+    public static JobEntry florist;\n+    public static JobEntry enchanter;\n+    public static JobEntry researcher;\n+    public static JobEntry healer;\n+    public static JobEntry pupil;\n+    public static JobEntry teacher;\n+    public static JobEntry glassblower;\n+    public static JobEntry dyer;\n+    public static JobEntry fletcher;\n+    public static JobEntry mechanic;\n+    public static JobEntry planter;\n+    public static JobEntry rabbitHerder;\n+    public static JobEntry concreteMixer;\n+    public static JobEntry beekeeper;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "6b0de5d65d28abc77a1fbd12bdb696b037eb6c33", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 9d7eef0757..d4ca92ed39 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -88,6 +89,7 @@ public final class ModJobs\n     public static JobEntry rabbitHerder;\n     public static JobEntry concreteMixer;\n     public static JobEntry beekeeper;\n+    public static JobEntry cookassistant;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "228b1f09dadef51bb113a97d51bfb2feb86c3310", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex d4ca92ed39..bc4272d1e3 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -90,6 +93,7 @@ public final class ModJobs\n     public static JobEntry concreteMixer;\n     public static JobEntry beekeeper;\n     public static JobEntry cookassistant;\n+    public static JobEntry quarrier;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "f2c910f0d8389d98016b91799f4576ff1dd0f2ae", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex bc4272d1e3..552bdcc640 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -94,6 +95,7 @@ public final class ModJobs\n     public static JobEntry beekeeper;\n     public static JobEntry cookassistant;\n     public static JobEntry quarrier;\n+    public static JobEntry druid;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "e6d53b1cc069612ce69e32a534c23a16cad60e54", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 552bdcc640..c0394de01d 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -94,6 +95,7 @@ public final class ModJobs\n     public static JobEntry concreteMixer;\n     public static JobEntry beekeeper;\n     public static JobEntry cookassistant;\n+    public static JobEntry netherworker;\n     public static JobEntry quarrier;\n     public static JobEntry druid;\n \n", "next_change": {"commit": "b4348579926cacffcc078481a0630aa3068b18d9", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex c0394de01d..9c82a51933 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -98,6 +99,7 @@ public final class ModJobs\n     public static JobEntry netherworker;\n     public static JobEntry quarrier;\n     public static JobEntry druid;\n+    public static JobEntry alchemist;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "8a289e6c6dcfda351239e5162bdbeb841d09c5c7", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 9c82a51933..29aef899ea 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -54,52 +54,52 @@ public final class ModJobs\n     public static final ResourceLocation DRUID_ID          = new ResourceLocation(Constants.MOD_ID, \"druid\");\n     public static final ResourceLocation ALCHEMIST_ID      = new ResourceLocation(Constants.MOD_ID, \"alchemist\");\n \n-    public static JobEntry placeHolder;\n-    public static JobEntry builder;\n-    public static JobEntry delivery;\n-    public static JobEntry miner;\n-    public static JobEntry lumberjack;\n-    public static JobEntry farmer;\n-    public static JobEntry fisherman;\n-    public static JobEntry undertaker;\n-    public static JobEntry baker;\n-    public static JobEntry cook;\n-    public static JobEntry shepherd;\n-    public static JobEntry cowboy;\n-    public static JobEntry swineHerder;\n-    public static JobEntry chickenHerder;\n-    public static JobEntry smelter;\n-    public static JobEntry ranger;\n-    public static JobEntry knight;\n-    public static JobEntry composter;\n-    public static JobEntry student;\n-    public static JobEntry archer;\n-    public static JobEntry combat;\n-    public static JobEntry sawmill;\n-    public static JobEntry blacksmith;\n-    public static JobEntry stoneMason;\n-    public static JobEntry stoneSmeltery;\n-    public static JobEntry crusher;\n-    public static JobEntry sifter;\n-    public static JobEntry florist;\n-    public static JobEntry enchanter;\n-    public static JobEntry researcher;\n-    public static JobEntry healer;\n-    public static JobEntry pupil;\n-    public static JobEntry teacher;\n-    public static JobEntry glassblower;\n-    public static JobEntry dyer;\n-    public static JobEntry fletcher;\n-    public static JobEntry mechanic;\n-    public static JobEntry planter;\n-    public static JobEntry rabbitHerder;\n-    public static JobEntry concreteMixer;\n-    public static JobEntry beekeeper;\n-    public static JobEntry cookassistant;\n-    public static JobEntry netherworker;\n-    public static JobEntry quarrier;\n-    public static JobEntry druid;\n-    public static JobEntry alchemist;\n+    public static RegistryObject<JobEntry> placeHolder;\n+    public static RegistryObject<JobEntry> builder;\n+    public static RegistryObject<JobEntry> delivery;\n+    public static RegistryObject<JobEntry> miner;\n+    public static RegistryObject<JobEntry> lumberjack;\n+    public static RegistryObject<JobEntry> farmer;\n+    public static RegistryObject<JobEntry> fisherman;\n+    public static RegistryObject<JobEntry> undertaker;\n+    public static RegistryObject<JobEntry> baker;\n+    public static RegistryObject<JobEntry> cook;\n+    public static RegistryObject<JobEntry> shepherd;\n+    public static RegistryObject<JobEntry> cowboy;\n+    public static RegistryObject<JobEntry> swineHerder;\n+    public static RegistryObject<JobEntry> chickenHerder;\n+    public static RegistryObject<JobEntry> smelter;\n+    public static RegistryObject<JobEntry> ranger;\n+    public static RegistryObject<JobEntry> knight;\n+    public static RegistryObject<JobEntry> composter;\n+    public static RegistryObject<JobEntry> student;\n+    public static RegistryObject<JobEntry> archer;\n+    public static RegistryObject<JobEntry> combat;\n+    public static RegistryObject<JobEntry> sawmill;\n+    public static RegistryObject<JobEntry> blacksmith;\n+    public static RegistryObject<JobEntry> stoneMason;\n+    public static RegistryObject<JobEntry> stoneSmeltery;\n+    public static RegistryObject<JobEntry> crusher;\n+    public static RegistryObject<JobEntry> sifter;\n+    public static RegistryObject<JobEntry> florist;\n+    public static RegistryObject<JobEntry> enchanter;\n+    public static RegistryObject<JobEntry> researcher;\n+    public static RegistryObject<JobEntry> healer;\n+    public static RegistryObject<JobEntry> pupil;\n+    public static RegistryObject<JobEntry> teacher;\n+    public static RegistryObject<JobEntry> glassblower;\n+    public static RegistryObject<JobEntry> dyer;\n+    public static RegistryObject<JobEntry> fletcher;\n+    public static RegistryObject<JobEntry> mechanic;\n+    public static RegistryObject<JobEntry> planter;\n+    public static RegistryObject<JobEntry> rabbitHerder;\n+    public static RegistryObject<JobEntry> concreteMixer;\n+    public static RegistryObject<JobEntry> beekeeper;\n+    public static RegistryObject<JobEntry> cookassistant;\n+    public static RegistryObject<JobEntry> netherworker;\n+    public static RegistryObject<JobEntry> quarrier;\n+    public static RegistryObject<JobEntry> druid;\n+    public static RegistryObject<JobEntry> alchemist;\n \n     private ModJobs()\n     {\n", "next_change": {"commit": "96c6124860fd0705b108334ec720d8e5ebc1eb94", "changed_code": [{"header": "diff --git a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\nindex 29aef899ea..67162ad60b 100755\n--- a/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n+++ b/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java\n", "chunk": "@@ -101,8 +104,18 @@ public final class ModJobs\n     public static RegistryObject<JobEntry> druid;\n     public static RegistryObject<JobEntry> alchemist;\n \n+    /**\n+     * List of all jobs.\n+     */\n+    public static List<ResourceLocation> jobs = new ArrayList<>() { };\n+\n     private ModJobs()\n     {\n         throw new IllegalStateException(\"Tried to initialize: ModJobs but this is a Utility class.\");\n     }\n+\n+    public static List<ResourceLocation> getJobs()\n+    {\n+        return jobs;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "d00ba98ab055b3708b586b0953c41e2a928ede15", "committedDate": "2020-03-08 18:17:20 +0000", "message": "Feature/hospital (#4396)"}, {"oid": "fe395ea80a260da5a9ee329c19258c7814c926e9", "committedDate": "2020-04-06 22:14:46 +0100", "message": "Feature/school (#4585)"}, {"oid": "3d2cfef23ee57fd49eaba8a419eddc4b6332a52d", "committedDate": "2020-04-25 15:33:06 +0100", "message": "Glassblower (#4751)"}, {"oid": "7cee98da53ca49d0540b0894b0d5e625558b5361", "committedDate": "2020-04-30 11:20:43 +0100", "message": "Feature/dyer (#4807)"}, {"oid": "4db033f9365a0f149e8cb07f66e00d540c8e4f33", "committedDate": "2020-05-05 14:23:12 +0200", "message": "Add Fletcher Worker (#4890)"}, {"oid": "8958ce0e30774786a7dbfb5418dd9dba46539828", "committedDate": "2020-05-09 09:26:09 +0100", "message": "Feature/mechanist (#4933)"}, {"oid": "6c87a2a39e061f7b10d9b3041c05b06742aa944f", "committedDate": "2020-05-14 18:45:13 +0100", "message": "Feature/plantation (#4950)"}, {"oid": "0a816c6a9cd8d3d51a13cc36e60db6ae24bc46a5", "committedDate": "2020-06-21 11:35:06 +0100", "message": "Feature/new workers (#5230)"}, {"oid": "07f05f2a2f00d94946f943bfa16ee5ccd59bda4e", "committedDate": "2020-06-22 13:14:11 +0100", "message": "Add beekeeper (#5127)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "6b0de5d65d28abc77a1fbd12bdb696b037eb6c33", "committedDate": "2020-07-30 16:04:44 +0100", "message": "Upgrade the cook, and a few more recipes (#5383)"}, {"oid": "a0e3fc43c8a7e6adb3461bbe7cab986417eabedd", "committedDate": "2021-04-20 15:47:11 +0100", "message": "New Graveyard Building - New Graves - New Undertaker Job (#6737)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "228b1f09dadef51bb113a97d51bfb2feb86c3310", "committedDate": "2022-01-30 21:57:13 -0300", "message": "Port Quarry to 1.18"}, {"oid": "f2c910f0d8389d98016b91799f4576ff1dd0f2ae", "committedDate": "2022-02-27 21:41:23 -0300", "message": "Feature/witch (#8084)"}, {"oid": "e6d53b1cc069612ce69e32a534c23a16cad60e54", "committedDate": "2022-03-06 17:34:40 -0300", "message": "Netherminer (#7884)"}, {"oid": "b4348579926cacffcc078481a0630aa3068b18d9", "committedDate": "2022-05-04 17:58:28 -0300", "message": "Feature/alchemist (#8286)"}, {"oid": "8a289e6c6dcfda351239e5162bdbeb841d09c5c7", "committedDate": "2022-06-17 06:00:26 -0300", "message": "more registry mess"}, {"oid": "96c6124860fd0705b108334ec720d8e5ebc1eb94", "committedDate": "2022-06-17 15:11:29 -0300", "message": "playable"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzE0OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883149", "body": "review the JavaDoc in this class. \"Lumberjack\" ", "bodyText": "review the JavaDoc in this class. \"Lumberjack\"", "bodyHTML": "<p dir=\"auto\">review the JavaDoc in this class. \"Lumberjack\"</p>", "author": "Asherslab", "createdAt": "2020-02-02T23:05:19Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.views.View;\n+import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingUniversity;\n+import net.minecraft.util.ResourceLocation;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.minecolonies.api.util.constant.TranslationConstants.*;\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+/**\n+ * Window for the lumberjack hut.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\nindex 77797079ca..f35398142d 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n", "chunk": "@@ -16,7 +16,7 @@ import static com.minecolonies.api.util.constant.TranslationConstants.*;\n import static com.minecolonies.api.util.constant.WindowConstants.*;\n \n /**\n- * Window for the lumberjack hut.\n+ * Window for the university.\n  */\n public class WindowHutUniversity extends AbstractWindowWorkerBuilding<BuildingUniversity.View>\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\nindex 77797079ca..f35398142d 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n", "chunk": "@@ -16,7 +16,7 @@ import static com.minecolonies.api.util.constant.TranslationConstants.*;\n import static com.minecolonies.api.util.constant.WindowConstants.*;\n \n /**\n- * Window for the lumberjack hut.\n+ * Window for the university.\n  */\n public class WindowHutUniversity extends AbstractWindowWorkerBuilding<BuildingUniversity.View>\n {\n", "next_change": {"commit": "3004c9f66cc2474053828ce3a949d6695795944a", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\nindex f35398142d..bdefa3232f 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n", "chunk": "@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.minecolonies.api.util.constant.TranslationConstants.*;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_GUI_UNIVERSITY;\n import static com.minecolonies.api.util.constant.WindowConstants.*;\n \n /**\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\nold mode 100644\nnew mode 100755\nindex bdefa3232f..55b8dabc02\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n", "chunk": "@@ -1,15 +1,24 @@\n package com.minecolonies.coremod.client.gui;\n \n-import com.ldtteam.blockout.controls.Button;\n-import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.Color;\n+import com.ldtteam.blockout.Alignment;\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.PaneBuilders;\n+import com.ldtteam.blockout.controls.*;\n import com.ldtteam.blockout.views.View;\n import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.research.IResearchRequirement;\n import com.minecolonies.api.util.constant.Constants;\n import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingUniversity;\n+import com.minecolonies.coremod.research.AlternateBuildingResearchRequirement;\n+import com.minecolonies.coremod.research.BuildingResearchRequirement;\n+import com.minecolonies.coremod.research.ResearchResearchRequirement;\n import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.text.*;\n import org.jetbrains.annotations.NotNull;\n \n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n \n import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_GUI_UNIVERSITY;\n", "next_change": {"commit": "2d926f5df0f808f91bc4147e8b6721fcb5b9b903", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversityModule.java\nold mode 100755\nnew mode 100644\nsimilarity index 97%\nrename from src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\nrename to src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversityModule.java\nindex 55b8dabc02..6cb45c48fd\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversityModule.java\n", "chunk": "@@ -27,7 +26,7 @@ import static com.minecolonies.api.util.constant.WindowConstants.*;\n /**\n  * Window for the university.\n  */\n-public class WindowHutUniversity extends AbstractWindowWorkerBuilding<BuildingUniversity.View>\n+public class WindowHutUniversityModule extends AbstractWindowWorkerModuleBuilding<BuildingUniversity.View>\n {\n     /**\n      * The list of branches of the tree.\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "d513985c41d12f6cefe2b5439d446578111db0b8", "committedDate": "2021-02-15 22:42:08 +0000", "message": "1.16/bump structurize (#6502)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "70271772ab3a09fa5a440deaf69984418a263477", "committedDate": "2021-03-11 15:50:46 +0000", "message": "Optimize imports (#6662)"}, {"oid": "2d926f5df0f808f91bc4147e8b6721fcb5b9b903", "committedDate": "2021-03-16 16:58:59 +0000", "message": "Create modular windows (#6742)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzU0Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883542", "body": "you seem to have left some methods from the cow herder building in here", "bodyText": "you seem to have left some methods from the cow herder building in here", "bodyHTML": "<p dir=\"auto\">you seem to have left some methods from the cow herder building in here</p>", "author": "Asherslab", "createdAt": "2020-02-02T23:10:09Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java", "diffHunk": "@@ -0,0 +1,238 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.research.ILocalResearch;\n+import com.minecolonies.coremod.client.gui.WindowHutUniversity;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobResearch;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_BOOKCASES;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Creates a new building for the university.\n+ */\n+public class BuildingUniversity extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String UNIVERSITY = \"university\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * List of registered barrels.\n+     */\n+    private final List<BlockPos> bookCases = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingUniversity(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return UNIVERSITY;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return UNIVERSITY;\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT furnaceTagList = compound.getList(TAG_BOOKCASES, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < furnaceTagList.size(); ++i)\n+        {\n+            bookCases.add(NBTUtil.readBlockPos(furnaceTagList.getCompound(i).getCompound(TAG_POS)));\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        @NotNull final ListNBT bookcaseTagList = new ListNBT();\n+        for (@NotNull final BlockPos entry : bookCases)\n+        {\n+            @NotNull final CompoundNBT bookCompound = new CompoundNBT();\n+            bookCompound.put(TAG_POS, NBTUtil.writeBlockPos(entry));\n+            bookcaseTagList.add(bookCompound);\n+        }\n+        compound.put(TAG_BOOKCASES, bookcaseTagList);\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        //todo we might in the future want to add our own oredict tag to this.\n+        if (block == Blocks.BOOKSHELF)\n+        {\n+            bookCases.add(pos);\n+        }\n+    }\n+\n+    /**\n+     * Returns a random bookshelf from the list.\n+     *\n+     * @return the position of it.\n+     */\n+    public BlockPos getRandomBookShelf()\n+    {\n+        if (bookCases.isEmpty())\n+        {\n+            return getPosition();\n+        }\n+        final BlockPos returnPos = bookCases.get(random.nextInt(bookCases.size()));\n+        if (colony.getWorld().getBlockState(returnPos).getBlock() == Blocks.BOOKSHELF)\n+        {\n+            return returnPos;\n+        }\n+        bookCases.remove(returnPos);\n+        return getPosition();\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        return new JobResearch(citizen);\n+    }\n+\n+    @Override\n+    public BuildingEntry getBuildingRegistryEntry()\n+    {\n+        return ModBuildings.university;\n+    }\n+\n+    @Override\n+    public void onColonyTick(@NotNull final IColony colony)\n+    {\n+        super.onColonyTick(colony);\n+\n+        final List<ILocalResearch> inProgress= colony.getResearchManager().getResearchTree().getResearchInProgress();\n+\n+        int i = 1;\n+        for (final ILocalResearch research : inProgress)\n+        {\n+            if (i > getAssignedCitizen().size())\n+            {\n+                return;\n+            }\n+\n+            colony.getResearchManager().getResearchTree().getResearch(research.getBranch(), research.getId()).research(colony.getResearchManager().getResearchEffects(), colony.getResearchManager().getResearchTree());\n+            this.markDirty();\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * ClientSide representation of the building.\n+     */\n+    public static class View extends AbstractBuildingWorker.View\n+    {\n+        /**\n+         * Milk Cows or not.\n+         */\n+        private boolean milkCows = true;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nindex 46f57b92ad..0472198d5f 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -193,11 +193,6 @@ public class BuildingUniversity extends AbstractBuildingWorker\n      */\n     public static class View extends AbstractBuildingWorker.View\n     {\n-        /**\n-         * Milk Cows or not.\n-         */\n-        private boolean milkCows = true;\n-\n         /**\n          * Instantiates the view of the building.\n          * @param c the colonyView.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nindex 46f57b92ad..0472198d5f 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -193,11 +193,6 @@ public class BuildingUniversity extends AbstractBuildingWorker\n      */\n     public static class View extends AbstractBuildingWorker.View\n     {\n-        /**\n-         * Milk Cows or not.\n-         */\n-        private boolean milkCows = true;\n-\n         /**\n          * Instantiates the view of the building.\n          * @param c the colonyView.\n", "next_change": {"commit": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nold mode 100644\nnew mode 100755\nindex 0472198d5f..91da763fda\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -195,6 +228,7 @@ public class BuildingUniversity extends AbstractBuildingWorker\n     {\n         /**\n          * Instantiates the view of the building.\n+         *\n          * @param c the colonyView.\n          * @param l the location of the block.\n          */\n", "next_change": {"commit": "200aa5f5716c2425623c0ce10e4ed4122ab2efe4", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nindex 91da763fda..6f0eaddc71 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -207,24 +217,65 @@ public class BuildingUniversity extends AbstractBuildingWorker\n                 return;\n             }\n \n+            for (final ICitizenData data : getAssignedCitizen())\n+            {\n+                data.getCitizenSkillHandler().addXpToSkill(getSecondarySkill(), 25.0, data);\n+            }\n+\n             if (colony.getResearchManager()\n                   .getResearchTree()\n                   .getResearch(research.getBranch(), research.getId())\n                   .research(colony.getResearchManager().getResearchEffects(), colony.getResearchManager().getResearchTree()))\n             {\n-                LanguageHandler.sendPlayersMessage(colony.getMessagePlayerEntities(),\n-                  RESEARCH_CONCLUDED + random.nextInt(3),\n-                  IGlobalResearchTree.getInstance().getResearch(research.getBranch(), research.getId()).getDesc());\n+                onSuccess(research);\n             }\n-            this.markDirty();\n             i++;\n         }\n     }\n \n+    /**\n+     * Called on successfully concluding a research.\n+     * @param research the concluded research.\n+     */\n+    public void onSuccess(final ILocalResearch research)\n+    {\n+        for (final ICitizenData citizen : colony.getCitizenManager().getCitizens())\n+        {\n+            citizen.applyResearchEffects();\n+        }\n+\n+        final TranslationTextComponent message = new TranslationTextComponent(RESEARCH_CONCLUDED + ThreadLocalRandom.current().nextInt(3),\n+         IGlobalResearchTree.getInstance().getResearch(research.getBranch(), research.getId()).getName());\n+\n+        for(PlayerEntity player : colony.getMessagePlayerEntities())\n+        {\n+            player.sendMessage(message, player.getUniqueID());\n+        }\n+        colony.getResearchManager().checkAutoStartResearch();\n+        this.markDirty();\n+    }\n+\n+    @Override\n+    public void processOfflineTime(final long time)\n+    {\n+        if (getBuildingLevel() >= OFFLINE_PROCESSING_LEVEL_CAP && time > 0)\n+        {\n+            LanguageHandler.sendPlayersMessage(colony.getMessagePlayerEntities(),\n+              \"entity.researcher.moreknowledge\");\n+            for (final ICitizenData citizenData : getAssignedCitizen())\n+            {\n+                if (citizenData.getJob() != null)\n+                {\n+                    citizenData.getJob().processOfflineTime(time);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * ClientSide representation of the building.\n      */\n-    public static class View extends AbstractBuildingWorker.View\n+    public static class View extends AbstractBuildingWorkerView\n     {\n         /**\n          * Instantiates the view of the building.\n", "next_change": {"commit": "82aae21fafe3684aaa2a2443f879ccc2b7ce9ae5", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nindex 6f0eaddc71..4227523d9e 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -275,7 +208,7 @@ public class BuildingUniversity extends AbstractBuildingWorker\n     /**\n      * ClientSide representation of the building.\n      */\n-    public static class View extends AbstractBuildingWorkerView\n+    public static class View extends AbstractBuildingView\n     {\n         /**\n          * Instantiates the view of the building.\n", "next_change": {"commit": "e37660987c56344c86fa46f5ec125eb880a01cb4", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\nindex 4227523d9e..db76dc4878 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java\n", "chunk": "@@ -204,28 +204,4 @@ public class BuildingUniversity extends AbstractBuilding\n             }\n         }\n     }\n-\n-    /**\n-     * ClientSide representation of the building.\n-     */\n-    public static class View extends AbstractBuildingView\n-    {\n-        /**\n-         * Instantiates the view of the building.\n-         *\n-         * @param c the colonyView.\n-         * @param l the location of the block.\n-         */\n-        public View(final IColonyView c, final BlockPos l)\n-        {\n-            super(c, l);\n-        }\n-\n-        @NotNull\n-        @Override\n-        public BOWindow getWindow()\n-        {\n-            return new WindowHutWorkerModulePlaceholder<>(this, UNIVERSITY);\n-        }\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "d00ba98ab055b3708b586b0953c41e2a928ede15", "committedDate": "2020-03-08 18:17:20 +0000", "message": "Feature/hospital (#4396)"}, {"oid": "1fdde5f3da396a306134f6cffb814e17bb79d1f0", "committedDate": "2020-03-20 08:57:10 +0000", "message": "Feature/skill rework (#4447)"}, {"oid": "f32cd6deb512e86bb17d4f256cb4d2e9cbb1440b", "committedDate": "2020-04-16 10:26:07 +0100", "message": "Fix/#4624 (#4641)"}, {"oid": "e2f130c96f9b7e00144d7c45c52bd5e44a483335", "committedDate": "2020-04-20 14:39:18 +0100", "message": "Feature/cook recipes (#4679)"}, {"oid": "be1d656dff393197b60055cc66d224f83acac391", "committedDate": "2020-05-01 19:58:18 +0100", "message": "More fixes (#4825)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "eef9b87e48e377864fa8e7de8505353e1cc76f82", "committedDate": "2020-08-19 09:48:40 +0100", "message": "Sleeping changes (#5593) (#5607)"}, {"oid": "f47246c2d7ba221381a340966ab5acc303b4bac3", "committedDate": "2020-08-29 19:03:12 +0100", "message": "Enable Offline Time for research + small fixes (#5658)"}, {"oid": "fa02fffde0f64943502d569b7229a14e6d36aa35", "committedDate": "2020-09-03 23:11:11 +0100", "message": "Show a tooltip on not yet researched hut blocks (#5662)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "2d926f5df0f808f91bc4147e8b6721fcb5b9b903", "committedDate": "2021-03-16 16:58:59 +0000", "message": "Create modular windows (#6742)"}, {"oid": "5d8cd06eeca33d405c1888c2660c4d62db8e30ba", "committedDate": "2021-04-04 13:41:21 +0100", "message": "Feature/settings module (#6852)"}, {"oid": "200aa5f5716c2425623c0ce10e4ed4122ab2efe4", "committedDate": "2021-06-27 23:18:47 +0100", "message": "Feature/crafting modules (#7253)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "1aa76ebc9afb9f7b46a8aff40f9c307e89133925", "committedDate": "2021-07-18 18:12:52 +0100", "message": "Feature/farm+unimodule (#7404)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "cd9baf396d56ad994782d1caba00656c56aa82a8", "committedDate": "2021-08-28 14:07:06 -0300", "message": "fix blockout to blockui"}, {"oid": "69386c0528997093d6566e6084ed9d7cee16e174", "committedDate": "2021-08-28 14:10:42 -0300", "message": "solve BO window rename"}, {"oid": "08ecd90a3a1d428516d8e84b4672e003a57efe03", "committedDate": "2021-10-08 11:46:15 +0100", "message": "Fix research building detection (#7632)"}, {"oid": "82aae21fafe3684aaa2a2443f879ccc2b7ce9ae5", "committedDate": "2021-11-17 14:23:33 -0300", "message": "Assignment rework (#7749)"}, {"oid": "e37660987c56344c86fa46f5ec125eb880a01cb4", "committedDate": "2021-11-28 14:49:55 +0000", "message": "Fix 7794 (#7796)"}, {"oid": "6886e92c0207e1287f2470058a5cf863422e96c9", "committedDate": "2021-12-01 11:16:45 -0300", "message": "1.18 port Part 1"}, {"oid": "a9dd0c15c056bd70596c44d8d11512905e985f82", "committedDate": "2022-03-20 13:40:30 -0300", "message": " Allow hiring of employed workers (#8123)"}, {"oid": "f37e9ab5ce7a9ed86bfea5d841def8a2cf10ac21", "committedDate": "2022-05-02 15:21:39 -0300", "message": "Merge branch 'lang-changes-port' into version/1.18"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}, {"oid": "8a289e6c6dcfda351239e5162bdbeb841d09c5c7", "committedDate": "2022-06-17 06:00:26 -0300", "message": "more registry mess"}, {"oid": "dd57bdd1a8d96e256cfb44b5183e12b68478e161", "committedDate": "2022-06-18 14:39:56 -0300", "message": "Further cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzY3OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883679", "body": "this is not for recipes", "bodyText": "this is not for recipes", "bodyHTML": "<p dir=\"auto\">this is not for recipes</p>", "author": "Asherslab", "createdAt": "2020-02-02T23:12:04Z", "path": "src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.minecolonies.coremod.research;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.research.factories.IGlobalResearchFactory;\n+import com.minecolonies.api.research.IGlobalResearch;\n+import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.research.IResearchEffect;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.*;\n+\n+/**\n+ * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdef3e96714534552767cfaa235a3ce238d0531d", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\nindex e83c6551ae..ddb23fd02f 100644\n--- a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n", "chunk": "@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n import static com.minecolonies.api.research.util.ResearchConstants.*;\n \n /**\n- * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ * Factory implementation taking care of creating new instances, serializing and deserializing GloblaResearch.\n  */\n public class GlobalResearchFactory implements IGlobalResearchFactory\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\nindex e83c6551ae..07f3280b5f 100644\n--- a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n", "chunk": "@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n import static com.minecolonies.api.research.util.ResearchConstants.*;\n \n /**\n- * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ * Factory implementation taking care of creating new instances, serializing and deserializing GloblaResearch.\n  */\n public class GlobalResearchFactory implements IGlobalResearchFactory\n {\n", "next_change": {"commit": "e7f3551dad1ee7289a5152481c81d4dc11614676", "changed_code": [{"header": "diff --git a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\nold mode 100644\nnew mode 100755\nindex 07f3280b5f..54b5605878\n--- a/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n+++ b/src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java\n", "chunk": "@@ -1,24 +1,33 @@\n package com.minecolonies.coremod.research;\n \n import com.google.common.reflect.TypeToken;\n-import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n-import com.minecolonies.api.research.factories.IGlobalResearchFactory;\n+import com.minecolonies.api.crafting.ItemStorage;\n import com.minecolonies.api.research.IGlobalResearch;\n-import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.research.IResearchRequirement;\n import com.minecolonies.api.research.effects.IResearchEffect;\n+import com.minecolonies.api.research.effects.registry.IResearchEffectRegistry;\n+import com.minecolonies.api.research.factories.IGlobalResearchFactory;\n+import com.minecolonies.api.research.registry.IResearchRequirementRegistry;\n import com.minecolonies.api.util.NBTUtils;\n import com.minecolonies.api.util.constant.TypeConstants;\n+import net.minecraft.item.ItemStack;\n import net.minecraft.nbt.CompoundNBT;\n import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.text.TranslationTextComponent;\n import net.minecraftforge.common.util.Constants;\n+import net.minecraftforge.registries.ForgeRegistries;\n import org.jetbrains.annotations.NotNull;\n \n+import java.util.Objects;\n+\n import static com.minecolonies.api.research.util.ResearchConstants.*;\n \n /**\n- * Factory implementation taking care of creating new instances, serializing and deserializing GloblaResearch.\n+ * Factory implementation taking care of creating new instances, serializing and deserializing GlobalResearch.\n  */\n public class GlobalResearchFactory implements IGlobalResearchFactory\n {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a66e25c830c25fa223cd6b85c53174b81ac1fa72", "message": "Merge commit", "committedDate": null}, {"oid": "5f7ad82f9c291d343b724e135f289e8d1a649b50", "committedDate": "2020-02-11 09:33:24 -0300", "message": "Finish research combat tree (#4315)"}, {"oid": "3004c9f66cc2474053828ce3a949d6695795944a", "committedDate": "2020-04-23 12:55:27 +0100", "message": "Jdoc fixes (#4722)"}, {"oid": "01426aecde93d920bb7b249bc86ccc1ce48df42f", "committedDate": "2020-06-07 22:19:59 +0100", "message": "Cleanup code warnings (#5162)"}, {"oid": "d1ebb34de4124bbba9f535c9e3b81b79639b89fd", "committedDate": "2020-07-02 16:35:52 +0200", "message": "[Omnibus] Several PRs at once. (#5326)"}, {"oid": "a86d299410ca7dbb3f1a9baa7d02b84c96fe029a", "committedDate": "2020-07-12 17:21:03 +0100", "message": "Tough sunday"}, {"oid": "b92af9bacdaa909c927b13fe8a4ef4532a02e6a2", "committedDate": "2020-09-30 15:59:13 +0100", "message": "Short type based serialization for packets (#5844)"}, {"oid": "e7f3551dad1ee7289a5152481c81d4dc11614676", "committedDate": "2021-02-27 18:53:41 +0000", "message": "Move Research System To Datapack (#6181)"}, {"oid": "b886cbdfbf36e6557c2d78a23aaab52a3443f516", "committedDate": "2021-03-18 11:01:52 +0000", "message": "Improve Research Branch Customizability (#6722)"}, {"oid": "cd204333d7459db7ce2ad96406f854e3a6ee0c0b", "committedDate": "2021-04-25 13:29:24 +0100", "message": "Unlock item tooltip (#6943)"}, {"oid": "a73d1241693d4c4aa178451a9ef86e1dfae99c5a", "committedDate": "2021-07-06 20:05:19 +0100", "message": "Mojmaps (#7362)"}, {"oid": "30c8ae6f605b80c61619bcca9a887d9e8f2fff4a", "committedDate": "2021-08-28 13:34:34 -0300", "message": "remap classes"}, {"oid": "6886e92c0207e1287f2470058a5cf863422e96c9", "committedDate": "2021-12-01 11:16:45 -0300", "message": "1.18 port Part 1"}, {"oid": "3b110c9e0d9dd7730e34e23f015b46fd7265ec20", "committedDate": "2022-04-07 08:07:07 -0300", "message": "Improved beekeeper behaviour (#8208)"}, {"oid": "bbd4a01116b01e7cf6f3185c650c2b603670ff0b", "committedDate": "2022-06-16 06:20:48 -0300", "message": "First port step"}, {"oid": "1797e734306f7b84047fafee3f4e3920e84140c7", "committedDate": "2022-06-16 13:49:48 -0300", "message": "Further porting"}, {"oid": "76d423b621a233cfff58fa1f2d71f3924effb705", "committedDate": "2023-01-05 20:52:19 +0100", "message": "Fix ignoring of NBT on research costs for tools as well (#8855)"}]}, {"oid": "fdef3e96714534552767cfaa235a3ce238d0531d", "url": "https://github.com/ldtteam/minecolonies/commit/fdef3e96714534552767cfaa235a3ce238d0531d", "message": "fix javadoc", "committedDate": "2020-02-03T08:44:03Z", "type": "commit"}, {"oid": "5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "url": "https://github.com/ldtteam/minecolonies/commit/5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "message": "A bit more refactoring of packages", "committedDate": "2020-02-03T18:11:09Z", "type": "commit"}, {"oid": "995957e5054455b6aa98e11a45368304fafc4d64", "url": "https://github.com/ldtteam/minecolonies/commit/995957e5054455b6aa98e11a45368304fafc4d64", "message": "hotfix fisherman", "committedDate": "2020-02-04T21:22:59Z", "type": "commit"}]}