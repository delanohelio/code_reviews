{"pr_number": 3773, "pr_title": "IPv6 support", "pr_author": "KeRan213539", "pr_createdAt": "2020-09-07T07:40:18Z", "pr_url": "https://github.com/alibaba/nacos/pull/3773", "timeline": [{"oid": "938b8f404792dcf3b12e801d5254c05f12f996e5", "url": "https://github.com/alibaba/nacos/commit/938b8f404792dcf3b12e801d5254c05f12f996e5", "message": "IPv6 support", "committedDate": "2020-09-07T07:13:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0NDU4Mw==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484244583", "body": "It is best Util class not to depend on Util class.\r\n\r\nI see `AddressServerParamCheckUtil` only one method, I think it can be merged into IpUtil.", "bodyText": "It is best Util class not to depend on Util class.\nI see AddressServerParamCheckUtil only one method, I think it can be merged into IpUtil.", "bodyHTML": "<p dir=\"auto\">It is best Util class not to depend on Util class.</p>\n<p dir=\"auto\">I see <code>AddressServerParamCheckUtil</code> only one method, I think it can be merged into IpUtil.</p>", "author": "KomachiSion", "createdAt": "2020-09-07T07:46:50Z", "path": "address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java", "diffHunk": "@@ -16,8 +16,7 @@\n \n package com.alibaba.nacos.address.util;\n \n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import com.alibaba.nacos.common.utils.IpUtil;", "originalCommit": "938b8f404792dcf3b12e801d5254c05f12f996e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\ndeleted file mode 100644\nindex 142054420..000000000\n--- a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,61 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.address.util;\n-\n-import com.alibaba.nacos.common.utils.IpUtil;\n-\n-/**\n- * Provides a unified tool class for address server parameter verification.\n- *\n- * @author pbting\n- * @date 2019-06-19 11:19 AM\n- * @since 1.1.0\n- */\n-public class AddressServerParamCheckUtil {\n-    \n-    public static final String CHECK_OK = \"ok\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIps(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            if (IpUtil.isIp(ip)) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-}\n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\nnew file mode 100644\nindex 000000000..e13d1a0ba\n--- /dev/null\n+++ b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n", "chunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.address.util;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provides a unified tool class for address server parameter verification.\n+ *\n+ * @author pbting\n+ * @date 2019-06-19 11:19 AM\n+ * @since 1.1.0\n+ */\n+public class AddressServerParamCheckUtil {\n+    \n+    public static final String CHECK_OK = \"ok\";\n+    \n+    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n+    \n+    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n+    \n+    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n+    \n+    /**\n+     * Check ips.\n+     *\n+     * @param ips ips\n+     * @return 'ok' if check passed, otherwise illegal ip\n+     */\n+    public static String checkIps(String... ips) {\n+        \n+        if (ips == null || ips.length == 0) {\n+            \n+            return CHECK_OK;\n+        }\n+        // illegal response\n+        StringBuilder illegalResponse = new StringBuilder();\n+        for (String ip : ips) {\n+            Matcher matcher = IP_PATTERN.matcher(ip);\n+            if (matcher.matches()) {\n+                continue;\n+            }\n+            illegalResponse.append(ip + \",\");\n+        }\n+        \n+        if (illegalResponse.length() == 0) {\n+            return CHECK_OK;\n+        }\n+        \n+        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n+    }\n+}\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\ndeleted file mode 100644\nindex e13d1a0ba..000000000\n--- a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.address.util;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Provides a unified tool class for address server parameter verification.\n- *\n- * @author pbting\n- * @date 2019-06-19 11:19 AM\n- * @since 1.1.0\n- */\n-public class AddressServerParamCheckUtil {\n-    \n-    public static final String CHECK_OK = \"ok\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n-    \n-    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIps(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            Matcher matcher = IP_PATTERN.matcher(ip);\n-            if (matcher.matches()) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-}\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\nnew file mode 100644\nindex 000000000..e13d1a0ba\n--- /dev/null\n+++ b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n", "chunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.address.util;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provides a unified tool class for address server parameter verification.\n+ *\n+ * @author pbting\n+ * @date 2019-06-19 11:19 AM\n+ * @since 1.1.0\n+ */\n+public class AddressServerParamCheckUtil {\n+    \n+    public static final String CHECK_OK = \"ok\";\n+    \n+    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n+    \n+    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n+    \n+    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n+    \n+    /**\n+     * Check ips.\n+     *\n+     * @param ips ips\n+     * @return 'ok' if check passed, otherwise illegal ip\n+     */\n+    public static String checkIps(String... ips) {\n+        \n+        if (ips == null || ips.length == 0) {\n+            \n+            return CHECK_OK;\n+        }\n+        // illegal response\n+        StringBuilder illegalResponse = new StringBuilder();\n+        for (String ip : ips) {\n+            Matcher matcher = IP_PATTERN.matcher(ip);\n+            if (matcher.matches()) {\n+                continue;\n+            }\n+            illegalResponse.append(ip + \",\");\n+        }\n+        \n+        if (illegalResponse.length() == 0) {\n+            return CHECK_OK;\n+        }\n+        \n+        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n+    }\n+}\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\ndeleted file mode 100644\nindex e13d1a0ba..000000000\n--- a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.address.util;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Provides a unified tool class for address server parameter verification.\n- *\n- * @author pbting\n- * @date 2019-06-19 11:19 AM\n- * @since 1.1.0\n- */\n-public class AddressServerParamCheckUtil {\n-    \n-    public static final String CHECK_OK = \"ok\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n-    \n-    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIps(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            Matcher matcher = IP_PATTERN.matcher(ip);\n-            if (matcher.matches()) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-}\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\nnew file mode 100644\nindex 000000000..e13d1a0ba\n--- /dev/null\n+++ b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n", "chunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.address.util;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provides a unified tool class for address server parameter verification.\n+ *\n+ * @author pbting\n+ * @date 2019-06-19 11:19 AM\n+ * @since 1.1.0\n+ */\n+public class AddressServerParamCheckUtil {\n+    \n+    public static final String CHECK_OK = \"ok\";\n+    \n+    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n+    \n+    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n+    \n+    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n+    \n+    /**\n+     * Check ips.\n+     *\n+     * @param ips ips\n+     * @return 'ok' if check passed, otherwise illegal ip\n+     */\n+    public static String checkIps(String... ips) {\n+        \n+        if (ips == null || ips.length == 0) {\n+            \n+            return CHECK_OK;\n+        }\n+        // illegal response\n+        StringBuilder illegalResponse = new StringBuilder();\n+        for (String ip : ips) {\n+            Matcher matcher = IP_PATTERN.matcher(ip);\n+            if (matcher.matches()) {\n+                continue;\n+            }\n+            illegalResponse.append(ip + \",\");\n+        }\n+        \n+        if (illegalResponse.length() == 0) {\n+            return CHECK_OK;\n+        }\n+        \n+        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n+    }\n+}\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\ndeleted file mode 100644\nindex e13d1a0ba..000000000\n--- a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.address.util;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Provides a unified tool class for address server parameter verification.\n- *\n- * @author pbting\n- * @date 2019-06-19 11:19 AM\n- * @since 1.1.0\n- */\n-public class AddressServerParamCheckUtil {\n-    \n-    public static final String CHECK_OK = \"ok\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n-    \n-    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIps(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            Matcher matcher = IP_PATTERN.matcher(ip);\n-            if (matcher.matches()) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-}\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\nnew file mode 100644\nindex 000000000..e13d1a0ba\n--- /dev/null\n+++ b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n", "chunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.address.util;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provides a unified tool class for address server parameter verification.\n+ *\n+ * @author pbting\n+ * @date 2019-06-19 11:19 AM\n+ * @since 1.1.0\n+ */\n+public class AddressServerParamCheckUtil {\n+    \n+    public static final String CHECK_OK = \"ok\";\n+    \n+    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n+    \n+    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n+    \n+    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n+    \n+    /**\n+     * Check ips.\n+     *\n+     * @param ips ips\n+     * @return 'ok' if check passed, otherwise illegal ip\n+     */\n+    public static String checkIps(String... ips) {\n+        \n+        if (ips == null || ips.length == 0) {\n+            \n+            return CHECK_OK;\n+        }\n+        // illegal response\n+        StringBuilder illegalResponse = new StringBuilder();\n+        for (String ip : ips) {\n+            Matcher matcher = IP_PATTERN.matcher(ip);\n+            if (matcher.matches()) {\n+                continue;\n+            }\n+            illegalResponse.append(ip + \",\");\n+        }\n+        \n+        if (illegalResponse.length() == 0) {\n+            return CHECK_OK;\n+        }\n+        \n+        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n+    }\n+}\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java b/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\ndeleted file mode 100644\nindex e13d1a0ba..000000000\n--- a/address/src/main/java/com/alibaba/nacos/address/util/AddressServerParamCheckUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.address.util;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Provides a unified tool class for address server parameter verification.\n- *\n- * @author pbting\n- * @date 2019-06-19 11:19 AM\n- * @since 1.1.0\n- */\n-public class AddressServerParamCheckUtil {\n-    \n-    public static final String CHECK_OK = \"ok\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    private static final String IP_REGEX = \"(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})(\\\\.(2(5[0-5]{1}|[0-4]\\\\d{1})|[0-1]?\\\\d{1,2})){3}\";\n-    \n-    private static final Pattern IP_PATTERN = Pattern.compile(IP_REGEX);\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIps(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            Matcher matcher = IP_PATTERN.matcher(ip);\n-            if (matcher.matches()) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI1MzE2NQ==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484253165", "body": "Remove unused codes", "bodyText": "Remove unused codes", "bodyHTML": "<p dir=\"auto\">Remove unused codes</p>", "author": "KomachiSion", "createdAt": "2020-09-07T07:55:37Z", "path": "common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * ip tool.\n+ *\n+ * @author Nacos\n+ */\n+public class IpUtil {\n+    \n+    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n+    \n+    public static final String IPV6_START_MARK = \"[\";\n+    \n+    public static final String IPV6_END_MARK = \"]\";\n+    \n+    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n+    \n+    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n+    \n+    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n+    \n+    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n+    \n+    /**\n+     * get localhost ip.\n+     * @return java.lang.String\n+     */\n+    public static String localHostIp() {\n+        if (PREFER_IPV6_ADDRESSES) {\n+            return LOCAL_HOST_IP_V6;\n+        }\n+        return LOCAL_HOST_IP_V4;\n+    }\n+    \n+    /**\n+     * check whether the ip address is IPv4.\n+     *\n+     * @param addr ip address\n+     * @return boolean\n+     */\n+    public static boolean isIpv4(String addr) {\n+        try {\n+            return InetAddress.getByName(addr).getAddress().length == 4;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * check whether the ip address is IPv6.\n+     *\n+     * @param addr ip address\n+     * @return boolean\n+     */\n+    public static boolean isIpv6(String addr) {\n+        try {\n+            return InetAddress.getByName(addr).getAddress().length == 16;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * check whether the str is ip address (IPv4 or IPv6).\n+     *\n+     * @param addr ip address str\n+     * @return boolean\n+     */\n+    public static boolean isIp(String addr) {\n+        try {\n+            InetAddress.getByName(addr);\n+            return true;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * Check if the address contains a port.\n+     * 2020/9/3 14:53\n+     * @param address address string\n+     * @return boolean\n+     */\n+    public static boolean containsPort(String address) {\n+        return splitIpPortStr(address).length == 2;\n+    }\n+    \n+    /**\n+     * Split IP and port strings, support IPv4 and IPv6, IP in IPv6 must be enclosed with [].\n+     *\n+     * @param str ip and port string\n+     * @return java.lang.String[]\n+     */\n+    public static String[] splitIpPortStr(String str) {\n+        if (StringUtils.isBlank(str)) {\n+            throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n+        }\n+        String[] serverAddrArr;\n+        if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n+            if (str.endsWith(IPV6_END_MARK)) {\n+                serverAddrArr = new String[1];\n+                serverAddrArr[0] = str;\n+            } else {\n+                serverAddrArr = new String[2];\n+                serverAddrArr[0] = str.substring(0, (str.indexOf(IPV6_END_MARK) + 1));\n+                serverAddrArr[1] = str.substring((str.indexOf(IPV6_END_MARK) + 2));\n+            }\n+            if (!isIpv6(serverAddrArr[0])) {\n+                throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n+            }\n+        } else {\n+            serverAddrArr = str.split(\":\");\n+            if (serverAddrArr.length > SPLIT_IP_PORT_RESULT_LENGTH) {\n+                throw new IllegalArgumentException(\"The IP address(\\\"\" + str\n+                        + \"\\\") is incorrect. If it is an IPv6 address, please use [] to enclose the IP part!\");\n+            }\n+            if (!isIpv4(serverAddrArr[0])) {\n+                throw new IllegalArgumentException(\"The IPv4 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n+            }\n+        }\n+        return serverAddrArr;\n+    }\n+    \n+    /**\n+     * Resolve the IP from the string containing the IP address.\n+     * @param str string containing IP address\n+     * @return java.lang.String\n+     */\n+    public static String getIpFromString(String str) {\n+        if (StringUtils.isBlank(str)) {\n+            return \"\";\n+        }\n+        String result = \"\";\n+        if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n+            result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n+            if (!isIpv6(result)) {\n+                result = \"\";\n+                //throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + result + \"\\\") is incorrect.\");", "originalCommit": "938b8f404792dcf3b12e801d5254c05f12f996e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex 378614079..d4cd5b866 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -156,7 +164,6 @@ public class IpUtil {\n             result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n             if (!isIpv6(result)) {\n                 result = \"\";\n-                //throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + result + \"\\\") is incorrect.\");\n             }\n         } else {\n             Matcher m = ipv4Pattern.matcher(str);\n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex d4cd5b866..8cfd7bf70 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -155,21 +158,21 @@ public class IpUtil {\n      * @param str string containing IP address\n      * @return java.lang.String\n      */\n-    public static String getIpFromString(String str) {\n+    public static String getIPFromString(String str) {\n         if (StringUtils.isBlank(str)) {\n             return \"\";\n         }\n         String result = \"\";\n         if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n             result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n-            if (!isIpv6(result)) {\n+            if (!isIPv6(result)) {\n                 result = \"\";\n             }\n         } else {\n             Matcher m = ipv4Pattern.matcher(str);\n             if (m.find()) {\n                 result = m.group();\n-                if (!isIpv4(result)) {\n+                if (!isIPv4(result)) {\n                     result = \"\";\n                 }\n             }\n", "next_change": {"commit": "a0a63207c88cdc602201c549ac3a11a87d465232", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\ndeleted file mode 100644\nindex 8cfd7bf70..000000000\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * ip tool.\n- *\n- * @author Nacos\n- */\n-@SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"PMD.ClassNamingShouldBeCamelRule\"})\n-public class IPUtil {\n-    \n-    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n-    \n-    public static final String IPV6_START_MARK = \"[\";\n-    \n-    public static final String IPV6_END_MARK = \"]\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    public static final String IP_PORT_SPLITER = \":\";\n-    \n-    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n-    \n-    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n-    \n-    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n-    \n-    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n-    \n-    private static final int IPV4_ADDRESS_LENGTH = 4;\n-    \n-    private static final int IPV6_ADDRESS_LENGTH = 16;\n-    \n-    private static final String CHECK_OK = \"ok\";\n-    \n-    /**\n-     * get localhost ip.\n-     * @return java.lang.String\n-     */\n-    public static String localHostIP() {\n-        if (PREFER_IPV6_ADDRESSES) {\n-            return LOCAL_HOST_IP_V6;\n-        }\n-        return LOCAL_HOST_IP_V4;\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv4.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv4(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV4_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv6.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv6(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV6_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the str is ip address (IPv4 or IPv6).\n-     *\n-     * @param addr ip address str\n-     * @return boolean\n-     */\n-    public static boolean isIP(String addr) {\n-        try {\n-            InetAddress.getByName(addr);\n-            return true;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * Check if the address contains a port.\n-     * 2020/9/3 14:53\n-     * @param address address string\n-     * @return boolean\n-     */\n-    public static boolean containsPort(String address) {\n-        return splitIPPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n-    }\n-    \n-    /**\n-     * Split IP and port strings, support IPv4 and IPv6, IP in IPv6 must be enclosed with [].\n-     *\n-     * @param str ip and port string\n-     * @return java.lang.String[]\n-     */\n-    public static String[] splitIPPortStr(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n-        }\n-        String[] serverAddrArr;\n-        if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            if (str.endsWith(IPV6_END_MARK)) {\n-                serverAddrArr = new String[1];\n-                serverAddrArr[0] = str;\n-            } else {\n-                serverAddrArr = new String[2];\n-                serverAddrArr[0] = str.substring(0, (str.indexOf(IPV6_END_MARK) + 1));\n-                serverAddrArr[1] = str.substring((str.indexOf(IPV6_END_MARK) + 2));\n-            }\n-            if (!isIPv6(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        } else {\n-            serverAddrArr = str.split(\":\");\n-            if (serverAddrArr.length > SPLIT_IP_PORT_RESULT_LENGTH) {\n-                throw new IllegalArgumentException(\"The IP address(\\\"\" + str\n-                        + \"\\\") is incorrect. If it is an IPv6 address, please use [] to enclose the IP part!\");\n-            }\n-            if (!isIPv4(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv4 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        }\n-        return serverAddrArr;\n-    }\n-    \n-    /**\n-     * Resolve the IP from the string containing the IP address.\n-     * @param str string containing IP address\n-     * @return java.lang.String\n-     */\n-    public static String getIPFromString(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            return \"\";\n-        }\n-        String result = \"\";\n-        if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n-            if (!isIPv6(result)) {\n-                result = \"\";\n-            }\n-        } else {\n-            Matcher m = ipv4Pattern.matcher(str);\n-            if (m.find()) {\n-                result = m.group();\n-                if (!isIPv4(result)) {\n-                    result = \"\";\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIPs(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            if (IPUtil.isIP(ip)) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-    \n-    /**\n-     * Check whether checkIPs result is \"ok\".\n-     * @param checkIPsResult checkIPs result\n-     * @return boolean\n-     */\n-    public static boolean checkOK(String checkIPsResult) {\n-        return CHECK_OK.equals(checkIPsResult);\n-    }\n-    \n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2Mjk2Mg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484262962", "body": "Is the same behavior when provider without port like `11.11.11.11` ?", "bodyText": "Is the same behavior when provider without port like 11.11.11.11 ?", "bodyHTML": "<p dir=\"auto\">Is the same behavior when provider without port like <code>11.11.11.11</code> ?</p>", "author": "KomachiSion", "createdAt": "2020-09-07T08:09:18Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java", "diffHunk": "@@ -117,19 +115,18 @@ public static Instance fromString(String config) {\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr = IpUtil.splitIpPortStr(provider);\n+        if (providerAddr.length != IpUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n+            // not ip:port string", "originalCommit": "938b8f404792dcf3b12e801d5254c05f12f996e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 3aab6bc5b..cb05840b7 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,9 +115,10 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr = IpUtil.splitIpPortStr(provider);\n-        if (providerAddr.length != IpUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n-            // not ip:port string\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IpUtil.splitIpPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n", "next_change": {"commit": "bb4e17790e68df192a886349c7ecfc745a6c8ad4", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex cb05840b7..5a68dbb3f 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -123,7 +123,7 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         int port = 0;\n-        if (NumberUtils.isNumber(providerAddr[1])) {\n+        if (providerAddr.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n             port = Integer.parseInt(providerAddr[1]);\n         }\n         \n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5a68dbb3f..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,13 +117,13 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         String provider = ipAddressAttributes[0];\n         String[] providerAddr;\n         try {\n-            providerAddr = IpUtil.splitIpPortStr(provider);\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n         } catch (Exception ex) {\n             return null;\n         }\n         \n         int port = 0;\n-        if (providerAddr.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n             port = Integer.parseInt(providerAddr[1]);\n         }\n         \n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +115,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +115,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..2739ace84 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 2739ace84..27ec80cea 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +119,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 27ec80cea..2739ace84 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -119,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2NDc1MA==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484264750", "body": "Can `2` replaced with `SPLIT_IP_PORT_RESULT_LENGTH`", "bodyText": "Can 2 replaced with SPLIT_IP_PORT_RESULT_LENGTH", "bodyHTML": "<p dir=\"auto\">Can <code>2</code> replaced with <code>SPLIT_IP_PORT_RESULT_LENGTH</code></p>", "author": "KomachiSion", "createdAt": "2020-09-07T08:12:41Z", "path": "common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * ip tool.\n+ *\n+ * @author Nacos\n+ */\n+public class IpUtil {\n+    \n+    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n+    \n+    public static final String IPV6_START_MARK = \"[\";\n+    \n+    public static final String IPV6_END_MARK = \"]\";\n+    \n+    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n+    \n+    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n+    \n+    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n+    \n+    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n+    \n+    /**\n+     * get localhost ip.\n+     * @return java.lang.String\n+     */\n+    public static String localHostIp() {\n+        if (PREFER_IPV6_ADDRESSES) {\n+            return LOCAL_HOST_IP_V6;\n+        }\n+        return LOCAL_HOST_IP_V4;\n+    }\n+    \n+    /**\n+     * check whether the ip address is IPv4.\n+     *\n+     * @param addr ip address\n+     * @return boolean\n+     */\n+    public static boolean isIpv4(String addr) {\n+        try {\n+            return InetAddress.getByName(addr).getAddress().length == 4;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * check whether the ip address is IPv6.\n+     *\n+     * @param addr ip address\n+     * @return boolean\n+     */\n+    public static boolean isIpv6(String addr) {\n+        try {\n+            return InetAddress.getByName(addr).getAddress().length == 16;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * check whether the str is ip address (IPv4 or IPv6).\n+     *\n+     * @param addr ip address str\n+     * @return boolean\n+     */\n+    public static boolean isIp(String addr) {\n+        try {\n+            InetAddress.getByName(addr);\n+            return true;\n+        } catch (UnknownHostException e) {\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * Check if the address contains a port.\n+     * 2020/9/3 14:53\n+     * @param address address string\n+     * @return boolean\n+     */\n+    public static boolean containsPort(String address) {\n+        return splitIpPortStr(address).length == 2;", "originalCommit": "938b8f404792dcf3b12e801d5254c05f12f996e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex 378614079..d4cd5b866 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -103,7 +111,7 @@ public class IpUtil {\n      * @return boolean\n      */\n     public static boolean containsPort(String address) {\n-        return splitIpPortStr(address).length == 2;\n+        return splitIpPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n     }\n     \n     /**\n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex d4cd5b866..8cfd7bf70 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -111,7 +114,7 @@ public class IpUtil {\n      * @return boolean\n      */\n     public static boolean containsPort(String address) {\n-        return splitIpPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n+        return splitIPPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n     }\n     \n     /**\n", "next_change": {"commit": "a0a63207c88cdc602201c549ac3a11a87d465232", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\ndeleted file mode 100644\nindex 8cfd7bf70..000000000\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * ip tool.\n- *\n- * @author Nacos\n- */\n-@SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"PMD.ClassNamingShouldBeCamelRule\"})\n-public class IPUtil {\n-    \n-    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n-    \n-    public static final String IPV6_START_MARK = \"[\";\n-    \n-    public static final String IPV6_END_MARK = \"]\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    public static final String IP_PORT_SPLITER = \":\";\n-    \n-    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n-    \n-    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n-    \n-    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n-    \n-    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n-    \n-    private static final int IPV4_ADDRESS_LENGTH = 4;\n-    \n-    private static final int IPV6_ADDRESS_LENGTH = 16;\n-    \n-    private static final String CHECK_OK = \"ok\";\n-    \n-    /**\n-     * get localhost ip.\n-     * @return java.lang.String\n-     */\n-    public static String localHostIP() {\n-        if (PREFER_IPV6_ADDRESSES) {\n-            return LOCAL_HOST_IP_V6;\n-        }\n-        return LOCAL_HOST_IP_V4;\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv4.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv4(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV4_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv6.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv6(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV6_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the str is ip address (IPv4 or IPv6).\n-     *\n-     * @param addr ip address str\n-     * @return boolean\n-     */\n-    public static boolean isIP(String addr) {\n-        try {\n-            InetAddress.getByName(addr);\n-            return true;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * Check if the address contains a port.\n-     * 2020/9/3 14:53\n-     * @param address address string\n-     * @return boolean\n-     */\n-    public static boolean containsPort(String address) {\n-        return splitIPPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n-    }\n-    \n-    /**\n-     * Split IP and port strings, support IPv4 and IPv6, IP in IPv6 must be enclosed with [].\n-     *\n-     * @param str ip and port string\n-     * @return java.lang.String[]\n-     */\n-    public static String[] splitIPPortStr(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n-        }\n-        String[] serverAddrArr;\n-        if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            if (str.endsWith(IPV6_END_MARK)) {\n-                serverAddrArr = new String[1];\n-                serverAddrArr[0] = str;\n-            } else {\n-                serverAddrArr = new String[2];\n-                serverAddrArr[0] = str.substring(0, (str.indexOf(IPV6_END_MARK) + 1));\n-                serverAddrArr[1] = str.substring((str.indexOf(IPV6_END_MARK) + 2));\n-            }\n-            if (!isIPv6(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        } else {\n-            serverAddrArr = str.split(\":\");\n-            if (serverAddrArr.length > SPLIT_IP_PORT_RESULT_LENGTH) {\n-                throw new IllegalArgumentException(\"The IP address(\\\"\" + str\n-                        + \"\\\") is incorrect. If it is an IPv6 address, please use [] to enclose the IP part!\");\n-            }\n-            if (!isIPv4(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv4 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        }\n-        return serverAddrArr;\n-    }\n-    \n-    /**\n-     * Resolve the IP from the string containing the IP address.\n-     * @param str string containing IP address\n-     * @return java.lang.String\n-     */\n-    public static String getIPFromString(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            return \"\";\n-        }\n-        String result = \"\";\n-        if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n-            if (!isIPv6(result)) {\n-                result = \"\";\n-            }\n-        } else {\n-            Matcher m = ipv4Pattern.matcher(str);\n-            if (m.find()) {\n-                result = m.group();\n-                if (!isIPv4(result)) {\n-                    result = \"\";\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIPs(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            if (IPUtil.isIP(ip)) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-    \n-    /**\n-     * Check whether checkIPs result is \"ok\".\n-     * @param checkIPsResult checkIPs result\n-     * @return boolean\n-     */\n-    public static boolean checkOK(String checkIPsResult) {\n-        return CHECK_OK.equals(checkIPsResult);\n-    }\n-    \n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex d4cd5b866..8cfd7bf70 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -120,7 +123,7 @@ public class IpUtil {\n      * @param str ip and port string\n      * @return java.lang.String[]\n      */\n-    public static String[] splitIpPortStr(String str) {\n+    public static String[] splitIPPortStr(String str) {\n         if (StringUtils.isBlank(str)) {\n             throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n         }\n", "next_change": {"commit": "a0a63207c88cdc602201c549ac3a11a87d465232", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\ndeleted file mode 100644\nindex 8cfd7bf70..000000000\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * ip tool.\n- *\n- * @author Nacos\n- */\n-@SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"PMD.ClassNamingShouldBeCamelRule\"})\n-public class IPUtil {\n-    \n-    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n-    \n-    public static final String IPV6_START_MARK = \"[\";\n-    \n-    public static final String IPV6_END_MARK = \"]\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    public static final String IP_PORT_SPLITER = \":\";\n-    \n-    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n-    \n-    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n-    \n-    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n-    \n-    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n-    \n-    private static final int IPV4_ADDRESS_LENGTH = 4;\n-    \n-    private static final int IPV6_ADDRESS_LENGTH = 16;\n-    \n-    private static final String CHECK_OK = \"ok\";\n-    \n-    /**\n-     * get localhost ip.\n-     * @return java.lang.String\n-     */\n-    public static String localHostIP() {\n-        if (PREFER_IPV6_ADDRESSES) {\n-            return LOCAL_HOST_IP_V6;\n-        }\n-        return LOCAL_HOST_IP_V4;\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv4.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv4(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV4_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv6.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv6(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV6_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the str is ip address (IPv4 or IPv6).\n-     *\n-     * @param addr ip address str\n-     * @return boolean\n-     */\n-    public static boolean isIP(String addr) {\n-        try {\n-            InetAddress.getByName(addr);\n-            return true;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * Check if the address contains a port.\n-     * 2020/9/3 14:53\n-     * @param address address string\n-     * @return boolean\n-     */\n-    public static boolean containsPort(String address) {\n-        return splitIPPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n-    }\n-    \n-    /**\n-     * Split IP and port strings, support IPv4 and IPv6, IP in IPv6 must be enclosed with [].\n-     *\n-     * @param str ip and port string\n-     * @return java.lang.String[]\n-     */\n-    public static String[] splitIPPortStr(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n-        }\n-        String[] serverAddrArr;\n-        if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            if (str.endsWith(IPV6_END_MARK)) {\n-                serverAddrArr = new String[1];\n-                serverAddrArr[0] = str;\n-            } else {\n-                serverAddrArr = new String[2];\n-                serverAddrArr[0] = str.substring(0, (str.indexOf(IPV6_END_MARK) + 1));\n-                serverAddrArr[1] = str.substring((str.indexOf(IPV6_END_MARK) + 2));\n-            }\n-            if (!isIPv6(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        } else {\n-            serverAddrArr = str.split(\":\");\n-            if (serverAddrArr.length > SPLIT_IP_PORT_RESULT_LENGTH) {\n-                throw new IllegalArgumentException(\"The IP address(\\\"\" + str\n-                        + \"\\\") is incorrect. If it is an IPv6 address, please use [] to enclose the IP part!\");\n-            }\n-            if (!isIPv4(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv4 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        }\n-        return serverAddrArr;\n-    }\n-    \n-    /**\n-     * Resolve the IP from the string containing the IP address.\n-     * @param str string containing IP address\n-     * @return java.lang.String\n-     */\n-    public static String getIPFromString(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            return \"\";\n-        }\n-        String result = \"\";\n-        if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n-            if (!isIPv6(result)) {\n-                result = \"\";\n-            }\n-        } else {\n-            Matcher m = ipv4Pattern.matcher(str);\n-            if (m.find()) {\n-                result = m.group();\n-                if (!isIPv4(result)) {\n-                    result = \"\";\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIPs(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            if (IPUtil.isIP(ip)) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-    \n-    /**\n-     * Check whether checkIPs result is \"ok\".\n-     * @param checkIPsResult checkIPs result\n-     * @return boolean\n-     */\n-    public static boolean checkOK(String checkIPsResult) {\n-        return CHECK_OK.equals(checkIPsResult);\n-    }\n-    \n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2NTAzNw==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484265037", "body": "replaced with `IpUtil.containPort`?", "bodyText": "replaced with IpUtil.containPort?", "bodyHTML": "<p dir=\"auto\">replaced with <code>IpUtil.containPort</code>?</p>", "author": "KomachiSion", "createdAt": "2020-09-07T08:13:10Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java", "diffHunk": "@@ -796,7 +797,8 @@ public int getPagedService(String namespaceId, int startPage, int pageSize, Stri\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    String[] containedInstanceIpPort = IpUtil.splitIpPortStr(containedInstance);\n+                    if (containedInstanceIpPort.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH) {", "originalCommit": "938b8f404792dcf3b12e801d5254c05f12f996e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 49bfb54d3..69abbb9e3 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -797,8 +797,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    String[] containedInstanceIpPort = IpUtil.splitIpPortStr(containedInstance);\n-                    if (containedInstanceIpPort.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH) {\n+                    if (IpUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 69abbb9e3..a63c82ba6 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -797,7 +797,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (IpUtil.containsPort(containedInstance)) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex a63c82ba6..47365be17 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -797,7 +796,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (IPUtil.containsPort(containedInstance)) {\n+                    if (containedInstance.contains(\":\")) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 47365be17..a63c82ba6 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -796,7 +797,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex a63c82ba6..e5d82c89a 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -797,7 +795,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (IPUtil.containsPort(containedInstance)) {\n+                    if (containedInstance.contains(\":\")) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex e5d82c89a..4a9c66149 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -795,7 +796,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 4a9c66149..859c8fb3e 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -796,7 +951,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (IPUtil.containsPort(containedInstance)) {\n+                    if (containedInstance.contains(\":\")) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 859c8fb3e..1452c5584 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -951,7 +956,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 1452c5584..2a6dc00ed 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -956,7 +955,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (IPUtil.containsPort(containedInstance)) {\n+                    if (containedInstance.contains(\":\")) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 2a6dc00ed..1452c5584 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -955,7 +956,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n", "next_change": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 1452c5584..d6ed8600c 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -957,7 +957,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n                     if (IPUtil.containsPort(containedInstance)) {\n-                        if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n+                        if (StringUtils.equals(instance.getIp() +  IPUtil.IP_PORT_SPLITER + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n                         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "url": "https://github.com/alibaba/nacos/commit/dd7aeb6cf52d25b87f6bf11cc7209a8f53ab3707", "message": "AddressServerParamCheckUtil \u5408\u5e76\u5230 IpUtil \u53ca\u4e00\u4e9b\u4fee\u6539", "committedDate": "2020-09-07T08:51:16Z", "type": "commit"}, {"oid": "b4f234d4ebf0d291fc703928a3222ef298c5cbef", "url": "https://github.com/alibaba/nacos/commit/b4f234d4ebf0d291fc703928a3222ef298c5cbef", "message": "\u89e3\u51b3\u9b54\u6cd5\u503c", "committedDate": "2020-09-07T10:01:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTIxMQ==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484355211", "body": "possible for OutOfIndexException\uff1f", "bodyText": "possible for OutOfIndexException\uff1f", "bodyHTML": "<p dir=\"auto\">possible for OutOfIndexException\uff1f</p>", "author": "KomachiSion", "createdAt": "2020-09-07T10:51:38Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java", "diffHunk": "@@ -117,19 +115,19 @@ public static Instance fromString(String config) {\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IpUtil.splitIpPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (NumberUtils.isNumber(providerAddr[1])) {", "originalCommit": "b4f234d4ebf0d291fc703928a3222ef298c5cbef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4e17790e68df192a886349c7ecfc745a6c8ad4", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 121b6935f..5a68dbb3f 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -123,7 +123,7 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         int port = 0;\n-        if (NumberUtils.isNumber(providerAddr[1])) {\n+        if (providerAddr.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n             port = Integer.parseInt(providerAddr[1]);\n         }\n         \n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5a68dbb3f..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,13 +117,13 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         String provider = ipAddressAttributes[0];\n         String[] providerAddr;\n         try {\n-            providerAddr = IpUtil.splitIpPortStr(provider);\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n         } catch (Exception ex) {\n             return null;\n         }\n         \n         int port = 0;\n-        if (providerAddr.length == IpUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n             port = Integer.parseInt(providerAddr[1]);\n         }\n         \n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +115,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..1f1304eb0 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +115,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 1f1304eb0..5f1c29334 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -115,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 5f1c29334..2739ace84 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 2739ace84..27ec80cea 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -117,19 +119,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        String[] providerAddr;\n-        try {\n-            providerAddr = IPUtil.splitIPPortStr(provider);\n-        } catch (Exception ex) {\n+        Matcher matcher = IP_PATTERN.matcher(provider);\n+        if (!matcher.matches()) {\n             return null;\n         }\n         \n+        int expectedGroupCount = 2;\n+        \n         int port = 0;\n-        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n-            port = Integer.parseInt(providerAddr[1]);\n+        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n+            port = Integer.parseInt(matcher.group(expectedGroupCount));\n         }\n         \n-        Instance instance = new Instance(providerAddr[0], port);\n+        Instance instance = new Instance(matcher.group(1), port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\nindex 27ec80cea..2739ace84 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Instance.java\n", "chunk": "@@ -119,19 +117,19 @@ public class Instance extends com.alibaba.nacos.api.naming.pojo.Instance impleme\n         }\n         \n         String provider = ipAddressAttributes[0];\n-        Matcher matcher = IP_PATTERN.matcher(provider);\n-        if (!matcher.matches()) {\n+        String[] providerAddr;\n+        try {\n+            providerAddr = IPUtil.splitIPPortStr(provider);\n+        } catch (Exception ex) {\n             return null;\n         }\n         \n-        int expectedGroupCount = 2;\n-        \n         int port = 0;\n-        if (NumberUtils.isNumber(matcher.group(expectedGroupCount))) {\n-            port = Integer.parseInt(matcher.group(expectedGroupCount));\n+        if (providerAddr.length == IPUtil.SPLIT_IP_PORT_RESULT_LENGTH && NumberUtils.isNumber(providerAddr[1])) {\n+            port = Integer.parseInt(providerAddr[1]);\n         }\n         \n-        Instance instance = new Instance(matcher.group(1), port);\n+        Instance instance = new Instance(providerAddr[0], port);\n         \n         // 7 possible formats of config:\n         // ip:port\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "bb4e17790e68df192a886349c7ecfc745a6c8ad4", "url": "https://github.com/alibaba/nacos/commit/bb4e17790e68df192a886349c7ecfc745a6c8ad4", "message": "\u4fee\u6539\u9690\u60a3", "committedDate": "2020-09-08T01:04:23Z", "type": "commit"}, {"oid": "601f0b4609747c750b0ef70582aadf46e235c8e4", "url": "https://github.com/alibaba/nacos/commit/601f0b4609747c750b0ef70582aadf46e235c8e4", "message": "\u8c03\u6574\u4f7f\u7528\u4e86\u7c7b\u4f3c ip.indexOf(\":\") \u67e5\u627e\u662f\u5426\u6709\u7aef\u53e3\u7684\u5730\u65b9\u7684\u903b\u8f91, \u4e00\u4e9b \":\" \u66ff\u6362\u4e3a\u5e38\u91cf", "committedDate": "2020-09-08T02:07:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxMjczMg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484612732", "body": "format test method name to describe what situation the method test", "bodyText": "format test method name to describe what situation the method test", "bodyHTML": "<p dir=\"auto\">format test method name to describe what situation the method test</p>", "author": "KomachiSion", "createdAt": "2020-09-08T02:10:20Z", "path": "common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+\n+/**\n+ * test IpUtil.\n+ * @ClassName: IpUtilTest\n+ * @date 2020/9/3 10:31\n+ */\n+public class IpUtilTest {\n+    \n+    @Test\n+    public void test111(){", "originalCommit": "601f0b4609747c750b0ef70582aadf46e235c8e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\nindex a86e842e4..5b87db843 100644\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n", "chunk": "@@ -30,28 +26,6 @@ import java.util.Enumeration;\n  */\n public class IpUtilTest {\n     \n-    @Test\n-    public void test111(){\n-        try {\n-            Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();\n-            while (en.hasMoreElements()) {\n-                NetworkInterface ni = en.nextElement();\n-                Enumeration<InetAddress> ads = ni.getInetAddresses();\n-                while (ads.hasMoreElements()) {\n-                    InetAddress ip = ads.nextElement();\n-                    System.out.println(ip.getHostAddress());\n-                    // Compatible group does not regulate 11 network segments\n-                    if (!ip.isLoopbackAddress() && ip.getHostAddress().indexOf(\":\") == -1\n-                        /* && ip.isSiteLocalAddress() */) {\n-//                        System.out.println(ip.getHostAddress());\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-    \n     @Test\n     public void testIsIpv4() {\n         Assert.assertTrue(IpUtil.isIpv4(\"127.0.0.1\"));\n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\nindex 5b87db843..5da23dba5 100644\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n", "chunk": "@@ -24,71 +24,72 @@ import org.junit.Test;\n  * @ClassName: IpUtilTest\n  * @date 2020/9/3 10:31\n  */\n-public class IpUtilTest {\n+@SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n+public class IPUtilTest {\n     \n     @Test\n-    public void testIsIpv4() {\n-        Assert.assertTrue(IpUtil.isIpv4(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"[::1]\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"asdfasf\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"ffgertert\"));\n+    public void testIsIPv4() {\n+        Assert.assertTrue(IPUtil.isIPv4(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"[::1]\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"asdfasf\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"ffgertert\"));\n     }\n     \n     @Test\n-    public void testIsIpv6() {\n-        Assert.assertTrue(IpUtil.isIpv6(\"[::1]\"));\n-        Assert.assertFalse(IpUtil.isIpv6(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIpv6(\"er34234\"));\n+    public void testIsIPv6() {\n+        Assert.assertTrue(IPUtil.isIPv6(\"[::1]\"));\n+        Assert.assertFalse(IPUtil.isIPv6(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIPv6(\"er34234\"));\n     }\n     \n     @Test\n-    public void testIsIp() {\n-        Assert.assertTrue(IpUtil.isIp(\"[::1]\"));\n-        Assert.assertTrue(IpUtil.isIp(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIp(\"er34234\"));\n+    public void testIsIP() {\n+        Assert.assertTrue(IPUtil.isIP(\"[::1]\"));\n+        Assert.assertTrue(IPUtil.isIP(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIP(\"er34234\"));\n     }\n     \n     @Test\n-    public void testGetIpFromString() {\n-        Assert.assertEquals(\"[::1]\", IpUtil.getIpFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"[::1]\", IpUtil.getIpFromString(\n+    public void testGetIPFromString() {\n+        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://[::1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n         Assert.assertEquals(\"127.0.0.1\",\n-                IpUtil.getIpFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"127.0.0.1\", IpUtil.getIpFromString(\n+                IPUtil.getIPFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"127.0.0.1\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://127.0.0.1:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n     \n         Assert.assertEquals(\"\",\n-                IpUtil.getIpFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"\", IpUtil.getIpFromString(\n+                IPUtil.getIPFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://[127.0.0.1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"\", IpUtil.getIpFromString(\n+        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://666.288.333.444:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n     }\n     \n     @Test\n     public void testSplitIpPort() {\n-        checkSplitIpPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n-        checkSplitIpPortStr(\"[::1]\", false, \"[::1]\");\n-        checkSplitIpPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n-        checkSplitIpPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n-        checkSplitIpPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n-        \n-        checkSplitIpPortStr(\"::1:88\", true);\n-        checkSplitIpPortStr(\"[::1:88\", true);\n-        checkSplitIpPortStr(\"[127.0.0.1]:88\", true);\n+        checkSplitIPPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n+        checkSplitIPPortStr(\"[::1]\", false, \"[::1]\");\n+        checkSplitIPPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n+        checkSplitIPPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n+        checkSplitIPPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n+    \n+        checkSplitIPPortStr(\"::1:88\", true);\n+        checkSplitIPPortStr(\"[::1:88\", true);\n+        checkSplitIPPortStr(\"[127.0.0.1]:88\", true);\n     }\n     \n     /**\n", "next_change": {"commit": "37620a4123c556b396ee2bf0ab85c2deaa1bb9ed", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\ndeleted file mode 100644\nindex 5da23dba5..000000000\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ /dev/null\n", "chunk": "@@ -1,120 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * test IpUtil.\n- * @ClassName: IpUtilTest\n- * @date 2020/9/3 10:31\n- */\n-@SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n-public class IPUtilTest {\n-    \n-    @Test\n-    public void testIsIPv4() {\n-        Assert.assertTrue(IPUtil.isIPv4(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"[::1]\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"asdfasf\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"ffgertert\"));\n-    }\n-    \n-    @Test\n-    public void testIsIPv6() {\n-        Assert.assertTrue(IPUtil.isIPv6(\"[::1]\"));\n-        Assert.assertFalse(IPUtil.isIPv6(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIPv6(\"er34234\"));\n-    }\n-    \n-    @Test\n-    public void testIsIP() {\n-        Assert.assertTrue(IPUtil.isIP(\"[::1]\"));\n-        Assert.assertTrue(IPUtil.isIP(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIP(\"er34234\"));\n-    }\n-    \n-    @Test\n-    public void testGetIPFromString() {\n-        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://[::1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"127.0.0.1\",\n-                IPUtil.getIPFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"127.0.0.1\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://127.0.0.1:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-    \n-        Assert.assertEquals(\"\",\n-                IPUtil.getIPFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://[127.0.0.1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://666.288.333.444:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-    }\n-    \n-    @Test\n-    public void testSplitIpPort() {\n-        checkSplitIPPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n-        checkSplitIPPortStr(\"[::1]\", false, \"[::1]\");\n-        checkSplitIPPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n-        checkSplitIPPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n-        checkSplitIPPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n-    \n-        checkSplitIPPortStr(\"::1:88\", true);\n-        checkSplitIPPortStr(\"[::1:88\", true);\n-        checkSplitIPPortStr(\"[127.0.0.1]:88\", true);\n-    }\n-    \n-    /**\n-     * checkSplitIpPortStr.\n-     * 2020/9/4 14:12\n-     * @param addr addr\n-     * @param isEx isEx\n-     * @param equalsStrs equalsStrs\n-     */\n-    public static void checkSplitIPPortStr(String addr, boolean isEx, String... equalsStrs) {\n-        try {\n-            String[] array = IPUtil.splitIPPortStr(addr);\n-            Assert.assertTrue(array.length == equalsStrs.length);\n-            if (array.length > 1) {\n-                Assert.assertTrue(array[0].equals(equalsStrs[0]));\n-                Assert.assertTrue(array[1].equals(equalsStrs[1]));\n-            } else {\n-                Assert.assertTrue(array[0].equals(equalsStrs[0]));\n-            }\n-        } catch (Exception ex) {\n-            if (!isEx) {\n-                // No exception is expected here, but an exception has occurred\n-                Assert.assertTrue(\"Unexpected exception\", false);\n-            }\n-        }\n-    }\n-    \n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxMjc2Mg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484612762", "body": "remove unused codes", "bodyText": "remove unused codes", "bodyHTML": "<p dir=\"auto\">remove unused codes</p>", "author": "KomachiSion", "createdAt": "2020-09-08T02:10:29Z", "path": "common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+\n+/**\n+ * test IpUtil.\n+ * @ClassName: IpUtilTest\n+ * @date 2020/9/3 10:31\n+ */\n+public class IpUtilTest {\n+    \n+    @Test\n+    public void test111(){\n+        try {\n+            Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();\n+            while (en.hasMoreElements()) {\n+                NetworkInterface ni = en.nextElement();\n+                Enumeration<InetAddress> ads = ni.getInetAddresses();\n+                while (ads.hasMoreElements()) {\n+                    InetAddress ip = ads.nextElement();\n+                    System.out.println(ip.getHostAddress());\n+                    // Compatible group does not regulate 11 network segments\n+                    if (!ip.isLoopbackAddress() && ip.getHostAddress().indexOf(\":\") == -1\n+                        /* && ip.isSiteLocalAddress() */) {", "originalCommit": "601f0b4609747c750b0ef70582aadf46e235c8e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\nindex a86e842e4..5b87db843 100644\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n", "chunk": "@@ -30,28 +26,6 @@ import java.util.Enumeration;\n  */\n public class IpUtilTest {\n     \n-    @Test\n-    public void test111(){\n-        try {\n-            Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();\n-            while (en.hasMoreElements()) {\n-                NetworkInterface ni = en.nextElement();\n-                Enumeration<InetAddress> ads = ni.getInetAddresses();\n-                while (ads.hasMoreElements()) {\n-                    InetAddress ip = ads.nextElement();\n-                    System.out.println(ip.getHostAddress());\n-                    // Compatible group does not regulate 11 network segments\n-                    if (!ip.isLoopbackAddress() && ip.getHostAddress().indexOf(\":\") == -1\n-                        /* && ip.isSiteLocalAddress() */) {\n-//                        System.out.println(ip.getHostAddress());\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-    \n     @Test\n     public void testIsIpv4() {\n         Assert.assertTrue(IpUtil.isIpv4(\"127.0.0.1\"));\n", "next_change": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\nindex 5b87db843..5da23dba5 100644\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n", "chunk": "@@ -24,71 +24,72 @@ import org.junit.Test;\n  * @ClassName: IpUtilTest\n  * @date 2020/9/3 10:31\n  */\n-public class IpUtilTest {\n+@SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n+public class IPUtilTest {\n     \n     @Test\n-    public void testIsIpv4() {\n-        Assert.assertTrue(IpUtil.isIpv4(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"[::1]\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"asdfasf\"));\n-        Assert.assertFalse(IpUtil.isIpv4(\"ffgertert\"));\n+    public void testIsIPv4() {\n+        Assert.assertTrue(IPUtil.isIPv4(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"[::1]\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"asdfasf\"));\n+        Assert.assertFalse(IPUtil.isIPv4(\"ffgertert\"));\n     }\n     \n     @Test\n-    public void testIsIpv6() {\n-        Assert.assertTrue(IpUtil.isIpv6(\"[::1]\"));\n-        Assert.assertFalse(IpUtil.isIpv6(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIpv6(\"er34234\"));\n+    public void testIsIPv6() {\n+        Assert.assertTrue(IPUtil.isIPv6(\"[::1]\"));\n+        Assert.assertFalse(IPUtil.isIPv6(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIPv6(\"er34234\"));\n     }\n     \n     @Test\n-    public void testIsIp() {\n-        Assert.assertTrue(IpUtil.isIp(\"[::1]\"));\n-        Assert.assertTrue(IpUtil.isIp(\"127.0.0.1\"));\n-        Assert.assertFalse(IpUtil.isIp(\"er34234\"));\n+    public void testIsIP() {\n+        Assert.assertTrue(IPUtil.isIP(\"[::1]\"));\n+        Assert.assertTrue(IPUtil.isIP(\"127.0.0.1\"));\n+        Assert.assertFalse(IPUtil.isIP(\"er34234\"));\n     }\n     \n     @Test\n-    public void testGetIpFromString() {\n-        Assert.assertEquals(\"[::1]\", IpUtil.getIpFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"[::1]\", IpUtil.getIpFromString(\n+    public void testGetIPFromString() {\n+        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://[::1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n         Assert.assertEquals(\"127.0.0.1\",\n-                IpUtil.getIpFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"127.0.0.1\", IpUtil.getIpFromString(\n+                IPUtil.getIPFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"127.0.0.1\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://127.0.0.1:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n     \n         Assert.assertEquals(\"\",\n-                IpUtil.getIpFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"\", IpUtil.getIpFromString(\n+                IPUtil.getIPFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n+        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://[127.0.0.1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"\", IpUtil.getIpFromString(\n+        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n                 \"jdbc:mysql://666.288.333.444:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n                         + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n     }\n     \n     @Test\n     public void testSplitIpPort() {\n-        checkSplitIpPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n-        checkSplitIpPortStr(\"[::1]\", false, \"[::1]\");\n-        checkSplitIpPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n-        checkSplitIpPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n-        checkSplitIpPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n-        checkSplitIpPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n-        \n-        checkSplitIpPortStr(\"::1:88\", true);\n-        checkSplitIpPortStr(\"[::1:88\", true);\n-        checkSplitIpPortStr(\"[127.0.0.1]:88\", true);\n+        checkSplitIPPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n+        checkSplitIPPortStr(\"[::1]\", false, \"[::1]\");\n+        checkSplitIPPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n+        checkSplitIPPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n+        checkSplitIPPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n+        checkSplitIPPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n+    \n+        checkSplitIPPortStr(\"::1:88\", true);\n+        checkSplitIPPortStr(\"[::1:88\", true);\n+        checkSplitIPPortStr(\"[127.0.0.1]:88\", true);\n     }\n     \n     /**\n", "next_change": {"commit": "37620a4123c556b396ee2bf0ab85c2deaa1bb9ed", "changed_code": [{"header": "diff --git a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java b/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\ndeleted file mode 100644\nindex 5da23dba5..000000000\n--- a/common/src/test/java/com/alibaba/nacos/common/utils/IpUtilTest.java\n+++ /dev/null\n", "chunk": "@@ -1,120 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * test IpUtil.\n- * @ClassName: IpUtilTest\n- * @date 2020/9/3 10:31\n- */\n-@SuppressWarnings(\"checkstyle:AbbreviationAsWordInName\")\n-public class IPUtilTest {\n-    \n-    @Test\n-    public void testIsIPv4() {\n-        Assert.assertTrue(IPUtil.isIPv4(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"[::1]\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"asdfasf\"));\n-        Assert.assertFalse(IPUtil.isIPv4(\"ffgertert\"));\n-    }\n-    \n-    @Test\n-    public void testIsIPv6() {\n-        Assert.assertTrue(IPUtil.isIPv6(\"[::1]\"));\n-        Assert.assertFalse(IPUtil.isIPv6(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIPv6(\"er34234\"));\n-    }\n-    \n-    @Test\n-    public void testIsIP() {\n-        Assert.assertTrue(IPUtil.isIP(\"[::1]\"));\n-        Assert.assertTrue(IPUtil.isIP(\"127.0.0.1\"));\n-        Assert.assertFalse(IPUtil.isIP(\"er34234\"));\n-    }\n-    \n-    @Test\n-    public void testGetIPFromString() {\n-        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\"http://[::1]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"[::1]\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://[::1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"127.0.0.1\",\n-                IPUtil.getIPFromString(\"http://127.0.0.1:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"127.0.0.1\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://127.0.0.1:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-    \n-        Assert.assertEquals(\"\",\n-                IPUtil.getIPFromString(\"http://[dddd]:666/xzdsfasdf/awerwef\" + \"?eewer=2&xxx=3\"));\n-        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://[127.0.0.1]:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-        Assert.assertEquals(\"\", IPUtil.getIPFromString(\n-                \"jdbc:mysql://666.288.333.444:3306/nacos_config_test?characterEncoding=utf8&connectTimeout=1000\"\n-                        + \"&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\"));\n-    }\n-    \n-    @Test\n-    public void testSplitIpPort() {\n-        checkSplitIPPortStr(\"[::1]:88\", false, \"[::1]\", \"88\");\n-        checkSplitIPPortStr(\"[::1]\", false, \"[::1]\");\n-        checkSplitIPPortStr(\"127.0.0.1:88\", false, \"127.0.0.1\", \"88\");\n-        checkSplitIPPortStr(\"127.0.0.1\", false, \"127.0.0.1\");\n-        checkSplitIPPortStr(\"[2001:db8:0:0:1:0:0:1]:88\", false, \"[2001:db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:0db8:0:0:1:0:0:1]:88\", false, \"[2001:0db8:0:0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8::1:0:0:1]:88\", false, \"[2001:db8::1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8::0:1:0:0:1]:88\", false, \"[2001:db8::0:1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:0db8::1:0:0:1]:88\", false, \"[2001:0db8::1:0:0:1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8:0:0:1::1]:88\", false, \"[2001:db8:0:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:db8:0000:0:1::1]:88\", false, \"[2001:db8:0000:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[2001:DB8:0:0:1::1]:88\", false, \"[2001:DB8:0:0:1::1]\", \"88\");\n-        checkSplitIPPortStr(\"[fe80::3ce6:7132:808e:707a%19]:88\", false, \"[fe80::3ce6:7132:808e:707a%19]\", \"88\");\n-    \n-        checkSplitIPPortStr(\"::1:88\", true);\n-        checkSplitIPPortStr(\"[::1:88\", true);\n-        checkSplitIPPortStr(\"[127.0.0.1]:88\", true);\n-    }\n-    \n-    /**\n-     * checkSplitIpPortStr.\n-     * 2020/9/4 14:12\n-     * @param addr addr\n-     * @param isEx isEx\n-     * @param equalsStrs equalsStrs\n-     */\n-    public static void checkSplitIPPortStr(String addr, boolean isEx, String... equalsStrs) {\n-        try {\n-            String[] array = IPUtil.splitIPPortStr(addr);\n-            Assert.assertTrue(array.length == equalsStrs.length);\n-            if (array.length > 1) {\n-                Assert.assertTrue(array[0].equals(equalsStrs[0]));\n-                Assert.assertTrue(array[1].equals(equalsStrs[1]));\n-            } else {\n-                Assert.assertTrue(array[0].equals(equalsStrs[0]));\n-            }\n-        } catch (Exception ex) {\n-            if (!isEx) {\n-                // No exception is expected here, but an exception has occurred\n-                Assert.assertTrue(\"Unexpected exception\", false);\n-            }\n-        }\n-    }\n-    \n-}\n", "next_change": null}]}}]}}]}}, {"oid": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "url": "https://github.com/alibaba/nacos/commit/87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "message": "\u5220\u9664\u65e0\u7528\u6d4b\u8bd5", "committedDate": "2020-09-08T02:17:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNTM0NA==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484615344", "body": "IpUtil.checkOK(str) I think is better", "bodyText": "IpUtil.checkOK(str) I think is better", "bodyHTML": "<p dir=\"auto\">IpUtil.checkOK(str) I think is better</p>", "author": "chuntaojun", "createdAt": "2020-09-08T02:22:17Z", "path": "address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java", "diffHunk": "@@ -87,8 +87,8 @@ public ResponseEntity postCluster(@RequestParam(required = false) String product\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n-            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IpUtil.checkIps(ipArray);\n+            if (IpUtil.CHECK_OK.equals(checkResult)) {", "originalCommit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 8bab001ba..9560f4462 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = IpUtil.checkIps(ipArray);\n-            if (IpUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IPUtil.checkIPs(ipArray);\n+            if (IPUtil.checkOK(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 9560f4462..68cf60c4a 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = IPUtil.checkIPs(ipArray);\n-            if (IPUtil.checkOK(checkResult)) {\n+            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n+            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 68cf60c4a..9560f4462 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n-            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IPUtil.checkIPs(ipArray);\n+            if (IPUtil.checkOK(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 9560f4462..68cf60c4a 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = IPUtil.checkIPs(ipArray);\n-            if (IPUtil.checkOK(checkResult)) {\n+            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n+            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 68cf60c4a..9560f4462 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n-            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IPUtil.checkIPs(ipArray);\n+            if (IPUtil.checkOK(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 9560f4462..68cf60c4a 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = IPUtil.checkIPs(ipArray);\n-            if (IPUtil.checkOK(checkResult)) {\n+            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n+            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 68cf60c4a..9560f4462 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n-            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IPUtil.checkIPs(ipArray);\n+            if (IPUtil.checkOK(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 9560f4462..68cf60c4a 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = IPUtil.checkIPs(ipArray);\n-            if (IPUtil.checkOK(checkResult)) {\n+            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n+            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\nindex 68cf60c4a..9560f4462 100644\n--- a/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n+++ b/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java\n", "chunk": "@@ -87,8 +87,8 @@ public class AddressServerClusterController {\n             clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n             serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj);\n             String[] ipArray = addressServerManager.splitIps(ips);\n-            String checkResult = AddressServerParamCheckUtil.checkIps(ipArray);\n-            if (AddressServerParamCheckUtil.CHECK_OK.equals(checkResult)) {\n+            String checkResult = IPUtil.checkIPs(ipArray);\n+            if (IPUtil.checkOK(checkResult)) {\n                 List<Instance> instanceList = addressServerGeneratorManager\n                         .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray);\n                 for (Instance instance : instanceList) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNTkxOA==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484615918", "body": "Ip => IP", "bodyText": "Ip => IP", "bodyHTML": "<p dir=\"auto\">Ip =&gt; IP</p>", "author": "chuntaojun", "createdAt": "2020-09-08T02:24:45Z", "path": "common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java", "diffHunk": "@@ -38,7 +38,7 @@\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IpUtil.localHostIp()};", "originalCommit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex d566f45a7..d9743ca41 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IpUtil.localHostIp()};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex d9743ca41..2f45bf08c 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex 2f45bf08c..d9743ca41 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex d9743ca41..2f45bf08c 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex 2f45bf08c..d9743ca41 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex d9743ca41..2f45bf08c 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex 2f45bf08c..d9743ca41 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex d9743ca41..2f45bf08c 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\nindex 2f45bf08c..d9743ca41 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/tls/SelfHostnameVerifier.java\n", "chunk": "@@ -38,7 +38,7 @@ public final class SelfHostnameVerifier implements HostnameVerifier {\n     \n     private static ConcurrentHashMap<String, Boolean> hosts = new ConcurrentHashMap<String, Boolean>();\n     \n-    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", \"127.0.0.1\"};\n+    private static final String[] LOCALHOST_HOSTNAME = new String[] {\"localhost\", IPUtil.localHostIP()};\n     \n     public SelfHostnameVerifier(HostnameVerifier hv) {\n         this.hv = hv;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNjA3Nw==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484616077", "body": "IpUtil => IPUtil", "bodyText": "IpUtil => IPUtil", "bodyHTML": "<p dir=\"auto\">IpUtil =&gt; IPUtil</p>", "author": "chuntaojun", "createdAt": "2020-09-08T02:25:24Z", "path": "common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * ip tool.\n+ *\n+ * @author Nacos\n+ */\n+public class IpUtil {", "originalCommit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\nindex 97b3038ba..8cfd7bf70 100644\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n", "chunk": "@@ -26,7 +26,8 @@ import java.util.regex.Pattern;\n  *\n  * @author Nacos\n  */\n-public class IpUtil {\n+@SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"PMD.ClassNamingShouldBeCamelRule\"})\n+public class IPUtil {\n     \n     public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n     \n", "next_change": {"commit": "a0a63207c88cdc602201c549ac3a11a87d465232", "changed_code": [{"header": "diff --git a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java b/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\ndeleted file mode 100644\nindex 8cfd7bf70..000000000\n--- a/common/src/main/java/com/alibaba/nacos/common/utils/IpUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.common.utils;\n-\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * ip tool.\n- *\n- * @author Nacos\n- */\n-@SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"PMD.ClassNamingShouldBeCamelRule\"})\n-public class IPUtil {\n-    \n-    public static final boolean PREFER_IPV6_ADDRESSES = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n-    \n-    public static final String IPV6_START_MARK = \"[\";\n-    \n-    public static final String IPV6_END_MARK = \"]\";\n-    \n-    public static final String ILLEGAL_IP_PREFIX = \"illegal ip: \";\n-    \n-    public static final String IP_PORT_SPLITER = \":\";\n-    \n-    public static final int SPLIT_IP_PORT_RESULT_LENGTH = 2;\n-    \n-    private static final String LOCAL_HOST_IP_V4 = \"127.0.0.1\";\n-    \n-    private static final String LOCAL_HOST_IP_V6 = \"[::1]\";\n-    \n-    private static Pattern ipv4Pattern = Pattern.compile(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");\n-    \n-    private static final int IPV4_ADDRESS_LENGTH = 4;\n-    \n-    private static final int IPV6_ADDRESS_LENGTH = 16;\n-    \n-    private static final String CHECK_OK = \"ok\";\n-    \n-    /**\n-     * get localhost ip.\n-     * @return java.lang.String\n-     */\n-    public static String localHostIP() {\n-        if (PREFER_IPV6_ADDRESSES) {\n-            return LOCAL_HOST_IP_V6;\n-        }\n-        return LOCAL_HOST_IP_V4;\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv4.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv4(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV4_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the ip address is IPv6.\n-     *\n-     * @param addr ip address\n-     * @return boolean\n-     */\n-    public static boolean isIPv6(String addr) {\n-        try {\n-            return InetAddress.getByName(addr).getAddress().length == IPV6_ADDRESS_LENGTH;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * check whether the str is ip address (IPv4 or IPv6).\n-     *\n-     * @param addr ip address str\n-     * @return boolean\n-     */\n-    public static boolean isIP(String addr) {\n-        try {\n-            InetAddress.getByName(addr);\n-            return true;\n-        } catch (UnknownHostException e) {\n-            return false;\n-        }\n-    }\n-    \n-    /**\n-     * Check if the address contains a port.\n-     * 2020/9/3 14:53\n-     * @param address address string\n-     * @return boolean\n-     */\n-    public static boolean containsPort(String address) {\n-        return splitIPPortStr(address).length == SPLIT_IP_PORT_RESULT_LENGTH;\n-    }\n-    \n-    /**\n-     * Split IP and port strings, support IPv4 and IPv6, IP in IPv6 must be enclosed with [].\n-     *\n-     * @param str ip and port string\n-     * @return java.lang.String[]\n-     */\n-    public static String[] splitIPPortStr(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            throw new IllegalArgumentException(\"ip and port string cannot be empty!\");\n-        }\n-        String[] serverAddrArr;\n-        if (str.startsWith(IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            if (str.endsWith(IPV6_END_MARK)) {\n-                serverAddrArr = new String[1];\n-                serverAddrArr[0] = str;\n-            } else {\n-                serverAddrArr = new String[2];\n-                serverAddrArr[0] = str.substring(0, (str.indexOf(IPV6_END_MARK) + 1));\n-                serverAddrArr[1] = str.substring((str.indexOf(IPV6_END_MARK) + 2));\n-            }\n-            if (!isIPv6(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv6 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        } else {\n-            serverAddrArr = str.split(\":\");\n-            if (serverAddrArr.length > SPLIT_IP_PORT_RESULT_LENGTH) {\n-                throw new IllegalArgumentException(\"The IP address(\\\"\" + str\n-                        + \"\\\") is incorrect. If it is an IPv6 address, please use [] to enclose the IP part!\");\n-            }\n-            if (!isIPv4(serverAddrArr[0])) {\n-                throw new IllegalArgumentException(\"The IPv4 address(\\\"\" + serverAddrArr[0] + \"\\\") is incorrect.\");\n-            }\n-        }\n-        return serverAddrArr;\n-    }\n-    \n-    /**\n-     * Resolve the IP from the string containing the IP address.\n-     * @param str string containing IP address\n-     * @return java.lang.String\n-     */\n-    public static String getIPFromString(String str) {\n-        if (StringUtils.isBlank(str)) {\n-            return \"\";\n-        }\n-        String result = \"\";\n-        if (StringUtils.containsIgnoreCase(str, IPV6_START_MARK) && StringUtils.containsIgnoreCase(str, IPV6_END_MARK)) {\n-            result = str.substring(str.indexOf(IPV6_START_MARK), (str.indexOf(IPV6_END_MARK) + 1));\n-            if (!isIPv6(result)) {\n-                result = \"\";\n-            }\n-        } else {\n-            Matcher m = ipv4Pattern.matcher(str);\n-            if (m.find()) {\n-                result = m.group();\n-                if (!isIPv4(result)) {\n-                    result = \"\";\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    /**\n-     * Check ips.\n-     *\n-     * @param ips ips\n-     * @return 'ok' if check passed, otherwise illegal ip\n-     */\n-    public static String checkIPs(String... ips) {\n-        \n-        if (ips == null || ips.length == 0) {\n-            \n-            return CHECK_OK;\n-        }\n-        // illegal response\n-        StringBuilder illegalResponse = new StringBuilder();\n-        for (String ip : ips) {\n-            if (IPUtil.isIP(ip)) {\n-                continue;\n-            }\n-            illegalResponse.append(ip + \",\");\n-        }\n-        \n-        if (illegalResponse.length() == 0) {\n-            return CHECK_OK;\n-        }\n-        \n-        return ILLEGAL_IP_PREFIX + illegalResponse.substring(0, illegalResponse.length() - 1);\n-    }\n-    \n-    /**\n-     * Check whether checkIPs result is \"ok\".\n-     * @param checkIPsResult checkIPs result\n-     * @return boolean\n-     */\n-    public static boolean checkOK(String checkIPsResult) {\n-        return CHECK_OK.equals(checkIPsResult);\n-    }\n-    \n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyNjA4Mg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r484626082", "body": "\u8fd9\u79cd\u5730\u65b9\u73b0\u5728\u662f\u4e0d\u662f\u5e94\u8be5\u7528isIp\u66ff\u6362isIpv4\u4e86\uff1f", "bodyText": "\u8fd9\u79cd\u5730\u65b9\u73b0\u5728\u662f\u4e0d\u662f\u5e94\u8be5\u7528isIp\u66ff\u6362isIpv4\u4e86\uff1f", "bodyHTML": "<p dir=\"auto\">\u8fd9\u79cd\u5730\u65b9\u73b0\u5728\u662f\u4e0d\u662f\u5e94\u8be5\u7528isIp\u66ff\u6362isIpv4\u4e86\uff1f</p>", "author": "wangweizZZ", "createdAt": "2020-09-08T03:08:54Z", "path": "client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "diffHunk": "@@ -190,7 +190,7 @@ public static void checkBetaIps(String betaIps) throws NacosException {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtils.isIpv4(ip)) {\n+            if (!IpUtil.isIpv4(ip)) {", "originalCommit": "87ab5f16bec8bd640463dbc19e1b8aabb9dd06fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex dddb8b3d9..3c8f3ac3a 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtil.isIpv4(ip)) {\n+            if (!IPUtil.isIP(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "167d47915aca5f862c81ab26e72c07e108746159", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 3c8f3ac3a..7b542d457 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IPUtil.isIP(ip)) {\n+            if (!IpUtils.isIpv4(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "7ba31524c6c39e482c703c184845e3400d61120e", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 7b542d457..3c8f3ac3a 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtils.isIpv4(ip)) {\n+            if (!IPUtil.isIP(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 3c8f3ac3a..7b542d457 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IPUtil.isIP(ip)) {\n+            if (!IpUtils.isIpv4(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 7b542d457..3c8f3ac3a 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtils.isIpv4(ip)) {\n+            if (!IPUtil.isIP(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 3c8f3ac3a..7b542d457 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IPUtil.isIP(ip)) {\n+            if (!IpUtils.isIpv4(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 7b542d457..3c8f3ac3a 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtils.isIpv4(ip)) {\n+            if (!IPUtil.isIP(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 3c8f3ac3a..7b542d457 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IPUtil.isIP(ip)) {\n+            if (!IpUtils.isIpv4(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\nindex 7b542d457..3c8f3ac3a 100644\n--- a/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n+++ b/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ParamUtils {\n         }\n         String[] ipsArr = betaIps.split(\",\");\n         for (String ip : ipsArr) {\n-            if (!IpUtils.isIpv4(ip)) {\n+            if (!IPUtil.isIP(ip)) {\n                 throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "1858bc0649acc0f83beeb943bf15b7b5d79e2615", "url": "https://github.com/alibaba/nacos/commit/1858bc0649acc0f83beeb943bf15b7b5d79e2615", "message": "IpUtil \u6539\u540d \u4e3a IPUtil, \u6d89\u53caIP\u7684\u76f8\u5173\u65b9\u6cd5\u540d\u4fee\u6539,\u6d89\u53ca\u5230\u7684\u8c03\u7528\u4fee\u6539,\u68c0\u6d4bIP\u7684\u5730\u65b9\u8c03\u7528\u7684isIPv4\u6539\u4e3aisIP. \u4fee\u6539\u6d89\u53caIP\u7684\u5b57\u6bb5\u957f\u5ea6\u53ca\u76f8\u5173\u5347\u7ea7\u66f4\u65b0\u7684sql", "committedDate": "2020-09-08T04:40:00Z", "type": "commit"}, {"oid": "a0a63207c88cdc602201c549ac3a11a87d465232", "url": "https://github.com/alibaba/nacos/commit/a0a63207c88cdc602201c549ac3a11a87d465232", "message": "no message", "committedDate": "2020-09-08T05:14:24Z", "type": "commit"}, {"oid": "dbe893465b1e4f7f8feeace364f1c9a8db646b43", "url": "https://github.com/alibaba/nacos/commit/dbe893465b1e4f7f8feeace364f1c9a8db646b43", "message": "no message", "committedDate": "2020-09-08T05:14:43Z", "type": "commit"}, {"oid": "37620a4123c556b396ee2bf0ab85c2deaa1bb9ed", "url": "https://github.com/alibaba/nacos/commit/37620a4123c556b396ee2bf0ab85c2deaa1bb9ed", "message": "no message", "committedDate": "2020-09-08T05:17:57Z", "type": "commit"}, {"oid": "55c38451a863842507da77ce774628239b084494", "url": "https://github.com/alibaba/nacos/commit/55c38451a863842507da77ce774628239b084494", "message": "no message", "committedDate": "2020-09-08T05:18:40Z", "type": "commit"}, {"oid": "44c7ff8a30f47a525266b4ba9d7ecfc1e3e16ec9", "url": "https://github.com/alibaba/nacos/commit/44c7ff8a30f47a525266b4ba9d7ecfc1e3e16ec9", "message": "\u83b7\u53d6\u672c\u673aIP\u65f6,\u5982\u679c\u672c\u673aIP\u662fIPv6\u5e76\u4e14\u5305\u542b\u7f51\u5361\u4fe1\u606f(V6\u5730\u5740\u4e2d\u6700\u540e\u9762\u7684\u767e\u5206\u53f7\u548c\u767e\u5206\u53f7\u540e\u9762\u7684\u5185\u5bb9)\u5219\u53bb\u9664\u7f51\u5361\u4fe1\u606f", "committedDate": "2020-09-09T06:47:18Z", "type": "commit"}, {"oid": "167d47915aca5f862c81ab26e72c07e108746159", "url": "https://github.com/alibaba/nacos/commit/167d47915aca5f862c81ab26e72c07e108746159", "message": "Merge pull request #1 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-09-21T02:15:57Z", "type": "commit"}, {"oid": "7ba31524c6c39e482c703c184845e3400d61120e", "url": "https://github.com/alibaba/nacos/commit/7ba31524c6c39e482c703c184845e3400d61120e", "message": "Merge branch 'develop' into support_ipv6\n\n# Conflicts:\n#\tcore/src/main/java/com/alibaba/nacos/core/cluster/MemberUtils.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/raft/RaftCore.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/raft/RaftProxy.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/misc/NamingProxy.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/misc/NetUtils.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/misc/ServerStatusSynchronizer.java\n#\tnaming/src/main/java/com/alibaba/nacos/naming/misc/ServiceStatusSynchronizer.java\n#\tsys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java", "committedDate": "2020-09-21T03:29:22Z", "type": "commit"}, {"oid": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "url": "https://github.com/alibaba/nacos/commit/5fe766ae5826e64806901a643d2fbcffd8bb70cb", "message": "Merge pull request #2 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-10-12T03:13:06Z", "type": "commit"}, {"oid": "9ef561bc017c3dc8bed802ea2e5ccfccf8b8af4c", "url": "https://github.com/alibaba/nacos/commit/9ef561bc017c3dc8bed802ea2e5ccfccf8b8af4c", "message": "Merge pull request #3 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-10-13T07:55:09Z", "type": "commit"}, {"oid": "34b53fc23ec15e4bee45f17ee746c00d301205a8", "url": "https://github.com/alibaba/nacos/commit/34b53fc23ec15e4bee45f17ee746c00d301205a8", "message": "Merge pull request #4 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-10-17T06:51:52Z", "type": "commit"}, {"oid": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "url": "https://github.com/alibaba/nacos/commit/5a3b893365ccd9440fd887ad3b6b3345fc936264", "message": "Merge branch 'develop' into support_ipv6\n\n# Conflicts:\n#\tnaming/src/main/java/com/alibaba/nacos/naming/misc/NetUtils.java\n#\tsys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java", "committedDate": "2020-10-17T07:07:21Z", "type": "commit"}, {"oid": "877ebab31199458bf647e88d8601dbe5cc80e585", "url": "https://github.com/alibaba/nacos/commit/877ebab31199458bf647e88d8601dbe5cc80e585", "message": "\u89e3\u51b3 AvoidComplexConditionRule(\u8bf7\u4e0d\u8981\u5728\u6761\u4ef6\u4e2d\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f)", "committedDate": "2020-10-17T07:20:13Z", "type": "commit"}, {"oid": "ce519390ecb26ea03cf0b383568aa72e2cca144f", "url": "https://github.com/alibaba/nacos/commit/ce519390ecb26ea03cf0b383568aa72e2cca144f", "message": "\u79fb\u9664\u65e0\u7528\u4ee3\u7801", "committedDate": "2020-10-19T04:07:21Z", "type": "commit"}, {"oid": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "url": "https://github.com/alibaba/nacos/commit/1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "message": "Merge pull request #5 from alibaba/develop\n\n\u62c9\u4ee3\u7801", "committedDate": "2020-10-20T06:35:47Z", "type": "commit"}, {"oid": "6db4d53e4ad51cc133fd5296b5abc29a71dd48ff", "url": "https://github.com/alibaba/nacos/commit/6db4d53e4ad51cc133fd5296b5abc29a71dd48ff", "message": "Merge pull request #6 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-10-22T03:49:27Z", "type": "commit"}, {"oid": "a34904b430329d30e296abd34ac889c9d20cb32a", "url": "https://github.com/alibaba/nacos/commit/a34904b430329d30e296abd34ac889c9d20cb32a", "message": "Merge branch 'develop' into support_ipv6\n\n# Conflicts:\n#\tnaming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/raft/RaftCore.java", "committedDate": "2020-10-22T06:32:09Z", "type": "commit"}, {"oid": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "url": "https://github.com/alibaba/nacos/commit/29e7546a70ab312f0df0cfc1548de9f1179589f4", "message": "Merge pull request #7 from alibaba/develop\n\n\u66f4\u65b0\u4ee3\u7801", "committedDate": "2020-10-26T03:35:33Z", "type": "commit"}, {"oid": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "url": "https://github.com/alibaba/nacos/commit/e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "message": "Merge branch 'develop' into support_ipv6", "committedDate": "2020-10-26T03:39:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzgyNw==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r498817827", "body": "\u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2a\u5224\u65ad\uff1f", "bodyText": "\u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2a\u5224\u65ad\uff1f", "bodyHTML": "<p dir=\"auto\">\u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2a\u5224\u65ad\uff1f</p>", "author": "chuntaojun", "createdAt": "2020-10-02T13:22:52Z", "path": "core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java", "diffHunk": "@@ -93,6 +93,11 @@ private static String resolveValue(String value, String encoding) {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n+        } catch (Exception ex) {", "originalCommit": "7ba31524c6c39e482c703c184845e3400d61120e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fe766ae5826e64806901a643d2fbcffd8bb70cb", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex d63e47af9..e8d89917c 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -93,11 +93,6 @@ public class WebUtils {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n-        } catch (Exception ex) {\n-            final String seq = \"URLDecoder\";\n-            if (!StringUtils.contains(ex.toString(), seq)) {\n-                throw ex;\n-            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "5a3b893365ccd9440fd887ad3b6b3345fc936264", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex e8d89917c..d63e47af9 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -93,6 +93,11 @@ public class WebUtils {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n+        } catch (Exception ex) {\n+            final String seq = \"URLDecoder\";\n+            if (!StringUtils.contains(ex.toString(), seq)) {\n+                throw ex;\n+            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "1deee2aa15cc5764bf2430ce67a76f1f19e1517d", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex d63e47af9..f570c9319 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -87,17 +87,32 @@ public class WebUtils {\n      * @return Decoded data\n      */\n     private static String resolveValue(String value, String encoding) {\n+        if (StringUtils.isEmpty(encoding)) {\n+            encoding = StandardCharsets.UTF_8.name();\n+        }\n+        try {\n+            value = new String(value.getBytes(StandardCharsets.UTF_8), encoding);\n+        } catch (UnsupportedEncodingException ignore) {\n+        }\n+        return value.trim();\n+    }\n+    \n+    /**\n+     * decode target value with UrlDecode.\n+     *\n+     * <p>Under Content-Type:application/x-www-form-urlencoded situation.\n+     *\n+     * @param value    value\n+     * @param encoding encode\n+     * @return Decoded data\n+     */\n+    private static String resolveValueWithUrlDecode(String value, String encoding) {\n         if (StringUtils.isEmpty(encoding)) {\n             encoding = StandardCharsets.UTF_8.name();\n         }\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n-        } catch (Exception ex) {\n-            final String seq = \"URLDecoder\";\n-            if (!StringUtils.contains(ex.toString(), seq)) {\n-                throw ex;\n-            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "a34904b430329d30e296abd34ac889c9d20cb32a", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex f570c9319..094768bbb 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -113,6 +113,11 @@ public class WebUtils {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n+        } catch (Exception ex) {\n+            final String seq = \"URLDecoder\";\n+            if (!StringUtils.contains(ex.toString(), seq)) {\n+                throw ex;\n+            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "29e7546a70ab312f0df0cfc1548de9f1179589f4", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex 094768bbb..f570c9319 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -113,11 +113,6 @@ public class WebUtils {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n-        } catch (Exception ex) {\n-            final String seq = \"URLDecoder\";\n-            if (!StringUtils.contains(ex.toString(), seq)) {\n-                throw ex;\n-            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "e9eae1cb8b021cd5dd839e28df3eb699ea4ed572", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex f570c9319..094768bbb 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -113,6 +113,11 @@ public class WebUtils {\n         try {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n+        } catch (Exception ex) {\n+            final String seq = \"URLDecoder\";\n+            if (!StringUtils.contains(ex.toString(), seq)) {\n+                throw ex;\n+            }\n         }\n         return value.trim();\n     }\n", "next_change": {"commit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex 094768bbb..f523d0116 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -114,6 +114,8 @@ public class WebUtils {\n             value = HttpUtils.decode(new String(value.getBytes(StandardCharsets.UTF_8), encoding), encoding);\n         } catch (UnsupportedEncodingException ignore) {\n         } catch (Exception ex) {\n+            // If the value contains a special character without encoding (such as \"[IPv6]\"),\n+            // a URLDecoder exception is thrown, which is ignored and the original value is returned\n             final String seq = \"URLDecoder\";\n             if (!StringUtils.contains(ex.toString(), seq)) {\n                 throw ex;\n", "next_change": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex f523d0116..625bb74cc 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -123,7 +123,7 @@ public class WebUtils {\n         }\n         return value.trim();\n     }\n-\n+    \n     /**\n      * get accept encode from request.\n      *\n", "next_change": null}]}}, {"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex 094768bbb..f523d0116 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -121,7 +123,7 @@ public class WebUtils {\n         }\n         return value.trim();\n     }\n-    \n+\n     /**\n      * get accept encode from request.\n      *\n", "next_change": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex f523d0116..625bb74cc 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -123,7 +123,7 @@ public class WebUtils {\n         }\n         return value.trim();\n     }\n-\n+    \n     /**\n      * get accept encode from request.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "url": "https://github.com/alibaba/nacos/commit/99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "message": "\u6dfb\u52a0\u6ce8\u91ca", "committedDate": "2020-11-03T08:17:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2MzE4Nw==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517063187", "body": "Please do not change the code style.", "bodyText": "Please do not change the code style.", "bodyHTML": "<p dir=\"auto\">Please do not change the code style.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:26:26Z", "path": "core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java", "diffHunk": "@@ -42,7 +42,7 @@\n  * @author nkorange\n  */\n public class WebUtils {\n-    \n+", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\nindex f523d0116..625bb74cc 100644\n--- a/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n+++ b/core/src/main/java/com/alibaba/nacos/core/utils/WebUtils.java\n", "chunk": "@@ -42,7 +42,7 @@ import java.util.function.Function;\n  * @author nkorange\n  */\n public class WebUtils {\n-\n+    \n     /**\n      * get target value from parameterMap, if not found will throw {@link IllegalArgumentException}.\n      *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2NjI2MQ==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517066261", "body": "Here \":\" can use IPUtil.IP_PORT_SPLITER.", "bodyText": "Here \":\" can use IPUtil.IP_PORT_SPLITER.", "bodyHTML": "<p dir=\"auto\">Here \":\" can use IPUtil.IP_PORT_SPLITER.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:38:39Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java", "diffHunk": "@@ -955,7 +956,7 @@ public int getPagedService(String namespaceId, int startPage, int pageSize, Stri\n                 contained = false;\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n-                    if (containedInstance.contains(\":\")) {\n+                    if (IPUtil.containsPort(containedInstance)) {\n                         if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\nindex 1452c5584..d6ed8600c 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/ServiceManager.java\n", "chunk": "@@ -957,7 +957,7 @@ public class ServiceManager implements RecordListener<Service> {\n                 List<Instance> instances = service.allIPs();\n                 for (Instance instance : instances) {\n                     if (IPUtil.containsPort(containedInstance)) {\n-                        if (StringUtils.equals(instance.getIp() + \":\" + instance.getPort(), containedInstance)) {\n+                        if (StringUtils.equals(instance.getIp() +  IPUtil.IP_PORT_SPLITER + instance.getPort(), containedInstance)) {\n                             contained = true;\n                             break;\n                         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2NjI5Ng==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517066296", "body": "Here \":\" can use IPUtil.IP_PORT_SPLITER.", "bodyText": "Here \":\" can use IPUtil.IP_PORT_SPLITER.", "bodyHTML": "<p dir=\"auto\">Here \":\" can use IPUtil.IP_PORT_SPLITER.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:38:48Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java", "diffHunk": "@@ -135,7 +136,7 @@ private void deleteIp(Instance instance) {\n                     .appendParam(\"ephemeral\", \"true\").appendParam(\"clusterName\", instance.getClusterName())\n                     .appendParam(\"serviceName\", service.getName()).appendParam(\"namespaceId\", service.getNamespaceId());\n             \n-            String url = \"http://127.0.0.1:\" + ApplicationUtils.getPort() + ApplicationUtils.getContextPath()\n+            String url = \"http://\" + IPUtil.localHostIP() + \":\" + ApplicationUtils.getPort() + ApplicationUtils.getContextPath()", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java b/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java\nindex 6e7545d38..74d94aa60 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/ClientBeatCheckTask.java\n", "chunk": "@@ -136,7 +136,7 @@ public class ClientBeatCheckTask implements Runnable {\n                     .appendParam(\"ephemeral\", \"true\").appendParam(\"clusterName\", instance.getClusterName())\n                     .appendParam(\"serviceName\", service.getName()).appendParam(\"namespaceId\", service.getNamespaceId());\n             \n-            String url = \"http://\" + IPUtil.localHostIP() + \":\" + ApplicationUtils.getPort() + ApplicationUtils.getContextPath()\n+            String url = \"http://\" + IPUtil.localHostIP() + IPUtil.IP_PORT_SPLITER + ApplicationUtils.getPort() + ApplicationUtils.getContextPath()\n                     + UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance?\" + request.toUrl();\n             \n             // delete instance asynchronously:\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2NjgzNg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517066836", "body": "Please do not change the code style.", "bodyText": "Please do not change the code style.", "bodyHTML": "<p dir=\"auto\">Please do not change the code style.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:40:58Z", "path": "sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java", "diffHunk": "@@ -87,20 +81,20 @@ public void run() {\n                 if (StringUtils.isBlank(nacosIP)) {\n                     nacosIP = ApplicationUtils.getProperty(IP_ADDRESS);\n                 }\n-                \n-                boolean illegalIP = !StringUtils.isBlank(nacosIP) && !(isIP(nacosIP) || isDomain(nacosIP));\n-                if (illegalIP) {\n-                    throw new RuntimeException(\"nacos address \" + nacosIP + \" is not ip\");\n+                if (!StringUtils.isBlank(nacosIP)) {\n+                    if (!(IPUtil.isIP(nacosIP) || isDomain(nacosIP))) {\n+                        throw new RuntimeException(\"nacos address \" + nacosIP + \" is not ip\");\n+                    }\n                 }\n                 String tmpSelfIP = nacosIP;\n                 if (StringUtils.isBlank(tmpSelfIP)) {\n                     preferHostnameOverIP = Boolean.getBoolean(SYSTEM_PREFER_HOSTNAME_OVER_IP);\n-                    \n+    ", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\nindex 886904f18..f48c3f65a 100644\n--- a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n+++ b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n", "chunk": "@@ -89,12 +89,12 @@ public class InetUtils {\n                 String tmpSelfIP = nacosIP;\n                 if (StringUtils.isBlank(tmpSelfIP)) {\n                     preferHostnameOverIP = Boolean.getBoolean(SYSTEM_PREFER_HOSTNAME_OVER_IP);\n-    \n+                    \n                     if (!preferHostnameOverIP) {\n                         preferHostnameOverIP = Boolean\n                                 .parseBoolean(ApplicationUtils.getProperty(PREFER_HOSTNAME_OVER_IP));\n                     }\n-    \n+                    \n                     if (preferHostnameOverIP) {\n                         InetAddress inetAddress;\n                         try {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2Njg3NA==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517066874", "body": "Please do not change the code style.", "bodyText": "Please do not change the code style.", "bodyHTML": "<p dir=\"auto\">Please do not change the code style.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:41:09Z", "path": "sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java", "diffHunk": "@@ -87,20 +81,20 @@ public void run() {\n                 if (StringUtils.isBlank(nacosIP)) {\n                     nacosIP = ApplicationUtils.getProperty(IP_ADDRESS);\n                 }\n-                \n-                boolean illegalIP = !StringUtils.isBlank(nacosIP) && !(isIP(nacosIP) || isDomain(nacosIP));\n-                if (illegalIP) {\n-                    throw new RuntimeException(\"nacos address \" + nacosIP + \" is not ip\");\n+                if (!StringUtils.isBlank(nacosIP)) {\n+                    if (!(IPUtil.isIP(nacosIP) || isDomain(nacosIP))) {\n+                        throw new RuntimeException(\"nacos address \" + nacosIP + \" is not ip\");\n+                    }\n                 }\n                 String tmpSelfIP = nacosIP;\n                 if (StringUtils.isBlank(tmpSelfIP)) {\n                     preferHostnameOverIP = Boolean.getBoolean(SYSTEM_PREFER_HOSTNAME_OVER_IP);\n-                    \n+    \n                     if (!preferHostnameOverIP) {\n                         preferHostnameOverIP = Boolean\n                                 .parseBoolean(ApplicationUtils.getProperty(PREFER_HOSTNAME_OVER_IP));\n                     }\n-                    \n+    ", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\nindex 886904f18..f48c3f65a 100644\n--- a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n+++ b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n", "chunk": "@@ -89,12 +89,12 @@ public class InetUtils {\n                 String tmpSelfIP = nacosIP;\n                 if (StringUtils.isBlank(tmpSelfIP)) {\n                     preferHostnameOverIP = Boolean.getBoolean(SYSTEM_PREFER_HOSTNAME_OVER_IP);\n-    \n+                    \n                     if (!preferHostnameOverIP) {\n                         preferHostnameOverIP = Boolean\n                                 .parseBoolean(ApplicationUtils.getProperty(PREFER_HOSTNAME_OVER_IP));\n                     }\n-    \n+                    \n                     if (preferHostnameOverIP) {\n                         InetAddress inetAddress;\n                         try {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2ODU4Mg==", "url": "https://github.com/alibaba/nacos/pull/3773#discussion_r517068582", "body": "`IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address : address instanceof Inet4Address`  \r\nHere is a separate line, which is more readable.", "bodyText": "IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address : address instanceof Inet4Address\nHere is a separate line, which is more readable.", "bodyHTML": "<p dir=\"auto\"><code>IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address : address instanceof Inet4Address</code><br>\nHere is a separate line, which is more readable.</p>", "author": "Maijh97", "createdAt": "2020-11-04T02:48:31Z", "path": "sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java", "diffHunk": "@@ -159,8 +160,9 @@ public static InetAddress findFirstNonLoopbackAddress() {\n                     if (!ignoreInterface(ifc.getDisplayName())) {\n                         for (Enumeration<InetAddress> addrs = ifc.getInetAddresses(); addrs.hasMoreElements(); ) {\n                             InetAddress address = addrs.nextElement();\n-                            if (address instanceof Inet4Address && !address.isLoopbackAddress() && isPreferredAddress(\n-                                    address)) {\n+                            if ((IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address\n+                                    : address instanceof Inet4Address) && !address.isLoopbackAddress()\n+                                    && isPreferredAddress(address)) {", "originalCommit": "99cbf16b1cfa5eb4f22e3a7836c5d35b1911afc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bceff65d438192f2925374fb602491516a6e7e59", "changed_code": [{"header": "diff --git a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\nindex 886904f18..f48c3f65a 100644\n--- a/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n+++ b/sys/src/main/java/com/alibaba/nacos/sys/utils/InetUtils.java\n", "chunk": "@@ -156,13 +156,13 @@ public class InetUtils {\n                     } else {\n                         continue;\n                     }\n-                    \n+    \n                     if (!ignoreInterface(ifc.getDisplayName())) {\n                         for (Enumeration<InetAddress> addrs = ifc.getInetAddresses(); addrs.hasMoreElements(); ) {\n                             InetAddress address = addrs.nextElement();\n-                            if ((IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address\n-                                    : address instanceof Inet4Address) && !address.isLoopbackAddress()\n-                                    && isPreferredAddress(address)) {\n+                            boolean isLegalIpVersion = IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address\n+                                    : address instanceof Inet4Address;\n+                            if (isLegalIpVersion && !address.isLoopbackAddress() && isPreferredAddress(address)) {\n                                 LOG.debug(\"Found non-loopback interface: \" + ifc.getDisplayName());\n                                 result = address;\n                             }\n", "next_change": null}]}}, {"oid": "bceff65d438192f2925374fb602491516a6e7e59", "url": "https://github.com/alibaba/nacos/commit/bceff65d438192f2925374fb602491516a6e7e59", "message": "\u8c03\u6574code style, \u8c03\u6574\u83b7\u53d6\u672c\u673aIP\u7684\u903b\u8f91", "committedDate": "2020-11-04T03:40:52Z", "type": "commit"}]}