{"pr_number": 6693, "pr_title": "fix: Refactors rate limiter within LoggingHandler to be singleton", "pr_author": "AlanConfluent", "pr_createdAt": "2020-11-30T22:15:35Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6693", "timeline": [{"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7", "url": "https://github.com/confluentinc/ksql/commit/52635ac5a662a8093df86df433b52f8fda27f1c7", "message": "fix: Refactors rate limiter within LoggingHandler to be singleton", "committedDate": "2020-11-30T22:12:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjYwNQ==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016605", "body": "This looks like it should be package-private and marked as VisibleForTesting?", "bodyText": "This looks like it should be package-private and marked as VisibleForTesting?", "bodyHTML": "<p dir=\"auto\">This looks like it should be package-private and marked as VisibleForTesting?</p>", "author": "vcrfxia", "createdAt": "2020-12-01T01:39:51Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(", "originalCommit": "52635ac5a662a8093df86df433b52f8fda27f1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODUxNA==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533018514", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-12-01T01:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016962", "body": "Since only the path of the routing context is used here, would it make more sense to pass just the path into this method rather than the entire routing context?", "bodyText": "Since only the path of the routing context is used here, would it make more sense to pass just the path into this method rather than the entire routing context?", "bodyHTML": "<p dir=\"auto\">Since only the path of the routing context is used here, would it make more sense to pass just the path into this method rather than the entire routing context?</p>", "author": "vcrfxia", "createdAt": "2020-12-01T01:40:55Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n+    requireNonNull(ksqlRestConfig);\n+    this.rateLimiterFactory = requireNonNull(rateLimiterFactory);\n+    this.rateLimitedPaths = getRateLimitedRequestPaths(ksqlRestConfig);\n+  }\n+\n+  public boolean shouldLog(final RoutingContext routingContext) {\n+    if (rateLimitedPaths.containsKey(routingContext.request().path())) {\n+      final String path = routingContext.request().path();", "originalCommit": "52635ac5a662a8093df86df433b52f8fda27f1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxOTQzNg==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533019436", "bodyText": "I was debating that a bit.  At the moment it only rate limits based upon the path, but in the future, it could be broader.  I'm fine to pass path now and revise in the future.", "author": "AlanConfluent", "createdAt": "2020-12-01T01:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk4MQ==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016981", "body": "nit (was confused by the name for a while):\r\n```suggestion\r\n  public void shouldLog_notRateLimited) {\r\n```", "bodyText": "nit (was confused by the name for a while):\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldLog_notIncluded() {\n          \n          \n            \n              public void shouldLog_notRateLimited) {", "bodyHTML": "<p dir=\"auto\">nit (was confused by the name for a while):</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldLog_notIncluded(</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldLog_notRateLimited</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "vcrfxia", "createdAt": "2020-12-01T01:41:00Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingRateLimiterTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package io.confluent.ksql.api.server;\n+\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.time.Clock;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingRateLimiterTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Logger logger;\n+  @Mock\n+  private RateLimiter rateLimiter;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Mock\n+  private Clock clock;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingRateLimiter loggingRateLimiter;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.path()).thenReturn(\"/query\");\n+    when(ksqlRestConfig.getStringAsMap(any())).thenReturn(ImmutableMap.of(\"/query\", \"2\"));\n+    when(rateLimiter.tryAcquire()).thenReturn(true);\n+    loggingRateLimiter = new LoggingRateLimiter(ksqlRestConfig, (rateLimit) -> rateLimiter);\n+  }\n+\n+  @Test\n+  public void shouldLog() {\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+\n+    // Then:\n+    verify(rateLimiter).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldSkipRateLimited() {\n+    // Given:\n+    when(rateLimiter.tryAcquire()).thenReturn(true, true, false, false);\n+\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+\n+    // Then:\n+    verify(rateLimiter, times(4)).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldLog_notIncluded() {", "originalCommit": "52635ac5a662a8093df86df433b52f8fda27f1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDgyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533020821", "bodyText": "Done.\nI agree, the name was unclear.", "author": "AlanConfluent", "createdAt": "2020-12-01T01:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk4MQ=="}], "type": "inlineReview"}, {"oid": "6b6f3daa6a246f94b3f2e85a8fec9452bc8b29ac", "url": "https://github.com/confluentinc/ksql/commit/6b6f3daa6a246f94b3f2e85a8fec9452bc8b29ac", "message": "Feedbakc", "committedDate": "2020-12-01T01:55:53Z", "type": "commit"}]}