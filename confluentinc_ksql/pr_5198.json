{"pr_number": 5198, "pr_title": "fix: use schema in annotation as schema provider if present", "pr_author": "agavra", "pr_createdAt": "2020-04-27T22:13:57Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5198", "timeline": [{"oid": "ddf502a26a0bda52406409195a5f0df03011ec60", "url": "https://github.com/confluentinc/ksql/commit/ddf502a26a0bda52406409195a5f0df03011ec60", "message": "fix: use schema in annotation as schema provider if present", "committedDate": "2020-04-27T22:27:32Z", "type": "forcePushed"}, {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "url": "https://github.com/confluentinc/ksql/commit/8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "message": "fix: use schema in annotation as schema provider if present", "committedDate": "2020-04-27T23:16:46Z", "type": "commit"}, {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "url": "https://github.com/confluentinc/ksql/commit/8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "message": "fix: use schema in annotation as schema provider if present", "committedDate": "2020-04-27T23:16:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDg3Ng==", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416480876", "body": "Is it worth parsing once, and failing early, rather than on each call?  Or is this not really an issue?", "bodyText": "Is it worth parsing once, and failing early, rather than on each call?  Or is this not really an issue?", "bodyHTML": "<p dir=\"auto\">Is it worth parsing once, and failing early, rather than on each call?  Or is this not really an issue?</p>", "author": "big-andy-coates", "createdAt": "2020-04-28T09:49:32Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();", "originalCommit": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MTI0OQ==", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416481249", "body": "This method is getting large - consider moving this code into its own function?", "bodyText": "This method is getting large - consider moving this code into its own function?", "bodyHTML": "<p dir=\"auto\">This method is getting large - consider moving this code into its own function?</p>", "author": "big-andy-coates", "createdAt": "2020-04-28T09:50:13Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();\n+    } else if (!GenericsUtil.hasGenerics(javaReturnSchema)) {\n+      final SqlType sqlType;\n+      try {\n+        sqlType = SchemaConverters.functionToSqlConverter().toSqlType(javaReturnSchema);\n+      } catch (final Exception e) {\n+        throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n+            + javaReturnSchema + \" return type is not supported without a schema annotation.\");\n+      }\n+      schemaProvider = args -> sqlType;", "originalCommit": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MjY4OA==", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416482688", "body": "Either a schema _or schemaProvider_ is required, right?\r\n\r\n... and users may find 'schema annotation;' confusing, given the 'schema' is the name of a property of the annotation, not the name of the annotation.\r\n\r\nMaybe:\r\n\r\n```suggestion\r\n        throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\r\n            + javaReturnSchema + \" return type is not supported without either a schema or schemaProvider set in the annotation.\");\r\n```\r\n\r\nThough even better would be to pass down the type of the annotation so that the error could be explicit and say `set in the @Udf annotation`, or `in the @Udtf annotation` etc.\r\n\r\n", "bodyText": "Either a schema or schemaProvider is required, right?\n... and users may find 'schema annotation;' confusing, given the 'schema' is the name of a property of the annotation, not the name of the annotation.\nMaybe:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n          \n          \n            \n                        + javaReturnSchema + \" return type is not supported without a schema annotation.\");\n          \n          \n            \n                    throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n          \n          \n            \n                        + javaReturnSchema + \" return type is not supported without either a schema or schemaProvider set in the annotation.\");\n          \n      \n    \n    \n  \n\nThough even better would be to pass down the type of the annotation so that the error could be explicit and say set in the @Udf annotation, or in the @Udtf annotation etc.", "bodyHTML": "<p dir=\"auto\">Either a schema <em>or schemaProvider</em> is required, right?</p>\n<p dir=\"auto\">... and users may find 'schema annotation;' confusing, given the 'schema' is the name of a property of the annotation, not the name of the annotation.</p>\n<p dir=\"auto\">Maybe:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">KsqlException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cannot load UDF <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> functionName <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>. <span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">+</span> javaReturnSchema <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> return type is not supported without a schema annotation.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">KsqlException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cannot load UDF <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> functionName <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>. <span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">+</span> javaReturnSchema <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> return type is not supported without <span class=\"x x-first x-last\">either </span>a schema<span class=\"x x-first x-last\"> or schemaProvider set in the</span> annotation.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Though even better would be to pass down the type of the annotation so that the error could be explicit and say <code>set in the @Udf annotation</code>, or <code>in the @Udtf annotation</code> etc.</p>", "author": "big-andy-coates", "createdAt": "2020-04-28T09:52:37Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();\n+    } else if (!GenericsUtil.hasGenerics(javaReturnSchema)) {\n+      final SqlType sqlType;\n+      try {\n+        sqlType = SchemaConverters.functionToSqlConverter().toSqlType(javaReturnSchema);\n+      } catch (final Exception e) {\n+        throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n+            + javaReturnSchema + \" return type is not supported without a schema annotation.\");", "originalCommit": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0MDExNg==", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416740116", "bodyText": "I changed the error to clarify, but did not pass down the annotation. I think it's clear enough without it :)", "author": "agavra", "createdAt": "2020-04-28T16:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MjY4OA=="}], "type": "inlineReview"}, {"oid": "636e7d0aa4a9e430b50d5375691502fffeafefde", "url": "https://github.com/confluentinc/ksql/commit/636e7d0aa4a9e430b50d5375691502fffeafefde", "message": "chore: address andy's comments", "committedDate": "2020-04-28T16:25:29Z", "type": "commit"}]}