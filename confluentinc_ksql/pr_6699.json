{"pr_number": 6699, "pr_title": "fix: Fixes bug in latests-by-offset when using nulls and sessions windows", "pr_author": "vpapavas", "pr_createdAt": "2020-12-01T23:30:58Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6699", "timeline": [{"oid": "8befb9aa8019c4ff97e8e0a3084a64e778f4d15a", "url": "https://github.com/confluentinc/ksql/commit/8befb9aa8019c4ff97e8e0a3084a64e778f4d15a", "message": "fix: ignore nulls when merging session windows, if specified", "committedDate": "2020-12-01T23:28:14Z", "type": "commit"}, {"oid": "d917459b00d8daf3650b07e443db44de71dd826d", "url": "https://github.com/confluentinc/ksql/commit/d917459b00d8daf3650b07e443db44de71dd826d", "message": "fix: ignore nulls when merging session windows, if specified", "committedDate": "2020-12-01T23:28:19Z", "type": "commit"}, {"oid": "5c88e17d8db8434b468d50745002b771a7ab4662", "url": "https://github.com/confluentinc/ksql/commit/5c88e17d8db8434b468d50745002b771a7ab4662", "message": "fix compilation error", "committedDate": "2020-12-02T00:31:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzcxOQ==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533823719", "body": "```suggestion\r\n        return INTERMEDIATE_STRUCT_COMPARATOR.compare(struct1, struct2);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Deal with overflow - we assume if one is positive and the other negative then the\n          \n          \n            \n                    // sequence has overflowed - in which case the latest is the one with the smallest sequence\n          \n          \n            \n                    final long sequence1 = struct1.getInt64(SEQ_FIELD);\n          \n          \n            \n                    final long sequence2 = struct2.getInt64(SEQ_FIELD);\n          \n          \n            \n                    if (sequence1 < 0 && sequence2 >= 0) {\n          \n          \n            \n                      return 1;\n          \n          \n            \n                    } else if (sequence2 < 0 && sequence1 >= 0) {\n          \n          \n            \n                      return -1;\n          \n          \n            \n                    } else {\n          \n          \n            \n                      return Long.compare(sequence1, sequence2);\n          \n          \n            \n                    }\n          \n          \n            \n                    return INTERMEDIATE_STRUCT_COMPARATOR.compare(struct1, struct2);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Deal with overflow - we assume if one is positive and the other negative then the</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> sequence has overflowed - in which case the latest is the one with the smallest sequence</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> sequence1 <span class=\"pl-k\">=</span> struct1<span class=\"pl-k\">.</span>getInt64(<span class=\"pl-c1\">SEQ_FIELD</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> sequence2 <span class=\"pl-k\">=</span> struct2<span class=\"pl-k\">.</span>getInt64(<span class=\"pl-c1\">SEQ_FIELD</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (sequence1 <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> sequence2 <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">return</span> <span class=\"pl-c1\">1</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (sequence2 <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> sequence1 <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">return</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Long</span><span class=\"pl-k\">.</span>compare(sequence1, sequence2);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">INTERMEDIATE_STRUCT_COMPARATOR</span><span class=\"pl-k\">.</span>compare(struct1, struct2);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "agavra", "createdAt": "2020-12-02T00:58:27Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,29 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.\n+        if (struct1.get(VAL_FIELD) == null) {\n+          return -1;\n+        } else if (struct2.get(VAL_FIELD) == null) {\n+          return 1;\n+        }\n+\n+        // Deal with overflow - we assume if one is positive and the other negative then the\n+        // sequence has overflowed - in which case the latest is the one with the smallest sequence\n+        final long sequence1 = struct1.getInt64(SEQ_FIELD);\n+        final long sequence2 = struct2.getInt64(SEQ_FIELD);\n+        if (sequence1 < 0 && sequence2 >= 0) {\n+          return 1;\n+        } else if (sequence2 < 0 && sequence1 >= 0) {\n+          return -1;\n+        } else {\n+          return Long.compare(sequence1, sequence2);\n+        }", "originalCommit": "5c88e17d8db8434b468d50745002b771a7ab4662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDA5Mg==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533824092", "body": "nit: makes sense to make this decision once instead of every time we call merge", "bodyText": "nit: makes sense to make this decision once instead of every time we call merge", "bodyHTML": "<p dir=\"auto\">nit: makes sense to make this decision once instead of every time we call merge</p>", "author": "agavra", "createdAt": "2020-12-02T00:59:18Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "diffHunk": "@@ -220,7 +222,13 @@ public Struct aggregate(final T current, final Struct aggregate) {\n       public Struct merge(final Struct aggOne, final Struct aggTwo) {\n         // When merging we need some way of evaluating the \"latest' one.\n         // We do this by keeping track of the sequence of when it was originally processed\n-        if (INTERMEDIATE_STRUCT_COMPARATOR.compare(aggOne, aggTwo) >= 0) {\n+        final Comparator<Struct> comparator;\n+        if (ignoreNulls) {", "originalCommit": "5c88e17d8db8434b468d50745002b771a7ab4662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDU2OA==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533824568", "body": "nit: what if they're both null? then we should probably return 0 (I don't think it'll make a difference, but better to be correct)", "bodyText": "nit: what if they're both null? then we should probably return 0 (I don't think it'll make a difference, but better to be correct)", "bodyHTML": "<p dir=\"auto\">nit: what if they're both null? then we should probably return 0 (I don't think it'll make a difference, but better to be correct)</p>", "author": "agavra", "createdAt": "2020-12-02T01:00:29Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,29 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.", "originalCommit": "5c88e17d8db8434b468d50745002b771a7ab4662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e400153df72a77c3977177e87567bc52fbeb087", "url": "https://github.com/confluentinc/ksql/commit/1e400153df72a77c3977177e87567bc52fbeb087", "message": "address comments", "committedDate": "2020-12-04T01:04:24Z", "type": "commit"}, {"oid": "ff6521eb2d34c18c67c6c530b190ddd99db69822", "url": "https://github.com/confluentinc/ksql/commit/ff6521eb2d34c18c67c6c530b190ddd99db69822", "message": "address comments", "committedDate": "2020-12-04T01:38:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMTM2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536231367", "body": "this condition will never be hit - it needs to be the first in the if/else branches", "bodyText": "this condition will never be hit - it needs to be the first in the if/else branches", "bodyHTML": "<p dir=\"auto\">this condition will never be hit - it needs to be the first in the if/else branches</p>", "author": "agavra", "createdAt": "2020-12-04T16:42:13Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,21 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.\n+        if (struct1.get(VAL_FIELD) == null) {\n+          return -1;\n+        } else if (struct2.get(VAL_FIELD) == null) {\n+          return 1;\n+        } else if (struct1.get(VAL_FIELD) == null && struct2.get(VAL_FIELD) == null) {\n+          return 0;\n+        }", "originalCommit": "ff6521eb2d34c18c67c6c530b190ddd99db69822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ3ODM0OA==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536478348", "bodyText": "These are what happens when you work on the 3 PRs in parallel and the release", "author": "vpapavas", "createdAt": "2020-12-05T01:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMjY0MQ==", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536232641", "body": "we should not be relying on static state - if people create two different latest by offests (one to ignore nulls and one not to) whichever is created second will override the comparator for the first. Instead, it should be created when `latestN` method is called as a local variable and referenced in the anonymous class \r\n\r\nIn general, if you see code with static, non-final state it's probably a bug and best to avoid.", "bodyText": "we should not be relying on static state - if people create two different latest by offests (one to ignore nulls and one not to) whichever is created second will override the comparator for the first. Instead, it should be created when latestN method is called as a local variable and referenced in the anonymous class\nIn general, if you see code with static, non-final state it's probably a bug and best to avoid.", "bodyHTML": "<p dir=\"auto\">we should not be relying on static state - if people create two different latest by offests (one to ignore nulls and one not to) whichever is created second will override the comparator for the first. Instead, it should be created when <code>latestN</code> method is called as a local variable and referenced in the anonymous class</p>\n<p dir=\"auto\">In general, if you see code with static, non-final state it's probably a bug and best to avoid.</p>", "author": "agavra", "createdAt": "2020-12-04T16:44:09Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "diffHunk": "@@ -50,6 +52,7 @@ private LatestByOffset() {\n   }\n \n   static AtomicLong sequence = new AtomicLong();\n+  private static Comparator<Struct> comparator;", "originalCommit": "ff6521eb2d34c18c67c6c530b190ddd99db69822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "897a4c99df2bbbb773233a15bf9483c4635252aa", "url": "https://github.com/confluentinc/ksql/commit/897a4c99df2bbbb773233a15bf9483c4635252aa", "message": "Trigger Build", "committedDate": "2020-12-04T19:24:44Z", "type": "commit"}, {"oid": "6f5329ff8c5f7ea167f5e8d9ebc3ee7a90732a27", "url": "https://github.com/confluentinc/ksql/commit/6f5329ff8c5f7ea167f5e8d9ebc3ee7a90732a27", "message": "address comments", "committedDate": "2020-12-04T20:10:49Z", "type": "commit"}, {"oid": "15389d3b1bc4506f860d9403abdec90f9b72c520", "url": "https://github.com/confluentinc/ksql/commit/15389d3b1bc4506f860d9403abdec90f9b72c520", "message": "add plans", "committedDate": "2020-12-04T22:21:04Z", "type": "commit"}]}