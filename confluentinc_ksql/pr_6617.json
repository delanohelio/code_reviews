{"pr_number": 6617, "pr_title": "chore: support arrays/maps with mismatched elements", "pr_author": "big-andy-coates", "pr_createdAt": "2020-11-16T12:51:22Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6617", "timeline": [{"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e", "url": "https://github.com/confluentinc/ksql/commit/037563b07a2e0911f27b184f5f62f20453fbf82e", "message": "chore: support arrays with mismatched elements\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (MAP / STRUCT remaining)", "committedDate": "2020-11-16T12:50:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0NDQyOA==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524244428", "body": "Bug fix: fixes issues where `value` has a negative scale.", "bodyText": "Bug fix: fixes issues where value has a negative scale.", "bodyHTML": "<p dir=\"auto\">Bug fix: fixes issues where <code>value</code> has a negative scale.</p>", "author": "big-andy-coates", "createdAt": "2020-11-16T12:52:44Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/DecimalUtil.java", "diffHunk": "@@ -268,15 +268,18 @@ private static void ensureMax(final BigDecimal value, final int precision, final\n   }\n \n   public static SqlType fromValue(final BigDecimal value) {\n-    final BigDecimal bigDecimalZero = BigDecimal.ZERO;\n+    // SqlDecimal does not support negative scale:\n+    final BigDecimal decimal = value.scale() < 0\n+        ? value.setScale(0, BigDecimal.ROUND_UNNECESSARY)\n+        : value;", "originalCommit": "037563b07a2e0911f27b184f5f62f20453fbf82e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "url": "https://github.com/confluentinc/ksql/commit/e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "message": "chore: support maps with mismatched key and value types\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (STRUCT remaining)", "committedDate": "2020-11-16T13:33:16Z", "type": "commit"}, {"oid": "8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "url": "https://github.com/confluentinc/ksql/commit/8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "message": "chore: update in.json removing unnecessary casts", "committedDate": "2020-11-16T13:38:34Z", "type": "commit"}, {"oid": "742e7feb610041f9fde9533a0075eb5f02769a6f", "url": "https://github.com/confluentinc/ksql/commit/742e7feb610041f9fde9533a0075eb5f02769a6f", "message": "chore: array of struct test", "committedDate": "2020-11-16T13:46:29Z", "type": "commit"}, {"oid": "cc5b157c9a34e8454bc225f7045048714e62861c", "url": "https://github.com/confluentinc/ksql/commit/cc5b157c9a34e8454bc225f7045048714e62861c", "message": "chore: fix test", "committedDate": "2020-11-16T15:39:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMTM5Mg==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524421392", "body": "```suggestion\r\n   * <p>Coercion is performed in order. So the type of the first non-null expression drives the\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>Coercion is performed in order. So the type type of the first non-null expression drives the\n          \n          \n            \n               * <p>Coercion is performed in order. So the type of the first non-null expression drives the", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span><span class=\"pl-smi\">Coercion</span> is performed in order. <span class=\"pl-smi\">So</span> the type <span class=\"x x-first x-last\">type </span>of the first non<span class=\"pl-k\">-</span><span class=\"pl-c1\">null</span> expression drives the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span><span class=\"pl-smi\">Coercion</span> is performed in order. <span class=\"pl-smi\">So</span> the type of the first non<span class=\"pl-k\">-</span><span class=\"pl-c1\">null</span> expression drives the</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "agavra", "createdAt": "2020-11-16T16:57:17Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -91,32 +91,65 @@ private CoercionUtil() {\n    *\n    * <p>Any non-literal expressions that don't match the common type, but which can be coerced, will\n    * be wrapped in an explicit {@code CAST} to convert them to the required type.\n+   *\n+   * <p>Coercion is performed in order. So the type type of the first non-null expression drives the", "originalCommit": "cc5b157c9a34e8454bc225f7045048714e62861c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjUwOA==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524422508", "body": "is there a way to specify a `DOUBLE` with a string, or do they always get cast to decimals?", "bodyText": "is there a way to specify a DOUBLE with a string, or do they always get cast to decimals?", "bodyHTML": "<p dir=\"auto\">is there a way to specify a <code>DOUBLE</code> with a string, or do they always get cast to decimals?</p>", "author": "agavra", "createdAt": "2020-11-16T16:58:47Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -307,14 +340,50 @@ private static void validateStringCanBeCoercedToBoolean(final String value) {\n         final String value, \n         final SqlType targetType\n     ) {\n+      Preconditions.checkArgument(targetType.baseType().isNumber());\n+\n       try {\n-        final BigDecimal result = new BigDecimal(value.trim());\n-        return Optional.of(resolveCommonNumericType(result, targetType));\n+        final SqlType sourceType = getStringNumericType(value);\n+\n+        if (sourceType.baseType() == SqlBaseType.DOUBLE\n+            || targetType.baseType() == SqlBaseType.DOUBLE\n+        ) {\n+          return Optional.of(SqlTypes.DOUBLE);\n+        }\n+\n+        if (sourceType.baseType() == SqlBaseType.DECIMAL\n+            || targetType.baseType() == SqlBaseType.DECIMAL\n+        ) {\n+          return Optional.of(DecimalUtil.widen(sourceType, targetType));\n+        }\n+\n+        return Optional.of(sourceType.baseType().canImplicitlyCast(targetType.baseType())\n+            ? targetType\n+            : sourceType);\n       } catch (final NumberFormatException e) {\n         throw invalidSyntaxException(value, targetType);\n       }\n     }\n \n+    private static SqlType getStringNumericType(final String value) {\n+      final BigDecimal result = new BigDecimal(value.trim());\n+\n+      final boolean containsDpOrScientific = value.contains(\".\")", "originalCommit": "cc5b157c9a34e8454bc225f7045048714e62861c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2Nzg1Nw==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r525267857", "bodyText": "Always get cast to decimal.", "author": "big-andy-coates", "createdAt": "2020-11-17T15:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjUwOA=="}], "type": "inlineReview"}, {"oid": "a634a1927551af4c1218e7837549cdef0d2e4bc2", "url": "https://github.com/confluentinc/ksql/commit/a634a1927551af4c1218e7837549cdef0d2e4bc2", "message": "chore: almog's requested changes", "committedDate": "2020-11-17T15:50:51Z", "type": "commit"}]}