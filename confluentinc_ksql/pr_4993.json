{"pr_number": 4993, "pr_title": "fix: Allows unclosed quote characters to exist in comments", "pr_author": "AlanConfluent", "pr_createdAt": "2020-04-03T22:20:29Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4993", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NjI5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403376291", "body": "This will thrown an NPE if the line is null", "bodyText": "This will thrown an NPE if the line is null", "bodyHTML": "<p dir=\"auto\">This will thrown an NPE if the line is null</p>", "author": "vpapavas", "createdAt": "2020-04-03T23:03:09Z", "path": "ksqldb-cli/src/main/java/io/confluent/ksql/cli/console/UnclosedQuoteChecker.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.confluent.ksql.cli.console;\n+\n+/**\n+ * Checks to see if the line is in the middle of a quote.  Unlike\n+ * org.jline.reader.impl.DefaultParser, this is comment aware.\n+ */\n+public class UnclosedQuoteChecker {\n+  private static final String COMMENT = \"--\";\n+\n+  public static boolean isUnclosedQuote(String line) {\n+    int quoteStart = -1;\n+    for(int i = 0; line != null && i < line.length(); ++i) {\n+      if (quoteStart < 0 && isQuoteChar(line, i)) {\n+        quoteStart = i;\n+      } else if (quoteStart >= 0 && line.charAt(quoteStart) == line.charAt(i) &&\n+          !isEscaped(line, i)) {\n+        quoteStart = -1;\n+      }\n+    }\n+    int commentInd = line.indexOf(COMMENT);", "originalCommit": "4e17193c10fbfb3ac2a594b5e13abc756e4e2397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NjU4Mg==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403376582", "bodyText": "Maybe add a null check to all methods? Objects.requireNonNull", "author": "vpapavas", "createdAt": "2020-04-03T23:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NjI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MjA3OA==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403382078", "bodyText": "Added for the public method.  In general, I'm a little wary of littering these sort of null checks within internal classes, but we seem to do that in a lot of areas in the codebase.", "author": "AlanConfluent", "createdAt": "2020-04-03T23:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NjI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzcxOQ==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403377719", "body": "This `line.charAt(quoteStart) == line.charAt(i)` check if the char is a quote? Why not use `isQuoteChar(line, i)`?", "bodyText": "This line.charAt(quoteStart) == line.charAt(i) check if the char is a quote? Why not use isQuoteChar(line, i)?", "bodyHTML": "<p dir=\"auto\">This <code>line.charAt(quoteStart) == line.charAt(i)</code> check if the char is a quote? Why not use <code>isQuoteChar(line, i)</code>?</p>", "author": "vpapavas", "createdAt": "2020-04-03T23:08:55Z", "path": "ksqldb-cli/src/main/java/io/confluent/ksql/cli/console/UnclosedQuoteChecker.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.confluent.ksql.cli.console;\n+\n+/**\n+ * Checks to see if the line is in the middle of a quote.  Unlike\n+ * org.jline.reader.impl.DefaultParser, this is comment aware.\n+ */\n+public class UnclosedQuoteChecker {\n+  private static final String COMMENT = \"--\";\n+\n+  public static boolean isUnclosedQuote(String line) {\n+    int quoteStart = -1;\n+    for(int i = 0; line != null && i < line.length(); ++i) {\n+      if (quoteStart < 0 && isQuoteChar(line, i)) {\n+        quoteStart = i;\n+      } else if (quoteStart >= 0 && line.charAt(quoteStart) == line.charAt(i) &&", "originalCommit": "4e17193c10fbfb3ac2a594b5e13abc756e4e2397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MTY0OA==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403381648", "bodyText": "It's so you can have multiple quote types that contain the others e.g. \"This could be 'valid'\" and 'This could be \"valid\"'.\nGiven that we're just doing 'this type of quote', I'll simplify it.", "author": "AlanConfluent", "createdAt": "2020-04-03T23:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3ODY3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403378677", "body": "The string is a bit misleading :P These are not in comments, right?", "bodyText": "The string is a bit misleading :P These are not in comments, right?", "bodyHTML": "<p dir=\"auto\">The string is a bit misleading :P These are not in comments, right?</p>", "author": "vpapavas", "createdAt": "2020-04-03T23:12:38Z", "path": "ksqldb-cli/src/test/java/io/confluent/ksql/cli/console/UnclosedQuoteCheckerTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.confluent.ksql.cli.console;\n+\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UnclosedQuoteCheckerTest {\n+\n+  @Test\n+  public void shouldFindUnclosedQuote() {\n+    // Given:\n+    final String line = \"some line 'this is in a comment\";", "originalCommit": "4e17193c10fbfb3ac2a594b5e13abc756e4e2397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MjE4OA==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r403382188", "bodyText": "Hah, copied a bit too many times.  I changed them to make sense, I believe.", "author": "AlanConfluent", "createdAt": "2020-04-03T23:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3ODY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NzYzMw==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404287633", "body": "I'm not thought too much about this, as its been a while since I've been in this code... but are _you_ happy with being passed `line` and not `parsed.line()`, i.e. do you understand the difference? (I certainly can't remember of the top of my head! )", "bodyText": "I'm not thought too much about this, as its been a while since I've been in this code... but are you happy with being passed line and not parsed.line(), i.e. do you understand the difference? (I certainly can't remember of the top of my head! )", "bodyHTML": "<p dir=\"auto\">I'm not thought too much about this, as its been a while since I've been in this code... but are <em>you</em> happy with being passed <code>line</code> and not <code>parsed.line()</code>, i.e. do you understand the difference? (I certainly can't remember of the top of my head! )</p>", "author": "big-andy-coates", "createdAt": "2020-04-06T18:06:06Z", "path": "ksqldb-cli/src/main/java/io/confluent/ksql/cli/console/KsqlLineParser.java", "diffHunk": "@@ -47,6 +47,10 @@ public ParsedLine parse(final String line, final int cursor, final ParseContext\n       return parsed;\n     }\n \n+    if (UnclosedQuoteChecker.isUnclosedQuote(line)) {", "originalCommit": "4e255f0193f6eb31ac99cd335c14ad46592c0231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzA5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404347097", "bodyText": "I've read through the source code of DefaultParser and parsed.line() appears to be just returning the line passed to it, so this should be fine. https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/impl/DefaultParser.java#L312", "author": "AlanConfluent", "createdAt": "2020-04-06T19:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NzYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4ODQzNA==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404288434", "body": "fyi: no need to null check an argument you're not storing in your object state.\r\n\r\nAnd I think if you remove this you should also remove the `line != null` in the `for` loop.", "bodyText": "fyi: no need to null check an argument you're not storing in your object state.\nAnd I think if you remove this you should also remove the line != null in the for loop.", "bodyHTML": "<p dir=\"auto\">fyi: no need to null check an argument you're not storing in your object state.</p>\n<p dir=\"auto\">And I think if you remove this you should also remove the <code>line != null</code> in the <code>for</code> loop.</p>", "author": "big-andy-coates", "createdAt": "2020-04-06T18:07:36Z", "path": "ksqldb-cli/src/main/java/io/confluent/ksql/cli/console/UnclosedQuoteChecker.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli.console;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Checks to see if the line is in the middle of a quote.  Unlike\n+ * org.jline.reader.impl.DefaultParser, this is comment aware.\n+ */\n+public final class UnclosedQuoteChecker {\n+  private static final String COMMENT = \"--\";\n+\n+  private UnclosedQuoteChecker() {}\n+\n+  public static boolean isUnclosedQuote(final String line) {\n+    requireNonNull(line, \"line\");", "originalCommit": "4e255f0193f6eb31ac99cd335c14ad46592c0231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTE0Mg==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404349142", "bodyText": "I agree about not littering the code with null checks.  Usually you would do it at exposed API layers, but not for internal code, since you can trust callers to know the invariants.  What's the motivation in differentiating between storing it as state vs not?\nRemoved the null check below in the for loop.", "author": "AlanConfluent", "createdAt": "2020-04-06T19:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4ODQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MTkzMg==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404291932", "body": "nit: prefer hamcrest matchers (with static import) over junit asserts, as they are most expressive.\r\n\r\n(though in this case, you're comparing bools, so there's not much in it!)", "bodyText": "nit: prefer hamcrest matchers (with static import) over junit asserts, as they are most expressive.\n(though in this case, you're comparing bools, so there's not much in it!)", "bodyHTML": "<p dir=\"auto\">nit: prefer hamcrest matchers (with static import) over junit asserts, as they are most expressive.</p>\n<p dir=\"auto\">(though in this case, you're comparing bools, so there's not much in it!)</p>", "author": "big-andy-coates", "createdAt": "2020-04-06T18:13:38Z", "path": "ksqldb-cli/src/test/java/io/confluent/ksql/cli/console/UnclosedQuoteCheckerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli.console;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UnclosedQuoteCheckerTest {\n+\n+  @Test\n+  public void shouldFindUnclosedQuote() {\n+    // Given:\n+    final String line = \"some line 'this is in a quote\";\n+\n+    // Then:\n+    Assert.assertTrue(UnclosedQuoteChecker.isUnclosedQuote(line));", "originalCommit": "4e255f0193f6eb31ac99cd335c14ad46592c0231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTgzNQ==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404405835", "bodyText": "Done, switched to hamcrest", "author": "AlanConfluent", "createdAt": "2020-04-06T21:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MTkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MjUzNg==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404292536", "body": "Can you add some test cases please?\r\n\r\n* where `--` appears _within a quoted string\r\n* where `--` appears _after_ a quoted string is closed?\r\n* where a quoted string contains a single quote, e.g. 'this string''contains a single quote'\r\n* some with double quotes in quoted strings just for the hell of it.", "bodyText": "Can you add some test cases please?\n\nwhere -- appears _within a quoted string\nwhere -- appears after a quoted string is closed?\nwhere a quoted string contains a single quote, e.g. 'this string''contains a single quote'\nsome with double quotes in quoted strings just for the hell of it.", "bodyHTML": "<p dir=\"auto\">Can you add some test cases please?</p>\n<ul dir=\"auto\">\n<li>where <code>--</code> appears _within a quoted string</li>\n<li>where <code>--</code> appears <em>after</em> a quoted string is closed?</li>\n<li>where a quoted string contains a single quote, e.g. 'this string''contains a single quote'</li>\n<li>some with double quotes in quoted strings just for the hell of it.</li>\n</ul>", "author": "big-andy-coates", "createdAt": "2020-04-06T18:14:38Z", "path": "ksqldb-cli/src/test/java/io/confluent/ksql/cli/console/UnclosedQuoteCheckerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli.console;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UnclosedQuoteCheckerTest {", "originalCommit": "4e255f0193f6eb31ac99cd335c14ad46592c0231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMTA1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4993#discussion_r404401055", "bodyText": "I had to add support for the twoQuoteChars in a row.  I added tests for all of the above and others.  Thanks for coming up with some good cases.", "author": "AlanConfluent", "createdAt": "2020-04-06T21:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MjUzNg=="}], "type": "inlineReview"}, {"oid": "ce898d306dab4f229033c95120a25b780622fad2", "url": "https://github.com/confluentinc/ksql/commit/ce898d306dab4f229033c95120a25b780622fad2", "message": "fix: Allows quote characters to exist in comments, e.g. SELECT -- It's a comment", "committedDate": "2020-04-07T16:05:45Z", "type": "commit"}, {"oid": "a9e08927420a42ef179ddbd3eb2c723a70b1fa05", "url": "https://github.com/confluentinc/ksql/commit/a9e08927420a42ef179ddbd3eb2c723a70b1fa05", "message": "Feedback and style", "committedDate": "2020-04-07T16:05:45Z", "type": "commit"}, {"oid": "5e151b2b858a96097da25d225943f84ea8d7ebc2", "url": "https://github.com/confluentinc/ksql/commit/5e151b2b858a96097da25d225943f84ea8d7ebc2", "message": "Try again", "committedDate": "2020-04-07T16:05:45Z", "type": "commit"}, {"oid": "43934771490ffccc8033cd4dc37dc81f64e34f10", "url": "https://github.com/confluentinc/ksql/commit/43934771490ffccc8033cd4dc37dc81f64e34f10", "message": "Feedback", "committedDate": "2020-04-07T16:05:45Z", "type": "commit"}, {"oid": "43934771490ffccc8033cd4dc37dc81f64e34f10", "url": "https://github.com/confluentinc/ksql/commit/43934771490ffccc8033cd4dc37dc81f64e34f10", "message": "Feedback", "committedDate": "2020-04-07T16:05:45Z", "type": "forcePushed"}, {"oid": "c2e84cc338f8c4961907bbdfadef12a53348b6de", "url": "https://github.com/confluentinc/ksql/commit/c2e84cc338f8c4961907bbdfadef12a53348b6de", "message": "Fixed validate", "committedDate": "2020-04-07T16:54:35Z", "type": "commit"}]}