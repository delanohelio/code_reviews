{"pr_number": 6806, "pr_title": "feat: timestamp support - casting, comparisons and serde", "pr_author": "jzaralim", "pr_createdAt": "2020-12-19T01:30:35Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6806", "timeline": [{"oid": "c246d0327fbc3649fa0a010e6b24c946427d18ee", "url": "https://github.com/confluentinc/ksql/commit/c246d0327fbc3649fa0a010e6b24c946427d18ee", "message": "first pass at timestamps", "committedDate": "2020-12-19T00:06:28Z", "type": "commit"}, {"oid": "392772260fe50742f6857fc3af1138890dc821d9", "url": "https://github.com/confluentinc/ksql/commit/392772260fe50742f6857fc3af1138890dc821d9", "message": "add functional test plans", "committedDate": "2020-12-19T00:09:20Z", "type": "commit"}, {"oid": "bf26747e6cf728710ddebda1e3149927fe831716", "url": "https://github.com/confluentinc/ksql/commit/bf26747e6cf728710ddebda1e3149927fe831716", "message": "fix build failure", "committedDate": "2020-12-21T17:58:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NDQ3Nw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551544477", "body": "Why is this hashcode?", "bodyText": "Why is this hashcode?", "bodyHTML": "<p dir=\"auto\">Why is this hashcode?</p>", "author": "spena", "createdAt": "2021-01-04T20:16:43Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/function/types/TimestampType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.types;\n+\n+public final class TimestampType extends ObjectType {\n+  public static final TimestampType INSTANCE = new TimestampType();\n+\n+  private TimestampType() {\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 0;", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTAzOQ==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551549039", "body": "What is version 1?", "bodyText": "What is version 1?", "bodyHTML": "<p dir=\"auto\">What is version 1?</p>", "author": "spena", "createdAt": "2021-01-04T20:24:41Z", "path": "ksqldb-common/src/test/java/io/confluent/ksql/schema/ksql/SchemaConvertersTest.java", "diffHunk": "@@ -62,13 +63,16 @@\n   private static final Schema CONNECT_BIGINT_SCHEMA = SchemaBuilder.int64().optional().build();\n   private static final Schema CONNECT_DOUBLE_SCHEMA = SchemaBuilder.float64().optional().build();\n   private static final Schema CONNECT_STRING_SCHEMA = SchemaBuilder.string().optional().build();\n+  private static final Schema CONNECT_TIMESTAMP_SCHEMA =\n+      SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build();", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNzU5OQ==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552427599", "bodyText": "It's a part of the schema from the Timestamp class. This ended up being replaced by the builder from the Timestamp class though.", "author": "jzaralim", "createdAt": "2021-01-06T08:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MDE3OA==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551550178", "body": "SQL double? ", "bodyText": "SQL double?", "bodyHTML": "<p dir=\"auto\">SQL double?</p>", "author": "spena", "createdAt": "2021-01-04T20:26:58Z", "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MjU5MQ==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551552591", "body": "`parse` is gonna parse strings with timezones if the string contains `+0200` for instance. Isn't this going to cause an issue?", "bodyText": "parse is gonna parse strings with timezones if the string contains +0200 for instance. Isn't this going to cause an issue?", "bodyHTML": "<p dir=\"auto\"><code>parse</code> is gonna parse strings with timezones if the string contains <code>+0200</code> for instance. Isn't this going to cause an issue?</p>", "author": "spena", "createdAt": "2021-01-04T20:32:11Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParser.java", "diffHunk": "@@ -31,12 +32,16 @@\n   private static final String HELP_MESSAGE = System.lineSeparator()\n       + \"Required format is: \\\"\" + KsqlConstants.DATE_TIME_PATTERN + \"\\\", \"\n       + \"with an optional numeric 4-digit timezone, for example: \"\n-      + \"'2020-05-26T23.59.58.000' or with tz: '2020-05-26T23.59.58.000+0200'. \"\n+      + \"'2020-05-26T23:59:58.000' or with tz: '2020-05-26T23:59:58.000+0200'. \"\n       + \"Partials are also supported, for example \\\"2020-05-26\\\"\";\n \n   private static final StringToTimestampParser PARSER =\n       new StringToTimestampParser(KsqlConstants.DATE_TIME_PATTERN);\n \n+  public Timestamp parseToTimestamp(final String text) {\n+    return new Timestamp(parse(text));", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzI0Ng==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553246", "body": "Add a test to parse a time without timezone. Btw, are we supporting this? or what is the behavior we discussed when using timezone values in the a string?", "bodyText": "Add a test to parse a time without timezone. Btw, are we supporting this? or what is the behavior we discussed when using timezone values in the a string?", "bodyHTML": "<p dir=\"auto\">Add a test to parse a time without timezone. Btw, are we supporting this? or what is the behavior we discussed when using timezone values in the a string?</p>", "author": "spena", "createdAt": "2021-01-04T20:33:38Z", "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParserTest.java", "diffHunk": "@@ -129,6 +129,11 @@ public void shouldIncludeRequiredFormatInErrorMessage() {\n             + \"with an optional numeric 4-digit timezone\"));\n   }\n \n+  @Test\n+  public void shouldParseToTimestamp() {\n+    assertThat(parser.parseToTimestamp(\"2017-11-13T23:59:58.999-0100\").getTime(), is(1510621198999L));\n+  }\n+", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMzMzNw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552433337", "bodyText": "The conclusion was to include a conversion function and to not store timezone information. Timezones in strings were not specified in the klip, but I think it makes sense to support it because this is basically the same thing as calling CONVERT_TZ(\"2017-11-13T23:59:58.999\",\"-0100\"), and it is something we already support in some filter expressions.", "author": "jzaralim", "createdAt": "2021-01-06T08:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzY5Nw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553697", "body": "Can `PartialStringToTimestampParser` be a static field in the class? It will avoid re-creating this object every time we parse a timestamp.", "bodyText": "Can PartialStringToTimestampParser be a static field in the class? It will avoid re-creating this object every time we parse a timestamp.", "bodyHTML": "<p dir=\"auto\">Can <code>PartialStringToTimestampParser</code> be a static field in the class? It will avoid re-creating this object every time we parse a timestamp.</p>", "author": "spena", "createdAt": "2021-01-04T20:34:36Z", "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.\n+   *\n+   * <p>Rejects {@code Infinity} and {@code Nan} as invalid.\n+   *\n+   * @param str the string to parse.\n+   * @return the double value.\n+   */\n+  public static Timestamp parseTimestamp(final String str) {\n+    return new PartialStringToTimestampParser().parseToTimestamp(str);", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NTEwMw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551555103", "body": "Question: why is it removed? I did not understand what this condition does.", "bodyText": "Question: why is it removed? I did not understand what this condition does.", "bodyHTML": "<p dir=\"auto\">Question: why is it removed? I did not understand what this condition does.</p>", "author": "spena", "createdAt": "2021-01-04T20:37:31Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -1211,9 +1210,6 @@ public Node visitTypeConstructor(final SqlBaseParser.TypeConstructorContext cont\n       if (type.equals(\"TIME\")) {\n         return new TimeLiteral(location, value);\n       }\n-      if (type.equals(\"TIMESTAMP\")) {\n-        return new TimestampLiteral(location, value);\n-      }", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDA5Mw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552434093", "bodyText": "This function for types that are declared using a construction, such as DECIMAL(4,2). There seems to have been some sort of attempt to include the timestamp type in the beginning of the project, which is why this is here.", "author": "jzaralim", "createdAt": "2021-01-06T08:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NTEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjUxMw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551556513", "body": "Why not passing the `long` value instead of the `Timestamp`? \r\n\r\nI was going to ask why not storing the `Timestamp` object instead of the long, but I noticed `Timestamp` is mutable.", "bodyText": "Why not passing the long value instead of the Timestamp?\nI was going to ask why not storing the Timestamp object instead of the long, but I noticed Timestamp is mutable.", "bodyHTML": "<p dir=\"auto\">Why not passing the <code>long</code> value instead of the <code>Timestamp</code>?</p>\n<p dir=\"auto\">I was going to ask why not storing the <code>Timestamp</code> object instead of the long, but I noticed <code>Timestamp</code> is mutable.</p>", "author": "spena", "createdAt": "2021-01-04T20:40:23Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/expression/tree/TimestampLiteral.java", "diffHunk": "@@ -19,26 +19,27 @@\n \n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.sql.Timestamp;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class TimestampLiteral extends Literal {\n \n-  private final String value;\n+  private final long value;\n \n-  public TimestampLiteral(final String value) {\n+  public TimestampLiteral(final Timestamp value) {", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNTY0Nw==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552435647", "bodyText": "The code passes around a Timestamp value. We could intitialize with a long value instead, but the conversion would still have to be made at some other location in the code.", "author": "jzaralim", "createdAt": "2021-01-06T08:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxNDAxMg==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552014012", "body": "Add another test that allows parsing a string timestamp.", "bodyText": "Add another test that allows parsing a string timestamp.", "bodyHTML": "<p dir=\"auto\">Add another test that allows parsing a string timestamp.</p>", "author": "spena", "createdAt": "2021-01-05T15:43:50Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/generic/GenericExpressionResolverTest.java", "diffHunk": "@@ -90,5 +90,18 @@ public void shouldThrowIfCannotCoerce() {\n     assertThat(e.getMessage(), containsString(\"Expected type ARRAY<INTEGER> for field `FOO` but got INTEGER(1)\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfCannotParseTimestamp() {", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDA2OA==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552020068", "body": "All the types have the `SqlBaseType.` reference. Can we keep that consistent for the timestamp in all the code? (`SqlBaseType.TIMESTAMP`)", "bodyText": "All the types have the SqlBaseType. reference. Can we keep that consistent for the timestamp in all the code? (SqlBaseType.TIMESTAMP)", "bodyHTML": "<p dir=\"auto\">All the types have the <code>SqlBaseType.</code> reference. Can we keep that consistent for the timestamp in all the code? (<code>SqlBaseType.TIMESTAMP</code>)</p>", "author": "spena", "createdAt": "2021-01-05T15:52:57Z", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/CastEvaluatorTest.java", "diffHunk": "@@ -732,19 +784,24 @@ static Object instanceFor(final SqlType type) {\n                 .add(SqlBaseType.DECIMAL)\n                 .add(SqlBaseType.DOUBLE)\n                 .add(SqlBaseType.STRING)\n+                .add(TIMESTAMP)", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNDA1MQ==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552034051", "body": "Does it need changes in `connectToSpec`?\r\n\r\nI see this code in that method:\r\n```\r\ncase INT64:\r\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\r\n            return Timestamp.fromLogical(schema, (Date) data);\r\n          }\r\n```", "bodyText": "Does it need changes in connectToSpec?\nI see this code in that method:\ncase INT64:\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n            return Timestamp.fromLogical(schema, (Date) data);\n          }", "bodyHTML": "<p dir=\"auto\">Does it need changes in <code>connectToSpec</code>?</p>\n<p dir=\"auto\">I see this code in that method:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case INT64:\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n            return Timestamp.fromLogical(schema, (Date) data);\n          }\"><pre><code>case INT64:\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n            return Timestamp.fromLogical(schema, (Date) data);\n          }\n</code></pre></div>", "author": "spena", "createdAt": "2021-01-05T16:13:54Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/serde/ConnectSerdeSupplier.java", "diffHunk": "@@ -125,10 +125,11 @@ private Object specToConnect(final Object spec, final Schema schema) {\n         case INT32:\n           return Integer.valueOf(spec.toString());\n         case INT64:\n+          final Long longVal = Long.valueOf(spec.toString());\n           if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n-            return Timestamp.toLogical(schema, (Long) spec);\n+            return new java.sql.Timestamp(longVal);\n           }\n-          return Long.valueOf(spec.toString());\n+          return longVal;", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzODgxMg==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552438812", "bodyText": "connectToSpec is used for checking the values in streams in functional tests. These values are verified against values in a json file and since json files cannot store timestamp objects, comparing the millis is the only way to check timestamp values.", "author": "jzaralim", "createdAt": "2021-01-06T08:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNDA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTcyNA==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552039724", "body": "Don't you mean this?\r\n\r\n```suggestion\r\n  private static Parser timestampParser(final SqlType sqlType) {\r\n```", "bodyText": "Don't you mean this?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Parser dateParser(final SqlType sqlType) {\n          \n          \n            \n              private static Parser timestampParser(final SqlType sqlType) {", "bodyHTML": "<p dir=\"auto\">Don't you mean this?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Parser</span> <span class=\"x x-first x-last\">dateParser</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">SqlType</span> sqlType) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Parser</span> <span class=\"x x-first x-last\">timestampParser</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">SqlType</span> sqlType) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "spena", "createdAt": "2021-01-05T16:22:25Z", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedDeserializer.java", "diffHunk": "@@ -126,6 +128,10 @@ private static Parser decimalParser(final SqlType sqlType) {\n     return v -> DecimalUtil.ensureFit(new BigDecimal(v), decimalType);\n   }\n \n+  private static Parser dateParser(final SqlType sqlType) {", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NDA3NQ==", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552044075", "body": "Should we use the `Timestamp.LOGICAL_NAME` instead of hardcoding the name?", "bodyText": "Should we use the Timestamp.LOGICAL_NAME instead of hardcoding the name?", "bodyHTML": "<p dir=\"auto\">Should we use the <code>Timestamp.LOGICAL_NAME</code> instead of hardcoding the name?</p>", "author": "spena", "createdAt": "2021-01-05T16:29:00Z", "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/json/KsqlJsonSerializerTest.java", "diffHunk": "@@ -91,6 +93,7 @@\n           .optional()\n           .build())\n       .field(DECIMALCOL, Decimal.builder(5).optional().parameter(DecimalUtil.PRECISION_FIELD, \"10\").build())\n+      .field(TIMESTAMPCOL, SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build())", "originalCommit": "bf26747e6cf728710ddebda1e3149927fe831716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "add7efcb78aed40345307a8050a9a9338d7816af", "url": "https://github.com/confluentinc/ksql/commit/add7efcb78aed40345307a8050a9a9338d7816af", "message": "address review comments", "committedDate": "2021-01-06T05:47:43Z", "type": "commit"}, {"oid": "fe4a84a51ec54c90ee09fd5eeb93c62356913c7f", "url": "https://github.com/confluentinc/ksql/commit/fe4a84a51ec54c90ee09fd5eeb93c62356913c7f", "message": "update klip to include time zones in date strings", "committedDate": "2021-01-07T19:44:36Z", "type": "commit"}]}