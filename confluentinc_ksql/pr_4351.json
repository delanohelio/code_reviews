{"pr_number": 4351, "pr_title": "fix: Make null key serialization/deserialization symmetrical", "pr_author": "purplefox", "pr_createdAt": "2020-01-19T16:47:18Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4351", "timeline": [{"oid": "2c738c50ecfc5d6feecc5567b81f9aa46d447c38", "url": "https://github.com/confluentinc/ksql/commit/2c738c50ecfc5d6feecc5567b81f9aa46d447c38", "message": "added test", "committedDate": "2020-01-19T17:08:06Z", "type": "commit"}, {"oid": "82f23495bae88897c19d38de03d4c39343988e5c", "url": "https://github.com/confluentinc/ksql/commit/82f23495bae88897c19d38de03d4c39343988e5c", "message": "fix: Make sure null key is preserved during serialization/deserialization", "committedDate": "2020-01-19T17:08:06Z", "type": "commit"}, {"oid": "cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "url": "https://github.com/confluentinc/ksql/commit/cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "message": "fixed merge conflict", "committedDate": "2020-01-19T17:12:29Z", "type": "commit"}, {"oid": "cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "url": "https://github.com/confluentinc/ksql/commit/cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "message": "fixed merge conflict", "committedDate": "2020-01-19T17:12:29Z", "type": "forcePushed"}, {"oid": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "url": "https://github.com/confluentinc/ksql/commit/a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "message": "updated test", "committedDate": "2020-01-19T19:56:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MDc2NA==", "url": "https://github.com/confluentinc/ksql/pull/4351#discussion_r368660764", "body": "nit: if `primitive` is `null`, then could return after line 142.", "bodyText": "nit: if primitive is null, then could return after line 142.", "bodyHTML": "<p dir=\"auto\">nit: if <code>primitive</code> is <code>null</code>, then could return after line 142.</p>", "author": "big-andy-coates", "createdAt": "2020-01-20T17:26:22Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/kafka/KafkaSerdeFactory.java", "diffHunk": "@@ -142,7 +142,7 @@ public Struct deserialize(final String topic, final byte[] bytes) {\n         final Object primitive = delegate.deserialize(topic, bytes);\n         final Struct struct = new Struct(schema);\n         struct.put(field, primitive);\n-        return struct;\n+        return primitive == null ? null : struct;", "originalCommit": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MzU3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4351#discussion_r368663577", "body": "if its null, then assert its null... weird asserting! ;)\r\n\r\nAlso, this means all of the tests will pass if deserialize always returns `null`.\r\n\r\nI think it would be more explicit if we revert this change and instead have explicit tests that test we:\r\n\r\na) serialize `null` as `null` , and\r\nb) deserialize `null` as `null`.\r\n\r\nJust played around with this, so may as well share the code.\r\n\r\ni.e. we revert this to:\r\n\r\n```java\r\n  assertThat(result, is(struct));\r\n```\r\n\r\nAnd replace `shouldHandleNulls` with:\r\n\r\n```java\r\n@Test\r\n  public void shouldSerializeNullAsNull() {\r\n    // Given:\r\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\r\n\r\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\r\n\r\n    // When:\r\n    final byte[] result = serde.serializer().serialize(\"topic\", null);\r\n\r\n    // Then:\r\n    assertThat(result, is(nullValue()));\r\n  }\r\n\r\n  @Test\r\n  public void shouldDeserializeNullAsNull() {\r\n    // Given:\r\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\r\n\r\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\r\n\r\n    // When:\r\n    final Object result = serde.deserializer().deserialize(\"topic\", null);\r\n\r\n    // Then:\r\n    assertThat(result, is(nullValue()));\r\n  }\r\n```\r\n", "bodyText": "if its null, then assert its null... weird asserting! ;)\nAlso, this means all of the tests will pass if deserialize always returns null.\nI think it would be more explicit if we revert this change and instead have explicit tests that test we:\na) serialize null as null , and\nb) deserialize null as null.\nJust played around with this, so may as well share the code.\ni.e. we revert this to:\n  assertThat(result, is(struct));\nAnd replace shouldHandleNulls with:\n@Test\n  public void shouldSerializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final byte[] result = serde.serializer().serialize(\"topic\", null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }\n\n  @Test\n  public void shouldDeserializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final Object result = serde.deserializer().deserialize(\"topic\", null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }", "bodyHTML": "<p dir=\"auto\">if its null, then assert its null... weird asserting! ;)</p>\n<p dir=\"auto\">Also, this means all of the tests will pass if deserialize always returns <code>null</code>.</p>\n<p dir=\"auto\">I think it would be more explicit if we revert this change and instead have explicit tests that test we:</p>\n<p dir=\"auto\">a) serialize <code>null</code> as <code>null</code> , and<br>\nb) deserialize <code>null</code> as <code>null</code>.</p>\n<p dir=\"auto\">Just played around with this, so may as well share the code.</p>\n<p dir=\"auto\">i.e. we revert this to:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  assertThat(result, is(struct));\"><pre>  assertThat(result, is(struct));</pre></div>\n<p dir=\"auto\">And replace <code>shouldHandleNulls</code> with:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\n  public void shouldSerializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde&lt;Object&gt; serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final byte[] result = serde.serializer().serialize(&quot;topic&quot;, null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }\n\n  @Test\n  public void shouldDeserializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde&lt;Object&gt; serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final Object result = serde.deserializer().deserialize(&quot;topic&quot;, null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }\"><pre><span class=\"pl-k\">@Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> shouldSerializeNullAsNull() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Given:</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">PersistenceSchema</span> schema <span class=\"pl-k\">=</span> schemaWithFieldOfType(<span class=\"pl-smi\">SqlTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INTEGER</span>);\n\n    <span class=\"pl-k\">final</span> <span class=\"pl-k\">Serde&lt;<span class=\"pl-smi\">Object</span>&gt;</span> serde <span class=\"pl-k\">=</span> factory<span class=\"pl-k\">.</span>createSerde(schema, ksqlConfig, srClientFactory);\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> When:</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-k\">byte</span>[] result <span class=\"pl-k\">=</span> serde<span class=\"pl-k\">.</span>serializer()<span class=\"pl-k\">.</span>serialize(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>topic<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">null</span>);\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Then:</span>\n    assertThat(result, is(nullValue()));\n  }\n\n  <span class=\"pl-k\">@Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> shouldDeserializeNullAsNull() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Given:</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">PersistenceSchema</span> schema <span class=\"pl-k\">=</span> schemaWithFieldOfType(<span class=\"pl-smi\">SqlTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INTEGER</span>);\n\n    <span class=\"pl-k\">final</span> <span class=\"pl-k\">Serde&lt;<span class=\"pl-smi\">Object</span>&gt;</span> serde <span class=\"pl-k\">=</span> factory<span class=\"pl-k\">.</span>createSerde(schema, ksqlConfig, srClientFactory);\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> When:</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Object</span> result <span class=\"pl-k\">=</span> serde<span class=\"pl-k\">.</span>deserializer()<span class=\"pl-k\">.</span>deserialize(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>topic<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">null</span>);\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Then:</span>\n    assertThat(result, is(nullValue()));\n  }</pre></div>", "author": "big-andy-coates", "createdAt": "2020-01-20T17:33:56Z", "path": "ksql-serde/src/test/java/io/confluent/ksql/serde/kafka/KafkaSerdeFactoryTest.java", "diffHunk": "@@ -192,7 +194,11 @@ private void shouldHandle(final SqlType fieldSchema, final Object value) {\n     final Object result = serde.deserializer().deserialize(\"topic\", bytes);\n \n     // Then:\n-    assertThat(result, is(struct));\n+    if (value == null) {\n+      assertThat(result, is(nullValue()));\n+    } else {\n+      assertThat(result, is(struct));\n+    }", "originalCommit": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aff74b09867d0fedfc4bb1af4dd68729844113ef", "url": "https://github.com/confluentinc/ksql/commit/aff74b09867d0fedfc4bb1af4dd68729844113ef", "message": "Review updates", "committedDate": "2020-01-20T18:50:02Z", "type": "commit"}]}