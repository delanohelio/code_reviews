{"pr_number": 4382, "pr_title": "chore: Hamcresterise all the things", "pr_author": "purplefox", "pr_createdAt": "2020-01-26T02:10:39Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4382", "merge_commit": "062c786a18e34510bbaeaafa558db0d645b890ba", "timeline": [{"oid": "5a67efde51c9421c70b7b43aebea326a1e6acf70", "url": "https://github.com/confluentinc/ksql/commit/5a67efde51c9421c70b7b43aebea326a1e6acf70", "message": "hamcresterise all the things", "committedDate": "2020-01-26T22:07:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NDc3MQ==", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371444771", "body": "FYI, can be:\r\n\r\n```suggestion\r\n      assertThat(server.getQueryIDs(), hasItem(new PushQueryId(queryId)));\r\n```\r\n\r\n`hasItem()` asserts that a collection has at least one item that matches that supplied.\r\n\r\nThere is also `hasItems()` which will look for multiple.\r\n\r\nThen there is `contains` and `containsInAnyOrder`: both of these look to assert the exact content of the collection, i.e. all entries in the collection must be matched. ", "bodyText": "FYI, can be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n          \n          \n            \n                  assertThat(server.getQueryIDs(), hasItem(new PushQueryId(queryId)));\n          \n      \n    \n    \n  \n\nhasItem() asserts that a collection has at least one item that matches that supplied.\nThere is also hasItems() which will look for multiple.\nThen there is contains and containsInAnyOrder: both of these look to assert the exact content of the collection, i.e. all entries in the collection must be matched.", "bodyHTML": "<p dir=\"auto\">FYI, can be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      assertThat(server<span class=\"pl-k\">.</span>getQueryIDs()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">contains</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">PushQueryId</span>(queryId)<span class=\"x x-first\">), is(</span><span class=\"pl-c1 x x-last\">true</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      assertThat(server<span class=\"pl-k\">.</span>getQueryIDs()<span class=\"x x-first x-last\">, hasItem</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">PushQueryId</span>(queryId)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>hasItem()</code> asserts that a collection has at least one item that matches that supplied.</p>\n<p dir=\"auto\">There is also <code>hasItems()</code> which will look for multiple.</p>\n<p dir=\"auto\">Then there is <code>contains</code> and <code>containsInAnyOrder</code>: both of these look to assert the exact content of the collection, i.e. all entries in the collection must be matched.</p>", "author": "big-andy-coates", "createdAt": "2020-01-27T19:44:10Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -108,61 +110,66 @@ public void tearDown() {\n   @Test\n   public void shouldExecutePullQuery() throws Exception {\n \n+    // Given\n     JsonObject requestBody = new JsonObject().put(\"sql\", \"select * from foo\").put(\"push\", false);\n     JsonObject properties = new JsonObject().put(\"prop1\", \"val1\").put(\"prop2\", 23);\n     requestBody.put(\"properties\", properties);\n \n+    // When\n     HttpResponse<Buffer> response = sendRequest(\"/query-stream\", requestBody.toBuffer());\n \n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n-    assertEquals(\"select * from foo\", testEndpoints.getLastSql());\n-    assertFalse(testEndpoints.getLastPush());\n-    assertEquals(properties, testEndpoints.getLastProperties());\n-\n+    // Then\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n+    assertThat(testEndpoints.getLastSql(), is(\"select * from foo\"));\n+    assertThat(testEndpoints.getLastPush(), is(false));\n+    assertThat(testEndpoints.getLastProperties(), is(properties));\n     QueryResponse queryResponse = new QueryResponse(response.bodyAsString());\n-    assertEquals(DEFAULT_COLUMN_NAMES, queryResponse.responseObject.getJsonArray(\"columnNames\"));\n-    assertEquals(DEFAULT_COLUMN_TYPES, queryResponse.responseObject.getJsonArray(\"columnTypes\"));\n-    assertEquals(DEFAULT_ROWS, queryResponse.rows);\n-    assertEquals(0, server.getQueryIDs().size());\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnNames\"), is(DEFAULT_COLUMN_NAMES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnTypes\"), is(DEFAULT_COLUMN_TYPES));\n+    assertThat(queryResponse.rows, is(DEFAULT_ROWS));\n+    assertThat(server.getQueryIDs(), hasSize(0));\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertNotNull(queryId);\n-    assertFalse(server.getQueryIDs().contains(new PushQueryId(queryId)));\n+    assertThat(queryId, is(notNullValue()));\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n     Integer rowCount = queryResponse.responseObject.getInteger(\"rowCount\");\n-    assertNotNull(rowCount);\n-    assertEquals(DEFAULT_ROWS.size(), rowCount.intValue());\n+    assertThat(rowCount, is(notNullValue()));\n+    assertThat(rowCount, is(DEFAULT_ROWS.size()));\n   }\n \n   @Test\n   public void shouldExecutePushQuery() throws Exception {\n \n+    // When\n     QueryResponse queryResponse = executePushQueryAndWaitForRows(DEFAULT_PUSH_QUERY_REQUEST_BODY);\n \n-    assertEquals(\"select * from foo\", testEndpoints.getLastSql());\n-    assertTrue(testEndpoints.getLastPush());\n-    assertEquals(DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES, testEndpoints.getLastProperties());\n-\n-    assertEquals(DEFAULT_COLUMN_NAMES, queryResponse.responseObject.getJsonArray(\"columnNames\"));\n-    assertEquals(DEFAULT_COLUMN_TYPES, queryResponse.responseObject.getJsonArray(\"columnTypes\"));\n-    assertEquals(DEFAULT_ROWS, queryResponse.rows);\n-    assertEquals(1, server.getQueryIDs().size());\n-\n+    // Then\n+    assertThat(testEndpoints.getLastSql(), is(\"select * from foo\"));\n+    assertThat(testEndpoints.getLastPush(), is(true));\n+    assertThat(testEndpoints.getLastProperties(), is(DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnNames\"), is(DEFAULT_COLUMN_NAMES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnTypes\"), is(DEFAULT_COLUMN_TYPES));\n+    assertThat(queryResponse.rows, is(DEFAULT_ROWS));\n+    assertThat(server.getQueryIDs(), hasSize(1));\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertNotNull(queryId);\n-    assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertNull(queryResponse.responseObject.getInteger(\"rowCount\"));\n+    assertThat(queryId, is(notNullValue()));\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+    assertThat(queryResponse.responseObject.getInteger(\"rowCount\"), is(nullValue()));\n   }\n \n   @Test\n   public void shouldExecuteMultiplePushQueries() throws Exception {\n \n     int numQueries = 10;\n     for (int i = 0; i < numQueries; i++) {\n+      // When\n       QueryResponse queryResponse = executePushQueryAndWaitForRows(DEFAULT_PUSH_QUERY_REQUEST_BODY);\n-      assertEquals(i + 1, server.getQueryIDs().size());\n+\n+      // Then\n+      assertThat(server.getQueryIDs(), hasSize(i + 1));\n       String queryId = queryResponse.responseObject.getString(\"queryId\");\n-      assertNotNull(queryId);\n-      assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n+      assertThat(queryId, is(notNullValue()));\n+      assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));", "originalCommit": "5a67efde51c9421c70b7b43aebea326a1e6acf70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f6806028f399de30af48d77e2910e2cdfd794b0", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -169,7 +170,7 @@ public class ApiTest {\n       assertThat(server.getQueryIDs(), hasSize(i + 1));\n       String queryId = queryResponse.responseObject.getString(\"queryId\");\n       assertThat(queryId, is(notNullValue()));\n-      assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+      assertThat(server.getQueryIDs(), hasItem(new PushQueryId(queryId)));\n     }\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "062c786a18e34510bbaeaafa558db0d645b890ba", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -169,7 +170,7 @@ public class ApiTest {\n       assertThat(server.getQueryIDs(), hasSize(i + 1));\n       String queryId = queryResponse.responseObject.getString(\"queryId\");\n       assertThat(queryId, is(notNullValue()));\n-      assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+      assertThat(server.getQueryIDs(), hasItem(new PushQueryId(queryId)));\n     }\n   }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "062c786a18e34510bbaeaafa558db0d645b890ba", "message": "Merge commit", "committedDate": null}, {"oid": "055406edc50a63a4b1e207f40b2707e308ca9b22", "committedDate": "2020-02-11 21:42:09 +0000", "message": "Integrate new API with engine for query streaming plus some refactorings (#4495)"}, {"oid": "d5b61d824e9626582f12a8eabc6ed092340da77b", "committedDate": "2020-02-14 09:24:43 -0800", "message": "test: fix flaky insert API tests (MINOR) (#4561)"}, {"oid": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "committedDate": "2020-02-14 18:50:43 +0000", "message": "feat: Plug insert streams into backend (#4512)"}, {"oid": "28288f484aeb18d4bece0531a1ca2b80263aab66", "committedDate": "2020-02-18 20:38:09 +0000", "message": "refactor: Use JKS TLS config (#4580)"}, {"oid": "2cd66c7d4da5e2147821998e8f0827fc28b2df07", "committedDate": "2020-02-19 21:40:49 +0000", "message": "feat: Provide upper limit on number of push queries (#4581)"}, {"oid": "0176721108015caf5bdf1b7da2e3821dba7f17e0", "committedDate": "2020-02-20 06:40:01 +0000", "message": "fix: Tests should use free port for servers (#4595)"}, {"oid": "d403f669f2530678c6b93b7692911c9ebddc524f", "committedDate": "2020-02-21 09:00:44 +0000", "message": "Move ksql-api to ksql-rest-app and delete ksql-api (#4592)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NTQ0Ng==", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371445446", "body": "FYI, can be:\r\n\r\n```suggestion\r\n    assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\r\n```\r\n\r\nUses `not()` to invert the matcher.", "bodyText": "FYI, can be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n          \n          \n            \n                assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\n          \n      \n    \n    \n  \n\nUses not() to invert the matcher.", "bodyHTML": "<p dir=\"auto\">FYI, can be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(server<span class=\"pl-k\">.</span>getQueryIDs()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">contains(</span><span class=\"pl-k\">new</span> <span class=\"pl-smi\">PushQueryId</span>(queryId))<span class=\"x x-first\">, is(</span><span class=\"pl-c1 x x-last\">false</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThat(server<span class=\"pl-k\">.</span>getQueryIDs()<span class=\"x x-first x-last\">, not(hasItem(</span><span class=\"pl-k\">new</span> <span class=\"pl-smi\">PushQueryId</span>(queryId))));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Uses <code>not()</code> to invert the matcher.</p>", "author": "big-andy-coates", "createdAt": "2020-01-27T19:45:30Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -319,70 +371,96 @@ public void shouldCloseQuery() throws Exception {\n         .sendJsonObject(DEFAULT_PUSH_QUERY_REQUEST_BODY, responseFuture);\n \n     // Wait for all rows in the response to arrive\n-    assertTrue(waitUntil(() -> {\n-      Buffer buff = writeStream.getBody();\n+    assertThatEventually(() -> {\n       try {\n+        Buffer buff = writeStream.getBody();\n         QueryResponse queryResponse = new QueryResponse(buff.toString());\n-        return queryResponse.rows.size() == DEFAULT_ROWS.size();\n+        return queryResponse.rows.size();\n       } catch (Throwable t) {\n-        return false;\n+        return Integer.MAX_VALUE;\n       }\n-    }));\n+    }, is(DEFAULT_ROWS.size()));\n \n     // The response shouldn't have ended yet\n-    assertFalse(writeStream.isEnded());\n+    assertThat(writeStream.isEnded(), is(false));\n \n     // Assert the query is still live on the server\n     QueryResponse queryResponse = new QueryResponse(writeStream.getBody().toString());\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertEquals(1, server.getQueryIDs().size());\n-    assertEquals(1, testEndpoints.getQueryPublishers().size());\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+    assertThat(server.getQueryIDs(), hasSize(1));\n+    assertThat(testEndpoints.getQueryPublishers(), hasSize(1));\n \n     // Now send another request to close the query\n     JsonObject closeQueryRequestBody = new JsonObject().put(\"queryId\", queryId);\n     HttpResponse<Buffer> closeQueryResponse = sendRequest(client, \"/close-query\",\n         closeQueryRequestBody.toBuffer());\n-    assertEquals(200, closeQueryResponse.statusCode());\n+    assertThat(closeQueryResponse.statusCode(), is(200));\n \n     // Assert the query no longer exists on the server\n-    assertFalse(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertEquals(0, server.getQueryIDs().size());\n-    assertEquals(1, testEndpoints.getQueryPublishers().size());\n-    assertFalse(testEndpoints.getQueryPublishers().iterator().next().hasSubscriber());\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));", "originalCommit": "5a67efde51c9421c70b7b43aebea326a1e6acf70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f6806028f399de30af48d77e2910e2cdfd794b0", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -398,7 +399,7 @@ public class ApiTest {\n     assertThat(closeQueryResponse.statusCode(), is(200));\n \n     // Assert the query no longer exists on the server\n-    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n+    assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\n     assertThat(server.getQueryIDs(), hasSize(0));\n     assertThat(testEndpoints.getQueryPublishers(), hasSize(1));\n     assertThat(testEndpoints.getQueryPublishers().iterator().next().hasSubscriber(), is(false));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "062c786a18e34510bbaeaafa558db0d645b890ba", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -398,7 +399,7 @@ public class ApiTest {\n     assertThat(closeQueryResponse.statusCode(), is(200));\n \n     // Assert the query no longer exists on the server\n-    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n+    assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\n     assertThat(server.getQueryIDs(), hasSize(0));\n     assertThat(testEndpoints.getQueryPublishers(), hasSize(1));\n     assertThat(testEndpoints.getQueryPublishers().iterator().next().hasSubscriber(), is(false));\n", "next_change": {"commit": "055406edc50a63a4b1e207f40b2707e308ca9b22", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 0b0f1c45275..f961da00ecb 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -401,8 +388,6 @@ public class ApiTest {\n     // Assert the query no longer exists on the server\n     assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\n     assertThat(server.getQueryIDs(), hasSize(0));\n-    assertThat(testEndpoints.getQueryPublishers(), hasSize(1));\n-    assertThat(testEndpoints.getQueryPublishers().iterator().next().hasSubscriber(), is(false));\n \n     // The response should now be ended\n     assertThatEventually(writeStream::isEnded, is(true));\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "062c786a18e34510bbaeaafa558db0d645b890ba", "message": "Merge commit", "committedDate": null}, {"oid": "055406edc50a63a4b1e207f40b2707e308ca9b22", "committedDate": "2020-02-11 21:42:09 +0000", "message": "Integrate new API with engine for query streaming plus some refactorings (#4495)"}, {"oid": "d5b61d824e9626582f12a8eabc6ed092340da77b", "committedDate": "2020-02-14 09:24:43 -0800", "message": "test: fix flaky insert API tests (MINOR) (#4561)"}, {"oid": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "committedDate": "2020-02-14 18:50:43 +0000", "message": "feat: Plug insert streams into backend (#4512)"}, {"oid": "28288f484aeb18d4bece0531a1ca2b80263aab66", "committedDate": "2020-02-18 20:38:09 +0000", "message": "refactor: Use JKS TLS config (#4580)"}, {"oid": "2cd66c7d4da5e2147821998e8f0827fc28b2df07", "committedDate": "2020-02-19 21:40:49 +0000", "message": "feat: Provide upper limit on number of push queries (#4581)"}, {"oid": "0176721108015caf5bdf1b7da2e3821dba7f17e0", "committedDate": "2020-02-20 06:40:01 +0000", "message": "fix: Tests should use free port for servers (#4595)"}, {"oid": "d403f669f2530678c6b93b7692911c9ebddc524f", "committedDate": "2020-02-21 09:00:44 +0000", "message": "Move ksql-api to ksql-rest-app and delete ksql-api (#4592)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NTkyNQ==", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371445925", "body": "Did you mean to remove the `waitUtil` row above? It looks to test the same as this new line...", "bodyText": "Did you mean to remove the waitUtil row above? It looks to test the same as this new line...", "bodyHTML": "<p dir=\"auto\">Did you mean to remove the <code>waitUtil</code> row above? It looks to test the same as this new line...</p>", "author": "big-andy-coates", "createdAt": "2020-01-27T19:46:29Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -391,52 +469,57 @@ public void shouldHandleUnknownQueryIDInCloseQuery() throws Exception {\n   @Test\n   public void shouldInsertWithNoAcksStream() throws Exception {\n \n+    // Given\n     JsonObject params = new JsonObject().put(\"target\", \"test-stream\").put(\"requiresAcks\", false);\n-\n     List<JsonObject> rows = generateInsertRows();\n     Buffer requestBody = Buffer.buffer();\n     requestBody.appendBuffer(params.toBuffer()).appendString(\"\\n\");\n     for (JsonObject row : rows) {\n       requestBody.appendBuffer(row.toBuffer()).appendString(\"\\n\");\n     }\n \n+    //When\n     HttpResponse<Buffer> response = sendRequest(\"/inserts-stream\", requestBody);\n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n \n+    // Then\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n     waitUntil(() -> rows.equals(testEndpoints.getInsertsSubscriber().getRowsInserted()));\n-    assertTrue(testEndpoints.getInsertsSubscriber().isCompleted());\n-    assertEquals(\"test-stream\", testEndpoints.getLastTarget());\n+    assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));", "originalCommit": "5a67efde51c9421c70b7b43aebea326a1e6acf70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f6806028f399de30af48d77e2910e2cdfd794b0", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -484,7 +485,6 @@ public class ApiTest {\n     // Then\n     assertThat(response.statusCode(), is(200));\n     assertThat(response.statusMessage(), is(\"OK\"));\n-    waitUntil(() -> rows.equals(testEndpoints.getInsertsSubscriber().getRowsInserted()));\n     assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n     assertThat(testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n     assertThat(testEndpoints.getLastTarget(), is(\"test-stream\"));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "062c786a18e34510bbaeaafa558db0d645b890ba", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..0b0f1c45275 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -484,7 +485,6 @@ public class ApiTest {\n     // Then\n     assertThat(response.statusCode(), is(200));\n     assertThat(response.statusMessage(), is(\"OK\"));\n-    waitUntil(() -> rows.equals(testEndpoints.getInsertsSubscriber().getRowsInserted()));\n     assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n     assertThat(testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n     assertThat(testEndpoints.getLastTarget(), is(\"test-stream\"));\n", "next_change": {"commit": "d5b61d824e9626582f12a8eabc6ed092340da77b", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 0b0f1c45275..c0a3bb1d91e 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -486,7 +471,7 @@ public class ApiTest {\n     assertThat(response.statusCode(), is(200));\n     assertThat(response.statusMessage(), is(\"OK\"));\n     assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n-    assertThat(testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n+    assertThatEventually(() -> testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n     assertThat(testEndpoints.getLastTarget(), is(\"test-stream\"));\n   }\n \n", "next_change": {"commit": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex c0a3bb1d91e..f8642b84413 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -452,34 +457,11 @@ public class ApiTest {\n         queryResponse.responseObject);\n   }\n \n-  @Test\n-  public void shouldInsertWithNoAcksStream() throws Exception {\n-\n-    // Given\n-    JsonObject params = new JsonObject().put(\"target\", \"test-stream\").put(\"requiresAcks\", false);\n-    List<JsonObject> rows = generateInsertRows();\n-    Buffer requestBody = Buffer.buffer();\n-    requestBody.appendBuffer(params.toBuffer()).appendString(\"\\n\");\n-    for (JsonObject row : rows) {\n-      requestBody.appendBuffer(row.toBuffer()).appendString(\"\\n\");\n-    }\n-\n-    //When\n-    HttpResponse<Buffer> response = sendRequest(\"/inserts-stream\", requestBody);\n-\n-    // Then\n-    assertThat(response.statusCode(), is(200));\n-    assertThat(response.statusMessage(), is(\"OK\"));\n-    assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n-    assertThatEventually(() -> testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n-    assertThat(testEndpoints.getLastTarget(), is(\"test-stream\"));\n-  }\n-\n   @Test\n   public void shouldInsertWithAcksStream() throws Exception {\n \n     // Given\n-    JsonObject params = new JsonObject().put(\"target\", \"test-stream\").put(\"requiresAcks\", true);\n+    JsonObject params = new JsonObject().put(\"target\", \"test-stream\");\n     List<JsonObject> rows = generateInsertRows();\n     Buffer requestBody = Buffer.buffer();\n     requestBody.appendBuffer(params.toBuffer()).appendString(\"\\n\");\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "062c786a18e34510bbaeaafa558db0d645b890ba", "message": "Merge commit", "committedDate": null}, {"oid": "055406edc50a63a4b1e207f40b2707e308ca9b22", "committedDate": "2020-02-11 21:42:09 +0000", "message": "Integrate new API with engine for query streaming plus some refactorings (#4495)"}, {"oid": "d5b61d824e9626582f12a8eabc6ed092340da77b", "committedDate": "2020-02-14 09:24:43 -0800", "message": "test: fix flaky insert API tests (MINOR) (#4561)"}, {"oid": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "committedDate": "2020-02-14 18:50:43 +0000", "message": "feat: Plug insert streams into backend (#4512)"}, {"oid": "28288f484aeb18d4bece0531a1ca2b80263aab66", "committedDate": "2020-02-18 20:38:09 +0000", "message": "refactor: Use JKS TLS config (#4580)"}, {"oid": "2cd66c7d4da5e2147821998e8f0827fc28b2df07", "committedDate": "2020-02-19 21:40:49 +0000", "message": "feat: Provide upper limit on number of push queries (#4581)"}, {"oid": "0176721108015caf5bdf1b7da2e3821dba7f17e0", "committedDate": "2020-02-20 06:40:01 +0000", "message": "fix: Tests should use free port for servers (#4595)"}, {"oid": "d403f669f2530678c6b93b7692911c9ebddc524f", "committedDate": "2020-02-21 09:00:44 +0000", "message": "Move ksql-api to ksql-rest-app and delete ksql-api (#4592)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NjExNQ==", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371446115", "body": "Thank you :D", "bodyText": "Thank you :D", "bodyHTML": "<p dir=\"auto\">Thank you :D</p>", "author": "big-andy-coates", "createdAt": "2020-01-27T19:46:48Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -467,32 +552,38 @@ public void shouldStreamInserts() throws Exception {\n \n     // Wait for the response to complete\n     HttpResponse<Void> response = fut.get();\n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n+\n+    // Then\n+\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n \n     // Verify we got acks for all our inserts\n     InsertsResponse insertsResponse = new InsertsResponse(writeStream.getBody().toString());\n-    assertEquals(rows.size(), insertsResponse.acks.size());\n+    assertThat(insertsResponse.acks, hasSize(rows.size()));\n \n     // Make sure all inserts made it to the server\n-    assertEquals(rows, testEndpoints.getInsertsSubscriber().getRowsInserted());\n-    assertTrue(testEndpoints.getInsertsSubscriber().isCompleted());\n+    assertThat(testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n+    assertThat(testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n \n     // Ensure we received at least some of the response before all the request body was written\n     // Yay HTTP2!\n-    assertTrue(readStream.getLastSentTime() > writeStream.getFirstReceivedTime());\n+    assertThat(readStream.getLastSentTime() > writeStream.getFirstReceivedTime(), is(true));\n   }\n \n   @Test\n   public void shouldHandleMissingTargetInInserts() throws Exception {\n \n+    // Given", "originalCommit": "5a67efde51c9421c70b7b43aebea326a1e6acf70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "changed_code": [{"header": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\nindex 550768c2fdc..f8642b84413 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java\n", "chunk": "@@ -575,7 +548,7 @@ public class ApiTest {\n   public void shouldHandleMissingTargetInInserts() throws Exception {\n \n     // Given\n-    JsonObject requestBody = new JsonObject().put(\"requiresAcks\", true);\n+    JsonObject requestBody = new JsonObject();\n \n     // When\n     HttpResponse<Buffer> response = sendRequest(\"/inserts-stream\",\n", "next_change": null}]}, "commits_in_main": [{"oid": "062c786a18e34510bbaeaafa558db0d645b890ba", "message": "Merge commit", "committedDate": null}, {"oid": "055406edc50a63a4b1e207f40b2707e308ca9b22", "committedDate": "2020-02-11 21:42:09 +0000", "message": "Integrate new API with engine for query streaming plus some refactorings (#4495)"}, {"oid": "d5b61d824e9626582f12a8eabc6ed092340da77b", "committedDate": "2020-02-14 09:24:43 -0800", "message": "test: fix flaky insert API tests (MINOR) (#4561)"}, {"oid": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83", "committedDate": "2020-02-14 18:50:43 +0000", "message": "feat: Plug insert streams into backend (#4512)"}, {"oid": "28288f484aeb18d4bece0531a1ca2b80263aab66", "committedDate": "2020-02-18 20:38:09 +0000", "message": "refactor: Use JKS TLS config (#4580)"}, {"oid": "2cd66c7d4da5e2147821998e8f0827fc28b2df07", "committedDate": "2020-02-19 21:40:49 +0000", "message": "feat: Provide upper limit on number of push queries (#4581)"}, {"oid": "0176721108015caf5bdf1b7da2e3821dba7f17e0", "committedDate": "2020-02-20 06:40:01 +0000", "message": "fix: Tests should use free port for servers (#4595)"}, {"oid": "d403f669f2530678c6b93b7692911c9ebddc524f", "committedDate": "2020-02-21 09:00:44 +0000", "message": "Move ksql-api to ksql-rest-app and delete ksql-api (#4592)"}]}, {"oid": "4d73c9afa67ca1cf57b20d8efdc83ffd37dc021f", "url": "https://github.com/confluentinc/ksql/commit/4d73c9afa67ca1cf57b20d8efdc83ffd37dc021f", "message": "hamcresterise all the things", "committedDate": "2020-01-28T03:51:39Z", "type": "commit"}, {"oid": "2f6806028f399de30af48d77e2910e2cdfd794b0", "url": "https://github.com/confluentinc/ksql/commit/2f6806028f399de30af48d77e2910e2cdfd794b0", "message": "updates after review", "committedDate": "2020-01-28T03:51:39Z", "type": "commit"}, {"oid": "2f6806028f399de30af48d77e2910e2cdfd794b0", "url": "https://github.com/confluentinc/ksql/commit/2f6806028f399de30af48d77e2910e2cdfd794b0", "message": "updates after review", "committedDate": "2020-01-28T03:51:39Z", "type": "forcePushed"}]}