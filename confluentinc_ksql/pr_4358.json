{"pr_number": 4358, "pr_title": "feat: Use POJOs to represent JSON objects read/written from wire", "pr_author": "purplefox", "pr_createdAt": "2020-01-21T15:49:54Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4358", "timeline": [{"oid": "25402182aead99c4d25321e64827eabde43649d9", "url": "https://github.com/confluentinc/ksql/commit/25402182aead99c4d25321e64827eabde43649d9", "message": "Use POJOs for JSON that we read/write to wire", "committedDate": "2020-01-21T16:50:47Z", "type": "forcePushed"}, {"oid": "872d5c879ac6b723bf7fbc52f1e26968fdac151a", "url": "https://github.com/confluentinc/ksql/commit/872d5c879ac6b723bf7fbc52f1e26968fdac151a", "message": "Use POJOs for JSON that we read/write to wire", "committedDate": "2020-01-23T09:45:25Z", "type": "commit"}, {"oid": "f8cb51d61e2c6d98788cee8dbead31c284609816", "url": "https://github.com/confluentinc/ksql/commit/f8cb51d61e2c6d98788cee8dbead31c284609816", "message": "remove benchmark", "committedDate": "2020-01-23T09:45:28Z", "type": "commit"}, {"oid": "f8cb51d61e2c6d98788cee8dbead31c284609816", "url": "https://github.com/confluentinc/ksql/commit/f8cb51d61e2c6d98788cee8dbead31c284609816", "message": "remove benchmark", "committedDate": "2020-01-23T09:45:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NjE3MA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370146170", "body": "unused...", "bodyText": "unused...", "bodyHTML": "<p dir=\"auto\">unused...</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:24:11Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/AcksSubscriber.java", "diffHunk": "@@ -31,9 +33,11 @@\n  */\n public class AcksSubscriber extends ReactiveSubscriber<JsonObject> {\n \n-  private static final Buffer ACK_RESPONSE_LINE = new JsonObject().put(\"status\", \"ok\").toBuffer()\n-      .appendString(\"\\n\");\n   private static final Logger log = LoggerFactory.getLogger(AcksSubscriber.class);\n+  private static final int BATCH_SIZE = 4;", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNDU1NA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370234554", "bodyText": "out of date", "author": "purplefox", "createdAt": "2020-01-23T16:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzQ1OA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370147458", "body": "As per https://github.com/confluentinc/ksql/pull/4354/files#r370126574; would be nice to encode the optionality of the return value into the return type.", "bodyText": "As per https://github.com/confluentinc/ksql/pull/4354/files#r370126574; would be nice to encode the optionality of the return value into the return type.", "bodyHTML": "<p dir=\"auto\">As per <a href=\"https://github.com/confluentinc/ksql/pull/4354/files#r370126574\">https://github.com/confluentinc/ksql/pull/4354/files#r370126574</a>; would be nice to encode the optionality of the return value into the return type.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:26:19Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -37,30 +37,44 @@ private ServerUtils() {\n \n   public static void handleError(final HttpServerResponse response, final int statusCode,\n       final int errorCode, final String errMsg) {\n-    final JsonObject errResponse = createErrResponse(errorCode, errMsg);\n-    response.setStatusCode(statusCode).end(errResponse.toBuffer());\n-  }\n-\n-  public static JsonObject createErrResponse(final int errorCode, final String errMsg) {\n-    return new JsonObject().put(\"status\", \"error\")\n-        .put(\"errorCode\", errorCode)\n-        .put(\"message\", errMsg);\n+    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n+    final Buffer buffer = serializeObject(errorResponse);\n+    response.setStatusCode(statusCode).end(buffer);\n   }\n \n   public static void unhandledExceptonHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  public static JsonObject decodeJsonObject(final Buffer buffer,\n-      final RoutingContext routingContext) {\n-    try {\n-      return new JsonObject(buffer);\n-    } catch (DecodeException e) {\n-      final String message = \"Invalid JSON in request args\";\n-      log.error(message, e);\n-      handleError(routingContext.response(), 400, ERROR_CODE_INVALID_JSON,\n-          message);\n-      return null;\n+  public static <T> T deserialiseObject(final Buffer buffer, final HttpServerResponse response,", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNDY2OA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370234668", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzY1MA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370147650", "body": "As per https://github.com/confluentinc/ksql/pull/4354/files#r370126574; would be nice to encode the optionality of the return value into the return type.", "bodyText": "As per https://github.com/confluentinc/ksql/pull/4354/files#r370126574; would be nice to encode the optionality of the return value into the return type.", "bodyHTML": "<p dir=\"auto\">As per <a href=\"https://github.com/confluentinc/ksql/pull/4354/files#r370126574\">https://github.com/confluentinc/ksql/pull/4354/files#r370126574</a>; would be nice to encode the optionality of the return value into the return type.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:26:39Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/PojoCodec.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.jackson.DatabindCodec;\n+import java.io.IOException;\n+\n+/**\n+ * Knows how to deserialize and serialize POJOs to buffers. Encapsulates the Jackson encoding logic\n+ * and nasty exception handling.\n+ */\n+public final class PojoCodec {\n+\n+  private PojoCodec() {\n+  }\n+\n+  public static <T> T deserialiseObject(final Buffer buffer,\n+      final PojoDeserializerErrorHandler errorHandler,\n+      final Class<T> clazz) {\n+    final ObjectMapper objectMapper = DatabindCodec.mapper();\n+    try {\n+      return objectMapper.readValue(buffer.getBytes(), clazz);\n+    } catch (UnrecognizedPropertyException e) {\n+      errorHandler.onExtraParam(e.getPropertyName());\n+      return null;\n+    } catch (MismatchedInputException e) {\n+      // This is super ugly but I can't see how else to extract the property name\n+      final int startIndex = e.getMessage().indexOf('\\'');\n+      final int endIndex = e.getMessage().indexOf('\\'', startIndex + 1);\n+      final String propertyName = e.getMessage().substring(startIndex + 1, endIndex);\n+      errorHandler.onMissingParam(propertyName);\n+      return null;\n+    } catch (JsonParseException e) {\n+      errorHandler.onInvalidJson();\n+      return null;\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Failed to deserialize buffer\", e);\n+    }\n+  }", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNDgzMQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370234831", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0OTY2OA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370149668", "body": "Just a through, but we could create a mixin style `ApiModel` base class that defined a `toBuffer` method that invoked `PojoCodec`.  All the model classes could then inherit a `toBuffer` method...", "bodyText": "Just a through, but we could create a mixin style ApiModel base class that defined a toBuffer method that invoked PojoCodec.  All the model classes could then inherit a toBuffer method...", "bodyHTML": "<p dir=\"auto\">Just a through, but we could create a mixin style <code>ApiModel</code> base class that defined a <code>toBuffer</code> method that invoked <code>PojoCodec</code>.  All the model classes could then inherit a <code>toBuffer</code> method...</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:29:59Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/InsertsBodyHandler.java", "diffHunk": "@@ -71,43 +72,37 @@ public void handleBodyEnd(final Void v) {\n \n   public void handleBodyBuffer(final Buffer buff) {\n     if (!hasReadArguments) {\n-      final JsonObject args = decodeJsonObject(buff, routingContext);\n-      if (args == null) {\n-        return;\n-      }\n       hasReadArguments = true;\n-      final String target = args.getString(\"target\");\n-      if (target == null) {\n-        handleError(routingContext.response(), 400, ERROR_CODE_MISSING_PARAM,\n-            \"No target in arguments\");\n-        return;\n-      }\n-      final Boolean acks = args.getBoolean(\"acks\");\n-      if (acks == null) {\n-        handleError(routingContext.response(), 400, ERROR_CODE_MISSING_PARAM,\n-            \"No acks in arguments\");\n+      final InsertsStreamArgs insertsStreamArgs = deserialiseObject(buff, routingContext.response(),\n+          InsertsStreamArgs.class);\n+      if (insertsStreamArgs == null) {\n         return;\n       }\n-      final JsonObject properties = args.getJsonObject(\"properties\");\n-      acksSubscriber = acks ? new AcksSubscriber(ctx, routingContext.response()) : null;\n+\n+      acksSubscriber =\n+          insertsStreamArgs.requiresAcks ? new AcksSubscriber(ctx, routingContext.response())\n+              : null;\n       final InsertsSubscriber insertsSubscriber = endpoints\n-          .createInsertsSubscriber(target, properties, acksSubscriber);\n+          .createInsertsSubscriber(insertsStreamArgs.target, insertsStreamArgs.properties,\n+              acksSubscriber);\n       publisher = new BufferedPublisher<>(ctx);\n \n       // This forces response headers to be written so we know we send a 200 OK\n       // This is important if we subsequently find an error in the stream\n       routingContext.response().write(\"\");\n \n       publisher.subscribe(insertsSubscriber);\n+\n     } else if (publisher != null) {\n       final JsonObject row;\n       try {\n         row = new JsonObject(buff);\n       } catch (DecodeException e) {\n-        final JsonObject errResponse = ServerUtils\n-            .createErrResponse(ErrorCodes.ERROR_CODE_INVALID_JSON,\n-                \"Invalid JSON in inserts stream\");\n-        routingContext.response().write(errResponse.toBuffer().appendString(\"\\n\")).end();\n+        final ErrorResponse errorResponse = new ErrorResponse(\n+            ErrorCodes.ERROR_CODE_MALFORMED_REQUEST,\n+            \"Invalid JSON in inserts stream\");\n+        routingContext.response().write(PojoCodec.serializeObject(errorResponse).appendString(\"\\n\"))\n+            .end();", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNTIxMw==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370235213", "bodyText": "I've already split things out in a further PR, could introduce something like that there.", "author": "purplefox", "createdAt": "2020-01-23T16:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0OTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1MDEwMg==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370150102", "body": "null check", "bodyText": "null check", "bodyHTML": "<p dir=\"auto\">null check</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:30:36Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -37,30 +37,44 @@ private ServerUtils() {\n \n   public static void handleError(final HttpServerResponse response, final int statusCode,\n       final int errorCode, final String errMsg) {\n-    final JsonObject errResponse = createErrResponse(errorCode, errMsg);\n-    response.setStatusCode(statusCode).end(errResponse.toBuffer());\n-  }\n-\n-  public static JsonObject createErrResponse(final int errorCode, final String errMsg) {\n-    return new JsonObject().put(\"status\", \"error\")\n-        .put(\"errorCode\", errorCode)\n-        .put(\"message\", errMsg);\n+    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n+    final Buffer buffer = serializeObject(errorResponse);\n+    response.setStatusCode(statusCode).end(buffer);\n   }\n \n   public static void unhandledExceptonHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  public static JsonObject decodeJsonObject(final Buffer buffer,\n-      final RoutingContext routingContext) {\n-    try {\n-      return new JsonObject(buffer);\n-    } catch (DecodeException e) {\n-      final String message = \"Invalid JSON in request args\";\n-      log.error(message, e);\n-      handleError(routingContext.response(), 400, ERROR_CODE_INVALID_JSON,\n-          message);\n-      return null;\n+  public static <T> T deserialiseObject(final Buffer buffer, final HttpServerResponse response,\n+      final Class<T> clazz) {\n+    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(response), clazz);\n+  }\n+\n+  private static class HttpResponseErrorHandler implements PojoDeserializerErrorHandler {\n+\n+    private final HttpServerResponse response;\n+\n+    HttpResponseErrorHandler(final HttpServerResponse response) {\n+      this.response = response;", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNTI5Mw==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370235293", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1MDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1MDY4Ng==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370150686", "body": "I think removal of code like this is definitely a good thing. Especially as things get added as things are enhanced and new functionality added.", "bodyText": "I think removal of code like this is definitely a good thing. Especially as things get added as things are enhanced and new functionality added.", "bodyHTML": "<p dir=\"auto\">I think removal of code like this is definitely a good thing. Especially as things get added as things are enhanced and new functionality added.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:31:33Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -110,34 +113,26 @@ private void handleQueryStream(final RoutingContext routingContext) {\n       conn.closeHandler(connectionQueries);\n       server.registerQueryConnection(conn);\n     }\n-    final JsonObject requestBody = decodeJsonObject(routingContext.getBody(), routingContext);\n-    if (requestBody == null) {\n+    final QueryStreamArgs queryStreamArgs = deserialiseObject(routingContext.getBody(),\n+        routingContext.response(),\n+        QueryStreamArgs.class);\n+    if (queryStreamArgs == null) {\n       return;\n     }\n-    final String sql = requestBody.getString(\"sql\");\n-    if (sql == null) {\n-      handleError(routingContext.response(), 400, ERROR_CODE_MISSING_PARAM, \"No sql in arguments\");\n-      return;\n-    }\n-    final Boolean push = requestBody.getBoolean(\"push\");\n-    if (push == null) {\n-      handleError(routingContext.response(), 400, ERROR_CODE_MISSING_PARAM, \"No push in arguments\");\n-      return;\n-    }\n-    final JsonObject properties = requestBody.getJsonObject(\"properties\");\n-    final QueryPublisher queryPublisher = endpoints.createQueryPublisher(sql, push, properties);", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Mjk2NQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370162965", "body": "couple of things to note in here:\r\n\r\n* Generally worth adding a unit test to each of these model classes to ensure they create the JSON you expect.\r\n* Do you want to fail hard if the JSON document contains any fields you don't recognise? That's the default behaviour. That may be exactly what you want, (fail hard and fast). Or if you want to be more lenient you can annotate the class with `@JsonIgnoreProperties(ignoreUnknown = true)`.\r\n* The rest of the code would name just JSON param `queryId`, not `queryID`.  Probably worth being consistent.\r\n* The `(mode = JsonCreator.Mode.PROPERTIES)` on the constructor isn't necessary: Jackson will work it out.\r\n* Rather than have the queryId come in as a String, have it come in as a `ApiQueryID`.  To achieve this all you need to do is switch the type and annotate `ApiQueryID`'s `toString` method with `@JsonValue`.\r\n* Ideally, model classes should be immutable.  These look to be, so mark them as `import com.google.errorprone.annotations.Immutable;` and check that `ImmutabilityTest` is testing this new module.\r\n\r\nWith these changes the result is:\r\n\r\n```java\r\n@Immutable\r\n@JsonIgnoreProperties(ignoreUnknown = true) // <-- only if you want it to ignore unknown props\r\npublic class CloseQueryArgs {\r\n\r\n  public final ApiQueryID queryId;\r\n\r\n  @JsonCreator\r\n  public CloseQueryArgs(final @JsonProperty(value = \"queryId\", required = true) ApiQueryID queryId) {\r\n    this.queryId = Objects.requireNonNull(queryId, \"queryId\");\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return \"CloseQueryArgs{\"\r\n        + \"queryId='\" + queryId + '\\''\r\n        + '}';\r\n  }\r\n}\r\n\r\n```\r\n\r\nYou can then take these points and apply them to the other model types too.", "bodyText": "couple of things to note in here:\n\nGenerally worth adding a unit test to each of these model classes to ensure they create the JSON you expect.\nDo you want to fail hard if the JSON document contains any fields you don't recognise? That's the default behaviour. That may be exactly what you want, (fail hard and fast). Or if you want to be more lenient you can annotate the class with @JsonIgnoreProperties(ignoreUnknown = true).\nThe rest of the code would name just JSON param queryId, not queryID.  Probably worth being consistent.\nThe (mode = JsonCreator.Mode.PROPERTIES) on the constructor isn't necessary: Jackson will work it out.\nRather than have the queryId come in as a String, have it come in as a ApiQueryID.  To achieve this all you need to do is switch the type and annotate ApiQueryID's toString method with @JsonValue.\nIdeally, model classes should be immutable.  These look to be, so mark them as import com.google.errorprone.annotations.Immutable; and check that ImmutabilityTest is testing this new module.\n\nWith these changes the result is:\n@Immutable\n@JsonIgnoreProperties(ignoreUnknown = true) // <-- only if you want it to ignore unknown props\npublic class CloseQueryArgs {\n\n  public final ApiQueryID queryId;\n\n  @JsonCreator\n  public CloseQueryArgs(final @JsonProperty(value = \"queryId\", required = true) ApiQueryID queryId) {\n    this.queryId = Objects.requireNonNull(queryId, \"queryId\");\n  }\n\n  @Override\n  public String toString() {\n    return \"CloseQueryArgs{\"\n        + \"queryId='\" + queryId + '\\''\n        + '}';\n  }\n}\n\nYou can then take these points and apply them to the other model types too.", "bodyHTML": "<p dir=\"auto\">couple of things to note in here:</p>\n<ul dir=\"auto\">\n<li>Generally worth adding a unit test to each of these model classes to ensure they create the JSON you expect.</li>\n<li>Do you want to fail hard if the JSON document contains any fields you don't recognise? That's the default behaviour. That may be exactly what you want, (fail hard and fast). Or if you want to be more lenient you can annotate the class with <code>@JsonIgnoreProperties(ignoreUnknown = true)</code>.</li>\n<li>The rest of the code would name just JSON param <code>queryId</code>, not <code>queryID</code>.  Probably worth being consistent.</li>\n<li>The <code>(mode = JsonCreator.Mode.PROPERTIES)</code> on the constructor isn't necessary: Jackson will work it out.</li>\n<li>Rather than have the queryId come in as a String, have it come in as a <code>ApiQueryID</code>.  To achieve this all you need to do is switch the type and annotate <code>ApiQueryID</code>'s <code>toString</code> method with <code>@JsonValue</code>.</li>\n<li>Ideally, model classes should be immutable.  These look to be, so mark them as <code>import com.google.errorprone.annotations.Immutable;</code> and check that <code>ImmutabilityTest</code> is testing this new module.</li>\n</ul>\n<p dir=\"auto\">With these changes the result is:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Immutable\n@JsonIgnoreProperties(ignoreUnknown = true) // &lt;-- only if you want it to ignore unknown props\npublic class CloseQueryArgs {\n\n  public final ApiQueryID queryId;\n\n  @JsonCreator\n  public CloseQueryArgs(final @JsonProperty(value = &quot;queryId&quot;, required = true) ApiQueryID queryId) {\n    this.queryId = Objects.requireNonNull(queryId, &quot;queryId&quot;);\n  }\n\n  @Override\n  public String toString() {\n    return &quot;CloseQueryArgs{&quot;\n        + &quot;queryId='&quot; + queryId + '\\''\n        + '}';\n  }\n}\n\"><pre><span class=\"pl-k\">@Immutable</span>\n<span class=\"pl-k\">@JsonIgnoreProperties</span>(<span class=\"pl-c1\">ignoreUnknown</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> &lt;-- only if you want it to ignore unknown props</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">CloseQueryArgs</span> {\n\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ApiQueryID</span> queryId;\n\n  <span class=\"pl-k\">@JsonCreator</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-en\">CloseQueryArgs</span>(<span class=\"pl-k\">final</span> <span class=\"pl-k\">@JsonProperty</span>(<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>queryId<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">required</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>) <span class=\"pl-smi\">ApiQueryID</span> <span class=\"pl-v\">queryId</span>) {\n    <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>queryId <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>requireNonNull(queryId, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>queryId<span class=\"pl-pds\">\"</span></span>);\n  }\n\n  <span class=\"pl-k\">@Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CloseQueryArgs{<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>queryId='<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> queryId <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\'</span><span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>}<span class=\"pl-pds\">'</span></span>;\n  }\n}\n</pre></div>\n<p dir=\"auto\">You can then take these points and apply them to the other model types too.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:51:40Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/CloseQueryArgs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents the arguments to a close query request\n+ */\n+public class CloseQueryArgs {\n+\n+  public final String queryID;\n+\n+  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n+  public CloseQueryArgs(final @JsonProperty(value = \"queryID\", required = true) String queryID) {\n+    this.queryID = queryID;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"CloseQueryArgs{\"\n+        + \"queryID='\" + queryID + '\\''\n+        + '}';\n+  }\n+}", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2MzU2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370163561", "body": "nit: validate params, e.g. null check etc", "bodyText": "nit: validate params, e.g. null check etc", "bodyHTML": "<p dir=\"auto\">nit: validate params, e.g. null check etc</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:52:37Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+/**\n+ * Represents an error response\n+ */\n+public class ErrorResponse {\n+\n+  public final String status;\n+  public final int errorCode;\n+  public final String message;\n+\n+  public ErrorResponse(final int errorCode, final String message) {\n+    this.status = \"error\";\n+    this.errorCode = errorCode;\n+    this.message = message;\n+  }", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2MzcyNQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370163725", "body": "nit: validate params.", "bodyText": "nit: validate params.", "bodyHTML": "<p dir=\"auto\">nit: validate params.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:52:53Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/InsertResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+/**\n+ * Represents a response to an insert\n+ */\n+public class InsertResponse {\n+\n+  public final String status;\n+  public final Integer errorCode;\n+  public final String message;\n+\n+  public InsertResponse(final Integer errorCode, final String message) {\n+    this.status = \"error\";\n+    this.errorCode = errorCode;\n+    this.message = message;\n+  }", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTI1MA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370165250", "body": "if `errorCode` optional, rather than accepting `null` parameters, (where engineers need to go inspect code to try and work out if `null` is actually a valid value, a better pattern might be to have two factory methods:\r\n\r\n```java\r\npublic static InsertResponse success() {\r\n  ...\r\n}\r\n\r\npublic static InsertResponse failure(final int errorCode, final String message) {\r\n  ...\r\n}\r\n\r\nprivate InsertResponse(final OptionalInt errorCode, final String message) {\r\n}\r\n```", "bodyText": "if errorCode optional, rather than accepting null parameters, (where engineers need to go inspect code to try and work out if null is actually a valid value, a better pattern might be to have two factory methods:\npublic static InsertResponse success() {\n  ...\n}\n\npublic static InsertResponse failure(final int errorCode, final String message) {\n  ...\n}\n\nprivate InsertResponse(final OptionalInt errorCode, final String message) {\n}", "bodyHTML": "<p dir=\"auto\">if <code>errorCode</code> optional, rather than accepting <code>null</code> parameters, (where engineers need to go inspect code to try and work out if <code>null</code> is actually a valid value, a better pattern might be to have two factory methods:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static InsertResponse success() {\n  ...\n}\n\npublic static InsertResponse failure(final int errorCode, final String message) {\n  ...\n}\n\nprivate InsertResponse(final OptionalInt errorCode, final String message) {\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">InsertResponse</span> success() {\n  <span class=\"pl-c1\">...</span>\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">InsertResponse</span> failure(<span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> errorCode, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> message) {\n  <span class=\"pl-c1\">...</span>\n}\n\n<span class=\"pl-k\">private</span> InsertResponse(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">OptionalInt</span> errorCode, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> message) {\n}</pre></div>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:55:15Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/InsertResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+/**\n+ * Represents a response to an insert\n+ */\n+public class InsertResponse {\n+\n+  public final String status;\n+  public final Integer errorCode;\n+  public final String message;\n+\n+  public InsertResponse(final Integer errorCode, final String message) {", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNzgyMg==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370237822", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTU1OA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370165558", "body": "```suggestion\r\n    return \"InsertResponse{\"\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"AckResponse{\"\n          \n          \n            \n                return \"InsertResponse{\"", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"41\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">AckResponse</span>{<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"41\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">InsertResponse</span>{<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "big-andy-coates", "createdAt": "2020-01-23T14:55:46Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/InsertResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+/**\n+ * Represents a response to an insert\n+ */\n+public class InsertResponse {\n+\n+  public final String status;\n+  public final Integer errorCode;\n+  public final String message;\n+\n+  public InsertResponse(final Integer errorCode, final String message) {\n+    this.status = \"error\";\n+    this.errorCode = errorCode;\n+    this.message = message;\n+  }\n+\n+  public InsertResponse() {\n+    this.status = \"ok\";\n+    this.errorCode = null;\n+    this.message = null;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AckResponse{\"", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODE3Mw==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370168173", "body": "`JsonObject` is mutable. Better to use immutable types for model classes, e.g. `ImmutableMap`.", "bodyText": "JsonObject is mutable. Better to use immutable types for model classes, e.g. ImmutableMap.", "bodyHTML": "<p dir=\"auto\"><code>JsonObject</code> is mutable. Better to use immutable types for model classes, e.g. <code>ImmutableMap</code>.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T14:59:52Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/InsertsStreamArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Represents the arguments to an insert stream request\n+ */\n+public class InsertsStreamArgs {\n+\n+  public final String target;\n+  public final boolean requiresAcks;\n+  public final JsonObject properties;", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNjgxMA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370236810", "bodyText": "I prefer to use JsonObject as it contains typesafe getters - e.g. getString, getInt etc", "author": "purplefox", "createdAt": "2020-01-23T16:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODU2NQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370168565", "body": "as above.", "bodyText": "as above.", "bodyHTML": "<p dir=\"auto\">as above.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T15:00:29Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/QueryStreamArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Represents the arguments to a query stream request\n+ */\n+public class QueryStreamArgs {\n+\n+  public final String sql;\n+  public final Boolean push;\n+  public final JsonObject properties;", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODgwOA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370168808", "body": "required `push` can be of type `boolean`.", "bodyText": "required push can be of type boolean.", "bodyHTML": "<p dir=\"auto\">required <code>push</code> can be of type <code>boolean</code>.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T15:00:52Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/QueryStreamArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Represents the arguments to a query stream request\n+ */\n+public class QueryStreamArgs {\n+\n+  public final String sql;\n+  public final Boolean push;\n+  public final JsonObject properties;\n+\n+  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n+  public QueryStreamArgs(final @JsonProperty(value = \"sql\", required = true) String sql,\n+      final @JsonProperty(value = \"push\", required = true) Boolean push,\n+      final @JsonProperty(value = \"properties\")\n+          Map<String, Object> properties) {", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNzk5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370237996", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTI3MQ==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370169271", "body": "As above, prefer factory methods to having some fields that can be `null` and some that can't.", "bodyText": "As above, prefer factory methods to having some fields that can be null and some that can't.", "bodyHTML": "<p dir=\"auto\">As above, prefer factory methods to having some fields that can be <code>null</code> and some that can't.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T15:01:34Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/QueryStreamResponseMetadata.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import io.vertx.core.json.JsonArray;\n+\n+/**\n+ * Represents the query meta-data written initially to the response for a query stream request\n+ */\n+public class QueryStreamResponseMetadata {\n+\n+  public final JsonArray columnNames;\n+  public final JsonArray columnTypes;\n+  public final String queryID;\n+  public final Integer rowCount;\n+\n+  public QueryStreamResponseMetadata(final JsonArray columnNames, final JsonArray columnTypes,\n+      final String queryID, final Integer rowCount) {", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzODA1Ng==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370238056", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTM5OA==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370169398", "body": "validate arguments.", "bodyText": "validate arguments.", "bodyHTML": "<p dir=\"auto\">validate arguments.</p>", "author": "big-andy-coates", "createdAt": "2020-01-23T15:01:45Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/protocol/QueryStreamResponseMetadata.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server.protocol;\n+\n+import io.vertx.core.json.JsonArray;\n+\n+/**\n+ * Represents the query meta-data written initially to the response for a query stream request\n+ */\n+public class QueryStreamResponseMetadata {\n+\n+  public final JsonArray columnNames;\n+  public final JsonArray columnTypes;\n+  public final String queryID;\n+  public final Integer rowCount;\n+\n+  public QueryStreamResponseMetadata(final JsonArray columnNames, final JsonArray columnTypes,\n+      final String queryID, final Integer rowCount) {\n+    this.columnNames = columnNames;\n+    this.columnTypes = columnTypes;\n+    this.queryID = queryID;\n+    this.rowCount = rowCount;\n+  }", "originalCommit": "f8cb51d61e2c6d98788cee8dbead31c284609816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzODExMg==", "url": "https://github.com/confluentinc/ksql/pull/4358#discussion_r370238112", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-01-23T16:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTM5OA=="}], "type": "inlineReview"}]}