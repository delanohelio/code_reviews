{"pr_number": 5013, "pr_title": "feat: support more advanced suite of LIKE expressions", "pr_author": "agavra", "pr_createdAt": "2020-04-06T22:46:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5013", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405025061", "body": "missing issue link?", "bodyText": "missing issue link?", "bodyHTML": "<p dir=\"auto\">missing issue link?</p>", "author": "big-andy-coates", "createdAt": "2020-04-07T18:31:15Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Used in the code generation to evaluate SQL 'LIKE' expressions.\n+ *\n+ * @see io.confluent.ksql.execution.expression.tree.LikePredicate\n+ */\n+public final class LikeEvaluator {\n+\n+  // characters that need to be escaped within regex [] - all other\n+  // characters are escaped using \\Q \\E (see Pattern#quote)\n+  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n+      '[', ']', '^', '\\\\'\n+  );\n+\n+  private LikeEvaluator() {\n+  }\n+\n+  /**\n+   * @param val       the value to match\n+   * @param pattern   the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(final String val, final String pattern) {\n+    // note that we do not yet support escape characters in the pattern\n+    // see issue", "originalCommit": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MDc4NQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405040785", "bodyText": "#5021 will add it", "author": "agavra", "createdAt": "2020-04-07T18:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "changed_code": [{"header": "diff --git a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java\nindex 8e7a764674..a283a723c9 100644\n--- a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java\n+++ b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java\n", "chunk": "@@ -27,56 +26,88 @@ import java.util.regex.Pattern;\n  */\n public final class LikeEvaluator {\n \n-  // characters that need to be escaped within regex [] - all other\n-  // characters are escaped using \\Q \\E (see Pattern#quote)\n-  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n-      '[', ']', '^', '\\\\'\n-  );\n-\n   private LikeEvaluator() {\n   }\n \n   /**\n-   * @param val       the value to match\n-   * @param pattern   the pattern to match against\n+   * @param val     the value to match\n+   * @param pattern the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(\n+      final String val,\n+      final String pattern\n+  ) {\n+    return matches(val, pattern, Optional.empty());\n+  }\n+\n+  /**\n+   * @param val     the value to match\n+   * @param pattern the pattern to match against\n+   * @param escape  the escape character, if any\n    *\n    * @return  whether or not {@code val} matches {@code pattern} given the SQL\n    *          LIKE definition of matching\n    */\n-  public static boolean matches(final String val, final String pattern) {\n-    // note that we do not yet support escape characters in the pattern\n-    // see issue\n+  public static boolean matches(\n+      final String val,\n+      final String pattern,\n+      final char escape\n+  ) {\n+    return matches(val, pattern, Optional.of(escape));\n+  }\n+\n+  private static boolean matches(\n+      final String val,\n+      final String pattern,\n+      final Optional<Character> escape\n+  ) {\n     final StringBuilder regex = new StringBuilder();\n \n     final char[] chars = pattern.toCharArray();\n \n+    boolean escaped = false;\n     int start = 0; // start of a plain-text portion of the pattern\n     int i = 0;     // the current index, also doubles as the end of a plain-text portion\n \n     for (; i < chars.length; i++) {\n       final char c = chars[i];\n \n-      switch (c) {\n-        case '[':       // [ represents characters that can be one-of-many\n-          append(pattern, start, i, regex);\n-          i = buildAny(pattern, i, regex);\n-          start = i + 1;\n-          break;\n-        case '%':       // % is any number of any characters\n-          append(pattern, start, i, regex);\n-          regex.append(\".*\");\n-          start = i + 1;\n-          break;\n-        case '_':       // _ is any single character\n-          append(pattern, start, i, regex);\n-          regex.append(\".\");\n-          start = i + 1;\n-          break;\n-        default:\n-          break;\n+      if (escaped) {\n+        escaped = false;\n+      } else if (escape.filter(e -> e == c).isPresent()) {\n+        // the escape character is treated differently in different databases\n+        // the only SQL standard indicates that\n+        //\n+        //    \"A wildcard character is treated as a literal if preceded by\n+        //    the escape character.\"\n+        //\n+        // This implementation will assume that if an escape character is encountered,\n+        // the next character will be treated as a literal. Furthermore, if the escape\n+        // character is one of the special characters ('%' or '_') then it becomes\n+        // impossible to use those characters for their special meaning\n+        //\n+        // To use the escape character in the pattern, have it precede itself\n+        escaped = true;\n+        append(pattern, start, i, regex);\n+        start = i + 1;\n+      } else if (c == '%') {\n+        append(pattern, start, i, regex);\n+        regex.append(\".*\");\n+        start = i + 1;\n+      } else if (c == '_') {\n+        append(pattern, start, i, regex);\n+        regex.append(\".\");\n+        start = i + 1;\n       }\n     }\n \n+    if (escaped) {\n+      throw new KsqlException(\"LIKE pattern must not end with escape character\");\n+    }\n+\n     append(pattern, start, i, regex);\n     return Pattern.compile(regex.toString()).matcher(val).matches();\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405026700", "body": "```suggestion\r\n        {\"percents one side [X]\",         \"barfoobar\", \"%foo\"},\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},\n          \n          \n            \n                    {\"percents one side [X]\",         \"barfoobar\", \"%foo\"},", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>percents one side [X]<span class=\"pl-pds\">\"</span></span>,         <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">barbarbar</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%foo<span class=\"pl-pds\">\"</span></span>},</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>percents one side [X]<span class=\"pl-pds\">\"</span></span>,         <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">barfoobar</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%foo<span class=\"pl-pds\">\"</span></span>},</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "big-andy-coates", "createdAt": "2020-04-07T18:34:02Z", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "originalCommit": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNzQ0Mw==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405027443", "bodyText": "also, worth adding case for:\n\n% other side and\n% in middle and\nmultiple %s\nescaped %s???? Or do we not support them yet.. (hard to add?)", "author": "big-andy-coates", "createdAt": "2020-04-07T18:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzOTg5Ng==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405039896", "bodyText": "the middle two are covered by c[a-c]t%[a-e][^abc]%m__w - i'll add tests for the first and last (escaping is done by [%] in MSFT-sql at least and should be supported here as well)", "author": "agavra", "createdAt": "2020-04-07T18:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "changed_code": [{"header": "diff --git a/ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java b/ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java\nindex 7928bb1d8c..69b71d1bf9 100644\n--- a/ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java\n+++ b/ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java\n", "chunk": "@@ -30,53 +31,58 @@ public class LikeEvaluatorTest {\n   private final String name;\n   private final String val;\n   private final String pattern;\n+  private final Character escape;\n \n   @Parameters(name = \"{0}\")\n   public static Object[][] data() {\n-    // name | val | pattern\n+    // name | val | pattern | escape\n     return new Object[][]{\n-        {\"nothing special\",               \"foo\", \"foo\"},\n-        {\"nothing special [X]\",           \"bar\", \"foo\"},\n-        {\"empty percents\",                \"foo\", \"%foo%\"},\n-        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n-        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n-        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n-        {\"percents one side\",             \"barfoo\", \"%foo\"},\n-        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},\n-        {\"underscore\",                    \"foo\", \"f_o\"},\n-        {\"underscore [X]\",                \"bar\", \"f_o\"},\n-        {\"brackets\",                      \"foo\", \"f[o]o\"},\n-        {\"brackets [X]\",                  \"fxo\", \"f[o]o\"},\n-        {\"brackets with many chars\",      \"foo\", \"f[only]o\"},\n-        {\"brackets with many chars [X]\",  \"fxo\", \"f[only]o\"},\n-        {\"brackets with range\",           \"foo\", \"f[a-o]o\"},\n-        {\"brackets with range[X]\",        \"fxo\", \"f[a-o]o\"},\n-        {\"brackets with underscore\",      \"f_o\", \"f[_]o\"},\n-        {\"brackets with underscore [X]\",  \"fxo\", \"f[_]o\"},\n-        {\"brackets with open brackets\",   \"f[o\", \"f[[]o\"},\n-        {\"brackets with open brackets [X]\",   \"fxo\", \"f[[]o\"},\n-        {\"brackets with dash at start\",       \"f-o\", \"f[-o]o\"},\n-        {\"brackets with dash at astart [X]\",  \"fxo\", \"f[-o]o\"},\n-        {\"brackets with regex chars\",         \"f.o\", \"f[.]o\"},\n-        {\"brackets with regex chars [X]\",     \"foo\", \"f[.]o\"},\n-        // without support for ESCAPE, LIKE cannot match brackets with close brackets\n-        {\"nothing special with regex chars\",      \".^$\\\\*\", \".^$\\\\*\"},\n-        {\"nothing special with regex chars [X]\",  \"a^$\\\\\", \".^$\\\\*\"},\n-        {\"complicated pattern\",      \"cat not dog says meow\", \"c[a-c]t%[a-e][^abc]%m__w\"},\n-        {\"complicated pattern [X]\",  \"dog not cat says meow\", \"c[a-c]t%[a-e][^abc]%m__w\"}\n+        {\"nothing special\",               \"foo\", \"foo\", null},\n+        {\"nothing special [X]\",           \"bar\", \"foo\", null},\n+        {\"empty percents\",                \"foo\", \"%foo%\", null},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\", null},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\", null},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\", null},\n+        {\"percents one side\",             \"barfoo\", \"%foo\", null},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\", null},\n+        {\"percents other side\",             \"barfoo\", \"bar%\", null},\n+        {\"percents other side [X]\",         \"barbarbar\", \"foo%\", null},\n+        {\"percents in the middle\",             \"barfoo\", \"b%o\", null},\n+        {\"percents in the middle [X]\",         \"barbarbar\", \"b%o\", null},\n+        {\"multiple percents in the middle\",      \"barfoo\", \"b%r%o\", null},\n+        {\"multiple percents in the middle [X]\",  \"barbarbar\", \"b%r%o\", null},\n+        {\"multiple percents back to back\",       \"barfoo\", \"b%%%o\", null},\n+        {\"multiple percents back to back [X]\",   \"barbarbar\", \"b%%%o\", null},\n+        {\"underscore\",                           \"foo\", \"f_o\", null},\n+        {\"underscore [X]\",                       \"bar\", \"f_o\", null},\n+        {\"nothing special with regex chars\",      \".^$\\\\*\", \".^$\\\\*\", null},\n+        {\"nothing special with regex chars [X]\",  \"a^$\\\\\", \".^$\\\\*\", null},\n+        {\"escape with normal char\",               \"f%o\", \"f!%o\", '!'},\n+        {\"escape with normal char [X]\",           \"foo\", \"f!%o\", '!'},\n+        {\"escape the escape char\",                \"f!o\", \"f!!o\", '!'},\n+        {\"escape the escape char [X]\",            \"foo\", \"f!!o\", '!'},\n+        {\"escape with special char\",              \"f%o\", \"f%%o\", '%'},\n+        {\"escape with special char [X]\",          \"foo\", \"f%%o\", '%'},\n+        {\"escape with backslash char\",            \"f%o\", \"f\\\\%o\", '\\\\'},\n+        {\"escape with backslash char [X]\",        \"foo\", \"f\\\\%o\", '\\\\'}\n     };\n   }\n \n-  public LikeEvaluatorTest(final String name, final String val, final String pattern) {\n+  public LikeEvaluatorTest(final String name, final String val, final String pattern, final Character escape) {\n     this.name = Objects.requireNonNull(name, \"name\");\n     this.val = Objects.requireNonNull(val, \"val\");\n     this.pattern = Objects.requireNonNull(pattern, \"pattern\");\n+    this.escape = escape;\n   }\n \n   @Test\n   public void shouldMatch() {\n     // Then:\n-    assertThat(LikeEvaluator.matches(val, pattern), not(name.contains(\"[X]\")));\n+    if (escape == null) {\n+      assertThat(LikeEvaluator.matches(val, pattern), not(name.contains(\"[X]\")));\n+    } else {\n+      assertThat(LikeEvaluator.matches(val, pattern, escape), not(name.contains(\"[X]\")));\n+    }\n   }\n \n }\n\\ No newline at end of file\n", "next_change": null}]}}, {"oid": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "url": "https://github.com/confluentinc/ksql/commit/ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "message": "chore: add historical test plans", "committedDate": "2020-04-08T18:47:20Z", "type": "forcePushed"}, {"oid": "923c37c7277f136a7dc17f4290d1f98c76092307", "url": "https://github.com/confluentinc/ksql/commit/923c37c7277f136a7dc17f4290d1f98c76092307", "message": "feat: support more complex LIKE expressions", "committedDate": "2020-04-08T18:53:56Z", "type": "forcePushed"}, {"oid": "2a89d7b59f04da82db781241ca870aff5a7915e6", "url": "https://github.com/confluentinc/ksql/commit/2a89d7b59f04da82db781241ca870aff5a7915e6", "message": "feat: support more complex LIKE expressions", "committedDate": "2020-04-08T18:57:20Z", "type": "forcePushed"}, {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "url": "https://github.com/confluentinc/ksql/commit/72e60e3c2f78f540016d961a55e36bb0dd545a4a", "message": "chore: functional-tests", "committedDate": "2020-04-08T20:10:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MzcwNA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406263704", "body": "nit: test should really ensure escape char is not lost...", "bodyText": "nit: test should really ensure escape char is not lost...", "bodyHTML": "<p dir=\"auto\">nit: test should really ensure escape char is not lost...</p>", "author": "big-andy-coates", "createdAt": "2020-04-09T14:53:17Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java", "diffHunk": "@@ -467,7 +467,7 @@ public void shouldRewriteLikePredicate() {\n     final Expression rewritten = expressionRewriter.rewrite(parsed, context);\n \n     // Then:\n-    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2)));\n+    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.empty())));", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "changed_code": [{"header": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\nindex a5b2d065b5..11022e631c 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\n", "chunk": "@@ -459,7 +459,7 @@ public class ExpressionTreeRewriterTest {\n   @Test\n   public void shouldRewriteLikePredicate() {\n     // Given:\n-    final LikePredicate parsed = parseExpression(\"col1 LIKE '%foo%'\");\n+    final LikePredicate parsed = parseExpression(\"col1 LIKE '%foo%' ESCAPE '!'\");\n     when(processor.apply(parsed.getValue(), context)).thenReturn(expr1);\n     when(processor.apply(parsed.getPattern(), context)).thenReturn(expr2);\n \n", "next_change": null}, {"header": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\nindex a5b2d065b5..11022e631c 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java\n", "chunk": "@@ -467,7 +467,7 @@ public class ExpressionTreeRewriterTest {\n     final Expression rewritten = expressionRewriter.rewrite(parsed, context);\n \n     // Then:\n-    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.empty())));\n+    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.of('!'))));\n   }\n \n   @Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406265056", "body": "nit: can we not remove this if/else by having `LikeEval.matches()` take `Optional<Char>` for last param?", "bodyText": "nit: can we not remove this if/else by having LikeEval.matches() take Optional<Char> for last param?", "bodyHTML": "<p dir=\"auto\">nit: can we not remove this if/else by having <code>LikeEval.matches()</code> take <code>Optional&lt;Char&gt;</code> for last param?</p>", "author": "big-andy-coates", "createdAt": "2020-04-09T14:54:51Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -724,46 +726,23 @@ private String buildSupplierCode(final String typeString, final String code) {\n     @Override\n     public Pair<String, SqlType> visitLikePredicate(final LikePredicate node, final Void context) {\n \n-      // For now we just support simple prefix/suffix cases only.\n-      final String patternString = trimQuotes(process(node.getPattern(), context).getLeft());\n+      final String patternString = process(node.getPattern(), context).getLeft();\n       final String valueString = process(node.getValue(), context).getLeft();\n-      if (patternString.startsWith(\"%\")) {\n-        if (patternString.endsWith(\"%\")) {\n-          return new Pair<>(\n-              \"(\" + valueString + \").contains(\\\"\"\n-                  + patternString.substring(1, patternString.length() - 1)\n-                  + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        } else {\n-          return new Pair<>(\n-              \"(\" + valueString + \").endsWith(\\\"\" + patternString.substring(1) + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        }\n-      }\n \n-      if (patternString.endsWith(\"%\")) {\n+      if (node.getEscape().isPresent()) {", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjYwMA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406302600", "bodyText": "somewhat - I'd still need to do:\nLikeEvaluator.matches(... + \"Optional.ofNullable(\" + escape.map(escape -> \"'\" + escape + \"'\").getOrElse(null))\nAnd to be honest I don't think that's any cleaner.\n(this needs to be generated code, I can't pass the optional itself as a string)", "author": "agavra", "createdAt": "2020-04-09T15:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406270561", "body": "IllegalStateException?\r\n\r\nThe syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?\r\n\r\nI'd of thought this should be :\r\n```suggestion\r\n          throw new KsqlException(loc.asPrefix() + \"Expected single character escape but got: \" + s);\r\n```\r\n\r\nWhere `loc` is the `NodeLocation`.", "bodyText": "IllegalStateException?\nThe syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?\nI'd of thought this should be :\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      throw new IllegalStateException(\"Expected single character escape but got: \" + s);\n          \n          \n            \n                      throw new KsqlException(loc.asPrefix() + \"Expected single character escape but got: \" + s);\n          \n      \n    \n    \n  \n\nWhere loc is the NodeLocation.", "bodyHTML": "<p dir=\"auto\">IllegalStateException?</p>\n<p dir=\"auto\">The syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?</p>\n<p dir=\"auto\">I'd of thought this should be :</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first\">IllegalStateException</span><span class=\"x x-last\">(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected single character escape but got: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first\">KsqlException</span><span class=\"x\">(loc</span><span class=\"pl-k x\">.</span><span class=\"x\">asPrefix() </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected single character escape but got: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Where <code>loc</code> is the <code>NodeLocation</code>.</p>", "author": "big-andy-coates", "createdAt": "2020-04-09T15:02:34Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -889,10 +889,21 @@ public Node visitNullPredicate(final SqlBaseParser.NullPredicateContext context)\n \n     @Override\n     public Node visitLike(final SqlBaseParser.LikeContext context) {\n+\n+      final Optional<String> escape = Optional.ofNullable(context.escape)\n+          .map(Token::getText)\n+          .map(s -> ParserUtil.unquote(s, \"'\"));\n+      escape.ifPresent(s -> {\n+        if (s.length() != 1) {\n+          throw new IllegalStateException(\"Expected single character escape but got: \" + s);", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MDk3OA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406280978", "bodyText": "ah good catch, originally I had it in the syntax as just a single char (.) but then i changed it to STRING to include the quotes and forgot to change this!", "author": "agavra", "createdAt": "2020-04-09T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "changed_code": [{"header": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java\nindex d007bdee46..7c7e0e7c37 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java\n", "chunk": "@@ -893,9 +893,12 @@ public class AstBuilder {\n       final Optional<String> escape = Optional.ofNullable(context.escape)\n           .map(Token::getText)\n           .map(s -> ParserUtil.unquote(s, \"'\"));\n+\n       escape.ifPresent(s -> {\n         if (s.length() != 1) {\n-          throw new IllegalStateException(\"Expected single character escape but got: \" + s);\n+          throw new KsqlException(\n+              getLocation(context.escape) + \": Expected single character escape but got: \" + s\n+          );\n         }\n       });\n \n", "next_change": null}]}}, {"oid": "cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "url": "https://github.com/confluentinc/ksql/commit/cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "message": "feat: support more advanced LIKE expressions", "committedDate": "2020-04-09T15:54:31Z", "type": "commit"}, {"oid": "b2185b27e6518a49fe83e745fd4921c34a165e69", "url": "https://github.com/confluentinc/ksql/commit/b2185b27e6518a49fe83e745fd4921c34a165e69", "message": "chore: functional-tests", "committedDate": "2020-04-09T15:54:31Z", "type": "commit"}, {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "message": "chore: andys comments", "committedDate": "2020-04-09T15:55:19Z", "type": "commit"}, {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "message": "chore: andys comments", "committedDate": "2020-04-09T15:55:19Z", "type": "forcePushed"}]}