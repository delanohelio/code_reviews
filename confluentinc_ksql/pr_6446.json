{"pr_number": 6446, "pr_title": "fix: support unwrapped struct value inference", "pr_author": "vcrfxia", "pr_createdAt": "2020-10-16T04:42:32Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6446", "timeline": [{"oid": "ce0ed791663af98d763a490c937d210d3a57e10c", "url": "https://github.com/confluentinc/ksql/commit/ce0ed791663af98d763a490c937d210d3a57e10c", "message": "fix: support unwrapped struct value inference", "committedDate": "2020-10-16T04:43:44Z", "type": "commit"}, {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "url": "https://github.com/confluentinc/ksql/commit/d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "message": "chore: historic plans", "committedDate": "2020-10-16T04:43:49Z", "type": "commit"}, {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "url": "https://github.com/confluentinc/ksql/commit/d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "message": "chore: historic plans", "committedDate": "2020-10-16T04:43:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTA1Nw==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506049057", "body": "I don't like that this is hard-coded here. If it's to be hard-coded somewhere, I'd prefer it to be further down in the call stack, e.g., in the schema supplier or even in the schema translator. The drawback to that would be that we'd no longer be able to share code between the key and value inference pathways as easily.", "bodyText": "I don't like that this is hard-coded here. If it's to be hard-coded somewhere, I'd prefer it to be further down in the call stack, e.g., in the schema supplier or even in the schema translator. The drawback to that would be that we'd no longer be able to share code between the key and value inference pathways as easily.", "bodyHTML": "<p dir=\"auto\">I don't like that this is hard-coded here. If it's to be hard-coded somewhere, I'd prefer it to be further down in the call stack, e.g., in the schema supplier or even in the schema translator. The drawback to that would be that we'd no longer be able to share code between the key and value inference pathways as easily.</p>", "author": "vcrfxia", "createdAt": "2020-10-16T04:46:23Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/DefaultSchemaInjector.java", "diffHunk": "@@ -122,6 +123,7 @@ public DefaultSchemaInjector(final TopicSchemaSupplier schemaSupplier) {\n         props.getKafkaTopic(),\n         props.getKeySchemaId(),\n         keyFormat,\n+        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES),", "originalCommit": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyMTc4Mw==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506421783", "bodyText": "First off, you should only be setting this flag if the format supports unwrapping!  Or more correctly, if the format supports both unwrapping and wrapping.\nAs to hard coding it... humm, yes, so far it's been hard-coded in one place: SerdeFeaturesFactory.\nWe could do something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES),\n          \n          \n            \n                    SerdeFeaturesFactory.buildInternal(FormatFactory.of(keyFormat),\n          \n      \n    \n    \n  \n\nBut, to be honest, this is only a temporary thing.  At the moment, we only support unwrapped keys. Once we support something else we'll wire it up and this hardcoding will go.", "author": "big-andy-coates", "createdAt": "2020-10-16T13:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0ODkxMg==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506548912", "bodyText": "Good call on only setting the feature if it's supported.\nI worry the naming of buildInternal() will be confusing here since it's not clear what internal topics have to do with schema registry. Is it worth introducing another alias for the method such as setUnwrappingIfSupported() or would that only make things worse?", "author": "vcrfxia", "createdAt": "2020-10-16T15:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MjAzNg==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506392036", "body": "I'd probably just pass all the features down.  There could be other features later that also affect the schema.", "bodyText": "I'd probably just pass all the features down.  There could be other features later that also affect the schema.", "bodyHTML": "<p dir=\"auto\">I'd probably just pass all the features down.  There could be other features later that also affect the schema.</p>", "author": "big-andy-coates", "createdAt": "2020-10-16T13:05:25Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegistryTopicSchemaSupplier.java", "diffHunk": "@@ -127,7 +133,11 @@ private SchemaResult fromParsedSchema(\n \n     final List<SimpleColumn> columns;\n     try {\n-      columns = translator.toColumns(parsedSchema, isKey);\n+      columns = translator.toColumns(\n+          parsedSchema,\n+          isKey,\n+          serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)", "originalCommit": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMTQ1NQ==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506401455", "body": "I don't think we need to check both.   Just checking the serde features is enough.  So I think this should become:\r\n\r\n```java\r\n @Override\r\n  public List<SimpleColumn> toColumns(\r\n      final ParsedSchema schema,\r\n      final SerdeFeatures serdeFeatures,\r\n      final boolean isKey\r\n  ) {\r\n    SerdeUtils.throwOnUnsupportedFeatures(serdeFeatures, format.supportedFeatures());\r\n\r\n    Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\r\n\r\n    if (serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)) {\r\n      connectSchema = SerdeUtils.wrapSingle(connectSchema, isKey);\r\n    }\r\n\r\n    if (connectSchema.type() != Type.STRUCT) {\r\n      if (isKey) {\r\n        throw new IllegalStateException(\"Key schemas are always unwrapped.\");\r\n      }\r\n      \r\n      throw new KsqlException(\"Schema returned from schema registry is anonymous type. \"\r\n          + \"To use this schema with ksqlDB, set '\" + CommonCreateConfigs.WRAP_SINGLE_VALUE\r\n          + \"=false' in the WITH clause properties.\");\r\n    }\r\n\r\n    final Schema rowSchema = connectKsqlTranslator.apply(connectSchema);\r\n\r\n    return rowSchema.fields().stream()\r\n        .map(ConnectFormatSchemaTranslator::toColumn)\r\n        .collect(Collectors.toList());\r\n  }\r\n```", "bodyText": "I don't think we need to check both.   Just checking the serde features is enough.  So I think this should become:\n @Override\n  public List<SimpleColumn> toColumns(\n      final ParsedSchema schema,\n      final SerdeFeatures serdeFeatures,\n      final boolean isKey\n  ) {\n    SerdeUtils.throwOnUnsupportedFeatures(serdeFeatures, format.supportedFeatures());\n\n    Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\n\n    if (serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)) {\n      connectSchema = SerdeUtils.wrapSingle(connectSchema, isKey);\n    }\n\n    if (connectSchema.type() != Type.STRUCT) {\n      if (isKey) {\n        throw new IllegalStateException(\"Key schemas are always unwrapped.\");\n      }\n      \n      throw new KsqlException(\"Schema returned from schema registry is anonymous type. \"\n          + \"To use this schema with ksqlDB, set '\" + CommonCreateConfigs.WRAP_SINGLE_VALUE\n          + \"=false' in the WITH clause properties.\");\n    }\n\n    final Schema rowSchema = connectKsqlTranslator.apply(connectSchema);\n\n    return rowSchema.fields().stream()\n        .map(ConnectFormatSchemaTranslator::toColumn)\n        .collect(Collectors.toList());\n  }", "bodyHTML": "<p dir=\"auto\">I don't think we need to check both.   Just checking the serde features is enough.  So I think this should become:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Override\n  public List&lt;SimpleColumn&gt; toColumns(\n      final ParsedSchema schema,\n      final SerdeFeatures serdeFeatures,\n      final boolean isKey\n  ) {\n    SerdeUtils.throwOnUnsupportedFeatures(serdeFeatures, format.supportedFeatures());\n\n    Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\n\n    if (serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)) {\n      connectSchema = SerdeUtils.wrapSingle(connectSchema, isKey);\n    }\n\n    if (connectSchema.type() != Type.STRUCT) {\n      if (isKey) {\n        throw new IllegalStateException(&quot;Key schemas are always unwrapped.&quot;);\n      }\n      \n      throw new KsqlException(&quot;Schema returned from schema registry is anonymous type. &quot;\n          + &quot;To use this schema with ksqlDB, set '&quot; + CommonCreateConfigs.WRAP_SINGLE_VALUE\n          + &quot;=false' in the WITH clause properties.&quot;);\n    }\n\n    final Schema rowSchema = connectKsqlTranslator.apply(connectSchema);\n\n    return rowSchema.fields().stream()\n        .map(ConnectFormatSchemaTranslator::toColumn)\n        .collect(Collectors.toList());\n  }\"><pre> <span class=\"pl-k\">@Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">SimpleColumn</span>&gt;</span> toColumns(\n      <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ParsedSchema</span> schema,\n      <span class=\"pl-k\">final</span> <span class=\"pl-smi\">SerdeFeatures</span> serdeFeatures,\n      <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> isKey\n  ) {\n    <span class=\"pl-smi\">SerdeUtils</span><span class=\"pl-k\">.</span>throwOnUnsupportedFeatures(serdeFeatures, format<span class=\"pl-k\">.</span>supportedFeatures());\n\n    <span class=\"pl-smi\">Schema</span> connectSchema <span class=\"pl-k\">=</span> connectSrTranslator<span class=\"pl-k\">.</span>toConnectSchema(schema);\n\n    <span class=\"pl-k\">if</span> (serdeFeatures<span class=\"pl-k\">.</span>enabled(<span class=\"pl-smi\">SerdeFeature</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNWRAP_SINGLES</span>)) {\n      connectSchema <span class=\"pl-k\">=</span> <span class=\"pl-smi\">SerdeUtils</span><span class=\"pl-k\">.</span>wrapSingle(connectSchema, isKey);\n    }\n\n    <span class=\"pl-k\">if</span> (connectSchema<span class=\"pl-k\">.</span>type() <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">Type</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STRUCT</span>) {\n      <span class=\"pl-k\">if</span> (isKey) {\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Key schemas are always unwrapped.<span class=\"pl-pds\">\"</span></span>);\n      }\n      \n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">KsqlException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Schema returned from schema registry is anonymous type. <span class=\"pl-pds\">\"</span></span>\n          <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>To use this schema with ksqlDB, set '<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">CommonCreateConfigs</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>WRAP_SINGLE_VALUE</span>\n          <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>=false' in the WITH clause properties.<span class=\"pl-pds\">\"</span></span>);\n    }\n\n    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Schema</span> rowSchema <span class=\"pl-k\">=</span> connectKsqlTranslator<span class=\"pl-k\">.</span>apply(connectSchema);\n\n    <span class=\"pl-k\">return</span> rowSchema<span class=\"pl-k\">.</span>fields()<span class=\"pl-k\">.</span>stream()\n        .map(<span class=\"pl-smi\">ConnectFormatSchemaTranslator</span><span class=\"pl-k\">::</span>toColumn)\n        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());\n  }</pre></div>", "author": "big-andy-coates", "createdAt": "2020-10-16T13:13:37Z", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormatSchemaTranslator.java", "diffHunk": "@@ -59,16 +59,29 @@ public String name() {\n   }\n \n   @Override\n-  public List<SimpleColumn> toColumns(final ParsedSchema schema, final boolean isKey) {\n+  public List<SimpleColumn> toColumns(\n+      final ParsedSchema schema,\n+      final boolean isKey,\n+      final boolean unwrapSingle) {\n     Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\n \n-    if (connectSchema.type() != Type.STRUCT) {\n+    if (connectSchema.type() != Type.STRUCT || unwrapSingle) {", "originalCommit": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MTY0NQ==", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506551645", "bodyText": "Much cleaner! Thanks for the suggestion.\nWanted to check that we're OK removing the exception that's thrown if an unwrapped schema is encountered for a format that does not support unwrapping (link) -- it makes sense to me that we're removing this since the only way we'd end up in this situation is if ksqlDB designated a format the supports unwrapping as not supporting it, but maybe it's better to be defensive and leave the check in?", "author": "vcrfxia", "createdAt": "2020-10-16T15:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMTQ1NQ=="}], "type": "inlineReview"}, {"oid": "2bbfbe9892883c117e1cb31e6e674d21a4a82fc0", "url": "https://github.com/confluentinc/ksql/commit/2bbfbe9892883c117e1cb31e6e674d21a4a82fc0", "message": "chore: feedback", "committedDate": "2020-10-16T15:30:11Z", "type": "commit"}]}