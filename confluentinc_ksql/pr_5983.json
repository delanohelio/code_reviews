{"pr_number": 5983, "pr_title": "fix: Uses pull query metrics for all paths, not just /query", "pr_author": "AlanConfluent", "pr_createdAt": "2020-08-11T18:49:54Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5983", "timeline": [{"oid": "33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "url": "https://github.com/confluentinc/ksql/commit/33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "message": "fix: Uses pull query metrics for all paths, not just /query", "committedDate": "2020-08-11T18:30:18Z", "type": "commit"}, {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "url": "https://github.com/confluentinc/ksql/commit/b0538fd6e1ca329a326d8d968897317a7c7551d9", "message": "Style", "committedDate": "2020-08-11T23:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTUyOQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468919529", "body": "What about the existing `streamedQueryResource.closeMetrics()` call? ", "bodyText": "What about the existing streamedQueryResource.closeMetrics() call?", "bodyHTML": "<p dir=\"auto\">What about the existing <code>streamedQueryResource.closeMetrics()</code> call?</p>", "author": "apurvam", "createdAt": "2020-08-11T23:26:25Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -466,7 +468,7 @@ public void notifyTerminated() {\n   public void shutdown() {\n     log.info(\"ksqlDB shutdown called\");\n     try {\n-      streamedQueryResource.closeMetrics();\n+      pullQueryExecutor.closeMetrics();", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMDk2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468920961", "bodyText": "I moved the method to pullQueryExecutor and then just call that.  Same logic being called, just in a different place.", "author": "AlanConfluent", "createdAt": "2020-08-11T23:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468948645", "body": "There was a reason for these measurements to be in the `StreamedQueryResource`. They measure a more realistic latency that accounts also for query parsing etc. , basically all that happens before the request reaches the `PullQueryExecutor`. ", "bodyText": "There was a reason for these measurements to be in the StreamedQueryResource. They measure a more realistic latency that accounts also for query parsing etc. , basically all that happens before the request reaches the PullQueryExecutor.", "bodyHTML": "<p dir=\"auto\">There was a reason for these measurements to be in the <code>StreamedQueryResource</code>. They measure a more realistic latency that accounts also for query parsing etc. , basically all that happens before the request reaches the <code>PullQueryExecutor</code>.</p>", "author": "vpapavas", "createdAt": "2020-08-12T01:10:10Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTQ1OA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149458", "bodyText": "+1", "author": "big-andy-coates", "createdAt": "2020-08-12T10:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTg3Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469581873", "bodyText": "My original thinking was that such CPU bound things like parsing should be an order of magnitude or two faster than IO like reading from disk or network.  I do recall that in earlier benchmarking, we didn't seem to be IO bound, but that's probably a separate issue.\nIf what we really want is latency for the whole endpoint, which I agree is preferable, it seems like it would be good to have a more generic latency metric for all resources -- that way we don't special case this.  Not sure if that's possible with Vert.x, but I imagine it is.  So as to keep consistency with existing metric naming and make it work with the websocket (which is probably harder to make generic), I'll stick to the pull query use case for now.  Ok, I'll change this part back and add in the web socket.", "author": "AlanConfluent", "createdAt": "2020-08-12T22:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MTMxOQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472051319", "bodyText": "That's a good point - might be worth asking @purplefox and/or googling about vert.x to see if there is a generic way to get metrics on all requests.  I know this is possible in Jetty, but don't know vert.x.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODQzNg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148436", "body": "nit: can't be `null`, so:\r\n\r\n```suggestion\r\n    final boolean collectMetrics = ksqlConfig.getBoolean(\r\n```", "bodyText": "nit: can't be null, so:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Boolean collectMetrics = ksqlConfig.getBoolean(\n          \n          \n            \n                final boolean collectMetrics = ksqlConfig.getBoolean(", "bodyHTML": "<p dir=\"auto\">nit: can't be <code>null</code>, so:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">Boolean</span> collectMetrics <span class=\"pl-k\">=</span> ksqlConfig<span class=\"pl-k\">.</span>getBoolean(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">final</span> <span class=\"pl-k x x-first x-last\">boolean</span> collectMetrics <span class=\"pl-k\">=</span> ksqlConfig<span class=\"pl-k\">.</span>getBoolean(</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "big-andy-coates", "createdAt": "2020-08-12T10:02:08Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjU4OQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662589", "bodyText": "Removed temp variable", "author": "AlanConfluent", "createdAt": "2020-08-13T02:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODk3MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148970", "body": "Can we move this into the `PullQueryExecutor` constructor please, given its already being passed the `ksqlConfig` as a parameter?", "bodyText": "Can we move this into the PullQueryExecutor constructor please, given its already being passed the ksqlConfig as a parameter?", "bodyHTML": "<p dir=\"auto\">Can we move this into the <code>PullQueryExecutor</code> constructor please, given its already being passed the <code>ksqlConfig</code> as a parameter?</p>", "author": "big-andy-coates", "createdAt": "2020-08-12T10:03:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    final Optional<PullQueryExecutorMetrics> pullQueryMetrics = collectMetrics\n+        ? Optional.of(new PullQueryExecutorMetrics(\n+        ksqlEngine.getServiceId(),\n+        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n+        : empty();\n+", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjQ5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662490", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-13T02:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTA4MQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149081", "body": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "bodyHTML": "<p dir=\"auto\">nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.</p>", "author": "big-andy-coates", "createdAt": "2020-08-12T10:03:27Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,17 +140,22 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n+  private final Time time;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final KsqlConfig ksqlConfig\n+      final KsqlConfig ksqlConfig,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n   ) {\n     this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n     this.rateLimiter = RateLimiter.create(ksqlConfig.getInt(\n         KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG));\n+    this.pullQueryMetrics = pullQueryMetrics;", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjQyNQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662425", "bodyText": "I now create it here rather than pass it in.", "author": "AlanConfluent", "createdAt": "2020-08-13T02:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1Mjc5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469152790", "body": "Any reason this can't be pulled into `PullQueryExecutorMetrics`?\r\n\r\n```suggestion\r\n      pullQueryMetrics\r\n              .ifPresent(collector -> collector.recordLatency(time.nanoseconds() - startTime));\r\n```\r\n\r\nWhere `recordLatency` becomes:\r\n\r\n```java\r\npublic void recordLatency(final long nanoSeconds) {\r\n    //Record latency at microsecond scale\r\n    final double latency = TimeUnit.NANOSECONDS.toMillis(nanoSeconds);\r\n    latencySensor.record(latency);\r\n    requestRateSensor.record(1);\r\n  }\r\n```\r\n\r\nAnd `recordRate` can be deleted.", "bodyText": "Any reason this can't be pulled into PullQueryExecutorMetrics?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (pullQueryMetrics.isPresent()) {\n          \n          \n            \n                    //Record latency at microsecond scale\n          \n          \n            \n                    final double latency = (time.nanoseconds() - startTime) / 1000f;\n          \n          \n            \n                    pullQueryMetrics.get().recordLatency(latency);\n          \n          \n            \n                    pullQueryMetrics.get().recordRate(1);\n          \n          \n            \n                  }\n          \n          \n            \n                  pullQueryMetrics\n          \n          \n            \n                          .ifPresent(collector -> collector.recordLatency(time.nanoseconds() - startTime));\n          \n      \n    \n    \n  \n\nWhere recordLatency becomes:\npublic void recordLatency(final long nanoSeconds) {\n    //Record latency at microsecond scale\n    final double latency = TimeUnit.NANOSECONDS.toMillis(nanoSeconds);\n    latencySensor.record(latency);\n    requestRateSensor.record(1);\n  }\nAnd recordRate can be deleted.", "bodyHTML": "<p dir=\"auto\">Any reason this can't be pulled into <code>PullQueryExecutorMetrics</code>?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (pullQueryMetrics<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>Record latency at microsecond scale</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span> latency <span class=\"pl-k\">=</span> (time<span class=\"pl-k\">.</span>nanoseconds() <span class=\"pl-k\">-</span> startTime) <span class=\"pl-k\">/</span> <span class=\"pl-c1\">1000f</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        pullQueryMetrics<span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>recordLatency(latency);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        pullQueryMetrics<span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>recordRate(<span class=\"pl-c1\">1</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      pullQueryMetrics</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              .ifPresent(collector <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> collector<span class=\"pl-k\">.</span>recordLatency(time<span class=\"pl-k\">.</span>nanoseconds() <span class=\"pl-k\">-</span> startTime));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Where <code>recordLatency</code> becomes:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public void recordLatency(final long nanoSeconds) {\n    //Record latency at microsecond scale\n    final double latency = TimeUnit.NANOSECONDS.toMillis(nanoSeconds);\n    latencySensor.record(latency);\n    requestRateSensor.record(1);\n  }\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> recordLatency(<span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> nanoSeconds) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>Record latency at microsecond scale</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span> latency <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NANOSECONDS</span><span class=\"pl-k\">.</span>toMillis(nanoSeconds);\n    latencySensor<span class=\"pl-k\">.</span>record(latency);\n    requestRateSensor<span class=\"pl-k\">.</span>record(<span class=\"pl-c1\">1</span>);\n  }</pre></div>\n<p dir=\"auto\">And <code>recordRate</code> can be deleted.</p>", "author": "big-andy-coates", "createdAt": "2020-08-12T10:10:33Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      if (pullQueryMetrics.isPresent()) {\n+        //Record latency at microsecond scale\n+        final double latency = (time.nanoseconds() - startTime) / 1000f;\n+        pullQueryMetrics.get().recordLatency(latency);\n+        pullQueryMetrics.get().recordRate(1);\n+      }", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNzQ2MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469627460", "bodyText": "Done.  Also removed recordRate", "author": "AlanConfluent", "createdAt": "2020-08-13T00:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1Mjc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MzExMA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469153110", "body": "`pullQueryMetrics` is `Optional`. It should _never_ be null`.", "bodyText": "pullQueryMetrics is Optional. It should never be null`.", "bodyHTML": "<p dir=\"auto\"><code>pullQueryMetrics</code> is <code>Optional</code>. It should <em>never</em> be null`.</p>", "author": "big-andy-coates", "createdAt": "2020-08-12T10:11:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -248,6 +262,12 @@ void checkRateLimit() {\n     }\n   }\n \n+  public void closeMetrics() {\n+    if (pullQueryMetrics != null) {", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNzU5Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469627593", "bodyText": "I agree, should have caught that.  This was just moved code.", "author": "AlanConfluent", "createdAt": "2020-08-13T00:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MzExMA=="}], "type": "inlineReview"}, {"oid": "8720613ef8602449040b9a40aa9013f702a60a52", "url": "https://github.com/confluentinc/ksql/commit/8720613ef8602449040b9a40aa9013f702a60a52", "message": "Feedback", "committedDate": "2020-08-13T02:39:24Z", "type": "commit"}, {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "url": "https://github.com/confluentinc/ksql/commit/35adefbc98e002d2016eed1609e2c8f8661bfe99", "message": "Fix test", "committedDate": "2020-08-13T16:54:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDAzNw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054037", "body": "nit: inline `queryPublisher` again.", "bodyText": "nit: inline queryPublisher again.", "bodyHTML": "<p dir=\"auto\">nit: inline <code>queryPublisher</code> again.</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:45:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java", "diffHunk": "@@ -93,18 +94,20 @@ private QueryPublisher createPushQueryPublisher(\n   private QueryPublisher createPullQueryPublisher(\n       final Context context,\n       final ServiceContext serviceContext,\n-      final ConfiguredStatement<Query> statement\n+      final ConfiguredStatement<Query> statement,\n+      final long startTimeNanos\n   ) {\n     final PullQueryResult result = pullQueryExecutor.execute(\n-        statement, serviceContext, Optional.empty(), Optional.of(false));\n+        statement, serviceContext, Optional.of(false), startTimeNanos);\n     final TableRows tableRows = result.getTableRows();\n \n-    return new PullQueryPublisher(\n+    final QueryPublisher queryPublisher = new PullQueryPublisher(", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxMjE5NA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474912194", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDkxOA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054918", "body": "Probably better to keep this as `KsqlExecutionContext` and pass in the service Id... less coupling.", "bodyText": "Probably better to keep this as KsqlExecutionContext and pass in the service Id... less coupling.", "bodyHTML": "<p dir=\"auto\">Probably better to keep this as <code>KsqlExecutionContext</code> and pass in the service Id... less coupling.</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:47:21Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -136,20 +138,25 @@\n   private static final String VALID_WINDOW_BOUNDS_TYPES_STRING =\n       GrammaticalJoiner.and().join(VALID_WINDOW_BOUNDS_TYPES);\n \n-  private final KsqlExecutionContext executionContext;\n+  private final KsqlEngine ksqlEngine;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n-      final KsqlExecutionContext executionContext,\n+      final KsqlEngine ksqlEngine,", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTgyNg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474935826", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T20:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTk5Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472055993", "body": "Why not just have:\r\n```suggestion\r\n      pullQueryMetrics.ifPresent(metrics ->\r\n          metrics.recordLatency(startTimeNanos));\r\n```\r\n\r\nAnd change `recordLatency` to take the end time in ns, encapsulating the `Time.SYSTEM.nanoseconds()` into a single place...?", "bodyText": "Why not just have:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n          \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(startTimeNanos));\n          \n      \n    \n    \n  \n\nAnd change recordLatency to take the end time in ns, encapsulating the Time.SYSTEM.nanoseconds() into a single place...?", "bodyHTML": "<p dir=\"auto\">Why not just have:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      pullQueryMetrics<span class=\"pl-k\">.</span>ifPresent(metrics <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          metrics<span class=\"pl-k\">.</span>recordLatency(<span class=\"pl-smi x x-first\">Time</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">SYSTEM</span></span><span class=\"pl-k x\">.</span><span class=\"x\">nanoseconds() </span><span class=\"pl-k x\">-</span><span class=\"x x-last\"> </span>startTimeNanos));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      pullQueryMetrics<span class=\"pl-k\">.</span>ifPresent(metrics <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          metrics<span class=\"pl-k\">.</span>recordLatency(startTimeNanos));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">And change <code>recordLatency</code> to take the end time in ns, encapsulating the <code>Time.SYSTEM.nanoseconds()</code> into a single place...?</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:49:15Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +230,17 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n-          executionContext,\n+          ksqlEngine,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      pullQueryMetrics.ifPresent(metrics ->\n+          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTI4Nw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474915287", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjU5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472056590", "body": "As suggested above, change to taking the end time, rather than the elapsed time?", "bodyText": "As suggested above, change to taking the end time, rather than the elapsed time?", "bodyHTML": "<p dir=\"auto\">As suggested above, change to taking the end time, rather than the elapsed time?</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:50:12Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -78,12 +77,10 @@ public void recordRemoteRequests(final double value) {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordRate(final double value) {\n-    this.requestRateSensor.record(value);\n-  }\n-\n-  public void recordLatency(final double value) {\n-    this.latencySensor.record(value);\n+  public void recordLatency(final long nanoSeconds) {", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTU2Nw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474915567", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzYzMA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057630", "body": "Can we go with a non-zero start time please?  Stick it in a constant, e.g. `START_TIME = 1234L`. Update tests to use `START_TIME`.", "bodyText": "Can we go with a non-zero start time please?  Stick it in a constant, e.g. START_TIME = 1234L. Update tests to use START_TIME.", "bodyHTML": "<p dir=\"auto\">Can we go with a non-zero start time please?  Stick it in a constant, e.g. <code>START_TIME = 1234L</code>. Update tests to use <code>START_TIME</code>.</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:52:06Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java", "diffHunk": "@@ -80,10 +81,11 @@ public void setUp() {\n     publisher = new PullQueryPublisher(\n         serviceContext,\n         statement,\n-        pullQueryExecutor);\n+        pullQueryExecutor,\n+        0L);", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMjk4Ng==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474932986", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T20:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1Nzk5OQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057999", "body": "Would be good to test its passing an appropriate start time here. Can we inject a clock?", "bodyText": "Would be good to test its passing an appropriate start time here. Can we inject a clock?", "bodyHTML": "<p dir=\"auto\">Would be good to test its passing an appropriate start time here. Can we inject a clock?</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:52:42Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "diffHunk": "@@ -75,8 +74,7 @@ public void shouldThrowExceptionIfConfigDisabled() {\n       // When:\n       final Exception e = assertThrows(\n           KsqlException.class,\n-          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(),\n-              Optional.empty())\n+          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(), 0L)", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMjEzNA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474932134", "bodyText": "Done.", "author": "AlanConfluent", "createdAt": "2020-08-21T20:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1Nzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1OTE5NA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472059194", "body": "Rather than deleting this test, change it to:\r\n\r\n```java\r\n@Test\t\r\n  public void shouldRecordRequestRate() {\t\r\n    // Given:\t\r\n    pullMetrics. recordLatency(3000);\t\r\n   \r\n    // When:\t\r\n    final double rate = getMetricValue(\"-rate\");\t\r\n\r\n    // Then:\t\r\n    assertThat(rate, closeTo(0.03, 0.001));\t// <-- numbers need changing. \r\n  }\r\n```\r\n\r\nOtherwise there's no test testing that the rate is updated when `recordLatency` is called!", "bodyText": "Rather than deleting this test, change it to:\n@Test\t\n  public void shouldRecordRequestRate() {\t\n    // Given:\t\n    pullMetrics. recordLatency(3000);\t\n   \n    // When:\t\n    final double rate = getMetricValue(\"-rate\");\t\n\n    // Then:\t\n    assertThat(rate, closeTo(0.03, 0.001));\t// <-- numbers need changing. \n  }\nOtherwise there's no test testing that the rate is updated when recordLatency is called!", "bodyHTML": "<p dir=\"auto\">Rather than deleting this test, change it to:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\t\n  public void shouldRecordRequestRate() {\t\n    // Given:\t\n    pullMetrics. recordLatency(3000);\t\n   \n    // When:\t\n    final double rate = getMetricValue(&quot;-rate&quot;);\t\n\n    // Then:\t\n    assertThat(rate, closeTo(0.03, 0.001));\t// &lt;-- numbers need changing. \n  }\"><pre><span class=\"pl-k\">@Test</span>\t\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> shouldRecordRequestRate() {\t\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Given:\t</span>\n    pullMetrics. recordLatency(<span class=\"pl-c1\">3000</span>);\t\n   \n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> When:\t</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-k\">double</span> rate <span class=\"pl-k\">=</span> getMetricValue(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-rate<span class=\"pl-pds\">\"</span></span>);\t\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Then:\t</span>\n    assertThat(rate, closeTo(<span class=\"pl-c1\">0.03</span>, <span class=\"pl-c1\">0.001</span>));\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> &lt;-- numbers need changing. </span>\n  }</pre></div>\n<p dir=\"auto\">Otherwise there's no test testing that the rate is updated when <code>recordLatency</code> is called!</p>", "author": "big-andy-coates", "createdAt": "2020-08-18T09:54:48Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java", "diffHunk": "@@ -112,22 +112,10 @@ public void shouldRecordErrorRate() {\n     assertThat(rate, closeTo(0.03, 0.001));\n   }\n \n-  @Test\n-  public void shouldRecordRequestRate() {\n-    // Given:\n-    pullMetrics.recordRate(3);\n-\n-    // When:\n-    final double rate = getMetricValue(\"-rate\");\n-\n-    // Then:\n-    assertThat(rate, closeTo(0.03, 0.001));\n-  }", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMjgyMg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474922822", "bodyText": "I had removed the rate variable since it didn't appear to be read at all in practice, and since you had recommended removing it, but I'm now thinking you just meant the method recordRate.  Alright, will add this variable to the recordLatecy call and add back this test.", "author": "AlanConfluent", "createdAt": "2020-08-21T20:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1OTE5NA=="}], "type": "inlineReview"}, {"oid": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "url": "https://github.com/confluentinc/ksql/commit/06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "message": "Feedback", "committedDate": "2020-08-21T20:22:47Z", "type": "commit"}, {"oid": "aed898da72c51ecb01e967952ce8fa1d58f0827c", "url": "https://github.com/confluentinc/ksql/commit/aed898da72c51ecb01e967952ce8fa1d58f0827c", "message": "Style", "committedDate": "2020-08-21T20:49:15Z", "type": "commit"}]}