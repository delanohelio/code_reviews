{"pr_number": 6173, "pr_title": "feat: Support IF NOT EXISTS on CREATE TYPE", "pr_author": "jzaralim", "pr_createdAt": "2020-09-10T00:47:37Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6173", "timeline": [{"oid": "2165391aa84c0ddfa1ee77d2ffb611d19e0057d1", "url": "https://github.com/confluentinc/ksql/commit/2165391aa84c0ddfa1ee77d2ffb611d19e0057d1", "message": "feat: Support IF NOT EXISTS on CREATE TYPE", "committedDate": "2020-09-10T00:40:52Z", "type": "commit"}, {"oid": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "url": "https://github.com/confluentinc/ksql/commit/b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "message": "chore: fix indentation", "committedDate": "2020-09-10T00:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxODM3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486418371", "body": "Could you add `this.metaStore = requireNonNull(metastore, \"metaStore\");`.", "bodyText": "Could you add this.metaStore = requireNonNull(metastore, \"metaStore\");.", "bodyHTML": "<p dir=\"auto\">Could you add <code>this.metaStore = requireNonNull(metastore, \"metaStore\");</code>.</p>", "author": "spena", "createdAt": "2020-09-10T15:06:10Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java", "diffHunk": "@@ -16,16 +16,30 @@\n package io.confluent.ksql.ddl.commands;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n \n public final class RegisterTypeFactory {\n-  RegisterTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  RegisterTypeFactory(final MetaStore metaStore) {\n+    this.metaStore = metaStore;", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMDUxNw==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486430517", "body": "```suggestion\r\n  public void shouldNotThrowOnRegisterExistingTypeWhenIfNotExistsSet() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldNotThrowError() {\n          \n          \n            \n              public void shouldNotThrowOnRegisterExistingTypeWhenIfNotExistsSet() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldNotThrowError</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldNotThrowOnRegisterExistingTypeWhenIfNotExistsSet</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "spena", "createdAt": "2020-09-10T15:22:12Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n-        \"alias\",\n-        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build())\n+        NOT_EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n+    );\n+\n+    // When:\n+    final RegisterTypeCommand result = factory.create(ddlStatement);\n+\n+    // Then:\n+    assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n+    assertThat(result.getTypeName(), equalTo(NOT_EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldNotThrowError() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMDcyNw==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486430727", "body": "```suggestion\r\n  public void shouldThrowOnRegisterExistingTypeWhenIfNotExistsNotSet() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldThrowError() {\n          \n          \n            \n              public void shouldThrowOnRegisterExistingTypeWhenIfNotExistsNotSet() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldThrowError</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldThrowOnRegisterExistingTypeWhenIfNotExistsNotSet</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "spena", "createdAt": "2020-09-10T15:22:34Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n-        \"alias\",\n-        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build())\n+        NOT_EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n+    );\n+\n+    // When:\n+    final RegisterTypeCommand result = factory.create(ddlStatement);\n+\n+    // Then:\n+    assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n+    assertThat(result.getTypeName(), equalTo(NOT_EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldNotThrowError() {\n+    // Given:\n+    final RegisterType ddlStatement = new RegisterType(\n+        Optional.empty(),\n+        EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n     );\n \n     // When:\n     final RegisterTypeCommand result = factory.create(ddlStatement);\n \n     // Then:\n     assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n-    assertThat(result.getTypeName(), equalTo(\"alias\"));\n+    assertThat(result.getTypeName(), equalTo(EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldThrowError() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMTkyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486431921", "body": "Add another test case to create a non-existing type when ifNotExists is not set. This should be used to validate we won't get errors in such scenario.", "bodyText": "Add another test case to create a non-existing type when ifNotExists is not set. This should be used to validate we won't get errors in such scenario.", "bodyHTML": "<p dir=\"auto\">Add another test case to create a non-existing type when ifNotExists is not set. This should be used to validate we won't get errors in such scenario.</p>", "author": "spena", "createdAt": "2020-09-10T15:24:15Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50b91a1609bfceb36c436d391434ed6d033d557a", "url": "https://github.com/confluentinc/ksql/commit/50b91a1609bfceb36c436d391434ed6d033d557a", "message": "fix: address review comments", "committedDate": "2020-09-10T17:44:57Z", "type": "commit"}]}