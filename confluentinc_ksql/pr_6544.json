{"pr_number": 6544, "pr_title": "feat: support multi-column key declarations", "pr_author": "agavra", "pr_createdAt": "2020-10-29T18:42:11Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6544", "timeline": [{"oid": "627deaf91e153e65514d6c82fae3b89730473512", "url": "https://github.com/confluentinc/ksql/commit/627deaf91e153e65514d6c82fae3b89730473512", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-29T20:47:27Z", "type": "forcePushed"}, {"oid": "7b75de383a9b35503f3897c8e2eead67142cfec5", "url": "https://github.com/confluentinc/ksql/commit/7b75de383a9b35503f3897c8e2eead67142cfec5", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-29T21:39:03Z", "type": "forcePushed"}, {"oid": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "url": "https://github.com/confluentinc/ksql/commit/20d2c78ec74a88360fddb695fb087236c9ec4ab6", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-29T21:44:48Z", "type": "forcePushed"}, {"oid": "36ded16889a98cc1fef3382eec929c84372472ab", "url": "https://github.com/confluentinc/ksql/commit/36ded16889a98cc1fef3382eec929c84372472ab", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-29T22:04:12Z", "type": "forcePushed"}, {"oid": "348b36b17be6acdb18218ffb353af1fadaa25ba7", "url": "https://github.com/confluentinc/ksql/commit/348b36b17be6acdb18218ffb353af1fadaa25ba7", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-30T00:20:32Z", "type": "forcePushed"}, {"oid": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "url": "https://github.com/confluentinc/ksql/commit/20d2c78ec74a88360fddb695fb087236c9ec4ab6", "message": "feat: support multi-column key declarations", "committedDate": "2020-10-29T21:44:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzQ0OA==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707448", "body": "nit (not your code):\r\n```suggestion\r\n      // Persistent queries have key columns as value columns - so final projection can exclude them:\r\n```", "bodyText": "nit (not your code):\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Persistent queries have key columns as key columns - so final projection can exclude them:\n          \n          \n            \n                  // Persistent queries have key columns as value columns - so final projection can exclude them:", "bodyHTML": "<p dir=\"auto\">nit (not your code):</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Persistent queries have key columns as <span class=\"x x-first x-last\">key</span> columns - so final projection can exclude them:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Persistent queries have key columns as <span class=\"x x-first x-last\">value</span> columns - so final projection can exclude them:</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "vcrfxia", "createdAt": "2020-11-05T00:17:02Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/FinalProjectNode.java", "diffHunk": "@@ -104,6 +108,7 @@ public void validateKeyPresent(final SourceName sinkName) {\n \n     if (into.isPresent()) {\n       // Persistent queries have key columns as key columns - so final projection can exclude them:", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzQ3Mw==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707473", "body": "Not directly related to your PR, but can you help me understand why the validation that key columns are not selected more than once is performed in `FinalProjectNode` while the validation that key columns are selected is performed in `DataSourceNode`, rather than performing both checks in the same place?", "bodyText": "Not directly related to your PR, but can you help me understand why the validation that key columns are not selected more than once is performed in FinalProjectNode while the validation that key columns are selected is performed in DataSourceNode, rather than performing both checks in the same place?", "bodyHTML": "<p dir=\"auto\">Not directly related to your PR, but can you help me understand why the validation that key columns are not selected more than once is performed in <code>FinalProjectNode</code> while the validation that key columns are selected is performed in <code>DataSourceNode</code>, rather than performing both checks in the same place?</p>", "author": "vcrfxia", "createdAt": "2020-11-05T00:17:07Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/FinalProjectNode.java", "diffHunk": "@@ -114,10 +119,28 @@ public void validateKeyPresent(final SourceName sinkName) {\n             return true;\n           }\n \n-          return parentSchema.isKeyColumn(columnName);\n+          if (parentSchema.isKeyColumn(columnName)) {\n+            seenKeyColumns.computeIfAbsent(columnName, k -> new HashSet<>()).add(se.getAlias());\n+            return true;\n+          }\n         }\n         return false;\n       });\n+\n+      for (final Entry<ColumnName, Set<ColumnName>> seenKey : seenKeyColumns.entrySet()) {\n+        if (seenKey.getValue().size() > 1) {\n+          final String keys = GrammaticalJoiner.and().join(\n+              seenKey.getValue().stream().map(Name::text).sorted());\n+          throw new KsqlException(\"The projection contains a key column (\" + seenKey.getKey()", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1Mzc3Nw==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r518353777", "bodyText": "Every node \"validates\" that the key is selected, they just all delegate to the child node that has that information:\n// PlanNode.java:L145\n  void validateKeyPresent(final SourceName sinkName, final Projection projection) {\n    getSources().forEach(s -> s.validateKeyPresent(sinkName, projection));\n  }\nDataSourceNode, JoinNode and UserRepartitionNode all override this method because those are the nodes that truly \"know\" whether the key was selected. Imagine we projected the key column with a different name, the schema in the FinalProjectNode would consider that the key - but of course we didn't select that! We selected the original key.\nTo illustrate, in the example below the project node has a schema [col1 INT PRIMARY KEY] but we didn't select col1 - so it would fail! Of course we could do some magic and \"remember\" that b.col1 is actually a.id, but why not just delegate that to the node that already tracks that?\nCREATE TABLE a (id INT PRIMARY KEY, col1 INT);\nCREATE TABLE b AS SELECT id AS col1; \n(Note that it's a little confusing, because there is also VerifiableNode, which AggregateNode, FinalProjectNode and SuppressNode all override - and it is VerifiableNode#validateKeyPresent is what is called at the top level, but these just delegate down to the three source nodes eventually).\n\nwhy the validation that key columns are not selected more than once is performed in FinalProjectNode\n\nI think this one is clearer why it can't be in DataSourceNode, it's the other way around that might need some justification.\n\nAll that being said, I think this can definitely be made clearer going forward. The logical nodes don't follow a very strict abstraction model unfortunately.", "author": "agavra", "createdAt": "2020-11-05T20:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NzI4Mg==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r518367282", "bodyText": "Thanks for the explanation -- super helpful!", "author": "vcrfxia", "createdAt": "2020-11-05T21:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzUwNw==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707507", "body": "nit: it's a bit odd that this method is called `validate` now that there's validation being performed in `build()` as well. Can we either move the validation back into this method, or rename this method to something more specific (`throwOnZeroValueColumns()` or similar)?", "bodyText": "nit: it's a bit odd that this method is called validate now that there's validation being performed in build() as well. Can we either move the validation back into this method, or rename this method to something more specific (throwOnZeroValueColumns() or similar)?", "bodyHTML": "<p dir=\"auto\">nit: it's a bit odd that this method is called <code>validate</code> now that there's validation being performed in <code>build()</code> as well. Can we either move the validation back into this method, or rename this method to something more specific (<code>throwOnZeroValueColumns()</code> or similar)?</p>", "author": "vcrfxia", "createdAt": "2020-11-05T00:17:11Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/FinalProjectNode.java", "diffHunk": "@@ -142,16 +165,6 @@ public void validateKeyPresent(final SourceName sinkName) {\n   private void validate() {", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzY5Ng==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707696", "body": "To check my understanding: this works today because we only ever end up with a single key after partition by or group by, but this method signature will have to change to support building structs with multiple key columns in a future PR, yes?", "bodyText": "To check my understanding: this works today because we only ever end up with a single key after partition by or group by, but this method signature will have to change to support building structs with multiple key columns in a future PR, yes?", "bodyHTML": "<p dir=\"auto\">To check my understanding: this works today because we only ever end up with a single key after partition by or group by, but this method signature will have to change to support building structs with multiple key columns in a future PR, yes?</p>", "author": "vcrfxia", "createdAt": "2020-11-05T00:17:55Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/StructKeyUtil.java", "diffHunk": "@@ -58,16 +57,14 @@ public static KeyBuilder keyBuilder(final ColumnName name, final SqlType type) {\n   public static final class KeyBuilder {\n \n     private final Schema keySchema;\n-    private final org.apache.kafka.connect.data.Field keyField;\n \n-    private KeyBuilder(final Schema keySchema) {\n+    public KeyBuilder(final Schema keySchema) {\n       this.keySchema = Objects.requireNonNull(keySchema, \"keySchema\");\n-      this.keyField = Iterables.getOnlyElement(keySchema.fields());\n     }\n \n-    public Struct build(final Object keyValue) {\n+    public Struct build(final Object keyValue, final int fieldIndex) {", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NDI1NQ==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r518294255", "bodyText": "yes - I tried to change this to make it more generic but it causes a shocking amount of code jitter, so I'll do that in a future PR", "author": "agavra", "createdAt": "2020-11-05T19:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzg2Mw==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707863", "body": "nit: \r\n```suggestion\r\n  public void shouldHandleMultiKeyField() {\r\n```\r\nand similarly for the other new tests below.", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldHandleMultiField() {\n          \n          \n            \n              public void shouldHandleMultiKeyField() {\n          \n      \n    \n    \n  \n\nand similarly for the other new tests below.", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldHandleMultiField</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldHandleMultiKeyField</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">and similarly for the other new tests below.</p>", "author": "vcrfxia", "createdAt": "2020-11-05T00:18:30Z", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/SourceBuilderTest.java", "diffHunk": "@@ -555,6 +560,70 @@ public void shouldHandleNullKey() {\n   }\n \n   @Test\n+  public void shouldHandleMultiField() {", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzg4Mg==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r517707882", "body": "It's not possible for a user to have a windowed, multi-key table today, right? Since group by on multiple columns still creates a single key, and we don't allow importing windowed tables?\r\n\r\nAlso, this method looks unused.", "bodyText": "It's not possible for a user to have a windowed, multi-key table today, right? Since group by on multiple columns still creates a single key, and we don't allow importing windowed tables?\nAlso, this method looks unused.", "bodyHTML": "<p dir=\"auto\">It's not possible for a user to have a windowed, multi-key table today, right? Since group by on multiple columns still creates a single key, and we don't allow importing windowed tables?</p>\n<p dir=\"auto\">Also, this method looks unused.</p>", "author": "vcrfxia", "createdAt": "2020-11-05T00:18:34Z", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/SourceBuilderTest.java", "diffHunk": "@@ -768,6 +849,20 @@ private void givenWindowedSourceTable() {\n     );\n   }\n \n+  private void givenWindowedMultiKeySourceTable() {", "originalCommit": "20d2c78ec74a88360fddb695fb087236c9ec4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1OTI5Ng==", "url": "https://github.com/confluentinc/ksql/pull/6544#discussion_r518359296", "bodyText": "yes you are right, that was from a change i had backed out and forgot to udpate! thanks for catching this", "author": "agavra", "createdAt": "2020-11-05T20:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNzg4Mg=="}], "type": "inlineReview"}, {"oid": "b80179045c88861c45fc05c61ad484c4559ab4ee", "url": "https://github.com/confluentinc/ksql/commit/b80179045c88861c45fc05c61ad484c4559ab4ee", "message": "feat: support multi-column key declarations", "committedDate": "2020-11-05T23:39:45Z", "type": "commit"}, {"oid": "3b251ddc8c37bfbb01811961d14b45e2920c62ea", "url": "https://github.com/confluentinc/ksql/commit/3b251ddc8c37bfbb01811961d14b45e2920c62ea", "message": "chore: victorias comments", "committedDate": "2020-11-05T23:39:46Z", "type": "commit"}, {"oid": "f058668991caf6bba494db6416936ee3efa35b8c", "url": "https://github.com/confluentinc/ksql/commit/f058668991caf6bba494db6416936ee3efa35b8c", "message": "chore: rebase", "committedDate": "2020-11-05T23:43:11Z", "type": "commit"}, {"oid": "f058668991caf6bba494db6416936ee3efa35b8c", "url": "https://github.com/confluentinc/ksql/commit/f058668991caf6bba494db6416936ee3efa35b8c", "message": "chore: rebase", "committedDate": "2020-11-05T23:43:11Z", "type": "forcePushed"}]}