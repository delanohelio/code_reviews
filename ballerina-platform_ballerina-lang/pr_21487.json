{"pr_number": 21487, "pr_title": "Block new strand generation within locks.", "pr_author": "dulvinw", "pr_createdAt": "2020-03-05T06:13:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMTUzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388331531", "body": "Shall we validate the error message also?", "bodyText": "Shall we validate the error message also?", "bodyHTML": "<p dir=\"auto\">Shall we validate the error message also?</p>", "author": "MaryamZi", "createdAt": "2020-03-05T14:34:44Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/worker/WorkerTest.java", "diffHunk": "@@ -347,4 +348,16 @@ public void waitInReturn() {\n         Assert.assertEquals(mapResult.get(\"w1\").stringValue(), \"w1\");\n         Assert.assertEquals(mapResult.get(\"w2\").stringValue(), \"w2\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class)\n+    public void testFunctionWithWorkerInsideLock() {\n+        BValue[] returns = BRunUtil.invoke(result, \"testPanicWorkerInsideLock\");\n+    }\n+\n+    @Test\n+    public void testWorkerInsideLock() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/workers/worker-in-lock.bal\");\n+        int index = 0;\n+        BAssertUtil.validateError(result, index++, 4, 20);", "originalCommit": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NzQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388347402", "bodyText": "+1 will do", "author": "dulvinw", "createdAt": "2020-03-05T14:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMjM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388332396", "body": "We can combine the checks right?\r\n\r\n```suggestion\r\n        if (lock != null && !lock.isLockFree()) {\r\n```", "bodyText": "We can combine the checks right?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lock != null) {\n          \n          \n            \n                        if (!lock.isLockFree()) {\n          \n          \n            \n                    if (lock != null && !lock.isLockFree()) {", "bodyHTML": "<p dir=\"auto\">We can combine the checks right?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (lock <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>lock<span class=\"pl-k\">.</span>isLockFree()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (lock <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>lock<span class=\"pl-k\">.</span>isLockFree()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-03-05T14:36:03Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -40,9 +40,18 @@ public void addLockToMap(String lockName) {\n         globalLockMap.put(lockName, new BLock());\n     }\n \n-    public synchronized BLock getLockFromMap(String lockName) {\n+    public BLock getLockFromMap(String lockName) {\n         return globalLockMap.computeIfAbsent(lockName, (k) -> {\n             return new BLock();\n         });\n     }\n+\n+    public void panicIfInLock(String lockName) {\n+        BLock lock = globalLockMap.get(lockName);\n+        if (lock != null) {\n+            if (!lock.isLockFree()) {", "originalCommit": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMzMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388333332", "body": "This method is only called in BLockStore.java right? Shall we move the method there?", "bodyText": "This method is only called in BLockStore.java right? Shall we move the method there?", "bodyHTML": "<p dir=\"auto\">This method is only called in BLockStore.java right? Shall we move the method there?</p>", "author": "MaryamZi", "createdAt": "2020-03-05T14:37:33Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -162,6 +163,10 @@ public static ErrorValue createNumericConversionError(Object inputValue, BType i\n                 RuntimeErrors.INCOMPATIBLE_SIMPLE_TYPE_CONVERT_OPERATION, inputType, inputValue, targetType));\n     }\n \n+    public static ErrorValue createAsyncCallInsideLockError() {", "originalCommit": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNzQwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390207407", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMzMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNDUyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388334525", "body": "Shall we move this constant to BallerinaErrorReasons.java and prefix it with \"{ballerina}\"? (Check BallerinaErrorReasons for examples).\r\n\r\nAnd I guess we should suffix it with \"Error\"?\r\n\r\n```suggestion\r\n    public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLockError\";\r\n```", "bodyText": "Shall we move this constant to BallerinaErrorReasons.java and prefix it with \"{ballerina}\"? (Check BallerinaErrorReasons for examples).\nAnd I guess we should suffix it with \"Error\"?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLock\";\n          \n          \n            \n                public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLockError\";", "bodyHTML": "<p dir=\"auto\">Shall we move this constant to BallerinaErrorReasons.java and prefix it with \"{ballerina}\"? (Check BallerinaErrorReasons for examples).</p>\n<p dir=\"auto\">And I guess we should suffix it with \"Error\"?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">ASYNC_CALL_INSIDE_LOCK</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">AsyncCallInsideLock</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">ASYNC_CALL_INSIDE_LOCK</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">AsyncCallInsideLockError</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-03-05T14:39:26Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -61,6 +61,7 @@\n     public static final String GENERATE_PKG_START = \"___start_\";\n     public static final String GENERATE_PKG_STOP = \"___stop_\";\n     public static final String GENERATE_OBJECT_CLASS_PREFIX = \".$value$\";\n+    public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLock\";", "originalCommit": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNzkzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388337933", "body": "Is it correct to do this for all action invocations too? They may or may not be async right?", "bodyText": "Is it correct to do this for all action invocations too? They may or may not be async right?", "bodyHTML": "<p dir=\"auto\">Is it correct to do this for all action invocations too? They may or may not be async right?</p>", "author": "MaryamZi", "createdAt": "2020-03-05T14:44:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,7 +2000,12 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {", "originalCommit": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0ODA2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388348063", "bodyText": "I'll recheck and see.", "author": "dulvinw", "createdAt": "2020-03-05T14:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNzkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNzI3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390207271", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNzkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MTMwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388681309", "body": "Shouldn't this be a recursive check? ", "bodyText": "Shouldn't this be a recursive check?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be a recursive check?</p>", "author": "hasithaa", "createdAt": "2020-03-06T02:21:08Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLock.java", "diffHunk": "@@ -61,11 +61,11 @@ public synchronized void unlock() {\n         }\n     }\n \n-    private boolean isLockFree() {\n+    public boolean isLockFree() {\n         return this.current.isEmpty();\n     }\n \n-    private boolean lockedBySameContext(Strand ctx) {\n+    public boolean lockedBySameContext(Strand ctx) {\n         return this.current.getLast() == ctx;", "originalCommit": "bf71bd19285a6cde0dde76e424f751ca1a727577", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNjQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388716457", "bodyText": "Since we only create a new strand when we hit a worker or start, enough to check the current parent.", "author": "dulvinw", "createdAt": "2020-03-06T05:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MTMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDkxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389230912", "body": "A lock-stmt can be written inside another lock-stmt right? In that case, I think we should maintain the previous `this.withinLockBlock` before setting `this.withinLockBlock` to true at L1237 and reset the previous value here.\r\n\r\nOr something like the following may not fail?\r\n```ballerina\r\nfunction testFunc() {\r\n    lock {\r\n        lock {\r\n            \r\n        }\r\n\r\n        fork {\r\n            worker w1 {\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n```", "bodyText": "A lock-stmt can be written inside another lock-stmt right? In that case, I think we should maintain the previous this.withinLockBlock before setting this.withinLockBlock to true at L1237 and reset the previous value here.\nOr something like the following may not fail?\nfunction testFunc() {\n    lock {\n        lock {\n            \n        }\n\n        fork {\n            worker w1 {\n                \n            }\n        }\n    }\n}", "bodyHTML": "<p dir=\"auto\">A lock-stmt can be written inside another lock-stmt right? In that case, I think we should maintain the previous <code>this.withinLockBlock</code> before setting <code>this.withinLockBlock</code> to true at L1237 and reset the previous value here.</p>\n<p dir=\"auto\">Or something like the following may not fail?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function testFunc() {\n    lock {\n        lock {\n            \n        }\n\n        fork {\n            worker w1 {\n                \n            }\n        }\n    }\n}\"><pre><span class=\"pl-k\">function</span> testFunc() {\n    <span class=\"pl-k\">lock</span> {\n        <span class=\"pl-k\">lock</span> {\n            \n        }\n\n        <span class=\"pl-k\">fork</span> {\n            <span class=\"pl-k\">worker</span> <span class=\"pl-smi\">w1</span> {\n                \n            }\n        }\n    }\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-03-07T05:45:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1232,9 +1233,10 @@ public void visit(BLangWhile whileNode) {\n     @Override\n     public void visit(BLangLock lockNode) {\n \n-        checkExperimentalFeatureValidity(ExperimentalFeatures.LOCK, lockNode.pos);\n         this.checkStatementExecutionValidity(lockNode);\n+        this.withinLockBlock = true;\n         lockNode.body.stmts.forEach(e -> analyzeNode(e, env));\n+        this.withinLockBlock = false;", "originalCommit": "19c003adb986f632f41df2424e569000e50905c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNzAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390207008", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDk2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389230962", "body": "Do we need a separate method? ", "bodyText": "Do we need a separate method?", "bodyHTML": "<p dir=\"auto\">Do we need a separate method?</p>", "author": "MaryamZi", "createdAt": "2020-03-07T05:46:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }\n+        }\n+    }\n+\n+    private void logAsyncCallWithinLockError(BLangInvocation invocationExpr) {", "originalCommit": "19c003adb986f632f41df2424e569000e50905c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389231027", "body": "Shall we switch the checks and return early?\r\n```suggestion\r\n            if (!invocationExpr.async || !this.withinLockBlock) {\r\n                validateActionInvocation(invocationExpr.pos, invocationExpr);\r\n                return;\r\n            }\r\n            // log the error here\r\n```", "bodyText": "Shall we switch the checks and return early?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (invocationExpr.async && this.withinLockBlock) {\n          \n          \n            \n                            logAsyncCallWithinLockError(invocationExpr);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            validateActionInvocation(invocationExpr.pos, invocationExpr);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!invocationExpr.async || !this.withinLockBlock) {\n          \n          \n            \n                            validateActionInvocation(invocationExpr.pos, invocationExpr);\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        // log the error here", "bodyHTML": "<p dir=\"auto\">Shall we switch the checks and return early?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2009\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (invocationExpr<span class=\"pl-k\">.</span>async <span class=\"pl-k x x-first\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>withinLockBlock) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2010\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"x x-first x-last\">logAsyncCallWithinLockError(</span>invocationExpr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2011\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first\">} </span><span class=\"pl-k x\">else</span><span class=\"x x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2012\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first\">    validateActionInvocation(invocationExpr</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">pos, invocationExpr);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2013\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2009\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first x-last\">!</span>invocationExpr<span class=\"pl-k\">.</span>async <span class=\"pl-k x x-first\">||</span><span class=\"x\"> </span><span class=\"pl-k x x-last\">!</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>withinLockBlock) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2010\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"x x-first\">validateActionInvocation(invocationExpr</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">pos, </span>invocationExpr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2011\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"x x-first\">    </span><span class=\"pl-k x\">return</span><span class=\"x x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2012\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2013\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c x x-first\">//</span><span class=\"x x-last\"> log the error here</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-03-07T05:48:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }", "originalCommit": "19c003adb986f632f41df2424e569000e50905c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390206910", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTQ4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389231486", "body": "We can simplify this using a ternary operator?\r\n```suggestion\r\n        dlog.error(invocationExpr.pos, invocationExpr.functionPointerInvocation ?  \r\n                   DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED : \r\n                   DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED);\r\n```", "bodyText": "We can simplify this using a ternary operator?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DiagnosticCode code;\n          \n          \n            \n            \n          \n          \n            \n                    if (invocationExpr.functionPointerInvocation) {\n          \n          \n            \n                        code = DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        code = DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    dlog.error(invocationExpr.pos, code);\n          \n          \n            \n                    dlog.error(invocationExpr.pos, invocationExpr.functionPointerInvocation ?  \n          \n          \n            \n                               DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED : \n          \n          \n            \n                               DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED);", "bodyHTML": "<p dir=\"auto\">We can simplify this using a ternary operator?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DiagnosticCode</span> code;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (invocationExpr<span class=\"pl-k\">.</span>functionPointerInvocation) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            code <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            code <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        dlog<span class=\"pl-k\">.</span>error(invocationExpr<span class=\"pl-k\">.</span>pos, code);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        dlog<span class=\"pl-k\">.</span>error(invocationExpr<span class=\"pl-k\">.</span>pos, invocationExpr<span class=\"pl-k\">.</span>functionPointerInvocation <span class=\"pl-k\">?</span>  </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                   <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED</span> <span class=\"pl-k\">:</span> </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                   <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-03-07T05:57:39Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }\n+        }\n+    }\n+\n+    private void logAsyncCallWithinLockError(BLangInvocation invocationExpr) {\n+        DiagnosticCode code;\n+\n+        if (invocationExpr.functionPointerInvocation) {\n+            code = DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED;\n+        } else {\n+            code = DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED;\n         }\n+\n+        dlog.error(invocationExpr.pos, code);", "originalCommit": "19c003adb986f632f41df2424e569000e50905c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjgwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390206802", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTQ4Ng=="}], "type": "inlineReview"}, {"oid": "64a667ba7e08bd7c0d3d781bac57cf6772ef43dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64a667ba7e08bd7c0d3d781bac57cf6772ef43dc", "message": "Backend changes completed", "committedDate": "2020-03-10T06:52:29Z", "type": "commit"}, {"oid": "61e4b2cf72849c16f7b0ad6240ef75fcb0f0ab09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61e4b2cf72849c16f7b0ad6240ef75fcb0f0ab09", "message": "Fix codeanalyzer for identifying asyncalls within locks in compile time", "committedDate": "2020-03-10T06:52:29Z", "type": "commit"}, {"oid": "553b9c0dd42d25a0bcbede4c583d2bfc675404b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/553b9c0dd42d25a0bcbede4c583d2bfc675404b7", "message": "Fix unit testcases", "committedDate": "2020-03-10T06:52:29Z", "type": "commit"}, {"oid": "661b59bbd0ecb69b745b2fc0e8291d707a8af579", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/661b59bbd0ecb69b745b2fc0e8291d707a8af579", "message": "Fix checkstyle Issue", "committedDate": "2020-03-10T06:52:30Z", "type": "commit"}, {"oid": "16ab7b8ce3556b98ad050fabfda86990c61fe661", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ab7b8ce3556b98ad050fabfda86990c61fe661", "message": "Change throwing logic and revert unncessary bal files", "committedDate": "2020-03-10T06:52:30Z", "type": "commit"}, {"oid": "e6e7a1dda8f7a75fc49b3434d169ba89f8af3293", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6e7a1dda8f7a75fc49b3434d169ba89f8af3293", "message": "Fix review suggestions", "committedDate": "2020-03-10T06:52:30Z", "type": "commit"}, {"oid": "4725ee69896209987b42755e14958c68f12a5641", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4725ee69896209987b42755e14958c68f12a5641", "message": "Fix review suggestions", "committedDate": "2020-03-10T06:52:30Z", "type": "commit"}, {"oid": "4725ee69896209987b42755e14958c68f12a5641", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4725ee69896209987b42755e14958c68f12a5641", "message": "Fix review suggestions", "committedDate": "2020-03-10T06:52:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390150330", "body": "```suggestion\r\n            if (invocationExpr.actionInvocation || !this.withinLockBlock) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!invocationExpr.async || !this.withinLockBlock) {\n          \n          \n            \n                        if (invocationExpr.actionInvocation || !this.withinLockBlock) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first x-last\">!</span>invocationExpr<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">async</span> <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>withinLockBlock) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (invocationExpr<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">actionInvocation</span> <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>withinLockBlock) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-03-10T08:18:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2000,7 +2003,14 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (!invocationExpr.async || !this.withinLockBlock) {", "originalCommit": "642b4610edc44cb14579c96e97368e3c1d21ee83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjczMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390206730", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390150549", "body": "Shall we indent these two lines to align with the beginning of invocationExpr.pos?", "bodyText": "Shall we indent these two lines to align with the beginning of invocationExpr.pos?", "bodyHTML": "<p dir=\"auto\">Shall we indent these two lines to align with the beginning of invocationExpr.pos?</p>", "author": "MaryamZi", "createdAt": "2020-03-10T08:19:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2000,7 +2003,14 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (!invocationExpr.async || !this.withinLockBlock) {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+                return;\n+            }\n+\n+            dlog.error(invocationExpr.pos, invocationExpr.functionPointerInvocation ? \n+            DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED : \n+            DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED);", "originalCommit": "642b4610edc44cb14579c96e97368e3c1d21ee83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1e5eb6e4d054bc818f71e25e274951fd341c86b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e5eb6e4d054bc818f71e25e274951fd341c86b", "message": "Fix review suggestions", "committedDate": "2020-03-10T08:41:30Z", "type": "forcePushed"}, {"oid": "73a27b8abc638044d10051166563f13e6a0abf4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73a27b8abc638044d10051166563f13e6a0abf4d", "message": "Fix review suggestions", "committedDate": "2020-03-10T08:42:49Z", "type": "commit"}, {"oid": "73a27b8abc638044d10051166563f13e6a0abf4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73a27b8abc638044d10051166563f13e6a0abf4d", "message": "Fix review suggestions", "committedDate": "2020-03-10T08:42:49Z", "type": "forcePushed"}]}