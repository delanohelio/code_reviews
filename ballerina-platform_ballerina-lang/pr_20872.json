{"pr_number": 20872, "pr_title": "Fix 'function not defined' error", "pr_author": "gimantha", "pr_createdAt": "2020-02-05T18:22:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872", "timeline": [{"oid": "88ae256169aa20f5657f9e10299f59c417b2cea2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88ae256169aa20f5657f9e10299f59c417b2cea2", "message": "Fix anonymous object function access", "committedDate": "2020-02-05T18:20:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375642341", "body": "```suggestion\r\n                expType.tsymbol.name, expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            expType.tsymbol.name,expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);\n          \n          \n            \n                            expType.tsymbol.name, expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>name,expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>pkgID, <span class=\"pl-c1\">null</span>, expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>scope<span class=\"pl-k\">.</span>owner);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>name,<span class=\"x x-first x-last\"> </span>expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>pkgID, <span class=\"pl-c1\">null</span>, expType<span class=\"pl-k\">.</span>tsymbol<span class=\"pl-k\">.</span>scope<span class=\"pl-k\">.</span>owner);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-02-06T05:07:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -606,9 +608,8 @@ private BInvokableType getMatchingFunctionBoundType(BInvokableType expType, Symb\n \n     private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, HashSet<BType> resolvedTypes) {\n \n-        BObjectTypeSymbol actObjectSymbol = (BObjectTypeSymbol) Symbols.createObjectSymbol(0, expType.tsymbol.name,\n-                                                                                           expType.tsymbol.pkgID, null,\n-                                                                                           expType.tsymbol.scope.owner);\n+        BObjectTypeSymbol actObjectSymbol = (BObjectTypeSymbol) Symbols.createObjectSymbol(expType.tsymbol.flags,\n+                expType.tsymbol.name,expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);", "originalCommit": "88ae256169aa20f5657f9e10299f59c417b2cea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375642581", "body": "Do we need a separate variable for this?", "bodyText": "Do we need a separate variable for this?", "bodyHTML": "<p dir=\"auto\">Do we need a separate variable for this?</p>", "author": "MaryamZi", "createdAt": "2020-02-06T05:08:24Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -626,11 +627,14 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n             BInvokableType matchType = getMatchingFunctionBoundType(expFunc.type, env, resolvedTypes);\n             BInvokableSymbol invokableSymbol = new BInvokableSymbol(expFunc.symbol.tag, expFunc.symbol.flags,\n                     expFunc.symbol.name, env.enclPkg.packageID, matchType, env.scope.owner);\n+            invokableSymbol.retType = invokableSymbol.getType().retType;\n             matchType.tsymbol = Symbols.createTypeSymbol(SymTag.FUNCTION_TYPE, invokableSymbol.flags, Names.EMPTY,\n                                                          env.enclPkg.symbol.pkgID, invokableSymbol.type,\n                                                          env.scope.owner);\n             actObjectSymbol.attachedFuncs.add(new BAttachedFunction(expFunc.funcName, invokableSymbol, matchType));\n-            actObjectSymbol.methodScope.define(expFunc.funcName, invokableSymbol);\n+            String funcName = Symbols.getAttachedFuncSymbolName(actObjectSymbol.type.tsymbol.name.value,", "originalCommit": "88ae256169aa20f5657f9e10299f59c417b2cea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2NDM2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375664361", "bodyText": "seems bit lengthy... otherwise can put in the same line", "author": "gimantha", "createdAt": "2020-02-06T06:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjU4MQ=="}], "type": "inlineReview"}, {"oid": "9617b2256683288982c21f2424ae5fd25336bb11", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9617b2256683288982c21f2424ae5fd25336bb11", "message": "Fix iterator function in langlib collections", "committedDate": "2020-02-06T06:46:36Z", "type": "commit"}, {"oid": "5c92148f661c951af959ac38c1f3a2d4102b0e17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c92148f661c951af959ac38c1f3a2d4102b0e17", "message": "Avoid star imports", "committedDate": "2020-02-06T08:15:10Z", "type": "commit"}, {"oid": "a342744281badde53d0b7a99551235c7294f24e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a342744281badde53d0b7a99551235c7294f24e3", "message": "Avoid star imports", "committedDate": "2020-02-06T08:50:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5Njk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375696945", "body": "`get(String fieldName)` seems to be deprecated? ", "bodyText": "get(String fieldName) seems to be deprecated?", "bodyHTML": "<p dir=\"auto\"><code>get(String fieldName)</code> seems to be deprecated?</p>", "author": "MaryamZi", "createdAt": "2020-02-06T08:31:40Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +59,34 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(\"m\");", "originalCommit": "5c92148f661c951af959ac38c1f3a2d4102b0e17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxMjA4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375712080", "bodyText": "will fix it.", "author": "gimantha", "createdAt": "2020-02-06T09:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5Njk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwMTIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375701237", "body": "IIUC, the last parameter `typeFlags` indicates if the record is `anydata`, `pure` (and although irrelevant here, if nillable) right? Since this method can be called with any array/tuple, I guess we have to iterate through the member type(s) and figure out the flags here?\r\n\r\nMay have to update wherever applicable.", "bodyText": "IIUC, the last parameter typeFlags indicates if the record is anydata, pure (and although irrelevant here, if nillable) right? Since this method can be called with any array/tuple, I guess we have to iterate through the member type(s) and figure out the flags here?\nMay have to update wherever applicable.", "bodyHTML": "<p dir=\"auto\">IIUC, the last parameter <code>typeFlags</code> indicates if the record is <code>anydata</code>, <code>pure</code> (and although irrelevant here, if nillable) right? Since this method can be called with any array/tuple, I guess we have to iterate through the member type(s) and figure out the flags here?</p>\n<p dir=\"auto\">May have to update wherever applicable.</p>", "author": "MaryamZi", "createdAt": "2020-02-06T08:42:35Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +59,34 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(\"m\");\n         if (arrIterator == null) {\n-            arrIterator = ((ArrayValue) m.get(\"m\")).getIterator();\n+            arrIterator = arr.getIterator();\n             m.addNativeData(\"&iterator&\", arrIterator);\n         }\n \n         if (arrIterator.hasNext()) {\n             Object element =  arrIterator.next();\n-            BFunctionType nextFuncType = m.getType().getAttachedFunctions()[0].type;\n-            BRecordType recordType = (BRecordType) ((BUnionType) nextFuncType.retType).getMemberTypes().get(0);\n+            Map<String, BField> fields = new HashMap<>();\n+            if (arr.getType().getTag() == TypeTags.ARRAY_TAG) {\n+                fields.put(\"value\", new BField(arr.getElementType(), \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            } else {\n+                BTupleType tupleType = (BTupleType) arr.getType();\n+                LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+                if (tupleType.getRestType() != null) {\n+                    types.add(tupleType.getRestType());\n+                }\n+                BType unionType;\n+                if (types.size() == 1) {\n+                    unionType = types.iterator().next();\n+                } else {\n+                    unionType = new BUnionType(new ArrayList<>(types));\n+                }\n+                fields.put(\"value\", new BField(unionType, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            }\n+\n+            BRecordType recordType = new BRecordType(\"$$returnType$$\", null, 0, fields,\n+                    null, true, TypeFlags.PURETYPE);", "originalCommit": "5c92148f661c951af959ac38c1f3a2d4102b0e17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwMjE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375702179", "body": "* import?", "bodyText": "import?", "bodyHTML": "<ul dir=\"auto\">\n<li>import?</li>\n</ul>", "author": "MaryamZi", "createdAt": "2020-02-06T08:44:42Z", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Next.java", "diffHunk": "@@ -20,9 +20,8 @@\n \n import org.ballerinalang.jvm.BallerinaValues;\n import org.ballerinalang.jvm.scheduling.Strand;\n-import org.ballerinalang.jvm.types.BFunctionType;\n-import org.ballerinalang.jvm.types.BRecordType;\n-import org.ballerinalang.jvm.types.BUnionType;\n+import org.ballerinalang.jvm.types.*;", "originalCommit": "5c92148f661c951af959ac38c1f3a2d4102b0e17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4943fd6e420800f3866b0b76db27387f09fb6ba7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4943fd6e420800f3866b0b76db27387f09fb6ba7", "message": "Refactor code", "committedDate": "2020-02-06T11:45:42Z", "type": "commit"}, {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29481aa0e2555d725418ea3151bad7ce275aaa5e", "message": "Refactor code", "committedDate": "2020-02-06T11:48:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODEwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376208103", "body": "Should we use https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/StringUtils.java#L112 instead?", "bodyText": "Should we use https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/StringUtils.java#L112 instead?", "bodyHTML": "<p dir=\"auto\">Should we use <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/StringUtils.java#L112\">https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/StringUtils.java#L112</a> instead?</p>", "author": "MaryamZi", "createdAt": "2020-02-07T04:19:24Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -50,14 +57,17 @@ public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue xmlIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n \n         if (xmlIterator == null) {\n-            xmlIterator = ((XMLValue) m.get(\"m\")).getIterator();\n+            xmlIterator = ((XMLValue) m.get(new BmpStringValue(\"m\"))).getIterator();", "originalCommit": "29481aa0e2555d725418ea3151bad7ce275aaa5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTY3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219674", "bodyText": "fixed", "author": "gimantha", "createdAt": "2020-02-07T05:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDc4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376210780", "body": "Still not sure if this belongs here. IMO, we rarely create a type at runtime. Since the type creation logic is iterator specific, shall we move this somewhere else? We can maybe combine both methods then to have a single method that does both checks.", "bodyText": "Still not sure if this belongs here. IMO, we rarely create a type at runtime. Since the type creation logic is iterator specific, shall we move this somewhere else? We can maybe combine both methods then to have a single method that does both checks.", "bodyHTML": "<p dir=\"auto\">Still not sure if this belongs here. IMO, we rarely create a type at runtime. Since the type creation logic is iterator specific, shall we move this somewhere else? We can maybe combine both methods then to have a single method that does both checks.</p>", "author": "MaryamZi", "createdAt": "2020-02-07T04:34:36Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/TypeFlags.java", "diffHunk": "@@ -53,4 +53,18 @@ public static int addToMask(int mask, int... flags) {\n         }\n         return mask;\n     }\n+\n+    public static int getAnydataTypeFlag(BType type) {", "originalCommit": "29481aa0e2555d725418ea3151bad7ce275aaa5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219763", "bodyText": "Added a new jvm class IteratorUtils and added thos two methods", "author": "gimantha", "createdAt": "2020-02-07T05:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMTMwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376211306", "body": "With this approach, every time `next()` is called all these checks are done and a new type is created right? Can't we refactor this logic to maybe have the type be part of the iterator or at least add it as native data?", "bodyText": "With this approach, every time next() is called all these checks are done and a new type is created right? Can't we refactor this logic to maybe have the type be part of the iterator or at least add it as native data?", "bodyHTML": "<p dir=\"auto\">With this approach, every time <code>next()</code> is called all these checks are done and a new type is created right? Can't we refactor this logic to maybe have the type be part of the iterator or at least add it as native data?</p>", "author": "MaryamZi", "createdAt": "2020-02-07T04:37:33Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +60,35 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(new BmpStringValue(\"m\"));\n         if (arrIterator == null) {\n-            arrIterator = ((ArrayValue) m.get(\"m\")).getIterator();\n+            arrIterator = arr.getIterator();\n             m.addNativeData(\"&iterator&\", arrIterator);\n         }\n \n         if (arrIterator.hasNext()) {\n             Object element =  arrIterator.next();\n-            BFunctionType nextFuncType = m.getType().getAttachedFunctions()[0].type;\n-            BRecordType recordType = (BRecordType) ((BUnionType) nextFuncType.retType).getMemberTypes().get(0);\n+            Map<String, BField> fields = new HashMap<>();\n+            BType type;\n+            int typeFlags = 0;\n+            if (arr.getType().getTag() == TypeTags.ARRAY_TAG) {\n+                type = arr.getElementType();\n+            } else {\n+                BTupleType tupleType = (BTupleType) arr.getType();\n+                LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+                if (tupleType.getRestType() != null) {\n+                    types.add(tupleType.getRestType());\n+                }\n+                if (types.size() == 1) {\n+                    type = types.iterator().next();\n+                } else {\n+                    type = new BUnionType(new ArrayList<>(types));\n+                }\n+            }\n+\n+            fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            BRecordType recordType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "originalCommit": "29481aa0e2555d725418ea3151bad7ce275aaa5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219954", "bodyText": "Can we make the type be part of the iterator, because the type is always a typeParam?", "author": "gimantha", "createdAt": "2020-02-07T05:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMTMwNg=="}], "type": "inlineReview"}, {"oid": "c8250a462af3c03caaeae2d516940d1d05d2ebd4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8250a462af3c03caaeae2d516940d1d05d2ebd4", "message": "Do review changes", "committedDate": "2020-02-07T05:29:04Z", "type": "commit"}, {"oid": "027cf22850cba9fffeff92a13ee4bc336fbdc7ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/027cf22850cba9fffeff92a13ee4bc336fbdc7ab", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-anonymous-func", "committedDate": "2020-02-07T06:07:58Z", "type": "commit"}, {"oid": "81f1c22d1f3f5762468186d68c3522a9b76ac2d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f1c22d1f3f5762468186d68c3522a9b76ac2d1", "message": "create only one instance of next return type", "committedDate": "2020-02-07T08:53:03Z", "type": "commit"}, {"oid": "369cbd40bac6d69fd51ade00df7c0535ba62849e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/369cbd40bac6d69fd51ade00df7c0535ba62849e", "message": "Make initializing iterator return type loose", "committedDate": "2020-02-09T07:13:25Z", "type": "commit"}, {"oid": "f1e3518cabd1d9e220b751cb99090f83671674a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e3518cabd1d9e220b751cb99090f83671674a7", "message": "Fix checkstyle issues", "committedDate": "2020-02-09T07:17:33Z", "type": "commit"}, {"oid": "34d59c4d438e257f8b672b880ade53e398d93031", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34d59c4d438e257f8b672b880ade53e398d93031", "message": "Make the iterator next functions return type reusable", "committedDate": "2020-02-09T07:18:10Z", "type": "commit"}, {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/378c6a6931b550136c50897bdf784ff5482d2aa4", "message": "Refactor code", "committedDate": "2020-02-09T07:27:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzMyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376867329", "body": "```suggestion\r\n * @since 1.2.0\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 1.2\n          \n          \n            \n             * @since 1.2.0", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@since</span> <span class=\"pl-c1\">1.2</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@since</span> <span class=\"pl-c1\">1.2</span><span class=\"pl-k x x-first\">.</span><span class=\"pl-c1 x x-last\">0</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-02-10T04:48:40Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzkwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376867901", "body": "Since we have a separate class now, shall we combine these and move the masking logic also here to a single method?", "bodyText": "Since we have a separate class now, shall we combine these and move the masking logic also here to a single method?", "bodyHTML": "<p dir=\"auto\">Since we have a separate class now, shall we combine these and move the masking logic also here to a single method?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T04:52:07Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2\n+ */\n+public class IteratorUtils {\n+    public static int getAnydataTypeFlag(BType type) {\n+        if (type.isAnydata()) {\n+            return TypeFlags.ANYDATA;\n+        }\n+        return 0;\n+    }\n+\n+    public static int getPureTypeTypeFlag(BType type) {\n+        if (type.isPureType()) {\n+            return TypeFlags.PURETYPE;\n+        }\n+        return 0;\n+    }", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MDk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376880954", "bodyText": "moved to a single method.", "author": "gimantha", "createdAt": "2020-02-10T06:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODAyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868021", "body": "Why are we setting 0 for type flags here? XML and string are both anydata and pure?", "bodyText": "Why are we setting 0 for type flags here? XML and string are both anydata and pure?", "bodyHTML": "<p dir=\"auto\">Why are we setting 0 for type flags here? XML and string are both anydata and pure?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T04:52:57Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -62,6 +63,11 @@\n     public static BType typePureType = new BUnionType(Arrays.asList(typeAnydata, typeError));\n     public static BType typeAllType = new BUnionType(Arrays.asList(typeAny, typeError));\n     public static BType typeHandle = new BHandleType(TypeConstants.HANDLE_TNAME, new BPackage(null, null, null));\n+    public static BRecordType stringItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, TypeFlags.asMask(TypeFlags.ANYDATA,\n+            TypeFlags.PURETYPE));\n+    public static BRecordType xmlItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, 0);", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTgyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376881821", "bodyText": "fixed", "author": "gimantha", "createdAt": "2020-02-10T06:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODE5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868193", "body": "Can be combined?", "bodyText": "Can be combined?", "bodyHTML": "<p dir=\"auto\">Can be combined?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T04:54:18Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {\n+        HashMap<String, BField> valueFields = new HashMap<>();\n+        valueFields.put(\"value\", new BField(fieldType, \"value\",\n+                Flags.PUBLIC + Flags.REQUIRED));", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MzMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376883310", "bodyText": "fixed", "author": "gimantha", "createdAt": "2020-02-10T06:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868246", "body": "Shouldn't this be in IteratorUtils?", "bodyText": "Shouldn't this be in IteratorUtils?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be in IteratorUtils?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T04:54:47Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MzIzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376883236", "bodyText": "moved", "author": "gimantha", "createdAt": "2020-02-10T06:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868395", "body": "Can't we use the constant for \"$$returnType$$\" here?", "bodyText": "Can't we use the constant for \"$$returnType$$\" here?", "bodyHTML": "<p dir=\"auto\">Can't we use the constant for \"$$returnType$$\" here?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T04:55:49Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/AbstractArrayValue.java", "diffHunk": "@@ -309,6 +321,37 @@ public void setLength(long length) {\n         size = newLength;\n     }\n \n+    protected void initializeIteratorNextReturnType() {\n+        Map<String, BField> fields = new HashMap<>();\n+        BType type;\n+        if (getType().getTag() == TypeTags.ARRAY_TAG) {\n+            type = getElementType();\n+        } else {\n+            BTupleType tupleType = (BTupleType) getType();\n+            LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+            if (tupleType.getRestType() != null) {\n+                types.add(tupleType.getRestType());\n+            }\n+            if (types.size() == 1) {\n+                type = types.iterator().next();\n+            } else {\n+                type = new BUnionType(new ArrayList<>(types));\n+            }\n+        }\n+\n+        fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+        iteratorNextReturnType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "originalCommit": "378c6a6931b550136c50897bdf784ff5482d2aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NTE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376885173", "bodyText": "fixed", "author": "gimantha", "createdAt": "2020-02-10T06:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODM5NQ=="}], "type": "inlineReview"}, {"oid": "fa326a6a2de23099ea0b0f87116936fb1d5d523c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa326a6a2de23099ea0b0f87116936fb1d5d523c", "message": "Update bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-10T05:19:36Z", "type": "commit"}, {"oid": "6681361100bb0f477585b469336d189b6a64eaa2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6681361100bb0f477585b469336d189b6a64eaa2", "message": "Fix git review issues", "committedDate": "2020-02-10T06:35:03Z", "type": "commit"}, {"oid": "cf9156e29ef309b9ccc05df34a32d99288cf9e27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf9156e29ef309b9ccc05df34a32d99288cf9e27", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-anonymous-func\n\n# Conflicts:\n#\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/StreamValue.java", "committedDate": "2020-02-10T06:39:56Z", "type": "commit"}, {"oid": "b5ef669c90aff5e9fa658c732a0ca5166ccaff5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5ef669c90aff5e9fa658c732a0ca5166ccaff5a", "message": "Merge branch 'fix-##20871' of https://github.com/gimantha/ballerina-lang into fix-anonymous-func", "committedDate": "2020-02-10T06:40:28Z", "type": "commit"}, {"oid": "a52fb4749d05eba4fb89c92bef31b3b1ae01c15a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a52fb4749d05eba4fb89c92bef31b3b1ae01c15a", "message": "Extract common logic to IteratorUtils", "committedDate": "2020-02-10T08:12:36Z", "type": "commit"}, {"oid": "a3a1aeadf2ced38cf1c390f18056719bd37cb41f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3a1aeadf2ced38cf1c390f18056719bd37cb41f", "message": "Remove unused code", "committedDate": "2020-02-10T08:13:16Z", "type": "commit"}, {"oid": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c84ab5d0411de06d21af2686ba0814dbd3e20b5", "message": "Change function name", "committedDate": "2020-02-10T08:19:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjgxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376916816", "body": "Something that's anydata is always pure right? I guess we can combine this as \r\n\r\n```java\r\n        if (isAnydata) {\r\n            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\r\n        }\r\n```\r\n\r\nWe can then remove the `isPureType` and `isAnydata` variables too, since we won't be reusing them? ", "bodyText": "Something that's anydata is always pure right? I guess we can combine this as\n        if (isAnydata) {\n            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n        }\nWe can then remove the isPureType and isAnydata variables too, since we won't be reusing them?", "bodyHTML": "<p dir=\"auto\">Something that's anydata is always pure right? I guess we can combine this as</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (isAnydata) {\n            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n        }\"><pre>        <span class=\"pl-k\">if</span> (isAnydata) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">TypeFlags</span><span class=\"pl-k\">.</span>asMask(<span class=\"pl-smi\">TypeFlags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>PURETYPE</span>, <span class=\"pl-smi\">TypeFlags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ANYDATA</span>);\n        }</pre></div>\n<p dir=\"auto\">We can then remove the <code>isPureType</code> and <code>isAnydata</code> variables too, since we won't be reusing them?</p>", "author": "MaryamZi", "createdAt": "2020-02-10T08:22:25Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {\n+        boolean isPureType = type.isPureType();\n+        boolean isAnydata = type.isAnydata();\n+\n+        if (isPureType && isAnydata) {\n+            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n+        }\n+\n+        if (isAnydata) {\n+            return TypeFlags.ANYDATA;\n+        }", "originalCommit": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376924748", "bodyText": "fixed", "author": "gimantha", "createdAt": "2020-02-10T08:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNzM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376917364", "body": "Shall we add documentation for this method, since this is an iterator specific scenario? (e.g., for an ordinary scenario we would have to check the nillable flag too)", "bodyText": "Shall we add documentation for this method, since this is an iterator specific scenario? (e.g., for an ordinary scenario we would have to check the nillable flag too)", "bodyHTML": "<p dir=\"auto\">Shall we add documentation for this method, since this is an iterator specific scenario? (e.g., for an ordinary scenario we would have to check the nillable flag too)</p>", "author": "MaryamZi", "createdAt": "2020-02-10T08:23:43Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {", "originalCommit": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDgxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376924817", "bodyText": "sure.. added", "author": "gimantha", "createdAt": "2020-02-10T08:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNzM2NA=="}], "type": "inlineReview"}, {"oid": "4982c5a10c82044c881b93e1e0d5ec89818a4576", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4982c5a10c82044c881b93e1e0d5ec89818a4576", "message": "Refactor code and add comments", "committedDate": "2020-02-10T08:49:54Z", "type": "commit"}, {"oid": "2d819cc2d7445760ccc1325dead3ccade6721fc8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d819cc2d7445760ccc1325dead3ccade6721fc8", "message": "Refactor code and add comments", "committedDate": "2020-02-10T08:50:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNDkzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r378024930", "body": "the function name is a generic one and doesn't explain what it does. ", "bodyText": "the function name is a generic one and doesn't explain what it does.", "bodyHTML": "<p dir=\"auto\">the function name is a generic one and doesn't explain what it does.</p>", "author": "hasithaa", "createdAt": "2020-02-12T03:35:07Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    /**\n+     * Returns the pure type and anydata type flags if they are available, otherwise 0. This is only used to check if\n+     * the record type returned fro the next function of an iterator, is a pure type or anydata.\n+     * @param type The type being checked\n+     * @return The type flags\n+     */\n+    public static int getTypeFlags(BType type) {", "originalCommit": "2d819cc2d7445760ccc1325dead3ccade6721fc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}