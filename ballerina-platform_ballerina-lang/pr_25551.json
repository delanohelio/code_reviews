{"pr_number": 25551, "pr_title": "Add 'const' support for specifying array length", "pr_author": "suleka96", "pr_createdAt": "2020-09-01T19:48:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551", "merge_commit": "4c7d43833cd2df4895cf67ab5aed5b7854b9706e", "timeline": [{"oid": "6ec7fd2abeb747a3ace69cad45eb8da54a87ed8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ec7fd2abeb747a3ace69cad45eb8da54a87ed8c", "message": "Add diagnostic codes for errors.", "committedDate": "2020-09-01T18:21:42Z", "type": "commit"}, {"oid": "2dce3daf4f9ea553ef657f0f5f6b773c9d9bed31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dce3daf4f9ea553ef657f0f5f6b773c9d9bed31", "message": "Change int array in BLangArrayType to BLangExpression array.", "committedDate": "2020-09-01T18:31:43Z", "type": "commit"}, {"oid": "8eb2058d7d9eba6cbc88e640a9b70999eb3d1ed1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8eb2058d7d9eba6cbc88e640a9b70999eb3d1ed1", "message": "Update BLangNodeTransformer to preserve const expression.", "committedDate": "2020-09-01T18:58:39Z", "type": "commit"}, {"oid": "4fa3e700a348f43785763ce40e6b566bab8e5789", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fa3e700a348f43785763ce40e6b566bab8e5789", "message": "Update SymbolResolver to resolve const expression.", "committedDate": "2020-09-01T19:35:55Z", "type": "commit"}, {"oid": "86f189e70d04eb008c4524fc5758f40f2e50a7a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86f189e70d04eb008c4524fc5758f40f2e50a7a8", "message": "Add error messages in compiler properties.", "committedDate": "2020-09-01T19:41:14Z", "type": "commit"}, {"oid": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "message": "Fix CheckStyles issues.", "committedDate": "2020-09-01T20:29:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5MTczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481691736", "body": "Shall we remove this extra line?", "bodyText": "Shall we remove this extra line?", "bodyHTML": "<p dir=\"auto\">Shall we remove this extra line?</p>", "author": "MaryamZi", "createdAt": "2020-09-02T04:56:39Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.model.tree.types;\n \n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+\n+", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\nindex b3654817f46..93dbb9b0d79 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n", "chunk": "@@ -18,8 +18,6 @@\n package org.ballerinalang.model.tree.types;\n \n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n-\n-\n /**\n  * {@code ArrayTypeNode} represents an array type node in Ballerina\n  * array type node can be of multiple dimensions and each dimension can be sealed with a specific size\n", "next_change": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\nindex 93dbb9b0d79..307d16c2418 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n", "chunk": "@@ -18,6 +18,7 @@\n package org.ballerinalang.model.tree.types;\n \n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+\n /**\n  * {@code ArrayTypeNode} represents an array type node in Ballerina\n  * array type node can be of multiple dimensions and each dimension can be sealed with a specific size\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5ODQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481698491", "body": "Can't we remove the stream and just do\r\n\r\n```suggestion\r\n        arrayTypeNode.sizes = sizes.toArray(new BLangExpression[0]);\r\n```\r\n\r\nWe try to avoid streams due to performance impacts.", "bodyText": "Can't we remove the stream and just do\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    arrayTypeNode.sizes = sizes.stream().toArray(BLangExpression[]::new);\n          \n          \n            \n                    arrayTypeNode.sizes = sizes.toArray(new BLangExpression[0]);\n          \n      \n    \n    \n  \n\nWe try to avoid streams due to performance impacts.", "bodyHTML": "<p dir=\"auto\">Can't we remove the stream and just do</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        arrayTypeNode<span class=\"pl-k\">.</span>sizes <span class=\"pl-k\">=</span> sizes<span class=\"pl-k\">.</span><span class=\"x x-first\">stream()</span><span class=\"pl-k x x-last\">.</span>toArray(<span class=\"pl-k\">BLangExpression</span>[<span class=\"x x-first\">]</span><span class=\"pl-k x\">::</span><span class=\"pl-k x x-last\">new</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        arrayTypeNode<span class=\"pl-k\">.</span>sizes <span class=\"pl-k\">=</span> sizes<span class=\"pl-k\">.</span>toArray(<span class=\"pl-k x x-first\">new</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">BLangExpression</span>[<span class=\"pl-c1 x x-first\">0</span><span class=\"x x-last\">]</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We try to avoid streams due to performance impacts.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T05:03:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3071,7 +3071,7 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         arrayTypeNode.pos = position;\n         arrayTypeNode.elemtype = createTypeNode(arrayTypeDescriptorNode.memberTypeDesc());\n         arrayTypeNode.dimensions = dimensions;\n-        arrayTypeNode.sizes = sizes.stream().mapToInt(val -> val).toArray();\n+        arrayTypeNode.sizes = sizes.stream().toArray(BLangExpression[]::new);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 0593af6b259..45340e8d20d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n", "chunk": "@@ -3071,7 +3071,7 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n         arrayTypeNode.pos = position;\n         arrayTypeNode.elemtype = createTypeNode(arrayTypeDescriptorNode.memberTypeDesc());\n         arrayTypeNode.dimensions = dimensions;\n-        arrayTypeNode.sizes = sizes.stream().toArray(BLangExpression[]::new);\n+        arrayTypeNode.sizes = sizes.toArray(new BLangExpression[0]);\n         return arrayTypeNode;\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcwMTgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481701819", "body": "Extra line.", "bodyText": "Extra line.", "bodyHTML": "<p dir=\"auto\">Extra line.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T05:06:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -116,10 +117,11 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n+import static java.lang.String.format;\n+", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -117,12 +117,10 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n-import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n-import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n import static java.lang.String.format;\n-\n-\n+import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n+import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n+import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n /**\n  * @since 0.94\n  */\n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -117,10 +117,10 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n+import static java.lang.String.format;\n /**\n  * @since 0.94\n  */\n", "next_change": {"commit": "c93857f69d50f63d8b1903c0c0b5d0d5aec5f9c6", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex a9b975d504d..9c2160c4d4e 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -117,10 +117,10 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n-import static java.lang.String.format;\n /**\n  * @since 0.94\n  */\n", "next_change": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 9c2160c4d4e..1e890279453 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -121,6 +121,7 @@ import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n+\n /**\n  * @since 0.94\n  */\n", "next_change": {"commit": "5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 1e890279453..20e3f8a302b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -108,16 +108,20 @@ import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import static java.lang.String.format;\n+import static org.ballerinalang.model.symbols.SymbolOrigin.SOURCE;\n+import static org.ballerinalang.model.symbols.SymbolOrigin.VIRTUAL;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyMDc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481720798", "body": "This logic is repeated for the valid scenarios, right? I think we can avoid repeating this by returning if there is an error, and then moving this out of the if-else blocks as it was originally. ", "bodyText": "This logic is repeated for the valid scenarios, right? I think we can avoid repeating this by returning if there is an error, and then moving this out of the if-else blocks as it was originally.", "bodyHTML": "<p dir=\"auto\">This logic is repeated for the valid scenarios, right? I think we can avoid repeating this by returning if there is an error, and then moving this out of the if-else blocks as it was originally.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T05:26:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481730310", "body": "Shall we check by node kind instead of using the instanceof check?\r\n\r\nI believe in this case we'll have to check for NUMERIC_LITERAL.\r\n\r\n```suggestion\r\n                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\r\n```", "bodyText": "Shall we check by node kind instead of using the instanceof check?\nI believe in this case we'll have to check for NUMERIC_LITERAL.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (size instanceof BLangLiteral) {\n          \n          \n            \n                            if (size.getKind() == NodeKind.NUMERIC_LITERAL) {", "bodyHTML": "<p dir=\"auto\">Shall we check by node kind instead of using the instanceof check?</p>\n<p dir=\"auto\">I believe in this case we'll have to check for NUMERIC_LITERAL.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (size<span class=\"x x-first\"> </span><span class=\"pl-k x\">instanceof</span><span class=\"x\"> </span><span class=\"pl-smi x x-last\">BLangLiteral</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">if</span> (size<span class=\"pl-k x x-first\">.</span><span class=\"x\">getKind() </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-smi x\">NodeKind</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">NUMERIC_LITERAL</span></span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-09-02T05:36:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTM3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482599373", "bodyText": "Is there a specific reason for this? Because if I don't specifically check for the BLangLiteral type in the if statement, my current logic won't stand as the else block assumes that it is receiving BLangLiteral Type.", "author": "suleka96", "createdAt": "2020-09-02T23:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4Njk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482686991", "bodyText": "BLangLiteral represents simple literals in Ballerina while BLangNumericLiteral which extends BLangLiteral  represents the numeric literals.\nThe NodeKind for BLangLiteral is LITERAL and for BLangNumericLiteral is NUMERIC_LITERAL.\nSo if size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL evaluates to true, you can assume this to be a BLangLiteral within the if block and cast it accordingly.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (size instanceof BLangLiteral) {\n          \n          \n            \n                            NodeKind nodeKind = size.getKind();\n          \n          \n            \n                            if (nodeKind == NodeKind.LITERAL || nodeKind == NodeKind.NUMERIC_LITERAL) {\n          \n      \n    \n    \n  \n\nThis would do a simple equality check for an enum.", "author": "MaryamZi", "createdAt": "2020-09-03T03:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjQ2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481732462", "body": "Shall we extract `(Integer) (((BLangLiteral) size).getValue()` out to a variable since we seem to be using it multiple times.\r\n\r\nWill also improve readability, IMO.", "bodyText": "Shall we extract (Integer) (((BLangLiteral) size).getValue() out to a variable since we seem to be using it multiple times.\nWill also improve readability, IMO.", "bodyHTML": "<p dir=\"auto\">Shall we extract <code>(Integer) (((BLangLiteral) size).getValue()</code> out to a variable since we seem to be using it multiple times.</p>\n<p dir=\"auto\">Will also improve readability, IMO.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T05:38:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481737753", "body": "We can check `==` here. With the early returns on error as suggested previously, by swapping the conditions we can remove the else blocks.\r\n\r\n```suggestion\r\n                    if (symTable.notFoundSymbol == sizeSymbol) {\r\n                        // log error, set resultType and return\r\n                    }\r\n                    \r\n                    if (sizeSymbol.tag != SymTag.CONSTANT) {\r\n                        // log error, set resultType and return\r\n                    }\r\n                    \r\n                    BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\r\n                    if (lengthLiteralType.tag != TypeTags.INT) {\r\n                        // log error, set resultType and return\r\n                    }\r\n                    \r\n                    // actual length logic    \r\n```", "bodyText": "We can check == here. With the early returns on error as suggested previously, by swapping the conditions we can remove the else blocks.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n          \n          \n            \n                                if (symTable.notFoundSymbol == sizeSymbol) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                if (sizeSymbol.tag != SymTag.CONSTANT) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n          \n          \n            \n                                if (lengthLiteralType.tag != TypeTags.INT) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                // actual length logic", "bodyHTML": "<p dir=\"auto\">We can check <code>==</code> here. With the early returns on error as suggested previously, by swapping the conditions we can remove the else blocks.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first\">!</span><span class=\"x x-last\">(</span>symTable<span class=\"pl-k\">.</span>notFoundSymbol<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">equals(</span>sizeSymbol<span class=\"x x-first x-last\">))</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (symTable<span class=\"pl-k\">.</span>notFoundSymbol<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x x-last\"> </span>sizeSymbol) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-c\"><span class=\"pl-c\">//</span> log error, set resultType and return</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (sizeSymbol<span class=\"pl-k\">.</span>tag <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">SymTag</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONSTANT</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-c\"><span class=\"pl-c\">//</span> log error, set resultType and return</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">BType</span> lengthLiteralType <span class=\"pl-k\">=</span> ((<span class=\"pl-smi\">BConstantSymbol</span>) sizeSymbol)<span class=\"pl-k\">.</span>literalType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (lengthLiteralType<span class=\"pl-k\">.</span>tag <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INT</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-c\"><span class=\"pl-c\">//</span> log error, set resultType and return</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-c\"><span class=\"pl-c\">//</span> actual length logic    </span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-09-02T05:43:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1MzUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482353508", "bodyText": "The visit(BLangArrayType arrayTypeNode) function does not return anything, so every if will get evaluated if I do it this way. So won't having the else block be a better approach?", "author": "suleka96", "createdAt": "2020-09-02T19:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4Nzk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482687954", "bodyText": "You can just do return;.", "author": "MaryamZi", "createdAt": "2020-09-03T03:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4OTk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482689969", "bodyText": "Or in this case, because it is within a for loop, and we may want to analyze the rest of the dimensions even if one results in an error, we can do a continue; maybe. I guess we'll have to maintain if at least one dimension was erroneous to set the final resultant type.", "author": "MaryamZi", "createdAt": "2020-09-03T04:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczOTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482739035", "bodyText": "So just to clarify, if we consider an array with 2 dimension. Say the 1st one didn't go through the happy path, so we log the error, update an error flag and continue. Then say if the 2nd dimension goes through the happy path, should the resultType  be set to an error type regardless or should the below code be executed for that loop?\narrayTypeSymbol.type = arrType;\nresultType = arrayTypeSymbol.type;\nmarkParameterizedType(arrType, arrType.eType);", "author": "suleka96", "createdAt": "2020-09-03T06:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczODQzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481738435", "body": "Shall we extract `(BLangSimpleVarRef) size` also to a variable?", "bodyText": "Shall we extract (BLangSimpleVarRef) size also to a variable?", "bodyHTML": "<p dir=\"auto\">Shall we extract <code>(BLangSimpleVarRef) size</code> also to a variable?</p>", "author": "MaryamZi", "createdAt": "2020-09-02T05:44:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2ODA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481768071", "body": "I think we can reuse existing error messages for these errors. For example here we can say\r\n\r\n`incompatible types: expected 'int', found 'T'` where T is the actual type.", "bodyText": "I think we can reuse existing error messages for these errors. For example here we can say\nincompatible types: expected 'int', found 'T' where T is the actual type.", "bodyHTML": "<p dir=\"auto\">I think we can reuse existing error messages for these errors. For example here we can say</p>\n<p dir=\"auto\"><code>incompatible types: expected 'int', found 'T'</code> where T is the actual type.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T06:13:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n+                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            if (lengthLiteralType.tag == TypeTags.INT) {\n+                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                                        (int) length,\n+                                        BArrayState.CLOSED_SEALED);\n+                                arrayTypeSymbol.type = arrType;\n+                                markParameterizedType(arrType, arrType.eType);\n+                                resultType = arrayTypeSymbol.type;\n+\n+                            } else {\n+                                dlog.error(arrayTypeNode.pos,\n+                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3Mzg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481773862", "body": "Here, IMO, we can use the undefined symbol error.\r\n\r\n`undefined symbol 'x'`", "bodyText": "Here, IMO, we can use the undefined symbol error.\nundefined symbol 'x'", "bodyHTML": "<p dir=\"auto\">Here, IMO, we can use the undefined symbol error.</p>\n<p dir=\"auto\"><code>undefined symbol 'x'</code></p>", "author": "MaryamZi", "createdAt": "2020-09-02T06:18:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n+                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            if (lengthLiteralType.tag == TypeTags.INT) {\n+                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                                        (int) length,\n+                                        BArrayState.CLOSED_SEALED);\n+                                arrayTypeSymbol.type = arrType;\n+                                markParameterizedType(arrType, arrType.eType);\n+                                resultType = arrayTypeSymbol.type;\n+\n+                            } else {\n+                                dlog.error(arrayTypeNode.pos,\n+                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n+                                        ((BConstantSymbol) sizeSymbol).literalType);\n+                                resultType = symTable.semanticError;\n+                            }\n+                        } else {\n+                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            resultType = symTable.semanticError;\n+                        }\n+                    } else {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 938ec820ebd..e9148f4853c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -904,64 +902,72 @@ public class SymbolResolver extends BLangNodeVisitor {\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n-            BArrayType arrType;\n+            boolean isError = false;\n+            BArrayType arrType = null;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n-                arrayTypeSymbol.type = arrType;\n-                markParameterizedType(arrType, arrType.eType);\n-                resultType = arrayTypeSymbol.type;\n             } else {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n-                if (size instanceof BLangLiteral) {\n-                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n-                            new BArrayType(resultType, arrayTypeSymbol,\n-                                    (Integer) (((BLangLiteral) size).getValue()),\n-                                    BArrayState.UNSEALED) :\n-                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.OPEN_SEALED) :\n-                                    new BArrayType(resultType, arrayTypeSymbol,\n-                                            (Integer) (((BLangLiteral) size).getValue()),\n-                                            BArrayState.CLOSED_SEALED);\n-                    arrayTypeSymbol.type = arrType;\n-                    markParameterizedType(arrType, arrType.eType);\n-                    resultType = arrayTypeSymbol.type;\n-\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n                 } else {\n-                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n-                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n                         if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                            BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n                             if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                long length = (long) sizeConstSymbol.value.value;\n                                 arrType = new BArrayType(resultType, arrayTypeSymbol,\n                                         (int) length,\n                                         BArrayState.CLOSED_SEALED);\n-                                arrayTypeSymbol.type = arrType;\n-                                markParameterizedType(arrType, arrType.eType);\n-                                resultType = arrayTypeSymbol.type;\n-\n                             } else {\n-                                dlog.error(arrayTypeNode.pos,\n-                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n-                                        ((BConstantSymbol) sizeSymbol).literalType);\n-                                resultType = symTable.semanticError;\n+                                dlog.error(size.pos,\n+                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                        symTable.intType,\n+                                        sizeConstSymbol.literalType);\n+                                isError = true;\n                             }\n                         } else {\n-                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            resultType = symTable.semanticError;\n+                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            isError = true;\n                         }\n                     } else {\n-                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);\n-                        resultType = symTable.semanticError;\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n                     }\n                 }\n             }\n+            if (isError) {\n+                resultType = symTable.semanticError;\n+            } else {\n+                arrayTypeSymbol.type = arrType;\n+                resultType = arrayTypeSymbol.type;\n+                markParameterizedType(arrType, arrType.eType);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex e9148f4853c..a9b975d504d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -934,40 +934,42 @@ public class SymbolResolver extends BLangNodeVisitor {\n \n                     BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n \n-                    if (!(symTable.notFoundSymbol == sizeSymbol)) {\n-                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n-                            BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n-                            BType lengthLiteralType = sizeConstSymbol.literalType;\n-\n-                            if (lengthLiteralType.tag == TypeTags.INT) {\n-                                long length = (long) sizeConstSymbol.value.value;\n-                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n-                                        (int) length,\n-                                        BArrayState.CLOSED_SEALED);\n-                            } else {\n-                                dlog.error(size.pos,\n-                                        DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                        symTable.intType,\n-                                        sizeConstSymbol.literalType);\n-                                isError = true;\n-                            }\n-                        } else {\n-                            dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n-                            isError = true;\n-                        }\n-                    } else {\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n                         dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n                         isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);\n+                        isError = true;\n+                        continue;\n                     }\n+\n+                    long length = (long) sizeConstSymbol.value.value;\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                            (int) length,\n+                            BArrayState.CLOSED_SEALED);\n                 }\n             }\n-            if (isError) {\n-                resultType = symTable.semanticError;\n-            } else {\n-                arrayTypeSymbol.type = arrType;\n-                resultType = arrayTypeSymbol.type;\n-                markParameterizedType(arrType, arrType.eType);\n-            }\n+            arrayTypeSymbol.type = arrType;\n+            resultType = arrayTypeSymbol.type;\n+            markParameterizedType(arrType, arrType.eType);\n+        }\n+        if (isError) {\n+            resultType = symTable.semanticError;\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3NDExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481774114", "body": "Let's use node kind.", "bodyText": "Let's use node kind.", "bodyHTML": "<p dir=\"auto\">Let's use node kind.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T06:19:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,14 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size instanceof BLangLiteral) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\nindex 73037370b24..07f78a601af 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n", "chunk": "@@ -65,11 +65,12 @@ public class BLangArrayType extends BLangType implements ArrayTypeNode {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size instanceof BLangLiteral) {\n-                    if ((Integer) (((BLangLiteral) size).getValue()) == -1) {\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    if (sizeIndicator == -1) {\n                         sb[0].append(\"[]\");\n                     } else {\n-                        sb[0].append(\"[\").append((Integer) (((BLangLiteral) size).getValue())).append(\"]\");\n+                        sb[0].append(\"[\").append(sizeIndicator).append(\"]\");\n                     }\n                 } else {\n                     sb[0].append(\"[\").append(((BLangSimpleVarRef) size).variableName).append(\"]\");\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3NDcyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481774722", "body": "Let's extract `(Integer) (((BLangLiteral) size).getValue()` out to a variable. ", "bodyText": "Let's extract (Integer) (((BLangLiteral) size).getValue() out to a variable.", "bodyHTML": "<p dir=\"auto\">Let's extract <code>(Integer) (((BLangLiteral) size).getValue()</code> out to a variable.</p>", "author": "MaryamZi", "createdAt": "2020-09-02T06:19:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,14 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size instanceof BLangLiteral) {\n+                    if ((Integer) (((BLangLiteral) size).getValue()) == -1) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db809ef9d96e73d43753b6bff9327f278ad213f9", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\nindex 73037370b24..07f78a601af 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n", "chunk": "@@ -65,11 +65,12 @@ public class BLangArrayType extends BLangType implements ArrayTypeNode {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size instanceof BLangLiteral) {\n-                    if ((Integer) (((BLangLiteral) size).getValue()) == -1) {\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    if (sizeIndicator == -1) {\n                         sb[0].append(\"[]\");\n                     } else {\n-                        sb[0].append(\"[\").append((Integer) (((BLangLiteral) size).getValue())).append(\"]\");\n+                        sb[0].append(\"[\").append(sizeIndicator).append(\"]\");\n                     }\n                 } else {\n                     sb[0].append(\"[\").append(((BLangSimpleVarRef) size).variableName).append(\"]\");\n", "next_change": null}]}}, {"oid": "db809ef9d96e73d43753b6bff9327f278ad213f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db809ef9d96e73d43753b6bff9327f278ad213f9", "message": "Refactor all files.", "committedDate": "2020-09-02T22:53:10Z", "type": "commit"}, {"oid": "868f928ef7f45a099ad40f6f318edf2056883bcb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/868f928ef7f45a099ad40f6f318edf2056883bcb", "message": "Add back instance of instead of node type.", "committedDate": "2020-09-02T23:36:35Z", "type": "commit"}, {"oid": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "message": "Fix CheckStyle issues and refactor array size logic.", "committedDate": "2020-09-03T07:13:42Z", "type": "commit"}, {"oid": "c93857f69d50f63d8b1903c0c0b5d0d5aec5f9c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c93857f69d50f63d8b1903c0c0b5d0d5aec5f9c6", "message": "Change import order of java.lang.String.format", "committedDate": "2020-09-03T07:26:35Z", "type": "commit"}, {"oid": "51ef246ac21ef24b9a163a04c4cc5c6461ef4e25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51ef246ac21ef24b9a163a04c4cc5c6461ef4e25", "message": "Add array size tests.", "committedDate": "2020-09-07T15:39:39Z", "type": "commit"}, {"oid": "bc547dfce6b54d93982db2985f417d468a311176", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc547dfce6b54d93982db2985f417d468a311176", "message": "Update const array size reference test in sealed array tests.", "committedDate": "2020-09-07T16:15:04Z", "type": "commit"}, {"oid": "3649abb055a0c64c0b6e9432fed9e5d1b1cb36a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3649abb055a0c64c0b6e9432fed9e5d1b1cb36a1", "message": "Fix bad sad error in constant size reference array in module scope.", "committedDate": "2020-09-08T05:30:36Z", "type": "commit"}, {"oid": "4539e93841ec3277611ceb4984f611eeb51cddb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4539e93841ec3277611ceb4984f611eeb51cddb4", "message": "Fix CheckStyle issues.", "committedDate": "2020-09-08T06:04:50Z", "type": "commit"}, {"oid": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "message": "Remove unused imports.", "committedDate": "2020-09-08T06:35:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyNDQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485624488", "body": "Let's leave one new line after the imports. ", "bodyText": "Let's leave one new line after the imports.", "bodyHTML": "<p dir=\"auto\">Let's leave one new line after the imports.</p>", "author": "MaryamZi", "createdAt": "2020-09-09T13:46:44Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java", "diffHunk": "@@ -17,6 +17,7 @@\n */\n package org.ballerinalang.model.tree.types;\n \n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\nindex 93dbb9b0d79..307d16c2418 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java\n", "chunk": "@@ -18,6 +18,7 @@\n package org.ballerinalang.model.tree.types;\n \n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+\n /**\n  * {@code ArrayTypeNode} represents an array type node in Ballerina\n  * array type node can be of multiple dimensions and each dimension can be sealed with a specific size\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyNTM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485625344", "body": "One new line after the set of imports should be enough. ", "bodyText": "One new line after the set of imports should be enough.", "bodyHTML": "<p dir=\"auto\">One new line after the set of imports should be enough.</p>", "author": "MaryamZi", "createdAt": "2020-09-09T13:47:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -58,9 +61,11 @@\n import java.util.regex.Pattern;\n \n import static org.wso2.ballerinalang.compiler.parser.BLangPackageBuilder.escapeQuotedIdentifier;\n+import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n+import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY;\n-import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n-import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n+", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\nindex e4a27725c37..7a3649478ef 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n", "chunk": "@@ -65,8 +63,6 @@ import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDI\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY;\n \n-\n-\n /**\n  * @since 0.94\n  */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNTc1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485635750", "body": "Creating these expressions and setting them is usually delegated off to the package builder. Also doesn't feel quite right for the parser listener to know of the symbol table. \r\n\r\nSince the antlr parser will be removed soon, shall we just pass an empty list in L858 and disable the tests on the old parser, instead of introducing these changes?", "bodyText": "Creating these expressions and setting them is usually delegated off to the package builder. Also doesn't feel quite right for the parser listener to know of the symbol table.\nSince the antlr parser will be removed soon, shall we just pass an empty list in L858 and disable the tests on the old parser, instead of introducing these changes?", "bodyHTML": "<p dir=\"auto\">Creating these expressions and setting them is usually delegated off to the package builder. Also doesn't feel quite right for the parser listener to know of the symbol table.</p>\n<p dir=\"auto\">Since the antlr parser will be removed soon, shall we just pass an empty list in L858 and disable the tests on the old parser, instead of introducing these changes?</p>", "author": "MaryamZi", "createdAt": "2020-09-09T14:01:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -828,18 +834,18 @@ public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx\n \n         int index = 1;\n         int dimensions = 0;\n-        List<Integer> sizes = new ArrayList<>();\n+        List<BLangExpression> sizes = new ArrayList<>();\n         List<ParseTree> children = ctx.children;\n         while (index < children.size()) {\n             if (children.get(index).getText().equals(\"[\")) {\n                 if (children.get(index + 1).getText().equals(\"]\")) {\n-                    sizes.add(UNSEALED_ARRAY_INDICATOR);\n+                    sizes.add(new BLangLiteral(Integer.valueOf(OPEN_ARRAY_INDICATOR), symTable.intType));", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\nindex e4a27725c37..7a3649478ef 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n", "chunk": "@@ -834,18 +829,18 @@ public class BLangParserListener extends BallerinaParserBaseListener {\n \n         int index = 1;\n         int dimensions = 0;\n-        List<BLangExpression> sizes = new ArrayList<>();\n+        List<Integer> sizes = new ArrayList<>();\n         List<ParseTree> children = ctx.children;\n         while (index < children.size()) {\n             if (children.get(index).getText().equals(\"[\")) {\n                 if (children.get(index + 1).getText().equals(\"]\")) {\n-                    sizes.add(new BLangLiteral(Integer.valueOf(OPEN_ARRAY_INDICATOR), symTable.intType));\n+                    sizes.add(OPEN_ARRAY_INDICATOR);\n                     index += 2;\n                 } else if (children.get(index + 1).getText().equals(OPEN_SEALED_ARRAY)) {\n-                    sizes.add(new BLangLiteral(Integer.valueOf(INFERRED_ARRAY_INDICATOR), symTable.intType));\n+                    sizes.add(INFERRED_ARRAY_INDICATOR);\n                     index += 1;\n                 } else {\n-                    sizes.add(new BLangLiteral(Integer.parseInt(children.get(index + 1).getText()), symTable.intType));\n+                    sizes.add(Integer.parseInt(children.get(index + 1).getText()));\n                     index += 1;\n                 }\n                 dimensions++;\n", "next_change": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\nindex 7a3649478ef..b6f79d74dfa 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n", "chunk": "@@ -849,7 +848,7 @@ public class BLangParserListener extends BallerinaParserBaseListener {\n             }\n         }\n         Collections.reverse(sizes);\n-        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions, new BLangExpression[0]);\n+        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions);\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNzYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485637621", "body": "Leave a new line after the imports. Please check and fix everywhere. ", "bodyText": "Leave a new line after the imports. Please check and fix everywhere.", "bodyHTML": "<p dir=\"auto\">Leave a new line after the imports. Please check and fix everywhere.</p>", "author": "MaryamZi", "createdAt": "2020-09-09T14:03:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -118,9 +119,8 @@\n \n import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n-import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n-import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n-\n+import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n+import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex b6747813ad7..1e890279453 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -121,6 +121,7 @@ import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n+\n /**\n  * @since 0.94\n  */\n", "next_change": {"commit": "5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 1e890279453..20e3f8a302b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -108,16 +108,20 @@ import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import static java.lang.String.format;\n+import static org.ballerinalang.model.symbols.SymbolOrigin.SOURCE;\n+import static org.ballerinalang.model.symbols.SymbolOrigin.VIRTUAL;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NzM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485657396", "body": "Since it is only the array state that changes, IMO we can improve readability here by doing something like\r\n\r\n```suggestion\r\n                    BArrayState arrayState;\r\n                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\r\n                        arrayState = BArrayState.UNSEALED;\r\n                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\r\n                        arrayState = BArrayState.OPEN_SEALED;\r\n                    } else {\r\n                        arrayState = BArrayState.CLOSED_SEALED;\r\n                    }\r\n                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\r\n```", "bodyText": "Since it is only the array state that changes, IMO we can improve readability here by doing something like\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrType = new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.UNSEALED);\n          \n          \n            \n                                } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrType = new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.OPEN_SEALED);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    arrType =  new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.CLOSED_SEALED);\n          \n          \n            \n                                }\n          \n          \n            \n                                BArrayState arrayState;\n          \n          \n            \n                                if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrayState = BArrayState.UNSEALED;\n          \n          \n            \n                                } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrayState = BArrayState.OPEN_SEALED;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    arrayState = BArrayState.CLOSED_SEALED;\n          \n          \n            \n                                }\n          \n          \n            \n                                arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);", "bodyHTML": "<p dir=\"auto\">Since it is only the array state that changes, IMO we can improve readability here by doing something like</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"926\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (sizeIndicator <span class=\"pl-k\">==</span> <span class=\"pl-c1\">OPEN_ARRAY_INDICATOR</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"927\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        arrType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BArrayType</span>(resultType,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"928\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                arrayTypeSymbol,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"929\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                sizeIndicator,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"930\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNSEALED</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"931\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (sizeIndicator <span class=\"pl-k\">==</span> <span class=\"pl-c1\">INFERRED_ARRAY_INDICATOR</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"932\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        arrType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BArrayType</span>(resultType,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"933\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                arrayTypeSymbol,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"934\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                sizeIndicator,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"935\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OPEN_SEALED</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"936\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"937\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        arrType <span class=\"pl-k\">=</span>  <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BArrayType</span>(resultType,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"938\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                arrayTypeSymbol,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"939\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                sizeIndicator,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"940\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CLOSED_SEALED</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"941\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"926\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">BArrayState</span> arrayState;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"927\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (sizeIndicator <span class=\"pl-k\">==</span> <span class=\"pl-c1\">OPEN_ARRAY_INDICATOR</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"928\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        arrayState <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNSEALED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"929\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (sizeIndicator <span class=\"pl-k\">==</span> <span class=\"pl-c1\">INFERRED_ARRAY_INDICATOR</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"930\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        arrayState <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OPEN_SEALED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"931\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"932\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        arrayState <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BArrayState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CLOSED_SEALED</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"933\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"934\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    arrType <span class=\"pl-k\">=</span>  <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BArrayType</span>(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-09-09T14:29:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -899,24 +899,79 @@ public void visit(BLangArrayType arrayTypeNode) {\n         if (resultType == symTable.noType) {\n             return;\n         }\n+        boolean isError = false;\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex b6747813ad7..1e890279453 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -910,23 +911,15 @@ public class SymbolResolver extends BLangNodeVisitor {\n                 BLangExpression size = arrayTypeNode.sizes[i];\n                 if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n                     Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n-\n+                    BArrayState arrayState;\n                     if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n-                        arrType = new BArrayType(resultType,\n-                                arrayTypeSymbol,\n-                                sizeIndicator,\n-                                BArrayState.UNSEALED);\n+                        arrayState = BArrayState.UNSEALED;\n                     } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n-                        arrType = new BArrayType(resultType,\n-                                arrayTypeSymbol,\n-                                sizeIndicator,\n-                                BArrayState.OPEN_SEALED);\n+                        arrayState = BArrayState.OPEN_SEALED;\n                     } else {\n-                        arrType =  new BArrayType(resultType,\n-                                arrayTypeSymbol,\n-                                sizeIndicator,\n-                                BArrayState.CLOSED_SEALED);\n+                        arrayState = BArrayState.CLOSED_SEALED;\n                     }\n+                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n                 } else {\n                     BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n                     Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n", "next_change": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 1e890279453..91ee0c821b5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -921,6 +926,13 @@ public class SymbolResolver extends BLangNodeVisitor {\n                     }\n                     arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n                 } else {\n+                    if (size.getKind() != NodeKind.SIMPLE_VARIABLE_REF) {\n+                        dlog.error(size.pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.intType,\n+                                ((BLangTypedescExpr) size).getTypeNode());\n+                        isError = true;\n+                        continue;\n+                    }\n+\n                     BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n                     Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n                     Name typeName = names.fromIdNode(sizeReference.variableName);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODQxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485658413", "body": "Shall we reformat this to have whatever possible in a single line?", "bodyText": "Shall we reformat this to have whatever possible in a single line?", "bodyHTML": "<p dir=\"auto\">Shall we reformat this to have whatever possible in a single line?</p>", "author": "MaryamZi", "createdAt": "2020-09-09T14:30:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -899,24 +899,79 @@ public void visit(BLangArrayType arrayTypeNode) {\n         if (resultType == symTable.noType) {\n             return;\n         }\n+        boolean isError = false;\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODU3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485658573", "bodyText": "Please check other places too.", "author": "MaryamZi", "createdAt": "2020-09-09T14:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex b6747813ad7..91ee0c821b5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -950,19 +955,14 @@ public class SymbolResolver extends BLangNodeVisitor {\n                     BType lengthLiteralType = sizeConstSymbol.literalType;\n \n                     if (lengthLiteralType.tag != TypeTags.INT) {\n-                        dlog.error(size.pos,\n-                                DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                symTable.intType,\n+                        dlog.error(size.pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.intType,\n                                 sizeConstSymbol.literalType);\n                         isError = true;\n                         continue;\n                     }\n \n                     int length = Integer.parseInt(sizeConstSymbol.type.toString());\n-                    arrType = new BArrayType(resultType,\n-                            arrayTypeSymbol,\n-                            length,\n-                            BArrayState.CLOSED_SEALED);\n+                    arrType = new BArrayType(resultType, arrayTypeSymbol, length, BArrayState.CLOSED_SEALED);\n                 }\n             }\n             arrayTypeSymbol.type = arrType;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTQ1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485659455", "body": "Can we not have this on one line?", "bodyText": "Can we not have this on one line?", "bodyHTML": "<p dir=\"auto\">Can we not have this on one line?</p>", "author": "MaryamZi", "createdAt": "2020-09-09T14:31:41Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *\n+ */\n+public class ArraySizeDefinitionTest {\n+\n+    private String sizeMismatchError = \"size mismatch in sealed array. expected '2', but found '3'\";\n+    private String invalidReferenceExpressionError = \"invalid reference expression \" +\n+            \"'intLength' as array size: expected a constant reference expression\";\n+    private String incompatibleTypeError = \"incompatible types: expected 'int', found 'string'\";\n+    private String undefinedSymbolError = \"undefined symbol 'length'\";\n+\n+    @Test(groups = { \"disableOnOldParser\" })\n+    public void testCompilationSizeReferenceErrors() {\n+        int index = 0;\n+        CompileResult result = BCompileUtil.compile(\n+                \"test-src/statements/arrays/array-size-test.bal\");", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2Mzg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485663884", "bodyText": "Please check other places too.", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\nindex 53b8aa2da67..4af1c508fcf 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n", "chunk": "@@ -37,59 +37,66 @@ public class ArraySizeDefinitionTest {\n \n     @Test(groups = { \"disableOnOldParser\" })\n     public void testCompilationSizeReferenceErrors() {\n+        CompileResult resultPositive = BCompileUtil.compile(\"test-src/statements/arrays/array_size_test.bal\");\n+        Assert.assertEquals(resultPositive.getDiagnostics().length, 0);\n+\n         int index = 0;\n-        CompileResult result = BCompileUtil.compile(\n-                \"test-src/statements/arrays/array-size-test.bal\");\n-        Assert.assertEquals(result.getDiagnostics().length, 20);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 6, 26);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 7, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 8, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 9, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 10, 16);\n+        CompileResult resultNegative = BCompileUtil.compile(\"test-src/statements/arrays/array_size_test_\" +\n+                \"negative.bal\");\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 22, 26);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 23, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 24, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 25, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 26, 16);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 12, 36);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 13, 12);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 14, 12);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 15, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 16, 26);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 28, 36);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 29, 12);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 30, 12);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 31, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 32, 26);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 18, 29);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 19, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 20, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 21, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 22, 19);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 34, 29);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 35, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 36, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 37, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 38, 19);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 24, 33);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 25, 12);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 26, 12);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 27, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 28, 23);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 40, 33);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 41, 12);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 42, 12);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 43, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 44, 23);\n+        Assert.assertEquals(resultNegative.getDiagnostics().length, index);\n     }\n \n     @Test(groups = { \"disableOnOldParser\" })\n     public void arraySizeReferenceInDifferentScopeTest() {\n+        CompileResult resultPositive = BCompileUtil.compile(\"test-src/statements/arrays/array_size_scope_test.bal\");\n+        Assert.assertEquals(resultPositive.getDiagnostics().length, 0);\n+\n         int index = 0;\n-        CompileResult result = BCompileUtil.compile(\n-                \"test-src/statements/arrays/array-size-scope-test.bal\");\n-        Assert.assertEquals(result.getDiagnostics().length, 16);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 6, 22);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 7, 5);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 8, 5);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 9, 1);\n+        CompileResult resultNegative = BCompileUtil.compile(\"test-src/statements/arrays/array_size_scope_test_\" +\n+                \"negative.bal\");\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 17, 24);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 23, 22);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 24, 5);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 25, 5);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 26, 1);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 13, 26);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 14, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 15, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 16, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 29, 26);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 30, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 31, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 32, 5);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 21, 41);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 22, 24);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 23, 24);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 24, 20);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 36, 41);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 37, 24);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 38, 24);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 39, 20);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 33, 30);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 34, 13);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 35, 13);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 36, 9);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 47, 30);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 48, 13);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 49, 13);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 50, 9);\n+        Assert.assertEquals(resultNegative.getDiagnostics().length, index);\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MzY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485663645", "body": "Let's move this to the end and assert equality between `index` and `result.getDiagnostics().length`, that way we also make sure we've asserted all the errors. ", "bodyText": "Let's move this to the end and assert equality between index and result.getDiagnostics().length, that way we also make sure we've asserted all the errors.", "bodyHTML": "<p dir=\"auto\">Let's move this to the end and assert equality between <code>index</code> and <code>result.getDiagnostics().length</code>, that way we also make sure we've asserted all the errors.</p>", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:01Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *\n+ */\n+public class ArraySizeDefinitionTest {\n+\n+    private String sizeMismatchError = \"size mismatch in sealed array. expected '2', but found '3'\";\n+    private String invalidReferenceExpressionError = \"invalid reference expression \" +\n+            \"'intLength' as array size: expected a constant reference expression\";\n+    private String incompatibleTypeError = \"incompatible types: expected 'int', found 'string'\";\n+    private String undefinedSymbolError = \"undefined symbol 'length'\";\n+\n+    @Test(groups = { \"disableOnOldParser\" })\n+    public void testCompilationSizeReferenceErrors() {\n+        int index = 0;\n+        CompileResult result = BCompileUtil.compile(\n+                \"test-src/statements/arrays/array-size-test.bal\");\n+        Assert.assertEquals(result.getDiagnostics().length, 20);", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "changed_code": [{"header": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\nindex 53b8aa2da67..4af1c508fcf 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n", "chunk": "@@ -37,59 +37,66 @@ public class ArraySizeDefinitionTest {\n \n     @Test(groups = { \"disableOnOldParser\" })\n     public void testCompilationSizeReferenceErrors() {\n+        CompileResult resultPositive = BCompileUtil.compile(\"test-src/statements/arrays/array_size_test.bal\");\n+        Assert.assertEquals(resultPositive.getDiagnostics().length, 0);\n+\n         int index = 0;\n-        CompileResult result = BCompileUtil.compile(\n-                \"test-src/statements/arrays/array-size-test.bal\");\n-        Assert.assertEquals(result.getDiagnostics().length, 20);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 6, 26);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 7, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 8, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 9, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 10, 16);\n+        CompileResult resultNegative = BCompileUtil.compile(\"test-src/statements/arrays/array_size_test_\" +\n+                \"negative.bal\");\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 22, 26);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 23, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 24, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 25, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 26, 16);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 12, 36);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 13, 12);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 14, 12);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 15, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 16, 26);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 28, 36);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 29, 12);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 30, 12);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 31, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 32, 26);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 18, 29);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 19, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 20, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 21, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 22, 19);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 34, 29);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 35, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 36, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 37, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 38, 19);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 24, 33);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 25, 12);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 26, 12);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 27, 5);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 28, 23);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 40, 33);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 41, 12);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 42, 12);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 43, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 44, 23);\n+        Assert.assertEquals(resultNegative.getDiagnostics().length, index);\n     }\n \n     @Test(groups = { \"disableOnOldParser\" })\n     public void arraySizeReferenceInDifferentScopeTest() {\n+        CompileResult resultPositive = BCompileUtil.compile(\"test-src/statements/arrays/array_size_scope_test.bal\");\n+        Assert.assertEquals(resultPositive.getDiagnostics().length, 0);\n+\n         int index = 0;\n-        CompileResult result = BCompileUtil.compile(\n-                \"test-src/statements/arrays/array-size-scope-test.bal\");\n-        Assert.assertEquals(result.getDiagnostics().length, 16);\n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 6, 22);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 7, 5);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 8, 5);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 9, 1);\n+        CompileResult resultNegative = BCompileUtil.compile(\"test-src/statements/arrays/array_size_scope_test_\" +\n+                \"negative.bal\");\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 17, 24);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 23, 22);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 24, 5);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 25, 5);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 26, 1);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 13, 26);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 14, 9);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 15, 9);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 16, 5);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 29, 26);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 30, 9);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 31, 9);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 32, 5);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 21, 41);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 22, 24);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 23, 24);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 24, 20);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 36, 41);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 37, 24);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 38, 24);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 39, 20);\n \n-        BAssertUtil.validateError(result, index++, sizeMismatchError, 33, 30);\n-        BAssertUtil.validateError(result, index++, invalidReferenceExpressionError, 34, 13);\n-        BAssertUtil.validateError(result, index++, incompatibleTypeError, 35, 13);\n-        BAssertUtil.validateError(result, index++, undefinedSymbolError, 36, 9);\n+        BAssertUtil.validateError(resultNegative, index++, sizeMismatchError, 47, 30);\n+        BAssertUtil.validateError(resultNegative, index++, invalidReferenceExpressionError, 48, 13);\n+        BAssertUtil.validateError(resultNegative, index++, incompatibleTypeError, 49, 13);\n+        BAssertUtil.validateError(resultNegative, index++, undefinedSymbolError, 50, 9);\n+        Assert.assertEquals(resultNegative.getDiagnostics().length, index);\n     }\n }\n", "next_change": null}]}}, {"oid": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "message": "Refactor all files", "committedDate": "2020-09-11T17:43:51Z", "type": "commit"}, {"oid": "5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "message": "Resolve merge conflicts", "committedDate": "2020-09-14T02:38:13Z", "type": "commit"}, {"oid": "0c98d0c8c0c6dce760ebe75066145590dce372e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c98d0c8c0c6dce760ebe75066145590dce372e6", "message": "Add unstaged change", "committedDate": "2020-09-14T03:05:39Z", "type": "commit"}, {"oid": "36bf966d84751a61c33b63373c8f57177956a894", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36bf966d84751a61c33b63373c8f57177956a894", "message": "Revert \"Add unstaged change\"\n\nThis reverts commit 0c98d0c8c0c6dce760ebe75066145590dce372e6.\n\nRevert commit 0c98d0c8c0c6dce760ebe75066145590dce372e6", "committedDate": "2020-09-14T04:24:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwMTU5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488401591", "body": "Shall we minimize the changes to `BLangParserListener` by introducing in `BLangPackageBuilder` another method that does not accept the size array?\r\n\r\n```java\r\nvoid addArrayType(DiagnosticPos pos, Set<Whitespace> ws, int dimensions) {\r\n\r\n}\r\n```\r\n\r\nAnd from that call the current `addArrayType` method with an empty `BlangExpression` array? That way we can avoid importing `BLangExpression` too. ", "bodyText": "Shall we minimize the changes to BLangParserListener by introducing in BLangPackageBuilder another method that does not accept the size array?\nvoid addArrayType(DiagnosticPos pos, Set<Whitespace> ws, int dimensions) {\n\n}\nAnd from that call the current addArrayType method with an empty BlangExpression array? That way we can avoid importing BLangExpression too.", "bodyHTML": "<p dir=\"auto\">Shall we minimize the changes to <code>BLangParserListener</code> by introducing in <code>BLangPackageBuilder</code> another method that does not accept the size array?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"void addArrayType(DiagnosticPos pos, Set&lt;Whitespace&gt; ws, int dimensions) {\n\n}\"><pre><span class=\"pl-k\">void</span> addArrayType(<span class=\"pl-smi\">DiagnosticPos</span> pos, <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">Whitespace</span>&gt;</span> ws, <span class=\"pl-k\">int</span> dimensions) {\n\n}</pre></div>\n<p dir=\"auto\">And from that call the current <code>addArrayType</code> method with an empty <code>BlangExpression</code> array? That way we can avoid importing <code>BLangExpression</code> too.</p>", "author": "MaryamZi", "createdAt": "2020-09-15T05:50:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -848,8 +849,7 @@ public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx\n             }\n         }\n         Collections.reverse(sizes);\n-        this.pkgBuilder.addArrayType(\n-                getCurrentPos(ctx), getWS(ctx), dimensions, sizes.stream().mapToInt(val -> val).toArray());\n+        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions, new BLangExpression[0]);", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\nindex 7a3649478ef..b6f79d74dfa 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n", "chunk": "@@ -849,7 +848,7 @@ public class BLangParserListener extends BallerinaParserBaseListener {\n             }\n         }\n         Collections.reverse(sizes);\n-        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions, new BLangExpression[0]);\n+        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions);\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDIyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404222", "body": "Can we assume this is always a var ref if it is not a literal? Can you validate with something like\r\n\r\n```ballerina\r\npublic function main() {\r\n    int[[int, string]] x = 1;\r\n}\r\n```\r\nWe may have to explicitly validate if it is\r\n1. a literal\r\n2. `*` - inferred\r\n3. a variable reference expression", "bodyText": "Can we assume this is always a var ref if it is not a literal? Can you validate with something like\npublic function main() {\n    int[[int, string]] x = 1;\n}\nWe may have to explicitly validate if it is\n\na literal\n* - inferred\na variable reference expression", "bodyHTML": "<p dir=\"auto\">Can we assume this is always a var ref if it is not a literal? Can you validate with something like</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    int[[int, string]] x = 1;\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">int</span>[[<span class=\"pl-c1\">int</span>, <span class=\"pl-c1\">string</span>]] x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n}</pre></div>\n<p dir=\"auto\">We may have to explicitly validate if it is</p>\n<ol dir=\"auto\">\n<li>a literal</li>\n<li><code>*</code> - inferred</li>\n<li>a variable reference expression</li>\n</ol>", "author": "MaryamZi", "createdAt": "2020-09-15T05:57:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -911,17 +913,60 @@ public void visit(BLangArrayType arrayTypeNode) {\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    BArrayState arrayState;\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.UNSEALED;\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.OPEN_SEALED;\n+                    } else {\n+                        arrayState = BArrayState.CLOSED_SEALED;\n+                    }\n+                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 20e3f8a302b..91ee0c821b5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -926,6 +926,13 @@ public class SymbolResolver extends BLangNodeVisitor {\n                     }\n                     arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n                 } else {\n+                    if (size.getKind() != NodeKind.SIMPLE_VARIABLE_REF) {\n+                        dlog.error(size.pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.intType,\n+                                ((BLangTypedescExpr) size).getTypeNode());\n+                        isError = true;\n+                        continue;\n+                    }\n+\n                     BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n                     Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n                     Name typeName = names.fromIdNode(sizeReference.variableName);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404532", "body": "We can refactor this to be on one or two lines instead of having the individual args on separate lines, right?", "bodyText": "We can refactor this to be on one or two lines instead of having the individual args on separate lines, right?", "bodyHTML": "<p dir=\"auto\">We can refactor this to be on one or two lines instead of having the individual args on separate lines, right?</p>", "author": "MaryamZi", "createdAt": "2020-09-15T05:58:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -911,17 +913,60 @@ public void visit(BLangArrayType arrayTypeNode) {\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    BArrayState arrayState;\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.UNSEALED;\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.OPEN_SEALED;\n+                    } else {\n+                        arrayState = BArrayState.CLOSED_SEALED;\n+                    }\n+                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n \n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 20e3f8a302b..91ee0c821b5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n", "chunk": "@@ -948,9 +955,7 @@ public class SymbolResolver extends BLangNodeVisitor {\n                     BType lengthLiteralType = sizeConstSymbol.literalType;\n \n                     if (lengthLiteralType.tag != TypeTags.INT) {\n-                        dlog.error(size.pos,\n-                                DiagnosticCode.INCOMPATIBLE_TYPES,\n-                                symTable.intType,\n+                        dlog.error(size.pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.intType,\n                                 sizeConstSymbol.literalType);\n                         isError = true;\n                         continue;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404951", "body": "Since it's just int literals wouldn't a check for just `NUMERIC_LITERAL` be enough? Please check other usage too.", "bodyText": "Since it's just int literals wouldn't a check for just NUMERIC_LITERAL be enough? Please check other usage too.", "bodyHTML": "<p dir=\"auto\">Since it's just int literals wouldn't a check for just <code>NUMERIC_LITERAL</code> be enough? Please check other usage too.</p>", "author": "MaryamZi", "createdAt": "2020-09-15T05:59:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,15 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwOTc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488609783", "bodyText": "We actually discussed about this before in this and it was suggested to use both. Since it is the same logic that is being used here I used both.", "author": "suleka96", "createdAt": "2020-09-15T12:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488794402", "bodyText": "IIRC digits are usually represented by NUMERIC_LITERALs, while strings are represented by LITERAL.\nSo once we've validated that the size is a numeric literal (probably done by the parser itself), we don't have to check for LITERAL thereafter. Because we know that if it is an array's size, and it is not inferred or a const ref, it has to be a NUMERIC_LITERAL.", "author": "MaryamZi", "createdAt": "2020-09-15T16:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\nindex cec327c643e..07f78a601af 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java\n", "chunk": "@@ -65,7 +65,7 @@ public class BLangArrayType extends BLangType implements ArrayTypeNode {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                if (size.getKind() == NodeKind.NUMERIC_LITERAL) {\n                     Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n                     if (sizeIndicator == -1) {\n                         sb[0].append(\"[]\");\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNTI5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488405295", "body": "Shall we add `@since Swan Lake`?", "bodyText": "Shall we add @since Swan Lake?", "bodyHTML": "<p dir=\"auto\">Shall we add <code>@since Swan Lake</code>?</p>", "author": "MaryamZi", "createdAt": "2020-09-15T06:00:14Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "changed_code": [{"header": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\nindex 4af1c508fcf..f265c7ec29a 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java\n", "chunk": "@@ -26,6 +26,7 @@ import org.testng.annotations.Test;\n /**\n  * Array size definition test.\n  *\n+ * @since Swan Lake\n  */\n public class ArraySizeDefinitionTest {\n \n", "next_change": null}]}}, {"oid": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9bc12cfa2fee14695e51162f1e83e7107f02f43", "message": "Refactor all files", "committedDate": "2020-09-16T01:52:11Z", "type": "commit"}]}