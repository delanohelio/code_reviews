{"pr_number": 27457, "pr_title": "[Debugger] Add expression evaluation support for langlib function invocations", "pr_author": "NipunaRanasinghe", "pr_createdAt": "2020-12-11T09:37:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457", "timeline": [{"oid": "300934c2b3419ab56379e66b6440f683469ef136", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/300934c2b3419ab56379e66b6440f683469ef136", "message": "Add lang lib method invocation evaluation support", "committedDate": "2020-12-06T10:29:19Z", "type": "commit"}, {"oid": "7241805368094707d19aa00257f31f725705c28f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7241805368094707d19aa00257f31f725705c28f", "message": "Add integration tests", "committedDate": "2020-12-08T10:29:19Z", "type": "commit"}, {"oid": "23fdb18d98ab5fd5a6a5b984ddbc2f560dede2d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23fdb18d98ab5fd5a6a5b984ddbc2f560dede2d8", "message": "Improve debugger test framework to support soft assertions", "committedDate": "2020-12-11T07:19:26Z", "type": "commit"}, {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cec8d381b3c4b88e18b59a7cfb5a5ab430895547", "message": "Fix failing tests", "committedDate": "2020-12-11T09:05:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540884666", "body": "```suggestion\r\n    private static final String LANG_VALUE = \"value\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String LANG_VALUE = \"value\";\n          \n          \n            \n                private static final String LANG_VALUE = \"value\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">LANG_VALUE</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">LANG_VALUE</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "praveennadarajah", "createdAt": "2020-12-11T11:35:18Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/utils/LangLibUtils.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.debugadapter.evaluation.utils;\n+\n+import org.ballerinalang.debugadapter.SuspendedContext;\n+import org.ballerinalang.debugadapter.evaluation.BExpressionValue;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationException;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationExceptionKind;\n+import org.ballerinalang.debugadapter.evaluation.engine.GeneratedStaticMethod;\n+import org.ballerinalang.debugadapter.variable.BVariableType;\n+\n+import java.util.StringJoiner;\n+\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeIdentifier;\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeNonFunctionIdentifier;\n+import static org.ballerinalang.debugadapter.evaluation.utils.EvaluationUtils.getGeneratedMethod;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.ARRAY;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.INT;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.MAP;\n+\n+/**\n+ * Ballerina lang libraries related utils.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangLibUtils {\n+\n+    public static final String LANG_LIB_ORG = \"ballerina\";\n+    public static final String LANG_LIB_PACKAGE_PREFIX = \"lang.\";\n+    public static final String LANG_VALUE = \"value\";", "originalCommit": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzYwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540893600", "bodyText": "Done", "author": "NipunaRanasinghe", "createdAt": "2020-12-11T11:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540890054", "body": "Why do we need to introduce AssertionMode? Why do we need soft assert here?", "bodyText": "Why do we need to introduce AssertionMode? Why do we need soft assert here?", "bodyHTML": "<p dir=\"auto\">Why do we need to introduce AssertionMode? Why do we need soft assert here?</p>", "author": "praveennadarajah", "createdAt": "2020-12-11T11:45:20Z", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugTestRunner.java", "diffHunk": "@@ -575,4 +626,12 @@ public static void destroy() {\n     public BalServer getBalServer() {\n         return balServer;\n     }\n+\n+    /**\n+     * Debugger test framework supports both modes (hard assertions and soft assertions).\n+    */\n+    public enum AssertionMode {\n+        HARD_ASSERT,\n+        SOFT_ASSERT,\n+    }", "originalCommit": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NTY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540895692", "bodyText": "@praveennadarajah Yes please refer 23fdb18. Added this soft assertion mode to see all the assertion failures at once, instead of immediately failing on a single assertion error. (This mode is useful specially when fixing test failures). Anyway the tests are running in hard assertion mode by default.", "author": "NipunaRanasinghe", "createdAt": "2020-12-11T11:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540898727", "bodyText": "+1 for having soft assert.", "author": "praveennadarajah", "createdAt": "2020-12-11T12:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA=="}], "type": "inlineReview"}, {"oid": "925acc2b75cd08a32008bc9aaad077b6df402c2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/925acc2b75cd08a32008bc9aaad077b6df402c2a", "message": "Add review suggestions\n\nCo-authored-by: Praveen Nadarajah <n.praveen.rc@gmail.com>", "committedDate": "2020-12-11T11:51:34Z", "type": "commit"}]}