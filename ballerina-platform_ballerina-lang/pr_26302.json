{"pr_number": 26302, "pr_title": "Restrict invalid expressions starting with a simple type", "pr_author": "rdulmina", "pr_createdAt": "2020-10-12T05:12:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302", "timeline": [{"oid": "2052a9d7f0c3718c033a3bfbd643c4d000863d85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2052a9d7f0c3718c033a3bfbd643c4d000863d85", "message": "Restrict invalid expressions starting with a simple type", "committedDate": "2020-10-12T05:03:02Z", "type": "commit"}, {"oid": "846eb9c4abdebc65e1348f843a9fd10ade4835f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846eb9c4abdebc65e1348f843a9fd10ade4835f1", "message": "Add jballerina unit test", "committedDate": "2020-10-12T05:03:31Z", "type": "commit"}, {"oid": "c245d89e72c17a50094586da15221e4fe07c810a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c245d89e72c17a50094586da15221e4fe07c810a", "message": "Add newline", "committedDate": "2020-10-12T05:03:59Z", "type": "commit"}, {"oid": "f323e8e461f9518f7cb71b706593ee46b9e5717f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f323e8e461f9518f7cb71b706593ee46b9e5717f", "message": "Remove unwanted comment", "committedDate": "2020-10-12T05:07:33Z", "type": "commit"}, {"oid": "646036af0136ca47aeb7b6c4c7024936d93a5e8e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/646036af0136ca47aeb7b6c4c7024936d93a5e8e", "message": "Add licence header to bal file", "committedDate": "2020-10-12T05:10:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503225300", "body": "I think parsing is correct in this scenario. `byte[]` is same as `Person[]`. Both are index-access expressions.\r\ni.e:\r\n```ballerina\r\ntype Person record {|\r\n|}\r\n\r\npublic function main() {\r\n    var x = Person[]; // ----(1)\r\n    var y = byte[]; // ----(2)\r\n}\r\n```\r\nBoth (1) and (2) are identical, in terms of syntax and semantics.\r\n\r\nIf we consider either of (1) 0r (2), compiler should give two errors:\r\n- Parser would give an error for missing index.\r\n- Semantic analyzer would give an error saying `invalid operation: type 'typedesc<int>' does not support indexing`\r\n", "bodyText": "I think parsing is correct in this scenario. byte[] is same as Person[]. Both are index-access expressions.\ni.e:\ntype Person record {|\n|}\n\npublic function main() {\n    var x = Person[]; // ----(1)\n    var y = byte[]; // ----(2)\n}\nBoth (1) and (2) are identical, in terms of syntax and semantics.\nIf we consider either of (1) 0r (2), compiler should give two errors:\n\nParser would give an error for missing index.\nSemantic analyzer would give an error saying invalid operation: type 'typedesc<int>' does not support indexing", "bodyHTML": "<p dir=\"auto\">I think parsing is correct in this scenario. <code>byte[]</code> is same as <code>Person[]</code>. Both are index-access expressions.<br>\ni.e:</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Person record {|\n|}\n\npublic function main() {\n    var x = Person[]; // ----(1)\n    var y = byte[]; // ----(2)\n}\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">Person</span> <span class=\"pl-k\">record</span> {<span class=\"pl-k\">|</span>\n<span class=\"pl-k\">|</span>}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> <span class=\"pl-smi\">main</span>() {\n    <span class=\"pl-c1\">var</span> x <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Person</span>[]; <span class=\"pl-c\">// ----(1)</span>\n    <span class=\"pl-c1\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">byte</span>[]; <span class=\"pl-c\">// ----(2)</span>\n}</pre></div>\n<p dir=\"auto\">Both (1) and (2) are identical, in terms of syntax and semantics.</p>\n<p dir=\"auto\">If we consider either of (1) 0r (2), compiler should give two errors:</p>\n<ul dir=\"auto\">\n<li>Parser would give an error for missing index.</li>\n<li>Semantic analyzer would give an error saying <code>invalid operation: type 'typedesc&lt;int&gt;' does not support indexing</code></li>\n</ul>", "author": "SupunS", "createdAt": "2020-10-12T11:19:07Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3828,6 +3828,30 @@ private STNode parseExpressionRhsInternal(OperatorPrecedence currentPrecedenceLe\n                     isInConditionalExpr);\n         }\n \n+        if (isSimpleTypeNode(lhsExpr.kind)) {", "originalCommit": "646036af0136ca47aeb7b6c4c7024936d93a5e8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNjY0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503226647", "bodyText": "I think this needs to be fixed at semantic analyzer", "author": "SupunS", "createdAt": "2020-10-12T11:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA=="}], "type": "inlineReview"}, {"oid": "4b1005ae7754dc14632d8db865684e0f8862af3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b1005ae7754dc14632d8db865684e0f8862af3f", "message": "Remove isSimpleTypeNode method", "committedDate": "2020-10-13T03:40:39Z", "type": "commit"}, {"oid": "2c0c3b6379ce5f70e72463d4867316eb8f34985d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c0c3b6379ce5f70e72463d4867316eb8f34985d", "message": "Remove BLangTypedescExpr\nConsider the simple type descs as builtin simple type reference when it is the container expression of indexed expression", "committedDate": "2020-10-13T06:05:28Z", "type": "commit"}, {"oid": "51249b35f0921ebcc5f087161a32b94706108b34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51249b35f0921ebcc5f087161a32b94706108b34", "message": "Update assert file", "committedDate": "2020-10-13T06:05:47Z", "type": "commit"}, {"oid": "1dcfe266b6a3a7399e09f76ba063cfd3a3e42b00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dcfe266b6a3a7399e09f76ba063cfd3a3e42b00", "message": "Update assert", "committedDate": "2020-10-13T06:10:00Z", "type": "commit"}, {"oid": "a8202138683fbec22f74f34704200a3c04039492", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8202138683fbec22f74f34704200a3c04039492", "message": "Hadle BLangTypedescExpr inside type checker.\nLet node transformer generate BLangTypedescExpr for memeber access with type and handle it in the type checker.", "committedDate": "2020-10-13T09:42:23Z", "type": "commit"}, {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61156777eb1ca783827bfe55d59308ed16cf4aad", "message": "Fix checkstyle", "committedDate": "2020-10-13T10:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0MTkxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504441919", "body": "Shall we use `NodeKind` to check the type of the expression?", "bodyText": "Shall we use NodeKind to check the type of the expression?", "bodyHTML": "<p dir=\"auto\">Shall we use <code>NodeKind</code> to check the type of the expression?</p>", "author": "SupunS", "createdAt": "2020-10-14T06:53:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504446155", "body": "I'm not sure if the name/description is accurate?", "bodyText": "I'm not sure if the name/description is accurate?", "bodyHTML": "<p dir=\"auto\">I'm not sure if the name/description is accurate?</p>", "author": "MaryamZi", "createdAt": "2020-10-14T07:02:46Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMjI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504602294", "bodyText": "The issue is when an array-type-descriptor is used as an expression right? Not an issue with parameters?\nFor example, even the following fails\nfunction foo(any a) returns int {\n    return 1;\n}\n\ntypedesc t = byte[];\n\nint a = foo(t);\nShall we rename and move this test to TypedescTests maybe?", "author": "MaryamZi", "createdAt": "2020-10-14T11:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNDM4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504604383", "bodyText": "+1 will move", "author": "rdulmina", "createdAt": "2020-10-14T11:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447337", "body": "Shall we change this to use an index and validate the error count?\r\n\r\n```suggestion\r\n        int index = 0;\r\n        BAssertUtil.validateError(compile, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\r\n        BAssertUtil.validateError(compile, index++, \"missing key expr in member access expr\", 20, 18);\r\n        Assert.assertEquals(compile.getErrorCount(), index);\r\n```\r\n\r\nThat way we can validate that we only get the expected errors.", "bodyText": "Shall we change this to use an index and validate the error count?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), 2);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    int index = 0;\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), index);\n          \n      \n    \n    \n  \n\nThat way we can validate that we only get the expected errors.", "bodyHTML": "<p dir=\"auto\">Shall we change this to use an index and validate the error count?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(compile<span class=\"pl-k\">.</span>getErrorCount(), <span class=\"pl-c1\">2</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">BAssertUtil</span><span class=\"pl-k\">.</span>validateError(compile, <span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>invalid operation: type 'byte' does not support indexing<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">13</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">BAssertUtil</span><span class=\"pl-k\">.</span>validateError(compile, <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>missing key expr in member access expr<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">18</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">int</span> index <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">BAssertUtil</span><span class=\"pl-k\">.</span>validateError(compile, index<span class=\"pl-k\">++</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>invalid operation: type 'byte' does not support indexing<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">13</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">BAssertUtil</span><span class=\"pl-k\">.</span>validateError(compile, index<span class=\"pl-k\">++</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>missing key expr in member access expr<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">18</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(compile<span class=\"pl-k\">.</span>getErrorCount(), index);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">That way we can validate that we only get the expected errors.</p>", "author": "MaryamZi", "createdAt": "2020-10-14T07:05:23Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n+        Assert.assertEquals(compile.getErrorCount(), 2);\n+        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447391", "body": "How about something like\r\n\r\n```suggestion\r\n        CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\r\n```", "bodyText": "How about something like\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n          \n          \n            \n                    CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "bodyHTML": "<p dir=\"auto\">How about something like</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">CompileResult</span> <span class=\"x x-first x-last\">compile</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BCompileUtil</span><span class=\"pl-k\">.</span>compile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test-src/functions/extra-parameters.bal<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">CompileResult</span> <span class=\"x x-first x-last\">compileResult</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BCompileUtil</span><span class=\"pl-k\">.</span>compile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test-src/functions/extra-parameters.bal<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-10-14T07:05:31Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0Nzc0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447742", "body": "Shall we also extract `indexBasedAccessExpr.expr` out to a variable? Seems to be used over and over again.", "bodyText": "Shall we also extract indexBasedAccessExpr.expr out to a variable? Seems to be used over and over again.", "bodyHTML": "<p dir=\"auto\">Shall we also extract <code>indexBasedAccessExpr.expr</code> out to a variable? Seems to be used over and over again.</p>", "author": "MaryamZi", "createdAt": "2020-10-14T07:06:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "27399518f933d112f9bc5aebfb3dcd5177393cb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27399518f933d112f9bc5aebfb3dcd5177393cb0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix-2", "committedDate": "2020-10-14T11:01:04Z", "type": "commit"}, {"oid": "e4ec0717c739ac0552e1352c99380434edecc74a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4ec0717c739ac0552e1352c99380434edecc74a", "message": "Update with requested changes", "committedDate": "2020-10-14T11:16:55Z", "type": "commit"}, {"oid": "cb9df238bf2be1b44873263f05e93eae1a4089f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb9df238bf2be1b44873263f05e93eae1a4089f5", "message": "Move the test case to type tests", "committedDate": "2020-10-14T12:22:08Z", "type": "commit"}, {"oid": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "message": "Fix checkstyle issue", "committedDate": "2020-10-14T16:22:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505147770", "body": "Let's move this test to org.ballerinalang.test.types.typedesc.TypedescTests as discussed. Can you also add another test similar to\r\n\r\n```ballerina\r\npublic function main() {\r\n    typedesc t = int[]|string[];\r\n}\r\n```", "bodyText": "Let's move this test to org.ballerinalang.test.types.typedesc.TypedescTests as discussed. Can you also add another test similar to\npublic function main() {\n    typedesc t = int[]|string[];\n}", "bodyHTML": "<p dir=\"auto\">Let's move this test to org.ballerinalang.test.types.typedesc.TypedescTests as discussed. Can you also add another test similar to</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    typedesc t = int[]|string[];\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-k\">typedesc</span> <span class=\"pl-smi\">t</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">int</span>[]<span class=\"pl-k\">|</span><span class=\"pl-c1\">string</span>[];\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-10-15T03:48:39Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java", "diffHunk": "@@ -67,5 +66,8 @@ public void testBlobValueNegative() {\n         BAssertUtil.validateError(result, index++, \"missing plus token\", 16, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 17, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 18, 23);\n+        BAssertUtil.validateError(result, index++, \"invalid operation: type 'byte' does not support indexing\", 19, 18);", "originalCommit": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505148117", "bodyText": "sure", "author": "rdulmina", "createdAt": "2020-10-15T03:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA=="}], "type": "inlineReview"}, {"oid": "46e0603bb6c524189325c98b2ce4c8d0cafa0f8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46e0603bb6c524189325c98b2ce4c8d0cafa0f8a", "message": "Move test case to suggested package\nMove test to org.ballerinalang.test.types.typedesc.TypedescTests and add suggested test case.", "committedDate": "2020-10-15T04:10:14Z", "type": "commit"}, {"oid": "e123c14353c38acc9975bd9070cc5491b6681fac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e123c14353c38acc9975bd9070cc5491b6681fac", "message": "Add new line", "committedDate": "2020-10-15T04:12:04Z", "type": "commit"}, {"oid": "4c9ba032204dedee6c1128f4209d6be5a9dac718", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c9ba032204dedee6c1128f4209d6be5a9dac718", "message": "Fix checkstyle issue", "committedDate": "2020-10-15T04:32:55Z", "type": "commit"}]}