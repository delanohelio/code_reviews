{"pr_number": 26306, "pr_title": "Fix issue in BLangIsLikeExpr", "pr_author": "KavinduZoysa", "pr_createdAt": "2020-10-12T06:46:24Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306", "timeline": [{"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a2574f02b6ffd943813a987235f3439d0d9fe7c", "message": "Add tests", "committedDate": "2020-10-12T06:57:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2MzY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503163659", "body": "Instead of doing this, how about just setting the bound size to the target type and then later, check the remainder of the source type members against the rest type?", "bodyText": "Instead of doing this, how about just setting the bound size to the target type and then later, check the remainder of the source type members against the rest type?", "bodyHTML": "<p dir=\"auto\">Instead of doing this, how about just setting the bound size to the target type and then later, check the remainder of the source type members against the rest type?</p>", "author": "pubudu91", "createdAt": "2020-10-12T09:30:30Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655233", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2MzY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2NzQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503167439", "body": "We can remove the else block and move this out?\r\n\r\n```suggestion\r\n            }\r\n            \r\n            int targetTypeSize = source.size() - targetTypes.size();\r\n```", "bodyText": "We can remove the else block and move this out?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            int targetTypeSize = source.size() - targetTypes.size();\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        int targetTypeSize = source.size() - targetTypes.size();", "bodyHTML": "<p dir=\"auto\">We can remove the else block and move this out?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">int</span> targetTypeSize <span class=\"pl-k\">=</span> source<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">-</span> targetTypes<span class=\"pl-k\">.</span>size();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">int</span> targetTypeSize <span class=\"pl-k\">=</span> source<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">-</span> targetTypes<span class=\"pl-k\">.</span>size();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-10-12T09:36:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655250", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2NzQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2ODQ5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503168498", "body": "```suggestion\r\n        } else if (source.size() != targetType.getTupleTypes().size()) {\r\n            return false;            \r\n        }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } else if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                        return false;            \n          \n          \n            \n                    }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2001\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2002\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (source<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">!=</span> targetType<span class=\"pl-k\">.</span>getTupleTypes()<span class=\"pl-k\">.</span>size()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2003\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2004\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2005\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2001\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (source<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">!=</span> targetType<span class=\"pl-k\">.</span>getTupleTypes()<span class=\"pl-k\">.</span>size()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2002\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;            </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"2003\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-10-12T09:38:13Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }\n+            }\n+        } else {\n+            if (source.size() != targetType.getTupleTypes().size()) {\n+                return false;\n+            }\n+        }", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655298", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2ODQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504545226", "body": "We don't need a new list now, right?", "bodyText": "We don't need a new list now, right?", "bodyHTML": "<p dir=\"auto\">We don't need a new list now, right?</p>", "author": "MaryamZi", "createdAt": "2020-10-14T09:45:36Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTg2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941863", "bodyText": "It is added, because targetType.getTupleTypes() is used several times in the method.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505148125", "bodyText": "Yeah, but since we are not updating it now we can just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n          \n          \n            \n                    List<BType> targetTypes = targetType.getTupleTypes();\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2020-10-15T03:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0OTY2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505349664", "bodyText": "Yes, changed", "author": "KavinduZoysa", "createdAt": "2020-10-15T08:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504558004", "body": "Why do we return false when sourceTypeSize == targetTypeSize ?", "bodyText": "Why do we return false when sourceTypeSize == targetTypeSize ?", "bodyHTML": "<p dir=\"auto\">Why do we return false when sourceTypeSize == targetTypeSize ?</p>", "author": "MaryamZi", "createdAt": "2020-10-14T10:06:32Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODE1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504568150", "bodyText": "The following shouldn't panic.\npublic function main() {\n    [anydata, anydata] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [int, int, int...]) {\n        panic error(\"didn't match\");\n    }\n}", "author": "MaryamZi", "createdAt": "2020-10-14T10:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941827", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504572568", "body": "Why do we have to use special methods `checkTupleElementType` and `getArrayElementType` here and in the next for loop? \r\n\r\nCan't (shouldn't) we directly call \r\n`checkIsLikeType(source.getRefValue(i), targetTypes.get(i), unresolvedValues, allowNumericConversion)`?", "bodyText": "Why do we have to use special methods checkTupleElementType and getArrayElementType here and in the next for loop?\nCan't (shouldn't) we directly call\ncheckIsLikeType(source.getRefValue(i), targetTypes.get(i), unresolvedValues, allowNumericConversion)?", "bodyHTML": "<p dir=\"auto\">Why do we have to use special methods <code>checkTupleElementType</code> and <code>getArrayElementType</code> here and in the next for loop?</p>\n<p dir=\"auto\">Can't (shouldn't) we directly call<br>\n<code>checkIsLikeType(source.getRefValue(i), targetTypes.get(i), unresolvedValues, allowNumericConversion)</code>?</p>", "author": "MaryamZi", "createdAt": "2020-10-14T10:32:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941777", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NDIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504574207", "body": "There's also an issue with this check that results in calling `checkIsType`.\r\n\r\nThe following panics even though it shouldn't because the immutable list `[1, 2]` belongs to `[byte, byte]`.\r\n\r\n```ballerina\r\npublic function main() {\r\n    [int, int] x = [1, 2];\r\n    any a = x.cloneReadOnly();\r\n\r\n    if !(a is [byte, byte]) {\r\n        panic error(\"didn't match\");\r\n    }\r\n}\r\n```", "bodyText": "There's also an issue with this check that results in calling checkIsType.\nThe following panics even though it shouldn't because the immutable list [1, 2] belongs to [byte, byte].\npublic function main() {\n    [int, int] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [byte, byte]) {\n        panic error(\"didn't match\");\n    }\n}", "bodyHTML": "<p dir=\"auto\">There's also an issue with this check that results in calling <code>checkIsType</code>.</p>\n<p dir=\"auto\">The following panics even though it shouldn't because the immutable list <code>[1, 2]</code> belongs to <code>[byte, byte]</code>.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    [int, int] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [byte, byte]) {\n        panic error(&quot;didn't match&quot;);\n    }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    [<span class=\"pl-c1\">int</span>, <span class=\"pl-c1\">int</span>] <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>];\n    <span class=\"pl-k\">any</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>.<span class=\"pl-en\">cloneReadOnly</span>();\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">!</span>(<span class=\"pl-v\">a</span> <span class=\"pl-k\">is</span> [<span class=\"pl-c1\">byte</span>, <span class=\"pl-c1\">byte</span>]) {\n        <span class=\"pl-k\">panic</span> <span class=\"pl-k\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>didn't match<span class=\"pl-pds\">\"</span></span>);\n    }\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-10-14T10:35:28Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n+            }\n+        }\n+\n+        for (int i = targetTypeSize; i < sourceTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetRestType, source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n             }\n         }\n         return true;\n+    }\n \n+    private static boolean checkTupleElementType(BType sourceElementType, BType targetElementType,\n+                                                 Object sourceRefValue, List<TypeValuePair> unresolvedValues,\n+                                                 boolean allowNumericConversion) {\n+        if (BTypes.isValueType(sourceElementType)) {", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTcwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941706", "bodyText": "Fixed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NDIwNw=="}], "type": "inlineReview"}, {"oid": "dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "message": "Check the tuple type", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "9449ef2b5218f536374b02c885025a16b4b13be4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9449ef2b5218f536374b02c885025a16b4b13be4", "message": "Add tests", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "message": "Fix Suggestions", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "message": "Fix suggestions and added more tests", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "message": "Fix suggestions and added more tests", "committedDate": "2020-10-14T20:06:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505151699", "body": "Isn't it definitely an error if `sourceTypeSize < targetTypeSize` irrespective of whether or not there is a rest descriptor? Shouldn't we check that and return false as the first check?", "bodyText": "Isn't it definitely an error if sourceTypeSize < targetTypeSize irrespective of whether or not there is a rest descriptor? Shouldn't we check that and return false as the first check?", "bodyHTML": "<p dir=\"auto\">Isn't it definitely an error if <code>sourceTypeSize &lt; targetTypeSize</code> irrespective of whether or not there is a rest descriptor? Shouldn't we check that and return false as the first check?</p>", "author": "MaryamZi", "createdAt": "2020-10-15T04:06:03Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,41 +1982,29 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n             return false;\n         }", "originalCommit": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MjA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505152074", "bodyText": "I guess we can then do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (targetRestType == null && sourceTypeSize > targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "author": "MaryamZi", "createdAt": "2020-10-15T04:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0OTY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505349699", "bodyText": "That is correct, changed.", "author": "KavinduZoysa", "createdAt": "2020-10-15T08:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ=="}], "type": "inlineReview"}, {"oid": "650a114671e8d0fbb99dd6327e12461b60f9326d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/650a114671e8d0fbb99dd6327e12461b60f9326d", "message": "Add more tests", "committedDate": "2020-10-15T08:40:35Z", "type": "commit"}]}