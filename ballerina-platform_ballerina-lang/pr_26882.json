{"pr_number": 26882, "pr_title": "Add support for included record parameters", "pr_author": "chiranSachintha", "pr_createdAt": "2020-11-12T06:20:11Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882", "timeline": [{"oid": "424b3928b31675c8b4d994b07172491f15b442db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/424b3928b31675c8b4d994b07172491f15b442db", "message": "Add initial parser changes for included record param", "committedDate": "2020-11-11T14:15:06Z", "type": "commit"}, {"oid": "be26f481f321c5ef06cfaaedd8ae7c7d522e5785", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be26f481f321c5ef06cfaaedd8ae7c7d522e5785", "message": "Disallow default values for include record parameter", "committedDate": "2020-11-11T14:16:58Z", "type": "commit"}, {"oid": "b318635414e27b52ab65d126e1135aa71c0fc56e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b318635414e27b52ab65d126e1135aa71c0fc56e", "message": "Introduce flag `included` for included record parameters", "committedDate": "2020-11-11T14:21:41Z", "type": "commit"}, {"oid": "72b5f5d94ae1d3e85c76f519aa39e770781c1703", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72b5f5d94ae1d3e85c76f519aa39e770781c1703", "message": "Allow pass field within included record param as argument to function", "committedDate": "2020-11-11T15:52:18Z", "type": "commit"}, {"oid": "78109aa34810beea5563960b5e769f3710d6ba7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78109aa34810beea5563960b5e769f3710d6ba7c", "message": "Check for inclusive included record param which allow additional fields", "committedDate": "2020-11-11T15:54:28Z", "type": "commit"}, {"oid": "30935ed324b8f0ba957bb84d11ca8ccbd2b9ac7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30935ed324b8f0ba957bb84d11ca8ccbd2b9ac7d", "message": "Introduce semantic analysis changes for included record parameter", "committedDate": "2020-11-11T17:14:39Z", "type": "commit"}, {"oid": "1c5f20474344e95f57c0c29c6a0b2ada2ff6b70c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c5f20474344e95f57c0c29c6a0b2ada2ff6b70c", "message": "Add validation for non-defaultable required record fields of included record parameters", "committedDate": "2020-11-11T17:16:16Z", "type": "commit"}, {"oid": "8125b73676670eec463093c43d6f1d15f12a9a8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8125b73676670eec463093c43d6f1d15f12a9a8d", "message": "Introduce desugar changes for included record parameter", "committedDate": "2020-11-11T20:54:22Z", "type": "commit"}, {"oid": "3550e6d715cebb02acbf87b9dc3b23d7b3d6d386", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3550e6d715cebb02acbf87b9dc3b23d7b3d6d386", "message": "Add unit tests for included record param", "committedDate": "2020-11-12T03:25:42Z", "type": "commit"}, {"oid": "6c499006b48a12792ffc5183ec0e95a70d1acb2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c499006b48a12792ffc5183ec0e95a70d1acb2c", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/diagnostics/DiagnosticErrorCode.java", "committedDate": "2020-11-12T04:01:47Z", "type": "commit"}, {"oid": "b954eae4505850dea189f83d531aba13a752e013", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b954eae4505850dea189f83d531aba13a752e013", "message": "Resolve conflicts", "committedDate": "2020-11-12T04:33:14Z", "type": "commit"}, {"oid": "bf1caab51c7acb432ce4dc32dd13dc7374d97ef3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf1caab51c7acb432ce4dc32dd13dc7374d97ef3", "message": "Add parser tests for included record parameter", "committedDate": "2020-11-12T05:20:23Z", "type": "commit"}, {"oid": "74423b7ee7b913ce10d021d899c008b271c06760", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74423b7ee7b913ce10d021d899c008b271c06760", "message": "Add parser changes for included record parameter and update tests", "committedDate": "2020-11-12T08:59:18Z", "type": "commit"}, {"oid": "74423b7ee7b913ce10d021d899c008b271c06760", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74423b7ee7b913ce10d021d899c008b271c06760", "message": "Add parser changes for included record parameter and update tests", "committedDate": "2020-11-12T08:59:18Z", "type": "forcePushed"}, {"oid": "7d506aeed5ecf875f4aab99395227bafeb0115d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d506aeed5ecf875f4aab99395227bafeb0115d0", "message": "Disable formatter test", "committedDate": "2020-11-12T09:59:22Z", "type": "commit"}, {"oid": "47dbcb2181e571d7655bd641aba1cff2e16a19a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47dbcb2181e571d7655bd641aba1cff2e16a19a0", "message": "Add unit tests for included record parameter", "committedDate": "2020-11-12T10:57:43Z", "type": "commit"}, {"oid": "0fbcf427d4a86efbc40219f72cd1a2917bb7ca44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fbcf427d4a86efbc40219f72cd1a2917bb7ca44", "message": "Validate kind of included record parameter", "committedDate": "2020-11-12T12:10:28Z", "type": "commit"}, {"oid": "da762b3396e602421d259350a4281d1e2cc18235", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da762b3396e602421d259350a4281d1e2cc18235", "message": "Check for closed included record param which allow additional fields", "committedDate": "2020-11-20T05:50:41Z", "type": "commit"}, {"oid": "b66c7af7956b46fb974e6ecec9bc4a6e7ca2587a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b66c7af7956b46fb974e6ecec9bc4a6e7ca2587a", "message": "Add unit tests for included record parameter", "committedDate": "2020-11-20T05:51:22Z", "type": "commit"}, {"oid": "b8a3ade8c2c8a0867644cdf82d93da47279ff5ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8a3ade8c2c8a0867644cdf82d93da47279ff5ef", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java", "committedDate": "2020-11-20T05:53:15Z", "type": "commit"}, {"oid": "3d4b77713af123d553e30dc68f3438518cefe689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d4b77713af123d553e30dc68f3438518cefe689", "message": "Resolve conflicts", "committedDate": "2020-11-20T06:15:44Z", "type": "commit"}, {"oid": "3d4b77713af123d553e30dc68f3438518cefe689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d4b77713af123d553e30dc68f3438518cefe689", "message": "Resolve conflicts", "committedDate": "2020-11-20T06:15:44Z", "type": "forcePushed"}, {"oid": "891df78316241f685b283f3de51f5b87e2e523a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/891df78316241f685b283f3de51f5b87e2e523a9", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "committedDate": "2020-11-21T13:15:20Z", "type": "commit"}, {"oid": "6ca32143b05791fd845cee16187a13cbe7b22462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca32143b05791fd845cee16187a13cbe7b22462", "message": "Resolved conflicts", "committedDate": "2020-11-21T13:59:57Z", "type": "commit"}, {"oid": "6ca32143b05791fd845cee16187a13cbe7b22462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca32143b05791fd845cee16187a13cbe7b22462", "message": "Resolved conflicts", "committedDate": "2020-11-21T13:59:57Z", "type": "forcePushed"}, {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "message": "Change diagnostic id for `MISSING_REQUIRED_INCLUDED_RECORD_PARAMETER_FIELD` error", "committedDate": "2020-11-21T14:34:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MzE1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283152", "body": "Shouldn't we reuse the method above?", "bodyText": "Shouldn't we reuse the method above?", "bodyHTML": "<p dir=\"auto\">Shouldn't we reuse the method above?</p>", "author": "MaryamZi", "createdAt": "2020-11-22T05:01:56Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java", "diffHunk": "@@ -450,6 +450,10 @@ public static RecordLiteralNode createRecordLiteralNode() {\n         return new BLangRecordLiteral();\n     }\n \n+    public static BLangRecordLiteral createBLangRecordLiteralNode() {\n+        return new BLangRecordLiteral();", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529731858", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MzE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Mzg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283881", "body": "Shall we format this so that `Map<String, BLangExpression> namedArgs` is on a single line?", "bodyText": "Shall we format this so that Map<String, BLangExpression> namedArgs is on a single line?", "bodyHTML": "<p dir=\"auto\">Shall we format this so that <code>Map&lt;String, BLangExpression&gt; namedArgs</code> is on a single line?</p>", "author": "MaryamZi", "createdAt": "2020-11-22T05:11:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTkxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529731919", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Mzg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528284495", "body": "Shall we extract `param.type` out to a variable outside the `for` loops?", "bodyText": "Shall we extract param.type out to a variable outside the for loops?", "bodyHTML": "<p dir=\"auto\">Shall we extract <code>param.type</code> out to a variable outside the <code>for</code> loops?</p>", "author": "MaryamZi", "createdAt": "2020-11-22T05:20:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732043", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456243", "body": "Instead of doing this, can't we rely on the `REQUIRED` flag of a record field?\r\n\r\nA record may or may not be used as an included record parameter, and unless we don't already have the necessary info in the record, IMO we should try and use whatever info already available in the record definition/type. ", "bodyText": "Instead of doing this, can't we rely on the REQUIRED flag of a record field?\nA record may or may not be used as an included record parameter, and unless we don't already have the necessary info in the record, IMO we should try and use whatever info already available in the record definition/type.", "bodyHTML": "<p dir=\"auto\">Instead of doing this, can't we rely on the <code>REQUIRED</code> flag of a record field?</p>\n<p dir=\"auto\">A record may or may not be used as an included record parameter, and unless we don't already have the necessary info in the record, IMO we should try and use whatever info already available in the record definition/type.</p>", "author": "MaryamZi", "createdAt": "2020-11-23T03:28:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1Njc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456761", "bodyText": "I don't think the current approach will work with optional fields anyway.", "author": "MaryamZi", "createdAt": "2020-11-23T03:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407592", "bodyText": "Changed. Also, work with optional fields with the new changes.", "author": "chiranSachintha", "createdAt": "2020-11-27T06:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1ODA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528458081", "body": "Why are we skipping the optional fields?\r\n\r\nThe following doesn't work atm.\r\n\r\n```ballerina\r\ntype Options record {|\r\n    string name?;\r\n|};\r\n\r\nfunction foo(int id, *Options options) {\r\n    string? name = options?.name; \r\n}\r\n\r\npublic function main() {\r\n    foo(1, name = \"bar\"); // error: undefined defaultable parameter 'name'\r\n}\r\n```\r\n\r\nShouldn't this work?", "bodyText": "Why are we skipping the optional fields?\nThe following doesn't work atm.\ntype Options record {|\n    string name?;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; \n}\n\npublic function main() {\n    foo(1, name = \"bar\"); // error: undefined defaultable parameter 'name'\n}\nShouldn't this work?", "bodyHTML": "<p dir=\"auto\">Why are we skipping the optional fields?</p>\n<p dir=\"auto\">The following doesn't work atm.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Options record {|\n    string name?;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; \n}\n\npublic function main() {\n    foo(1, name = &quot;bar&quot;); // error: undefined defaultable parameter 'name'\n}\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">Options</span> <span class=\"pl-k\">record</span> {<span class=\"pl-k\">|</span>\n    <span class=\"pl-c1\">string</span> name?;\n<span class=\"pl-k\">|</span>};\n\n<span class=\"pl-k\">function</span> foo(<span class=\"pl-c1\">int</span> <span class=\"pl-v\">id</span>, *<span class=\"pl-v\">Options</span> <span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">string</span>? name <span class=\"pl-k\">=</span> <span class=\"pl-smi\">options</span>?.<span class=\"pl-smi\">name</span>; \n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-en\">foo</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>); <span class=\"pl-c\">// error: undefined defaultable parameter 'name'</span>\n}</pre></div>\n<p dir=\"auto\">Shouldn't this work?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T03:38:05Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2378,13 +2385,34 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n                 symbol.flags |= Flags.OPTIONAL;\n                 symbol.defaultableParam = true;\n             }\n+            if (varNode.flagSet.contains(Flag.INCLUDED) && varNode.type.getKind() == TypeKind.RECORD) {\n+                symbol.flags |= Flags.INCLUDED;\n+                if (((BRecordType) varNode.type).restFieldType != symTable.noType) {\n+                    openIncludedRecordParams.add(symbol);\n+                }\n+                LinkedHashMap<String, BField> fields = ((BRecordType) varNode.type).fields;\n+                for (String field : fields.keySet()) {\n+                    if (!Symbols.isFlagOn(Flags.asMask(fields.get(field).symbol.getFlags()), Flags.OPTIONAL)) {", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjU5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732598", "bodyText": "this should be work. I misunderstood with optional fields and the disallow fields. I fixed it and now it works for optional fields also.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1ODA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464740", "body": "Isn't this count misleading? While `parameterCount` contains the individual params including the included record params, `invokableSymbol.includedRecordParams` contains all the fields from the individual included record params, the sum is therefore more than the actual param count.\r\n\r\nThe following doesn't fail atm\r\n\r\n```ballerina\r\ntype Options record {|\r\n    string name;\r\n|};\r\n\r\nfunction foo(int id, *Options options) {\r\n    string? name = options?.name; // \"baz\" is set\r\n}\r\n\r\npublic function main() {\r\n    foo(1, name = \"bar\", options = {name: \"baz\"}); // `name` is passed as an individual named arg as well as via `options`\r\n}\r\n```", "bodyText": "Isn't this count misleading? While parameterCount contains the individual params including the included record params, invokableSymbol.includedRecordParams contains all the fields from the individual included record params, the sum is therefore more than the actual param count.\nThe following doesn't fail atm\ntype Options record {|\n    string name;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; // \"baz\" is set\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"}); // `name` is passed as an individual named arg as well as via `options`\n}", "bodyHTML": "<p dir=\"auto\">Isn't this count misleading? While <code>parameterCount</code> contains the individual params including the included record params, <code>invokableSymbol.includedRecordParams</code> contains all the fields from the individual included record params, the sum is therefore more than the actual param count.</p>\n<p dir=\"auto\">The following doesn't fail atm</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Options record {|\n    string name;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; // &quot;baz&quot; is set\n}\n\npublic function main() {\n    foo(1, name = &quot;bar&quot;, options = {name: &quot;baz&quot;}); // `name` is passed as an individual named arg as well as via `options`\n}\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">Options</span> <span class=\"pl-k\">record</span> {<span class=\"pl-k\">|</span>\n    <span class=\"pl-c1\">string</span> name;\n<span class=\"pl-k\">|</span>};\n\n<span class=\"pl-k\">function</span> foo(<span class=\"pl-c1\">int</span> <span class=\"pl-v\">id</span>, *<span class=\"pl-v\">Options</span> <span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">string</span>? name <span class=\"pl-k\">=</span> <span class=\"pl-smi\">options</span>?.<span class=\"pl-smi\">name</span>; <span class=\"pl-c\">// \"baz\" is set</span>\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-en\">foo</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">options</span> <span class=\"pl-k\">=</span> {<span class=\"pl-smi\">name</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>}); <span class=\"pl-c\">// `name` is passed as an individual named arg as well as via `options`</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-23T04:16:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5302,7 +5303,8 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             switch (expr.getKind()) {\n                 case NAMED_ARGS_EXPR:\n                     foundNamedArg = true;\n-                    if (i < parameterCount) {\n+                    if (i < parameterCount + invokableSymbol.includedRecordParams.size() ||", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732788", "bodyText": "I have fixed this. Now it fails with too many arguments in call to 'foo()' error.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDg1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464850", "body": "Please recheck formatting for the new methods.", "bodyText": "Please recheck formatting for the new methods.", "bodyHTML": "<p dir=\"auto\">Please recheck formatting for the new methods.</p>", "author": "MaryamZi", "createdAt": "2020-11-23T04:17:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5571,6 +5593,28 @@ private void checkArrayLibSortFuncArgs(BLangInvocation iExpr) {\n         }\n     }\n \n+    private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n+                       BLangExpression expr, List<BVarSymbol> nonRestParams, List<BVarSymbol> includedRecordParams,\n+                                                            BVarSymbol incRecordParamAllowAdditionalFields) {", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407639", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-11-27T06:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDkxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464914", "body": "Missing the `@since` annotation", "bodyText": "Missing the @since annotation", "bodyHTML": "<p dir=\"auto\">Missing the <code>@since</code> annotation</p>", "author": "MaryamZi", "createdAt": "2020-11-23T04:17:44Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test function signatures and calling with included record params.", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzcwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407700", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-11-27T06:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528465862", "body": "Do we need these fields in `BInvokableSymbol.java`? Can't we compute this info where needed from the param list?", "bodyText": "Do we need these fields in BInvokableSymbol.java? Can't we compute this info where needed from the param list?", "bodyHTML": "<p dir=\"auto\">Do we need these fields in <code>BInvokableSymbol.java</code>? Can't we compute this info where needed from the param list?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T04:23:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529733050", "bodyText": "If we are not keeping these two fields we need to check for an open included record which allows extra fields in typechecker and desugar phase also. We can avoid the effect of repeating the same task through this.", "author": "chiranSachintha", "createdAt": "2020-11-24T16:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMzEzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531423132", "bodyText": "In desugar it's just the additional checks for two flags, right? One to see if the parameter has the INCLUDED flag and the other to see if the record is open? IMO, that is OK rather than adding these fields just for the desugar phase.", "author": "MaryamZi", "createdAt": "2020-11-27T07:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NjM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r532556389", "bodyText": "Removed includedRecordParams and incRecordParamAllowAdditionalFields fields.", "author": "chiranSachintha", "createdAt": "2020-11-30T12:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTQxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528471418", "body": "Shouldn't we check if the fields in the open record are optional and a subtype of `never`?\r\n\r\nShouldn't the following fail at compile-time?\r\n\r\n```ballerina\r\ntype Options record {|\r\n    string name;\r\n|};\r\n\r\ntype OthRecord record {|\r\n    float id?;\r\n    boolean name?;\r\n    int...;    \r\n|};\r\n\r\nfunction foo(int id, *OthRecord othRec, *Options options) {\r\n    string? name = options?.name;\r\n}\r\n\r\npublic function main() {\r\n    foo(1, name = \"bar\", options = {name: \"baz\"});\r\n}\r\n```\r\n\r\nCurrently panics at runtime.\r\n\r\n```cmd\r\n$ ballerina run test.bal \r\n\r\nCompiling source\r\n        test.bal\r\n\r\nRunning executable\r\n\r\nerror: {ballerina/lang.map}InherentTypeViolation {\"message\":\"invalid value for record field 'options': expected value of type 'int', found 'Options'\"}\r\n        at test:main(test.bal:16)\r\n```", "bodyText": "Shouldn't we check if the fields in the open record are optional and a subtype of never?\nShouldn't the following fail at compile-time?\ntype Options record {|\n    string name;\n|};\n\ntype OthRecord record {|\n    float id?;\n    boolean name?;\n    int...;    \n|};\n\nfunction foo(int id, *OthRecord othRec, *Options options) {\n    string? name = options?.name;\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"});\n}\nCurrently panics at runtime.\n$ ballerina run test.bal \n\nCompiling source\n        test.bal\n\nRunning executable\n\nerror: {ballerina/lang.map}InherentTypeViolation {\"message\":\"invalid value for record field 'options': expected value of type 'int', found 'Options'\"}\n        at test:main(test.bal:16)", "bodyHTML": "<p dir=\"auto\">Shouldn't we check if the fields in the open record are optional and a subtype of <code>never</code>?</p>\n<p dir=\"auto\">Shouldn't the following fail at compile-time?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Options record {|\n    string name;\n|};\n\ntype OthRecord record {|\n    float id?;\n    boolean name?;\n    int...;    \n|};\n\nfunction foo(int id, *OthRecord othRec, *Options options) {\n    string? name = options?.name;\n}\n\npublic function main() {\n    foo(1, name = &quot;bar&quot;, options = {name: &quot;baz&quot;});\n}\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">Options</span> <span class=\"pl-k\">record</span> {<span class=\"pl-k\">|</span>\n    <span class=\"pl-c1\">string</span> name;\n<span class=\"pl-k\">|</span>};\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">OthRecord</span> <span class=\"pl-k\">record</span> {<span class=\"pl-k\">|</span>\n    <span class=\"pl-c1\">float</span> id?;\n    <span class=\"pl-c1\">boolean</span> name?;\n    <span class=\"pl-c1\">int</span><span class=\"pl-k\">...</span>;    \n<span class=\"pl-k\">|</span>};\n\n<span class=\"pl-k\">function</span> foo(<span class=\"pl-c1\">int</span> <span class=\"pl-v\">id</span>, *<span class=\"pl-v\">OthRecord</span> <span class=\"pl-v\">othRec</span>, *<span class=\"pl-v\">Options</span> <span class=\"pl-v\">options</span>) {\n    <span class=\"pl-c1\">string</span>? name <span class=\"pl-k\">=</span> <span class=\"pl-smi\">options</span>?.<span class=\"pl-smi\">name</span>;\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-en\">foo</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">options</span> <span class=\"pl-k\">=</span> {<span class=\"pl-smi\">name</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>});\n}</pre></div>\n<p dir=\"auto\">Currently panics at runtime.</p>\n<div class=\"highlight highlight-source-batchfile position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ ballerina run test.bal \n\nCompiling source\n        test.bal\n\nRunning executable\n\nerror: {ballerina/lang.map}InherentTypeViolation {&quot;message&quot;:&quot;invalid value for record field 'options': expected value of type 'int', found 'Options'&quot;}\n        at test:main(test.bal:16)\"><pre>$ ballerina run test.bal \n\nCompiling source\n        test.bal\n\nRunning executable\n\nerror: {ballerina/lang.map}InherentTypeViolation {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>message<span class=\"pl-pds\">\"</span></span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>invalid value for record field 'options': expected value of type 'int', found 'Options'<span class=\"pl-pds\">\"</span></span>}\n        <span class=\"pl-k\">at</span> test:main(test.bal:16)</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-23T04:53:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2412,6 +2440,26 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n         invokableSymbol.type.tsymbol = functionTypeSymbol;\n     }\n \n+    private boolean isIncRecordParamAllowAdditionalFields(List<BVarSymbol> inclusiveIncludedRecordParams,\n+                                                          Set<String> requiredParamNames) {\n+        if (inclusiveIncludedRecordParams.size() != 1) {\n+            return false;\n+        }\n+\n+        LinkedHashMap<String, BField> fields = ((BRecordType) inclusiveIncludedRecordParams.get(0).type).fields;", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzE2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529733167", "bodyText": "This happens due to early mention issue. I have fixed it. This program now fails with the following errors.\nCompiling source\n        test3.bal\nERROR [test3.bal:(149:23,149:39)] redeclared symbol 'id'\nERROR [test3.bal:(149:42,149:57)] redeclared symbol 'name'\nERROR [test3.bal:(154:19,154:24)] incompatible types: expected 'boolean', found 'string'\nerror: compilation contains errors", "author": "chiranSachintha", "createdAt": "2020-11-24T16:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3OTAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528479026", "body": "Wouldn't it be better to \r\n1. iterate through the param list and identify\r\n  - all included record params of a closed record type\r\n  - the single included record param of an open record type, if present\r\n2. then iterate through the named args and add to the relevant records based on the expected names? \r\n  - if the name is present in a particular included record param, and the type is not a subtype of `never`, the field belongs to that record\r\n  - if the name is present in a particular included record param, and the type is a subtype of `never`, the field does not belongs to that record\r\n  - if the name is not present in a particular included record param, and it is an open record, the field belongs to that record", "bodyText": "Wouldn't it be better to\n\niterate through the param list and identify\n\n\nall included record params of a closed record type\nthe single included record param of an open record type, if present\n\n\nthen iterate through the named args and add to the relevant records based on the expected names?\n\n\nif the name is present in a particular included record param, and the type is not a subtype of never, the field belongs to that record\nif the name is present in a particular included record param, and the type is a subtype of never, the field does not belongs to that record\nif the name is not present in a particular included record param, and it is an open record, the field belongs to that record", "bodyHTML": "<p dir=\"auto\">Wouldn't it be better to</p>\n<ol dir=\"auto\">\n<li>iterate through the param list and identify</li>\n</ol>\n<ul dir=\"auto\">\n<li>all included record params of a closed record type</li>\n<li>the single included record param of an open record type, if present</li>\n</ul>\n<ol start=\"2\" dir=\"auto\">\n<li>then iterate through the named args and add to the relevant records based on the expected names?</li>\n</ol>\n<ul dir=\"auto\">\n<li>if the name is present in a particular included record param, and the type is not a subtype of <code>never</code>, the field belongs to that record</li>\n<li>if the name is present in a particular included record param, and the type is a subtype of <code>never</code>, the field does not belongs to that record</li>\n<li>if the name is not present in a particular included record param, and it is an open record, the field belongs to that record</li>\n</ul>", "author": "MaryamZi", "createdAt": "2020-11-23T05:33:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "originalCommit": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NTc5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r532555795", "bodyText": "Refactor the logic according to the mentioned way.", "author": "chiranSachintha", "createdAt": "2020-11-30T12:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3OTAyNg=="}], "type": "inlineReview"}, {"oid": "c06f5420e86bd1c571f5a2561673f5b7dd290de3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c06f5420e86bd1c571f5a2561673f5b7dd290de3", "message": "Change desugar and typechecker logic for included record parameter", "committedDate": "2020-11-24T14:22:05Z", "type": "commit"}, {"oid": "dacec59841da0ab53f4e9f6ca55fa0629338d56f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dacec59841da0ab53f4e9f6ca55fa0629338d56f", "message": "Add unit tests for included record parameter", "committedDate": "2020-11-24T14:22:52Z", "type": "commit"}, {"oid": "a7218698e12c524f5953ac7ca46c025a3635ca3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7218698e12c524f5953ac7ca46c025a3635ca3f", "message": "Fix review suggestions", "committedDate": "2020-11-24T14:23:24Z", "type": "commit"}, {"oid": "b00cc87aa54404fd9aea58d856b9cea7c8c5c94c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b00cc87aa54404fd9aea58d856b9cea7c8c5c94c", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/Flag.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java\n\u0001\tmisc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "committedDate": "2020-11-24T14:27:09Z", "type": "commit"}, {"oid": "d152bc1b3ad02995aded685852016efe93f49519", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d152bc1b3ad02995aded685852016efe93f49519", "message": "Resolve conflicts", "committedDate": "2020-11-24T15:19:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjAxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r530152015", "body": "Shall we rearrange the login inside for loop like this, it will be more readable,\r\n\r\n```\r\nfor (BVarSymbol symbol : invokableSymbol.params) {\r\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\r\n       continue;\r\n   }\r\n   .......\r\n   if (fields.isEmpty()) {\r\n       continue;\r\n   }\r\n   for (String field : fields.keySet()) {\r\n   }\r\n}\r\n```\r\n\r\nPlease check the other places if possible.", "bodyText": "Shall we rearrange the login inside for loop like this, it will be more readable,\nfor (BVarSymbol symbol : invokableSymbol.params) {\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n       continue;\n   }\n   .......\n   if (fields.isEmpty()) {\n       continue;\n   }\n   for (String field : fields.keySet()) {\n   }\n}\n\nPlease check the other places if possible.", "bodyHTML": "<p dir=\"auto\">Shall we rearrange the login inside for loop like this, it will be more readable,</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (BVarSymbol symbol : invokableSymbol.params) {\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n       continue;\n   }\n   .......\n   if (fields.isEmpty()) {\n       continue;\n   }\n   for (String field : fields.keySet()) {\n   }\n}\"><pre><code>for (BVarSymbol symbol : invokableSymbol.params) {\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n       continue;\n   }\n   .......\n   if (fields.isEmpty()) {\n       continue;\n   }\n   for (String field : fields.keySet()) {\n   }\n}\n</code></pre></div>\n<p dir=\"auto\">Please check the other places if possible.</p>", "author": "KavinduZoysa", "createdAt": "2020-11-25T07:17:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5303,10 +5303,25 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             return symTable.noType;\n         }\n \n-        List<BType> paramTypes = ((BInvokableType) iExpr.symbol.type).getParameterTypes();\n+        BInvokableSymbol invokableSymbol = ((BInvokableSymbol) iExpr.symbol);\n+        List<BType> paramTypes = ((BInvokableType) invokableSymbol.type).getParameterTypes();\n \n-        int parameterCount = paramTypes.size();\n+        int parameterCountForPositionalArgs = paramTypes.size();\n+        int parameterCountForNamedArgs = parameterCountForPositionalArgs + invokableSymbol.includedRecordParams.size();\n         iExpr.requiredArgs = new ArrayList<>();\n+        for (BVarSymbol symbol : invokableSymbol.params) {\n+            if (Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n+                LinkedHashMap<String, BField> fields = ((BRecordType) symbol.type).fields;\n+                if (!fields.isEmpty()) {\n+                    for (String field : fields.keySet()) {\n+                        if (fields.get(field).type.tag != TypeTags.NEVER) {\n+                            parameterCountForNamedArgs = parameterCountForNamedArgs - 1;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n ", "originalCommit": "e57bbe2670c76c5f939790b2b9c788b474f131f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407761", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-11-27T06:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjAxNQ=="}], "type": "inlineReview"}, {"oid": "f612e01fbe5c20fc46d1da6190f128e9163d7a3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f612e01fbe5c20fc46d1da6190f128e9163d7a3d", "message": "Set type of mask as long", "committedDate": "2020-11-27T06:03:55Z", "type": "commit"}, {"oid": "1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "message": "Fix review suggestions", "committedDate": "2020-11-27T06:06:28Z", "type": "forcePushed"}, {"oid": "e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "message": "Fix review suggestions", "committedDate": "2020-11-27T06:36:16Z", "type": "commit"}, {"oid": "e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "message": "Fix review suggestions", "committedDate": "2020-11-27T06:36:16Z", "type": "forcePushed"}, {"oid": "5b8c2c9e61acc9623d8e28ea307600d42e03847b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8c2c9e61acc9623d8e28ea307600d42e03847b", "message": "Fixed failing tests", "committedDate": "2020-11-27T07:12:32Z", "type": "commit"}, {"oid": "5b8c2c9e61acc9623d8e28ea307600d42e03847b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8c2c9e61acc9623d8e28ea307600d42e03847b", "message": "Fixed failing tests", "committedDate": "2020-11-27T07:12:32Z", "type": "forcePushed"}, {"oid": "a01b442d2e6b7f14b21858f53d38884d556a12ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a01b442d2e6b7f14b21858f53d38884d556a12ce", "message": "Fix review suggestions", "committedDate": "2020-11-30T11:27:05Z", "type": "commit"}, {"oid": "9d09618553348a731dcb1b6b49ebca99de2508e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d09618553348a731dcb1b6b49ebca99de2508e9", "message": "Fix review suggestions", "committedDate": "2020-11-30T12:14:40Z", "type": "commit"}, {"oid": "9d09618553348a731dcb1b6b49ebca99de2508e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d09618553348a731dcb1b6b49ebca99de2508e9", "message": "Fix review suggestions", "committedDate": "2020-11-30T12:14:40Z", "type": "forcePushed"}, {"oid": "961921fa251513364f6b496028b4d8ce6e4161ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/961921fa251513364f6b496028b4d8ce6e4161ef", "message": "Validate type of included record parameter", "committedDate": "2020-12-08T11:24:03Z", "type": "commit"}, {"oid": "1ea12819c82e9ea75598858ba28cc4ffd165b239", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ea12819c82e9ea75598858ba28cc4ffd165b239", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/diagnostics/DiagnosticErrorCode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/SyntaxKind.java\n\u0001\tmisc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "committedDate": "2020-12-08T11:29:45Z", "type": "commit"}, {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/679291dbfb6687927979c4db199f38f26f3a2e03", "message": "Fixed failing tests", "committedDate": "2020-12-08T12:10:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjE0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972144", "body": "Can we use `STNodeFactory.createEmptyNode()` instead of `null`?", "bodyText": "Can we use STNodeFactory.createEmptyNode() instead of null?", "bodyHTML": "<p dir=\"auto\">Can we use <code>STNodeFactory.createEmptyNode()</code> instead of <code>null</code>?</p>", "author": "SupunS", "createdAt": "2020-12-09T03:11:02Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1669,9 +1669,8 @@ private STNode getUpdatedParamList(STNode parameters, int index) {\n                 case REQUIRED_PARAM:\n                     STRequiredParameterNode requiredParam = (STRequiredParameterNode) param;\n                     if (isEmpty(requiredParam.paramName)) {\n-                        param = STNodeFactory\n-                                .createRequiredParameterNode(requiredParam.annotations, requiredParam.typeName,\n-                                        paramName);\n+                        param = STNodeFactory.createRequiredParameterNode(SyntaxKind.REQUIRED_PARAM,\n+                                requiredParam.annotations, null, requiredParam.typeName, paramName);", "originalCommit": "679291dbfb6687927979c4db199f38f26f3a2e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzE5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033194", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-12-09T06:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3Mjk4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972981", "body": "Will this support `function foo(@someAnnot *Bar b)`?", "bodyText": "Will this support function foo(@someAnnot *Bar b)?", "bodyHTML": "<p dir=\"auto\">Will this support <code>function foo(@someAnnot *Bar b)</code>?</p>", "author": "SupunS", "createdAt": "2020-12-09T03:13:29Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,23 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n+                inclusionSymbol = STNodeFactory.createEmptyNode();", "originalCommit": "679291dbfb6687927979c4db199f38f26f3a2e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzY5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033691", "bodyText": "Fixed. Now it works with annotations also.", "author": "chiranSachintha", "createdAt": "2020-12-09T06:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3Mjk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538974650", "body": "Do we need this second check `inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN`?", "bodyText": "Do we need this second check inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN?", "bodyHTML": "<p dir=\"auto\">Do we need this second check <code>inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN</code>?</p>", "author": "SupunS", "createdAt": "2020-12-09T03:18:35Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2047,12 +2053,18 @@ private STNode parseEllipsis() {\n      * @param paramName     Name of the parameter\n      * @return Parsed parameter node\n      */\n-    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode type,\n+    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode inclusionSymbol, STNode type,\n                                      STNode paramName) {\n         STToken nextToken = peek();\n         // Required parameters\n         if (isEndOfParameter(nextToken.kind)) {\n-            return STNodeFactory.createRequiredParameterNode(annots, type, paramName);\n+            if (inclusionSymbol != null && inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN) {", "originalCommit": "679291dbfb6687927979c4db199f38f26f3a2e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033819", "bodyText": "Removed.", "author": "chiranSachintha", "createdAt": "2020-12-09T06:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NjkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538976939", "body": "Shall we add some negative syntax tests as well?\r\ne.g: additional tokens before and after asterisk, missing tokens before and after asterisk, etc", "bodyText": "Shall we add some negative syntax tests as well?\ne.g: additional tokens before and after asterisk, missing tokens before and after asterisk, etc", "bodyHTML": "<p dir=\"auto\">Shall we add some negative syntax tests as well?<br>\ne.g: additional tokens before and after asterisk, missing tokens before and after asterisk, etc</p>", "author": "SupunS", "createdAt": "2020-12-09T03:24:56Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionParamsTest.java", "diffHunk": "@@ -66,4 +66,14 @@ public void testIncompleteBinarExprInDefaultableParams() {\n     public void testMoreParamsAfterRestParam() {\n         test(\"func-definition/func_params_source_07.bal\", \"func-definition/func_params_assert_07.json\");\n     }\n+\n+    @Test\n+    public void testIncludedRecordParam() {\n+        test(\"func-definition/func_params_source_09.bal\", \"func-definition/func_params_assert_09.json\");\n+    }\n+\n+    @Test\n+    public void testIncludedRecordParamWithDefaultValues() {\n+        test(\"func-definition/func_params_source_10.bal\", \"func-definition/func_params_assert_10.json\");\n+    }", "originalCommit": "679291dbfb6687927979c4db199f38f26f3a2e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MDQzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539050430", "bodyText": "Added.", "author": "chiranSachintha", "createdAt": "2020-12-09T06:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NjkzOQ=="}], "type": "inlineReview"}, {"oid": "76bc2730180d3afc58c64988a92708656fc2c144", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76bc2730180d3afc58c64988a92708656fc2c144", "message": "Fix review suggestions", "committedDate": "2020-12-09T05:37:53Z", "type": "commit"}, {"oid": "6ae757d98cd294e359a3d4b20aea1f664e4cb513", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ae757d98cd294e359a3d4b20aea1f664e4cb513", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/Flag.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java", "committedDate": "2020-12-09T05:43:48Z", "type": "commit"}, {"oid": "0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "message": "Add parser tests", "committedDate": "2020-12-09T07:50:34Z", "type": "commit"}, {"oid": "0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "message": "Add parser tests", "committedDate": "2020-12-09T07:50:34Z", "type": "forcePushed"}, {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "message": "Merge branch 'master' into fix-26047", "committedDate": "2020-12-09T16:05:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNjY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539836644", "body": "Parsing the inclusionSymbol in a single place like this is cleaner to me\r\n```suggestion\r\n        STNode inclusionSymbol = parseInclusionSymbol();\r\n        STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);\r\n```", "bodyText": "Parsing the inclusionSymbol in a single place like this is cleaner to me\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);\n          \n          \n            \n                    STNode inclusionSymbol = parseInclusionSymbol();\n          \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "bodyHTML": "<p dir=\"auto\">Parsing the inclusionSymbol in a single place like this is cleaner to me</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"1991\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">STNode</span> <span class=\"x x-first x-last\">type</span> <span class=\"pl-k\">=</span> <span class=\"x x-first\">parseTypeDescriptor(</span><span class=\"pl-smi x\">ParserRuleContext</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">TYPE_DESC_BEFORE_IDENTIFIER</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"1991\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">STNode</span> <span class=\"x x-first x-last\">inclusionSymbol</span> <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\">parseInclusionSymbol(</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"1992\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">STNode</span> type <span class=\"pl-k\">=</span> parseTypeDescriptor(<span class=\"pl-smi\">ParserRuleContext</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TYPE_DESC_BEFORE_IDENTIFIER</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lochana-chathura", "createdAt": "2020-12-10T04:29:24Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1978,11 +1989,10 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n         }\n \n         STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNzcyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539837729", "body": "Related to above comment.\r\n```suggestion\r\n    private STNode parseInclusionSymbol() {  \r\n        STToken nextToken = peek();\r\n        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\r\n            return consume();\r\n        } else {\r\n            return STNodeFactory.createEmptyNode();\r\n        }\r\n    }\r\n```", "bodyText": "Related to above comment.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private STNode parseAsteriskToken() {\n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        recover(nextToken, ParserRuleContext.ASTERISK);\n          \n          \n            \n                        return parseAsteriskToken();\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private STNode parseInclusionSymbol() {  \n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return STNodeFactory.createEmptyNode();\n          \n          \n            \n                    }\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">Related to above comment.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7634\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">STNode</span> parseAsteriskToken() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7635\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">STToken</span> nextToken <span class=\"pl-k\">=</span> peek();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7636\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (nextToken<span class=\"pl-k\">.</span>kind <span class=\"pl-k\">==</span> <span class=\"pl-smi\">SyntaxKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASTERISK_TOKEN</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7637\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> consume();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7638\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7639\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            recover(nextToken, <span class=\"pl-smi\">ParserRuleContext</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASTERISK</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7640\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> parseAsteriskToken();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7641\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7642\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7634\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">STNode</span> parseInclusionSymbol() {  </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7635\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">STToken</span> nextToken <span class=\"pl-k\">=</span> peek();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7636\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (nextToken<span class=\"pl-k\">.</span>kind <span class=\"pl-k\">==</span> <span class=\"pl-smi\">SyntaxKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASTERISK_TOKEN</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7637\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> consume();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7638\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7639\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">STNodeFactory</span><span class=\"pl-k\">.</span>createEmptyNode();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7640\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"7641\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lochana-chathura", "createdAt": "2020-12-10T04:32:53Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7606,6 +7626,21 @@ private STNode parseAtToken() {\n         }\n     }\n \n+    /**\n+     * Parse '*' token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseAsteriskToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+            return consume();\n+        } else {\n+            recover(nextToken, ParserRuleContext.ASTERISK);\n+            return parseAsteriskToken();\n+        }\n+    }", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Mzc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551783796", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-05T08:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNzcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848064", "body": "Why do we have to skip these tests?", "bodyText": "Why do we have to skip these tests?", "bodyHTML": "<p dir=\"auto\">Why do we have to skip these tests?</p>", "author": "SupunS", "createdAt": "2020-12-10T05:05:23Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -173,7 +173,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_10.bal\",\n+                \"func_params_source_11.bal\", \"func_params_source_13.bal\");", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDExMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784112", "bodyText": "Fixed with #27662", "author": "chiranSachintha", "createdAt": "2021-01-05T08:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Nzc4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539847780", "body": "We can directly use `consume()` here", "bodyText": "We can directly use consume() here", "bodyHTML": "<p dir=\"auto\">We can directly use <code>consume()</code> here</p>", "author": "rdulmina", "createdAt": "2020-12-10T05:04:33Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDE4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784185", "bodyText": "Fixed with #27662", "author": "chiranSachintha", "createdAt": "2021-01-05T08:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Nzc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODAzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848031", "body": "can use `consume()` and remove `parseAsteriskToken()` method", "bodyText": "can use consume() and remove parseAsteriskToken() method", "bodyHTML": "<p dir=\"auto\">can use <code>consume()</code> and remove <code>parseAsteriskToken()</code> method</p>", "author": "rdulmina", "createdAt": "2020-12-10T05:05:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }\n+                break;\n+            case ASTERISK_TOKEN:\n+                inclusionSymbol = parseAsteriskToken();", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784305", "bodyText": "Fixed with #27662", "author": "chiranSachintha", "createdAt": "2021-01-05T08:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539849624", "body": "This will not handle syntax errors that could come after annotations. We need to introduce another level to parse and recover the content after the annots.", "bodyText": "This will not handle syntax errors that could come after annotations. We need to introduce another level to parse and recover the content after the annots.", "bodyHTML": "<p dir=\"auto\">This will not handle syntax errors that could come after annotations. We need to introduce another level to parse and recover the content after the annots.</p>", "author": "SupunS", "createdAt": "2020-12-10T05:10:14Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "originalCommit": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MDc1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539860753", "bodyText": "+1 I think we need to handle recovery for the included record param", "author": "rdulmina", "createdAt": "2020-12-10T05:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539861157", "bodyText": "isn't it enough going to recovery inside the parseTypeDescriptor when there's an error followed by annotations?\nReason is error handler will never pick INSERT * as the optimal path. It will always go for the required-param, defaultable-param or rest-param", "author": "lochana-chathura", "createdAt": "2020-12-10T05:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2NTIwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539865203", "bodyText": "sorry. we can something like @untainted invalidtoken *Options options\n+1", "author": "lochana-chathura", "createdAt": "2020-12-10T05:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3OTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551779035", "bodyText": "Fixed with #26882", "author": "chiranSachintha", "createdAt": "2021-01-05T08:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}], "type": "inlineReview"}, {"oid": "4b9ea94b6bca379343bf4717758141d99947f026", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b9ea94b6bca379343bf4717758141d99947f026", "message": "Allow only record type to included parameter", "committedDate": "2020-12-10T07:14:36Z", "type": "commit"}, {"oid": "bf1539f80f5449110e99b655d695e3d483e1fbd5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf1539f80f5449110e99b655d695e3d483e1fbd5", "message": "Merge remote-tracking branch 'origin/fix-26047' into fix-26047", "committedDate": "2020-12-10T07:15:12Z", "type": "commit"}]}