{"pr_number": 27626, "pr_title": "Introduce display annotation", "pr_author": "rdhananjaya", "pr_createdAt": "2020-12-23T05:42:26Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626", "timeline": [{"oid": "d037cbecddf05960c515cf0c8bbe115dc5b2e92c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d037cbecddf05960c515cf0c8bbe115dc5b2e92c", "message": "Remove icon annot and introduce display annot", "committedDate": "2020-12-23T04:14:37Z", "type": "commit"}, {"oid": "d2e2df8c6fde7df6eddd3f2df79388a59dc9c86c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2e2df8c6fde7df6eddd3f2df79388a59dc9c86c", "message": "Rename icon to iconPath", "committedDate": "2020-12-23T06:13:12Z", "type": "commit"}, {"oid": "d2e2df8c6fde7df6eddd3f2df79388a59dc9c86c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2e2df8c6fde7df6eddd3f2df79388a59dc9c86c", "message": "Rename icon to iconPath", "committedDate": "2020-12-23T06:13:12Z", "type": "forcePushed"}, {"oid": "970b2f9469d813a057ccf4093835c23f43e0f3ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/970b2f9469d813a057ccf4093835c23f43e0f3ae", "message": "Fix compiler API test failure", "committedDate": "2020-12-23T12:00:25Z", "type": "commit"}, {"oid": "d91d20eedead2476e9f61e12de3194cddfa79527", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d91d20eedead2476e9f61e12de3194cddfa79527", "message": "Fix lang-server tests", "committedDate": "2020-12-24T10:04:42Z", "type": "commit"}, {"oid": "79156ddfd5fae80a052df9d79728af435284493f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79156ddfd5fae80a052df9d79728af435284493f", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into add-display-annot", "committedDate": "2020-12-24T10:36:30Z", "type": "commit"}, {"oid": "7827db7314cc202afe33773ea4f02ad5b04e0c2e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7827db7314cc202afe33773ea4f02ad5b04e0c2e", "message": "Fix lang-server tests", "committedDate": "2020-12-24T10:44:31Z", "type": "commit"}, {"oid": "3322c2a146a15e5a9efa8b48436015d6061b68a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3322c2a146a15e5a9efa8b48436015d6061b68a4", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into add-display-annot", "committedDate": "2021-01-05T01:23:59Z", "type": "commit"}, {"oid": "8aa2a8cb52a8bf82ed9d8e816f341c821930e112", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8aa2a8cb52a8bf82ed9d8e816f341c821930e112", "message": "Make `DisplayData` an inline record", "committedDate": "2021-01-05T05:30:39Z", "type": "commit"}, {"oid": "da7aaa52d09e15a6d2845974da85022638d0f21e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da7aaa52d09e15a6d2845974da85022638d0f21e", "message": "Fix lang-server-core tests", "committedDate": "2021-01-05T05:40:08Z", "type": "commit"}, {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ed31aa8ce34354bb9fac5358a4960ad52e8032f", "message": "Fix compiler API test", "committedDate": "2021-01-05T05:47:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354074", "body": "```suggestion\r\n    @Test void testDisplayAnnotationNegative() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test void testIconAnnotationNegative() {\n          \n          \n            \n                @Test void testDisplayAnnotationNegative() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Test</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testIconAnnotationNegative</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Test</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testDisplayAnnotationNegative</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2021-01-06T03:51:36Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)\n     public void testIconOnObjectAndMemberFunction() {\n         ClassDefinition clz = result.getAST().getClassDefinitions().get(0);\n         List<? extends AnnotationAttachmentNode> objAnnot = clz.getAnnotationAttachments();\n         Assert.assertEquals(objAnnot.size(), 1);\n-        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}.cloneReadOnly()\");\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(),\n+                \" {iconPath: barIconPath.icon,label: Bar class}.cloneReadOnly()\");\n \n         List<BLangAnnotationAttachment> attachedFuncAttachments =\n                 ((BLangClassDefinition) clz).functions.get(0).annAttachments;\n         String annotAsString =\n                 getActualExpressionFromAnnotationAttachmentExpr(attachedFuncAttachments.get(0).getExpression())\n                         .toString();\n-        Assert.assertEquals(annotAsString, \" {path: /kMemberFuncIconPath.icon}\");\n+        Assert.assertEquals(annotAsString, \" {iconPath: kMemberFuncIconPath.icon,label: k method}\");\n     }\n \n     @Test void testIconAnnotationNegative() {", "originalCommit": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDE2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354168", "body": "```suggestion\r\n    public void testDisplayOnObjectAndMemberFunction() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testIconOnObjectAndMemberFunction() {\n          \n          \n            \n                public void testDisplayOnObjectAndMemberFunction() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testIconOnObjectAndMemberFunction</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testDisplayOnObjectAndMemberFunction</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2021-01-06T03:52:04Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)\n     public void testIconOnObjectAndMemberFunction() {", "originalCommit": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354241", "body": "Can this be enabled?", "bodyText": "Can this be enabled?", "bodyHTML": "<p dir=\"auto\">Can this be enabled?</p>", "author": "MaryamZi", "createdAt": "2021-01-06T03:52:26Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)", "originalCommit": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NzMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552357332", "bodyText": "We can by removing .cloneReadOnly() bit, but then when we fix the annotation cloning issue this will fail.", "author": "rdhananjaya", "createdAt": "2021-01-06T04:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1Nzg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552357870", "bodyText": "That's OK, right? The rest will probably fail anyway so we can fix the set of tests together? WDYT?", "author": "MaryamZi", "createdAt": "2021-01-06T04:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552426332", "bodyText": "done", "author": "rdhananjaya", "createdAt": "2021-01-06T08:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}], "type": "inlineReview"}, {"oid": "2bd2b65a2e2807f25f8764481f6195213155a7cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bd2b65a2e2807f25f8764481f6195213155a7cc", "message": "Apply suggestions from code review\n\nCo-authored-by: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2021-01-06T04:06:11Z", "type": "commit"}, {"oid": "13b459afb67675187ccf5dfcac442d02d96b1da1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13b459afb67675187ccf5dfcac442d02d96b1da1", "message": "Make iconPath optional", "committedDate": "2021-01-06T08:01:37Z", "type": "commit"}, {"oid": "381faf446addf8c8af072721201bbbd88f8bb69b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/381faf446addf8c8af072721201bbbd88f8bb69b", "message": "Apply review suggestion", "committedDate": "2021-01-06T12:37:29Z", "type": "commit"}]}