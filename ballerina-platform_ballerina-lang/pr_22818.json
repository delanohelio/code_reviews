{"pr_number": 22818, "pr_title": "Support module-var-decl inside module init", "pr_author": "KavinduZoysa", "pr_createdAt": "2020-04-21T14:36:22Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818", "timeline": [{"oid": "114baf5353b335ffe3b73a96aea73ca8b3ae7078", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/114baf5353b335ffe3b73a96aea73ca8b3ae7078", "message": "Fix failure unit tests", "committedDate": "2020-04-23T17:41:30Z", "type": "forcePushed"}, {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c124d2aca1839631a99ff5ad2c04d9de38622442", "message": "Add negative tests", "committedDate": "2020-04-24T07:12:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415424656", "body": "```suggestion\r\n        return node.getKind() == NodeKind.FUNCTION &&\r\n                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (node<span class=\"pl-k\">.</span>getKind() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">NodeKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FUNCTION</span> <span class=\"pl-k\">&amp;&amp;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Names</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USER_DEFINED_INIT_SUFFIX</span><span class=\"pl-k\">.</span>value<span class=\"pl-k\">.</span>equals(((<span class=\"pl-smi\">BLangFunction</span>) node)<span class=\"pl-k\">.</span>name<span class=\"pl-k\">.</span>value)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> node<span class=\"pl-k\">.</span>getKind() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">NodeKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FUNCTION</span> <span class=\"pl-k\">&amp;&amp;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">Names</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>USER_DEFINED_INIT_SUFFIX</span><span class=\"pl-k\">.</span>value<span class=\"pl-k\">.</span>equals(((<span class=\"pl-smi\">BLangFunction</span>) node)<span class=\"pl-k\">.</span>name<span class=\"pl-k\">.</span>value);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-04-26T23:17:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519481", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427137", "body": "Shall we replace this with a simple for-each loop?", "bodyText": "Shall we replace this with a simple for-each loop?", "bodyHTML": "<p dir=\"auto\">Shall we replace this with a simple for-each loop?</p>", "author": "MaryamZi", "createdAt": "2020-04-26T23:31:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519448", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427215", "body": "Shouldn't this be \r\n```suggestion\r\n    private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {\r\n```", "bodyText": "Shouldn't this be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {\n          \n          \n            \n                private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {", "bodyHTML": "<p dir=\"auto\">Shouldn't this be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">checkForUninitializedGlobalVar</span>(<span class=\"pl-k\">List&lt;<span class=\"pl-smi\">BLangSimpleVariable</span>&gt;</span> globalVars) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">checkForUninitializedGlobalVars</span>(<span class=\"pl-k\">List&lt;<span class=\"pl-smi\">BLangSimpleVariable</span>&gt;</span> globalVars) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-04-26T23:31:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {\n+        this.currDependentSymbol.push(funcNode.symbol);\n+        SymbolEnv funcEnv = SymbolEnv.createFunctionEnv(funcNode, funcNode.symbol.scope, env);\n+        analyzeNode(funcNode.body, funcEnv);\n+        this.currDependentSymbol.pop();\n+    }\n+\n+    private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519441", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415429814", "body": "Shall we rename the existing `UNINITIALIZED_VARIABLE` (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269) error to something like `USAGE_OF_UNINITIALIZED_VARIABLE` and call this `UNINITIALIZED_VARIABLE` instead?", "bodyText": "Shall we rename the existing UNINITIALIZED_VARIABLE (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269) error to something like USAGE_OF_UNINITIALIZED_VARIABLE and call this UNINITIALIZED_VARIABLE instead?", "bodyHTML": "<p dir=\"auto\">Shall we rename the existing <code>UNINITIALIZED_VARIABLE</code> (<a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269\">https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269</a>) error to something like <code>USAGE_OF_UNINITIALIZED_VARIABLE</code> and call this <code>UNINITIALIZED_VARIABLE</code> instead?</p>", "author": "MaryamZi", "createdAt": "2020-04-26T23:45:12Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -267,6 +267,7 @@\n     INVALID_PATTERN_CLAUSES_IN_MATCH_STMT(\"invalid.pattern.clauses.in.match.stmt\"),\n     STATIC_MATCH_ONLY_SUPPORTS_ANYDATA(\"static.value.match.only.supports.anydata\"),\n     UNINITIALIZED_VARIABLE(\"uninitialized.variable\"),\n+    UNINITIALIZED_MODULE_VARIABLE(\"uninitialized.module.variable\"),", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519429", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415431175", "body": "Shouldn't this be done irrespective of whether a user-specified module init exists?\r\n\r\nThe following two scenarios would produce two different sets of errors atm?\r\n\r\nCase I\r\n```ballerina\r\nint i;\r\n\r\nfunction __init() {\r\n\r\n}\r\n\r\npublic function main() {\r\n   int j = i;\r\n}\r\n```\r\n\r\nCase II\r\n```ballerina\r\nint i;\r\n\r\npublic function main() {\r\n   int j = i;\r\n}\r\n```", "bodyText": "Shouldn't this be done irrespective of whether a user-specified module init exists?\nThe following two scenarios would produce two different sets of errors atm?\nCase I\nint i;\n\nfunction __init() {\n\n}\n\npublic function main() {\n   int j = i;\n}\nCase II\nint i;\n\npublic function main() {\n   int j = i;\n}", "bodyHTML": "<p dir=\"auto\">Shouldn't this be done irrespective of whether a user-specified module init exists?</p>\n<p dir=\"auto\">The following two scenarios would produce two different sets of errors atm?</p>\n<p dir=\"auto\">Case I</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int i;\n\nfunction __init() {\n\n}\n\npublic function main() {\n   int j = i;\n}\"><pre><span class=\"pl-c1\">int</span> i;\n\n<span class=\"pl-k\">function</span> __init() {\n\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n   <span class=\"pl-c1\">int</span> j <span class=\"pl-k\">=</span> <span class=\"pl-smi\">i</span>;\n}</pre></div>\n<p dir=\"auto\">Case II</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int i;\n\npublic function main() {\n   int j = i;\n}\"><pre><span class=\"pl-c1\">int</span> i;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n   <span class=\"pl-c1\">int</span> j <span class=\"pl-k\">=</span> <span class=\"pl-smi\">i</span>;\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-04-26T23:52:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519402", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415441877", "body": "Incorrect version.", "bodyText": "Incorrect version.", "bodyHTML": "<p dir=\"auto\">Incorrect version.</p>", "author": "MaryamZi", "createdAt": "2020-04-27T00:45:16Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519394", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415442339", "body": "Do we need a new class anyway? Can't we have these in `GlobalVarNegativeTest`?", "bodyText": "Do we need a new class anyway? Can't we have these in GlobalVarNegativeTest?", "bodyHTML": "<p dir=\"auto\">Do we need a new class anyway? Can't we have these in <code>GlobalVarNegativeTest</code>?</p>", "author": "MaryamZi", "createdAt": "2020-04-27T00:47:18Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2\n+ */\n+public class ModuleVarDeclareNegative {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzAwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r422663005", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-10T15:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415445533", "body": "Why do we do a separate analysis for the module init?\r\n\r\nAnyway, we're missing annotation validations from `visit(BLangFunction funcNode)`.\r\n\r\nFor example,\r\n\r\n```ballerina\r\nannotation map<int> Foo on function;\r\n\r\nint i; // uninitialized variable 'i'\r\n\r\n@Foo {\r\n    i // NO error, expected `variable 'i' is not initialized`\r\n}\r\nfunction __init() {\r\n}\r\n\r\n@Foo {\r\n    i // variable 'i' is not initialized\r\n}\r\npublic function main() {\r\n   int j = i; // variable 'i' is not initialized\r\n}\r\n```", "bodyText": "Why do we do a separate analysis for the module init?\nAnyway, we're missing annotation validations from visit(BLangFunction funcNode).\nFor example,\nannotation map<int> Foo on function;\n\nint i; // uninitialized variable 'i'\n\n@Foo {\n    i // NO error, expected `variable 'i' is not initialized`\n}\nfunction __init() {\n}\n\n@Foo {\n    i // variable 'i' is not initialized\n}\npublic function main() {\n   int j = i; // variable 'i' is not initialized\n}", "bodyHTML": "<p dir=\"auto\">Why do we do a separate analysis for the module init?</p>\n<p dir=\"auto\">Anyway, we're missing annotation validations from <code>visit(BLangFunction funcNode)</code>.</p>\n<p dir=\"auto\">For example,</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"annotation map&lt;int&gt; Foo on function;\n\nint i; // uninitialized variable 'i'\n\n@Foo {\n    i // NO error, expected `variable 'i' is not initialized`\n}\nfunction __init() {\n}\n\n@Foo {\n    i // variable 'i' is not initialized\n}\npublic function main() {\n   int j = i; // variable 'i' is not initialized\n}\"><pre><span class=\"pl-k\">annotation</span> <span class=\"pl-k\">map</span><span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">int</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-k\">on</span> <span class=\"pl-k\">function</span>;\n\n<span class=\"pl-c1\">int</span> i; <span class=\"pl-c\">// uninitialized variable 'i'</span>\n\n@<span class=\"pl-c1\">Foo</span> {\n    <span class=\"pl-smi\">i</span> <span class=\"pl-c\">// NO error, expected `variable 'i' is not initialized`</span>\n}\n<span class=\"pl-k\">function</span> __init() {\n}\n\n@<span class=\"pl-c1\">Foo</span> {\n    <span class=\"pl-smi\">i</span> <span class=\"pl-c\">// variable 'i' is not initialized</span>\n}\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n   <span class=\"pl-c1\">int</span> j <span class=\"pl-k\">=</span> <span class=\"pl-smi\">i</span>; <span class=\"pl-c\">// variable 'i' is not initialized</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-04-27T01:01:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519327", "bodyText": "In current implementation Analyse function call the analyzeBranch method and it does not modify uninitializedVars. Because module-level variables cannot be initialized in function (same as __init() in the object).  But in this scenario, if we see some variable is initialized we need to update that map. Annotations are validated.", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw=="}], "type": "inlineReview"}, {"oid": "54dee5e12c75c7c9fb9e1d5340500d34709106a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54dee5e12c75c7c9fb9e1d5340500d34709106a1", "message": "Fix the suggestions", "committedDate": "2020-04-27T05:45:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r416321520", "body": "we need to analyze the init function before any other function.\r\nConsider blow \r\n```ballerina\r\nimport ballerina/io;\r\n\r\npublic function main() {\r\n    io:println(\"hello\");\r\n    io:println(s);\r\n}\r\n\r\nfunction __init() {\r\n    s = \"hello\";\r\n}\r\nstring s;\r\n```", "bodyText": "we need to analyze the init function before any other function.\nConsider blow\nimport ballerina/io;\n\npublic function main() {\n    io:println(\"hello\");\n    io:println(s);\n}\n\nfunction __init() {\n    s = \"hello\";\n}\nstring s;", "bodyHTML": "<p dir=\"auto\">we need to analyze the init function before any other function.<br>\nConsider blow</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import ballerina/io;\n\npublic function main() {\n    io:println(&quot;hello&quot;);\n    io:println(s);\n}\n\nfunction __init() {\n    s = &quot;hello&quot;;\n}\nstring s;\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">ballerina</span>/<span class=\"pl-smi\">io</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-smi\">io</span><span class=\"pl-k\">:</span><span class=\"pl-en\">println</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-smi\">io</span><span class=\"pl-k\">:</span><span class=\"pl-en\">println</span>(<span class=\"pl-v\">s</span>);\n}\n\n<span class=\"pl-k\">function</span> __init() {\n    <span class=\"pl-smi\">s</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>;\n}\n<span class=\"pl-c1\">string</span> s;</pre></div>", "author": "rdhananjaya", "createdAt": "2020-04-28T04:41:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        for (TopLevelNode topLevelNode : sortedListOfNodes) {", "originalCommit": "54dee5e12c75c7c9fb9e1d5340500d34709106a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424377463", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-13T11:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA=="}], "type": "inlineReview"}, {"oid": "571e2a8fee1eb20f2395cdc51953d1a2b0e18856", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/571e2a8fee1eb20f2395cdc51953d1a2b0e18856", "message": "Support module var decl inside module init", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "7aa790d77eb0f6bf114a58d357d0de0ee25ed80b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7aa790d77eb0f6bf114a58d357d0de0ee25ed80b", "message": "Add unit tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "71c2fcbd7817c51763923c24384f615603f4ff13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71c2fcbd7817c51763923c24384f615603f4ff13", "message": "Fix failure unit tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "7801346c874c5144396a1340f807b8da2cf4c0f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7801346c874c5144396a1340f807b8da2cf4c0f1", "message": "Add negative tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "d1c26b2aa80cebca38fee819857c761302dda278", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c26b2aa80cebca38fee819857c761302dda278", "message": "Fix the suggestions", "committedDate": "2020-05-10T13:06:46Z", "type": "commit"}, {"oid": "e01c0bd5cd72799d5bec2ef8f1a261cfb323cc67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e01c0bd5cd72799d5bec2ef8f1a261cfb323cc67", "message": "Add more tests", "committedDate": "2020-05-10T13:06:46Z", "type": "commit"}, {"oid": "e4a164a98981a04e53c09aca5a4b62d71f738582", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a164a98981a04e53c09aca5a4b62d71f738582", "message": "Fix the conflicts", "committedDate": "2020-05-10T13:08:06Z", "type": "commit"}, {"oid": "e4a164a98981a04e53c09aca5a4b62d71f738582", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a164a98981a04e53c09aca5a4b62d71f738582", "message": "Fix the conflicts", "committedDate": "2020-05-10T13:08:06Z", "type": "forcePushed"}, {"oid": "8b16758f02f48605ee0e07f408209655eee92ef4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b16758f02f48605ee0e07f408209655eee92ef4", "message": "Fix checkstyle", "committedDate": "2020-05-10T14:44:50Z", "type": "commit"}, {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "message": "Fix failure tests", "committedDate": "2020-05-10T18:03:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424437216", "body": "This test-case is failing intermittently. Shall I disable it for now? ", "bodyText": "This test-case is failing intermittently. Shall I disable it for now?", "bodyHTML": "<p dir=\"auto\">This test-case is failing intermittently. Shall I disable it for now?</p>", "author": "hasithaa", "createdAt": "2020-05-13T13:28:41Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,12 +33,38 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 6);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n         BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n         BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 32);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 27);\n-        BAssertUtil.validateError(resultNegative, 4, \"mismatched input ';'. expecting '='\", 35, 46);\n-        BAssertUtil.validateError(resultNegative, 5, \"mismatched input ';'. expecting '='\", 37, 59);\n+        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n+        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef/global_variable_init_negative\" +\n+                \".bal\");\n+\n+        Assert.assertEquals(result.getErrorCount(), 8);\n+        int i = 0;\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'i'\", 17, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 's'\", 18, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'a'\", 19, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'b'\", 20, 1);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 25, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 31, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'a' is not initialized\", 39, 13);\n+        BAssertUtil.validateError(result, i, \"variable 's' is not initialized\", 40, 18);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitWithInvocationNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef\" +", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424440352", "bodyText": "created #23211 to track this.", "author": "hasithaa", "createdAt": "2020-05-13T13:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTc0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424605749", "body": "Invalid changes. Will be fixed in the consolidated PR with d687c13.", "bodyText": "Invalid changes. Will be fixed in the consolidated PR with d687c13.", "bodyHTML": "<p dir=\"auto\">Invalid changes. Will be fixed in the consolidated PR with <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/ballerina-platform/ballerina-lang/commit/d687c135d73cb8b4c31f13fcfc4e88b05c09c6e9/hovercard\" href=\"https://github.com/ballerina-platform/ballerina-lang/commit/d687c135d73cb8b4c31f13fcfc4e88b05c09c6e9\"><tt>d687c13</tt></a>.</p>", "author": "MaryamZi", "createdAt": "2020-05-13T17:22:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaLexer.g4 by ANTLR 4.5.3\n+// Generated from /home/kavindu/WSO2-GIT/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaLexer.g4 by ANTLR 4.5.3", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NzE5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424647198", "body": "Can't we avoid iterating through all the nodes twice + checking for existence by doing something like\r\n\r\n```java\r\n        for (TopLevelNode node : pkgNode.topLevelNodes) {\r\n            if (isModuleInitFunction((BLangNode) node)) {\r\n                sortedListOfNodes.add(0, node);\r\n                continue;\r\n            }\r\n\r\n            sortedListOfNodes.add(node);\r\n        }\r\n```", "bodyText": "Can't we avoid iterating through all the nodes twice + checking for existence by doing something like\n        for (TopLevelNode node : pkgNode.topLevelNodes) {\n            if (isModuleInitFunction((BLangNode) node)) {\n                sortedListOfNodes.add(0, node);\n                continue;\n            }\n\n            sortedListOfNodes.add(node);\n        }", "bodyHTML": "<p dir=\"auto\">Can't we avoid iterating through all the nodes twice + checking for existence by doing something like</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        for (TopLevelNode node : pkgNode.topLevelNodes) {\n            if (isModuleInitFunction((BLangNode) node)) {\n                sortedListOfNodes.add(0, node);\n                continue;\n            }\n\n            sortedListOfNodes.add(node);\n        }\"><pre>        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">TopLevelNode</span> node <span class=\"pl-k\">:</span> pkgNode<span class=\"pl-k\">.</span>topLevelNodes) {\n            <span class=\"pl-k\">if</span> (isModuleInitFunction((<span class=\"pl-smi\">BLangNode</span>) node)) {\n                sortedListOfNodes<span class=\"pl-k\">.</span>add(<span class=\"pl-c1\">0</span>, node);\n                <span class=\"pl-k\">continue</span>;\n            }\n\n            sortedListOfNodes<span class=\"pl-k\">.</span>add(node);\n        }</pre></div>", "author": "MaryamZi", "createdAt": "2020-05-13T18:31:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -268,19 +268,64 @@ public void visit(BLangPackage pkgNode) {\n \n         // Rearrange the top level nodes so that global variables come on top\n         List<TopLevelNode> sortedListOfNodes = new ArrayList<>(pkgNode.globalVars);\n-        pkgNode.topLevelNodes.forEach(topLevelNode -> {\n-            if (!sortedListOfNodes.contains(topLevelNode)) {\n-                sortedListOfNodes.add(topLevelNode);\n+        addModuleInitToSortedNodeList(pkgNode, sortedListOfNodes);\n+        addNodesToSortedNodeList(pkgNode, sortedListOfNodes);", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NzA0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424657040", "body": "We can check the inverse and return early\r\n```suggestion\r\n        if (!env.isModuleInit) {\r\n            return true;\r\n        }\r\n        boolean isFirstUninitializedField = true;\r\n        StringBuilder uninitializedFields = new StringBuilder();\r\n        for (BSymbol symbol : this.uninitializedVars.keySet()) {\r\n            if (isFirstUninitializedField) {\r\n                uninitializedFields = new StringBuilder(symbol.getName().value);\r\n                isFirstUninitializedField = false;\r\n            } else {\r\n                uninitializedFields.append(\", \").append(symbol.getName().value);\r\n            }\r\n        }\r\n        \r\n        if (uninitializedFields.length() != 0) {\r\n            this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\r\n                            uninitializedFields.toString());\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n```", "bodyText": "We can check the inverse and return early\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (env.isModuleInit) {\n          \n          \n            \n                        boolean isFirstUninitializedField = true;\n          \n          \n            \n                        StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                        for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                            if (isFirstUninitializedField) {\n          \n          \n            \n                                uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                                isFirstUninitializedField = false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if (uninitializedFields.length() != 0) {\n          \n          \n            \n                            this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                    uninitializedFields.toString());\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    if (!env.isModuleInit) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    boolean isFirstUninitializedField = true;\n          \n          \n            \n                    StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                    for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                        if (isFirstUninitializedField) {\n          \n          \n            \n                            uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                            isFirstUninitializedField = false;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (uninitializedFields.length() != 0) {\n          \n          \n            \n                        this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                        uninitializedFields.toString());\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    return true;", "bodyHTML": "<p dir=\"auto\">We can check the inverse and return early</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"930\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (env<span class=\"pl-k\">.</span>isModuleInit) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"931\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">boolean</span> isFirstUninitializedField <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"932\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">StringBuilder</span> uninitializedFields <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"933\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">BSymbol</span> symbol <span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>uninitializedVars<span class=\"pl-k\">.</span>keySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"934\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (isFirstUninitializedField) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"935\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    uninitializedFields <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>(symbol<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"936\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    isFirstUninitializedField <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"937\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"938\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    uninitializedFields<span class=\"pl-k\">.</span>append(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, <span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>append(symbol<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"939\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"940\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"941\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (uninitializedFields<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"942\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>dlog<span class=\"pl-k\">.</span>error(pos, <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONTAINS_UNINITIALIZED_VARIABLES</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"943\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        uninitializedFields<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"944\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"945\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"946\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"947\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"930\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>env<span class=\"pl-k\">.</span>isModuleInit) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"931\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"932\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"933\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">boolean</span> isFirstUninitializedField <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"934\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">StringBuilder</span> uninitializedFields <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"935\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">BSymbol</span> symbol <span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>uninitializedVars<span class=\"pl-k\">.</span>keySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"936\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (isFirstUninitializedField) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"937\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                uninitializedFields <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>(symbol<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"938\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                isFirstUninitializedField <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"939\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"940\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                uninitializedFields<span class=\"pl-k\">.</span>append(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, <span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>append(symbol<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"941\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"942\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"943\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"944\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (uninitializedFields<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"945\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>dlog<span class=\"pl-k\">.</span>error(pos, <span class=\"pl-smi\">DiagnosticCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONTAINS_UNINITIALIZED_VARIABLES</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"946\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            uninitializedFields<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"947\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"948\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"949\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"950\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-05-13T18:47:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -877,6 +926,27 @@ private boolean isFieldsInitializedForSelfInvocation(List<BLangExpression> argEx\n         return true;\n     }\n \n+    private boolean isGlobalVarsInitialized(DiagnosticPos pos) {\n+        if (env.isModuleInit) {\n+            boolean isFirstUninitializedField = true;\n+            StringBuilder uninitializedFields = new StringBuilder();\n+            for (BSymbol symbol : this.uninitializedVars.keySet()) {\n+                if (isFirstUninitializedField) {\n+                    uninitializedFields = new StringBuilder(symbol.getName().value);\n+                    isFirstUninitializedField = false;\n+                } else {\n+                    uninitializedFields.append(\", \").append(symbol.getName().value);\n+                }\n+            }\n+            if (uninitializedFields.length() != 0) {\n+                this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n+                        uninitializedFields.toString());\n+                return false;\n+            }\n+        }\n+        return true;", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424670582", "body": "Why are we adding this to the SymbolEnv? IMO this doesn't belong here. \r\n\r\nLooking at the usage, can't we just use a boolean in the DataflowAnalyzer which we set and unset in `analyzeModuleInitFunc`? Like we generally do in CodeAnalyzer? https://github.com/ballerina-platform/ballerina-lang/blob/6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java#L252", "bodyText": "Why are we adding this to the SymbolEnv? IMO this doesn't belong here.\nLooking at the usage, can't we just use a boolean in the DataflowAnalyzer which we set and unset in analyzeModuleInitFunc? Like we generally do in CodeAnalyzer? \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n    \n    \n         Line 252\n      in\n      6fc33a0\n    \n    \n    \n    \n\n        \n          \n           private boolean isJSONContext;", "bodyHTML": "<p dir=\"auto\">Why are we adding this to the SymbolEnv? IMO this doesn't belong here.</p>\n<p dir=\"auto\">Looking at the usage, can't we just use a boolean in the DataflowAnalyzer which we set and unset in <code>analyzeModuleInitFunc</code>? Like we generally do in CodeAnalyzer? <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java#L252\">ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 252\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/ballerina-platform/ballerina-lang/commit/6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5\">6fc33a0</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L252\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"252\"></td>\n          <td id=\"LC252\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">private</span> <span class=\"pl-k\">boolean</span> isJSONContext; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "MaryamZi", "createdAt": "2020-05-13T19:11:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolEnv.java", "diffHunk": "@@ -75,6 +75,8 @@\n \n     public int relativeEnvCount;\n \n+    public boolean isModuleInit;", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}