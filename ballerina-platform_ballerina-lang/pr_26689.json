{"pr_number": 26689, "pr_title": "Add support for empty XML value", "pr_author": "suleka96", "pr_createdAt": "2020-10-31T00:12:15Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689", "timeline": [{"oid": "ec6228890c1ddc7f0b7ad7d007470775da930516", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec6228890c1ddc7f0b7ad7d007470775da930516", "message": "Create XML literal when no child buckets", "committedDate": "2020-10-20T03:47:43Z", "type": "commit"}, {"oid": "02d13055fd4415952ee7b8007bbc28d5ae81acf8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02d13055fd4415952ee7b8007bbc28d5ae81acf8", "message": "Fix parser crash", "committedDate": "2020-10-24T09:27:31Z", "type": "commit"}, {"oid": "fd6504932a51833979e3487291357491365f6d8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd6504932a51833979e3487291357491365f6d8f", "message": "Assign xml<never> type to xml:Text", "committedDate": "2020-10-28T08:52:47Z", "type": "commit"}, {"oid": "f4410f764fe15da17d0962acd6a694e0413e64a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4410f764fe15da17d0962acd6a694e0413e64a0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge latest changes", "committedDate": "2020-10-28T14:41:05Z", "type": "commit"}, {"oid": "09a04fe31d22c2fc28a57a428bca73a269ee9bc3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/09a04fe31d22c2fc28a57a428bca73a269ee9bc3", "message": "Implement logic for xml<never> check", "committedDate": "2020-10-28T22:41:47Z", "type": "commit"}, {"oid": "e50b150338dee562affb9aad71dde7fde50e04ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e50b150338dee562affb9aad71dde7fde50e04ad", "message": "Add tests", "committedDate": "2020-10-30T23:59:02Z", "type": "commit"}, {"oid": "f0cf9e5870146c297f81d5367ffd88bde1e537d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0cf9e5870146c297f81d5367ffd88bde1e537d7", "message": "Refactor code", "committedDate": "2020-10-31T01:11:10Z", "type": "commit"}, {"oid": "a99748fe1950a7e0bceb37c8b334d52483b2eb06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a99748fe1950a7e0bceb37c8b334d52483b2eb06", "message": "Refactor code", "committedDate": "2020-10-31T02:12:34Z", "type": "commit"}, {"oid": "6d05e7b2a6d288e25ebabbe3936b66f73f764344", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d05e7b2a6d288e25ebabbe3936b66f73f764344", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge with upstream", "committedDate": "2020-10-31T02:13:45Z", "type": "commit"}, {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd78b7d130e189596b2fe9a4548042d35c48065c", "message": "Undo change in BIRPackageSymbolEnter", "committedDate": "2020-10-31T02:23:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546350", "body": "Since an XML text value is inherently immutable, can't we check if `data` is empty, and set `xml<never>` as the type in the constructor of `XMLText` itself?", "bodyText": "Since an XML text value is inherently immutable, can't we check if data is empty, and set xml<never> as the type in the constructor of XMLText itself?", "bodyHTML": "<p dir=\"auto\">Since an XML text value is inherently immutable, can't we check if <code>data</code> is empty, and set <code>xml&lt;never&gt;</code> as the type in the constructor of <code>XMLText</code> itself?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:00:02Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/values/XMLText.java", "diffHunk": "@@ -142,6 +142,9 @@ public int hashCode() {\n \n     @Override\n     public Type getType() {\n+        if (this.data.isEmpty()) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0MDA4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r521240082", "bodyText": "Checks like :\nstring empty = \"\";\n'xml:Text a = xml `${empty}`;\nany y = a;\nassertEquality(y is xml<never>, true);\n\nfail if it is put in the constructor. The values seem to be getting resolved after the constructor is called.", "author": "suleka96", "createdAt": "2020-11-11T09:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NjY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527496681", "bodyText": "Wouldn't adding\nthis.type = data.isEmpty() ? PredefinedTypes.TYPE_XML_NEVER : PredefinedTypes.TYPE_TEXT;\nto the constructor and updating getType as\n    @Override\n    public Type getType() {\n        return this.type;\n    }\nwork?", "author": "MaryamZi", "createdAt": "2020-11-20T07:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546478", "body": "```suggestion\r\n        } \r\n        \r\n        if (TypeTags.isXMLTypeTag(sourceTag)) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (TypeTags.isXMLTypeTag(sourceTag)) {\n          \n          \n            \n                    } \n          \n          \n            \n                    \n          \n          \n            \n                    if (TypeTags.isXMLTypeTag(sourceTag)) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k x x-first\">else</span><span class=\"x\"> </span><span class=\"pl-k x\">if</span><span class=\"x\"> (</span><span class=\"pl-smi x\">TypeTags</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isXMLTypeTag(sourceTag)) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">TypeTags</span><span class=\"pl-k\">.</span>isXMLTypeTag(sourceTag)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-03T10:00:14Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -896,8 +898,14 @@ private static boolean checkIsXMLType(Type sourceType, Type targetType, List<Typ\n             }\n             return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n                     unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n-            return checkIsType(sourceType, target.constraint, unresolvedTypes);\n+        } else if (TypeTags.isXMLTypeTag(sourceTag)) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjczNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546735", "body": "How about \r\n```suggestion\r\n    public static final XMLType TYPE_XML_NEVER = new BXMLType(TypeConstants.XML_TEXT,\r\n```\r\ninstead?", "bodyText": "How about\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final XMLType TYPE_TEXT_NEVER = new BXMLType(TypeConstants.XML_TEXT,\n          \n          \n            \n                public static final XMLType TYPE_XML_NEVER = new BXMLType(TypeConstants.XML_TEXT,\n          \n      \n    \n    \n  \n\ninstead?", "bodyHTML": "<p dir=\"auto\">How about</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">XMLType</span> <span class=\"pl-c1 x x-first x-last\">TYPE_TEXT_NEVER</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BXMLType</span>(<span class=\"pl-smi\">TypeConstants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>XML_TEXT</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">XMLType</span> <span class=\"pl-c1 x x-first x-last\">TYPE_XML_NEVER</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BXMLType</span>(<span class=\"pl-smi\">TypeConstants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>XML_TEXT</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">instead?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:00:36Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -140,6 +140,10 @@\n                                                          new Module(BALLERINA_BUILTIN_PKG_PREFIX, XML_LANG_LIB, null),\n                                                          TypeTags.XML_TEXT_TAG, true);\n \n+    public static final XMLType TYPE_TEXT_NEVER = new BXMLType(TypeConstants.XML_TEXT,", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516547644", "body": "Shall we undo this change?", "bodyText": "Shall we undo this change?", "bodyHTML": "<p dir=\"auto\">Shall we undo this change?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:02:05Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-*  Unless required by applicable law or agreed to in writing,\n-*  software distributed under the License is distributed on an\n-*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-*  KIND, either express or implied.  See the License for the\n-*  specific language governing permissions and limitations\n-*  under the License.\n-*/\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzODM3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r517138370", "bodyText": "@MaryamZi isn't this the correct formatting?", "author": "lochana-chathura", "createdAt": "2020-11-04T07:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5Mzc3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r517793771", "bodyText": "Sorry, should've mentioned why. In this case since it is just one file and it's a change to the licence header, we can even go ahead with this change.\nBut generally it could be better to separate out unrelated formatting changes to a separate PR and keep a PR as concise and relevant as possible. Especially in scenarios like this where the only change to a file is a formatting change.", "author": "MaryamZi", "createdAt": "2020-11-05T05:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MDQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516550441", "body": "Shall we also add some negative tests?", "bodyText": "Shall we also add some negative tests?", "bodyHTML": "<p dir=\"auto\">Shall we also add some negative tests?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:06:50Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -363,6 +363,11 @@ public void testSimpleArrays() {\n         Assert.assertTrue(((BBoolean) returns[4]).booleanValue());\n     }\n \n+    @Test\n+    public void testXMLNeverType() {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Mjc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516562764", "body": "Shouldn't this be true only when it is part of xml? Probably part of `isXMLTypeAssignable`.\r\n\r\nThe following is also allowed due to this change.\r\n\r\n```ballerina\r\n    never[] arr = [];\r\n    'xml:Text text = arr[0]; // should fail\r\n```", "bodyText": "Shouldn't this be true only when it is part of xml? Probably part of isXMLTypeAssignable.\nThe following is also allowed due to this change.\n    never[] arr = [];\n    'xml:Text text = arr[0]; // should fail", "bodyHTML": "<p dir=\"auto\">Shouldn't this be true only when it is part of xml? Probably part of <code>isXMLTypeAssignable</code>.</p>\n<p dir=\"auto\">The following is also allowed due to this change.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    never[] arr = [];\n    'xml:Text text = arr[0]; // should fail\"><pre>    <span class=\"pl-k\">never</span>[] <span class=\"pl-smi\">arr</span> <span class=\"pl-k\">=</span> [];\n    <span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">text</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">arr</span>[<span class=\"pl-c1\">0</span>]; <span class=\"pl-c\">// should fail</span></pre></div>", "author": "MaryamZi", "createdAt": "2020-11-03T10:26:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -588,6 +589,10 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n+        if (sourceTag == TypeTags.NEVER && targetTag == TypeTags.XML_TEXT) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Mzg4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516563886", "body": "Why do we need these separate variables? ", "bodyText": "Why do we need these separate variables?", "bodyHTML": "<p dir=\"auto\">Why do we need these separate variables?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:28:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4387,6 +4397,21 @@ private BLangIdentifier createIdentifier(DiagnosticPos pos, String value, Set<Wh\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+\n+        int typeTag = TypeTags.STRING;\n+        Object value = \"\";\n+        String originalValue = \"\";", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567246", "body": "Can't we check `isEmpty` instead?", "bodyText": "Can't we check isEmpty instead?", "bodyHTML": "<p dir=\"auto\">Can't we check <code>isEmpty</code> instead?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:33:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2105,7 +2105,12 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                SyntaxKind contentKind;\n+                if (expressionNode.content().size() == 0) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567565", "body": "Shall we check by node kind instead? ", "bodyText": "Shall we check by node kind instead?", "bodyHTML": "<p dir=\"auto\">Shall we check by node kind instead?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:34:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Nzg4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567880", "body": "We don't need a separate variable, right?", "bodyText": "We don't need a separate variable, right?", "bodyHTML": "<p dir=\"auto\">We don't need a separate variable, right?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:34:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {\n+            if (((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {\n+                resultType = types.checkType(bLangXMLTextLiteral,\n+                        createXMLNeverType(null, bLangXMLTextLiteral), expType);\n+                return;\n+            }\n+        }\n+        BXMLSubType actualType = symTable.xmlTextType;", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516568259", "body": "We can merge these two if checks.", "bodyText": "We can merge these two if checks.", "bodyHTML": "<p dir=\"auto\">We can merge these two if checks.</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:35:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {\n+            if (((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTQxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516569419", "body": "Instead of creating a new type, we can have a `xmlNeverType` in the symbol table and reuse it.", "bodyText": "Instead of creating a new type, we can have a xmlNeverType in the symbol table and reuse it.", "bodyHTML": "<p dir=\"auto\">Instead of creating a new type, we can have a <code>xmlNeverType</code> in the symbol table and reuse it.</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:37:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516569934", "body": "What is the scenario we're trying to handle here? ", "bodyText": "What is the scenario we're trying to handle here?", "bodyHTML": "<p dir=\"auto\">What is the scenario we're trying to handle here?</p>", "author": "MaryamZi", "createdAt": "2020-11-03T10:38:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {\n+        Scope.ScopeEntry entry = symTable.rootScope.lookup(names.fromTypeKind(TypeKind.NEVER));\n+        BType constraintType = (entry.symbol).type;\n+        BType constrainedType = new BXMLType(constraintType, null);\n+        BType type = (symTable.rootScope.lookup(names.fromTypeKind(TypeKind.XML))).symbol.type;\n+        BTypeSymbol typeSymbol = type.tsymbol;\n+        if (iExpr != null) {\n+            constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                    typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                    iExpr.pos, SOURCE);\n+            return constrainedType;\n+        }\n+        constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                bLangXMLTextLiteral.pos, SOURCE);\n+        return constrainedType;\n+    }\n+\n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n         BType actualType = checkInvocationParam(iExpr);\n+        if (actualType.tag == symTable.xmlTextType.tag) {", "originalCommit": "cd78b7d130e189596b2fe9a4548042d35c48065c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMDcwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r521120703", "bodyText": "To handle  xml<never> b = 'xml:createText(\"\"); kind of scenarios.", "author": "suleka96", "createdAt": "2020-11-11T05:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzY0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527533648", "bodyText": "I don't think we should be supporting this.\nAllowing this means that we are in a way calling this function and evaluating the expression at compile-time, which we do not do for function calls.\nThe static type of 'xml:createText(...) at compile-time is always 'xml:Text. So if the user wants to do this they have to say\nxml<never> b = <xml<never>> 'xml:createText(\"\");", "author": "MaryamZi", "createdAt": "2020-11-20T08:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNDYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527534621", "bodyText": "The compiler crashes for the following btw.\npublic function main(string s) {\n    xml<never> b = 'xml:createText(s);\n}\nballerina-internal.log\n[2020-11-20 14:22:36,824] SEVERE {b7a.log.crash} - class org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef cannot be cast to class org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral (org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef and org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral are in unnamed module of loader 'app') \njava.lang.ClassCastException: class org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef cannot be cast to class org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral (org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef and org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral are in unnamed module of loader 'app')\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkInvocationParamAndReturnType(TypeChecker.java:5283)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkFunctionInvocationExpr(TypeChecker.java:4890)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.visit(TypeChecker.java:2639)\n\tat org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation.accept(BLangInvocation.java:115)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkExpr(TypeChecker.java:365)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkExpr(TypeChecker.java:344)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:683)\n\tat org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable.accept(BLangSimpleVariable.java:53)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:2917)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:1699)\n\tat org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef.accept(BLangSimpleVariableDef.java:46)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeStmt(SemanticAnalyzer.java:2921)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:389)\n\tat org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody.accept(BLangBlockFunctionBody.java:58)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:361)\n\tat org.wso2.ballerinalang.compiler.tree.BLangFunction.accept(BLangFunction.java:73)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:2917)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:277)\n\tat org.wso2.ballerinalang.compiler.tree.BLangPackage.accept(BLangPackage.java:163)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyze(SemanticAnalyzer.java:251)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.typeCheck(CompilerPhaseRunner.java:214)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.performTypeCheckPhases(CompilerPhaseRunner.java:113)\n\tat io.ballerina.projects.ModuleContext.compileInternal(ModuleContext.java:325)\n\tat io.ballerina.projects.ModuleCompilationState$3.compile(ModuleCompilationState.java:100)\n\tat io.ballerina.projects.ModuleCompilationState$3.generatePlatformSpecificCode(ModuleCompilationState.java:108)\n\tat io.ballerina.projects.ModuleContext.generatePlatformSpecificCode(ModuleContext.java:252)\n\tat io.ballerina.projects.JBallerinaBackend.performCodeGen(JBallerinaBackend.java:118)\n\tat io.ballerina.projects.JBallerinaBackend.<init>(JBallerinaBackend.java:108)\n\tat io.ballerina.projects.JBallerinaBackend.lambda$from$0(JBallerinaBackend.java:90)\n\tat java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1133)\n\tat io.ballerina.projects.PackageCompilation.getCompilerBackend(PackageCompilation.java:174)\n\tat io.ballerina.projects.JBallerinaBackend.from(JBallerinaBackend.java:89)\n\tat io.ballerina.cli.task.CompileTask.execute(CompileTask.java:64)\n\tat io.ballerina.cli.TaskExecutor.executeTasks(TaskExecutor.java:40)\n\tat io.ballerina.cli.cmd.RunCommand.execute(RunCommand.java:173)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:183)\n\tat org.ballerinalang.tool.Main.main(Main.java:57)", "author": "MaryamZi", "createdAt": "2020-11-20T08:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}], "type": "inlineReview"}, {"oid": "3628e22a9aa0e0b045d42c0a1c1e68663ff65158", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3628e22a9aa0e0b045d42c0a1c1e68663ff65158", "message": "Refactor logic and tests", "committedDate": "2020-11-11T07:13:08Z", "type": "commit"}, {"oid": "940eb4a00d1103c02054f3f37621325c7ff10ca1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/940eb4a00d1103c02054f3f37621325c7ff10ca1", "message": "Resolve conflicts", "committedDate": "2020-11-11T10:04:44Z", "type": "commit"}, {"oid": "5deafab100ae0ccbce988ef5a22b65cd6375126f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5deafab100ae0ccbce988ef5a22b65cd6375126f", "message": "Refactor code", "committedDate": "2020-11-11T10:20:50Z", "type": "commit"}, {"oid": "6ecf75e54cefe1ac327c79881fb53380ba382707", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ecf75e54cefe1ac327c79881fb53380ba382707", "message": "Refactor code", "committedDate": "2020-11-20T09:59:00Z", "type": "commit"}, {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge with upstream", "committedDate": "2020-11-20T09:59:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4Mzg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527583845", "body": "Shall we rename this to something like\r\n```suggestion\r\n    private BLangLiteral createEmptyStringLiteral(TemplateExpressionNode expressionNode) {\r\n```", "bodyText": "Shall we rename this to something like\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {\n          \n          \n            \n                private BLangLiteral createEmptyStringLiteral(TemplateExpressionNode expressionNode) {", "bodyHTML": "<p dir=\"auto\">Shall we rename this to something like</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">BLangLiteral</span> <span class=\"x x-first x-last\">createSimpleLiteral</span>(<span class=\"pl-smi\">TemplateExpressionNode</span> expressionNode) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">BLangLiteral</span> <span class=\"x x-first x-last\">createEmptyStringLiteral</span>(<span class=\"pl-smi\">TemplateExpressionNode</span> expressionNode) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-20T10:05:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4443,6 +4453,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {", "originalCommit": "5deafab100ae0ccbce988ef5a22b65cd6375126f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NTgzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527585831", "body": "```suggestion\r\n            resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlNeverType, expType);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        resultType = types.checkType(bLangXMLTextLiteral,\n          \n          \n            \n                                symTable.xmlNeverType, expType);\n          \n          \n            \n                        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlNeverType, expType);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            resultType <span class=\"pl-k\">=</span> types<span class=\"pl-k\">.</span>checkType(bLangXMLTextLiteral,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    symTable<span class=\"pl-k\">.</span>xmlNeverType, expType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            resultType <span class=\"pl-k\">=</span> types<span class=\"pl-k\">.</span>checkType(bLangXMLTextLiteral, symTable<span class=\"pl-k\">.</span>xmlNeverType, expType);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-20T10:09:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {\n+            resultType = types.checkType(bLangXMLTextLiteral,\n+                    symTable.xmlNeverType, expType);", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NjM4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527586381", "body": "```suggestion\r\n        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\r\n        checkStringTemplateExprs(literalValues, false);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n          \n          \n            \n                    List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n          \n          \n            \n                    List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n          \n          \n            \n                    checkStringTemplateExprs(literalValues, false);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"4127\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">checkStringTemplateExprs(</span>bLangXMLTextLiteral<span class=\"pl-k\">.</span>textFragments<span class=\"x x-first\">, </span><span class=\"pl-c1 x\">false</span><span class=\"x x-last\">)</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"4128\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\"><span class=\"x x-first\">List&lt;</span><span class=\"pl-smi x\">BLangExpression</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> </span>literalValues<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> bLangXMLTextLiteral</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">textFragments</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"4127\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\"><span class=\"x x-first\">List&lt;</span><span class=\"pl-smi x\">BLangExpression</span><span class=\"x\">&gt;</span></span><span class=\"x\"> literalValues </span><span class=\"pl-k x\">=</span><span class=\"x x-last\"> </span>bLangXMLTextLiteral<span class=\"pl-k\">.</span>textFragments;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"4128\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">checkStringTemplateExprs(</span>literalValues<span class=\"x x-first\">, </span><span class=\"pl-c1 x\">false</span><span class=\"x x-last\">)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-20T10:10:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5MTUwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527591509", "body": "Shall we extract `literalValues.get(0)` out to a variable?", "bodyText": "Shall we extract literalValues.get(0) out to a variable?", "bodyHTML": "<p dir=\"auto\">Shall we extract <code>literalValues.get(0)</code> out to a variable?</p>", "author": "MaryamZi", "createdAt": "2020-11-20T10:18:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NjI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527596288", "body": "Don't we also have to check if ` literalValues.size() == 1`?\r\n\r\nThe following also seems to be allowed atm\r\n\r\n```ballerina\r\npublic function main() {\r\n    string x = \"foo\";\r\n    xml<never> b = xml `${\"\"} ${x}`;\r\n}\r\n``` ", "bodyText": "Don't we also have to check if  literalValues.size() == 1?\nThe following also seems to be allowed atm\npublic function main() {\n    string x = \"foo\";\n    xml<never> b = xml `${\"\"} ${x}`;\n}", "bodyHTML": "<p dir=\"auto\">Don't we also have to check if <code> literalValues.size() == 1</code>?</p>\n<p dir=\"auto\">The following also seems to be allowed atm</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    string x = &quot;foo&quot;;\n    xml&lt;never&gt; b = xml `${&quot;&quot;} ${x}`;\n}\n\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">string</span> x <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">never</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>${<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>} ${<span class=\"pl-smi\">x</span>}<span class=\"pl-pds\">`</span></span>;\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-20T10:26:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5OTExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527599114", "body": "Isn't this different from how we've modeled `xml<never>` at runtime? At runtime it is an xml:Text with never as the constraint, but at compile-time it is an xml with never as the constraint? Shall we stick to one approach?\r\n\r\nGiven that we don't have constraints for compile-time types, we'll probably have to change the runtime representation? ", "bodyText": "Isn't this different from how we've modeled xml<never> at runtime? At runtime it is an xml:Text with never as the constraint, but at compile-time it is an xml with never as the constraint? Shall we stick to one approach?\nGiven that we don't have constraints for compile-time types, we'll probably have to change the runtime representation?", "bodyHTML": "<p dir=\"auto\">Isn't this different from how we've modeled <code>xml&lt;never&gt;</code> at runtime? At runtime it is an xml:Text with never as the constraint, but at compile-time it is an xml with never as the constraint? Shall we stick to one approach?</p>\n<p dir=\"auto\">Given that we don't have constraints for compile-time types, we'll probably have to change the runtime representation?</p>", "author": "MaryamZi", "createdAt": "2020-11-20T10:31:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -168,6 +168,7 @@\n     public final BXMLSubType xmlPIType = new BXMLSubType(TypeTags.XML_PI, Names.XML_PI);\n     public final BXMLSubType xmlCommentType = new BXMLSubType(TypeTags.XML_COMMENT, Names.XML_COMMENT);\n     public final BXMLSubType xmlTextType = new BXMLSubType(TypeTags.XML_TEXT, Names.XML_TEXT, Flags.READONLY);\n+    public final BType xmlNeverType = new BXMLType(neverType,  null);", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527601108", "body": "Given that the following is allowed\r\n\r\n```ballerina\r\n    xml<never> x = xml ``;\r\n    'xml:Text t = x;\r\n    string s1 = t;\r\n```\r\n\r\nshouldn't the following also be allowed?\r\n\r\n```ballerina\r\n    xml<never> x = xml ``;\r\n    string s2 = x; \r\n```\r\n", "bodyText": "Given that the following is allowed\n    xml<never> x = xml ``;\n    'xml:Text t = x;\n    string s1 = t;\nshouldn't the following also be allowed?\n    xml<never> x = xml ``;\n    string s2 = x;", "bodyHTML": "<p dir=\"auto\">Given that the following is allowed</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    xml&lt;never&gt; x = xml ``;\n    'xml:Text t = x;\n    string s1 = t;\"><pre>    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">never</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">t</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>;\n    <span class=\"pl-c1\">string</span> s1 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">t</span>;</pre></div>\n<p dir=\"auto\">shouldn't the following also be allowed?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    xml&lt;never&gt; x = xml ``;\n    string s2 = x; \"><pre>    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">never</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-c1\">string</span> s2 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>; </pre></div>", "author": "MaryamZi", "createdAt": "2020-11-20T10:35:04Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -125,9 +125,18 @@ public void testTypeTestExprNegative() {\n                 \"unnecessary condition: expression will always evaluate to 'true'\", 246, 9);\n         BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: 'foo|bar' will not be matched to 'baz|2'\", 255, 9);\n-        BAssertUtil.validateError(negativeResult, i,\n+        BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: '(string|int)' will not be matched to '(float|boolean)'\",\n                 262, 9);\n+        BAssertUtil.validateError(negativeResult, i++,", "originalCommit": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MjgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527992814", "bodyText": "The spec doesn't talk about sub types of xml:Text being implicitly castable to string right?", "author": "suleka96", "createdAt": "2020-11-20T21:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528071447", "bodyText": "Whatever works for T should generally work for subtypes of T too.\nSo since xml<never> is a subtype of xml:Text and xml:Text can be implicitly converted to string, xml<never> should be implicitly converted to string.\nThe spec also explicitly mentions the empty xml value under \"Casting and conversion\"\n\nIf a value of type xml:Text is the empty xml value, then it is implicitly converted to the empty string; otherwise the value is implicitly converted to a string that has a constituent character for each singleton item in the xml:Text sequence.", "author": "MaryamZi", "createdAt": "2020-11-21T04:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA=="}], "type": "inlineReview"}, {"oid": "96ed575902bf60202748d9776d0024a2d2a06ceb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/96ed575902bf60202748d9776d0024a2d2a06ceb", "message": "Change runtime xml<never> representation", "committedDate": "2020-11-21T08:42:13Z", "type": "commit"}, {"oid": "7290f1374127444e3bb60d93565e378e7f114551", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7290f1374127444e3bb60d93565e378e7f114551", "message": "Add implicit casting from xml<never> to string", "committedDate": "2020-11-21T19:21:09Z", "type": "commit"}, {"oid": "f5ce4b0a2abbcd3dbdfc3d7c8e57ae8feaad316a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5ce4b0a2abbcd3dbdfc3d7c8e57ae8feaad316a", "message": "Update desugar logic", "committedDate": "2020-11-23T00:43:28Z", "type": "commit"}, {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "message": "Refactor code", "committedDate": "2020-11-23T04:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528494337", "body": "We need to check the target type too right? The following evaluates to true with this change.\r\n\r\n```ballerina\r\npublic function main() {\r\n    xml x = xml ``;\r\n\r\n    boolean b = <any> x is byte; // becomes true\r\n}\r\n```", "bodyText": "We need to check the target type too right? The following evaluates to true with this change.\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is byte; // becomes true\n}", "bodyHTML": "<p dir=\"auto\">We need to check the target type too right? The following evaluates to true with this change.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    xml x = xml ``;\n\n    boolean b = &lt;any&gt; x is byte; // becomes true\n}\n\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">xml</span> x <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-c1\">xml</span> <span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n\n    <span class=\"pl-c1\">boolean</span> b <span class=\"pl-k\">=</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">any</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">is</span> <span class=\"pl-c1\">byte</span>; <span class=\"pl-c\">// becomes true</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-23T06:42:26Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -655,6 +655,9 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                 if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDQ1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528494453", "body": "```suggestion\r\n            return checkIsType(source.constraint, targetConstraint, unresolvedTypes);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return checkIsType(source.constraint, targetConstraint,\n          \n          \n            \n                                unresolvedTypes);\n          \n          \n            \n                        return checkIsType(source.constraint, targetConstraint, unresolvedTypes);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> checkIsType(source<span class=\"pl-k\">.</span>constraint, targetConstraint,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    unresolvedTypes);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> checkIsType(source<span class=\"pl-k\">.</span>constraint, targetConstraint, unresolvedTypes);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-23T06:43:04Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,27 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return target.getTag() == TypeTags.XML_TAG;\n+            }\n+            return checkIsType(source.constraint, targetConstraint,\n+                    unresolvedTypes);", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NjA4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528496087", "body": "Shouldn't we check the target constraint here?\r\n\r\nShouldn't the following type test evaluate to `false`?\r\n\r\n```ballerina\r\npublic function main() {\r\n    xml x = xml ``;\r\n\r\n    boolean b = <any> x is xml<'xml:Element>; // becomes true\r\n}\r\n```", "bodyText": "Shouldn't we check the target constraint here?\nShouldn't the following type test evaluate to false?\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is xml<'xml:Element>; // becomes true\n}", "bodyHTML": "<p dir=\"auto\">Shouldn't we check the target constraint here?</p>\n<p dir=\"auto\">Shouldn't the following type test evaluate to <code>false</code>?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    xml x = xml ``;\n\n    boolean b = &lt;any&gt; x is xml&lt;'xml:Element&gt;; // becomes true\n}\n\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">xml</span> x <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-c1\">xml</span> <span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n\n    <span class=\"pl-c1\">boolean</span> b <span class=\"pl-k\">=</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">any</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">is</span> <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Element</span><span class=\"pl-k\">&gt;</span>; <span class=\"pl-c\">// becomes true</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-23T06:49:22Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,27 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return target.getTag() == TypeTags.XML_TAG;", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5OTIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528499219", "body": "```suggestion\r\n        if (expressionNode.content().isEmpty()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (expressionNode.content().size() == 0) {\n          \n          \n            \n                    if (expressionNode.content().isEmpty()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (expressionNode<span class=\"pl-k\">.</span>content()<span class=\"pl-k\">.</span><span class=\"x x-first\">size() </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (expressionNode<span class=\"pl-k\">.</span>content()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isEmpty()</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-23T07:00:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3236,6 +3241,11 @@ public BLangNode transform(XMLTextNode xmlTextNode) {\n \n     private BLangNode createXMLLiteral(TemplateExpressionNode expressionNode) {\n         BLangXMLTextLiteral xmlTextLiteral = (BLangXMLTextLiteral) TreeBuilder.createXMLTextLiteralNode();\n+        if (expressionNode.content().size() == 0) {", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMDgxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528500818", "body": "Shouldn't we handle the union scenario also?", "bodyText": "Shouldn't we handle the union scenario also?", "bodyHTML": "<p dir=\"auto\">Shouldn't we handle the union scenario also?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T07:05:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -925,13 +926,47 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNever(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        return false;", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528502344", "body": "May have to check the scenario where the actualType is a union of xml too.", "bodyText": "May have to check the scenario where the actualType is a union of xml too.", "bodyHTML": "<p dir=\"auto\">May have to check the scenario where the actualType is a union of xml too.</p>", "author": "MaryamZi", "createdAt": "2020-11-23T07:11:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1897,6 +1932,8 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {", "originalCommit": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMzA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528503096", "bodyText": "The following panics at runtime.\npublic function main() {\n    xml<never>|'xml:Text x = xml `hello`;\n    string str = x;\n}", "author": "MaryamZi", "createdAt": "2020-11-23T07:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjM0NA=="}], "type": "inlineReview"}, {"oid": "e7fa5c3405f65214c7351569977183af376ca668", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7fa5c3405f65214c7351569977183af376ca668", "message": "Refactor code and add tests", "committedDate": "2020-11-23T13:29:44Z", "type": "commit"}, {"oid": "4524d091ce2b45aac7a4b7c0f34a2a5f60ff9d60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4524d091ce2b45aac7a4b7c0f34a2a5f60ff9d60", "message": "Refactor code", "committedDate": "2020-11-23T13:39:19Z", "type": "commit"}, {"oid": "9f2f4091498daf5fb98300a4ed7f628a9ca27e3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f2f4091498daf5fb98300a4ed7f628a9ca27e3a", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge Upstream", "committedDate": "2020-11-23T14:08:51Z", "type": "commit"}, {"oid": "78e51fa1f881672486cca38261db490362facf36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78e51fa1f881672486cca38261db490362facf36", "message": "Update Desugar XML type test", "committedDate": "2020-11-23T15:22:52Z", "type": "commit"}, {"oid": "78e51fa1f881672486cca38261db490362facf36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78e51fa1f881672486cca38261db490362facf36", "message": "Update Desugar XML type test", "committedDate": "2020-11-23T15:22:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMDE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528820162", "body": "Given that this logic is relevant only for `string`, I think we should have the case for `STRING_TAG` separately and move this logic and the `sourceTypeTag == targetTypeTag` check there.", "bodyText": "Given that this logic is relevant only for string, I think we should have the case for STRING_TAG separately and move this logic and the sourceTypeTag == targetTypeTag check there.", "bodyHTML": "<p dir=\"auto\">Given that this logic is relevant only for <code>string</code>, I think we should have the case for <code>STRING_TAG</code> separately and move this logic and the <code>sourceTypeTag == targetTypeTag</code> check there.</p>", "author": "MaryamZi", "createdAt": "2020-11-23T16:08:06Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -655,6 +655,9 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                 if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n+                if (sourceTypeTag == TypeTags.XML_TAG && targetTypeTag == TypeTags.STRING_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;", "originalCommit": "78e51fa1f881672486cca38261db490362facf36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528821541", "body": "We need to check the members of the union right? Just being a union is not enough?", "bodyText": "We need to check the members of the union right? Just being a union is not enough?", "bodyHTML": "<p dir=\"auto\">We need to check the members of the union right? Just being a union is not enough?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T16:10:07Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,28 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return targetConstraint.getTag() == TypeTags.UNION_TAG ||", "originalCommit": "78e51fa1f881672486cca38261db490362facf36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0MDE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528840158", "bodyText": "Can there be types like xml<'xml:Text | `xml: Element>  where the constraint is a user defined union?\nif not then this is correct right? constraint is a union only when it is of type xml", "author": "suleka96", "createdAt": "2020-11-23T16:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzMDkzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530830931", "bodyText": "There can be, right? For example, the following type test evaluates to true atm.\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is xml<'xml:Element|'xml:Comment>; // becomes true\n}", "author": "MaryamZi", "createdAt": "2020-11-26T07:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528826865", "body": "Shouldn't we be calling `isConversionExprXMLNeverUnion` recursively for all members here? ", "bodyText": "Shouldn't we be calling isConversionExprXMLNeverUnion recursively for all members here?", "bodyHTML": "<p dir=\"auto\">Shouldn't we be calling <code>isConversionExprXMLNeverUnion</code> recursively for all members here?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T16:17:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        if (conversionExpr.expr.type.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) conversionExpr.expr.type);", "originalCommit": "78e51fa1f881672486cca38261db490362facf36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528859433", "bodyText": "We should just check if each member is assignable to xmlTextType right?", "author": "suleka96", "createdAt": "2020-11-23T17:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1MTI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530851296", "bodyText": "Added a comment for isAllXMLMembers, the name seems to be misleading.", "author": "MaryamZi", "createdAt": "2020-11-26T08:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNzI4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528827282", "body": "Is the name accurate here if we are checking for text also?", "bodyText": "Is the name accurate here if we are checking for text also?", "bodyHTML": "<p dir=\"auto\">Is the name accurate here if we are checking for text also?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T16:17:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {", "originalCommit": "78e51fa1f881672486cca38261db490362facf36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyODI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528828288", "body": "What are we trying to check here? Why do we need to go into the cast and check the expression? ", "bodyText": "What are we trying to check here? Why do we need to go into the cast and check the expression?", "bodyHTML": "<p dir=\"auto\">What are we trying to check here? Why do we need to go into the cast and check the expression?</p>", "author": "MaryamZi", "createdAt": "2020-11-23T16:19:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,8 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && (conversionExpr.expr.type.tag == TypeTags.XML_TEXT ||\n+                types.isConversionExprXMLNeverUnion(conversionExpr))) {", "originalCommit": "78e51fa1f881672486cca38261db490362facf36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MDQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528850432", "bodyText": "To  make sure we rewrite the xml for implicit casting", "author": "suleka96", "createdAt": "2020-11-23T16:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyODI4OA=="}], "type": "inlineReview"}, {"oid": "d03c33a6750ba91ee54eca7470fd59f86e7d6a39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d03c33a6750ba91ee54eca7470fd59f86e7d6a39", "message": "Refactor code", "committedDate": "2020-11-23T17:24:08Z", "type": "commit"}, {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5fb6a48903ce773c3cb34094f31a9a2541280e99", "message": "Refactor code", "committedDate": "2020-11-23T18:27:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjg1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530836851", "body": "The following fails since we don't add  `Flags.READONLY` for `xmlNeverType`.\r\n\r\n```ballerina\r\npublic function main() {\r\n    xml<never> w =  xml ``;\r\n    string|'xml:Text x = w;\r\n}\r\n```\r\n\r\nWe should probably also update the `isInherentlyImmutableType` methods at compile-time and runtime to return true for `xml<never>`.", "bodyText": "The following fails since we don't add  Flags.READONLY for xmlNeverType.\npublic function main() {\n    xml<never> w =  xml ``;\n    string|'xml:Text x = w;\n}\nWe should probably also update the isInherentlyImmutableType methods at compile-time and runtime to return true for xml<never>.", "bodyHTML": "<p dir=\"auto\">The following fails since we don't add  <code>Flags.READONLY</code> for <code>xmlNeverType</code>.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    xml&lt;never&gt; w =  xml ``;\n    string|'xml:Text x = w;\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">never</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">w</span> <span class=\"pl-k\">=</span>  <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-c1\">string</span><span class=\"pl-k\">|</span>'<span class=\"pl-c1\">xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">w</span>;\n}</pre></div>\n<p dir=\"auto\">We should probably also update the <code>isInherentlyImmutableType</code> methods at compile-time and runtime to return true for <code>xml&lt;never&gt;</code>.</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:05:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -168,6 +168,7 @@\n     public final BXMLSubType xmlPIType = new BXMLSubType(TypeTags.XML_PI, Names.XML_PI);\n     public final BXMLSubType xmlCommentType = new BXMLSubType(TypeTags.XML_COMMENT, Names.XML_COMMENT);\n     public final BXMLSubType xmlTextType = new BXMLSubType(TypeTags.XML_TEXT, Names.XML_TEXT, Flags.READONLY);\n+    public final BType xmlNeverType = new BXMLType(neverType,  null);", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzOTcxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530839710", "bodyText": "The following should also work.\npublic function main() {\n    xml<never> & readonly w =  xml ``;\n}\nFails with\nERROR [test.bal:(2:32,2:38)] incompatible types: expected 'xml<other> & readonly', found 'xml<never>'", "author": "MaryamZi", "createdAt": "2020-11-26T08:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNzk2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530837960", "body": "Shall we use a different variable name?", "bodyText": "Shall we use a different variable name?", "bodyHTML": "<p dir=\"auto\">Shall we use a different variable name?</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:07:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4026,7 +4026,15 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n     }\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n-        checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        checkStringTemplateExprs(literalValues, false);\n+        BLangExpression langExpression = literalValues.get(0);", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0Mjk1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530842952", "body": "We try avoid using streams due to the impact on performance for trivial usage. Shall we replace this with a simple `for` loop?", "bodyText": "We try avoid using streams due to the impact on performance for trivial usage. Shall we replace this with a simple for loop?", "bodyHTML": "<p dir=\"auto\">We try avoid using streams due to the impact on performance for trivial usage. Shall we replace this with a simple <code>for</code> loop?</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:17:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isAllXMLMembers(BUnionType actualType) {\n+        if (actualType.getMemberTypes().stream().allMatch(t -> TypeTags.isXMLTypeTag(t.tag))) {", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MzYwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530843605", "body": "The method name is misleading here, right? The check is if everything is an `'xml:Text`?\r\n\r\nAlso, why do we need to check if it is xml first, before checking this?", "bodyText": "The method name is misleading here, right? The check is if everything is an 'xml:Text?\nAlso, why do we need to check if it is xml first, before checking this?", "bodyHTML": "<p dir=\"auto\">The method name is misleading here, right? The check is if everything is an <code>'xml:Text</code>?</p>\n<p dir=\"auto\">Also, why do we need to check if it is xml first, before checking this?</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:18:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isAllXMLMembers(BUnionType actualType) {\n+        if (actualType.getMemberTypes().stream().allMatch(t -> TypeTags.isXMLTypeTag(t.tag))) {\n+            return actualType.getMemberTypes().stream().allMatch(t -> isAssignable(t, symTable.xmlTextType));", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NDg5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530844891", "body": "Can't we check if \r\n\r\n`TypeTags.isXMLTypeTag(sourceTag) && (TypeTags.isXMLTypeTag(targetTag) || targetTag == TypeTags.STRING)`\r\n\r\nand move the subsequent checks into `isXMLTypeAssignable` instead?", "bodyText": "Can't we check if\nTypeTags.isXMLTypeTag(sourceTag) && (TypeTags.isXMLTypeTag(targetTag) || targetTag == TypeTags.STRING)\nand move the subsequent checks into isXMLTypeAssignable instead?", "bodyHTML": "<p dir=\"auto\">Can't we check if</p>\n<p dir=\"auto\"><code>TypeTags.isXMLTypeTag(sourceTag) &amp;&amp; (TypeTags.isXMLTypeTag(targetTag) || targetTag == TypeTags.STRING)</code></p>\n<p dir=\"auto\">and move the subsequent checks into <code>isXMLTypeAssignable</code> instead?</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:20:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -614,7 +614,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+        if ((TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) ||\n+                (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML)) {", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NTg1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530845854", "body": "Shall we refactor this like\r\n\r\n```java\r\nif (sourceTag == TypeTags.XML) {\r\n   ............\r\n}\r\n```", "bodyText": "Shall we refactor this like\nif (sourceTag == TypeTags.XML) {\n   ............\n}", "bodyHTML": "<p dir=\"auto\">Shall we refactor this like</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (sourceTag == TypeTags.XML) {\n   ............\n}\"><pre><span class=\"pl-k\">if</span> (sourceTag <span class=\"pl-k\">==</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>XML</span>) {\n   <span class=\"pl-c1\">............</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-11-26T08:22:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,55 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0OTMzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530849338", "body": "Can't we clean this up also as \r\n\r\n```\r\n} else if (targetType.tag == TypeTags.STRING) {\r\n\r\n}\r\n```\r\n\r\nand move all the xml checks into it.", "bodyText": "Can't we clean this up also as\n} else if (targetType.tag == TypeTags.STRING) {\n\n}\n\nand move all the xml checks into it.", "bodyHTML": "<p dir=\"auto\">Can't we clean this up also as</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"} else if (targetType.tag == TypeTags.STRING) {\n\n}\"><pre><code>} else if (targetType.tag == TypeTags.STRING) {\n\n}\n</code></pre></div>\n<p dir=\"auto\">and move all the xml checks into it.</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:28:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1MDIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530850213", "body": "Shouldn't this check return `true` when checking source `string|'xml:Text` vs target `string`.\r\n\r\nThe following panics at runtime atm.\r\n\r\n```ballerina\r\npublic function main() {\r\n    'xml:Text w =  xml ``;\r\n    string|'xml:Text x = w;\r\n\r\n    string y = x;\r\n}\r\n```\r\n\r\nballerina-internal.log\r\n```log\r\n[2020-11-26 13:59:34,798] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app') \r\njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app')\r\n\tat test.main(test.bal:5)\r\n\tat $_init.$lambda$main$(.)\r\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\r\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\r\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n```\r\n\r\nSame applies when it's `xml<never>` instead of `'xml:Text`.", "bodyText": "Shouldn't this check return true when checking source string|'xml:Text vs target string.\nThe following panics at runtime atm.\npublic function main() {\n    'xml:Text w =  xml ``;\n    string|'xml:Text x = w;\n\n    string y = x;\n}\nballerina-internal.log\n[2020-11-26 13:59:34,798] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app')\n\tat test.main(test.bal:5)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\nSame applies when it's xml<never> instead of 'xml:Text.", "bodyHTML": "<p dir=\"auto\">Shouldn't this check return <code>true</code> when checking source <code>string|'xml:Text</code> vs target <code>string</code>.</p>\n<p dir=\"auto\">The following panics at runtime atm.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    'xml:Text w =  xml ``;\n    string|'xml:Text x = w;\n\n    string y = x;\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">w</span> <span class=\"pl-k\">=</span>  <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-c1\">string</span><span class=\"pl-k\">|</span>'<span class=\"pl-c1\">xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">w</span>;\n\n    <span class=\"pl-c1\">string</span> y <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>;\n}</pre></div>\n<p dir=\"auto\">ballerina-internal.log</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[2020-11-26 13:59:34,798] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app')\n\tat test.main(test.bal:5)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\"><pre lang=\"log\"><code>[2020-11-26 13:59:34,798] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app')\n\tat test.main(test.bal:5)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n</code></pre></div>\n<p dir=\"auto\">Same applies when it's <code>xml&lt;never&gt;</code> instead of <code>'xml:Text</code>.</p>", "author": "MaryamZi", "createdAt": "2020-11-26T08:30:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5ODEzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530898130", "body": "```suggestion\r\n            // Revisit and check xml<xml<constraint>>> on chained iteration.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //Revisit and check xml<xml<constraint>>> on chained iteration\n          \n          \n            \n                        // Revisit and check xml<xml<constraint>>> on chained iteration.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span>Revisit and check xml&lt;xml&lt;constraint&gt;&gt;&gt; on chained iteration</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\"> </span>Revisit and check xml&lt;xml&lt;constraint&gt;&gt;&gt; on chained iteration<span class=\"x x-first x-last\">.</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-11-26T09:44:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,55 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLConversionExprCastableToString(BLangTypeConversionExpr conversionExpr) {\n+        int exprTag = conversionExpr.expr.type.tag;\n+        if (exprTag == TypeTags.XML_TEXT) {\n+            return true;\n+        }\n+        if (exprTag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDY2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530900665", "body": "I think we need to improve this a bit to handle scenarios where the target may also be a union. Basically we need a method that accepts the source and the target, and checks if the target has a subtype of `string` and the source has a subtype of `xml:Text`.", "bodyText": "I think we need to improve this a bit to handle scenarios where the target may also be a union. Basically we need a method that accepts the source and the target, and checks if the target has a subtype of string and the source has a subtype of xml:Text.", "bodyHTML": "<p dir=\"auto\">I think we need to improve this a bit to handle scenarios where the target may also be a union. Basically we need a method that accepts the source and the target, and checks if the target has a subtype of <code>string</code> and the source has a subtype of <code>xml:Text</code>.</p>", "author": "MaryamZi", "createdAt": "2020-11-26T09:48:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,7 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && types.isXMLConversionExprCastableToString(conversionExpr)) {", "originalCommit": "5fb6a48903ce773c3cb34094f31a9a2541280e99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDk1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530900953", "bodyText": "The following also doesn't work atm.\ntype FooBar \"foo\"|\"bar\";\n\npublic function main() {\n    'xml:Text t = xml `foo`;\n    FooBar u = <FooBar> t;\n}", "author": "MaryamZi", "createdAt": "2020-11-26T09:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDY2NQ=="}], "type": "inlineReview"}, {"oid": "f3fc0aab6f52c6bfc52d0fade17ece86ea0a48d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3fc0aab6f52c6bfc52d0fade17ece86ea0a48d7", "message": "Add xml union is type check", "committedDate": "2020-12-21T06:32:24Z", "type": "commit"}, {"oid": "026211cf83672901514088f04e32fbab56c1facf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/026211cf83672901514088f04e32fbab56c1facf", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge upstram", "committedDate": "2020-12-21T06:32:33Z", "type": "commit"}, {"oid": "2460b4ac524d693d7dfd85013aeb9bf6fbddaa51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2460b4ac524d693d7dfd85013aeb9bf6fbddaa51", "message": "Add readonly to xml never", "committedDate": "2020-12-22T08:24:57Z", "type": "commit"}, {"oid": "36568642904b65237a242512e8fcdd25201e1266", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36568642904b65237a242512e8fcdd25201e1266", "message": "Refactor code", "committedDate": "2020-12-22T10:10:25Z", "type": "commit"}, {"oid": "48b48768476edc30fa2cc20800eceaf7d8797222", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48b48768476edc30fa2cc20800eceaf7d8797222", "message": "Refactor code", "committedDate": "2020-12-22T10:14:23Z", "type": "commit"}, {"oid": "2528d11d84b4563ef516cc8c202fa069a94d64a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2528d11d84b4563ef516cc8c202fa069a94d64a0", "message": "Refactor Types code", "committedDate": "2020-12-22T10:20:25Z", "type": "commit"}, {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "message": "Update isXMLExprCastableToString logic", "committedDate": "2020-12-22T16:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNzI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547627292", "body": "Shall we fix the alignment here?", "bodyText": "Shall we fix the alignment here?", "bodyHTML": "<p dir=\"auto\">Shall we fix the alignment here?</p>", "author": "MaryamZi", "createdAt": "2020-12-23T04:03:04Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -138,6 +138,9 @@\n                                                          new Module(BALLERINA_BUILTIN_PKG_PREFIX, XML_LANG_LIB, null),\n                                                          TypeTags.XML_TEXT_TAG, true);\n \n+    public static final Type TYPE_XML_NEVER = new BXmlType(TypeConstants.XML_TNAME, new BNeverType(EMPTY_MODULE),\n+                                                EMPTY_MODULE, true);", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547757029", "body": "Shouldn't we handle the `xml:Text` scenario here?\r\n\r\nThe following results in a bad, sad error btw.\r\n\r\n```ballerina\r\npublic function main() {\r\n    'xml:Text t = \"foo\";\r\n\r\n    boolean b = <any> t is string;\r\n}\r\n```\r\n\r\nballerina-internal.log\r\n```log\r\n[2020-12-23 13:03:40,964] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app') \r\njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')\r\n\tat test.main(test.bal:2)\r\n\tat $_init.$lambda$main$(.)\r\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\r\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\r\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n```", "bodyText": "Shouldn't we handle the xml:Text scenario here?\nThe following results in a bad, sad error btw.\npublic function main() {\n    'xml:Text t = \"foo\";\n\n    boolean b = <any> t is string;\n}\nballerina-internal.log\n[2020-12-23 13:03:40,964] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')\n\tat test.main(test.bal:2)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "bodyHTML": "<p dir=\"auto\">Shouldn't we handle the <code>xml:Text</code> scenario here?</p>\n<p dir=\"auto\">The following results in a bad, sad error btw.</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    'xml:Text t = &quot;foo&quot;;\n\n    boolean b = &lt;any&gt; t is string;\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span> <span class=\"pl-smi\">t</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>;\n\n    <span class=\"pl-c1\">boolean</span> b <span class=\"pl-k\">=</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">any</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">t</span> <span class=\"pl-k\">is</span> <span class=\"pl-c1\">string</span>;\n}</pre></div>\n<p dir=\"auto\">ballerina-internal.log</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[2020-12-23 13:03:40,964] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')\n\tat test.main(test.bal:2)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\"><pre lang=\"log\"><code>[2020-12-23 13:03:40,964] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')\n\tat test.main(test.bal:2)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n</code></pre></div>", "author": "MaryamZi", "createdAt": "2020-12-23T07:35:46Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -656,6 +656,14 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n                 return sourceTypeTag == targetTypeTag;\n+            case TypeTags.STRING_TAG:\n+                if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n+                    return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n+                }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;\n+                }\n+                return sourceTypeTag == targetTypeTag;", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzY1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547757654", "bodyText": "There's also a separate issue here (not introduce by this PR) when type checking unions against simple basic types - #27627", "author": "MaryamZi", "createdAt": "2020-12-23T07:36:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3MTE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r551171153", "bodyText": "@suleka96, like you pointed out 'xml:Text t = \"foo\"; should have resulted in a compilation error.\nBut can you also check the runtime behaviour here when t is 'xml:Text t = xml `foo`;?", "author": "MaryamZi", "createdAt": "2021-01-04T08:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547765832", "body": "Why are we checking for an exact match here?\r\n\r\n`b3` below should also be `true`, right?\r\n\r\n```ballerina\r\npublic function main() {\r\n    xml<never> x = xml ``;\r\n    any a = x;\r\n\r\n    boolean b1 = a is 'xml:Text; // true\r\n    boolean b2 = a is xml; // true\r\n\r\n    xml<'xml:Text|'xml:Comment> x2 = x; // allowed at compile-time\r\n    boolean b3 = a is xml<'xml:Text|'xml:Comment>; // false\r\n}\r\n```", "bodyText": "Why are we checking for an exact match here?\nb3 below should also be true, right?\npublic function main() {\n    xml<never> x = xml ``;\n    any a = x;\n\n    boolean b1 = a is 'xml:Text; // true\n    boolean b2 = a is xml; // true\n\n    xml<'xml:Text|'xml:Comment> x2 = x; // allowed at compile-time\n    boolean b3 = a is xml<'xml:Text|'xml:Comment>; // false\n}", "bodyHTML": "<p dir=\"auto\">Why are we checking for an exact match here?</p>\n<p dir=\"auto\"><code>b3</code> below should also be <code>true</code>, right?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public function main() {\n    xml&lt;never&gt; x = xml ``;\n    any a = x;\n\n    boolean b1 = a is 'xml:Text; // true\n    boolean b2 = a is xml; // true\n\n    xml&lt;'xml:Text|'xml:Comment&gt; x2 = x; // allowed at compile-time\n    boolean b3 = a is xml&lt;'xml:Text|'xml:Comment&gt;; // false\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">never</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">xml</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-k\">any</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>;\n\n    <span class=\"pl-c1\">boolean</span> b1 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">is</span> <span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span>; <span class=\"pl-c\">// true</span>\n    <span class=\"pl-c1\">boolean</span> b2 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">is</span> <span class=\"pl-c1\">xml</span>; <span class=\"pl-c\">// true</span>\n\n    <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span><span class=\"pl-k\">|</span>'<span class=\"pl-smi\">xml</span>:<span class=\"pl-smi\">Comment</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">x2</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">x</span>; <span class=\"pl-c\">// allowed at compile-time</span>\n    <span class=\"pl-c1\">boolean</span> b3 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">is</span> <span class=\"pl-c1\">xml</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">'xml</span><span class=\"pl-k\">:</span><span class=\"pl-smi\">Text</span><span class=\"pl-k\">|</span>'<span class=\"pl-smi\">xml</span>:<span class=\"pl-smi\">Comment</span><span class=\"pl-k\">&gt;</span>; <span class=\"pl-c\">// false</span>\n}</pre></div>", "author": "MaryamZi", "createdAt": "2020-12-23T07:46:52Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +901,33 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                if (targetConstraint.getTag() == TypeTags.UNION_TAG) {\n+                    List<Type> constraintTypes = ((BUnionType) targetConstraint).getMemberTypes();\n+                    List<Type> builtinXMLConstraintTypes = ((BUnionType) ((BXmlType)\n+                            TYPE_XML).constraint).getMemberTypes();\n+                    return builtinXMLConstraintTypes.equals(constraintTypes);", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MDUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547770526", "body": "I think we can make this the first check here and skip the rest of the checks sooner.", "bodyText": "I think we can make this the first check here and skip the rest of the checks sooner.", "bodyHTML": "<p dir=\"auto\">I think we can make this the first check here and skip the rest of the checks sooner.</p>", "author": "MaryamZi", "createdAt": "2020-12-23T07:52:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4036,7 +4036,15 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n     }\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n-        checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        checkStringTemplateExprs(literalValues, false);\n+        BLangExpression xmlExpression = literalValues.get(0);\n+        if (xmlExpression.getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) xmlExpression).value).isEmpty() &&\n+                literalValues.size() == 1) {", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NDk4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547774982", "body": "Shall we change the name of the parameter? `conversionExprType` isn't quite relevant here, right?", "bodyText": "Shall we change the name of the parameter? conversionExprType isn't quite relevant here, right?", "bodyHTML": "<p dir=\"auto\">Shall we change the name of the parameter? <code>conversionExprType</code> isn't quite relevant here, right?</p>", "author": "MaryamZi", "createdAt": "2020-12-23T07:57:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isXMLSourceCastableToString(BType conversionExprType) {", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjQ3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547776475", "body": "```suggestion\r\n        } else if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n          \n          \n            \n                    } else if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (sourceTag <span class=\"pl-k\">==</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>XML_TEXT</span> <span class=\"pl-k\">&amp;&amp;</span> targetTag <span class=\"pl-k\">==</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STRING</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (sourceTag <span class=\"pl-k\">==</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>XML_TEXT</span> <span class=\"pl-k\">&amp;&amp;</span> targetTag <span class=\"pl-k\">==</span> <span class=\"pl-smi\">TypeTags</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STRING</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-12-23T07:59:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjkzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547776938", "bodyText": "This change is not needed if we definitely return in the if block above.", "author": "MaryamZi", "createdAt": "2020-12-23T08:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5MjE1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547792156", "body": "If `source.constraint == null` can't we return false here?", "bodyText": "If source.constraint == null can't we return false here?", "bodyHTML": "<p dir=\"auto\">If <code>source.constraint == null</code> can't we return false here?</p>", "author": "MaryamZi", "createdAt": "2020-12-23T08:18:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5NTU0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547795547", "body": "Just for consistency with other methods shall we switch the parameters here?\r\n```suggestion\r\n    public boolean isXMLExprCastableToString(BType source, BType target) {\r\n```", "bodyText": "Just for consistency with other methods shall we switch the parameters here?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isXMLExprCastableToString(BType target, BType source) {\n          \n          \n            \n                public boolean isXMLExprCastableToString(BType source, BType target) {", "bodyHTML": "<p dir=\"auto\">Just for consistency with other methods shall we switch the parameters here?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">boolean</span> isXMLExprCastableToString(<span class=\"pl-smi\">BType</span> <span class=\"x x-first x-last\">target</span>, <span class=\"pl-smi\">BType</span> <span class=\"x x-first x-last\">source</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">boolean</span> isXMLExprCastableToString(<span class=\"pl-smi\">BType</span> <span class=\"x x-first x-last\">source</span>, <span class=\"pl-smi\">BType</span> <span class=\"x x-first x-last\">target</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaryamZi", "createdAt": "2020-12-23T08:21:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMDU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547800552", "body": "I'm not sure if the first part of this check is correct in the case of a union? Shouldn't we check if  at least one member of the target union is assignable to string instead (e.g., `int|string`)?\r\n\r\nPlease add tests to cover the same.", "bodyText": "I'm not sure if the first part of this check is correct in the case of a union? Shouldn't we check if  at least one member of the target union is assignable to string instead (e.g., int|string)?\nPlease add tests to cover the same.", "bodyHTML": "<p dir=\"auto\">I'm not sure if the first part of this check is correct in the case of a union? Shouldn't we check if  at least one member of the target union is assignable to string instead (e.g., <code>int|string</code>)?</p>\n<p dir=\"auto\">Please add tests to cover the same.</p>", "author": "MaryamZi", "createdAt": "2020-12-23T08:27:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwNDczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547804739", "body": "Can't we directly check `isAssignable(source, symTable.xmlTextType);` instead of `isXMLSourceCastableToString(source)`?", "bodyText": "Can't we directly check isAssignable(source, symTable.xmlTextType); instead of isXMLSourceCastableToString(source)?", "bodyHTML": "<p dir=\"auto\">Can't we directly check <code>isAssignable(source, symTable.xmlTextType);</code> instead of <code>isXMLSourceCastableToString(source)</code>?</p>", "author": "MaryamZi", "createdAt": "2020-12-23T08:32:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);", "originalCommit": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea87e9f81181362e9b432dfe2aecfa6535327bb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea87e9f81181362e9b432dfe2aecfa6535327bb0", "message": "Disallow assignability of string to xml:Text", "committedDate": "2021-01-05T04:13:38Z", "type": "commit"}, {"oid": "a6885990b2893a5efd25c513dcdacbc0755eb430", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6885990b2893a5efd25c513dcdacbc0755eb430", "message": "Refactor TypeChecker", "committedDate": "2021-01-05T04:29:51Z", "type": "commit"}, {"oid": "19f5ec847ea62986316413fd98451371644eb061", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19f5ec847ea62986316413fd98451371644eb061", "message": "Refactor xml tests", "committedDate": "2021-01-06T07:41:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAyOTU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555029554", "body": "shall we extract the method from this switch-case, something like `createXmlTemplateLiteral`\n", "bodyText": "shall we extract the method from this switch-case, something like createXmlTemplateLiteral", "bodyHTML": "<p dir=\"auto\">shall we extract the method from this switch-case, something like <code>createXmlTemplateLiteral</code></p>", "author": "rdhananjaya", "createdAt": "2021-01-11T12:59:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2158,7 +2158,12 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                SyntaxKind contentKind;", "originalCommit": "19f5ec847ea62986316413fd98451371644eb061", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAzMjU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555032559", "body": "shall we directly pass the position, it feels weired to send in an expression to a function that create empty string literal.", "bodyText": "shall we directly pass the position, it feels weired to send in an expression to a function that create empty string literal.", "bodyHTML": "<p dir=\"auto\">shall we directly pass the position, it feels weired to send in an expression to a function that create empty string literal.</p>", "author": "rdhananjaya", "createdAt": "2021-01-11T13:05:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4601,6 +4611,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(TemplateExpressionNode expressionNode) {", "originalCommit": "19f5ec847ea62986316413fd98451371644eb061", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNTY1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555525653", "body": "shall we directly call `checkIsUnionType`", "bodyText": "shall we directly call checkIsUnionType", "bodyHTML": "<p dir=\"auto\">shall we directly call <code>checkIsUnionType</code></p>", "author": "rdhananjaya", "createdAt": "2021-01-12T05:40:38Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +907,30 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                if (targetConstraint.getTag() == TypeTags.UNION_TAG) {\n+                    return checkIsType(source, targetConstraint, unresolvedTypes);", "originalCommit": "19f5ec847ea62986316413fd98451371644eb061", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a75873c11630b7091f97bb9ede18a461568872ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a75873c11630b7091f97bb9ede18a461568872ba", "message": "Refactor code", "committedDate": "2021-01-12T13:29:22Z", "type": "commit"}, {"oid": "efe5655e7ff9b24b475341f8c743ec5706c53e09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efe5655e7ff9b24b475341f8c743ec5706c53e09", "message": "Refactor createXmlTemplateLiteral", "committedDate": "2021-01-12T13:39:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzNzAyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555837020", "body": "Can't we just do, `bLiteral.type = symTable.stringType;`", "bodyText": "Can't we just do, bLiteral.type = symTable.stringType;", "bodyHTML": "<p dir=\"auto\">Can't we just do, <code>bLiteral.type = symTable.stringType;</code></p>", "author": "KavinduZoysa", "createdAt": "2021-01-12T15:01:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4601,6 +4615,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(Location pos) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+        int typeTag = TypeTags.STRING;\n+        bLiteral.pos = pos;\n+        bLiteral.type = symTable.getTypeFromTag(typeTag);\n+        bLiteral.type.tag = typeTag;", "originalCommit": "efe5655e7ff9b24b475341f8c743ec5706c53e09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "61366c18d96d73e9b50e72bfd116872f6aad815e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61366c18d96d73e9b50e72bfd116872f6aad815e", "message": "Refactor createEmptyStringLiteral", "committedDate": "2021-01-12T15:18:14Z", "type": "commit"}, {"oid": "61366c18d96d73e9b50e72bfd116872f6aad815e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61366c18d96d73e9b50e72bfd116872f6aad815e", "message": "Refactor createEmptyStringLiteral", "committedDate": "2021-01-12T15:18:14Z", "type": "forcePushed"}, {"oid": "48e99abecb2fe501c557cb26da91025ab18a068e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48e99abecb2fe501c557cb26da91025ab18a068e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into XML_literal_crash\nMerge upstream changes", "committedDate": "2021-01-12T16:07:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg5NTQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555895485", "body": "It is not needed to set the tag here. `symTable.stringType` contains the tag. Please check it.", "bodyText": "It is not needed to set the tag here. symTable.stringType contains the tag. Please check it.", "bodyHTML": "<p dir=\"auto\">It is not needed to set the tag here. <code>symTable.stringType</code> contains the tag. Please check it.</p>", "author": "KavinduZoysa", "createdAt": "2021-01-12T16:14:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4633,6 +4647,16 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(Location pos) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+        bLiteral.pos = pos;\n+        bLiteral.type = symTable.stringType;\n+        bLiteral.type.tag = TypeTags.STRING;", "originalCommit": "48e99abecb2fe501c557cb26da91025ab18a068e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40d3405c6e41fe05f2a5780c1d6874f469ddd8c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40d3405c6e41fe05f2a5780c1d6874f469ddd8c8", "message": "Refactor createEmptyStringLiteral", "committedDate": "2021-01-12T17:23:33Z", "type": "commit"}]}