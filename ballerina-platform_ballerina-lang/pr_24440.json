{"pr_number": 24440, "pr_title": "Make `strings` field of `RawTemplate` a readonly field", "pr_author": "pubudu91", "pr_createdAt": "2020-06-23T11:55:46Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440", "timeline": [{"oid": "be24308a001ed4f51a75fb8fa9841163ff2c330f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be24308a001ed4f51a75fb8fa9841163ff2c330f", "message": "Fix raw template test cases", "committedDate": "2020-06-23T12:27:47Z", "type": "forcePushed"}, {"oid": "900286a56346a3adb718ffa4466726eccc86fd29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/900286a56346a3adb718ffa4466726eccc86fd29", "message": "Generate a separate name for raw template object classes", "committedDate": "2020-06-23T13:19:29Z", "type": "forcePushed"}, {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/879ac77b472b12843d19dbe9c2978400e422da1d", "message": "Modify sql:ParamterizedQuery definition", "committedDate": "2020-07-01T19:17:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449978209", "body": "We probably wouldn't need this change once we merge https://github.com/ballerina-platform/ballerina-lang/pull/24484/commits/b0624bb903dc06b54205c97b611c5463a97d0583. ", "bodyText": "We probably wouldn't need this change once we merge b0624bb.", "bodyHTML": "<p dir=\"auto\">We probably wouldn't need this change once we merge <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/ballerina-platform/ballerina-lang/commit/b0624bb903dc06b54205c97b611c5463a97d0583/hovercard\" href=\"https://github.com/ballerina-platform/ballerina-lang/commit/b0624bb903dc06b54205c97b611c5463a97d0583\"><tt>b0624bb</tt></a>.</p>", "author": "MaryamZi", "createdAt": "2020-07-06T04:30:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455090748", "bodyText": "Shall we create an issue for this? You can assign it to me. \ud83d\ude04", "author": "MaryamZi", "createdAt": "2020-07-15T14:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126769", "bodyText": "Ah sure.. will do", "author": "pubudu91", "createdAt": "2020-07-15T15:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MzI5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449983295", "body": "Shall we also update the comment?", "bodyText": "Shall we also update the comment?", "bodyHTML": "<p dir=\"auto\">Shall we also update the comment?</p>", "author": "MaryamZi", "createdAt": "2020-07-06T04:55:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449987738", "body": "What if the union has `any` and one or more compatible object types? In that case it should be an ambiguous type error right?", "bodyText": "What if the union has any and one or more compatible object types? In that case it should be an ambiguous type error right?", "bodyHTML": "<p dir=\"auto\">What if the union has <code>any</code> and one or more compatible object types? In that case it should be an ambiguous type error right?</p>", "author": "MaryamZi", "createdAt": "2020-07-06T05:16:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453553500", "bodyText": "Shouldn't a union of any and any other type (except error) simplify to just any (currently it doesn't it seems)? In which case it should just be considered a RawTemplate", "author": "pubudu91", "createdAt": "2020-07-13T10:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NTQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454595494", "bodyText": "Shouldn't we handle this scenario for the time-being though?", "author": "MaryamZi", "createdAt": "2020-07-14T19:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MjE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455062158", "bodyText": "This behaviour is correct for the scenario right? Considering that any|Foo|Bar (where Foo and Bar are raw template types) is the same as any", "author": "pubudu91", "createdAt": "2020-07-15T13:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988220", "body": "Btw, the following union as the CET should also work right?\r\n\r\n```ballerina\r\ntype Foo abstract object {\r\n    public string[] strings;\r\n    public any[] insertions;\r\n};\r\n\r\npublic function main() {\r\n    string x = \"World\";\r\n    Foo|int f = `\"Hello ${x}`;\r\n}\r\n```\r\n\r\nCurrently (slp1) fails\r\n\r\n```cmd\r\n$ ballerina run qwe.bal \r\nCompiling source\r\n        qwe.bal\r\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'\r\n```", "bodyText": "Btw, the following union as the CET should also work right?\ntype Foo abstract object {\n    public string[] strings;\n    public any[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|int f = `\"Hello ${x}`;\n}\nCurrently (slp1) fails\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'", "bodyHTML": "<p dir=\"auto\">Btw, the following union as the CET should also work right?</p>\n<div class=\"highlight highlight-source-ballerina position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Foo abstract object {\n    public string[] strings;\n    public any[] insertions;\n};\n\npublic function main() {\n    string x = &quot;World&quot;;\n    Foo|int f = `&quot;Hello ${x}`;\n}\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">Foo</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">object</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-c1\">string</span>[] strings;\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">any</span>[] <span class=\"pl-smi\">insertions</span>;\n};\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">function</span> main() {\n    <span class=\"pl-c1\">string</span> x <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>World<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-smi\">Foo</span><span class=\"pl-k\">|</span><span class=\"pl-c1\">int</span> f <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>\"Hello ${<span class=\"pl-smi\">x</span>}<span class=\"pl-pds\">`</span></span>;\n}</pre></div>\n<p dir=\"auto\">Currently (slp1) fails</p>\n<div class=\"highlight highlight-source-batchfile position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'\"><pre>$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal <span class=\"pl-k\">for</span> <span class=\"pl-k\">type</span> '(Foo<span class=\"pl-k\">|</span>int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'</pre></div>", "author": "MaryamZi", "createdAt": "2020-07-06T05:17:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988564", "bodyText": "And the following union, where only one is compatible.\ntype Foo abstract object {\n    public string[] strings;\n    public int[] insertions;\n};\n\ntype Bar abstract object {\n    public string[] strings;\n    public string[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|Bar f = `\"Hello ${x}`;\n}\nFails with\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:13:17: invalid raw template assignment: '(Foo|Bar)' should be an abstract object", "author": "MaryamZi", "createdAt": "2020-07-06T05:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MDM4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453470382", "bodyText": "Fixed the first case with ce3ad42. The second case is a bit tricky. Looks like the whole type checking logic for raw templates will have to be refactored to support it. I think for now better to defer this.", "author": "pubudu91", "createdAt": "2020-07-13T07:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjE5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454596191", "bodyText": "Shall we create an issue for this then? And should we consider giving a different error for now, something along the lines of \"not yet supported\" maybe?", "author": "MaryamZi", "createdAt": "2020-07-14T19:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455038721", "bodyText": "Even to give an error like that, I think we'll have to separately identify that particular case, which is the issue with the way currently it's type checked.", "author": "pubudu91", "createdAt": "2020-07-15T13:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzU3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455043576", "bodyText": "Created #24766 to track this", "author": "pubudu91", "createdAt": "2020-07-15T13:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4OTI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449989297", "body": "Shall we test this also in Ballerina itself?\r\n\r\nFor example, https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149.", "bodyText": "Shall we test this also in Ballerina itself?\nFor example, https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149.", "bodyHTML": "<p dir=\"auto\">Shall we test this also in Ballerina itself?</p>\n<p dir=\"auto\">For example, <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149\">https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149</a>.</p>", "author": "MaryamZi", "createdAt": "2020-07-06T05:22:21Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java", "diffHunk": "@@ -118,6 +122,13 @@ public void testIndirectAssignmentToConcreteType() {\n         BRunUtil.invoke(result, \"testIndirectAssignmentToConcreteType\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp =\n+                  \".*InvalidUpdate message=modification not allowed on readonly value.*\")", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NTkwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r451065906", "body": "Wonder why doesn't anyone use `getOrDefault` method here.\r\n```Java\r\nInteger nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);\r\n```\r\n", "bodyText": "Wonder why doesn't anyone use getOrDefault method here.\nInteger nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);", "bodyHTML": "<p dir=\"auto\">Wonder why doesn't anyone use <code>getOrDefault</code> method here.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Integer nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);\"><pre><span class=\"pl-smi\">Integer</span> nextValue <span class=\"pl-k\">=</span> rawTemplateTypeCount<span class=\"pl-k\">.</span>getOrDefault(packageID, <span class=\"pl-c1\">0</span>);</pre></div>", "author": "KRVPerera", "createdAt": "2020-07-07T18:35:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java", "diffHunk": "@@ -106,6 +110,12 @@ public String getNextDistinctErrorId(PackageID packageID) {\n         return ANON_TYPE_ID + String.valueOf(nextValue);\n     }\n \n+    public String getNextRawTemplateTypeKey(PackageID packageID, Name rawTemplateTypeName) {\n+        Integer nextValue = Optional.ofNullable(rawTemplateTypeCount.get(packageID)).orElse(0);", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "message": "Add support for use of raw templates with unions", "committedDate": "2020-07-13T07:01:22Z", "type": "forcePushed"}, {"oid": "f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "message": "Refactor panicking tests", "committedDate": "2020-07-13T10:28:07Z", "type": "forcePushed"}, {"oid": "7374552d923751d8b5821d09d88fae3b3b043bb6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7374552d923751d8b5821d09d88fae3b3b043bb6", "message": "Change RawTemplate's strings field to readonly", "committedDate": "2020-07-15T13:41:26Z", "type": "commit"}, {"oid": "803ca052ae3725b85eb05d3384eecc9566223548", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/803ca052ae3725b85eb05d3384eecc9566223548", "message": "Fix raw template test cases", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "message": "Generate a separate name for raw template object classes", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "459576658085ad56da860c25950d8be26b65f64c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/459576658085ad56da860c25950d8be26b65f64c", "message": "Fix type checking issue in unions with any", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "6508fb3b9e7cf8645f6aabca01560874eb4de438", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6508fb3b9e7cf8645f6aabca01560874eb4de438", "message": "Fix checkstyle issues", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "7858d1903f140d5c335eea15f8f99c5609b93f5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7858d1903f140d5c335eea15f8f99c5609b93f5b", "message": "Modify sql:ParamterizedQuery definition", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "6582c5fa3be07eccb22021b1107ce04b53ff26d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6582c5fa3be07eccb22021b1107ce04b53ff26d7", "message": "Add support for use of raw templates with unions", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "message": "Refactor panicking tests", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "message": "Refactor panicking tests", "committedDate": "2020-07-15T13:41:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455109811", "body": "Should we call `getEffectiveMemberTypes` here instead of `getMemberTypes` ?\r\nhttps://github.com/ballerina-platform/ballerina-lang/blob/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java#L2336\r\n\r\nThis is currently used in \r\nhttps://github.com/ballerina-platform/ballerina-lang/blob/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java#L2297", "bodyText": "Should we call getEffectiveMemberTypes here instead of getMemberTypes ?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2336\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private Set<BType> getEffectiveMemberTypes(BUnionType unionType) { \n        \n    \n  \n\n\nThis is currently used in\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2297\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair> unresolvedTypes) {", "bodyHTML": "<p dir=\"auto\">Should we call <code>getEffectiveMemberTypes</code> here instead of <code>getMemberTypes</code> ?<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java#L2336\">ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 2336\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/ballerina-platform/ballerina-lang/commit/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374\">1cbfd04</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2336\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"2336\"></td>\n          <td id=\"LC2336\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">private</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">BType</span>&gt;</span> <span class=\"pl-en\">getEffectiveMemberTypes</span>(<span class=\"pl-smi\">BUnionType</span> <span class=\"pl-v\">unionType</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">This is currently used in<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java#L2297\">ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 2297\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/ballerina-platform/ballerina-lang/commit/1cbfd04db73a9f36a46bdb47e8298bc5c4f39374\">1cbfd04</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2297\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"2297\"></td>\n          <td id=\"LC2297\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">private</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">isAssignableToUnionType</span>(<span class=\"pl-smi\">BType</span> <span class=\"pl-v\">source</span>, <span class=\"pl-smi\">BType</span> <span class=\"pl-v\">target</span>, <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">TypePair</span>&gt;</span> <span class=\"pl-v\">unresolvedTypes</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "KRVPerera", "createdAt": "2020-07-15T14:47:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "originalCommit": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDA4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455120084", "bodyText": "I guess the isAssignable check will handle this for us.", "author": "MaryamZi", "createdAt": "2020-07-15T14:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455129322", "bodyText": "This is just to iterate through the union members to see if there are compatible raw template types. No need to call getEffectiveMemberTypes() for that right?", "author": "pubudu91", "createdAt": "2020-07-15T15:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MDQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455590409", "bodyText": "\ud83d\udc4d", "author": "KRVPerera", "createdAt": "2020-07-16T07:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126733", "body": "```suggestion\r\n    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),\n          \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1\">MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>multiple.<span class=\"x x-first x-last\">compatiple</span>.raw.template.types<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1\">MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>multiple.<span class=\"x x-first x-last\">compatible</span>.raw.template.types<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "dulajdilshan", "createdAt": "2020-07-15T15:08:24Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -553,6 +553,7 @@\n     INVALID_TYPEDESC_PARAM(\"invalid.typedesc.param\"),\n \n     INVALID_RAW_TEMPLATE_TYPE(\"invalid.raw.template.type\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),", "originalCommit": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "message": "Fix review suggestions", "committedDate": "2020-07-15T15:20:51Z", "type": "commit"}]}