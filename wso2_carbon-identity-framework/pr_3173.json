{"pr_number": 3173, "pr_title": "Add nonce cookie validation to login flow.", "pr_author": "inthirakumaaran", "pr_createdAt": "2020-10-17T15:12:58Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3173", "timeline": [{"oid": "8d61dd35e9a46adff3c903c70ed2378a12345cc1", "url": "https://github.com/wso2/carbon-identity-framework/commit/8d61dd35e9a46adff3c903c70ed2378a12345cc1", "message": "Add configuration for nonce cookie.", "committedDate": "2020-10-28T07:17:19Z", "type": "forcePushed"}, {"oid": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "url": "https://github.com/wso2/carbon-identity-framework/commit/8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-04T08:12:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3ODQ5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517778499", "body": "no need to declare a variable.", "bodyText": "no need to declare a variable.", "bodyHTML": "<p dir=\"auto\">no need to declare a variable.</p>", "author": "thanujalk", "createdAt": "2020-11-05T03:56:31Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MDkzNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517780935", "body": "```suggestion\r\n        if (nonceCookieConfig == null) {\r\n            nonceCookieConfig = Boolean.parseBoolean(IdentityUtil.getProperty(NONCE_COOKIE_CONFIG));\r\n        }\r\n        return nonceCookieConfig;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                        nonceCookieConfig = Boolean.parseBoolean(IdentityUtil.getProperty(NONCE_COOKIE_CONFIG));\n          \n          \n            \n                    }\n          \n          \n            \n                    return nonceCookieConfig;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"126\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (nonceCookieConfig <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"126\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (nonceCookieConfig <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"127\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            nonceCookieConfig <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Boolean</span><span class=\"pl-k\">.</span>parseBoolean(<span class=\"pl-smi\">IdentityUtil</span><span class=\"pl-k\">.</span>getProperty(<span class=\"pl-c1\">NONCE_COOKIE_CONFIG</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"128\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"129\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> nonceCookieConfig;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "thanujalk", "createdAt": "2020-11-05T04:07:28Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Removes nonce value from context and cookie.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void removeNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                         AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.removeCookie(request, response, cookieName);\n+            context.removeProperty(cookieName);\n+        }\n+    }\n+\n+    /**\n+     * Check whether nonce cookie config is enabled or not.\n+     *\n+     * @return nonce cookie enabled or not.\n+     */\n+    public static boolean isNonceCookieEnabled() {\n+\n+        if (nonceCookieConfig == null) {", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MTgwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517781802", "body": "Suggestion: if you start the method like\r\n```\r\nif (!isNonceCookieEnabled()) {\r\n   return true;\r\n}\r\n\r\n....rest of the logic...\r\n```\r\nIt is much cleaner.", "bodyText": "Suggestion: if you start the method like\nif (!isNonceCookieEnabled()) {\n   return true;\n}\n\n....rest of the logic...\n\nIt is much cleaner.", "bodyHTML": "<p dir=\"auto\">Suggestion: if you start the method like</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!isNonceCookieEnabled()) {\n   return true;\n}\n\n....rest of the logic...\"><pre><code>if (!isNonceCookieEnabled()) {\n   return true;\n}\n\n....rest of the logic...\n</code></pre></div>\n<p dir=\"auto\">It is much cleaner.</p>", "author": "thanujalk", "createdAt": "2020-11-05T04:11:22Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a4ca2feac29eaeca23d069ac9a4c4f2fd4cdc43", "url": "https://github.com/wso2/carbon-identity-framework/commit/0a4ca2feac29eaeca23d069ac9a4c4f2fd4cdc43", "message": "Add nonce cookie validation to login flow.", "committedDate": "2020-11-05T05:16:53Z", "type": "commit"}, {"oid": "56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "url": "https://github.com/wso2/carbon-identity-framework/commit/56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-05T05:16:53Z", "type": "commit"}, {"oid": "56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "url": "https://github.com/wso2/carbon-identity-framework/commit/56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-05T05:16:53Z", "type": "forcePushed"}]}