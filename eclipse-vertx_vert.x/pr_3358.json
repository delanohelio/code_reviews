{"pr_number": 3358, "pr_title": "HAProxy protocol support", "pr_author": "zenios", "pr_createdAt": "2020-04-05T21:29:43Z", "pr_url": "https://github.com/eclipse-vertx/vert.x/pull/3358", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404068829", "body": "we should only add this to the pipeline when the option is configured. pipeline handlers have effect on performance and we should avoid adding them when it is not necessary", "bodyText": "we should only add this to the pipeline when the option is configured. pipeline handlers have effect on performance and we should avoid adding them when it is not necessary", "bodyHTML": "<p dir=\"auto\">we should only add this to the pipeline when the option is configured. pipeline handlers have effect on performance and we should avoid adding them when it is not necessary</p>", "author": "vietj", "createdAt": "2020-04-06T12:57:24Z", "path": "src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java", "diffHunk": "@@ -217,6 +218,7 @@ private void configureHttp1OrH2C(ChannelPipeline pipeline, HandlerHolder<? exten\n     if (HttpServerImpl.USE_FLASH_POLICY_HANDLER) {\n       pipeline.addLast(\"flashpolicy\", new FlashPolicyHandler());\n     }\n+    pipeline.addLast(\"optionalHAProxyMessageDecoder\", new OptionalHAProxyMessageDecoder());", "originalCommit": "1aeccd54b370fad47627232c1e6210432f23a719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTgzOA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404069838", "bodyText": "so there should be an option for enabling / disabling it in server", "author": "vietj", "createdAt": "2020-04-06T12:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MDQwMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404070402", "bodyText": "also this will allow to run without the ha proxy class on the classpath by default", "author": "vietj", "createdAt": "2020-04-06T12:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MTM2MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404071360", "bodyText": "Have in mind that its autoremoved once the first 12 bytes are received (12 bytes are the number of bytes required to find out if its an haproxy protocol)\nInstead of an option we could check if HaProxy is in classpatch and enable it\nTell me which one you prefer and will implement\nOption or classpath?", "author": "zenios", "createdAt": "2020-04-06T13:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MzUzNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404073536", "bodyText": "good point for the removal, for now let's do classpath as I would like to avoid having the jar OOTB.", "author": "vietj", "createdAt": "2020-04-06T13:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java b/src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java\nindex af2801fdd..a5cf493f0 100644\n--- a/src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java\n+++ b/src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java\n", "chunk": "@@ -218,7 +249,6 @@ import java.util.function.Function;\n     if (HttpServerImpl.USE_FLASH_POLICY_HANDLER) {\n       pipeline.addLast(\"flashpolicy\", new FlashPolicyHandler());\n     }\n-    pipeline.addLast(\"optionalHAProxyMessageDecoder\", new OptionalHAProxyMessageDecoder());\n     pipeline.addLast(\"httpDecoder\", new VertxHttpRequestDecoder(options));\n     pipeline.addLast(\"httpEncoder\", new VertxHttpResponseEncoder());\n     if (options.isDecompressionSupported()) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwODQzOA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404108438", "body": "can you catch `Throwable` to avoid any class initialisation error", "bodyText": "can you catch Throwable to avoid any class initialisation error", "bodyHTML": "<p dir=\"auto\">can you catch <code>Throwable</code> to avoid any class initialisation error</p>", "author": "vietj", "createdAt": "2020-04-06T13:54:02Z", "path": "src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.core.http.impl.haproxy;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.codec.ProtocolDetectionResult;\n+import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;\n+\n+import java.util.List;\n+\n+public class OptionalHAProxyMessageDecoder extends ByteToMessageDecoder {\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (ClassNotFoundException ex) {", "originalCommit": "c3270115a8b40aa801c50a6cd26866f47d24e294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java b/src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java\ndeleted file mode 100644\nindex 3796d1313..000000000\n--- a/src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java\n+++ /dev/null\n", "chunk": "@@ -1,52 +0,0 @@\n-/*\n- * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n- * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n- */\n-\n-package io.vertx.core.http.impl.haproxy;\n-\n-import io.netty.buffer.ByteBuf;\n-import io.netty.channel.ChannelHandlerContext;\n-import io.netty.handler.codec.ByteToMessageDecoder;\n-import io.netty.handler.codec.ProtocolDetectionResult;\n-import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;\n-import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;\n-\n-import java.util.List;\n-\n-public class OptionalHAProxyMessageDecoder extends ByteToMessageDecoder {\n-  private static final boolean hasProxyProtocolSupport;\n-\n-  static {\n-    boolean proxyProtocolCheck = true;\n-    try {\n-      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n-    } catch (ClassNotFoundException ex) {\n-      proxyProtocolCheck = false;\n-    }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n-  }\n-\n-  public static boolean hasProxyProtocolSupport() {\n-    return hasProxyProtocolSupport;\n-  }\n-\n-  @Override\n-  protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> list) {\n-    ProtocolDetectionResult<HAProxyProtocolVersion> detectionResult = HAProxyMessageDecoder.detectProtocol(in);\n-    if (detectionResult.equals(ProtocolDetectionResult.invalid())) {\n-      ctx.pipeline().remove(this);\n-    } else if (!detectionResult.equals(ProtocolDetectionResult.needsMoreData())) {\n-      ctx.pipeline()\n-        .replace(this, \"haProxyMessageDecoder\", new HAProxyMessageDecoder());\n-      ctx.pipeline()\n-        .addAfter(\"haProxyMessageDecoder\", \"haProxyMessageHandler\", new HAProxyMessageHandler());\n-    }\n-  }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MjE0NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404392144", "body": "rename it `proxyProtocolSupport` instead, proxy is confusing given that the client supports a `proxyOptions`", "bodyText": "rename it proxyProtocolSupport instead, proxy is confusing given that the client supports a proxyOptions", "bodyHTML": "<p dir=\"auto\">rename it <code>proxyProtocolSupport</code> instead, proxy is confusing given that the client supports a <code>proxyOptions</code></p>", "author": "vietj", "createdAt": "2020-04-06T21:14:20Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxySupport;", "originalCommit": "a74f0f717cc48465d74beaae52f7a4041b9aaff8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex e778d7005..06110a6dc 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -57,14 +57,14 @@ public class NetServerOptions extends TCPSSLOptions {\n   /**\n    * Default value of whether the server supports HA Proxy protocol = false\n    */\n-  public static final boolean DEFAULT_PROXY_SUPPORT = false;\n+  public static final boolean DEFAULT_USE_PROXY_PROTOCOL = false;\n \n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n-  private boolean proxySupport;\n+  private boolean useProxyProtocol;\n \n   /**\n    * Default constructor\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -55,16 +55,28 @@ public class NetServerOptions extends TCPSSLOptions {\n   public static final boolean DEFAULT_SNI = false;\n \n   /**\n-   * Default value of whether the server supports HA Proxy protocol = false\n+   * Default value of whether the server supports HA PROXY protocol = false\n    */\n   public static final boolean DEFAULT_USE_PROXY_PROTOCOL = false;\n \n+  /**\n+   * The default value of HA PROXY protocol timeout = 10\n+   */\n+  public static final long DEFAULT_PROXY_PROTOCOL_TIMEOUT = 10L;\n+\n+  /**\n+   * Default HA PROXY protocol time unit = SECONDS\n+   */\n+  public static final TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT = TimeUnit.SECONDS;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n   private boolean useProxyProtocol;\n+  private long proxyProtocolTimeout;\n+  private TimeUnit proxyProtocolTimeoutUnit;\n \n   /**\n    * Default constructor\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404746930", "body": "why did you remove this ?", "bodyText": "why did you remove this ?", "bodyHTML": "<p dir=\"auto\">why did you remove this ?</p>", "author": "vietj", "createdAt": "2020-04-07T11:48:45Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MjI2OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404762269", "bodyText": "In case of ha proxy we need to use the overriden address and not chctx.channel().remoteAddress\nI was going to make another PR later to remove this method or at least deprecate it since i think it does exactly the same work as remoteAddress().host()\nPlease corrent me if i am wrong", "author": "zenios", "createdAt": "2020-04-07T12:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MzM5NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404763395", "bodyText": "I mean the precise usage of getHostString() that has a purpose here to be not blocking", "author": "vietj", "createdAt": "2020-04-07T12:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MTExNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404781116", "bodyText": "remoteAddress().host() is exactly the same think.\npublic SocketAddressImpl(InetSocketAddress address) {\n    Arguments.requireInRange(address.getPort(), 0, 65535, \"port p must be in range 0 <= p <= 65535\");\n    this.path = null;\n    this.port= address.getPort();\n    this.host = address.getHostString();\n    if (address.isUnresolved()) {\n      this.hostName = address.getHostName();\n      this.ipAddress = null;\n    } else {\n      String host = address.getHostString();\n      if (NetUtil.isValidIpV4Address(host) || NetUtil.isValidIpV6Address(host)) {\n        host = null;\n      }\n      this.hostName = host;\n      this.ipAddress = address.getAddress();\n    }\n  }", "author": "zenios", "createdAt": "2020-04-07T12:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4NzIyNQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404787225", "bodyText": "Now i get it. I assume that is the part that will block when using normal remoteAddress().host(). Right?\nif (address.isUnresolved()) {\n      this.hostName = address.getHostName();\n      this.ipAddress = null;\n}", "author": "zenios", "createdAt": "2020-04-07T12:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex 1b29022d0..ab1c2eb09 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -471,18 +471,20 @@ public abstract class ConnectionBase {\n   }\n \n   public String remoteName() {\n-    SocketAddress addr = remoteAddress();\n-    if(addr != null)\n-      return addr.host();\n+    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+    if (addr instanceof InetSocketAddress) {\n+      // Use hostString that does not trigger a DNS resolution\n+      return ((InetSocketAddress)addr).getHostString();\n+    }\n     return null;\n   }\n \n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n-      if (addr == null)\n-        addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n+        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n+        chctx.channel().remoteAddress();\n \n       if (addr != null) {\n         address = vertx.transport().convert(addr);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex ab1c2eb09..d3b7effc3 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -482,14 +482,17 @@ public abstract class ConnectionBase {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n-        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n-        chctx.channel().remoteAddress();\n+      if (chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n+        address = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n+      } else {\n+        java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+        if (addr != null) {\n+          address = vertx.transport().convert(addr);\n+        }\n+      }\n \n-      if (addr != null) {\n-        address = vertx.transport().convert(addr);\n+      if (address != null)\n         remoteAddress = address;\n-      }\n     }\n     return address;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDQ0OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750449", "body": "here we need to use instead this pattern:\r\n\r\n```java\r\njava.net.SocketAddress addr;\r\nif (channel.hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\r\n  Attribute< java.net.SocketAddress> attr = channel.hasAttr(REMOTE_ADDRESS_OVERRIDE);\r\n  addr = attr.get();\r\n} else {\r\n  addr = chctx.channel().remoteAddress();\r\n}\r\n```\r\n\r\nCalling `attr(key)` while it is not set will have the side effect to create the attribute. Attributes cannot be removed.\r\n", "bodyText": "here we need to use instead this pattern:\njava.net.SocketAddress addr;\nif (channel.hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n  Attribute< java.net.SocketAddress> attr = channel.hasAttr(REMOTE_ADDRESS_OVERRIDE);\n  addr = attr.get();\n} else {\n  addr = chctx.channel().remoteAddress();\n}\nCalling attr(key) while it is not set will have the side effect to create the attribute. Attributes cannot be removed.", "bodyHTML": "<p dir=\"auto\">here we need to use instead this pattern:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.net.SocketAddress addr;\nif (channel.hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n  Attribute&lt; java.net.SocketAddress&gt; attr = channel.hasAttr(REMOTE_ADDRESS_OVERRIDE);\n  addr = attr.get();\n} else {\n  addr = chctx.channel().remoteAddress();\n}\"><pre><span class=\"pl-smi\">java.net<span class=\"pl-k\">.</span>SocketAddress</span> addr;\n<span class=\"pl-k\">if</span> (channel<span class=\"pl-k\">.</span>hasAttr(<span class=\"pl-c1\">REMOTE_ADDRESS_OVERRIDE</span>)) {\n  <span class=\"pl-k\">Attribute&lt; <span class=\"pl-smi\">java.net<span class=\"pl-k\">.</span>SocketAddress</span>&gt;</span> attr <span class=\"pl-k\">=</span> channel<span class=\"pl-k\">.</span>hasAttr(<span class=\"pl-c1\">REMOTE_ADDRESS_OVERRIDE</span>);\n  addr <span class=\"pl-k\">=</span> attr<span class=\"pl-k\">.</span>get();\n} <span class=\"pl-k\">else</span> {\n  addr <span class=\"pl-k\">=</span> chctx<span class=\"pl-k\">.</span>channel()<span class=\"pl-k\">.</span>remoteAddress();\n}</pre></div>\n<p dir=\"auto\">Calling <code>attr(key)</code> while it is not set will have the side effect to create the attribute. Attributes cannot be removed.</p>", "author": "vietj", "createdAt": "2020-04-07T11:55:35Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();\n-    }\n+    SocketAddress addr = remoteAddress();\n+    if(addr != null)\n+      return addr.host();\n     return null;\n   }\n \n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex 1b29022d0..ab1c2eb09 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -471,18 +471,20 @@ public abstract class ConnectionBase {\n   }\n \n   public String remoteName() {\n-    SocketAddress addr = remoteAddress();\n-    if(addr != null)\n-      return addr.host();\n+    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+    if (addr instanceof InetSocketAddress) {\n+      // Use hostString that does not trigger a DNS resolution\n+      return ((InetSocketAddress)addr).getHostString();\n+    }\n     return null;\n   }\n \n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n-      if (addr == null)\n-        addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n+        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n+        chctx.channel().remoteAddress();\n \n       if (addr != null) {\n         address = vertx.transport().convert(addr);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex ab1c2eb09..d3b7effc3 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -482,14 +482,17 @@ public abstract class ConnectionBase {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n-        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n-        chctx.channel().remoteAddress();\n+      if (chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n+        address = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n+      } else {\n+        java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+        if (addr != null) {\n+          address = vertx.transport().convert(addr);\n+        }\n+      }\n \n-      if (addr != null) {\n-        address = vertx.transport().convert(addr);\n+      if (address != null)\n         remoteAddress = address;\n-      }\n     }\n     return address;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDczNw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750737", "body": "we need to check how this works with GraalVM native compilation. @pmlopes can you provide guidance here ?", "bodyText": "we need to check how this works with GraalVM native compilation. @pmlopes can you provide guidance here ?", "bodyHTML": "<p dir=\"auto\">we need to check how this works with GraalVM native compilation. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/pmlopes/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pmlopes\">@pmlopes</a> can you provide guidance here ?</p>", "author": "vietj", "createdAt": "2020-04-07T11:56:11Z", "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nindex 04573a18d..5004f58ac 100644\n--- a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n+++ b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n", "chunk": "@@ -17,31 +17,31 @@ import java.util.List;\n \n public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n   private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n-  private static final boolean hasProxyProtocolSupport;\n+  private static final boolean proxyProtocolCodecFound;\n \n   static {\n-    boolean proxyProtocolCheck = true;\n+    boolean proxyProtocolCodecCheck = true;\n     try {\n       Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n     } catch (Throwable ex) {\n-      proxyProtocolCheck = false;\n+      proxyProtocolCodecCheck = false;\n     }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n+    proxyProtocolCodecFound = proxyProtocolCodecCheck;\n   }\n \n-  public static boolean hasProxyProtocolSupport(boolean requested) {\n-    if (requested && !hasProxyProtocolSupport)\n-      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n-    return hasProxyProtocolSupport && requested;\n+  public static boolean canUseProxyProtocol(boolean requested) {\n+    if (requested && !proxyProtocolCodecFound)\n+      log.warn(\"Proxy protocol support could not be enabled. Make sure that netty-codec-haproxy is included in your classpath\");\n+    return proxyProtocolCodecFound && requested;\n   }\n \n+  private final Promise<Channel> promise;\n \n-  private final Handler<AsyncResult<Channel>> handler;\n-\n-  public HAProxyMessageCompletionHandler(Handler<AsyncResult<Channel>> handler) {\n-    this.handler = handler;\n+  public HAProxyMessageCompletionHandler(Promise<Channel> promise) {\n+    this.promise = promise;\n   }\n \n+\n   @Override\n   protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) throws Exception {\n     if (msg.sourceAddress() != null && msg.sourcePort() != 0) {\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nindex 5004f58ac..55bb4bbac 100644\n--- a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n+++ b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n", "chunk": "@@ -43,22 +46,35 @@ public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAP\n \n \n   @Override\n-  protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) throws Exception {\n-    if (msg.sourceAddress() != null && msg.sourcePort() != 0) {\n-      InetAddress src = InetAddress.getByAddress(\n-        NetUtil.createByteArrayFromIpAddressString(msg.sourceAddress()));\n-      ctx.channel().attr(ConnectionBase.REMOTE_ADDRESS_OVERRIDE)\n-        .set(new InetSocketAddress(src, msg.sourcePort()));\n-    }\n+  protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) {\n+    HAProxyProxiedProtocol protocol = msg.proxiedProtocol();\n+\n+    //UDP over IPv4, UDP over IPv6 and UNIX datagram are not supported. Close the connection and fail the promise\n+    if (protocol.transportProtocol().equals(HAProxyProxiedProtocol.TransportProtocol.DGRAM)) {\n+      ctx.close();\n+      promise.tryFailure(UNSUPPORTED_PROTOCOL_EXCEPTION);\n+    } else {\n+      /*\n+      UNKNOWN: the connection is forwarded for an unknown, unspecified\n+      or unsupported protocol. The sender should use this family when sending\n+      LOCAL commands or when dealing with unsupported protocol families. The\n+      receiver is free to accept the connection anyway and use the real endpoint\n+      addresses or to reject it\n+       */\n+      if (!protocol.equals(HAProxyProxiedProtocol.UNKNOWN)) {\n+        if (msg.sourceAddress() != null) {\n+          ctx.channel().attr(ConnectionBase.REMOTE_ADDRESS_OVERRIDE)\n+            .set(createAddress(protocol, msg.sourceAddress(), msg.sourcePort()));\n+        }\n \n-    if (msg.destinationAddress() != null && msg.destinationPort() != 0) {\n-      InetAddress dst = InetAddress.getByAddress(\n-        NetUtil.createByteArrayFromIpAddressString(msg.destinationAddress()));\n-      ctx.channel().attr(ConnectionBase.LOCAL_ADDRESS_OVERRIDE)\n-        .set(new InetSocketAddress(dst, msg.destinationPort()));\n+        if (msg.destinationAddress() != null) {\n+          ctx.channel().attr(ConnectionBase.LOCAL_ADDRESS_OVERRIDE)\n+            .set(createAddress(protocol, msg.destinationAddress(), msg.destinationPort()));\n+        }\n+      }\n+      ctx.pipeline().remove(this);\n+      promise.setSuccess(ctx.channel());\n     }\n-    ctx.pipeline().remove(this);\n-    promise.setSuccess(ctx.channel());\n   }\n \n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752172", "body": "as this is Netty code, we should rather use here a Netty `Promise<Channel>` instead", "bodyText": "as this is Netty code, we should rather use here a Netty Promise<Channel> instead", "bodyHTML": "<p dir=\"auto\">as this is Netty code, we should rather use here a Netty <code>Promise&lt;Channel&gt;</code> instead</p>", "author": "vietj", "createdAt": "2020-04-07T11:58:46Z", "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (Throwable ex) {\n+      proxyProtocolCheck = false;\n+    }\n+    hasProxyProtocolSupport = proxyProtocolCheck;\n+  }\n+\n+  public static boolean hasProxyProtocolSupport(boolean requested) {\n+    if (requested && !hasProxyProtocolSupport)\n+      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n+    return hasProxyProtocolSupport && requested;\n+  }\n+\n+\n+  private final Handler<AsyncResult<Channel>> handler;", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2NjU5Mw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404766593", "bodyText": "SslHandshakeCompletionHandler which is almost the same is using Handler<AsyncResult> handler so i copied it\nWill change it now", "author": "zenios", "createdAt": "2020-04-07T12:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MDE0NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404770144", "bodyText": "we might eventually change the SslHandshakeCompletionHandler as well later, thanks for noticing", "author": "vietj", "createdAt": "2020-04-07T12:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nindex 04573a18d..5004f58ac 100644\n--- a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n+++ b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n", "chunk": "@@ -17,31 +17,31 @@ import java.util.List;\n \n public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n   private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n-  private static final boolean hasProxyProtocolSupport;\n+  private static final boolean proxyProtocolCodecFound;\n \n   static {\n-    boolean proxyProtocolCheck = true;\n+    boolean proxyProtocolCodecCheck = true;\n     try {\n       Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n     } catch (Throwable ex) {\n-      proxyProtocolCheck = false;\n+      proxyProtocolCodecCheck = false;\n     }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n+    proxyProtocolCodecFound = proxyProtocolCodecCheck;\n   }\n \n-  public static boolean hasProxyProtocolSupport(boolean requested) {\n-    if (requested && !hasProxyProtocolSupport)\n-      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n-    return hasProxyProtocolSupport && requested;\n+  public static boolean canUseProxyProtocol(boolean requested) {\n+    if (requested && !proxyProtocolCodecFound)\n+      log.warn(\"Proxy protocol support could not be enabled. Make sure that netty-codec-haproxy is included in your classpath\");\n+    return proxyProtocolCodecFound && requested;\n   }\n \n+  private final Promise<Channel> promise;\n \n-  private final Handler<AsyncResult<Channel>> handler;\n-\n-  public HAProxyMessageCompletionHandler(Handler<AsyncResult<Channel>> handler) {\n-    this.handler = handler;\n+  public HAProxyMessageCompletionHandler(Promise<Channel> promise) {\n+    this.promise = promise;\n   }\n \n+\n   @Override\n   protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) throws Exception {\n     if (msg.sourceAddress() != null && msg.sourcePort() != 0) {\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nindex 5004f58ac..55bb4bbac 100644\n--- a/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n+++ b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n", "chunk": "@@ -43,22 +46,35 @@ public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAP\n \n \n   @Override\n-  protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) throws Exception {\n-    if (msg.sourceAddress() != null && msg.sourcePort() != 0) {\n-      InetAddress src = InetAddress.getByAddress(\n-        NetUtil.createByteArrayFromIpAddressString(msg.sourceAddress()));\n-      ctx.channel().attr(ConnectionBase.REMOTE_ADDRESS_OVERRIDE)\n-        .set(new InetSocketAddress(src, msg.sourcePort()));\n-    }\n+  protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) {\n+    HAProxyProxiedProtocol protocol = msg.proxiedProtocol();\n+\n+    //UDP over IPv4, UDP over IPv6 and UNIX datagram are not supported. Close the connection and fail the promise\n+    if (protocol.transportProtocol().equals(HAProxyProxiedProtocol.TransportProtocol.DGRAM)) {\n+      ctx.close();\n+      promise.tryFailure(UNSUPPORTED_PROTOCOL_EXCEPTION);\n+    } else {\n+      /*\n+      UNKNOWN: the connection is forwarded for an unknown, unspecified\n+      or unsupported protocol. The sender should use this family when sending\n+      LOCAL commands or when dealing with unsupported protocol families. The\n+      receiver is free to accept the connection anyway and use the real endpoint\n+      addresses or to reject it\n+       */\n+      if (!protocol.equals(HAProxyProxiedProtocol.UNKNOWN)) {\n+        if (msg.sourceAddress() != null) {\n+          ctx.channel().attr(ConnectionBase.REMOTE_ADDRESS_OVERRIDE)\n+            .set(createAddress(protocol, msg.sourceAddress(), msg.sourcePort()));\n+        }\n \n-    if (msg.destinationAddress() != null && msg.destinationPort() != 0) {\n-      InetAddress dst = InetAddress.getByAddress(\n-        NetUtil.createByteArrayFromIpAddressString(msg.destinationAddress()));\n-      ctx.channel().attr(ConnectionBase.LOCAL_ADDRESS_OVERRIDE)\n-        .set(new InetSocketAddress(dst, msg.destinationPort()));\n+        if (msg.destinationAddress() != null) {\n+          ctx.channel().attr(ConnectionBase.LOCAL_ADDRESS_OVERRIDE)\n+            .set(createAddress(protocol, msg.destinationAddress(), msg.destinationPort()));\n+        }\n+      }\n+      ctx.pipeline().remove(this);\n+      promise.setSuccess(ctx.channel());\n     }\n-    ctx.pipeline().remove(this);\n-    promise.setSuccess(ctx.channel());\n   }\n \n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Mjc5Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752796", "body": "this should fail the test if that's called", "bodyText": "this should fail the test if that's called", "bodyHTML": "<p dir=\"auto\">this should fail the test if that's called</p>", "author": "vietj", "createdAt": "2020-04-07T11:59:56Z", "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n+    server.requestHandler(req -> {\n+      req.response().end();", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/Http1xTest.java b/src/test/java/io/vertx/core/http/Http1xTest.java\nindex ba2245832..2d360f46f 100644\n--- a/src/test/java/io/vertx/core/http/Http1xTest.java\n+++ b/src/test/java/io/vertx/core/http/Http1xTest.java\n", "chunk": "@@ -4866,80 +4866,4 @@ public class Http1xTest extends HttpTest {\n     }));\n     await();\n   }\n-\n-  @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      req.response().end();\n-    });\n-\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-        assertEquals(\"Connection was closed\", event.cause().getMessage());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n-\n-\n-  @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-    });\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n-\n-  @Test\n-  public void testHaProxyProtocolVersion2() throws Exception {\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-    });\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MzA1Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404753056", "body": "we should set an `exceptionHandler` on the HTTP server and check it is called with the failure.", "bodyText": "we should set an exceptionHandler on the HTTP server and check it is called with the failure.", "bodyHTML": "<p dir=\"auto\">we should set an <code>exceptionHandler</code> on the HTTP server and check it is called with the failure.</p>", "author": "vietj", "createdAt": "2020-04-07T12:00:23Z", "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/Http1xTest.java b/src/test/java/io/vertx/core/http/Http1xTest.java\nindex ba2245832..2d360f46f 100644\n--- a/src/test/java/io/vertx/core/http/Http1xTest.java\n+++ b/src/test/java/io/vertx/core/http/Http1xTest.java\n", "chunk": "@@ -4866,80 +4866,4 @@ public class Http1xTest extends HttpTest {\n     }));\n     await();\n   }\n-\n-  @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      req.response().end();\n-    });\n-\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-        assertEquals(\"Connection was closed\", event.cause().getMessage());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n-\n-\n-  @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-    });\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n-\n-  @Test\n-  public void testHaProxyProtocolVersion2() throws Exception {\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n-    proxy.start(vertx);\n-\n-    server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-    });\n-    startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n-      .end();\n-    await();\n-    proxy.stop();\n-  }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0OTcwNA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405449704", "body": "actually we should rename to `useProxyProtocol` like we do have `useProxyAuth` already in this test class", "bodyText": "actually we should rename to useProxyProtocol like we do have useProxyAuth already in this test class", "bodyHTML": "<p dir=\"auto\">actually we should rename to <code>useProxyProtocol</code> like we do have <code>useProxyAuth</code> already in this test class</p>", "author": "vietj", "createdAt": "2020-04-08T11:21:27Z", "path": "src/test/java/io/vertx/core/http/HttpTLSTest.java", "diffHunk": "@@ -921,13 +922,15 @@ public TrustOptions copy() {\n     boolean serverOpenSSL;\n     boolean serverUsesAlpn;\n     boolean serverSSL = true;\n+    boolean proxyProtocolSupport = false;", "originalCommit": "242f3859ec30618721faee047fca531a1bdde005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTLSTest.java b/src/test/java/io/vertx/core/http/HttpTLSTest.java\nindex 581d8f000..10b8000ac 100755\n--- a/src/test/java/io/vertx/core/http/HttpTLSTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTLSTest.java\n", "chunk": "@@ -922,7 +921,7 @@ public abstract class HttpTLSTest extends HttpTestBase {\n     boolean serverOpenSSL;\n     boolean serverUsesAlpn;\n     boolean serverSSL = true;\n-    boolean proxyProtocolSupport = false;\n+    boolean serverUsesProxyProtocol = false;\n     ProxyType proxyType;\n     boolean useProxyAuth;\n     String[] clientEnabledCipherSuites = new String[0];\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1MDM1OA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405450358", "body": "we should rename to `useProxyProtocol` we already have `useAlpn` in options", "bodyText": "we should rename to useProxyProtocol we already have useAlpn in options", "bodyHTML": "<p dir=\"auto\">we should rename to <code>useProxyProtocol</code> we already have <code>useAlpn</code> in options</p>", "author": "vietj", "createdAt": "2020-04-08T11:22:46Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_PROTOCOL_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxyProtocolSupport;", "originalCommit": "242f3859ec30618721faee047fca531a1bdde005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex f85f9fdfd..06110a6dc 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -57,14 +57,14 @@ public class NetServerOptions extends TCPSSLOptions {\n   /**\n    * Default value of whether the server supports HA Proxy protocol = false\n    */\n-  public static final boolean DEFAULT_PROXY_PROTOCOL_SUPPORT = false;\n+  public static final boolean DEFAULT_USE_PROXY_PROTOCOL = false;\n \n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n-  private boolean proxyProtocolSupport;\n+  private boolean useProxyProtocol;\n \n   /**\n    * Default constructor\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -55,16 +55,28 @@ public class NetServerOptions extends TCPSSLOptions {\n   public static final boolean DEFAULT_SNI = false;\n \n   /**\n-   * Default value of whether the server supports HA Proxy protocol = false\n+   * Default value of whether the server supports HA PROXY protocol = false\n    */\n   public static final boolean DEFAULT_USE_PROXY_PROTOCOL = false;\n \n+  /**\n+   * The default value of HA PROXY protocol timeout = 10\n+   */\n+  public static final long DEFAULT_PROXY_PROTOCOL_TIMEOUT = 10L;\n+\n+  /**\n+   * Default HA PROXY protocol time unit = SECONDS\n+   */\n+  public static final TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT = TimeUnit.SECONDS;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n   private boolean useProxyProtocol;\n+  private long proxyProtocolTimeout;\n+  private TimeUnit proxyProtocolTimeoutUnit;\n \n   /**\n    * Default constructor\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODI2Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498266", "body": "rather than support we should say \"Set whether the server uses the HA Proxy protocol\" , the \"supports\" words indicate it can be optional and it is actually not", "bodyText": "rather than support we should say \"Set whether the server uses the HA Proxy protocol\" , the \"supports\" words indicate it can be optional and it is actually not", "bodyHTML": "<p dir=\"auto\">rather than support we should say \"Set whether the server uses the HA Proxy protocol\" , the \"supports\" words indicate it can be optional and it is actually not</p>", "author": "vietj", "createdAt": "2020-04-08T12:49:35Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol\n    */\n-  public boolean isProxyProtocolSupport() { return proxyProtocolSupport; }\n+  public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n \n   /**\n    * Set whether the server supports HA Proxy protocol\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n-  public NetServerOptions setProxyProtocolSupport(boolean proxyProtocolSupport) {\n-    this.proxyProtocolSupport = proxyProtocolSupport;\n+  public NetServerOptions setUseProxyProtocol(boolean useProxyProtocol) {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 6afabfaed..06110a6dc 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -398,13 +398,13 @@ public class NetServerOptions extends TCPSSLOptions {\n   }\n \n   /**\n-   * @return whether the server supports HA Proxy protocol\n+   * @return whether the server uses the HA Proxy protocol\n    */\n   public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n \n   /**\n-   * Set whether the server supports HA Proxy protocol\n+   * Set whether the server uses the HA Proxy protocol\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -402,7 +418,6 @@ public class NetServerOptions extends TCPSSLOptions {\n    */\n   public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n-\n   /**\n    * Set whether the server uses the HA Proxy protocol\n    *\n", "next_change": null}, {"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -413,6 +428,45 @@ public class NetServerOptions extends TCPSSLOptions {\n     return this;\n   }\n \n+  /**\n+   * @return the Proxy protocol timeout, in time unit specified by {@link #getProxyProtocolTimeoutUnit()}.\n+   */\n+  public long getProxyProtocolTimeout() {\n+    return proxyProtocolTimeout;\n+  }\n+\n+  /**\n+   * Set the Proxy protocol timeout, default time unit is seconds.\n+   *\n+   * @param proxyProtocolTimeout the Proxy protocol timeout to set\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  public NetServerOptions setProxyProtocolTimeout(long proxyProtocolTimeout) {\n+    if (proxyProtocolTimeout < 0) {\n+      throw new IllegalArgumentException(\"proxyProtocolTimeout must be >= 0\");\n+    }\n+    this.proxyProtocolTimeout = proxyProtocolTimeout;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the Proxy protocol timeout unit. If not specified, default is seconds.\n+   *\n+   * @param proxyProtocolTimeoutUnit specify time unit.\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  public NetServerOptions setProxyProtocolTimeoutUnit(TimeUnit proxyProtocolTimeoutUnit) {\n+    this.proxyProtocolTimeoutUnit = proxyProtocolTimeoutUnit;\n+    return this;\n+  }\n+\n+  /**\n+   * @return the Proxy protocol timeout unit.\n+   */\n+  public TimeUnit getProxyProtocolTimeoutUnit() {\n+    return proxyProtocolTimeoutUnit;\n+  }\n+\n   private void init() {\n     this.port = DEFAULT_PORT;\n     this.host = DEFAULT_HOST;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODQ2MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498460", "body": "_whether the server uses the HA Proxy protocol_", "bodyText": "whether the server uses the HA Proxy protocol", "bodyHTML": "<p dir=\"auto\"><em>whether the server uses the HA Proxy protocol</em></p>", "author": "vietj", "createdAt": "2020-04-08T12:49:54Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 6afabfaed..06110a6dc 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -398,13 +398,13 @@ public class NetServerOptions extends TCPSSLOptions {\n   }\n \n   /**\n-   * @return whether the server supports HA Proxy protocol\n+   * @return whether the server uses the HA Proxy protocol\n    */\n   public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n \n   /**\n-   * Set whether the server supports HA Proxy protocol\n+   * Set whether the server uses the HA Proxy protocol\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -402,7 +418,6 @@ public class NetServerOptions extends TCPSSLOptions {\n    */\n   public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n-\n   /**\n    * Set whether the server uses the HA Proxy protocol\n    *\n", "next_change": null}, {"header": "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java\nindex 06110a6dc..6facd9e15 100755\n--- a/src/main/java/io/vertx/core/net/NetServerOptions.java\n+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java\n", "chunk": "@@ -413,6 +428,45 @@ public class NetServerOptions extends TCPSSLOptions {\n     return this;\n   }\n \n+  /**\n+   * @return the Proxy protocol timeout, in time unit specified by {@link #getProxyProtocolTimeoutUnit()}.\n+   */\n+  public long getProxyProtocolTimeout() {\n+    return proxyProtocolTimeout;\n+  }\n+\n+  /**\n+   * Set the Proxy protocol timeout, default time unit is seconds.\n+   *\n+   * @param proxyProtocolTimeout the Proxy protocol timeout to set\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  public NetServerOptions setProxyProtocolTimeout(long proxyProtocolTimeout) {\n+    if (proxyProtocolTimeout < 0) {\n+      throw new IllegalArgumentException(\"proxyProtocolTimeout must be >= 0\");\n+    }\n+    this.proxyProtocolTimeout = proxyProtocolTimeout;\n+    return this;\n+  }\n+\n+  /**\n+   * Set the Proxy protocol timeout unit. If not specified, default is seconds.\n+   *\n+   * @param proxyProtocolTimeoutUnit specify time unit.\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  public NetServerOptions setProxyProtocolTimeoutUnit(TimeUnit proxyProtocolTimeoutUnit) {\n+    this.proxyProtocolTimeoutUnit = proxyProtocolTimeoutUnit;\n+    return this;\n+  }\n+\n+  /**\n+   * @return the Proxy protocol timeout unit.\n+   */\n+  public TimeUnit getProxyProtocolTimeoutUnit() {\n+    return proxyProtocolTimeoutUnit;\n+  }\n+\n   private void init() {\n     this.port = DEFAULT_PORT;\n     this.host = DEFAULT_HOST;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5OTA0MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405499040", "body": "Extra space between the dot and upper case M in _.Make_", "bodyText": "Extra space between the dot and upper case M in .Make", "bodyHTML": "<p dir=\"auto\">Extra space between the dot and upper case M in <em>.Make</em></p>", "author": "vietj", "createdAt": "2020-04-08T12:50:50Z", "path": "src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java", "diffHunk": "@@ -14,22 +14,22 @@\n \n public class HAProxyMessageReader extends MessageToMessageDecoder<HAProxyMessage> {\n   private static final Logger log = LoggerFactory.getLogger(HAProxyMessageReader.class);\n-  private static final boolean hasProxyProtocolSupport;\n+  private static final boolean proxyProtocolCodecFound;\n \n   static {\n-    boolean proxyProtocolCheck = true;\n+    boolean proxyProtocolCodecCheck = true;\n     try {\n       Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n     } catch (Throwable ex) {\n-      proxyProtocolCheck = false;\n+      proxyProtocolCodecCheck = false;\n     }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n+    proxyProtocolCodecFound = proxyProtocolCodecCheck;\n   }\n \n-  public static boolean hasProxyProtocolSupport(boolean requested) {\n-    if (requested && !hasProxyProtocolSupport)\n+  public static boolean canUseProxyProtocol(boolean requested) {\n+    if (requested && !proxyProtocolCodecFound)\n       log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nsimilarity index 62%\nrename from src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java\nrename to src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\nindex 85a10773e..5004f58ac 100644\n--- a/src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java\n+++ b/src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java\n", "chunk": "@@ -28,10 +31,17 @@ public class HAProxyMessageReader extends MessageToMessageDecoder<HAProxyMessage\n \n   public static boolean canUseProxyProtocol(boolean requested) {\n     if (requested && !proxyProtocolCodecFound)\n-      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n+      log.warn(\"Proxy protocol support could not be enabled. Make sure that netty-codec-haproxy is included in your classpath\");\n     return proxyProtocolCodecFound && requested;\n   }\n \n+  private final Promise<Channel> promise;\n+\n+  public HAProxyMessageCompletionHandler(Promise<Channel> promise) {\n+    this.promise = promise;\n+  }\n+\n+\n   @Override\n   protected void decode(ChannelHandlerContext ctx, HAProxyMessage msg, List<Object> out) throws Exception {\n     if (msg.sourceAddress() != null && msg.sourcePort() != 0) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502381", "body": "here we should use `waitFor(2)` and have two condition to end the test", "bodyText": "here we should use waitFor(2) and have two condition to end the test", "bodyHTML": "<p dir=\"auto\">here we should use <code>waitFor(2)</code> and have two condition to end the test</p>", "author": "vietj", "createdAt": "2020-04-08T12:56:06Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MTgzNA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405541834", "bodyText": "@vietj\nI have fixed all the test cases except this one.The problem with this one is that it behave differently for http1 and http2\nFor http1\nWe get two HAProxyDecoder Exception\nio.netty.handler.codec.haproxy.HAProxyProtocolException: io.netty.handler.codec.haproxy.HAProxyProtocolException: unknown identifier: GET\nio.netty.handler.codec.haproxy.HAProxyProtocolException: io.netty.handler.codec.haproxy.HAProxyProtocolException: unknown identifier: host:\n\nAnd for http2\nWe get one HAProxyDecoder Exception\nio.netty.handler.codec.haproxy.HAProxyProtocolException: header length (over 269) exceeds the allowed maximum (108)\n\nAnd one from SSLHandler\njava.nio.channels.ClosedChannelException\n\nSo if using waitFor(2) assuming 1 is from complete of client  the other should countdown when exception instanceof HAProxyProtocolException\nThe we will have 3 countdowns for http1 and two countdowns for http2\nHow do you suggest we should handle this problem?\nSplit the test between http1 / http2 ?", "author": "zenios", "createdAt": "2020-04-08T13:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDkzMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406150932", "bodyText": "that's fine for now", "author": "vietj", "createdAt": "2020-04-09T11:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5918,33 +5918,31 @@ public abstract class HttpTest extends HttpTestBase {\n \n   @Test\n   public void testProxyProtocolIllegalHeader() throws Exception {\n+    waitFor(2);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-\n     server.close();\n+\n     server = vertx.createHttpServer(createBaseServerOptions()\n       .setUseProxyProtocol(true))\n-      .exceptionHandler(exception -> {\n-        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          testComplete();\n+      .exceptionHandler(ex -> {\n+        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n       });\n-    server.requestHandler(req -> {\n-      fail(\"Should not be called\");\n-    });\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n \n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-      })\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n       .end();\n     await();\n     proxy.stop();\n   }\n \n-\n   @Test\n   public void testHAProxyProtocolVersion1() throws Exception {\n+    waitFor(2);\n     Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5917,43 +5918,42 @@ public abstract class HttpTest extends HttpTestBase {\n \n \n   @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    waitFor(2);\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-    server.close();\n \n-    server = vertx.createHttpServer(createBaseServerOptions()\n-      .setUseProxyProtocol(true))\n-      .exceptionHandler(ex -> {\n-        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          complete();\n-      });\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(2).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> fail(\"Should not be called\"));\n-\n     startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onFailure(ex -> complete())\n-      .onSuccess(event -> fail())\n-      .end();\n-    await();\n-    proxy.stop();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n+  public void testHAProxyProtocolIdleTimeoutNotHappened() throws Exception {\n     waitFor(2);\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(100).\n+      setProxyProtocolTimeoutUnit(TimeUnit.MILLISECONDS).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n       complete();\n     });\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjU1MQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502551", "body": "use `complete()` here instead of `testComplete()`", "bodyText": "use complete() here instead of testComplete()", "bodyHTML": "<p dir=\"auto\">use <code>complete()</code> here instead of <code>testComplete()</code></p>", "author": "vietj", "createdAt": "2020-04-08T12:56:23Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5918,33 +5918,31 @@ public abstract class HttpTest extends HttpTestBase {\n \n   @Test\n   public void testProxyProtocolIllegalHeader() throws Exception {\n+    waitFor(2);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-\n     server.close();\n+\n     server = vertx.createHttpServer(createBaseServerOptions()\n       .setUseProxyProtocol(true))\n-      .exceptionHandler(exception -> {\n-        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          testComplete();\n+      .exceptionHandler(ex -> {\n+        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n       });\n-    server.requestHandler(req -> {\n-      fail(\"Should not be called\");\n-    });\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n \n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-      })\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n       .end();\n     await();\n     proxy.stop();\n   }\n \n-\n   @Test\n   public void testHAProxyProtocolVersion1() throws Exception {\n+    waitFor(2);\n     Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5917,43 +5918,42 @@ public abstract class HttpTest extends HttpTestBase {\n \n \n   @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    waitFor(2);\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-    server.close();\n \n-    server = vertx.createHttpServer(createBaseServerOptions()\n-      .setUseProxyProtocol(true))\n-      .exceptionHandler(ex -> {\n-        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          complete();\n-      });\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(2).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> fail(\"Should not be called\"));\n-\n     startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onFailure(ex -> complete())\n-      .onSuccess(event -> fail())\n-      .end();\n-    await();\n-    proxy.stop();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n+  public void testHAProxyProtocolIdleTimeoutNotHappened() throws Exception {\n     waitFor(2);\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(100).\n+      setProxyProtocolTimeoutUnit(TimeUnit.MILLISECONDS).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n       complete();\n     });\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjkxMw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502913", "body": "add a `complete()` statement after `assertTrue(event.failed())` to end the test and be sure that the assertion will be reported correctly to the test", "bodyText": "add a complete() statement after assertTrue(event.failed()) to end the test and be sure that the assertion will be reported correctly to the test", "bodyHTML": "<p dir=\"auto\">add a <code>complete()</code> statement after <code>assertTrue(event.failed())</code> to end the test and be sure that the assertion will be reported correctly to the test</p>", "author": "vietj", "createdAt": "2020-04-08T12:56:59Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5918,33 +5918,31 @@ public abstract class HttpTest extends HttpTestBase {\n \n   @Test\n   public void testProxyProtocolIllegalHeader() throws Exception {\n+    waitFor(2);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-\n     server.close();\n+\n     server = vertx.createHttpServer(createBaseServerOptions()\n       .setUseProxyProtocol(true))\n-      .exceptionHandler(exception -> {\n-        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          testComplete();\n+      .exceptionHandler(ex -> {\n+        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n       });\n-    server.requestHandler(req -> {\n-      fail(\"Should not be called\");\n-    });\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n \n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-      })\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n       .end();\n     await();\n     proxy.stop();\n   }\n \n-\n   @Test\n   public void testHAProxyProtocolVersion1() throws Exception {\n+    waitFor(2);\n     Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5917,43 +5918,42 @@ public abstract class HttpTest extends HttpTestBase {\n \n \n   @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    waitFor(2);\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-    server.close();\n \n-    server = vertx.createHttpServer(createBaseServerOptions()\n-      .setUseProxyProtocol(true))\n-      .exceptionHandler(ex -> {\n-        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          complete();\n-      });\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(2).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> fail(\"Should not be called\"));\n-\n     startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onFailure(ex -> complete())\n-      .onSuccess(event -> fail())\n-      .end();\n-    await();\n-    proxy.stop();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n+  public void testHAProxyProtocolIdleTimeoutNotHappened() throws Exception {\n     waitFor(2);\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(100).\n+      setProxyProtocolTimeoutUnit(TimeUnit.MILLISECONDS).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n       complete();\n     });\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzA4Mw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405503083", "body": "call stop() that in a finally block", "bodyText": "call stop() that in a finally block", "bodyHTML": "<p dir=\"auto\">call stop() that in a finally block</p>", "author": "vietj", "createdAt": "2020-04-08T12:57:15Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5918,33 +5918,31 @@ public abstract class HttpTest extends HttpTestBase {\n \n   @Test\n   public void testProxyProtocolIllegalHeader() throws Exception {\n+    waitFor(2);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-\n     server.close();\n+\n     server = vertx.createHttpServer(createBaseServerOptions()\n       .setUseProxyProtocol(true))\n-      .exceptionHandler(exception -> {\n-        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          testComplete();\n+      .exceptionHandler(ex -> {\n+        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n       });\n-    server.requestHandler(req -> {\n-      fail(\"Should not be called\");\n-    });\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n \n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.failed());\n-      })\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n       .end();\n     await();\n     proxy.stop();\n   }\n \n-\n   @Test\n   public void testHAProxyProtocolVersion1() throws Exception {\n+    waitFor(2);\n     Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5917,43 +5918,42 @@ public abstract class HttpTest extends HttpTestBase {\n \n \n   @Test\n-  public void testProxyProtocolIllegalHeader() throws Exception {\n-    waitFor(2);\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n     HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n     proxy.start(vertx);\n-    server.close();\n \n-    server = vertx.createHttpServer(createBaseServerOptions()\n-      .setUseProxyProtocol(true))\n-      .exceptionHandler(ex -> {\n-        if(ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n-          complete();\n-      });\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(2).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> fail(\"Should not be called\"));\n-\n     startServer();\n-    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onFailure(ex -> complete())\n-      .onSuccess(event -> fail())\n-      .end();\n-    await();\n-    proxy.stop();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n-  public void testHAProxyProtocolVersion1() throws Exception {\n+  public void testHAProxyProtocolIdleTimeoutNotHappened() throws Exception {\n     waitFor(2);\n-    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setProxyProtocolTimeout(100).\n+      setProxyProtocolTimeoutUnit(TimeUnit.MILLISECONDS).\n+      setUseProxyProtocol(true));\n     server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n       complete();\n     });\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNDE5NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405504195", "body": "call proxy.stop() in a finally block", "bodyText": "call proxy.stop() in a finally block", "bodyHTML": "<p dir=\"auto\">call proxy.stop() in a finally block</p>", "author": "vietj", "createdAt": "2020-04-08T12:58:57Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5957,22 +5955,25 @@ public abstract class HttpTest extends HttpTestBase {\n       assertEquals(req.remoteAddress().port(), 56324);\n       assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n+      complete();\n     });\n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n+      .onFailure(this::fail)\n+      .onSuccess(event -> complete())\n       .end();\n-    await();\n-    proxy.stop();\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n   public void testHaProxyProtocolVersion2() throws Exception {\n+    waitFor(2);\n     Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version2ProtocolHeader);\n     proxy.start(vertx);\n \n     server.close();\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5970,23 +5970,90 @@ public abstract class HttpTest extends HttpTestBase {\n   }\n \n   @Test\n-  public void testHaProxyProtocolVersion2() throws Exception {\n+  public void testHAProxyProtocolVersion1TCP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1TCP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion1TCP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1Unknown() throws Exception {\n+    Buffer header = HAProxy.createVersion1UnknownProtocolHeader();\n+    testHAProxyProtocolAccepted(header, null, null);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2TCP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion2TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2TCP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion2TCP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2UnixSocket() throws Exception {\n+    SocketAddress remote = SocketAddress.domainSocketAddress(\"/tmp/remoteSocket\");\n+    SocketAddress local = SocketAddress.domainSocketAddress(\"/tmp/localSocket\");\n+    Buffer header = HAProxy.createVersion2UnixStreamProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2Unknown() throws Exception {\n+    Buffer header = HAProxy.createVersion2UnknownProtocolHeader();\n+    testHAProxyProtocolAccepted(header, null, null);\n+  }\n+\n+\n+  private void testHAProxyProtocolAccepted(Buffer header, SocketAddress remote, SocketAddress local) throws Exception {\n+    /*\n+     * In case remote / local is null then we will use the connected remote / local address from the proxy. This is needed\n+     * in order to test unknown protocol since we will use the actual connected addresses and ports.\n+     *\n+     * Have in mind that proxies connectionRemoteAddress is the server request local address and proxies connectionLocalAddress is the\n+     * server request remote address.\n+     *\n+     * Also in order to avoid localhost as a host we set the servers host to TestUtils.loopbackAddress() which should be (127.0.0.1)\n+     * */\n     waitFor(2);\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version2ProtocolHeader);\n+    HAProxy proxy = new HAProxy(TestUtils.loopbackAddress(), DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-      complete();\n-    });\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setHost(TestUtils.loopbackAddress())\n+      .setUseProxyProtocol(true))\n+      .requestHandler(req -> {\n+        assertEquals(remote == null ?\n+            proxy.getConnectionLocalAddress() :\n+            remote,\n+          req.remoteAddress());\n+        assertEquals(local == null ?\n+            proxy.getConnectionRemoteAddress() :\n+            local,\n+          req.localAddress());\n+        req.response().end();\n+        complete();\n+      });\n     startServer();\n+\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n       .onFailure(this::fail)\n       .onSuccess(event -> complete())\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTA5Nw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505097", "body": "use `onSuccess(response -> { ... })` and avoid if/else block", "bodyText": "use onSuccess(response -> { ... }) and avoid if/else block", "bodyHTML": "<p dir=\"auto\">use <code>onSuccess(response -&gt; { ... })</code> and avoid if/else block</p>", "author": "vietj", "createdAt": "2020-04-08T13:00:19Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5983,19 +5984,38 @@ public abstract class HttpTest extends HttpTestBase {\n       assertEquals(req.remoteAddress().port(), 56324);\n       assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n+      complete();\n     });\n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        if(event.failed())\n-          event.cause().printStackTrace();\n-        else {\n-          assertTrue(event.succeeded());\n-          testComplete();\n-        }\n-      })\n+      .onFailure(this::fail)\n+      .onSuccess(event -> complete())\n       .end();\n-    await();\n-    proxy.stop();\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setIdleTimeout(2).\n+      setUseProxyProtocol(true));\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n+    startServer();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n }\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5998,24 +6065,92 @@ public abstract class HttpTest extends HttpTestBase {\n     }\n   }\n \n+\n   @Test\n-  public void testHAProxyProtocolIdleTimeout() throws Exception {\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n-    proxy.start(vertx);\n+  public void testHAProxyProtocolVersion2UDP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion2UDP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n \n+  @Test\n+  public void testHAProxyProtocolVersion2UDP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion2UDP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2UnixDataGram() throws Exception {\n+    SocketAddress remote = SocketAddress.domainSocketAddress(\"/tmp/remoteSocket\");\n+    SocketAddress local = SocketAddress.domainSocketAddress(\"/tmp/localSocket\");\n+    Buffer header = HAProxy.createVersion2UnixDatagramProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  private void testHAProxyProtocolRejected(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().\n-      setIdleTimeout(2).\n-      setUseProxyProtocol(true));\n-    server.requestHandler(req -> fail(\"Should not be called\"));\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex.equals(HAProxyMessageCompletionHandler.UNSUPPORTED_PROTOCOL_EXCEPTION))\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n     startServer();\n-    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n-      res.result().closeHandler(event -> testComplete());\n-    });\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+\n     try {\n       await();\n     } finally {\n       proxy.stop();\n     }\n   }\n+\n+  @Test\n+  public void testHAProxyProtocolEmptyHeader() throws Exception {\n+    testHAProxyProtocolIllegal(Buffer.buffer());\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIllegalHeader() throws Exception {\n+    //IPv4 remote IPv6 Local\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolIllegal(header);\n+  }\n+\n+  private void testHAProxyProtocolIllegal(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n+    server.close();\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTM5Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505396", "body": "use `onSuccess(event -> })` block", "bodyText": "use onSuccess(event -> }) block", "bodyHTML": "<p dir=\"auto\">use <code>onSuccess(event -&gt; })</code> block</p>", "author": "vietj", "createdAt": "2020-04-08T13:00:45Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5957,22 +5955,25 @@ public abstract class HttpTest extends HttpTestBase {\n       assertEquals(req.remoteAddress().port(), 56324);\n       assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n+      complete();\n     });\n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        assertTrue(event.succeeded());\n-        testComplete();\n-      })\n+      .onFailure(this::fail)\n+      .onSuccess(event -> complete())\n       .end();\n-    await();\n-    proxy.stop();\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n   public void testHaProxyProtocolVersion2() throws Exception {\n+    waitFor(2);\n     Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version2ProtocolHeader);\n     proxy.start(vertx);\n \n     server.close();\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5970,23 +5970,90 @@ public abstract class HttpTest extends HttpTestBase {\n   }\n \n   @Test\n-  public void testHaProxyProtocolVersion2() throws Exception {\n+  public void testHAProxyProtocolVersion1TCP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1TCP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion1TCP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1Unknown() throws Exception {\n+    Buffer header = HAProxy.createVersion1UnknownProtocolHeader();\n+    testHAProxyProtocolAccepted(header, null, null);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2TCP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion2TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2TCP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion2TCP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2UnixSocket() throws Exception {\n+    SocketAddress remote = SocketAddress.domainSocketAddress(\"/tmp/remoteSocket\");\n+    SocketAddress local = SocketAddress.domainSocketAddress(\"/tmp/localSocket\");\n+    Buffer header = HAProxy.createVersion2UnixStreamProtocolHeader(remote, local);\n+    testHAProxyProtocolAccepted(header, remote, local);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2Unknown() throws Exception {\n+    Buffer header = HAProxy.createVersion2UnknownProtocolHeader();\n+    testHAProxyProtocolAccepted(header, null, null);\n+  }\n+\n+\n+  private void testHAProxyProtocolAccepted(Buffer header, SocketAddress remote, SocketAddress local) throws Exception {\n+    /*\n+     * In case remote / local is null then we will use the connected remote / local address from the proxy. This is needed\n+     * in order to test unknown protocol since we will use the actual connected addresses and ports.\n+     *\n+     * Have in mind that proxies connectionRemoteAddress is the server request local address and proxies connectionLocalAddress is the\n+     * server request remote address.\n+     *\n+     * Also in order to avoid localhost as a host we set the servers host to TestUtils.loopbackAddress() which should be (127.0.0.1)\n+     * */\n     waitFor(2);\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version2ProtocolHeader);\n+    HAProxy proxy = new HAProxy(TestUtils.loopbackAddress(), DEFAULT_HTTP_PORT, header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n-    server.requestHandler(req -> {\n-      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(req.remoteAddress().port(), 56324);\n-      assertEquals(req.localAddress().port(), 443);\n-      req.response().end();\n-      complete();\n-    });\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setHost(TestUtils.loopbackAddress())\n+      .setUseProxyProtocol(true))\n+      .requestHandler(req -> {\n+        assertEquals(remote == null ?\n+            proxy.getConnectionLocalAddress() :\n+            remote,\n+          req.remoteAddress());\n+        assertEquals(local == null ?\n+            proxy.getConnectionRemoteAddress() :\n+            local,\n+          req.localAddress());\n+        req.response().end();\n+        complete();\n+      });\n     startServer();\n+\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n       .onFailure(this::fail)\n       .onSuccess(event -> complete())\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTU2OA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505568", "body": "stop in a finally", "bodyText": "stop in a finally", "bodyHTML": "<p dir=\"auto\">stop in a finally</p>", "author": "vietj", "createdAt": "2020-04-08T13:01:01Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        if(event.failed())\n+          event.cause().printStackTrace();\n+        else {\n+          assertTrue(event.succeeded());\n+          testComplete();\n+        }\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex ecc83476a..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5983,19 +5984,38 @@ public abstract class HttpTest extends HttpTestBase {\n       assertEquals(req.remoteAddress().port(), 56324);\n       assertEquals(req.localAddress().port(), 443);\n       req.response().end();\n+      complete();\n     });\n     startServer();\n     client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n-      .onComplete(event -> {\n-        if(event.failed())\n-          event.cause().printStackTrace();\n-        else {\n-          assertTrue(event.succeeded());\n-          testComplete();\n-        }\n-      })\n+      .onFailure(this::fail)\n+      .onSuccess(event -> complete())\n       .end();\n-    await();\n-    proxy.stop();\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setIdleTimeout(2).\n+      setUseProxyProtocol(true));\n+    server.requestHandler(req -> fail(\"Should not be called\"));\n+    startServer();\n+    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n+      res.result().closeHandler(event -> testComplete());\n+    });\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n }\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5998,24 +6065,92 @@ public abstract class HttpTest extends HttpTestBase {\n     }\n   }\n \n+\n   @Test\n-  public void testHAProxyProtocolIdleTimeout() throws Exception {\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n-    proxy.start(vertx);\n+  public void testHAProxyProtocolVersion2UDP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion2UDP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n \n+  @Test\n+  public void testHAProxyProtocolVersion2UDP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion2UDP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2UnixDataGram() throws Exception {\n+    SocketAddress remote = SocketAddress.domainSocketAddress(\"/tmp/remoteSocket\");\n+    SocketAddress local = SocketAddress.domainSocketAddress(\"/tmp/localSocket\");\n+    Buffer header = HAProxy.createVersion2UnixDatagramProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  private void testHAProxyProtocolRejected(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().\n-      setIdleTimeout(2).\n-      setUseProxyProtocol(true));\n-    server.requestHandler(req -> fail(\"Should not be called\"));\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex.equals(HAProxyMessageCompletionHandler.UNSUPPORTED_PROTOCOL_EXCEPTION))\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n     startServer();\n-    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n-      res.result().closeHandler(event -> testComplete());\n-    });\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+\n     try {\n       await();\n     } finally {\n       proxy.stop();\n     }\n   }\n+\n+  @Test\n+  public void testHAProxyProtocolEmptyHeader() throws Exception {\n+    testHAProxyProtocolIllegal(Buffer.buffer());\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIllegalHeader() throws Exception {\n+    //IPv4 remote IPv6 Local\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolIllegal(header);\n+  }\n+\n+  private void testHAProxyProtocolIllegal(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n+    server.close();\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTk1Nw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505957", "body": "finally :)", "bodyText": "finally :)", "bodyHTML": "<p dir=\"auto\">finally :)</p>", "author": "vietj", "createdAt": "2020-04-08T13:01:38Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/net/NetTest.java b/src/test/java/io/vertx/core/net/NetTest.java\nindex 300efb09a..83ca6b552 100755\n--- a/src/test/java/io/vertx/core/net/NetTest.java\n+++ b/src/test/java/io/vertx/core/net/NetTest.java\n", "chunk": "@@ -3702,19 +3703,25 @@ public class NetTest extends VertxTestBase {\n       assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n       assertEquals(so.remoteAddress().port(), 56324);\n       assertEquals(so.localAddress().port(), 443);\n-      testComplete();\n+      complete();\n     });\n     startServer();\n-    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n-      so.write(\"ping\");\n-      so.close();\n-    }));\n-    await();\n-    proxy.stop();\n+    client.connect(proxy.getPort(), proxy.getHost())\n+      .onSuccess(so -> {\n+        so.close();\n+        complete();\n+      })\n+      .onFailure(this::fail);\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n   public void testHaProxyProtocolVersion2Support() throws Exception {\n+    waitFor(2);\n     Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/net/NetTest.java b/src/test/java/io/vertx/core/net/NetTest.java\nindex 83ca6b552..f67255de5 100755\n--- a/src/test/java/io/vertx/core/net/NetTest.java\n+++ b/src/test/java/io/vertx/core/net/NetTest.java\n", "chunk": "@@ -3720,21 +3725,21 @@ public class NetTest extends VertxTestBase {\n   }\n \n   @Test\n-  public void testHaProxyProtocolVersion2Support() throws Exception {\n+  public void testHAProxyProtocolIdleTimeoutNotHappened() throws Exception {\n     waitFor(2);\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), header);\n     proxy.start(vertx);\n \n     server.close();\n-    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n-    server.connectHandler(so -> {\n-      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n-      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n-      assertEquals(so.remoteAddress().port(), 56324);\n-      assertEquals(so.localAddress().port(), 443);\n-      complete();\n-    });\n+    server = vertx.createNetServer(new NetServerOptions()\n+      .setProxyProtocolTimeout(100)\n+      .setProxyProtocolTimeoutUnit(TimeUnit.MILLISECONDS)\n+      .setUseProxyProtocol(true))\n+      .connectHandler(u -> complete());\n     startServer();\n     client.connect(proxy.getPort(), proxy.getHost())\n       .onSuccess(so -> {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjA3MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506070", "body": "finally clause", "bodyText": "finally clause", "bodyHTML": "<p dir=\"auto\">finally clause</p>", "author": "vietj", "createdAt": "2020-04-08T13:01:48Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/net/NetTest.java b/src/test/java/io/vertx/core/net/NetTest.java\nindex 300efb09a..83ca6b552 100755\n--- a/src/test/java/io/vertx/core/net/NetTest.java\n+++ b/src/test/java/io/vertx/core/net/NetTest.java\n", "chunk": "@@ -3726,19 +3733,25 @@ public class NetTest extends VertxTestBase {\n       assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n       assertEquals(so.remoteAddress().port(), 56324);\n       assertEquals(so.localAddress().port(), 443);\n-      testComplete();\n+      complete();\n     });\n     startServer();\n-    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n-      so.write(\"ping\");\n-      so.close();\n-    }));\n-    await();\n-    proxy.stop();\n+    client.connect(proxy.getPort(), proxy.getHost())\n+      .onSuccess(so -> {\n+        so.close();\n+        complete();\n+      })\n+      .onFailure(this::fail);\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n-  public void testConnectSSLWithHAProxy() throws Exception {\n+  public void testHaProxyProtocolConnectSSL() throws Exception {\n+    waitFor(2);\n     Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n     HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n     proxy.start(vertx);\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/net/NetTest.java b/src/test/java/io/vertx/core/net/NetTest.java\nindex 83ca6b552..f67255de5 100755\n--- a/src/test/java/io/vertx/core/net/NetTest.java\n+++ b/src/test/java/io/vertx/core/net/NetTest.java\n", "chunk": "@@ -3750,10 +3755,12 @@ public class NetTest extends VertxTestBase {\n   }\n \n   @Test\n-  public void testHaProxyProtocolConnectSSL() throws Exception {\n+  public void testHAProxyProtocolConnectSSL() throws Exception {\n     waitFor(2);\n-    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n-    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), header);\n     proxy.start(vertx);\n \n     server.close();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjIyMw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506223", "body": "use `onSuccess`", "bodyText": "use onSuccess", "bodyHTML": "<p dir=\"auto\">use <code>onSuccess</code></p>", "author": "vietj", "createdAt": "2020-04-08T13:02:01Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testConnectSSLWithHAProxy() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    NetServerOptions options = new NetServerOptions()\n+      .setPort(testAddress.port())\n+      .setHost(testAddress.host())\n+      .setSsl(true)\n+      .setKeyCertOptions(Cert.SERVER_JKS_ROOT_CA.get())\n+      .setUseProxyProtocol(true);\n+    server = vertx.createNetServer(options);\n+\n+    NetClientOptions clientOptions = new NetClientOptions()\n+      .setHostnameVerificationAlgorithm(\"HTTPS\")\n+      .setSsl(true)\n+      .setTrustOptions(Trust.SERVER_JKS_ROOT_CA.get());\n+    NetClient client = vertx.createNetClient(clientOptions);\n+    server.connectHandler(event -> {\n+      assertEquals(event.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(event.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(event.remoteAddress().port(), 56324);\n+      assertEquals(event.localAddress().port(), 443);\n+    });\n+\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), ar2 -> {\n+      assertTrue(ar2.succeeded());", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/net/NetTest.java b/src/test/java/io/vertx/core/net/NetTest.java\nindex 300efb09a..83ca6b552 100755\n--- a/src/test/java/io/vertx/core/net/NetTest.java\n+++ b/src/test/java/io/vertx/core/net/NetTest.java\n", "chunk": "@@ -3762,33 +3775,69 @@ public class NetTest extends VertxTestBase {\n       assertEquals(event.localAddress().hostAddress(), \"192.168.0.11\");\n       assertEquals(event.remoteAddress().port(), 56324);\n       assertEquals(event.localAddress().port(), 443);\n+      complete();\n     });\n \n     startServer();\n-    client.connect(proxy.getPort(), proxy.getHost(), ar2 -> {\n-      assertTrue(ar2.succeeded());\n-      testComplete();\n-    });\n-    await();\n-    proxy.stop();\n+    client.connect(proxy.getPort(), proxy.getHost())\n+      .onSuccess(so -> {\n+        so.close();\n+        complete();\n+      })\n+      .onFailure(this::fail);\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n \n   @Test\n   public void testHaProxyProtocolIllegalHeader() throws Exception {\n+    waitFor(2);\n     HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), Buffer.buffer(\"This is an illegal HA proxy protocol header\\r\\n\"));\n     proxy.start(vertx);\n \n     server.close();\n     server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n-    server.connectHandler(u -> {\n-      fail(\"Should not be called\");\n-    }).exceptionHandler(exception -> {\n-      assertTrue(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException);\n-      testComplete();\n+    server.connectHandler(u -> fail(\"Should not be called\")).exceptionHandler(exception -> {\n+      if (exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+        complete();\n     });\n     startServer();\n-    client.connect(proxy.getPort(), proxy.getHost(), event -> assertTrue(event.succeeded()));\n-    await();\n-    proxy.stop();\n+    client.connect(proxy.getPort(), proxy.getHost())\n+      .onSuccess(so -> {\n+        so.close();\n+        complete();\n+      })\n+      .onFailure(this::fail);\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions()\n+      .setIdleTimeout(2)\n+      .setUseProxyProtocol(true));\n+    server.connectHandler(u -> fail(\"Should not be called\"));\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost())\n+      .onSuccess(so -> {\n+        so.closeHandler(event -> testComplete());\n+      })\n+      .onFailure(this::fail);\n+    try {\n+      await();\n+    } finally {\n+      proxy.stop();\n+    }\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjg2NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506865", "body": "instead of setting an exception handler + body handler , use \r\n\r\n```\r\nresp.body().onComplete(onSuccess(body -> ...));\r\n```", "bodyText": "instead of setting an exception handler + body handler , use\nresp.body().onComplete(onSuccess(body -> ...));", "bodyHTML": "<p dir=\"auto\">instead of setting an exception handler + body handler , use</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"resp.body().onComplete(onSuccess(body -&gt; ...));\"><pre><code>resp.body().onComplete(onSuccess(body -&gt; ...));\n</code></pre></div>", "author": "vietj", "createdAt": "2020-04-08T13:02:58Z", "path": "src/test/java/io/vertx/it/HAProxyTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.it;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpClient;\n+import io.vertx.test.core.VertxTestBase;\n+import org.junit.Test;\n+\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_HOST;\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_PORT;\n+\n+/**\n+ * @author <a href=\"mailto:dimitris.zenios@gmail.com\">Dimitris Zenios</a>\n+ */\n+public class HAProxyTest extends VertxTestBase {\n+  @Test\n+  public void testHttpWithoutHAProxySupport() {\n+    Vertx vertx = Vertx.vertx();\n+    try {\n+      vertx.createHttpServer().requestHandler(req -> {\n+        req.response().end(\"hello\");\n+      }).listen(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, onSuccess(s -> {\n+        HttpClient client = vertx.createHttpClient();\n+        client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, \"/\", onSuccess(resp -> {\n+          resp.exceptionHandler(this::fail);", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/it/HAProxyTest.java b/src/test/java/io/vertx/it/HAProxyTest.java\nindex 0a9aa3c22..f9883ad6d 100644\n--- a/src/test/java/io/vertx/it/HAProxyTest.java\n+++ b/src/test/java/io/vertx/it/HAProxyTest.java\n", "chunk": "@@ -27,18 +28,19 @@ public class HAProxyTest extends VertxTestBase {\n   public void testHttpWithoutHAProxySupport() {\n     Vertx vertx = Vertx.vertx();\n     try {\n-      vertx.createHttpServer().requestHandler(req -> {\n-        req.response().end(\"hello\");\n-      }).listen(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, onSuccess(s -> {\n-        HttpClient client = vertx.createHttpClient();\n-        client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, \"/\", onSuccess(resp -> {\n-          resp.exceptionHandler(this::fail);\n-          resp.bodyHandler(body -> {\n-            assertEquals(\"hello\", body.toString());\n-            testComplete();\n-          });\n+      vertx.createHttpServer(new HttpServerOptions().setUseProxyProtocol(true))\n+        .requestHandler(req -> {\n+          req.response().end(\"hello\");\n+        })\n+        .listen(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, onSuccess(s -> {\n+          HttpClient client = vertx.createHttpClient();\n+          client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, \"/\", onSuccess(resp -> {\n+            resp.body().onComplete(onSuccess(body -> {\n+              assertEquals(\"hello\", body.toString());\n+              testComplete();\n+            }));\n+          }));\n         }));\n-      }));\n       await();\n     } finally {\n       vertx.close();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406150162", "body": "why `getAndSet` here instead of `get()` ? clearing the value will not remove the attribue", "bodyText": "why getAndSet here instead of get() ? clearing the value will not remove the attribue", "bodyHTML": "<p dir=\"auto\">why <code>getAndSet</code> here instead of <code>get()</code> ? clearing the value will not remove the attribue</p>", "author": "vietj", "createdAt": "2020-04-09T11:52:35Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -479,7 +482,10 @@ public String remoteName() {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n+        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :", "originalCommit": "fe36a69f60e3209dc12fa0a14153c2563dd8680a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MTQ3Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406151472", "bodyText": "Since we cache the address no need to keep the attribute around.\ngetAndRemove is deprecated with a note to use getAndSet with null value.\nhttps://netty.io/4.0/api/io/netty/util/Attribute.html", "author": "zenios", "createdAt": "2020-04-09T11:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex ab1c2eb09..d3b7effc3 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -482,14 +482,17 @@ public abstract class ConnectionBase {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n-        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n-        chctx.channel().remoteAddress();\n+      if (chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n+        address = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n+      } else {\n+        java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+        if (addr != null) {\n+          address = vertx.transport().convert(addr);\n+        }\n+      }\n \n-      if (addr != null) {\n-        address = vertx.transport().convert(addr);\n+      if (address != null)\n         remoteAddress = address;\n-      }\n     }\n     return address;\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwODM4NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406208385", "body": "why do we need `setSslHandshakeTimeout` here ? we don't need it for this test", "bodyText": "why do we need setSslHandshakeTimeout here ? we don't need it for this test", "bodyHTML": "<p dir=\"auto\">why do we need <code>setSslHandshakeTimeout</code> here ? we don't need it for this test</p>", "author": "vietj", "createdAt": "2020-04-09T13:35:30Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5992,7 +6005,29 @@ public void testHaProxyProtocolVersion2() throws Exception {\n       .end();\n     try {\n       await();\n-    }finally {\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setIdleTimeout(2).\n+      setSslHandshakeTimeout(2).", "originalCommit": "5fe78c95baf1de8bee057217e6c690687e44f4b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjcwNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212706", "bodyText": "Not exactly. In HTTP2 the connection is closed not because of IdleHandler (Which is not yet added to the pipeline) but because of timeout waiting for handshake from (SSLHandler) which is configured using setSslHandshakeTimeout.\nThis is how i found that the setting is not respected", "author": "zenios", "createdAt": "2020-04-09T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwODM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex eb65d0259..d828b2fcd 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -6018,7 +6006,6 @@ public abstract class HttpTest extends HttpTestBase {\n     server.close();\n     server = vertx.createHttpServer(createBaseServerOptions().\n       setIdleTimeout(2).\n-      setSslHandshakeTimeout(2).\n       setUseProxyProtocol(true));\n     server.requestHandler(req -> fail(\"Should not be called\"));\n     startServer();\n", "next_change": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex d828b2fcd..2d9ba7a06 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n", "chunk": "@@ -5998,24 +6065,92 @@ public abstract class HttpTest extends HttpTestBase {\n     }\n   }\n \n+\n   @Test\n-  public void testHAProxyProtocolIdleTimeout() throws Exception {\n-    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n-    proxy.start(vertx);\n+  public void testHAProxyProtocolVersion2UDP4() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"192.168.0.11\");\n+    Buffer header = HAProxy.createVersion2UDP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n \n+  @Test\n+  public void testHAProxyProtocolVersion2UDP6() throws Exception {\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"2001:db8:85a3:0:0:8a2e:370:7334\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion2UDP6ProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolVersion2UnixDataGram() throws Exception {\n+    SocketAddress remote = SocketAddress.domainSocketAddress(\"/tmp/remoteSocket\");\n+    SocketAddress local = SocketAddress.domainSocketAddress(\"/tmp/localSocket\");\n+    Buffer header = HAProxy.createVersion2UnixDatagramProtocolHeader(remote, local);\n+    testHAProxyProtocolRejected(header);\n+  }\n+\n+  private void testHAProxyProtocolRejected(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n     server.close();\n-    server = vertx.createHttpServer(createBaseServerOptions().\n-      setIdleTimeout(2).\n-      setUseProxyProtocol(true));\n-    server.requestHandler(req -> fail(\"Should not be called\"));\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex.equals(HAProxyMessageCompletionHandler.UNSUPPORTED_PROTOCOL_EXCEPTION))\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n     startServer();\n-    vertx.createNetClient().connect(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, res -> {\n-      res.result().closeHandler(event -> testComplete());\n-    });\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+\n     try {\n       await();\n     } finally {\n       proxy.stop();\n     }\n   }\n+\n+  @Test\n+  public void testHAProxyProtocolEmptyHeader() throws Exception {\n+    testHAProxyProtocolIllegal(Buffer.buffer());\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIllegalHeader() throws Exception {\n+    //IPv4 remote IPv6 Local\n+    SocketAddress remote = SocketAddress.inetSocketAddress(56324, \"192.168.0.1\");\n+    SocketAddress local = SocketAddress.inetSocketAddress(443, \"2001:db8:85a3:0:0:8a2e:370:7333\");\n+    Buffer header = HAProxy.createVersion1TCP4ProtocolHeader(remote, local);\n+    testHAProxyProtocolIllegal(header);\n+  }\n+\n+  private void testHAProxyProtocolIllegal(Buffer header) throws Exception {\n+    waitFor(2);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, header);\n+    proxy.start(vertx);\n+    server.close();\n+\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(ex -> {\n+        if (ex instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          complete();\n+      })\n+      .requestHandler(req -> fail());\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onFailure(ex -> complete())\n+      .onSuccess(event -> fail())\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzQ4NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406213485", "body": "I think we should add:\r\n\r\n```java\r\nserver.requestHandler(request -> {\r\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\r\n  System.out.println(request.remoteAddress());\r\n});\r\n```", "bodyText": "I think we should add:\nserver.requestHandler(request -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(request.remoteAddress());\n});", "bodyHTML": "<p dir=\"auto\">I think we should add:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"server.requestHandler(request -&gt; {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(request.remoteAddress());\n});\"><pre>server<span class=\"pl-k\">.</span>requestHandler(request <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Print the actual client address provided by the HA proxy protocol instead of the proxy address</span>\n  <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(request<span class=\"pl-k\">.</span>remoteAddress());\n});</pre></div>", "author": "vietj", "createdAt": "2020-04-09T13:42:49Z", "path": "src/main/java/examples/HTTPExamples.java", "diffHunk": "@@ -918,6 +918,14 @@ public void example60(Vertx vertx) {\n \n   }\n \n+  public void example61(Vertx vertx) {\n+\n+    HttpServerOptions options = new HttpServerOptions()\n+      .setUseProxyProtocol(true);\n+\n+    HttpServer server = vertx.createHttpServer(options);", "originalCommit": "b1efa43ca6257a364bd467935a5b20546cbc91de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/examples/HTTPExamples.java b/src/main/java/examples/HTTPExamples.java\nindex a76dd00fa..a6067582b 100644\n--- a/src/main/java/examples/HTTPExamples.java\n+++ b/src/main/java/examples/HTTPExamples.java\n", "chunk": "@@ -924,6 +924,13 @@ public class HTTPExamples {\n       .setUseProxyProtocol(true);\n \n     HttpServer server = vertx.createHttpServer(options);\n+    server.requestHandler(request -> {\n+      // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n+      System.out.println(request.remoteAddress());\n+\n+      // Print the address of the proxy\n+      System.out.println(request.localAddress());\n+    });\n   }\n \n   public void serversharing(Vertx vertx) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNDg1OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406214859", "body": "I think we should add:\r\n\r\n```java\r\nserver.connectHandler(so -> {\r\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\r\n  System.out.println(so.remoteAddress());\r\n});\r\n```", "bodyText": "I think we should add:\nserver.connectHandler(so -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(so.remoteAddress());\n});", "bodyHTML": "<p dir=\"auto\">I think we should add:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"server.connectHandler(so -&gt; {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(so.remoteAddress());\n});\"><pre>server<span class=\"pl-k\">.</span>connectHandler(so <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Print the actual client address provided by the HA proxy protocol instead of the proxy address</span>\n  <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(so<span class=\"pl-k\">.</span>remoteAddress());\n});</pre></div>", "author": "vietj", "createdAt": "2020-04-09T13:44:52Z", "path": "src/main/java/examples/NetExamples.java", "diffHunk": "@@ -598,6 +598,11 @@ public void example50(Vertx vertx) throws CertificateException {\n       .listen(8080);\n   }\n \n+  public void example51(Vertx vertx) {\n+    NetServerOptions options = new NetServerOptions().setUseProxyProtocol(true);\n+    NetServer server = vertx.createNetServer(options);", "originalCommit": "b1efa43ca6257a364bd467935a5b20546cbc91de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "changed_code": [{"header": "diff --git a/src/main/java/examples/NetExamples.java b/src/main/java/examples/NetExamples.java\nindex 4132f101d..927508380 100755\n--- a/src/main/java/examples/NetExamples.java\n+++ b/src/main/java/examples/NetExamples.java\n", "chunk": "@@ -601,6 +601,13 @@ public class NetExamples {\n   public void example51(Vertx vertx) {\n     NetServerOptions options = new NetServerOptions().setUseProxyProtocol(true);\n     NetServer server = vertx.createNetServer(options);\n+    server.connectHandler(so -> {\n+      // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n+      System.out.println(so.remoteAddress());\n+\n+      // Print the address of the proxy\n+      System.out.println(so.localAddress());\n+    });\n   }\n \n   public void configureSNIServer(Vertx vertx) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406378680", "body": "Do we need to document localAddress as well? Just like we did for remoteAddress?", "bodyText": "Do we need to document localAddress as well? Just like we did for remoteAddress?", "bodyHTML": "<p dir=\"auto\">Do we need to document localAddress as well? Just like we did for remoteAddress?</p>", "author": "zenios", "createdAt": "2020-04-09T17:57:43Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -491,7 +497,10 @@ public SocketAddress remoteAddress() {\n   public SocketAddress localAddress() {", "originalCommit": "02a75a617fd172002bda696a230cb11aa9481b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzQwNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406487406", "bodyText": "yes, I forgot this", "author": "vietj", "createdAt": "2020-04-09T21:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzczNw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406487737", "bodyText": "yes", "author": "vietj", "createdAt": "2020-04-09T21:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4OTEwMA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406489100", "bodyText": "Ok will do that now and remove the hardcoded version.Thanks", "author": "zenios", "createdAt": "2020-04-09T21:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "7768d617d8363f6e691ca213aeffa032d32753a9", "changed_code": [{"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex ab1c2eb09..d3b7effc3 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -482,14 +482,17 @@ public abstract class ConnectionBase {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n-        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :\n-        chctx.channel().remoteAddress();\n+      if (chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n+        address = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);\n+      } else {\n+        java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+        if (addr != null) {\n+          address = vertx.transport().convert(addr);\n+        }\n+      }\n \n-      if (addr != null) {\n-        address = vertx.transport().convert(addr);\n+      if (address != null)\n         remoteAddress = address;\n-      }\n     }\n     return address;\n   }\n", "next_change": null}, {"header": "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\nindex ab1c2eb09..d3b7effc3 100644\n--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java\n", "chunk": "@@ -497,14 +500,17 @@ public abstract class ConnectionBase {\n   public SocketAddress localAddress() {\n     SocketAddress address = localAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().hasAttr(LOCAL_ADDRESS_OVERRIDE) ?\n-        chctx.channel().attr(LOCAL_ADDRESS_OVERRIDE).getAndSet(null) :\n-        chctx.channel().localAddress();\n+      if (chctx.channel().hasAttr(LOCAL_ADDRESS_OVERRIDE)) {\n+        address = chctx.channel().attr(LOCAL_ADDRESS_OVERRIDE).getAndSet(null);\n+      } else {\n+        java.net.SocketAddress addr = chctx.channel().localAddress();\n+        if (addr != null) {\n+          address = vertx.transport().convert(addr);\n+        }\n+      }\n \n-      if (addr != null) {\n-        address = vertx.transport().convert(addr);\n+      if (address != null)\n         localAddress = address;\n-      }\n     }\n     return address;\n   }\n", "next_change": null}]}}, {"oid": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "url": "https://github.com/eclipse-vertx/vert.x/commit/9bae540281c69579d5e6aed0170ccef0414e0cc9", "message": "HAProxy protocol support\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>", "committedDate": "2020-04-09T21:36:40Z", "type": "commit"}, {"oid": "7768d617d8363f6e691ca213aeffa032d32753a9", "url": "https://github.com/eclipse-vertx/vert.x/commit/7768d617d8363f6e691ca213aeffa032d32753a9", "message": "1.Implement support for all HAProxy proxied protocols\n2.Added seperate settings for ha proxy idle timeout\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>", "committedDate": "2020-04-10T10:46:01Z", "type": "commit"}]}