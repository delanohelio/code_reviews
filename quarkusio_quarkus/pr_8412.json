{"pr_number": 8412, "pr_title": "Test that CDI beans in SmallRye Health are present", "pr_author": "antoinesd", "pr_createdAt": "2020-04-06T10:23:09Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxOTcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8412#discussion_r404019701", "body": "I suppose that by \"is unique\" you mean \"is exactly one\" right? In that case this should probably be\r\n`!instances.isAmbiguous() && !instances.isUnsatisfied()`\r\nOtherwise you would get `true` here even if the `Instance` is ambiguous or unsatisfied (the only way to get `false` returned would be that the `Instance` is ambiguous and unsatisfied at the same time, which is a nonsense), therefore the test would pass even if there were two eligible checks", "bodyText": "I suppose that by \"is unique\" you mean \"is exactly one\" right? In that case this should probably be\n!instances.isAmbiguous() && !instances.isUnsatisfied()\nOtherwise you would get true here even if the Instance is ambiguous or unsatisfied (the only way to get false returned would be that the Instance is ambiguous and unsatisfied at the same time, which is a nonsense), therefore the test would pass even if there were two eligible checks", "bodyHTML": "<p dir=\"auto\">I suppose that by \"is unique\" you mean \"is exactly one\" right? In that case this should probably be<br>\n<code>!instances.isAmbiguous() &amp;&amp; !instances.isUnsatisfied()</code><br>\nOtherwise you would get <code>true</code> here even if the <code>Instance</code> is ambiguous or unsatisfied (the only way to get <code>false</code> returned would be that the <code>Instance</code> is ambiguous and unsatisfied at the same time, which is a nonsense), therefore the test would pass even if there were two eligible checks</p>", "author": "jmartisk", "createdAt": "2020-04-06T11:30:02Z", "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ExpectedBeansUnitTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.quarkus.smallrye.health.test;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.eclipse.microprofile.health.Readiness;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.wildfly.common.Assert;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.smallrye.health.HealthGroup;\n+import io.smallrye.health.SmallRyeHealthReporter;\n+\n+public class ExpectedBeansUnitTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(FailingHealthCheck.class)\n+                    .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\"));\n+    @Inject\n+    @Any\n+    Instance<HealthCheck> checks;\n+\n+    @Inject\n+    Instance<SmallRyeHealthReporter> reporters;\n+\n+    private boolean isUnique(Instance<?> instances) {\n+        return !(instances.isAmbiguous() && instances.isUnsatisfied());", "originalCommit": "850041eab6e4c5910cf9f5520ac5643e08801a02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxOTk0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8412#discussion_r404019949", "body": "Wrong import, you want to use `org.junit.jupiter.api.Assertions` or something like that", "bodyText": "Wrong import, you want to use org.junit.jupiter.api.Assertions or something like that", "bodyHTML": "<p dir=\"auto\">Wrong import, you want to use <code>org.junit.jupiter.api.Assertions</code> or something like that</p>", "author": "jmartisk", "createdAt": "2020-04-06T11:30:33Z", "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ExpectedBeansUnitTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.quarkus.smallrye.health.test;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.Liveness;\n+import org.eclipse.microprofile.health.Readiness;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.wildfly.common.Assert;", "originalCommit": "850041eab6e4c5910cf9f5520ac5643e08801a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyNTQ3NA==", "url": "https://github.com/quarkusio/quarkus/pull/8412#discussion_r404025474", "bodyText": "Sorry for that", "author": "antoinesd", "createdAt": "2020-04-06T11:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxOTk0OQ=="}], "type": "inlineReview"}, {"oid": "5dbdc1efb718a3b029e39af0a11d0d60191f6390", "url": "https://github.com/quarkusio/quarkus/commit/5dbdc1efb718a3b029e39af0a11d0d60191f6390", "message": "quarkus-7030 Test that CDI beans in SmallRye Health are present", "committedDate": "2020-04-06T13:05:58Z", "type": "commit"}, {"oid": "5dbdc1efb718a3b029e39af0a11d0d60191f6390", "url": "https://github.com/quarkusio/quarkus/commit/5dbdc1efb718a3b029e39af0a11d0d60191f6390", "message": "quarkus-7030 Test that CDI beans in SmallRye Health are present", "committedDate": "2020-04-06T13:05:58Z", "type": "forcePushed"}]}