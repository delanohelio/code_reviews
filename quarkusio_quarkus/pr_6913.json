{"pr_number": 6913, "pr_title": "Add first version of bootstrap config support", "pr_author": "geoand", "pr_createdAt": "2020-01-31T09:16:46Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6913", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMjA3OA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r373412078", "body": "```suggestion\r\n            Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"Bootstrap\"),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"BuildTime\"),\n          \n          \n            \n                        Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"Bootstrap\"),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Constants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">BuildTime</span><span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Constants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Bootstrap</span><span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "machi1990", "createdAt": "2020-01-31T10:29:50Z", "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "diffHunk": "@@ -6,6 +6,8 @@\n \n public enum ConfigPhase implements Comparable<ConfigPhase> {\n     RUN_TIME(\"The configuration is overridable at runtime\", Constants.CONFIG_PHASE_RUNTIME_ILLUSTRATION, \"RunTime\"),\n+    BOOTSTRAP(\"The configuration is used to bootstrap runtime Config Sources and is overridable at runtime\",\n+            Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"BuildTime\"),", "originalCommit": "e4aff687178cdf2594082126de282b267a88064e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMzUwMw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r373413503", "bodyText": "Makes sense, thanks", "author": "geoand", "createdAt": "2020-01-31T10:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMjA3OA=="}], "type": "inlineReview"}, {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f", "url": "https://github.com/quarkusio/quarkus/commit/b93af17d7773e12c378942cb50396f7ebc15d48f", "message": "Add first version of bootstrap config support", "committedDate": "2020-01-31T10:32:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTgwNg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374131806", "body": "Maybe all three options should be dropped into a single \"determine\" method.", "bodyText": "Maybe all three options should be dropped into a single \"determine\" method.", "bodyHTML": "<p dir=\"auto\">Maybe all three options should be dropped into a single \"determine\" method.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:28:14Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -634,9 +644,10 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 assert recordAnnotation != null;\n                 final ExecutionTime executionTime = recordAnnotation.value();\n                 final boolean optional = recordAnnotation.optional();\n+\n                 methodStepConfig = methodStepConfig.andThen(bsb -> bsb.produces(\n                         executionTime == ExecutionTime.STATIC_INIT ? StaticBytecodeRecorderBuildItem.class", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTY5NA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929694", "bodyText": "This junk is now completely gone", "author": "geoand", "createdAt": "2020-02-04T21:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374132509", "body": "This is a pretty strict limitation, not only on what the step can do but also on the way in which it can do it.  For example this makes it impossible to use `BuildProducer` to optionally produce the item.\r\n\r\nTBH I don't understand why the restriction exists.  Consuming a `BOOTSTRAP` config object should only have the distinguishing characteristic that the steps may run right away instead of after the \"real\" run time config is run.  Any step consuming run time config should already have at least one dependency which would prevent them from running too early.  Any `BOOTSTRAP` consuming step which doesn't produce anything that impacts the run time config by definition is agnostic to when it runs, so if it runs later that's fine.", "bodyText": "This is a pretty strict limitation, not only on what the step can do but also on the way in which it can do it.  For example this makes it impossible to use BuildProducer to optionally produce the item.\nTBH I don't understand why the restriction exists.  Consuming a BOOTSTRAP config object should only have the distinguishing characteristic that the steps may run right away instead of after the \"real\" run time config is run.  Any step consuming run time config should already have at least one dependency which would prevent them from running too early.  Any BOOTSTRAP consuming step which doesn't produce anything that impacts the run time config by definition is agnostic to when it runs, so if it runs later that's fine.", "bodyHTML": "<p dir=\"auto\">This is a pretty strict limitation, not only on what the step can do but also on the way in which it can do it.  For example this makes it impossible to use <code>BuildProducer</code> to optionally produce the item.</p>\n<p dir=\"auto\">TBH I don't understand why the restriction exists.  Consuming a <code>BOOTSTRAP</code> config object should only have the distinguishing characteristic that the steps may run right away instead of after the \"real\" run time config is run.  Any step consuming run time config should already have at least one dependency which would prevent them from running too early.  Any <code>BOOTSTRAP</code> consuming step which doesn't produce anything that impacts the run time config by definition is agnostic to when it runs, so if it runs later that's fine.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:29:28Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,8 +744,14 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {\n                             if (isRecorder) {\n+                                if ((phase == ConfigPhase.BOOTSTRAP)\n+                                        && !method.getReturnType().equals(RunTimeConfigurationSourceValueBuildItem.class)) {", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1Nzk0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374657943", "bodyText": "I agree completely. The whole reason I did it this way is because I wanted to be able to distringuish the bootstrap recorders for the regular ones and therefor generate bytecode that interacts with Config properly.\nIf I can change the PR to leverage the Build Steps that you mention in order comments, than this and other comments on the PR will likely go away.", "author": "geoand", "createdAt": "2020-02-04T13:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTkxMg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929912", "bodyText": "This arbitrary restriction has now been lifted.", "author": "geoand", "createdAt": "2020-02-04T21:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjA4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136083", "body": "Again returning a value is only one possible way of producing it.", "bodyText": "Again returning a value is only one possible way of producing it.", "bodyHTML": "<p dir=\"auto\">Again returning a value is only one possible way of producing it.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:35:54Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTk5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929991", "bodyText": "Also done", "author": "geoand", "createdAt": "2020-02-04T21:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjU1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136557", "body": "This restriction should be unneeded because the dependency sorting should already report the problem if you try to produce something in the wrong phase.", "bodyText": "This restriction should be unneeded because the dependency sorting should already report the problem if you try to produce something in the wrong phase.", "bodyHTML": "<p dir=\"auto\">This restriction should be unneeded because the dependency sorting should already report the problem if you try to produce something in the wrong phase.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:36:46Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)\n+                        && (!isRecorder || recordAnnotation.value() != ExecutionTime.RUNTIME_INIT)) {\n+                    throw reportError(method,\n+                            \"A Build step that returns \" + RunTimeConfigurationSourceValueBuildItem.class.getSimpleName()\n+                                    + \" must also be annotated with @Record(ExecutionTime.RUNTIME_INIT)\");", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930239", "bodyText": "Gone as well", "author": "geoand", "createdAt": "2020-02-04T21:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjgzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136835", "body": "Why not?", "bodyText": "Why not?", "bodyHTML": "<p dir=\"auto\">Why not?</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:37:15Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -837,14 +862,20 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 throw reportError(method, \"Unsupported method return type \" + returnType);\n             }\n \n-            if (methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    || methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n                 if (isRecorder && recordAnnotation.value() == ExecutionTime.STATIC_INIT) {\n                     throw reportError(method,\n                             \"Bytecode recorder is static but an injected config object is declared as run time\");\n                 }\n                 methodStepConfig = methodStepConfig\n                         .andThen(bsb -> bsb.consumes(RunTimeConfigurationProxyBuildItem.class));\n             }\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    && methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+                throw reportError(method,\n+                        \"Bootstrap configuration cannot be used together in a build step with run time configuration\");", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDM0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930347", "bodyText": "Not needed any more", "author": "geoand", "createdAt": "2020-02-04T21:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MzY2MA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374143660", "body": "Should be `final`.", "bodyText": "Should be final.", "bodyHTML": "<p dir=\"auto\">Should be <code>final</code>.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:49:02Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -361,19 +390,29 @@ public void run() {\n             final ConfigPatternMap<Container> buildTimePatternMap = buildTimeConfigResult.getBuildTimePatternMap();\n             final ConfigPatternMap<Container> buildTimeRunTimePatternMap = buildTimeConfigResult\n                     .getBuildTimeRunTimePatternMap();\n+            final ConfigPatternMap<Container> bootstrapPatternMap = buildTimeConfigResult.getBootstrapPatternMap();\n             final ConfigPatternMap<Container> runTimePatternMap = buildTimeConfigResult.getRunTimePatternMap();\n \n             final BiFunction<Container, Container, Container> combinator = (a, b) -> a == null ? b : a;\n-            final ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    runTimePatternMap, combinator);\n-            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    buildTimeRunTimePatternMap, combinator);\n+            ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930436", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-02-04T21:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MzY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0NjkxMw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374146913", "body": "I think in the future we should have a separate `bootstrapIgnored` as well, so we can log warnings about unrecognized configurations in the bootstrap config file(s) (this is the common case) while also being able to warn about ineffective config in the run time config (for example if a config source tries to configure itself, we can warn that the configuration property may not be given at that time).  This depends on #5548.", "bodyText": "I think in the future we should have a separate bootstrapIgnored as well, so we can log warnings about unrecognized configurations in the bootstrap config file(s) (this is the common case) while also being able to warn about ineffective config in the run time config (for example if a config source tries to configure itself, we can warn that the configuration property may not be given at that time).  This depends on #5548.", "bodyHTML": "<p dir=\"auto\">I think in the future we should have a separate <code>bootstrapIgnored</code> as well, so we can log warnings about unrecognized configurations in the bootstrap config file(s) (this is the common case) while also being able to warn about ineffective config in the run time config (for example if a config source tries to configure itself, we can warn that the configuration property may not be given at that time).  This depends on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"524058971\" data-permission-text=\"Title is private\" data-url=\"https://github.com/quarkusio/quarkus/issues/5548\" data-hovercard-type=\"issue\" data-hovercard-url=\"/quarkusio/quarkus/issues/5548/hovercard\" href=\"https://github.com/quarkusio/quarkus/issues/5548\">#5548</a>.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T14:54:32Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -361,19 +390,29 @@ public void run() {\n             final ConfigPatternMap<Container> buildTimePatternMap = buildTimeConfigResult.getBuildTimePatternMap();\n             final ConfigPatternMap<Container> buildTimeRunTimePatternMap = buildTimeConfigResult\n                     .getBuildTimeRunTimePatternMap();\n+            final ConfigPatternMap<Container> bootstrapPatternMap = buildTimeConfigResult.getBootstrapPatternMap();\n             final ConfigPatternMap<Container> runTimePatternMap = buildTimeConfigResult.getRunTimePatternMap();\n \n             final BiFunction<Container, Container, Container> combinator = (a, b) -> a == null ? b : a;\n-            final ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    runTimePatternMap, combinator);\n-            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    buildTimeRunTimePatternMap, combinator);\n+            ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap\n+                    .merge(ConfigPatternMap.merge(buildTimePatternMap,\n+                            runTimePatternMap, combinator), bootstrapPatternMap, combinator);\n+            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap\n+                    .merge(ConfigPatternMap.merge(buildTimePatternMap,\n+                            buildTimeRunTimePatternMap, combinator), bootstrapPatternMap, combinator);\n ", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzQ3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374167477", "body": "I don't think it does, TBH, it entails hopefully nothing more than moving the call to read the config into a build step.  The rest should (?) work itself out naturally.", "bodyText": "I don't think it does, TBH, it entails hopefully nothing more than moving the call to read the config into a build step.  The rest should (?) work itself out naturally.", "bodyHTML": "<p dir=\"auto\">I don't think it does, TBH, it entails hopefully nothing more than moving the call to read the config into a build step.  The rest should (?) work itself out naturally.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T15:28:33Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDYwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930609", "bodyText": "It worked like a charm", "author": "geoand", "createdAt": "2020-02-04T21:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2ODMzMA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374168330", "body": "This seems a bit fragile.  Could we instead try to move the config loading into a build step and see if that simplifies things?", "bodyText": "This seems a bit fragile.  Could we instead try to move the config loading into a build step and see if that simplifies things?", "bodyHTML": "<p dir=\"auto\">This seems a bit fragile.  Could we instead try to move the config loading into a build step and see if that simplifies things?</p>", "author": "dmlloyd", "createdAt": "2020-02-03T15:29:52Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)\n+             *\n+             * What this loop does is go through the MainBootstrapConfigBytecodeRecorderBuildItem objects which are guaranteed\n+             * to be constructed from build steps that return RunTimeConfigurationSourceValueBuildItem - thus ensuring that\n+             * the generated StartupTask will write its result (which is a RuntimeValue<ConfigSourceProvider>\n+             * configSourcesValue) into the StartupContext.\n+             * This value is then pulled out of the StartupContext by using the getLastValue method. All the\n+             * ConfigSourceProvider objects are then collected and passed to Config.readConfig()", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzE2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374327169", "bodyText": "Yes certainly. I think I have identified the mental hurdle that has been blocking me from seeing the path forward with this way of doing things.\nI'll work on it tomorrow and see how it goes.", "author": "geoand", "createdAt": "2020-02-03T20:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2ODMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMTE4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374211183", "body": "Heh! This bit of code probably should not have been approved - instead the phases probably ought to have been reordered and the default comparison used.... but I guess that can be a fix for another day.", "bodyText": "Heh! This bit of code probably should not have been approved - instead the phases probably ought to have been reordered and the default comparison used.... but I guess that can be a fix for another day.", "bodyHTML": "<p dir=\"auto\">Heh! This bit of code probably should not have been approved - instead the phases probably ought to have been reordered and the default comparison used.... but I guess that can be a fix for another day.</p>", "author": "dmlloyd", "createdAt": "2020-02-03T16:41:04Z", "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "diffHunk": "@@ -37,6 +39,20 @@ public int compare(ConfigPhase firstPhase, ConfigPhase secondPhase) {\n                             return -1;\n                     }\n                 }\n+                case BOOTSTRAP: {", "originalCommit": "b93af17d7773e12c378942cb50396f7ebc15d48f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "url": "https://github.com/quarkusio/quarkus/commit/b0a65f50aa257dbc9cc442a18de2d78a610edd00", "message": "Properly integrate bootstrap config into build system\n\nThis round makes bootstrap config work properly with\nthe build system without the arbitrary restrictions of\nthe first iteration.\nThis is accomplished mostly by moving config generation\nand setup into their own build steps", "committedDate": "2020-02-04T21:20:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4OTQ5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376089492", "body": "Maybe we should have a nice `toString` for these phase names.", "bodyText": "Maybe we should have a nice toString for these phase names.", "bodyHTML": "<p dir=\"auto\">Maybe we should have a nice <code>toString</code> for these phase names.</p>", "author": "dmlloyd", "createdAt": "2020-02-06T21:23:30Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -743,7 +753,9 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, ReflectUtil::newInstance);\n                             } else {\n                                 throw reportError(parameter,\n-                                        \"Run time configuration cannot be consumed here unless the method is a @Recorder\");\n+                                        String.format(\n+                                                \"%s configuration cannot be consumed here unless the method is a @Recorder\",\n+                                                phase == ConfigPhase.RUN_TIME ? \"Run time\" : \"Bootstrap\"));", "originalCommit": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzc4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267787", "bodyText": "Done", "author": "geoand", "createdAt": "2020-02-07T08:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4OTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MDQwNA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376090404", "body": "Maybe this should be `phase.isReadAtMain()` (with a method to expose that property)?  Several of the preceding checks could be similarly updated.", "bodyText": "Maybe this should be phase.isReadAtMain() (with a method to expose that property)?  Several of the preceding checks could be similarly updated.", "bodyHTML": "<p dir=\"auto\">Maybe this should be <code>phase.isReadAtMain()</code> (with a method to expose that property)?  Several of the preceding checks could be similarly updated.</p>", "author": "dmlloyd", "createdAt": "2020-02-06T21:25:26Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,7 +743,7 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {", "originalCommit": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NzgyMg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267822", "bodyText": "Done", "author": "geoand", "createdAt": "2020-02-07T08:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MDQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTY5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376091693", "body": "This should be an `EmptyBuildItem`.", "bodyText": "This should be an EmptyBuildItem.", "bodyHTML": "<p dir=\"auto\">This should be an <code>EmptyBuildItem</code>.</p>", "author": "dmlloyd", "createdAt": "2020-02-06T21:28:24Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/BootstrapConfigSetupCompleteBuildItem.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package io.quarkus.deployment.builditem;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Marker used by Build Steps that consume bootstrap configuration to ensure that they run after the bootstrap config has been\n+ * setup\n+ */\n+public final class BootstrapConfigSetupCompleteBuildItem extends SimpleBuildItem {", "originalCommit": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzk3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267975", "bodyText": "Done for this one and for RuntimeConfigSetupCompleteBuildItem", "author": "geoand", "createdAt": "2020-02-07T08:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376092093", "body": "If only one of these is ever set, should it be two different build items?", "bodyText": "If only one of these is ever set, should it be two different build items?", "bodyHTML": "<p dir=\"auto\">If only one of these is ever set, should it be two different build items?</p>", "author": "dmlloyd", "createdAt": "2020-02-06T21:29:17Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "diffHunk": "@@ -6,13 +6,23 @@\n public final class MainBytecodeRecorderBuildItem extends MultiBuildItem {\n \n     private final BytecodeRecorderImpl bytecodeRecorder;\n+    private final String generatedStartupContextClassName;", "originalCommit": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI0NTY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376245640", "bodyText": "The reason I did it this way is because the MainClassBuildStep can continue to just consume List<MainBytecodeRecorderBuildItem> and the order of generated StartupTask objects is properly worked out.", "author": "geoand", "createdAt": "2020-02-07T07:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MzM4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377093382", "bodyText": "I'm still not loving this, but the Monday brain fails to come up with any better ideas, so... I guess it's fine.", "author": "dmlloyd", "createdAt": "2020-02-10T14:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Nzc5MA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377097790", "bodyText": "Same here :)", "author": "geoand", "createdAt": "2020-02-10T14:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExOTcwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376119705", "body": "This should all go away.  Might be worth tagging the commit for reference first.", "bodyText": "This should all go away.  Might be worth tagging the commit for reference first.", "bodyHTML": "<p dir=\"auto\">This should all go away.  Might be worth tagging the commit for reference first.</p>", "author": "dmlloyd", "createdAt": "2020-02-06T22:33:10Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,25 +178,60 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        //        // Load the bootstrap configuration", "originalCommit": "b0a65f50aa257dbc9cc442a18de2d78a610edd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NzA0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267043", "bodyText": "Oh darn! Sorry for missing that! Basically the PR has 2 commits the first approach and the new approach so everything should be in the history, so I think we can safely delete all this :P", "author": "geoand", "createdAt": "2020-02-07T08:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExOTcwNQ=="}], "type": "inlineReview"}, {"oid": "ed2a377868b5fdeed8c08f6110f282d7538427aa", "url": "https://github.com/quarkusio/quarkus/commit/ed2a377868b5fdeed8c08f6110f282d7538427aa", "message": "Properly integrate bootstrap config into build system\n\nThis round makes bootstrap config work properly with\nthe build system without the arbitrary restrictions of\nthe first iteration.\nThis is accomplished mostly by moving config generation\nand setup into their own build steps", "committedDate": "2020-02-07T08:32:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5NDM2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377094361", "body": "```suggestion\r\n * A build step produces this BuildItem with a {@code RuntimeValue&lt;ConfigSourceProvider&gt;} a payload that is obtained by calling\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A build step produces this BuildItem with a {@code RuntimeValue<ConfigSourceProvider>} a payload that is obtained by calling\n          \n          \n            \n             * A build step produces this BuildItem with a {@code RuntimeValue&lt;ConfigSourceProvider&gt;} a payload that is obtained by calling", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> build step produces <span class=\"pl-c1\">this</span> <span class=\"pl-smi\">BuildItem</span> with a {<span class=\"pl-k\">@code</span> <span class=\"pl-k\">RuntimeValue<span class=\"x x-first x-last\">&lt;</span><span class=\"pl-smi\">ConfigSourceProvider</span><span class=\"x x-first x-last\">&gt;</span></span>} a payload that is obtained by calling</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> build step produces <span class=\"pl-c1\">this</span> <span class=\"pl-smi\">BuildItem</span> with a {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">RuntimeValue</span><span class=\"pl-k x x-first\">&amp;</span><span class=\"x x-last\">lt;</span><span class=\"pl-smi\">ConfigSourceProvider</span><span class=\"pl-k x x-first\">&amp;</span><span class=\"x x-last\">gt;</span>} a payload that is obtained by calling</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "dmlloyd", "createdAt": "2020-02-10T14:27:41Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationSourceValueBuildItem.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.deployment.builditem;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.runtime.RuntimeValue;\n+\n+/**\n+ * This is a special build item that is intended to be used only to support bootstrap configuration in the following manner:\n+ *\n+ * A build step produces this BuildItem with a {@code RuntimeValue<ConfigSourceProvider>} a payload that is obtained by calling", "originalCommit": "ed2a377868b5fdeed8c08f6110f282d7538427aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMjUxNA==", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377102514", "body": "```suggestion\r\n                    .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_VOLATILE);\r\n```\r\n\r\nUnless you have reason to believe this is safely published another way, in which case there should be a comment.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC);\n          \n          \n            \n                                .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_VOLATILE);\n          \n      \n    \n    \n  \n\nUnless you have reason to believe this is safely published another way, in which case there should be a comment.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .setModifiers(<span class=\"pl-smi\">Opcodes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ACC_PUBLIC</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">Opcodes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ACC_STATIC</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .setModifiers(<span class=\"pl-smi\">Opcodes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ACC_PUBLIC</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">Opcodes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ACC_STATIC</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">|</span><span class=\"x\"> </span><span class=\"pl-smi x\">Opcodes</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">ACC_VOLATILE</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Unless you have reason to believe this is safely published another way, in which case there should be a comment.</p>", "author": "dmlloyd", "createdAt": "2020-02-10T14:40:52Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -296,6 +312,10 @@ public static void generate(BuildTimeConfigurationReader.ReadResult readResult,\n                 clinit.invokeVirtualMethod(HM_PUT, buildTimeValues, clinit.load(entry.getKey()), clinit.load(entry.getValue()));\n             }\n \n+            // static field containing the instance of the class - is set when createBootstrapConfig is run\n+            cc.getFieldCreator(C_INSTANCE)\n+                    .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC);", "originalCommit": "ed2a377868b5fdeed8c08f6110f282d7538427aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a680de0933c4e1270b947ff86112f6868b421ac", "url": "https://github.com/quarkusio/quarkus/commit/4a680de0933c4e1270b947ff86112f6868b421ac", "message": "Add first version of bootstrap config support", "committedDate": "2020-02-10T16:16:24Z", "type": "commit"}, {"oid": "d31fe549499db328bea683097ef06761a7707f50", "url": "https://github.com/quarkusio/quarkus/commit/d31fe549499db328bea683097ef06761a7707f50", "message": "Properly integrate bootstrap config into build system\n\nThis round makes bootstrap config work properly with\nthe build system without the arbitrary restrictions of\nthe first iteration.\nThis is accomplished mostly by moving config generation\nand setup into their own build steps", "committedDate": "2020-02-10T16:20:54Z", "type": "commit"}, {"oid": "d31fe549499db328bea683097ef06761a7707f50", "url": "https://github.com/quarkusio/quarkus/commit/d31fe549499db328bea683097ef06761a7707f50", "message": "Properly integrate bootstrap config into build system\n\nThis round makes bootstrap config work properly with\nthe build system without the arbitrary restrictions of\nthe first iteration.\nThis is accomplished mostly by moving config generation\nand setup into their own build steps", "committedDate": "2020-02-10T16:20:54Z", "type": "forcePushed"}]}