{"pr_number": 14053, "pr_title": "@TransactionScoped Context does not call @Predestroy on TransactionScoped Beans", "pr_author": "msfm", "pr_createdAt": "2020-12-25T08:37:58Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/14053", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDU0MA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551440540", "body": "Could you clarify why this needs to be a `CopyOnWriteArraySet`, and perhaps add a comment to the code?", "bodyText": "Could you clarify why this needs to be a CopyOnWriteArraySet, and perhaps add a comment to the code?", "bodyHTML": "<p dir=\"auto\">Could you clarify why this needs to be a <code>CopyOnWriteArraySet</code>, and perhaps add a comment to the code?</p>", "author": "Sanne", "createdAt": "2021-01-04T16:55:55Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MTU1NA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551441554", "bodyText": "Also, if this instance is meant to be accessed concurrently (which the use of the CopyOnWrite seems to suggest), then the fields perhaps need to be declared final ?", "author": "Sanne", "createdAt": "2021-01-04T16:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MjQyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551442425", "body": "this could be marked `static` and `final`", "bodyText": "this could be marked static and final", "bodyHTML": "<p dir=\"auto\">this could be marked <code>static</code> and <code>final</code></p>", "author": "Sanne", "createdAt": "2021-01-04T16:58:48Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n+\n+        try {\n+            transaction.registerSynchronization(this);\n+        } catch (RollbackException e) {\n+            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n+        } catch (SystemException e) {\n+            throw new RuntimeException(\"null synchronization parameter!\");\n+        }\n+    }\n+\n+    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n+        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n+    }\n+\n+    @Override\n+    public void beforeCompletion() {\n+    }\n+\n+    @Override\n+    public void afterCompletion(int i) {\n+        for (TransactionScopedBean bean : beans)\n+            bean.destroy();\n+\n+        context.cleanupScope(transaction);\n+    }\n+\n+    private class TransactionScopedBean<T> {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MjUzNg==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551442536", "body": "fields should be all `final` ?", "bodyText": "fields should be all final ?", "bodyHTML": "<p dir=\"auto\">fields should be all <code>final</code> ?</p>", "author": "Sanne", "createdAt": "2021-01-04T16:59:01Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionScopeCleanup.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.narayana.jta.runtime.context;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+\n+public class TransactionScopeCleanup<T> implements Synchronization {\n+    private Set<TransactionScopedBean> beans;\n+    private TransactionContext context;\n+    private Transaction transaction;\n+\n+    public TransactionScopeCleanup(TransactionContext context, Transaction transaction) {\n+        this.context = context;\n+        this.transaction = transaction;\n+        this.beans = new CopyOnWriteArraySet<TransactionScopedBean>();\n+\n+        try {\n+            transaction.registerSynchronization(this);\n+        } catch (RollbackException e) {\n+            throw new RuntimeException(\"Cannot register synchronization because the transaction is in aborted state\");\n+        } catch (SystemException e) {\n+            throw new RuntimeException(\"null synchronization parameter!\");\n+        }\n+    }\n+\n+    public void registerBean(Contextual<T> contextual, CreationalContext<T> creationalContext, T bean) {\n+        beans.add(new TransactionScopedBean<>(contextual, creationalContext, bean));\n+    }\n+\n+    @Override\n+    public void beforeCompletion() {\n+    }\n+\n+    @Override\n+    public void afterCompletion(int i) {\n+        for (TransactionScopedBean bean : beans)\n+            bean.destroy();\n+\n+        context.cleanupScope(transaction);\n+    }\n+\n+    private class TransactionScopedBean<T> {\n+        Contextual<T> contextual;\n+        CreationalContext<T> creationalContext;\n+        T bean;", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzQyMg==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551443422", "body": "these two fields need to be `final`", "bodyText": "these two fields need to be final", "bodyHTML": "<p dir=\"auto\">these two fields need to be <code>final</code></p>", "author": "Sanne", "createdAt": "2021-01-04T17:00:27Z", "path": "integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java", "diffHunk": "@@ -1,9 +1,17 @@\n package io.quarkus.narayana.jta;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.transaction.TransactionScoped;\n \n @TransactionScoped\n public class TransactionScopedBean {\n+\n+    private static AtomicInteger initializedCount = new AtomicInteger(0);\n+    private static AtomicInteger destroyedCount = new AtomicInteger(0);", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MzgyNA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551443824", "body": "Could you give this a different name? You're adding two classes with this name; I understand it's not a problem as they are in a different package, but it's a bit unpractical to have two around.", "bodyText": "Could you give this a different name? You're adding two classes with this name; I understand it's not a problem as they are in a different package, but it's a bit unpractical to have two around.", "bodyHTML": "<p dir=\"auto\">Could you give this a different name? You're adding two classes with this name; I understand it's not a problem as they are in a different package, but it's a bit unpractical to have two around.</p>", "author": "Sanne", "createdAt": "2021-01-04T17:01:14Z", "path": "integration-tests/narayana-jta/src/main/java/io/quarkus/narayana/jta/TransactionScopedBean.java", "diffHunk": "@@ -1,9 +1,17 @@\n package io.quarkus.narayana.jta;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.transaction.TransactionScoped;\n \n @TransactionScoped\n public class TransactionScopedBean {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551445093", "body": "I'd prefer this to use a `ConcurrentMap`, so to not need `synchronized` on it further below.", "bodyText": "I'd prefer this to use a ConcurrentMap, so to not need synchronized on it further below.", "bodyHTML": "<p dir=\"auto\">I'd prefer this to use a <code>ConcurrentMap</code>, so to not need <code>synchronized</code> on it further below.</p>", "author": "Sanne", "createdAt": "2021-01-04T17:03:20Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -32,6 +33,7 @@\n \n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry = new TransactionSynchronizationRegistryImple();\n     private final TransactionManager transactionManager = com.arjuna.ats.jta.TransactionManager.transactionManager();\n+    private final Map<Transaction, TransactionScopeCleanup<?>> transactions = new HashMap<>();", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTQ0MA==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551445440", "body": "after making the `transactions` Map a `ConcurrentMap`, the synchronized can be removed.", "bodyText": "after making the transactions Map a ConcurrentMap, the synchronized can be removed.", "bodyHTML": "<p dir=\"auto\">after making the <code>transactions</code> Map a <code>ConcurrentMap</code>, the synchronized can be removed.</p>", "author": "Sanne", "createdAt": "2021-01-04T17:03:54Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -154,6 +169,12 @@ private Transaction getCurrentTransaction() {\n         }\n     }\n \n+    void cleanupScope(Transaction transaction) {\n+        synchronized (transactions) {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzMxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r551447315", "body": "after making the `transactions` Map a `ConcurrentMap`, the synchronized can be removed; the following operations can be made atomic with a little bit of care, e.g. using `computeIfAbsent` instead of `get`.\r\nEven better, for optimal performance, to a `get` first, and then resort to `computeIfAbsent` only if the first optimistic get operation failed.", "bodyText": "after making the transactions Map a ConcurrentMap, the synchronized can be removed; the following operations can be made atomic with a little bit of care, e.g. using computeIfAbsent instead of get.\nEven better, for optimal performance, to a get first, and then resort to computeIfAbsent only if the first optimistic get operation failed.", "bodyHTML": "<p dir=\"auto\">after making the <code>transactions</code> Map a <code>ConcurrentMap</code>, the synchronized can be removed; the following operations can be made atomic with a little bit of care, e.g. using <code>computeIfAbsent</code> instead of <code>get</code>.<br>\nEven better, for optimal performance, to a <code>get</code> first, and then resort to <code>computeIfAbsent</code> only if the first optimistic get operation failed.</p>", "author": "Sanne", "createdAt": "2021-01-04T17:07:06Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -105,12 +107,25 @@ public ContextState getState() {\n         if (instanceHandle != null) {\n             return instanceHandle.get();\n         } else if (creationalContext != null) {\n+            Transaction currentTransaction = getCurrentTransaction();\n             T createdInstance = contextual.create(creationalContext);\n             instanceHandle = new ContextInstanceHandleImpl<>((InjectableBean<T>) contextual, createdInstance,\n                     creationalContext);\n \n             contextState.put(contextual, instanceHandle);\n \n+            synchronized (transactions) {", "originalCommit": "cbc452e4d5148ace79021708c412001b5a3820e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "url": "https://github.com/quarkusio/quarkus/commit/79cc2a899b2fb56d251fd02ad526462834e9bd21", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-05T17:02:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NTkxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r552185911", "body": "Despite the argument is not used it could be named better.\r\n\r\n```suggestion\r\n        public void afterCompletion(int status) {\r\n```", "bodyText": "Despite the argument is not used it could be named better.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void afterCompletion(int i) {\n          \n          \n            \n                    public void afterCompletion(int status) {", "bodyHTML": "<p dir=\"auto\">Despite the argument is not used it could be named better.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> afterCompletion(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">i</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> afterCompletion(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">status</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ochaloup", "createdAt": "2021-01-05T20:49:09Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/context/TransactionContext.java", "diffHunk": "@@ -212,5 +222,13 @@ void destroy() {\n                     .collect(Collectors.toMap(ContextInstanceHandle::getBean, ContextInstanceHandle::get));\n         }\n \n+        @Override\n+        public void beforeCompletion() {\n+        }\n+\n+        @Override\n+        public void afterCompletion(int i) {", "originalCommit": "79cc2a899b2fb56d251fd02ad526462834e9bd21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxMzc1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/14053#discussion_r552313753", "bodyText": "Got it. I've incorporated the suggestion.", "author": "msfm", "createdAt": "2021-01-06T01:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NTkxMQ=="}], "type": "inlineReview"}, {"oid": "de5b88e3445f780784dd851e9e061cf18d83566c", "url": "https://github.com/quarkusio/quarkus/commit/de5b88e3445f780784dd851e9e061cf18d83566c", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T00:43:21Z", "type": "forcePushed"}, {"oid": "39e1c0082ee23bb4273f674bd2937bbc2b0c2b0e", "url": "https://github.com/quarkusio/quarkus/commit/39e1c0082ee23bb4273f674bd2937bbc2b0c2b0e", "message": "Call @PreDestroy on TransactionScoped bean", "committedDate": "2021-01-06T08:24:21Z", "type": "commit"}, {"oid": "2f5b2881ef97a298a86633c20d0279f7374f4ab3", "url": "https://github.com/quarkusio/quarkus/commit/2f5b2881ef97a298a86633c20d0279f7374f4ab3", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T08:24:22Z", "type": "commit"}, {"oid": "2f5b2881ef97a298a86633c20d0279f7374f4ab3", "url": "https://github.com/quarkusio/quarkus/commit/2f5b2881ef97a298a86633c20d0279f7374f4ab3", "message": "Update TransactionScopedTest to check @PostConstruct and @PreDestroy invocations for TransactionScoped bean", "committedDate": "2021-01-06T08:24:22Z", "type": "forcePushed"}]}