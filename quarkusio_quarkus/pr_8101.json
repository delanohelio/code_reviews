{"pr_number": 8101, "pr_title": "Add support for multiple extension overrides", "pr_author": "maxandersen", "pr_createdAt": "2020-03-24T08:13:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8101", "timeline": [{"oid": "7530442d1cd40ea350a75c962d88f37418c32397", "url": "https://github.com/quarkusio/quarkus/commit/7530442d1cd40ea350a75c962d88f37418c32397", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-24T15:21:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366067", "body": "We don't use star imports, can you use the appropriate code formatter? \r\n", "bodyText": "We don't use star imports, can you use the appropriate code formatter?", "bodyHTML": "<p dir=\"auto\">We don't use star imports, can you use the appropriate code formatter?</p>", "author": "gastaldi", "createdAt": "2020-03-24T18:17:26Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MzU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183541", "bodyText": "the build passes so I assume I am already using the appropriate code formatter.", "author": "maxandersen", "createdAt": "2020-03-25T21:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Mzg1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183859", "bodyText": "oh damn - is the PR's i made on having devtools share the formatting still not in master. ? gddmmit", "author": "maxandersen", "createdAt": "2020-03-25T21:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5ODkzNw==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398198937", "bodyText": "fixed manually", "author": "maxandersen", "createdAt": "2020-03-25T22:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjMzMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366332", "body": "Remove commented out code", "bodyText": "Remove commented out code", "bodyHTML": "<p dir=\"auto\">Remove commented out code</p>", "author": "gastaldi", "createdAt": "2020-03-24T18:17:50Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {\n+            OverrideInfo overrideInfo = getOverrideInfo(file);\n+            if (overrideInfo != null) {\n+                allOverrides.add(overrideInfo);\n             }\n         }\n \n+        //Map<String, JsonObject> extOverrides = overrideInfo.getExtOverrides();\n+        //JsonObject theRest = overrideInfo.getTheRest();\n+", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NzYzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397367635", "body": "```suggestion\r\n        for (String file: overridesFile.split(\",\")) {\r\n           overrides.add(new File(file.trim()));\r\n        }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n          \n          \n            \n                            .map(s -> {\n          \n          \n            \n                                return new File(s.trim());\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.toList()));\n          \n          \n            \n                    for (String file: overridesFile.split(\",\")) {\n          \n          \n            \n                       overrides.add(new File(file.trim()));\n          \n          \n            \n                    }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        overrides<span class=\"pl-k\">.</span>addAll(<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(overridesFile<span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .map(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(s<span class=\"pl-k\">.</span>trim());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                })</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">String</span> file<span class=\"pl-k\">:</span> overridesFile<span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">           overrides<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(file<span class=\"pl-k\">.</span>trim()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gastaldi", "createdAt": "2020-03-24T18:19:56Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397368602", "body": "You can iterate `overridesFile.split(\",\")` and delete the `List<File> overrides` above :)", "bodyText": "You can iterate overridesFile.split(\",\") and delete the List<File> overrides above :)", "bodyHTML": "<p dir=\"auto\">You can iterate <code>overridesFile.split(\",\")</code> and delete the <code>List&lt;File&gt; overrides</code> above :)</p>", "author": "gastaldi", "createdAt": "2020-03-24T18:21:32Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NTkzMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398185932", "bodyText": "true - good catch. it became this way as I was originally merging two lists but that\u2019s not relevant anymore fixing.", "author": "maxandersen", "createdAt": "2020-03-25T21:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg=="}], "type": "inlineReview"}, {"oid": "912a8a9c2a299e8daa873e7801557da9461f531d", "url": "https://github.com/quarkusio/quarkus/commit/912a8a9c2a299e8daa873e7801557da9461f531d", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:04:39Z", "type": "forcePushed"}, {"oid": "2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "url": "https://github.com/quarkusio/quarkus/commit/2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:44:18Z", "type": "commit"}, {"oid": "2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "url": "https://github.com/quarkusio/quarkus/commit/2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:44:18Z", "type": "forcePushed"}]}