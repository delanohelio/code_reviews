{"pr_number": 8641, "pr_title": "Register BUILD_AND_RUN_TIME_FIXED and RUN_TIME config roots as beans", "pr_author": "mkouba", "pr_createdAt": "2020-04-17T10:51:20Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8641", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDIzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410184235", "body": "It might be a stupid question but why a `Dependent` scope?", "bodyText": "It might be a stupid question but why a Dependent scope?", "bodyHTML": "<p dir=\"auto\">It might be a stupid question but why a <code>Dependent</code> scope?</p>", "author": "gsmet", "createdAt": "2020-04-17T12:18:21Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ConfigBuildStep.java", "diffHunk": "@@ -137,6 +143,25 @@ void validateConfigProperties(ConfigRecorder recorder, List<ConfigPropertyBuildI\n         recorder.validateConfigProperties(propNamesToClasses);\n     }\n \n+    @BuildStep\n+    BeanRegistrarBuildItem registerConfigRootsAsBeans(ConfigurationBuildItem configItem) {\n+        return new BeanRegistrarBuildItem(new BeanRegistrar() {\n+            @Override\n+            public void register(RegistrationContext context) {\n+                for (RootDefinition rootDefinition : configItem.getReadResult().getAllRoots()) {\n+                    if (rootDefinition.getConfigPhase() == ConfigPhase.BUILD_AND_RUN_TIME_FIXED\n+                            || rootDefinition.getConfigPhase() == ConfigPhase.RUN_TIME) {\n+                        context.configure(rootDefinition.getConfigurationClass()).types(rootDefinition.getConfigurationClass())\n+                                .scope(Dependent.class).creator(mc -> {", "originalCommit": "a60264ea2e26290425bf91e5fac3ecd43cd0041e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NzI4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410187283", "bodyText": "Well, we could use @Singleton but since we don't create any instance but just delegate to a static field it does not make sense to store the reference in the context. Having @Dependent means that Contextual.create() is invoked for every injetion point. In our case, Config.ApplicationConfig is read instead of context lookup (i.e. Map.get() for singleton).\nAnd normal scopes don't make sense either. A client proxy would be useless (one more useless delegation layer).", "author": "mkouba", "createdAt": "2020-04-17T12:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0NDIzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410244231", "body": "```suggestion\r\n        ThreadPoolConfig threadPoolConfig;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ThreadPoolConfig thredPoolConfig;\n          \n          \n            \n                    ThreadPoolConfig threadPoolConfig;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">ThreadPoolConfig</span> <span class=\"x x-first x-last\">thredPoolConfig</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">ThreadPoolConfig</span> <span class=\"x x-first x-last\">threadPoolConfig</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gsmet", "createdAt": "2020-04-17T14:03:08Z", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configroot/ConfigRootInjectionTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.arc.test.configroot;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.runtime.ApplicationConfig;\n+import io.quarkus.runtime.ThreadPoolConfig;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ConfigRootInjectionTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(ConfigRootInjectionTest.class, Client.class));\n+\n+    @Inject\n+    Client client;\n+\n+    @Test\n+    public void testInjectionWorks() {\n+        assertNotNull(client.applicationConfig);\n+        assertNotNull(client.applicationConfig.name);\n+        assertEquals(1, client.thredPoolConfig.coreThreads);\n+    }\n+\n+    @Singleton\n+    static class Client {\n+\n+        @Inject\n+        ApplicationConfig applicationConfig;\n+\n+        @Inject\n+        ThreadPoolConfig thredPoolConfig;", "originalCommit": "a60264ea2e26290425bf91e5fac3ecd43cd0041e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f7d30baf6455e98aad36413f0945a89cc6cd55a7", "url": "https://github.com/quarkusio/quarkus/commit/f7d30baf6455e98aad36413f0945a89cc6cd55a7", "message": "Register BUILD_AND_RUN_TIME_FIXED and RUN_TIME config roots as beans\n\n- i.e. make them injectable", "committedDate": "2020-04-18T07:54:10Z", "type": "forcePushed"}, {"oid": "e355da809f054fbeca9ef11bf851964b32761344", "url": "https://github.com/quarkusio/quarkus/commit/e355da809f054fbeca9ef11bf851964b32761344", "message": "Register BUILD_AND_RUN_TIME_FIXED and RUN_TIME config roots as beans\n\n- i.e. make them injectable", "committedDate": "2020-04-19T08:26:26Z", "type": "commit"}, {"oid": "e355da809f054fbeca9ef11bf851964b32761344", "url": "https://github.com/quarkusio/quarkus/commit/e355da809f054fbeca9ef11bf851964b32761344", "message": "Register BUILD_AND_RUN_TIME_FIXED and RUN_TIME config roots as beans\n\n- i.e. make them injectable", "committedDate": "2020-04-19T08:26:26Z", "type": "forcePushed"}]}