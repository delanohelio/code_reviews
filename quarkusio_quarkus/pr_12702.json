{"pr_number": 12702, "pr_title": "Add integration test for kafka reactive messaging", "pr_author": "geoandri", "pr_createdAt": "2020-10-14T05:28:26Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12702", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNjc4NA==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r504436784", "body": "```suggestion\r\n    public void consume(Person json) {\r\n        list.add(person);\r\n    }\r\n```\r\n\r\nGood PR. Should we use the value deserializer since we have it in config? ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void consume(String json) {\n          \n          \n            \n                    Person person = new JsonObject(json).mapTo(Person.class);\n          \n          \n            \n                    list.add(person);\n          \n          \n            \n                }\n          \n          \n            \n                public void consume(Person json) {\n          \n          \n            \n                    list.add(person);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nGood PR. Should we use the value deserializer since we have it in config?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"21\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> consume(<span class=\"pl-smi\">String</span> json) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"22\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Person</span> person <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonObject</span>(json)<span class=\"pl-k\">.</span>mapTo(<span class=\"pl-smi\">Person</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"23\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        list<span class=\"pl-k\">.</span>add(person);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"24\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"21\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> consume(<span class=\"pl-smi\">Person</span> json) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"22\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        list<span class=\"pl-k\">.</span>add(person);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"23\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Good PR. Should we use the value deserializer since we have it in config?</p>", "author": "machi1990", "createdAt": "2020-10-14T06:41:55Z", "path": "integration-tests/reactive-messaging-kafka/src/main/java/io/quarkus/it/kafka/PeopleManager.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.it.kafka;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+public class PeopleManager {\n+\n+    private final Logger log = Logger.getLogger(PeopleManager.class);\n+\n+    private final List<Person> list = new CopyOnWriteArrayList<>();\n+\n+    @Incoming(\"people-in\")\n+    public void consume(String json) {\n+        Person person = new JsonObject(json).mapTo(Person.class);\n+        list.add(person);\n+    }", "originalCommit": "fff241d2318b14f8b9c49247e1c11c6ab8fe37f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4MDE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r504880160", "bodyText": "Yes, you are right.", "author": "geoandri", "createdAt": "2020-10-14T18:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNjc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MzM4NA==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505153384", "body": "Add @ApplicationScoped", "bodyText": "Add @ApplicationScoped", "bodyHTML": "<p dir=\"auto\">Add @ApplicationScoped</p>", "author": "cescoffier", "createdAt": "2020-10-15T04:14:02Z", "path": "integration-tests/reactive-messaging-kafka/src/main/java/io/quarkus/it/kafka/PeopleManager.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.quarkus.it.kafka;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.jboss.logging.Logger;\n+\n+public class PeopleManager {", "originalCommit": "ced77b63f239a728216d01650ca5126b448f6a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MjExMw==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505182113", "body": "I would use `await().untilAsserted`", "bodyText": "I would use await().untilAsserted", "bodyHTML": "<p dir=\"auto\">I would use <code>await().untilAsserted</code></p>", "author": "cescoffier", "createdAt": "2020-10-15T05:58:24Z", "path": "integration-tests/reactive-messaging-kafka/src/test/java/io/quarkus/it/kafka/KafkaConnectorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.it.kafka;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.common.mapper.TypeRef;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class KafkaConnectorTest {\n+    private static final Logger log = Logger.getLogger(KafkaTestResource.class);\n+\n+    protected static final TypeRef<List<Person>> TYPE_REF = new TypeRef<List<Person>>() {\n+    };\n+\n+    @Test\n+    public void test() {\n+        log.info(\"Test run\");\n+        try {\n+            await()", "originalCommit": "ced77b63f239a728216d01650ca5126b448f6a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0NTg1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505245855", "bodyText": "@Test\npublic void test() {\n        await().untilAsserted(() -> \n           Assertions.assertEquals(get(\"/kafka/people\").as(TYPE_REF).size(), 6));\n}", "author": "cescoffier", "createdAt": "2020-10-15T07:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MjExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NTg4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505665885", "bodyText": "Done in the latest commit.", "author": "geoandri", "createdAt": "2020-10-15T16:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MjExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MDkwNA==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505240904", "body": "Could you add the associated native tests?\r\n\r\n```java\r\npackage io.quarkus.it.kafka;\r\n\r\nimport io.quarkus.test.junit.NativeImageTest;\r\n\r\n@NativeImageTest\r\npublic class KafkaConnectorIT extends KafkaConnectorTest {\r\n\r\n}\r\n```", "bodyText": "Could you add the associated native tests?\npackage io.quarkus.it.kafka;\n\nimport io.quarkus.test.junit.NativeImageTest;\n\n@NativeImageTest\npublic class KafkaConnectorIT extends KafkaConnectorTest {\n\n}", "bodyHTML": "<p dir=\"auto\">Could you add the associated native tests?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package io.quarkus.it.kafka;\n\nimport io.quarkus.test.junit.NativeImageTest;\n\n@NativeImageTest\npublic class KafkaConnectorIT extends KafkaConnectorTest {\n\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-smi\">io.quarkus.it.kafka</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">io.quarkus.test.junit.NativeImageTest</span>;\n\n<span class=\"pl-k\">@NativeImageTest</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">KafkaConnectorIT</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">KafkaConnectorTest</span> {\n\n}</pre></div>", "author": "cescoffier", "createdAt": "2020-10-15T07:08:00Z", "path": "integration-tests/reactive-messaging-kafka/src/test/java/io/quarkus/it/kafka/KafkaConnectorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.it.kafka;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.common.mapper.TypeRef;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class KafkaConnectorTest {", "originalCommit": "ced77b63f239a728216d01650ca5126b448f6a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NzE2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12702#discussion_r505667162", "bodyText": "Done", "author": "geoandri", "createdAt": "2020-10-15T16:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MDkwNA=="}], "type": "inlineReview"}, {"oid": "2cd7573c133a57b804375deb2d39ee1ad2762543", "url": "https://github.com/quarkusio/quarkus/commit/2cd7573c133a57b804375deb2d39ee1ad2762543", "message": "Add integration test for kafka reactive messaging", "committedDate": "2020-10-15T19:21:06Z", "type": "commit"}, {"oid": "2cd7573c133a57b804375deb2d39ee1ad2762543", "url": "https://github.com/quarkusio/quarkus/commit/2cd7573c133a57b804375deb2d39ee1ad2762543", "message": "Add integration test for kafka reactive messaging", "committedDate": "2020-10-15T19:21:06Z", "type": "forcePushed"}]}