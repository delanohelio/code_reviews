{"pr_number": 11142, "pr_title": "Support for additional test-to-main directory mappings", "pr_author": "roguexz", "pr_createdAt": "2020-08-01T05:31:10Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11142", "timeline": [{"oid": "87e2d7355dfaa951f84cb9bd5a3648af73409545", "url": "https://github.com/quarkusio/quarkus/commit/87e2d7355dfaa951f84cb9bd5a3648af73409545", "message": "Support for additional test-to-main directory mappings", "committedDate": "2020-09-21T02:14:05Z", "type": "forcePushed"}, {"oid": "b49c99f67ea8d8afafa3f9cecd07432839035761", "url": "https://github.com/quarkusio/quarkus/commit/b49c99f67ea8d8afafa3f9cecd07432839035761", "message": "Support for additional test-to-main directory mappings", "committedDate": "2020-09-21T02:42:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MzMyMw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r491773323", "body": "@glefloch Based on my analysis, if we want to keep the code impact to a minimum, then I will need to do the following,\r\n\r\n* Identify the test sources and serialize it as part of the plugin (via the tooling API)\r\n* Read that information in this class and associate the test-to-main mapping so that `isInTestDir` returns true\r\n\r\nIf this approach sounds good, then I can serialize it as part of the [QuarkusPluginExtension.beforeTest()](https://github.com/quarkusio/quarkus/blob/master/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java#L49) method.\r\n\r\nApart from the Gradle extension, is there any additional place that needs to be modified?", "bodyText": "@glefloch Based on my analysis, if we want to keep the code impact to a minimum, then I will need to do the following,\n\nIdentify the test sources and serialize it as part of the plugin (via the tooling API)\nRead that information in this class and associate the test-to-main mapping so that isInTestDir returns true\n\nIf this approach sounds good, then I can serialize it as part of the QuarkusPluginExtension.beforeTest() method.\nApart from the Gradle extension, is there any additional place that needs to be modified?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/glefloch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/glefloch\">@glefloch</a> Based on my analysis, if we want to keep the code impact to a minimum, then I will need to do the following,</p>\n<ul dir=\"auto\">\n<li>Identify the test sources and serialize it as part of the plugin (via the tooling API)</li>\n<li>Read that information in this class and associate the test-to-main mapping so that <code>isInTestDir</code> returns true</li>\n</ul>\n<p dir=\"auto\">If this approach sounds good, then I can serialize it as part of the <a href=\"https://github.com/quarkusio/quarkus/blob/master/devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java#L49\">QuarkusPluginExtension.beforeTest()</a> method.</p>\n<p dir=\"auto\">Apart from the Gradle extension, is there any additional place that needs to be modified?</p>", "author": "roguexz", "createdAt": "2020-09-21T02:52:14Z", "path": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java", "diffHunk": "@@ -99,6 +100,20 @@\n                 File.separator + \"test-classes\",\n                 File.separator + \"classes\");\n         //endregion\n+\n+        String mappings = System.getenv(\"ADDITIONAL_TEST_TO_MAIN_MAPPINGS\");", "originalCommit": "b49c99f67ea8d8afafa3f9cecd07432839035761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0ODMzMw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r491848333", "bodyText": "Yes, actually, we are already scanning workspace here: \n  \n    \n      quarkus/devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java\n    \n    \n         Line 126\n      in\n      77b772c\n    \n    \n    \n    \n\n        \n          \n           private WorkspaceModule getWorkspaceModule(Project project, LaunchMode mode) { \n        \n    \n  \n\n\nIf you can add those source set here, you will be able to get them through the model used : \n  \n    \n      quarkus/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n    \n    \n         Line 199\n      in\n      77b772c\n    \n    \n    \n    \n\n        \n          \n           BuildToolHelper.enableGradleAppModel(projectRoot, \"TEST\", QuarkusModelHelper.TEST_REQUIRED_TASKS);", "author": "glefloch", "createdAt": "2020-09-21T07:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MzMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4OTY2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495089666", "body": "Let's add `TEST_TO_MAIN_MAPPINGS\" to BootstrapConstants.", "bodyText": "Let's add `TEST_TO_MAIN_MAPPINGS\" to BootstrapConstants.", "bodyHTML": "<p dir=\"auto\">Let's add `TEST_TO_MAIN_MAPPINGS\" to BootstrapConstants.</p>", "author": "aloubyansky", "createdAt": "2020-09-25T16:08:25Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java", "diffHunk": "@@ -55,6 +58,23 @@ void beforeTest(Test task) {\n             final Path serializedModel = QuarkusGradleUtils.serializeAppModel(appModel, task);\n             props.put(BootstrapConstants.SERIALIZED_APP_MODEL, serializedModel.toString());\n \n+            // Identify the folder containing the sources associated with this test task\n+            StringJoiner joiner = new StringJoiner(\",\");\n+            getSourceSets().stream()\n+                    .filter(sourceSet -> Objects.equals(\n+                            task.getTestClassesDirs().getAsPath(),\n+                            sourceSet.getOutput().getClassesDirs().getAsPath()))\n+                    .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n+                    .filter(File::exists)\n+                    .distinct()\n+                    .forEach(testSrcDir -> {\n+                        String mapping = String.format(\"%s:%s\",\n+                                project.relativePath(testSrcDir),\n+                                project.relativePath(outputDirectory()));\n+                        joiner.add(mapping);\n+                    });\n+            task.environment(\"TEST_TO_MAIN_MAPPINGS\", joiner.toString());", "originalCommit": "a86ec6f4deb2290451ef8c67fb956f36a15c28a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MTM3NA==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495091374", "body": "I think we should throw an exception in this case instead.", "bodyText": "I think we should throw an exception in this case instead.", "bodyHTML": "<p dir=\"auto\">I think we should throw an exception in this case instead.</p>", "author": "aloubyansky", "createdAt": "2020-09-25T16:11:18Z", "path": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java", "diffHunk": "@@ -99,6 +100,20 @@\n                 File.separator + \"test-classes\",\n                 File.separator + \"classes\");\n         //endregion\n+\n+        String mappings = System.getenv(\"TEST_TO_MAIN_MAPPINGS\");\n+        if (mappings != null) {\n+            Stream.of(mappings.split(\",\"))\n+                    .filter(s -> !s.isEmpty())\n+                    .forEach(s -> {\n+                        String[] entry = s.split(\":\");\n+                        if (entry.length == 2) {\n+                            TEST_TO_MAIN_DIR_FRAGMENTS.put(entry[0], entry[1]);\n+                        } else {\n+                            System.err.println(\"Unable to parse additional test-to-main mapping: \" + s);", "originalCommit": "a86ec6f4deb2290451ef8c67fb956f36a15c28a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f4f780f6b0484ef9cfc71704087a61d2124f2f52", "url": "https://github.com/quarkusio/quarkus/commit/f4f780f6b0484ef9cfc71704087a61d2124f2f52", "message": "Incorporate review comments\n\n* Use a constant for sharing data between the two processes\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-26T02:13:06Z", "type": "forcePushed"}, {"oid": "c9fe14060e68ef735919a912859a5feb7c4795ba", "url": "https://github.com/quarkusio/quarkus/commit/c9fe14060e68ef735919a912859a5feb7c4795ba", "message": "Relocate tests to the integration-tests/gradle folder", "committedDate": "2020-09-26T18:53:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwNTQ0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11142#discussion_r495805443", "body": "Instead of using `forEach` and an external `StringJoiner`, would it be better to use something more functional?\r\n\r\n```suggestion\r\n            String fileList = getSourceSets().stream()\r\n                    .filter(sourceSet -> Objects.equals(\r\n                            task.getTestClassesDirs().getAsPath(),\r\n                            sourceSet.getOutput().getClassesDirs().getAsPath()))\r\n                    .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\r\n                    .filter(File::exists)\r\n                    .distinct()\r\n                    .map(testSrcDir -> String.format(\"%s:%s\",\r\n                                project.relativePath(testSrcDir),\r\n                                project.relativePath(outputDirectory())))\r\n                    .collect( Collectors.joining( \",\" ) );\r\n            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, fileList);\r\n```", "bodyText": "Instead of using forEach and an external StringJoiner, would it be better to use something more functional?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StringJoiner joiner = new StringJoiner(\",\");\n          \n          \n            \n                        getSourceSets().stream()\n          \n          \n            \n                                .filter(sourceSet -> Objects.equals(\n          \n          \n            \n                                        task.getTestClassesDirs().getAsPath(),\n          \n          \n            \n                                        sourceSet.getOutput().getClassesDirs().getAsPath()))\n          \n          \n            \n                                .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n          \n          \n            \n                                .filter(File::exists)\n          \n          \n            \n                                .distinct()\n          \n          \n            \n                                .forEach(testSrcDir -> {\n          \n          \n            \n                                    String mapping = String.format(\"%s:%s\",\n          \n          \n            \n                                            project.relativePath(testSrcDir),\n          \n          \n            \n                                            project.relativePath(outputDirectory()));\n          \n          \n            \n                                    joiner.add(mapping);\n          \n          \n            \n                                });\n          \n          \n            \n                        task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());\n          \n          \n            \n                        String fileList = getSourceSets().stream()\n          \n          \n            \n                                .filter(sourceSet -> Objects.equals(\n          \n          \n            \n                                        task.getTestClassesDirs().getAsPath(),\n          \n          \n            \n                                        sourceSet.getOutput().getClassesDirs().getAsPath()))\n          \n          \n            \n                                .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n          \n          \n            \n                                .filter(File::exists)\n          \n          \n            \n                                .distinct()\n          \n          \n            \n                                .map(testSrcDir -> String.format(\"%s:%s\",\n          \n          \n            \n                                            project.relativePath(testSrcDir),\n          \n          \n            \n                                            project.relativePath(outputDirectory())))\n          \n          \n            \n                                .collect( Collectors.joining( \",\" ) );\n          \n          \n            \n                        task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, fileList);", "bodyHTML": "<p dir=\"auto\">Instead of using <code>forEach</code> and an external <code>StringJoiner</code>, would it be better to use something more functional?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">StringJoiner</span> joiner <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringJoiner</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            getSourceSets()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .filter(sourceSet <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>equals(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            task<span class=\"pl-k\">.</span>getTestClassesDirs()<span class=\"pl-k\">.</span>getAsPath(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            sourceSet<span class=\"pl-k\">.</span>getOutput()<span class=\"pl-k\">.</span>getClassesDirs()<span class=\"pl-k\">.</span>getAsPath()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .flatMap(sourceSet <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> sourceSet<span class=\"pl-k\">.</span>getOutput()<span class=\"pl-k\">.</span>getClassesDirs()<span class=\"pl-k\">.</span>getFiles()<span class=\"pl-k\">.</span>stream())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .filter(<span class=\"pl-smi\">File</span><span class=\"pl-k\">::</span>exists)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .distinct()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .forEach(testSrcDir <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-smi\">String</span> mapping <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%s:%s<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                project<span class=\"pl-k\">.</span>relativePath(testSrcDir),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                project<span class=\"pl-k\">.</span>relativePath(outputDirectory()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        joiner<span class=\"pl-k\">.</span>add(mapping);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            task<span class=\"pl-k\">.</span>environment(<span class=\"pl-smi\">BootstrapConstants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TEST_TO_MAIN_MAPPINGS</span>, joiner<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">String</span> fileList <span class=\"pl-k\">=</span> getSourceSets()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .filter(sourceSet <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>equals(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            task<span class=\"pl-k\">.</span>getTestClassesDirs()<span class=\"pl-k\">.</span>getAsPath(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            sourceSet<span class=\"pl-k\">.</span>getOutput()<span class=\"pl-k\">.</span>getClassesDirs()<span class=\"pl-k\">.</span>getAsPath()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .flatMap(sourceSet <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> sourceSet<span class=\"pl-k\">.</span>getOutput()<span class=\"pl-k\">.</span>getClassesDirs()<span class=\"pl-k\">.</span>getFiles()<span class=\"pl-k\">.</span>stream())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .filter(<span class=\"pl-smi\">File</span><span class=\"pl-k\">::</span>exists)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .distinct()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .map(testSrcDir <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%s:%s<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                project<span class=\"pl-k\">.</span>relativePath(testSrcDir),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                project<span class=\"pl-k\">.</span>relativePath(outputDirectory())))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .collect( <span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>joining( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span> ) );</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            task<span class=\"pl-k\">.</span>environment(<span class=\"pl-smi\">BootstrapConstants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TEST_TO_MAIN_MAPPINGS</span>, fileList);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ebramirez", "createdAt": "2020-09-28T09:26:44Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPluginExtension.java", "diffHunk": "@@ -55,6 +58,23 @@ void beforeTest(Test task) {\n             final Path serializedModel = QuarkusGradleUtils.serializeAppModel(appModel, task);\n             props.put(BootstrapConstants.SERIALIZED_APP_MODEL, serializedModel.toString());\n \n+            // Identify the folder containing the sources associated with this test task\n+            StringJoiner joiner = new StringJoiner(\",\");\n+            getSourceSets().stream()\n+                    .filter(sourceSet -> Objects.equals(\n+                            task.getTestClassesDirs().getAsPath(),\n+                            sourceSet.getOutput().getClassesDirs().getAsPath()))\n+                    .flatMap(sourceSet -> sourceSet.getOutput().getClassesDirs().getFiles().stream())\n+                    .filter(File::exists)\n+                    .distinct()\n+                    .forEach(testSrcDir -> {\n+                        String mapping = String.format(\"%s:%s\",\n+                                project.relativePath(testSrcDir),\n+                                project.relativePath(outputDirectory()));\n+                        joiner.add(mapping);\n+                    });\n+            task.environment(BootstrapConstants.TEST_TO_MAIN_MAPPINGS, joiner.toString());", "originalCommit": "c9fe14060e68ef735919a912859a5feb7c4795ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "baf6ebbaa5ffbdc34853f6393208a2f7ad351cb9", "url": "https://github.com/quarkusio/quarkus/commit/baf6ebbaa5ffbdc34853f6393208a2f7ad351cb9", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T15:49:13Z", "type": "forcePushed"}, {"oid": "48fa25b0cf0749d690f45107daba28a1b72f06d1", "url": "https://github.com/quarkusio/quarkus/commit/48fa25b0cf0749d690f45107daba28a1b72f06d1", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T17:52:35Z", "type": "commit"}, {"oid": "48fa25b0cf0749d690f45107daba28a1b72f06d1", "url": "https://github.com/quarkusio/quarkus/commit/48fa25b0cf0749d690f45107daba28a1b72f06d1", "message": "Gradle: Support for additional test-to-main directory mappings\n\n* Determine test output directory based on the task\n* Raise an exception if the mapping data is invalid.\n* Include a functional-test for verifying the plugin behavior", "committedDate": "2020-09-28T17:52:35Z", "type": "forcePushed"}]}