{"pr_number": 10745, "pr_title": "Introduce extensions for the Elasticsearch clients", "pr_author": "gsmet", "pr_createdAt": "2020-07-15T11:46:11Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10745", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDU5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454994596", "body": "```suggestion\r\n     * The username for basic HTTP authentication.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The username used for authentication.\n          \n          \n            \n                 * The username for basic HTTP authentication.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> username <span class=\"x x-first x-last\">used </span><span class=\"pl-k\">for</span> authentication.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> username <span class=\"pl-k\">for</span><span class=\"x x-first\"> basic </span><span class=\"pl-c1 x x-last\">HTTP</span> authentication.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yrodiere", "createdAt": "2020-07-15T11:54:12Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/ElasticsearchConfig.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class ElasticsearchConfig {\n+\n+    /**\n+     * The list of hosts of the Elasticsearch servers.\n+     */\n+    @ConfigItem(defaultValue = \"localhost:9200\")\n+    public List<String> hosts;\n+\n+    /**\n+     * The protocol to use when contacting Elasticsearch servers.\n+     * Set to \"https\" to enable SSL/TLS.\n+     */\n+    @ConfigItem(defaultValue = \"http\")\n+    public String protocol;\n+\n+    /**\n+     * The username used for authentication.", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDcxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454994718", "body": "```suggestion\r\n     * The password for basic HTTP authentication.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The password used for authentication.\n          \n          \n            \n                 * The password for basic HTTP authentication.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> password <span class=\"x x-first x-last\">used </span><span class=\"pl-k\">for</span> authentication.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> password <span class=\"pl-k\">for</span><span class=\"x x-first\"> basic </span><span class=\"pl-c1 x x-last\">HTTP</span> authentication.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yrodiere", "createdAt": "2020-07-15T11:54:28Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/ElasticsearchConfig.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class ElasticsearchConfig {\n+\n+    /**\n+     * The list of hosts of the Elasticsearch servers.\n+     */\n+    @ConfigItem(defaultValue = \"localhost:9200\")\n+    public List<String> hosts;\n+\n+    /**\n+     * The protocol to use when contacting Elasticsearch servers.\n+     * Set to \"https\" to enable SSL/TLS.\n+     */\n+    @ConfigItem(defaultValue = \"http\")\n+    public String protocol;\n+\n+    /**\n+     * The username used for authentication.\n+     */\n+    @ConfigItem\n+    public Optional<String> username;\n+\n+    /**\n+     * The password used for authentication.", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454995748", "body": "```suggestion\r\n     * By default, this is the number of locally detected processors.\r\n     * <p>\r\n     * Thread counts higher than the number of processors should not be necessary because the I/O threads rely on non-blocking operations,\r\n     * but you may want to use a thread count lower than the number of processors.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * By default, this is the number of locally detected processors.\n          \n          \n            \n                 * By default, this is the number of locally detected processors.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * Thread counts higher than the number of processors should not be necessary because the I/O threads rely on non-blocking operations,\n          \n          \n            \n                 * but you may want to use a thread count lower than the number of processors.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">By</span> <span class=\"pl-k\">default</span>, <span class=\"pl-c1\">this</span> is the number of locally detected processors.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">By</span> <span class=\"pl-k\">default</span>, <span class=\"pl-c1\">this</span> is the number of locally detected processors.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"68\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Thread</span> counts higher than the number of processors should not be necessary because the <span class=\"pl-smi\">I</span><span class=\"pl-k\">/</span><span class=\"pl-smi\">O</span> threads rely on non<span class=\"pl-k\">-</span>blocking operations,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> but you may want to use a thread count lower than the number of processors.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yrodiere", "createdAt": "2020-07-15T11:56:27Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/ElasticsearchConfig.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class ElasticsearchConfig {\n+\n+    /**\n+     * The list of hosts of the Elasticsearch servers.\n+     */\n+    @ConfigItem(defaultValue = \"localhost:9200\")\n+    public List<String> hosts;\n+\n+    /**\n+     * The protocol to use when contacting Elasticsearch servers.\n+     * Set to \"https\" to enable SSL/TLS.\n+     */\n+    @ConfigItem(defaultValue = \"http\")\n+    public String protocol;\n+\n+    /**\n+     * The username used for authentication.\n+     */\n+    @ConfigItem\n+    public Optional<String> username;\n+\n+    /**\n+     * The password used for authentication.\n+     */\n+    @ConfigItem\n+    public Optional<String> password;\n+\n+    /**\n+     * The connection timeout.\n+     */\n+    @ConfigItem(defaultValue = \"1S\")\n+    public Duration connectionTimeout;\n+\n+    /**\n+     * The socket timeout.\n+     */\n+    @ConfigItem(defaultValue = \"30S\")\n+    public Duration socketTimeout;\n+\n+    /**\n+     * The number of IO thread.\n+     * By default, this is the number of locally detected processors.", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5Njc5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454996790", "body": "Shouldn't the port be optional and default to `9200`?", "bodyText": "Shouldn't the port be optional and default to 9200?", "bodyHTML": "<p dir=\"auto\">Shouldn't the port be optional and default to <code>9200</code>?</p>", "author": "yrodiere", "createdAt": "2020-07-15T11:58:23Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5ODQyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455098427", "bodyText": "I'm not sure tbh but we should at least change the config stuff to use InetSocketAddress IMHO.", "author": "gsmet", "createdAt": "2020-07-15T14:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5Njc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MDUxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455160514", "bodyText": "mongodb, hibernate-search-elasticsearch and neo4j uses such a construct so I think it's OK here.\nWe can of course make the port optional but it's really standard to define elasticsearch URL this way so I wouldn't bother as it will implies a lot more branches in the configuration code.", "author": "loicmathieu", "createdAt": "2020-07-15T15:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5Njc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NzYxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454997618", "body": "In Hibernate Search, we issue a warning in this case if the protocol is set to `http` (the default), because then the password will be transmitted using a clear-text connection, which is a security issue on public networks.", "bodyText": "In Hibernate Search, we issue a warning in this case if the protocol is set to http (the default), because then the password will be transmitted using a clear-text connection, which is a security issue on public networks.", "bodyHTML": "<p dir=\"auto\">In Hibernate Search, we issue a warning in this case if the protocol is set to <code>http</code> (the default), because then the password will be transmitted using a clear-text connection, which is a security issue on public networks.</p>", "author": "yrodiere", "createdAt": "2020-07-15T12:00:07Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());\n+            }\n+        });\n+\n+        builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n+            @Override\n+            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n+                if (config.username.isPresent()) {", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5ODkyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455098921", "bodyText": "That's a good idea.", "author": "gsmet", "createdAt": "2020-07-15T14:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NzYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODgxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r454998812", "body": "As far as I know, the passowrd may not be provided here. I believe HTTP authentication with an empty password is legal?\r\n\r\nThe http client seems to handle this case by using the string \"null\" as the password, though. Which I doubt will ever work.\r\n\r\nIn any case, you may want a better exception than the `NoSuchElementException` currently being thrown by `password.get()`.", "bodyText": "As far as I know, the passowrd may not be provided here. I believe HTTP authentication with an empty password is legal?\nThe http client seems to handle this case by using the string \"null\" as the password, though. Which I doubt will ever work.\nIn any case, you may want a better exception than the NoSuchElementException currently being thrown by password.get().", "bodyHTML": "<p dir=\"auto\">As far as I know, the passowrd may not be provided here. I believe HTTP authentication with an empty password is legal?</p>\n<p dir=\"auto\">The http client seems to handle this case by using the string \"null\" as the password, though. Which I doubt will ever work.</p>\n<p dir=\"auto\">In any case, you may want a better exception than the <code>NoSuchElementException</code> currently being thrown by <code>password.get()</code>.</p>", "author": "yrodiere", "createdAt": "2020-07-15T12:02:23Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());\n+            }\n+        });\n+\n+        builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n+            @Override\n+            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n+                if (config.username.isPresent()) {\n+                    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+                    credentialsProvider.setCredentials(AuthScope.ANY,\n+                            new UsernamePasswordCredentials(config.username.get(), config.password.get()));", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5OTIxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455099215", "bodyText": "Agreed.", "author": "gsmet", "createdAt": "2020-07-15T14:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMjUyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455002527", "body": "I don't know if you intend to use the same code for the quickstart, but in case you do... this code is prone to injection. Users could potentially insert some very heavy aggregation in your query, for example. I don't know for sure, but I can imagine building on this vulnerability to trigger a DOS. \r\n\r\nThe proper way to do this would be to use a library such as GSON, Jackson, or whatever you fancy to build a structured JSON object, then serializing that object to a string. But then the code gets ugly, there's no denying that :)", "bodyText": "I don't know if you intend to use the same code for the quickstart, but in case you do... this code is prone to injection. Users could potentially insert some very heavy aggregation in your query, for example. I don't know for sure, but I can imagine building on this vulnerability to trigger a DOS.\nThe proper way to do this would be to use a library such as GSON, Jackson, or whatever you fancy to build a structured JSON object, then serializing that object to a string. But then the code gets ugly, there's no denying that :)", "bodyHTML": "<p dir=\"auto\">I don't know if you intend to use the same code for the quickstart, but in case you do... this code is prone to injection. Users could potentially insert some very heavy aggregation in your query, for example. I don't know for sure, but I can imagine building on this vulnerability to trigger a DOS.</p>\n<p dir=\"auto\">The proper way to do this would be to use a library such as GSON, Jackson, or whatever you fancy to build a structured JSON object, then serializing that object to a string. But then the code gets ugly, there's no denying that :)</p>", "author": "yrodiere", "createdAt": "2020-07-15T12:09:44Z", "path": "integration-tests/elasticsearch-rest-client/src/main/java/io/quarkus/it/elasticsearch/FruitService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.it.elasticsearch;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+@ApplicationScoped\n+public class FruitService {\n+    @Inject\n+    RestClient restClient;\n+\n+    public void index(Fruit fruit) throws IOException {\n+        Request request = new Request(\n+                \"PUT\",\n+                \"/fruits/_doc/\" + fruit.id);\n+        request.setJsonEntity(JsonObject.mapFrom(fruit).toString());\n+        restClient.performRequest(request);\n+    }\n+\n+    public Fruit get(String id) throws IOException {\n+        Request request = new Request(\n+                \"GET\",\n+                \"/fruits/_doc/\" + id);\n+        Response response = restClient.performRequest(request);\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        JsonObject json = new JsonObject(responseBody);\n+        return json.getJsonObject(\"_source\").mapTo(Fruit.class);\n+    }\n+\n+    public List<Fruit> searchByColor(String color) throws IOException {\n+        return search(\"color\", color);\n+    }\n+\n+    public List<Fruit> searchByName(String name) throws IOException {\n+        return search(\"name\", name);\n+    }\n+\n+    private List<Fruit> search(String term, String match) throws IOException {\n+        Request request = new Request(\n+                \"GET\",\n+                \"/fruits/_search\");\n+        String query = String.format(\"{\\\"query\\\": { \\\"match\\\": { \\\"%s\\\":\\\"%s\\\"}}}\", term, match);", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMTA1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455101052", "bodyText": "Agreed, that can't happen in the quickstart as people might use it. As you already use Jackson and Vert.x JsonObject, looks like you could use that.", "author": "gsmet", "createdAt": "2020-07-15T14:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNzc1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455007753", "body": "Just a heads-up: this will fail in an application that defines multiple rest clients (to communicate with multiple Elasticsearch clusters from the same application).\r\n\r\nI know the current low-level REST client extension doesn't allow that, but users can still define their own beans (which is typically what I would do if I needed to communicate with multiple Elasticsearch clusters).", "bodyText": "Just a heads-up: this will fail in an application that defines multiple rest clients (to communicate with multiple Elasticsearch clusters from the same application).\nI know the current low-level REST client extension doesn't allow that, but users can still define their own beans (which is typically what I would do if I needed to communicate with multiple Elasticsearch clusters).", "bodyHTML": "<p dir=\"auto\">Just a heads-up: this will fail in an application that defines multiple rest clients (to communicate with multiple Elasticsearch clusters from the same application).</p>\n<p dir=\"auto\">I know the current low-level REST client extension doesn't allow that, but users can still define their own beans (which is typically what I would do if I needed to communicate with multiple Elasticsearch clusters).</p>", "author": "yrodiere", "createdAt": "2020-07-15T12:19:20Z", "path": "extensions/elasticsearch-rest-high-level-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/highlevel/runtime/ElasticsearchRestHighLevelClientProducer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.elasticsearch.restclient.highlevel.runtime;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Collections;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+\n+@ApplicationScoped\n+public class ElasticsearchRestHighLevelClientProducer {\n+\n+    @Inject\n+    RestClient restClient;", "originalCommit": "213034de857bfefe50c74d7a25b0175c1e5a7280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODQyNA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455028424", "bodyText": "Named Elasticsearch client (to allow connecting to multiple cluster) will be done in a followup PR, I'll open a followup PR to keep track of it.", "author": "loicmathieu", "createdAt": "2020-07-15T12:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTI4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455109280", "bodyText": "I think we should add the @Default qualifier to the produced bean and the injection point here.", "author": "gsmet", "createdAt": "2020-07-15T14:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNzc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMTQ3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455011476", "body": "Since we're all about reactive these days, maybe you could use `performRequestAsync` instead? It's not exactly reactive, but it's async and accepts a callback, so...\r\n\r\nThe code would definitely be more complex, though.", "bodyText": "Since we're all about reactive these days, maybe you could use performRequestAsync instead? It's not exactly reactive, but it's async and accepts a callback, so...\nThe code would definitely be more complex, though.", "bodyHTML": "<p dir=\"auto\">Since we're all about reactive these days, maybe you could use <code>performRequestAsync</code> instead? It's not exactly reactive, but it's async and accepts a callback, so...</p>\n<p dir=\"auto\">The code would definitely be more complex, though.</p>", "author": "yrodiere", "createdAt": "2020-07-15T12:25:58Z", "path": "integration-tests/elasticsearch-rest-client/src/main/java/io/quarkus/it/elasticsearch/FruitService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.it.elasticsearch;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+@ApplicationScoped\n+public class FruitService {\n+    @Inject\n+    RestClient restClient;\n+\n+    public void index(Fruit fruit) throws IOException {\n+        Request request = new Request(\n+                \"PUT\",\n+                \"/fruits/_doc/\" + fruit.id);\n+        request.setJsonEntity(JsonObject.mapFrom(fruit).toString());\n+        restClient.performRequest(request);", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMDI3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455100270", "bodyText": "Yeah, let's keep it simple in the tests IMHO.", "author": "gsmet", "createdAt": "2020-07-15T14:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455019182", "body": "Connections settings, which I think are quite important, are missing:\r\n\r\n* `max_connections`: the maximum number of connections to the cluster.\r\n* `max_connections_per_route`: the maximum number of connections to each node in the cluster.\r\n\r\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L201-L200", "bodyText": "Connections settings, which I think are quite important, are missing:\n\nmax_connections: the maximum number of connections to the cluster.\nmax_connections_per_route: the maximum number of connections to each node in the cluster.\n\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L201-L200", "bodyHTML": "<p dir=\"auto\">Connections settings, which I think are quite important, are missing:</p>\n<ul dir=\"auto\">\n<li><code>max_connections</code>: the maximum number of connections to the cluster.</li>\n<li><code>max_connections_per_route</code>: the maximum number of connections to each node in the cluster.</li>\n</ul>\n<p dir=\"auto\">See <a href=\"https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L201-L200\">https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L201-L200</a></p>", "author": "yrodiere", "createdAt": "2020-07-15T12:39:28Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/ElasticsearchConfig.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class ElasticsearchConfig {\n+\n+    /**\n+     * The list of hosts of the Elasticsearch servers.\n+     */\n+    @ConfigItem(defaultValue = \"localhost:9200\")\n+    public List<String> hosts;\n+\n+    /**\n+     * The protocol to use when contacting Elasticsearch servers.\n+     * Set to \"https\" to enable SSL/TLS.\n+     */\n+    @ConfigItem(defaultValue = \"http\")\n+    public String protocol;\n+\n+    /**\n+     * The username used for authentication.\n+     */\n+    @ConfigItem\n+    public Optional<String> username;\n+\n+    /**\n+     * The password used for authentication.\n+     */\n+    @ConfigItem\n+    public Optional<String> password;\n+\n+    /**\n+     * The connection timeout.\n+     */\n+    @ConfigItem(defaultValue = \"1S\")\n+    public Duration connectionTimeout;\n+\n+    /**\n+     * The socket timeout.\n+     */\n+    @ConfigItem(defaultValue = \"30S\")\n+    public Duration socketTimeout;\n+\n+    /**\n+     * The number of IO thread.\n+     * By default, this is the number of locally detected processors.\n+     *\n+     * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_number_of_threads.html\">number of\n+     *      threads</a>\n+     */\n+    @ConfigItem\n+    public Optional<Integer> ioThreadCounts;\n+", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjczNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455102735", "bodyText": "The documentation now only references this one. See https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_number_of_threads.html", "author": "loicmathieu", "createdAt": "2020-07-15T14:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjAyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455106020", "bodyText": "I think it's because of https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_others.html . They basically send you to the Apache HTTP client doc.\nI would trust Yoann on that one :).", "author": "gsmet", "createdAt": "2020-07-15T14:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjI3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455106271", "bodyText": "I'm not sure I'm following. The settings I mentioned are settings of the underlying HTTP client, not of the Elasticsearch Rest client. So indeed, they don't have dedicated entries in the Elasticsearch Rest client documentation. They are still relevant, though. See https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_others.html", "author": "yrodiere", "createdAt": "2020-07-15T14:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMDMxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455110319", "bodyText": "Yeah, I understand it now, it's different things ;)", "author": "loicmathieu", "createdAt": "2020-07-15T14:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDI0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455020247", "body": "You may want to customize the thread factory to give a better name to client threads (something that mentions Elasticsearch).\r\n\r\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L203", "bodyText": "You may want to customize the thread factory to give a better name to client threads (something that mentions Elasticsearch).\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L203", "bodyHTML": "<p dir=\"auto\">You may want to customize the thread factory to give a better name to client threads (something that mentions Elasticsearch).</p>\n<p dir=\"auto\">See <a href=\"https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L203\">https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L203</a></p>", "author": "yrodiere", "createdAt": "2020-07-15T12:41:18Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());\n+            }\n+        });\n+\n+        builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n+            @Override\n+            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n+                if (config.username.isPresent()) {\n+                    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+                    credentialsProvider.setCredentials(AuthScope.ANY,\n+                            new UsernamePasswordCredentials(config.username.get(), config.password.get()));\n+                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n+                }\n+\n+                if (config.ioThreadCounts.isPresent()) {\n+                    IOReactorConfig ioReactorConfig = IOReactorConfig.custom()\n+                            .setIoThreadCount(config.ioThreadCounts.get())\n+                            .build();\n+                    httpClientBuilder.setDefaultIOReactorConfig(ioReactorConfig);", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODQ1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455568451", "bodyText": "We don't have a ThreadProvider available yet inside the extension so I would not implement this now.", "author": "loicmathieu", "createdAt": "2020-07-16T07:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4NjE5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455586194", "bodyText": "Right, that's something specific to Hibernate Search. You can implement a much simpler ThreadFactory that simply creates threads with an appropriate name. For example like this: https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/legacy/engine/src/main/java/org/hibernate/search/util/impl/SearchThreadFactory.java\nThat is, if you consider thread names are important.", "author": "yrodiere", "createdAt": "2020-07-16T07:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMTEzNA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455021134", "body": "You don't seem to be using the \"protocol\" setting. You should use it here to disable SSL if it's not necessary, because SSL causes significant slowdowns on startup.\r\n\r\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L204-L208", "bodyText": "You don't seem to be using the \"protocol\" setting. You should use it here to disable SSL if it's not necessary, because SSL causes significant slowdowns on startup.\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L204-L208", "bodyHTML": "<p dir=\"auto\">You don't seem to be using the \"protocol\" setting. You should use it here to disable SSL if it's not necessary, because SSL causes significant slowdowns on startup.</p>\n<p dir=\"auto\">See <a href=\"https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L204-L208\">https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L204-L208</a></p>", "author": "yrodiere", "createdAt": "2020-07-15T12:42:48Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());\n+            }\n+        });\n+\n+        builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n+            @Override\n+            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n+                if (config.username.isPresent()) {\n+                    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+                    credentialsProvider.setCredentials(AuthScope.ANY,\n+                            new UsernamePasswordCredentials(config.username.get(), config.password.get()));\n+                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n+                }\n+\n+                if (config.ioThreadCounts.isPresent()) {\n+                    IOReactorConfig ioReactorConfig = IOReactorConfig.custom()\n+                            .setIoThreadCount(config.ioThreadCounts.get())\n+                            .build();\n+                    httpClientBuilder.setDefaultIOReactorConfig(ioReactorConfig);\n+                }\n+", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMTg2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455021863", "body": "You need to take the protocol into account here, too.\r\n\r\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L182-L190", "bodyText": "You need to take the protocol into account here, too.\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L182-L190", "bodyHTML": "<p dir=\"auto\">You need to take the protocol into account here, too.</p>\n<p dir=\"auto\">See <a href=\"https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L182-L190\">https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L182-L190</a></p>", "author": "yrodiere", "createdAt": "2020-07-15T12:43:58Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());\n+            }\n+        });\n+\n+        builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n+            @Override\n+            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n+                if (config.username.isPresent()) {\n+                    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+                    credentialsProvider.setCredentials(AuthScope.ANY,\n+                            new UsernamePasswordCredentials(config.username.get(), config.password.get()));\n+                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n+                }\n+\n+                if (config.ioThreadCounts.isPresent()) {\n+                    IOReactorConfig ioReactorConfig = IOReactorConfig.custom()\n+                            .setIoThreadCount(config.ioThreadCounts.get())\n+                            .build();\n+                    httpClientBuilder.setDefaultIOReactorConfig(ioReactorConfig);\n+                }\n+\n+                return httpClientBuilder;\n+            }\n+        });\n+\n+        return builder;\n+    }\n+\n+    static Sniffer createSniffer(RestClient client, ElasticsearchConfig config) {\n+        return Sniffer.builder(client)\n+                .setSniffIntervalMillis((int) config.discovery.refreshInterval.toMillis())\n+                .build();", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNDAxNg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455024016", "body": "Not sure it's still relevant nowadays, but you might want to call `setConnectionRequestTimeout( 0 )` here to avoid requests being flagged as timed out even when they didn't time out.\r\n\r\nSee https://hibernate.atlassian.net/browse/HSEARCH-2681\r\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L236", "bodyText": "Not sure it's still relevant nowadays, but you might want to call setConnectionRequestTimeout( 0 ) here to avoid requests being flagged as timed out even when they didn't time out.\nSee https://hibernate.atlassian.net/browse/HSEARCH-2681\nSee https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L236", "bodyHTML": "<p dir=\"auto\">Not sure it's still relevant nowadays, but you might want to call <code>setConnectionRequestTimeout( 0 )</code> here to avoid requests being flagged as timed out even when they didn't time out.</p>\n<p dir=\"auto\">See <a href=\"https://hibernate.atlassian.net/browse/HSEARCH-2681\" rel=\"nofollow\">https://hibernate.atlassian.net/browse/HSEARCH-2681</a><br>\nSee <a href=\"https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L236\">https://github.com/hibernate/hibernate-search/blob/9da99d7de8f346aa0ec81ae2ce0a1fa2c1657b2a/backend/elasticsearch/src/main/java/org/hibernate/search/backend/elasticsearch/client/impl/ElasticsearchClientFactoryImpl.java#L236</a></p>", "author": "yrodiere", "createdAt": "2020-07-15T12:47:20Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/RestClientBuilderHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package io.quarkus.elasticsearch.restclient.lowlevel.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.sniff.Sniffer;\n+\n+public final class RestClientBuilderHelper {\n+\n+    private RestClientBuilderHelper() {\n+        // avoid instantiation\n+    }\n+\n+    static RestClientBuilder createRestClientBuilder(ElasticsearchConfig config) {\n+        List<HttpHost> hosts = config.hosts.stream().map(s -> new HttpHost(s.substring(0, s.indexOf(\":\")),\n+                Integer.parseInt(s.substring(s.indexOf(\":\") + 1)), config.protocol)).collect(Collectors.toList());\n+        RestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+\n+        builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n+            @Override\n+            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n+                return requestConfigBuilder\n+                        .setConnectTimeout((int) config.connectionTimeout.toMillis())\n+                        .setSocketTimeout((int) config.socketTimeout.toMillis());", "originalCommit": "bdd022fdc4675285e57715ea3fd4ea7f651077ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNTMyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455015325", "body": "I thought enumeration of the features inside th Feature class was something we want to avoid for now.\r\nI remember some discussion about this last time I created an extension ...", "bodyText": "I thought enumeration of the features inside th Feature class was something we want to avoid for now.\nI remember some discussion about this last time I created an extension ...", "bodyHTML": "<p dir=\"auto\">I thought enumeration of the features inside th Feature class was something we want to avoid for now.<br>\nI remember some discussion about this last time I created an extension ...</p>", "author": "loicmathieu", "createdAt": "2020-07-15T12:32:37Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/Feature.java", "diffHunk": "@@ -23,7 +23,9 @@\n     CDI,\n     CONFIG_YAML,\n     CONSUL_CONFIG,\n+    ELASTICSEARCH_REST_CLIENT_COMMON,\n     ELASTICSEARCH_REST_CLIENT,\n+    ELASTICSEARCH_REST_HIGH_LEVEL_CLIENT,", "originalCommit": "b7384a1267e6bcc24c35ef167363d57e347f1b39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5NTA2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455095068", "bodyText": "Yeah, well, no :).", "author": "gsmet", "createdAt": "2020-07-15T14:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNTcxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r455105712", "bodyText": "I'm pretty sure Alexey or David didn't agree with you but OK :)", "author": "loicmathieu", "createdAt": "2020-07-15T14:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNTMyNQ=="}], "type": "inlineReview"}, {"oid": "c107b74552e0470c353b64024fb8afab96ef5295", "url": "https://github.com/quarkusio/quarkus/commit/c107b74552e0470c353b64024fb8afab96ef5295", "message": "Move the Elasticsearch native ITs to a specific Data6 job", "committedDate": "2020-07-15T14:39:52Z", "type": "forcePushed"}, {"oid": "34841460b38014249e79333d59dafc3b4c3c9e27", "url": "https://github.com/quarkusio/quarkus/commit/34841460b38014249e79333d59dafc3b4c3c9e27", "message": "fixup! Add an Elasticsearch low level client extension", "committedDate": "2020-07-21T15:30:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwODM0NA==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r458208344", "body": "From the javadoc:\r\n\r\n```\r\n * This class implements an IP Socket Address (IP address + port number)\r\n * It can also be a pair (hostname + port number), in which case an attempt\r\n * will be made to resolve the hostname.\r\n```\r\n\r\nDo you really want that?", "bodyText": "From the javadoc:\n * This class implements an IP Socket Address (IP address + port number)\n * It can also be a pair (hostname + port number), in which case an attempt\n * will be made to resolve the hostname.\n\nDo you really want that?", "bodyHTML": "<p dir=\"auto\">From the javadoc:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" * This class implements an IP Socket Address (IP address + port number)\n * It can also be a pair (hostname + port number), in which case an attempt\n * will be made to resolve the hostname.\n\"><pre><code> * This class implements an IP Socket Address (IP address + port number)\n * It can also be a pair (hostname + port number), in which case an attempt\n * will be made to resolve the hostname.\n</code></pre></div>\n<p dir=\"auto\">Do you really want that?</p>", "author": "yrodiere", "createdAt": "2020-07-21T15:56:57Z", "path": "extensions/elasticsearch-rest-client/runtime/src/main/java/io/quarkus/elasticsearch/restclient/lowlevel/runtime/ElasticsearchConfig.java", "diffHunk": "@@ -16,7 +17,7 @@\n      * The list of hosts of the Elasticsearch servers.\n      */\n     @ConfigItem(defaultValue = \"localhost:9200\")\n-    public List<String> hosts;\n+    public List<InetSocketAddress> hosts;", "originalCommit": "dfbccaab4633b8901adc7eb98eaf50fe0cfd1980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxMTQ1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r458211456", "bodyText": "We use InetSocketAddress in Quarkus for all the host:port combinations. I think, if I use getHostString() as I did, it does not resolve anything. At least that's what the Javadoc says.", "author": "gsmet", "createdAt": "2020-07-21T16:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxNTY5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10745#discussion_r458215692", "bodyText": "I checked (statically) what java.net.InetSocketAddress#InetSocketAddress(java.lang.String, int) calls and ended up in java.net.InetAddress#getAddressesFromNameService...  Might be worth a double-check.", "author": "yrodiere", "createdAt": "2020-07-21T16:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwODM0NA=="}], "type": "inlineReview"}, {"oid": "52438312c5d04b33f37495576c467b6d185f79db", "url": "https://github.com/quarkusio/quarkus/commit/52438312c5d04b33f37495576c467b6d185f79db", "message": "Move the Elasticsearch native ITs to a specific Data6 job", "committedDate": "2020-07-21T16:14:20Z", "type": "forcePushed"}, {"oid": "f669a2620e17d75f62899fc127f5999abb436169", "url": "https://github.com/quarkusio/quarkus/commit/f669a2620e17d75f62899fc127f5999abb436169", "message": "Rename elasticsearch-rest-client extension to -common\n\nIt will be used by both the Hibernate Search - Elasticsearch extension\nand the Elasticsearch client extensions.\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-07-21T16:16:39Z", "type": "commit"}, {"oid": "85643a2bcab8f34fe81c579cae8efc1fbf119190", "url": "https://github.com/quarkusio/quarkus/commit/85643a2bcab8f34fe81c579cae8efc1fbf119190", "message": "Add an Elasticsearch low level client extension\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-07-21T16:16:53Z", "type": "commit"}, {"oid": "183f04ea4acf9a64cb8594cf729fee2e5e664717", "url": "https://github.com/quarkusio/quarkus/commit/183f04ea4acf9a64cb8594cf729fee2e5e664717", "message": "Add an Elasticsearch high level client extension\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-07-21T16:16:57Z", "type": "commit"}, {"oid": "95c51da0d6c545e4ab2030c76c291ccc63a04bb4", "url": "https://github.com/quarkusio/quarkus/commit/95c51da0d6c545e4ab2030c76c291ccc63a04bb4", "message": "Add documentation for the new Elasticsearch client extensions\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-07-21T16:17:01Z", "type": "commit"}, {"oid": "ecf34a658402acac868b43fd66ba07c07b215286", "url": "https://github.com/quarkusio/quarkus/commit/ecf34a658402acac868b43fd66ba07c07b215286", "message": "Move the Elasticsearch native ITs to a specific Data6 job", "committedDate": "2020-07-21T16:17:05Z", "type": "commit"}, {"oid": "ecf34a658402acac868b43fd66ba07c07b215286", "url": "https://github.com/quarkusio/quarkus/commit/ecf34a658402acac868b43fd66ba07c07b215286", "message": "Move the Elasticsearch native ITs to a specific Data6 job", "committedDate": "2020-07-21T16:17:05Z", "type": "forcePushed"}]}