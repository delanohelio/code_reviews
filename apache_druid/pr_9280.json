{"pr_number": 9280, "pr_title": "CacheStrategy: Improve Javadocs.", "pr_author": "gianm", "pr_createdAt": "2020-01-29T02:03:53Z", "pr_url": "https://github.com/apache/druid/pull/9280", "timeline": [{"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5", "url": "https://github.com/apache/druid/commit/e7815ae03226e107e13dc1ad618aa24f00a027c5", "message": "CacheStrategy: Improve Javadocs.", "committedDate": "2020-01-29T02:03:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDMyMw==", "url": "https://github.com/apache/druid/pull/9280#discussion_r373234323", "body": "nit: 'incluce' -> 'include'", "bodyText": "nit: 'incluce' -> 'include'", "bodyHTML": "<p dir=\"auto\">nit: 'incluce' -&gt; 'include'</p>", "author": "clintropolis", "createdAt": "2020-01-30T22:44:30Z", "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and\n+   * interval details, so this key does not need to incluce datasource and interval. But it should include anything", "originalCommit": "e7815ae03226e107e13dc1ad618aa24f00a027c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNzU5Ng==", "url": "https://github.com/apache/druid/pull/9280#discussion_r377907596", "body": "```suggestion\r\n   * interval details, so this key does not need to include datasource and interval. But it should include anything\r\n```\r\n\r\n^ trying out github suggestions, supposedly it lets you accept a change without needing to make the change locally :)\r\n\r\n https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request#applying-suggested-changes ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * interval details, so this key does not need to incluce datasource and interval. But it should include anything\n          \n          \n            \n               * interval details, so this key does not need to include datasource and interval. But it should include anything\n          \n      \n    \n    \n  \n\n^ trying out github suggestions, supposedly it lets you accept a change without needing to make the change locally :)\nhttps://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request#applying-suggested-changes", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> interval details, so <span class=\"pl-c1\">this</span> key does not need to <span class=\"x x-first x-last\">incluce</span> datasource and interval. <span class=\"pl-smi\">But</span> it should include anything</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> interval details, so <span class=\"pl-c1\">this</span> key does not need to <span class=\"x x-first x-last\">include</span> datasource and interval. <span class=\"pl-smi\">But</span> it should include anything</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">^ trying out github suggestions, supposedly it lets you accept a change without needing to make the change locally :)</p>\n<p dir=\"auto\"><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request#applying-suggested-changes\">https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request#applying-suggested-changes</a></p>", "author": "suneet-s", "createdAt": "2020-02-11T21:24:34Z", "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and\n+   * interval details, so this key does not need to incluce datasource and interval. But it should include anything", "originalCommit": "e7815ae03226e107e13dc1ad618aa24f00a027c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDgzOQ==", "url": "https://github.com/apache/druid/pull/9280#discussion_r377944839", "bodyText": "Whoa, cool. I clicked the button and it seemed to work.", "author": "gianm", "createdAt": "2020-02-11T22:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNzU5Ng=="}], "type": "inlineReview"}, {"oid": "1a7a93eafc872df8c3245c34a309f40c997943c4", "url": "https://github.com/apache/druid/commit/1a7a93eafc872df8c3245c34a309f40c997943c4", "message": "Update processing/src/main/java/org/apache/druid/query/CacheStrategy.java\n\nCo-Authored-By: Suneet Saldanha <44787917+suneet-s@users.noreply.github.com>", "committedDate": "2020-02-11T22:44:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5MzE1Mw==", "url": "https://github.com/apache/druid/pull/9280#discussion_r380593153", "body": "I was going to file a bug about result-level cache key computation does not taken interval details into account until this comes along. If this is intentional, it still not clear about how the result-level cache \"tacking on datasource and interval details\". Maybe it's better to add more docs on this part?", "bodyText": "I was going to file a bug about result-level cache key computation does not taken interval details into account until this comes along. If this is intentional, it still not clear about how the result-level cache \"tacking on datasource and interval details\". Maybe it's better to add more docs on this part?", "bodyHTML": "<p dir=\"auto\">I was going to file a bug about result-level cache key computation does not taken interval details into account until this comes along. If this is intentional, it still not clear about how the result-level cache \"tacking on datasource and interval details\". Maybe it's better to add more docs on this part?</p>", "author": "khwj", "createdAt": "2020-02-18T10:43:41Z", "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and", "originalCommit": "1a7a93eafc872df8c3245c34a309f40c997943c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MjY2Mw==", "url": "https://github.com/apache/druid/pull/9280#discussion_r385882663", "bodyText": "It does it in sort of an easy-to-miss way: the key actually doesn't contain datasource and interval details, but the value does, and the ResultLevelCachingQueryRunner will only use the cached value if they match. Check out ResultLevelCachingQueryRunner to see how it works.\nFwiw, I think it would be good to modify ResultLevelCachingQueryRunner to make this part of the key, not part of the value, so it can cache results for queries that differ in interval but are the same otherwise. I don't have plans to do this personally though, at least not right now.", "author": "gianm", "createdAt": "2020-02-28T19:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5MzE1Mw=="}], "type": "inlineReview"}]}