{"pr_number": 9161, "pr_title": "first/last aggregators and nulls", "pr_author": "clintropolis", "pr_createdAt": "2020-01-10T11:28:37Z", "pr_url": "https://github.com/apache/druid/pull/9161", "timeline": [{"oid": "fd12b662ab583bab5a5598538e7ded7923cb890f", "url": "https://github.com/apache/druid/commit/fd12b662ab583bab5a5598538e7ded7923cb890f", "message": "null handling for numeric first/last aggregators, refactor to not extend nullable numeric agg since they are complex typed aggs", "committedDate": "2020-01-10T08:58:49Z", "type": "commit"}, {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699", "url": "https://github.com/apache/druid/commit/1f0cd184d5ce1afae92f4a62013b061501c00699", "message": "initially null or not based on config", "committedDate": "2020-01-10T12:18:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MzM5MA==", "url": "https://github.com/apache/druid/pull/9161#discussion_r365493390", "body": "Can you add javadocs for these buffer methods?", "bodyText": "Can you add javadocs for these buffer methods?", "bodyHTML": "<p dir=\"auto\">Can you add javadocs for these buffer methods?</p>", "author": "jon-wei", "createdAt": "2020-01-11T02:44:03Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/NumericLastBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.last;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericLastBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericLastBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);", "originalCommit": "1f0cd184d5ce1afae92f4a62013b061501c00699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MzQ1OA==", "url": "https://github.com/apache/druid/pull/9161#discussion_r365493458", "body": "nit: to follow the ordering in the buffer, maybe move putValue call after the null marker setting", "bodyText": "nit: to follow the ordering in the buffer, maybe move putValue call after the null marker setting", "bodyHTML": "<p dir=\"auto\">nit: to follow the ordering in the buffer, maybe move putValue call after the null marker setting</p>", "author": "jon-wei", "createdAt": "2020-01-11T02:45:06Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/NumericLastBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.last;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericLastBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericLastBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);\n+\n+  abstract void putValue(ByteBuffer buf, int position);\n+\n+  boolean isValueNull(ByteBuffer buf, int position)\n+  {\n+    return buf.get(position + NULL_OFFSET) == 1;\n+  }\n+\n+  void updateTimeWithValue(ByteBuffer buf, int position, long time)\n+  {\n+    buf.putLong(position, time);\n+    putValue(buf, position);", "originalCommit": "1f0cd184d5ce1afae92f4a62013b061501c00699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "920942151d2333ab4446fd8874b85e43d4c99793", "url": "https://github.com/apache/druid/commit/920942151d2333ab4446fd8874b85e43d4c99793", "message": "Merge remote-tracking branch 'upstream/master' into first-last-agg-null-handling", "committedDate": "2020-01-17T19:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0NTY1MQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368145651", "body": "`== RHS_NULL`?", "bodyText": "== RHS_NULL?", "bodyHTML": "<p dir=\"auto\"><code>== RHS_NULL</code>?</p>", "author": "jihoonson", "createdAt": "2020-01-17T21:34:22Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.first;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericFirstBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericFirstBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);\n+\n+  abstract void putValue(ByteBuffer buf, int position);\n+\n+  boolean isValueNull(ByteBuffer buf, int position)\n+  {\n+    return buf.get(position + NULL_OFFSET) == 1;", "originalCommit": "1f0cd184d5ce1afae92f4a62013b061501c00699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1Mzk4Mg==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368153982", "bodyText": "switching these to use NullHandling.IS_NULL_BYTE and NullHandling.IS_NOT_NULL_BYTE", "author": "clintropolis", "createdAt": "2020-01-17T22:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0NTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1MTA1NQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368151055", "body": "`Byte.BYTES`. Or perhaps adding a new variable `NULL_SIZE`?", "bodyText": "Byte.BYTES. Or perhaps adding a new variable NULL_SIZE?", "bodyHTML": "<p dir=\"auto\"><code>Byte.BYTES</code>. Or perhaps adding a new variable <code>NULL_SIZE</code>?</p>", "author": "jihoonson", "createdAt": "2020-01-17T21:50:51Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java", "diffHunk": "@@ -230,7 +248,7 @@ public String getTypeName()\n   @Override\n   public int getMaxIntermediateSize()\n   {\n-    return Long.BYTES + Double.BYTES;\n+    return Long.BYTES + Double.BYTES + 1;", "originalCommit": "1f0cd184d5ce1afae92f4a62013b061501c00699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1NDIxMg==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368154212", "bodyText": "it seems unlikely to me that the number of bytes in a byte is going to change, but ok :p", "author": "clintropolis", "createdAt": "2020-01-17T22:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1MTA1NQ=="}], "type": "inlineReview"}, {"oid": "defc3a7dfc92ec15327647d1f0d9949437898f48", "url": "https://github.com/apache/druid/commit/defc3a7dfc92ec15327647d1f0d9949437898f48", "message": "review stuff, make string first/last consistent with null handling of numeric columns, more tests", "committedDate": "2020-01-18T02:12:58Z", "type": "commit"}, {"oid": "ab2c73b7988ff0f68195c9b9c06cff5c07d50c56", "url": "https://github.com/apache/druid/commit/ab2c73b7988ff0f68195c9b9c06cff5c07d50c56", "message": "docs", "committedDate": "2020-01-18T02:26:19Z", "type": "commit"}, {"oid": "7960b3c4a30b7bfb98501c073a3e66a2c3f6e1fb", "url": "https://github.com/apache/druid/commit/7960b3c4a30b7bfb98501c073a3e66a2c3f6e1fb", "message": "Merge remote-tracking branch 'upstream/master' into first-last-agg-null-handling", "committedDate": "2020-01-18T03:32:54Z", "type": "commit"}, {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0", "url": "https://github.com/apache/druid/commit/94c92b507aeb658adcb17e13a343125b2c926fd0", "message": "handle nil selectors, revert to primitive first/last types so groupby v1 works...", "committedDate": "2020-01-18T08:56:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwODQ4Ng==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368708486", "body": "looks like this is missing unit tests? Also javadocs since this is a utility that would be used by many other classes", "bodyText": "looks like this is missing unit tests? Also javadocs since this is a utility that would be used by many other classes", "bodyHTML": "<p dir=\"auto\">looks like this is missing unit tests? Also javadocs since this is a utility that would be used by many other classes</p>", "author": "suneet-s", "createdAt": "2020-01-20T20:01:41Z", "path": "core/src/main/java/org/apache/druid/collections/SerializablePair.java", "diffHunk": "@@ -45,4 +46,25 @@ public T2 getRhs()\n   {\n     return rhs;\n   }\n+\n+  public static <T1, T2> Comparator<SerializablePair<T1, T2>> createNullHandlingComparator(", "originalCommit": "94c92b507aeb658adcb17e13a343125b2c926fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4OTk2NQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368789965", "bodyText": "This is covered by calcite query tests that order by the first/last aggregators; afaik SerializedPair is only used by first/last despite it's generic name, to store a timestamp and value.", "author": "clintropolis", "createdAt": "2020-01-21T02:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwODQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxNzI0Mw==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368717243", "body": "Nice abstraction! \ud83c\udf89 \r\n\r\nnote to self: can the get call be abstracted into the base class?", "bodyText": "Nice abstraction! \ud83c\udf89\nnote to self: can the get call be abstracted into the base class?", "bodyHTML": "<p dir=\"auto\">Nice abstraction! <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png\">\ud83c\udf89</g-emoji></p>\n<p dir=\"auto\">note to self: can the get call be abstracted into the base class?</p>", "author": "suneet-s", "createdAt": "2020-01-20T20:34:04Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java", "diffHunk": "@@ -20,42 +20,29 @@\n package org.apache.druid.query.aggregation.first;\n \n import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n \n-public class DoubleFirstAggregator implements Aggregator\n+public class DoubleFirstAggregator extends NumericFirstAggregator<BaseDoubleColumnValueSelector>", "originalCommit": "94c92b507aeb658adcb17e13a343125b2c926fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4OTQ3NA==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368789474", "bodyText": "Not without boxing the primitive", "author": "clintropolis", "createdAt": "2020-01-21T02:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxNzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc5MDMyMA==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368790320", "bodyText": "Well, I guess that is going to happen anyway in making the pair.. so I guess maybe the on heap version of get could be shared, but not really possible for the buffer aggregator.", "author": "clintropolis", "createdAt": "2020-01-21T02:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxNzI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMDk5NQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368720995", "body": "It took me a long time to try and figure out what the comparator was used for. I got wrapped up in the fact that the aggregator was meant compare timestamps, that I didn't realize this was for ordering. I think a javadoc on  #`AggregatorFactory#getComparator` would have cleared up my confusion pretty quickly", "bodyText": "It took me a long time to try and figure out what the comparator was used for. I got wrapped up in the fact that the aggregator was meant compare timestamps, that I didn't realize this was for ordering. I think a javadoc on  #AggregatorFactory#getComparator would have cleared up my confusion pretty quickly", "bodyHTML": "<p dir=\"auto\">It took me a long time to try and figure out what the comparator was used for. I got wrapped up in the fact that the aggregator was meant compare timestamps, that I didn't realize this was for ordering. I think a javadoc on  #<code>AggregatorFactory#getComparator</code> would have cleared up my confusion pretty quickly</p>", "author": "suneet-s", "createdAt": "2020-01-20T20:48:15Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java", "diffHunk": "@@ -45,10 +46,34 @@\n import java.util.Map;\n import java.util.Objects;\n \n-public class DoubleFirstAggregatorFactory extends NullableNumericAggregatorFactory<ColumnValueSelector>\n+public class DoubleFirstAggregatorFactory extends AggregatorFactory\n {\n+  private static final Aggregator NIL_AGGREGATOR = new DoubleFirstAggregator(\n+      NilColumnValueSelector.instance(),\n+      NilColumnValueSelector.instance()\n+  )\n+  {\n+    @Override\n+    public void aggregate()\n+    {\n+      // no-op\n+    }\n+  };\n+\n+  private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new DoubleFirstBufferAggregator(\n+      NilColumnValueSelector.instance(),\n+      NilColumnValueSelector.instance()\n+  )\n+  {\n+    @Override\n+    public void aggregate(ByteBuffer buf, int position)\n+    {\n+      // no-op\n+    }\n+  };\n+\n   public static final Comparator<SerializablePair<Long, Double>> VALUE_COMPARATOR =\n-      Comparator.comparingDouble(o -> o.rhs);\n+      SerializablePair.createNullHandlingComparator(Double::compare, true);", "originalCommit": "94c92b507aeb658adcb17e13a343125b2c926fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjg4NQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368722885", "body": "Based on javadocs in `makeColumnValueSelector` this selector can be `NilColumnValueSelector`\r\n\r\nin which case `selector.getObject()` on line 170 would return null and line 171 would throw an NPE?\r\nsimilar comment for the `factorizeBuffered` method", "bodyText": "Based on javadocs in makeColumnValueSelector this selector can be NilColumnValueSelector\nin which case selector.getObject() on line 170 would return null and line 171 would throw an NPE?\nsimilar comment for the factorizeBuffered method", "bodyHTML": "<p dir=\"auto\">Based on javadocs in <code>makeColumnValueSelector</code> this selector can be <code>NilColumnValueSelector</code></p>\n<p dir=\"auto\">in which case <code>selector.getObject()</code> on line 170 would return null and line 171 would throw an NPE?<br>\nsimilar comment for the <code>factorizeBuffered</code> method</p>", "author": "suneet-s", "createdAt": "2020-01-20T20:55:37Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java", "diffHunk": "@@ -126,35 +158,54 @@ public AggregatorFactory getCombiningFactory()\n     return new DoubleFirstAggregatorFactory(name, name)\n     {\n       @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory, ColumnValueSelector selector)\n+      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n       {\n+        final ColumnValueSelector<SerializablePair<Long, Double>> selector =", "originalCommit": "94c92b507aeb658adcb17e13a343125b2c926fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4OTA4OQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368789089", "bodyText": "Since this is for combining, the selector will be of the serialized pair complex objects, which will not be null.", "author": "clintropolis", "createdAt": "2020-01-21T02:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyNzY0MQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368727641", "body": "it looks like these tests will only check `useDefaultValuesForNull = true` or is there some config I'm not seeing that sets it to `false` as well in another run?", "bodyText": "it looks like these tests will only check useDefaultValuesForNull = true or is there some config I'm not seeing that sets it to false as well in another run?", "bodyHTML": "<p dir=\"auto\">it looks like these tests will only check <code>useDefaultValuesForNull = true</code> or is there some config I'm not seeing that sets it to <code>false</code> as well in another run?</p>", "author": "suneet-s", "createdAt": "2020-01-20T21:14:01Z", "path": "processing/src/test/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregationTest.java", "diffHunk": "@@ -30,14 +30,16 @@\n import org.apache.druid.query.aggregation.TestObjectColumnSelector;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.column.ColumnHolder;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n import org.easymock.EasyMock;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.nio.ByteBuffer;\n+import java.util.Comparator;\n \n-public class DoubleFirstAggregationTest\n+public class DoubleFirstAggregationTest extends InitializedNullHandlingTest", "originalCommit": "94c92b507aeb658adcb17e13a343125b2c926fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4ODU5OQ==", "url": "https://github.com/apache/druid/pull/9161#discussion_r368788599", "bodyText": "travis runs tests in both modes, this is to let tests run in intellij which doesn't get initialized correctly", "author": "clintropolis", "createdAt": "2020-01-21T02:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyNzY0MQ=="}], "type": "inlineReview"}]}