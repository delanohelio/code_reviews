{"pr_number": 10117, "pr_title": "Closing yielder from ParallelMergeCombiningSequence should trigger cancellation", "pr_author": "clintropolis", "pr_createdAt": "2020-07-01T07:14:47Z", "pr_url": "https://github.com/apache/druid/pull/10117", "timeline": [{"oid": "4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "url": "https://github.com/apache/druid/commit/4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "message": "cancel parallel merge combine sequence on yielder close", "committedDate": "2020-07-01T06:40:06Z", "type": "commit"}, {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9", "url": "https://github.com/apache/druid/commit/9ea92e66fe75099f7b802266a27b4ef846018fc9", "message": "finish incomplete comment", "committedDate": "2020-07-01T06:44:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjc2OA==", "url": "https://github.com/apache/druid/pull/10117#discussion_r448502768", "body": "```suggestion\r\n    }\r\n    catch (RuntimeException rex) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (RuntimeException rex) {\n          \n          \n            \n                }\n          \n          \n            \n                catch (RuntimeException rex) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }<span class=\"x x-first\"> </span><span class=\"pl-k x\">catch</span><span class=\"x\"> (</span><span class=\"pl-smi x\">RuntimeException</span><span class=\"x x-last\"> rex) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">RuntimeException</span> rex) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jihoonson", "createdAt": "2020-07-01T17:09:08Z", "path": "core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java", "diffHunk": "@@ -611,6 +637,86 @@ private void assertResult(\n     Assert.assertEquals(0, pool.getRunningThreadCount());\n     combiningYielder.close();\n     parallelMergeCombineYielder.close();\n+    // cancellation trigger should not be set if sequence was fully yielded and close is called\n+    // (though shouldn't actually matter even if it was...)\n+    Assert.assertFalse(parallelMergeCombineSequence.getCancellationGizmo().isCancelled());\n+  }\n+\n+  private void assertResultWithEarlyClose(\n+      List<Sequence<IntPair>> sequences,\n+      int batchSize,\n+      int yieldAfter,\n+      int closeYielderAfter,\n+      Consumer<ParallelMergeCombiningSequence.MergeCombineMetrics> reporter\n+  )\n+      throws InterruptedException, IOException\n+  {\n+    final CombiningSequence<IntPair> combiningSequence = CombiningSequence.create(\n+        new MergeSequence<>(INT_PAIR_ORDERING, Sequences.simple(sequences)),\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN\n+    );\n+\n+    final ParallelMergeCombiningSequence<IntPair> parallelMergeCombineSequence = new ParallelMergeCombiningSequence<>(\n+        pool,\n+        sequences,\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN,\n+        true,\n+        5000,\n+        0,\n+        TEST_POOL_SIZE,\n+        yieldAfter,\n+        batchSize,\n+        ParallelMergeCombiningSequence.DEFAULT_TASK_TARGET_RUN_TIME_MILLIS,\n+        reporter\n+    );\n+\n+    Yielder<IntPair> combiningYielder = Yielders.each(combiningSequence);\n+    Yielder<IntPair> parallelMergeCombineYielder = Yielders.each(parallelMergeCombineSequence);\n+\n+    IntPair prev = null;\n+\n+    int yields = 0;\n+    while (!combiningYielder.isDone() && !parallelMergeCombineYielder.isDone()) {\n+      if (yields >= closeYielderAfter) {\n+        parallelMergeCombineYielder.close();\n+        combiningYielder.close();\n+        break;\n+      } else {\n+        yields++;\n+        Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+        Assert.assertNotEquals(parallelMergeCombineYielder.get(), prev);\n+        prev = parallelMergeCombineYielder.get();\n+        combiningYielder = combiningYielder.next(combiningYielder.get());\n+        parallelMergeCombineYielder = parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      }\n+    }\n+    // trying to next the yielder creates sadness for you\n+    final String expectedExceptionMsg = \"Already closed\";\n+    try {\n+      Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+      parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      // this should explode so the contradictory next statement should not be reached\n+      Assert.assertTrue(false);\n+    } catch (RuntimeException rex) {", "originalCommit": "9ea92e66fe75099f7b802266a27b4ef846018fc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6956a6447a80e5a05790d6912cb23e39230f943b", "url": "https://github.com/apache/druid/commit/6956a6447a80e5a05790d6912cb23e39230f943b", "message": "Update core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java\r\n\r\nFixes checkstyle", "committedDate": "2020-07-01T17:09:27Z", "type": "commit"}]}