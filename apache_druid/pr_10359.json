{"pr_number": 10359, "pr_title": "Add shuffle metrics for parallel indexing", "pr_author": "jihoonson", "pr_createdAt": "2020-09-04T23:32:33Z", "pr_url": "https://github.com/apache/druid/pull/10359", "timeline": [{"oid": "7e0fc0a9eda6a4e7bbfc391252567f1276127081", "url": "https://github.com/apache/druid/commit/7e0fc0a9eda6a4e7bbfc391252567f1276127081", "message": "Add shuffle metrics for parallel indexing", "committedDate": "2020-09-04T23:28:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NDg5Mg==", "url": "https://github.com/apache/druid/pull/10359#discussion_r484344892", "body": "should this be renamed to `snapshotAndReset` or may be just `reset` ?\r\n```\r\npublic Map<String, PerDatasourceShuffleMetrics> reset()\r\n{\r\n   return Collections.unmodifiableMap(datasourceMetrics.getAndSet(new ConcurrentHashMap<>()));\r\n}\r\n```", "bodyText": "should this be renamed to snapshotAndReset or may be just reset ?\npublic Map<String, PerDatasourceShuffleMetrics> reset()\n{\n   return Collections.unmodifiableMap(datasourceMetrics.getAndSet(new ConcurrentHashMap<>()));\n}", "bodyHTML": "<p dir=\"auto\">should this be renamed to <code>snapshotAndReset</code> or may be just <code>reset</code> ?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public Map&lt;String, PerDatasourceShuffleMetrics&gt; reset()\n{\n   return Collections.unmodifiableMap(datasourceMetrics.getAndSet(new ConcurrentHashMap&lt;&gt;()));\n}\n\"><pre><code>public Map&lt;String, PerDatasourceShuffleMetrics&gt; reset()\n{\n   return Collections.unmodifiableMap(datasourceMetrics.getAndSet(new ConcurrentHashMap&lt;&gt;()));\n}\n</code></pre></div>", "author": "abhishekagarwal87", "createdAt": "2020-09-07T10:31:35Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMetrics.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class ShuffleMetrics\n+{\n+  private final AtomicReference<ConcurrentHashMap<String, PerDatasourceShuffleMetrics>> datasourceMetrics =\n+      new AtomicReference<>();\n+\n+  public ShuffleMetrics()\n+  {\n+    datasourceMetrics.set(new ConcurrentHashMap<>());\n+  }\n+\n+  public void shuffleRequested(String supervisorTaskId, long fileLength)\n+  {\n+    datasourceMetrics\n+        .get()\n+        .computeIfAbsent(supervisorTaskId, k -> new PerDatasourceShuffleMetrics()).accumulate(fileLength);\n+  }\n+\n+  public Map<String, PerDatasourceShuffleMetrics> snapshot()", "originalCommit": "7e0fc0a9eda6a4e7bbfc391252567f1276127081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1MzE2MQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r485153161", "bodyText": "Sounds good. Changed to snapshotAndReset() since it sounds more intuitive to me.", "author": "jihoonson", "createdAt": "2020-09-08T19:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NDg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r484355184", "body": "it's still possible to miss an update in reporting because of race condition, right? Since the reference could be reset while the accumulation is happening. ", "bodyText": "it's still possible to miss an update in reporting because of race condition, right? Since the reference could be reset while the accumulation is happening.", "bodyHTML": "<p dir=\"auto\">it's still possible to miss an update in reporting because of race condition, right? Since the reference could be reset while the accumulation is happening.</p>", "author": "abhishekagarwal87", "createdAt": "2020-09-07T10:51:34Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMetrics.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class ShuffleMetrics\n+{\n+  private final AtomicReference<ConcurrentHashMap<String, PerDatasourceShuffleMetrics>> datasourceMetrics =\n+      new AtomicReference<>();\n+\n+  public ShuffleMetrics()\n+  {\n+    datasourceMetrics.set(new ConcurrentHashMap<>());\n+  }\n+\n+  public void shuffleRequested(String supervisorTaskId, long fileLength)\n+  {\n+    datasourceMetrics\n+        .get()\n+        .computeIfAbsent(supervisorTaskId, k -> new PerDatasourceShuffleMetrics()).accumulate(fileLength);", "originalCommit": "7e0fc0a9eda6a4e7bbfc391252567f1276127081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1Mzc3MA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r485153770", "bodyText": "The race condition exists, but it should be fine because the missing update should be included in the next call to snapshotAndReset(). I added javadocs explaining why.", "author": "jihoonson", "createdAt": "2020-09-08T19:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MTc0Ng==", "url": "https://github.com/apache/druid/pull/10359#discussion_r485371746", "bodyText": "I think this needs to use something like AtomicReference.getAndUpdate so that it isn't racy with the monitor/emitter? Though I'm not sure getAndUpdate or the similar methods are actually appropriate since they are supposed to be side-effect free, so I'm not really sure how exactly to resolve this.\nLike, the potentially problematic scenario I'm thinking of is where shuffleRequested is called \"before\" snapshotAndReset. It seems like once AtomicReference.get has completed, snapshotAndReset can proceed, so now the shuffle monitor has the same concurrent map we are still actively updating, and it is preparing to build the metrics to emit. It seems super unlikely that it would be a problem, but unless I'm missing something it does seem possible.", "author": "clintropolis", "createdAt": "2020-09-09T06:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NjMzOQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r485766339", "bodyText": "Ah, you guys are right. Will fix it.", "author": "jihoonson", "createdAt": "2020-09-09T16:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NTEzNA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r485795134", "bodyText": "The problem is that any updates on the reference to datasourceMetrics should be synchronized with any updates on the map itself and its values. I could use ConcurrentHashMap.compute() if I didn't have to reset the reference to the map when a snapshot is taken, but I think it's needed since the map can keep growing over time otherwise. I'm not sure if there is any other way than using a big lock. I made this change, let me know if you have a better idea.", "author": "jihoonson", "createdAt": "2020-09-09T17:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3NzAyOQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r486177029", "bodyText": "the lock should suffice. shuffleRequested doesn't need to be a high throughput call.", "author": "abhishekagarwal87", "createdAt": "2020-09-10T08:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTE4NA=="}], "type": "inlineReview"}, {"oid": "b73677ffa0dc9fa11639ceef35b952ae1a1d9dc1", "url": "https://github.com/apache/druid/commit/b73677ffa0dc9fa11639ceef35b952ae1a1d9dc1", "message": "javadoc and concurrency test", "committedDate": "2020-09-08T19:38:56Z", "type": "commit"}, {"oid": "fcd8cb2cff3333478f2af47340ade08550457ebd", "url": "https://github.com/apache/druid/commit/fcd8cb2cff3333478f2af47340ade08550457ebd", "message": "concurrency", "committedDate": "2020-09-09T17:25:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3NjIwMw==", "url": "https://github.com/apache/druid/pull/10359#discussion_r486176203", "body": "This comment needs an update after the latest changes. ", "bodyText": "This comment needs an update after the latest changes.", "bodyHTML": "<p dir=\"auto\">This comment needs an update after the latest changes.</p>", "author": "abhishekagarwal87", "createdAt": "2020-09-10T08:54:58Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMetrics.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Shuffle metrcis for middleManagers and indexers. This class is thread-safe because shuffle can be performed by\n+ * multiple HTTP threads while a monitoring thread periodically emits the snapshot of metrics.\n+ *\n+ * @see ShuffleResource\n+ * @see org.apache.druid.java.util.metrics.MonitorScheduler\n+ */\n+public class ShuffleMetrics\n+{\n+  /**\n+   * This lock is used to synchronize accesses to the reference to {@link #datasourceMetrics} and the\n+   * {@link PerDatasourceShuffleMetrics} values of the map. This means,\n+   *\n+   * - Any updates on PerDatasourceShuffleMetrics in the map (and thus its key) should be synchronized under this lock.\n+   * - Any updates on the reference to datasourceMetrics should be synchronized under this lock.\n+   */\n+  private final Object lock = new Object();\n+\n+  /**\n+   * A map of (datasource name) -> {@link PerDatasourceShuffleMetrics}. This map is replaced with an empty map\n+   * whenever a snapshot is taken since the map can keep growing over time otherwise. For concurrent access pattern,\n+   * see {@link #shuffleRequested} and {@link #snapshotAndReset()}.\n+   */\n+  @GuardedBy(\"lock\")\n+  private Map<String, PerDatasourceShuffleMetrics> datasourceMetrics = new HashMap<>();\n+\n+  /**\n+   * This method is called whenever a new shuffle is requested. Multiple tasks can request shuffle at the same time,\n+   * while the monitoring thread takes a snapshot of the metrics. There is a happens-before relationship between\n+   * shuffleRequested and {@link #snapshotAndReset()}.\n+   */\n+  public void shuffleRequested(String supervisorTaskId, long fileLength)\n+  {\n+    synchronized (lock) {\n+      datasourceMetrics.computeIfAbsent(supervisorTaskId, k -> new PerDatasourceShuffleMetrics())\n+                       .accumulate(fileLength);\n+    }\n+  }\n+\n+  /**\n+   * This method is called whenever the monitoring thread takes a snapshot of the current metrics. The map inside\n+   * AtomicReference will be reset to an empty map after this call. This is to return the snapshot metrics collected", "originalCommit": "fcd8cb2cff3333478f2af47340ade08550457ebd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MjcxMQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r486562711", "bodyText": "Good catch. Fixed.", "author": "jihoonson", "createdAt": "2020-09-10T18:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3NjIwMw=="}], "type": "inlineReview"}, {"oid": "bf23cbc0675e44afbb1ea7d9be4779779e53d45e", "url": "https://github.com/apache/druid/commit/bf23cbc0675e44afbb1ea7d9be4779779e53d45e", "message": "fix javadoc", "committedDate": "2020-09-10T18:48:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MTQ5MA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r492381490", "body": "Since there is a risk of the locking introducing a slow down here because of contention, can we update this to include a feature flag check?\r\n\r\nThis way, if there are some unforeseen issues with locking, we can disable metric computation and reporting. I think a static feature flag - like a system property would be good enough for this use case.", "bodyText": "Since there is a risk of the locking introducing a slow down here because of contention, can we update this to include a feature flag check?\nThis way, if there are some unforeseen issues with locking, we can disable metric computation and reporting. I think a static feature flag - like a system property would be good enough for this use case.", "bodyHTML": "<p dir=\"auto\">Since there is a risk of the locking introducing a slow down here because of contention, can we update this to include a feature flag check?</p>\n<p dir=\"auto\">This way, if there are some unforeseen issues with locking, we can disable metric computation and reporting. I think a static feature flag - like a system property would be good enough for this use case.</p>", "author": "suneet-s", "createdAt": "2020-09-21T22:28:30Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Shuffle metrcis for middleManagers and indexers. This class is thread-safe because shuffle can be performed by\n+ * multiple HTTP threads while a monitoring thread periodically emits the snapshot of metrics.\n+ *\n+ * @see ShuffleResource\n+ * @see org.apache.druid.java.util.metrics.MonitorScheduler\n+ */\n+public class ShuffleMetrics\n+{\n+  /**\n+   * This lock is used to synchronize accesses to the reference to {@link #datasourceMetrics} and the\n+   * {@link PerDatasourceShuffleMetrics} values of the map. This means,\n+   *\n+   * - Any updates on PerDatasourceShuffleMetrics in the map (and thus its key as well) should be synchronized\n+   * under this lock.\n+   * - Any updates on the reference to datasourceMetrics should be synchronized under this lock.\n+   */\n+  private final Object lock = new Object();\n+\n+  /**\n+   * A map of (datasource name) -> {@link PerDatasourceShuffleMetrics}. This map is replaced with an empty map\n+   * whenever a snapshot is taken since the map can keep growing over time otherwise. For concurrent access pattern,\n+   * see {@link #shuffleRequested} and {@link #snapshotAndReset()}.\n+   */\n+  @GuardedBy(\"lock\")\n+  private Map<String, PerDatasourceShuffleMetrics> datasourceMetrics = new HashMap<>();\n+\n+  /**\n+   * This method is called whenever a new shuffle is requested. Multiple tasks can request shuffle at the same time,\n+   * while the monitoring thread takes a snapshot of the metrics. There is a happens-before relationship between\n+   * shuffleRequested and {@link #snapshotAndReset()}.\n+   */\n+  public void shuffleRequested(String supervisorTaskId, long fileLength)\n+  {\n+    synchronized (lock) {", "originalCommit": "bf23cbc0675e44afbb1ea7d9be4779779e53d45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMjQ4MQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r500622481", "bodyText": "I don't think this locking would introduce any noticeable slow down, but feature flag sounds good. Now, ShuffleMetrics and ShuffleMonitor will work only when ShuffleMonitor is defined in druid.monitoring.monitors. Added some doc for that too.", "author": "jihoonson", "createdAt": "2020-10-06T22:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MTQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMTk5MA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502021990", "bodyText": "I like this approach a lot \ud83e\udd18", "author": "suneet-s", "createdAt": "2020-10-08T21:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MTQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MjAxMQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r492382011", "body": "Just curious - why did you choose to use the guarded by pattern instead of a ConcurrentMap?", "bodyText": "Just curious - why did you choose to use the guarded by pattern instead of a ConcurrentMap?", "bodyHTML": "<p dir=\"auto\">Just curious - why did you choose to use the guarded by pattern instead of a ConcurrentMap?</p>", "author": "suneet-s", "createdAt": "2020-09-21T22:29:58Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Shuffle metrcis for middleManagers and indexers. This class is thread-safe because shuffle can be performed by\n+ * multiple HTTP threads while a monitoring thread periodically emits the snapshot of metrics.\n+ *\n+ * @see ShuffleResource\n+ * @see org.apache.druid.java.util.metrics.MonitorScheduler\n+ */\n+public class ShuffleMetrics\n+{\n+  /**\n+   * This lock is used to synchronize accesses to the reference to {@link #datasourceMetrics} and the\n+   * {@link PerDatasourceShuffleMetrics} values of the map. This means,\n+   *\n+   * - Any updates on PerDatasourceShuffleMetrics in the map (and thus its key as well) should be synchronized\n+   * under this lock.\n+   * - Any updates on the reference to datasourceMetrics should be synchronized under this lock.\n+   */\n+  private final Object lock = new Object();\n+\n+  /**\n+   * A map of (datasource name) -> {@link PerDatasourceShuffleMetrics}. This map is replaced with an empty map\n+   * whenever a snapshot is taken since the map can keep growing over time otherwise. For concurrent access pattern,\n+   * see {@link #shuffleRequested} and {@link #snapshotAndReset()}.\n+   */\n+  @GuardedBy(\"lock\")", "originalCommit": "bf23cbc0675e44afbb1ea7d9be4779779e53d45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDMyNA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r500624324", "bodyText": "There was some prior discussion about it. It was mainly because not only updating the datasourceMetrics map, but also updating PerDatasourceShuffleMetrics should be synchronized as well. For example, if it was updating PerDatasourceShuffleMetrics when snapshotAndReset() is called, it should guarantee that the updating will be done before snapshotAndReset().", "author": "jihoonson", "createdAt": "2020-10-06T22:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MjAxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMTY2NA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502021664", "bodyText": "Ah - that makes sense. Thanks for the explanation", "author": "suneet-s", "createdAt": "2020-10-08T21:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MjAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mjk3Nw==", "url": "https://github.com/apache/druid/pull/10359#discussion_r492382977", "body": "other ingestion related metrics start with \"ingest/\" any thoughts on whether these metrics fall under the ingestion metrics category?\r\n\r\nI was thinking about where the metrics would live in the docs which is why I was asking this question. I thought maybe it belonged here https://druid.apache.org/docs/latest/operations/metrics.html#ingestion-metrics-realtime-process ?", "bodyText": "other ingestion related metrics start with \"ingest/\" any thoughts on whether these metrics fall under the ingestion metrics category?\nI was thinking about where the metrics would live in the docs which is why I was asking this question. I thought maybe it belonged here https://druid.apache.org/docs/latest/operations/metrics.html#ingestion-metrics-realtime-process ?", "bodyHTML": "<p dir=\"auto\">other ingestion related metrics start with \"ingest/\" any thoughts on whether these metrics fall under the ingestion metrics category?</p>\n<p dir=\"auto\">I was thinking about where the metrics would live in the docs which is why I was asking this question. I thought maybe it belonged here <a href=\"https://druid.apache.org/docs/latest/operations/metrics.html#ingestion-metrics-realtime-process\" rel=\"nofollow\">https://druid.apache.org/docs/latest/operations/metrics.html#ingestion-metrics-realtime-process</a> ?</p>", "author": "suneet-s", "createdAt": "2020-09-21T22:32:39Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMonitor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.indexing.worker.shuffle.ShuffleMetrics.PerDatasourceShuffleMetrics;\n+import org.apache.druid.java.util.emitter.service.ServiceEmitter;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent.Builder;\n+import org.apache.druid.java.util.metrics.AbstractMonitor;\n+\n+import java.util.Map;\n+\n+public class ShuffleMonitor extends AbstractMonitor\n+{\n+  private static final String SUPERVISOR_TASK_ID_DIMENSION = \"supervisorTaskId\";\n+  private static final String SHUFFLE_BYTES_KEY = \"shuffle/bytes\";\n+  private static final String SHUFFLE_REQUESTS_KEY = \"shuffle/requests\";", "originalCommit": "bf23cbc0675e44afbb1ea7d9be4779779e53d45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTQ4OA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r500621488", "bodyText": "Good question. The new metrics don't seem to belong to any existing section, so I added a new one. But our current doc doesn't seem organized well (for example, the metrics in the above link are not only for realtime processes, but for all task types as well), maybe we need to tidy up at some point after #10352 is done.", "author": "jihoonson", "createdAt": "2020-10-06T22:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mjk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTY3Mg==", "url": "https://github.com/apache/druid/pull/10359#discussion_r500621672", "bodyText": "Also, I modified the metrics to start with ingest/ similar to other ingestion metrics.", "author": "jihoonson", "createdAt": "2020-10-06T22:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mjk3Nw=="}], "type": "inlineReview"}, {"oid": "80b29498386881c112574aaec207af59b994c7ea", "url": "https://github.com/apache/druid/commit/80b29498386881c112574aaec207af59b994c7ea", "message": "Feature flag", "committedDate": "2020-10-06T21:48:58Z", "type": "commit"}, {"oid": "e258dd32d948b0f3276cd3e49051879d78732775", "url": "https://github.com/apache/druid/commit/e258dd32d948b0f3276cd3e49051879d78732775", "message": "doc", "committedDate": "2020-10-06T21:56:53Z", "type": "commit"}, {"oid": "e205c1df2e4e813938485435dd590b952bc14ca1", "url": "https://github.com/apache/druid/commit/e205c1df2e4e813938485435dd590b952bc14ca1", "message": "fix doc and add a test", "committedDate": "2020-10-06T22:55:12Z", "type": "commit"}, {"oid": "d70529d0f0d2a8dd305074aff5cfb7f3f4e8aa2f", "url": "https://github.com/apache/druid/commit/d70529d0f0d2a8dd305074aff5cfb7f3f4e8aa2f", "message": "checkstyle", "committedDate": "2020-10-07T00:04:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzE4Mg==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502023182", "body": "I see that `MonitorScheduler` has a `removeMonitor` method, and ShuffleMetrics is provided as a Singleton. Can someone remove the ShuffleMonitor while Druid is running? If they do that how would it impact ShuffleMetrics being reported", "bodyText": "I see that MonitorScheduler has a removeMonitor method, and ShuffleMetrics is provided as a Singleton. Can someone remove the ShuffleMonitor while Druid is running? If they do that how would it impact ShuffleMetrics being reported", "bodyHTML": "<p dir=\"auto\">I see that <code>MonitorScheduler</code> has a <code>removeMonitor</code> method, and ShuffleMetrics is provided as a Singleton. Can someone remove the ShuffleMonitor while Druid is running? If they do that how would it impact ShuffleMetrics being reported</p>", "author": "suneet-s", "createdAt": "2020-10-08T21:28:57Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleModule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import org.apache.druid.guice.Jerseys;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.java.util.metrics.MonitorScheduler;\n+\n+import java.util.Optional;\n+\n+public class ShuffleModule implements Module\n+{\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    Jerseys.addResource(binder, ShuffleResource.class);\n+  }\n+\n+  /**\n+   * {@link ShuffleMetrics} is used in {@link ShuffleResource} and {@link ShuffleMonitor} to collect metrics\n+   * and report them, respectively. Unlike ShuffleResource, ShuffleMonitor can be created via a user config\n+   * ({@link org.apache.druid.server.metrics.MonitorsConfig}) in potentially any node types, where it is not\n+   * possible to create ShuffleMetrics. This method checks the {@link MonitorScheduler} if ShuffleMonitor is\n+   * registered on it, and sets the proper ShuffleMetrics.\n+   */\n+  @Provides\n+  @LazySingleton\n+  public Optional<ShuffleMetrics> getShuffleMetrics(MonitorScheduler monitorScheduler)\n+  {\n+    // ShuffleMonitor cannot be registered dynamically, but can only via the static configuration (MonitorsConfig).\n+    // As a result, it is safe to check only one time if it is registered in MonitorScheduler.\n+    final Optional<ShuffleMonitor> maybeMonitor = monitorScheduler.findMonitor(ShuffleMonitor.class);", "originalCommit": "d70529d0f0d2a8dd305074aff5cfb7f3f4e8aa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0NTE1Mg==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502045152", "bodyText": "Currently, a monitor can be removed when 1) the monitor() method returns false or 2) tasks de-register task-specific monitors such as TaskRealtimeMetricsMonitor which is used in the deprecated Tranquility. So, ShuffleMonitor cannot be removed once a node is started.\nIn the future, I think we may want to dynamically register and remove monitors (because it's cool). In that case, we probably need to check all monitor implementations we have if they have any issues to do that. We can come back to ShuffleMonitor later to handle the case you mentioned.", "author": "jihoonson", "createdAt": "2020-10-08T22:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyMzMyMw==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502123323", "body": "Can you add a ModuleTest that validates the `ShuffleResource` and `Optional<ShuffleMetrics>`is injectable a. I think I've written `AuthorizerMapperModuleTest` that would be a similar example", "bodyText": "Can you add a ModuleTest that validates the ShuffleResource and Optional<ShuffleMetrics>is injectable a. I think I've written AuthorizerMapperModuleTest that would be a similar example", "bodyHTML": "<p dir=\"auto\">Can you add a ModuleTest that validates the <code>ShuffleResource</code> and <code>Optional&lt;ShuffleMetrics&gt;</code>is injectable a. I think I've written <code>AuthorizerMapperModuleTest</code> that would be a similar example</p>", "author": "suneet-s", "createdAt": "2020-10-09T01:27:25Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleModule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import org.apache.druid.guice.Jerseys;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.java.util.metrics.MonitorScheduler;\n+\n+import java.util.Optional;\n+\n+public class ShuffleModule implements Module\n+{\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    Jerseys.addResource(binder, ShuffleResource.class);", "originalCommit": "d70529d0f0d2a8dd305074aff5cfb7f3f4e8aa2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyNTMzNA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502125334", "body": "Should we add unit tests for this function?", "bodyText": "Should we add unit tests for this function?", "bodyHTML": "<p dir=\"auto\">Should we add unit tests for this function?</p>", "author": "suneet-s", "createdAt": "2020-10-09T01:36:51Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/worker/shuffle/ShuffleMonitor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import org.apache.druid.indexing.worker.shuffle.ShuffleMetrics.PerDatasourceShuffleMetrics;\n+import org.apache.druid.java.util.emitter.service.ServiceEmitter;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent.Builder;\n+import org.apache.druid.java.util.metrics.AbstractMonitor;\n+import org.checkerframework.checker.nullness.qual.MonotonicNonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import java.util.Map;\n+\n+public class ShuffleMonitor extends AbstractMonitor\n+{\n+  private static final String SUPERVISOR_TASK_ID_DIMENSION = \"supervisorTaskId\";\n+  private static final String SHUFFLE_BYTES_KEY = \"ingest/shuffle/bytes\";\n+  private static final String SHUFFLE_REQUESTS_KEY = \"ingest/shuffle/requests\";\n+\n+  /**\n+   * ShuffleMonitor can be instantiated in any node types if it is defined in\n+   * {@link org.apache.druid.server.metrics.MonitorsConfig}. Since {@link ShuffleMetrics} is defined\n+   * in the `indexing-service` module, some node types (such as broker) would fail to create it\n+   * if they don't have required dependencies. To avoid this problem, this variable is lazily initialized\n+   * only in the node types which has the {@link ShuffleModule}.\n+   */\n+  @MonotonicNonNull\n+  private ShuffleMetrics shuffleMetrics;\n+\n+  public void setShuffleMetrics(ShuffleMetrics shuffleMetrics)\n+  {\n+    this.shuffleMetrics = shuffleMetrics;\n+  }\n+\n+  @Nullable\n+  public ShuffleMetrics getShuffleMetrics()\n+  {\n+    return shuffleMetrics;\n+  }\n+\n+  @Override\n+  public boolean doMonitor(ServiceEmitter emitter)\n+  {\n+    if (shuffleMetrics != null) {\n+      final Map<String, PerDatasourceShuffleMetrics> snapshot = shuffleMetrics.snapshotAndReset();\n+      snapshot.forEach((supervisorTaskId, perDatasourceShuffleMetrics) -> {\n+        final Builder metricBuilder = ServiceMetricEvent\n+            .builder()\n+            .setDimension(SUPERVISOR_TASK_ID_DIMENSION, supervisorTaskId);\n+        emitter.emit(metricBuilder.build(SHUFFLE_BYTES_KEY, perDatasourceShuffleMetrics.getShuffleBytes()));\n+        emitter.emit(metricBuilder.build(SHUFFLE_REQUESTS_KEY, perDatasourceShuffleMetrics.getShuffleRequests()));\n+      });\n+    }\n+    return true;", "originalCommit": "d70529d0f0d2a8dd305074aff5cfb7f3f4e8aa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MzkwMw==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502193903", "bodyText": "Oops, I thought I added one already. Added now.", "author": "jihoonson", "createdAt": "2020-10-09T05:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyNTMzNA=="}], "type": "inlineReview"}, {"oid": "394b4734f01115d11279e38dd3594663bd78df4e", "url": "https://github.com/apache/druid/commit/394b4734f01115d11279e38dd3594663bd78df4e", "message": "add tests", "committedDate": "2020-10-09T05:16:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMDU1NA==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502500554", "body": "nit:\r\n\r\n```suggestion\r\n    Mockito.when(monitorScheduler.findMonitor(ShuffleMonitor.class))\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Mockito.when(monitorScheduler.findMonitor(ArgumentMatchers.eq(ShuffleMonitor.class)))\n          \n          \n            \n                Mockito.when(monitorScheduler.findMonitor(ShuffleMonitor.class))", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">Mockito</span><span class=\"pl-k\">.</span>when(monitorScheduler<span class=\"pl-k\">.</span>findMonitor(<span class=\"pl-smi x x-first\">ArgumentMatchers</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">eq(</span><span class=\"pl-smi\">ShuffleMonitor</span><span class=\"pl-k\">.</span>class<span class=\"x x-first x-last\">)</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">Mockito</span><span class=\"pl-k\">.</span>when(monitorScheduler<span class=\"pl-k\">.</span>findMonitor(<span class=\"pl-smi\">ShuffleMonitor</span><span class=\"pl-k\">.</span>class))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "suneet-s", "createdAt": "2020-10-09T15:14:47Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/worker/shuffle/ShuffleModuleTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Key;\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.java.util.metrics.MonitorScheduler;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mockito;\n+\n+import java.util.Optional;\n+\n+public class ShuffleModuleTest\n+{\n+  private ShuffleModule shuffleModule;\n+  private Injector injector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    shuffleModule = new ShuffleModule();\n+  }\n+\n+  @Test\n+  public void testGetShuffleMetricsWhenShuffleMonitorExists()\n+  {\n+    final ShuffleMonitor shuffleMonitor = new ShuffleMonitor();\n+    final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);\n+    Mockito.when(monitorScheduler.findMonitor(ArgumentMatchers.eq(ShuffleMonitor.class)))", "originalCommit": "394b4734f01115d11279e38dd3594663bd78df4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMTIwOQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502501209", "body": "nit: you can move this into a `@Before` method", "bodyText": "nit: you can move this into a @Before method", "bodyHTML": "<p dir=\"auto\">nit: you can move this into a <code>@Before</code> method</p>", "author": "suneet-s", "createdAt": "2020-10-09T15:15:48Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/worker/shuffle/ShuffleModuleTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.worker.shuffle;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Key;\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.java.util.metrics.MonitorScheduler;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mockito;\n+\n+import java.util.Optional;\n+\n+public class ShuffleModuleTest\n+{\n+  private ShuffleModule shuffleModule;\n+  private Injector injector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    shuffleModule = new ShuffleModule();\n+  }\n+\n+  @Test\n+  public void testGetShuffleMetricsWhenShuffleMonitorExists()\n+  {\n+    final ShuffleMonitor shuffleMonitor = new ShuffleMonitor();\n+    final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);\n+    Mockito.when(monitorScheduler.findMonitor(ArgumentMatchers.eq(ShuffleMonitor.class)))\n+           .thenReturn(Optional.of(shuffleMonitor));\n+    injector = Guice.createInjector(\n+        binder -> {\n+          binder.bindScope(LazySingleton.class, Scopes.SINGLETON);\n+          binder.bind(MonitorScheduler.class).toInstance(monitorScheduler);\n+          binder.bind(IntermediaryDataManager.class).toInstance(Mockito.mock(IntermediaryDataManager.class));\n+        },\n+        shuffleModule\n+    );", "originalCommit": "394b4734f01115d11279e38dd3594663bd78df4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYyMjg0MQ==", "url": "https://github.com/apache/druid/pull/10359#discussion_r502622841", "bodyText": "As monitorScheduler behaves differently in tests, I think it's better to make them in each test. I extracted other common codes as a util method.", "author": "jihoonson", "createdAt": "2020-10-09T19:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMTIwOQ=="}], "type": "inlineReview"}, {"oid": "23312bb1ff09302bae1169b2d99bf797b4295f19", "url": "https://github.com/apache/druid/commit/23312bb1ff09302bae1169b2d99bf797b4295f19", "message": "fix build and address comments", "committedDate": "2020-10-09T19:06:19Z", "type": "commit"}]}