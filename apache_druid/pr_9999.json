{"pr_number": 9999, "pr_title": "Optimize protobuf parsing for flatten data", "pr_author": "xhl0726", "pr_createdAt": "2020-06-08T04:10:51Z", "pr_url": "https://github.com/apache/druid/pull/9999", "timeline": [{"oid": "396826119a39fe8efa5bcfcea8274d50925796a8", "url": "https://github.com/apache/druid/commit/396826119a39fe8efa5bcfcea8274d50925796a8", "message": "optimize for protobuf parsing", "committedDate": "2020-06-08T02:37:52Z", "type": "commit"}, {"oid": "cccd904827ef7e08f3d043b7544ff6ba4d779a12", "url": "https://github.com/apache/druid/commit/cccd904827ef7e08f3d043b7544ff6ba4d779a12", "message": "fix import error and maven dependency", "committedDate": "2020-06-08T08:26:53Z", "type": "commit"}, {"oid": "a7e5e23f39cf2d2306b7647bca28bac04423bb34", "url": "https://github.com/apache/druid/commit/a7e5e23f39cf2d2306b7647bca28bac04423bb34", "message": "add unit test in protobufInputrowParserTest for flatten data", "committedDate": "2020-06-08T12:04:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyMzgyNg==", "url": "https://github.com/apache/druid/pull/9999#discussion_r439823826", "body": "I suggest refactoring these modifications to reduce code duplications.\r\n\r\n```suggestion\r\n    try {\r\n      DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\r\n    }\r\n    catch (InvalidProtocolBufferException ex) {\r\n      throw new ParseException(ex, \"Protobuf message could not be parsed\");\r\n    }\r\n\r\n    Map<String, Object> record;\r\n    if (parseSpec instanceof JSONParseSpec && ((JSONParseSpec) parseSpec).getFlattenSpec().getFields().isEmpty()) {\r\n      record = CollectionUtils.mapKeys(message.getAllFields(), k -> k.getJsonName());\r\n    } else {\r\n      String json = JsonFormat.printer().print(message);\r\n      record = parser.parseToMap(json);\r\n    }\r\n```", "bodyText": "I suggest refactoring these modifications to reduce code duplications.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> record;\n          \n          \n            \n            \n          \n          \n            \n                if (parseSpec instanceof JSONParseSpec && ((JSONParseSpec) parseSpec).getFlattenSpec().getFields().isEmpty()) {\n          \n          \n            \n                  try {\n          \n          \n            \n                    DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n          \n          \n            \n                    record = CollectionUtils.mapKeys(message.getAllFields(), k -> k.getJsonName());\n          \n          \n            \n                  }\n          \n          \n            \n                  catch (InvalidProtocolBufferException ex) {\n          \n          \n            \n                    throw new ParseException(ex, \"Protobuf message could not be parsed\");\n          \n          \n            \n                  }\n          \n          \n            \n                } else {\n          \n          \n            \n                  try {\n          \n          \n            \n                    DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n          \n          \n            \n                    String json = JsonFormat.printer().print(message);\n          \n          \n            \n                    record = parser.parseToMap(json);\n          \n          \n            \n                  }\n          \n          \n            \n                  catch (InvalidProtocolBufferException e) {\n          \n          \n            \n                    throw new ParseException(e, \"Protobuf message could not be parsed\");\n          \n          \n            \n                  }\n          \n          \n            \n                try {\n          \n          \n            \n                  DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n          \n          \n            \n                }\n          \n          \n            \n                catch (InvalidProtocolBufferException ex) {\n          \n          \n            \n                  throw new ParseException(ex, \"Protobuf message could not be parsed\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                Map<String, Object> record;\n          \n          \n            \n                if (parseSpec instanceof JSONParseSpec && ((JSONParseSpec) parseSpec).getFlattenSpec().getFields().isEmpty()) {\n          \n          \n            \n                  record = CollectionUtils.mapKeys(message.getAllFields(), k -> k.getJsonName());\n          \n          \n            \n                } else {\n          \n          \n            \n                  String json = JsonFormat.printer().print(message);\n          \n          \n            \n                  record = parser.parseToMap(json);\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">I suggest refactoring these modifications to reduce code duplications.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> record;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"107\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (parseSpec <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">JSONParseSpec</span> <span class=\"pl-k\">&amp;&amp;</span> ((<span class=\"pl-smi\">JSONParseSpec</span>) parseSpec)<span class=\"pl-k\">.</span>getFlattenSpec()<span class=\"pl-k\">.</span>getFields()<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"109\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DynamicMessage</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DynamicMessage</span><span class=\"pl-k\">.</span>parseFrom(descriptor, <span class=\"pl-smi\">ByteString</span><span class=\"pl-k\">.</span>copyFrom(input));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"110\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        record <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CollectionUtils</span><span class=\"pl-k\">.</span>mapKeys(message<span class=\"pl-k\">.</span>getAllFields(), k <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> k<span class=\"pl-k\">.</span>getJsonName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"111\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"112\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InvalidProtocolBufferException</span> ex) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"113\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParseException</span>(ex, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Protobuf message could not be parsed<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DynamicMessage</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DynamicMessage</span><span class=\"pl-k\">.</span>parseFrom(descriptor, <span class=\"pl-smi\">ByteString</span><span class=\"pl-k\">.</span>copyFrom(input));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> json <span class=\"pl-k\">=</span> <span class=\"pl-smi\">JsonFormat</span><span class=\"pl-k\">.</span>printer()<span class=\"pl-k\">.</span>print(message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        record <span class=\"pl-k\">=</span> parser<span class=\"pl-k\">.</span>parseToMap(json);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"120\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"121\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InvalidProtocolBufferException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"122\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParseException</span>(e, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Protobuf message could not be parsed<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"123\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">DynamicMessage</span> message <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DynamicMessage</span><span class=\"pl-k\">.</span>parseFrom(descriptor, <span class=\"pl-smi\">ByteString</span><span class=\"pl-k\">.</span>copyFrom(input));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"107\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InvalidProtocolBufferException</span> ex) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"109\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParseException</span>(ex, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Protobuf message could not be parsed<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"110\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"111\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"112\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> record;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"113\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (parseSpec <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">JSONParseSpec</span> <span class=\"pl-k\">&amp;&amp;</span> ((<span class=\"pl-smi\">JSONParseSpec</span>) parseSpec)<span class=\"pl-k\">.</span>getFlattenSpec()<span class=\"pl-k\">.</span>getFields()<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      record <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CollectionUtils</span><span class=\"pl-k\">.</span>mapKeys(message<span class=\"pl-k\">.</span>getAllFields(), k <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> k<span class=\"pl-k\">.</span>getJsonName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">String</span> json <span class=\"pl-k\">=</span> <span class=\"pl-smi\">JsonFormat</span><span class=\"pl-k\">.</span>printer()<span class=\"pl-k\">.</span>print(message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      record <span class=\"pl-k\">=</span> parser<span class=\"pl-k\">.</span>parseToMap(json);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "liran-funaro", "createdAt": "2020-06-14T12:15:53Z", "path": "extensions-core/protobuf-extensions/src/main/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParser.java", "diffHunk": "@@ -100,16 +102,27 @@ void initDescriptor()\n       parser = parseSpec.makeParser();\n       initDescriptor();\n     }\n-    String json;\n-    try {\n-      DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n-      json = JsonFormat.printer().print(message);\n-    }\n-    catch (InvalidProtocolBufferException e) {\n-      throw new ParseException(e, \"Protobuf message could not be parsed\");\n+    Map<String, Object> record;\n+\n+    if (parseSpec instanceof JSONParseSpec && ((JSONParseSpec) parseSpec).getFlattenSpec().getFields().isEmpty()) {\n+      try {\n+        DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n+        record = CollectionUtils.mapKeys(message.getAllFields(), k -> k.getJsonName());\n+      }\n+      catch (InvalidProtocolBufferException ex) {\n+        throw new ParseException(ex, \"Protobuf message could not be parsed\");\n+      }\n+    } else {\n+      try {\n+        DynamicMessage message = DynamicMessage.parseFrom(descriptor, ByteString.copyFrom(input));\n+        String json = JsonFormat.printer().print(message);\n+        record = parser.parseToMap(json);\n+      }\n+      catch (InvalidProtocolBufferException e) {\n+        throw new ParseException(e, \"Protobuf message could not be parsed\");\n+      }", "originalCommit": "a7e5e23f39cf2d2306b7647bca28bac04423bb34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDA2Mg==", "url": "https://github.com/apache/druid/pull/9999#discussion_r439824062", "body": "I don't think the benchmark class should have a main method. It seems useful for debugging, but I don't think it should exist in the master branch.", "bodyText": "I don't think the benchmark class should have a main method. It seems useful for debugging, but I don't think it should exist in the master branch.", "bodyHTML": "<p dir=\"auto\">I don't think the benchmark class should have a main method. It seems useful for debugging, but I don't think it should exist in the master branch.</p>", "author": "liran-funaro", "createdAt": "2020-06-14T12:19:36Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/ProtobufParserBenchmark.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.io.Files;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.data.input.InputRow;\n+import org.apache.druid.data.input.impl.DimensionsSpec;\n+import org.apache.druid.data.input.impl.JSONParseSpec;\n+import org.apache.druid.data.input.impl.ParseSpec;\n+import org.apache.druid.data.input.impl.StringDimensionSchema;\n+import org.apache.druid.data.input.impl.TimestampSpec;\n+import org.apache.druid.data.input.protobuf.ProtobufInputRowParser;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldSpec;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldType;\n+import org.apache.druid.java.util.common.parsers.JSONPathSpec;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 10)\n+@Measurement(iterations = 25)\n+public class ProtobufParserBenchmark\n+{\n+  @Param({\"75000\"})\n+  private int rowsPerSegment;\n+\n+  private static final Logger log = new Logger(ProtobufParserBenchmark.class);\n+\n+  static {\n+    NullHandling.initializeForTests();\n+  }\n+\n+  private ParseSpec nestedParseSpec;\n+  private ProtobufInputRowParser nestedParser;\n+  private ParseSpec flattenParseSpec;\n+  private ProtobufInputRowParser flattenParser;\n+  private byte[] protoInputs;\n+  private String protoFilePath;\n+\n+  @Setup\n+  public void setup()\n+  {\n+    log.info(\"SETUP CALLED AT \" + +System.currentTimeMillis());\n+\n+    nestedParseSpec = new JSONParseSpec(\n+                new TimestampSpec(\"timestamp\", \"iso\", null),\n+                new DimensionsSpec(Lists.newArrayList(\n+                        new StringDimensionSchema(\"event\"),\n+                        new StringDimensionSchema(\"id\"),\n+                        new StringDimensionSchema(\"someOtherId\"),\n+                        new StringDimensionSchema(\"isValid\")\n+                ), null, null),\n+                new JSONPathSpec(\n+                        true,\n+                        Lists.newArrayList(\n+                                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"eventType\", \"eventType\"),\n+                                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"foobar\", \"$.foo.bar\"),\n+                                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"bar0\", \"$.bar[0].bar\")\n+                        )\n+                ),\n+                null,\n+                null\n+    );\n+\n+    flattenParseSpec = new JSONParseSpec(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(Lists.newArrayList(\n+                    new StringDimensionSchema(\"event\"),\n+                    new StringDimensionSchema(\"id\"),\n+                    new StringDimensionSchema(\"someOtherId\"),\n+                    new StringDimensionSchema(\"isValid\")\n+            ), null, null),\n+            null,\n+            null,\n+            null\n+    );\n+\n+    protoFilePath = \"ProtoFile\";\n+    protoInputs = getProtoInputs(protoFilePath);\n+    nestedParser = new ProtobufInputRowParser(nestedParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n+    flattenParser = new ProtobufInputRowParser(flattenParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MICROSECONDS)\n+  public void consumeFlattenData(Blackhole blackhole)\n+  {\n+    for (int i = 0; i < rowsPerSegment; i++) {\n+      InputRow row = flattenParser.parseBatch(ByteBuffer.wrap(protoInputs)).get(0);\n+      blackhole.consume(row);\n+    }\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MICROSECONDS)\n+  public void consumeNestedData(Blackhole blackhole)\n+  {\n+    for (int i = 0; i < rowsPerSegment; i++) {\n+      InputRow row = nestedParser.parseBatch(ByteBuffer.wrap(protoInputs)).get(0);\n+      blackhole.consume(row);\n+    }\n+\n+  }\n+  private byte[] getProtoInputs(String fileName)\n+  {\n+    String filePath = this.getClass().getClassLoader().getResource(fileName).getPath();\n+    byte[] bytes = null;\n+    try {\n+      File file = new File(filePath);\n+      bytes = new byte[(int) file.length()];\n+      bytes = Files.toByteArray(file);\n+    }\n+    catch (FileNotFoundException e) {\n+      log.error(\"Cannot find the file: \" + filePath);\n+      e.printStackTrace();\n+    }\n+    catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+    return bytes;\n+  }\n+\n+  public static void main(String[] args) throws RunnerException\n+  {\n+    Options opt = new OptionsBuilder()\n+        .include(ProtobufParserBenchmark.class.getSimpleName())\n+        .build();\n+    new Runner(opt).run();", "originalCommit": "a7e5e23f39cf2d2306b7647bca28bac04423bb34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNjIwMQ==", "url": "https://github.com/apache/druid/pull/9999#discussion_r440216201", "bodyText": "Yes you're right~ It is just for debugging and should be removed.", "author": "xhl0726", "createdAt": "2020-06-15T14:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDQxMQ==", "url": "https://github.com/apache/druid/pull/9999#discussion_r439824411", "body": "I wonder what is the effect of `ByteBuffer.wrap()` on the measured performance.\r\nIs there a reason the wrapping is done inside the loop and not in the setup phase?", "bodyText": "I wonder what is the effect of ByteBuffer.wrap() on the measured performance.\nIs there a reason the wrapping is done inside the loop and not in the setup phase?", "bodyHTML": "<p dir=\"auto\">I wonder what is the effect of <code>ByteBuffer.wrap()</code> on the measured performance.<br>\nIs there a reason the wrapping is done inside the loop and not in the setup phase?</p>", "author": "liran-funaro", "createdAt": "2020-06-14T12:23:14Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/ProtobufParserBenchmark.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.io.Files;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.data.input.InputRow;\n+import org.apache.druid.data.input.impl.DimensionsSpec;\n+import org.apache.druid.data.input.impl.JSONParseSpec;\n+import org.apache.druid.data.input.impl.ParseSpec;\n+import org.apache.druid.data.input.impl.StringDimensionSchema;\n+import org.apache.druid.data.input.impl.TimestampSpec;\n+import org.apache.druid.data.input.protobuf.ProtobufInputRowParser;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldSpec;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldType;\n+import org.apache.druid.java.util.common.parsers.JSONPathSpec;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 10)\n+@Measurement(iterations = 25)\n+public class ProtobufParserBenchmark\n+{\n+  @Param({\"75000\"})\n+  private int rowsPerSegment;\n+\n+  private static final Logger log = new Logger(ProtobufParserBenchmark.class);\n+\n+  static {\n+    NullHandling.initializeForTests();\n+  }\n+\n+  private ParseSpec nestedParseSpec;\n+  private ProtobufInputRowParser nestedParser;\n+  private ParseSpec flattenParseSpec;\n+  private ProtobufInputRowParser flattenParser;\n+  private byte[] protoInputs;\n+  private String protoFilePath;\n+\n+  @Setup\n+  public void setup()\n+  {\n+    log.info(\"SETUP CALLED AT \" + +System.currentTimeMillis());\n+\n+    nestedParseSpec = new JSONParseSpec(\n+                new TimestampSpec(\"timestamp\", \"iso\", null),\n+                new DimensionsSpec(Lists.newArrayList(\n+                        new StringDimensionSchema(\"event\"),\n+                        new StringDimensionSchema(\"id\"),\n+                        new StringDimensionSchema(\"someOtherId\"),\n+                        new StringDimensionSchema(\"isValid\")\n+                ), null, null),\n+                new JSONPathSpec(\n+                        true,\n+                        Lists.newArrayList(\n+                                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"eventType\", \"eventType\"),\n+                                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"foobar\", \"$.foo.bar\"),\n+                                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"bar0\", \"$.bar[0].bar\")\n+                        )\n+                ),\n+                null,\n+                null\n+    );\n+\n+    flattenParseSpec = new JSONParseSpec(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(Lists.newArrayList(\n+                    new StringDimensionSchema(\"event\"),\n+                    new StringDimensionSchema(\"id\"),\n+                    new StringDimensionSchema(\"someOtherId\"),\n+                    new StringDimensionSchema(\"isValid\")\n+            ), null, null),\n+            null,\n+            null,\n+            null\n+    );\n+\n+    protoFilePath = \"ProtoFile\";\n+    protoInputs = getProtoInputs(protoFilePath);\n+    nestedParser = new ProtobufInputRowParser(nestedParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n+    flattenParser = new ProtobufInputRowParser(flattenParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MICROSECONDS)\n+  public void consumeFlattenData(Blackhole blackhole)\n+  {\n+    for (int i = 0; i < rowsPerSegment; i++) {\n+      InputRow row = flattenParser.parseBatch(ByteBuffer.wrap(protoInputs)).get(0);", "originalCommit": "a7e5e23f39cf2d2306b7647bca28bac04423bb34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTA2MQ==", "url": "https://github.com/apache/druid/pull/9999#discussion_r440221061", "bodyText": "Yeah your suggestion would make the loop clearer.  However, when I put the ByteBuffer.wrap() out of the loop, some parsing error occured. Since there is only one line in the input file ( I used the loop to monitor read many lines), the buffer would be empty after reading once. In another word, reading from a bytes.Buffer consumes the bytes that were read. This means if you try to read again, those will not be returned. When i = 0, it works. When i>0, it would report a parsing error due to the pos of the ByteBuffer allocated has been moved to the end. That's the reason why I put it in the loop. If you have any better solution to that, just tell me to make the loop easier to understand.", "author": "xhl0726", "createdAt": "2020-06-15T14:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MDk3Ng==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444750976", "bodyText": "I see. It makes sense. It could be solved by buff.pos(0), but since ByteBuffer.wrap() only instantiate a single object with O(1) complexity, I don't think it would make much of a difference.", "author": "liran-funaro", "createdAt": "2020-06-24T09:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDY4Ng==", "url": "https://github.com/apache/druid/pull/9999#discussion_r439824686", "body": "Is this logging necessary? It seems useful for debugging, but I don't think it should exist in the master branch.", "bodyText": "Is this logging necessary? It seems useful for debugging, but I don't think it should exist in the master branch.", "bodyHTML": "<p dir=\"auto\">Is this logging necessary? It seems useful for debugging, but I don't think it should exist in the master branch.</p>", "author": "liran-funaro", "createdAt": "2020-06-14T12:26:47Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/ProtobufParserBenchmark.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.io.Files;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.data.input.InputRow;\n+import org.apache.druid.data.input.impl.DimensionsSpec;\n+import org.apache.druid.data.input.impl.JSONParseSpec;\n+import org.apache.druid.data.input.impl.ParseSpec;\n+import org.apache.druid.data.input.impl.StringDimensionSchema;\n+import org.apache.druid.data.input.impl.TimestampSpec;\n+import org.apache.druid.data.input.protobuf.ProtobufInputRowParser;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldSpec;\n+import org.apache.druid.java.util.common.parsers.JSONPathFieldType;\n+import org.apache.druid.java.util.common.parsers.JSONPathSpec;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 10)\n+@Measurement(iterations = 25)\n+public class ProtobufParserBenchmark\n+{\n+  @Param({\"75000\"})\n+  private int rowsPerSegment;\n+\n+  private static final Logger log = new Logger(ProtobufParserBenchmark.class);\n+\n+  static {\n+    NullHandling.initializeForTests();\n+  }\n+\n+  private ParseSpec nestedParseSpec;\n+  private ProtobufInputRowParser nestedParser;\n+  private ParseSpec flattenParseSpec;\n+  private ProtobufInputRowParser flattenParser;\n+  private byte[] protoInputs;\n+  private String protoFilePath;\n+\n+  @Setup\n+  public void setup()\n+  {\n+    log.info(\"SETUP CALLED AT \" + +System.currentTimeMillis());", "originalCommit": "a7e5e23f39cf2d2306b7647bca28bac04423bb34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzMDM2OA==", "url": "https://github.com/apache/druid/pull/9999#discussion_r440230368", "bodyText": "Yes it can be removed. Thanks for pointing it out~", "author": "xhl0726", "createdAt": "2020-06-15T14:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNDY4Ng=="}], "type": "inlineReview"}, {"oid": "95df02f8681cb66b3a0392d8dab64522e6aa4249", "url": "https://github.com/apache/druid/commit/95df02f8681cb66b3a0392d8dab64522e6aa4249", "message": "solve code duplication (remove the log and main())", "committedDate": "2020-06-16T12:51:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MDU4OA==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444740588", "body": "nit: unnecessary println, though there are others in this test file prior to this change so no worries", "bodyText": "nit: unnecessary println, though there are others in this test file prior to this change so no worries", "bodyHTML": "<p dir=\"auto\">nit: unnecessary println, though there are others in this test file prior to this change so no worries</p>", "author": "clintropolis", "createdAt": "2020-06-24T08:46:12Z", "path": "extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java", "diffHunk": "@@ -177,6 +191,45 @@ public void testParse() throws Exception\n     Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n   }\n \n+  @Test\n+  public void testParseFlattenData() throws Exception\n+  {\n+    //configure parser with desc file\n+    ProtobufInputRowParser parser = new ProtobufInputRowParser(flattenParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n+\n+    //create binary of proto test event\n+    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n+    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n+            .setDescription(\"description\")\n+            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n+            .setId(4711L)\n+            .setIsValid(true)\n+            .setSomeOtherId(4712)\n+            .setTimestamp(dateTime.toString())\n+            .setSomeFloatColumn(47.11F)\n+            .setSomeIntColumn(815)\n+            .setSomeLongColumn(816L)\n+            .build();\n+\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    event.writeTo(out);\n+\n+    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n+    System.out.println(row);", "originalCommit": "95df02f8681cb66b3a0392d8dab64522e6aa4249", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MjkwNQ==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444742905", "body": "nit: should this be named `flatParseSpec` since it is for flat data and _will not_ flatten the data since it has a `null` flattenSpec?", "bodyText": "nit: should this be named flatParseSpec since it is for flat data and will not flatten the data since it has a null flattenSpec?", "bodyHTML": "<p dir=\"auto\">nit: should this be named <code>flatParseSpec</code> since it is for flat data and <em>will not</em> flatten the data since it has a <code>null</code> flattenSpec?</p>", "author": "clintropolis", "createdAt": "2020-06-24T08:49:59Z", "path": "extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java", "diffHunk": "@@ -76,6 +77,19 @@ public void setUp()\n         null\n     );\n \n+    flattenParseSpec = new JSONParseSpec(", "originalCommit": "95df02f8681cb66b3a0392d8dab64522e6aa4249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MjUyMA==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444792520", "bodyText": "yeah you're right.", "author": "xhl0726", "createdAt": "2020-06-24T10:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MzUzNw==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444743537", "body": "nit: same suggestion about naming, should this be `testParseFlatData` since it isn't actively flattening nested data?", "bodyText": "nit: same suggestion about naming, should this be testParseFlatData since it isn't actively flattening nested data?", "bodyHTML": "<p dir=\"auto\">nit: same suggestion about naming, should this be <code>testParseFlatData</code> since it isn't actively flattening nested data?</p>", "author": "clintropolis", "createdAt": "2020-06-24T08:51:00Z", "path": "extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java", "diffHunk": "@@ -177,6 +191,45 @@ public void testParse() throws Exception\n     Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n   }\n \n+  @Test\n+  public void testParseFlattenData() throws Exception", "originalCommit": "95df02f8681cb66b3a0392d8dab64522e6aa4249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5NjkxNw==", "url": "https://github.com/apache/druid/pull/9999#discussion_r444796917", "bodyText": "Your suggestion makes sense. I'll fix it soon.", "author": "xhl0726", "createdAt": "2020-06-24T10:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MzUzNw=="}], "type": "inlineReview"}, {"oid": "178191f0a45d24256952aeaa461929413e234c91", "url": "https://github.com/apache/druid/commit/178191f0a45d24256952aeaa461929413e234c91", "message": "rename 'flatten' to 'flat' to make it clearer", "committedDate": "2020-06-24T10:21:39Z", "type": "commit"}]}