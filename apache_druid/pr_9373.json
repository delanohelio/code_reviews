{"pr_number": 9373, "pr_title": "Fix join filter push down post-join virtual column handling", "pr_author": "jon-wei", "pr_createdAt": "2020-02-17T19:01:03Z", "pr_url": "https://github.com/apache/druid/pull/9373", "timeline": [{"oid": "9c5bdac9696dbcdd93f6ccf4d0696cbecc75d24f", "url": "https://github.com/apache/druid/commit/9c5bdac9696dbcdd93f6ccf4d0696cbecc75d24f", "message": "Fix join filter push down post-join virtual column handling", "committedDate": "2020-02-17T18:57:11Z", "type": "commit"}, {"oid": "2f35d40c2358f1d7039048e08dbaf815c24c5a7c", "url": "https://github.com/apache/druid/commit/2f35d40c2358f1d7039048e08dbaf815c24c5a7c", "message": "Remove unused adapter param, update javadocs", "committedDate": "2020-02-18T21:00:06Z", "type": "commit"}, {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "url": "https://github.com/apache/druid/commit/c6263ded2278ca509ee9bd7dc4647239fd837d8a", "message": "Fix TC", "committedDate": "2020-02-19T00:47:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381434255", "body": "missing unit tests for this in `HashJoinSegmentStorageAdapterTest`", "bodyText": "missing unit tests for this in HashJoinSegmentStorageAdapterTest", "bodyHTML": "<p dir=\"auto\">missing unit tests for this in <code>HashJoinSegmentStorageAdapterTest</code></p>", "author": "suneet-s", "createdAt": "2020-02-19T17:38:36Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n         preJoinVirtualColumns.add(virtualColumn);\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n+        baseColumns.add(virtualColumn.getOutputName());", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMDEzNA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381520134", "bodyText": "This case is covered by JoinFilterAnalyzerTest.test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn", "author": "jon-wei", "createdAt": "2020-02-19T20:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381437918", "body": "This is very similar to the code above in makeCursors(...) Perhaps move this into a utility function so they stay in sync. Or do you want this function to provide different functionality?", "bodyText": "This is very similar to the code above in makeCursors(...) Perhaps move this into a utility function so they stay in sync. Or do you want this function to provide different functionality?", "bodyHTML": "<p dir=\"auto\">This is very similar to the code above in makeCursors(...) Perhaps move this into a utility function so they stay in sync. Or do you want this function to provide different functionality?</p>", "author": "suneet-s", "createdAt": "2020-02-19T17:44:56Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting\n+  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  {\n+    final Set<String> baseColumns = new HashSet<>();\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n+\n+    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjIzMA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552230", "bodyText": "I initially wanted it to provide different functionality (where the non-testing version also adds virtual columns to the prejoin/postjoin lists), but I collapsed them into one method", "author": "jon-wei", "createdAt": "2020-02-19T21:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439193", "body": "nit: public functions marked `VisibleForTesting` are hard to maintain, because people can accidentally call this function from another package and there's nothing that warns them they're doing something wrong.\r\n\r\nI also noticed this function is only called in a test, can we refactor this so that we don't need a public VisibleForTesting function", "bodyText": "nit: public functions marked VisibleForTesting are hard to maintain, because people can accidentally call this function from another package and there's nothing that warns them they're doing something wrong.\nI also noticed this function is only called in a test, can we refactor this so that we don't need a public VisibleForTesting function", "bodyHTML": "<p dir=\"auto\">nit: public functions marked <code>VisibleForTesting</code> are hard to maintain, because people can accidentally call this function from another package and there's nothing that warns them they're doing something wrong.</p>\n<p dir=\"auto\">I also noticed this function is only called in a test, can we refactor this so that we don't need a public VisibleForTesting function</p>", "author": "suneet-s", "createdAt": "2020-02-19T17:47:07Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjQ0Mg==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552442", "bodyText": "I collapsed this into a shared method with the block in makeCursors and removed VisibleForTesting", "author": "jon-wei", "createdAt": "2020-02-19T21:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTQxNA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439414", "body": "\ud83d\udc4d ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "suneet-s", "createdAt": "2020-02-19T17:47:29Z", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -72,8 +72,21 @@\n   private static final String PUSH_DOWN_VIRTUAL_COLUMN_NAME_BASE = \"JOIN-FILTER-PUSHDOWN-VIRTUAL-COLUMN-\";\n   private static final ColumnSelectorFactory ALL_NULL_COLUMN_SELECTOR_FACTORY = new AllNullColumnSelectorFactory();\n \n+  /**\n+   * Analyze a filter and return a JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   * and post-join.\n+   *\n+   * @param hashJoinSegmentStorageAdapter The storage adapter that is being queried\n+   * @param baseColumnNames               Set of names of columns that belong to the base table,\n+   *                                      including pre-join virtual columns\n+   * @param originalFilter                Original filter from the query\n+   * @param enableFilterPushDown          Whether to enable filter push down\n+   * @return A JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   *         and post-join.\n+   */", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381441892", "body": "what happens if one of the required columns is a virtual column?", "bodyText": "what happens if one of the required columns is a virtual column?", "bodyHTML": "<p dir=\"auto\">what happens if one of the required columns is a virtual column?</p>", "author": "suneet-s", "createdAt": "2020-02-19T17:52:00Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjkxMQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552911", "bodyText": "Virtual columns currently can't use other virtual columns as input (they're each constructed independently from the base columns), if you tried I think it would just operate as if you referenced a non-existent column", "author": "jon-wei", "createdAt": "2020-02-19T21:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MzA3MQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381443071", "body": "```suggestion\r\n        if (!baseColumnNames.containsAll(requiredBindings)) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {\n          \n          \n            \n                    if (!baseColumnNames.containsAll(requiredBindings)) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"x x-first\">requiredBindings</span><span class=\"pl-k x\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">allMatch(requiredBinding </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>baseColumnNames<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">contains(requiredBinding)</span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>baseColumnNames<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">containsAll(requiredBindings</span>)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "suneet-s", "createdAt": "2020-02-19T17:54:01Z", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -538,18 +562,18 @@ private static void getCorrelationForRHSColumn(\n         // We push down if the function only requires base table columns\n         Expr.BindingDetails bindingDetails = lhsExpr.analyzeInputs();\n         Set<String> requiredBindings = bindingDetails.getRequiredBindings();\n-        if (!requiredBindings.stream().allMatch(requiredBinding -> adapter.isBaseColumn(requiredBinding))) {\n+        if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64a79ae99660a5b42f9d6aaa065aafcde2716c48", "url": "https://github.com/apache/druid/commit/64a79ae99660a5b42f9d6aaa065aafcde2716c48", "message": "Update processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java\n\nCo-Authored-By: Suneet Saldanha <44787917+suneet-s@users.noreply.github.com>", "committedDate": "2020-02-19T20:18:01Z", "type": "commit"}, {"oid": "73891167d767d76095b7b5172b8b74508b56c7d1", "url": "https://github.com/apache/druid/commit/73891167d767d76095b7b5172b8b74508b56c7d1", "message": "Address PR comments", "committedDate": "2020-02-19T21:21:32Z", "type": "commit"}, {"oid": "b3edd512067ca207f5c422d661c6cef6bfdcdee0", "url": "https://github.com/apache/druid/commit/b3edd512067ca207f5c422d661c6cef6bfdcdee0", "message": "Merge branch 'fix_join_virtcolumn' of github.com:jon-wei/druid into fix_join_virtcolumn", "committedDate": "2020-02-19T21:21:59Z", "type": "commit"}]}