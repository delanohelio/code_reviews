{"pr_number": 3274, "pr_title": "SONARJAVA-3617 S1170 should not raise an issue when the initializer contains \"this\" or \"super\"", "pr_author": "quentin-jaquier-sonarsource", "pr_createdAt": "2020-11-16T14:20:55Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3274", "timeline": [{"oid": "9a2f70ffa33a2085d7766718198a9ff109492016", "url": "https://github.com/SonarSource/sonar-java/commit/9a2f70ffa33a2085d7766718198a9ff109492016", "message": "SONARJAVA-3617 S1170 raises should not raise an issue when the initializer contains \"this\" or \"super\"", "committedDate": "2020-11-16T15:26:58Z", "type": "commit"}, {"oid": "9a2f70ffa33a2085d7766718198a9ff109492016", "url": "https://github.com/SonarSource/sonar-java/commit/9a2f70ffa33a2085d7766718198a9ff109492016", "message": "SONARJAVA-3617 S1170 raises should not raise an issue when the initializer contains \"this\" or \"super\"", "committedDate": "2020-11-16T15:26:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjE0Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525012143", "body": "Would be nice to extract it to a separate method. And combine these 2 conditions using `Predicate.or()` if possible.", "bodyText": "Would be nice to extract it to a separate method. And combine these 2 conditions using Predicate.or() if possible.", "bodyHTML": "<p dir=\"auto\">Would be nice to extract it to a separate method. And combine these 2 conditions using <code>Predicate.or()</code> if possible.</p>", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-17T09:37:22Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "diffHunk": "@@ -96,7 +96,14 @@ private static boolean hasConstantInitializer(VariableTree variableTree) {\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildrenOfKind((JavaTree) init, Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+      return !containsChildMatchingPredicate((JavaTree) init, tree -> {\n+          if (tree.is(Tree.Kind.IDENTIFIER)) {", "originalCommit": "9a2f70ffa33a2085d7766718198a9ff109492016", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a021418f35c33db92434807058948e99750d23e", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\nindex cc7bf68a7..338c04435 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\n", "chunk": "@@ -96,14 +96,20 @@ public class ConstantsShouldBeStaticFinalCheck extends IssuableSubscriptionVisit\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildMatchingPredicate((JavaTree) init, tree -> {\n-          if (tree.is(Tree.Kind.IDENTIFIER)) {\n-            String name = ((IdentifierTree) tree).name();\n-            return \"super\".equals(name) || \"this\".equals(name);\n-          }\n-          return tree.is(Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n-        }\n-      );\n+      return !containsChildMatchingPredicate((JavaTree) init,\n+        ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isIgnoredKind(Tree tree) {\n+    return tree.is(Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+  }\n+\n+  private static boolean isThisOrSuper(Tree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      String name = ((IdentifierTree) tree).name();\n+      return \"super\".equals(name) || \"this\".equals(name);\n     }\n     return false;\n   }\n", "next_change": null}]}}, {"oid": "7a021418f35c33db92434807058948e99750d23e", "url": "https://github.com/SonarSource/sonar-java/commit/7a021418f35c33db92434807058948e99750d23e", "message": "Extract methods and use predicate.or", "committedDate": "2020-11-17T10:42:54Z", "type": "commit"}, {"oid": "d2b535f9753ed608975353c760e6bfaea0003896", "url": "https://github.com/SonarSource/sonar-java/commit/d2b535f9753ed608975353c760e6bfaea0003896", "message": "Migrate test file in compiled module for S1170", "committedDate": "2020-11-17T11:21:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDU3Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525110576", "body": "Looks like my suggestion was not that elegant. For me it will be more readable to use lambda. \r\n```suggestion\r\n        (tree -> isIgnoredKind(tree) || isThisOrSuper(tree)));\r\n```", "bodyText": "Looks like my suggestion was not that elegant. For me it will be more readable to use lambda.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));\n          \n          \n            \n                    (tree -> isIgnoredKind(tree) || isThisOrSuper(tree)));", "bodyHTML": "<p dir=\"auto\">Looks like my suggestion was not that elegant. For me it will be more readable to use lambda.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        (<span class=\"x x-first\">(</span><span class=\"pl-k\"><span class=\"x\">Predicate&lt;</span><span class=\"pl-smi x\">Tree</span><span class=\"x\">&gt;</span></span><span class=\"x\">) </span><span class=\"pl-smi x\">ConstantsShouldBeStaticFinalCheck</span><span class=\"pl-k x x-last\">::</span>isIgnoredKind<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x\">or(</span><span class=\"pl-smi x\">ConstantsShouldBeStaticFinalCheck</span><span class=\"pl-k x x-last\">::</span>isThisOrSuper));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        (<span class=\"x x-first\">tree </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>isIgnoredKind<span class=\"x x-first\">(tree) </span><span class=\"pl-k x\">||</span><span class=\"x x-last\"> </span>isThisOrSuper<span class=\"x x-first x-last\">(tree)</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-17T12:17:58Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "diffHunk": "@@ -96,7 +96,20 @@ private static boolean hasConstantInitializer(VariableTree variableTree) {\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildrenOfKind((JavaTree) init, Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+      return !containsChildMatchingPredicate((JavaTree) init,\n+        ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));", "originalCommit": "d2b535f9753ed608975353c760e6bfaea0003896", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMjUyMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525132522", "bodyText": "Of course, thanks!", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-11-17T12:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "acee354242c0fa5a3cdabd2769617c861d2a3a68", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\nindex 338c04435..14fce0d18 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\n", "chunk": "@@ -97,7 +97,7 @@ public class ConstantsShouldBeStaticFinalCheck extends IssuableSubscriptionVisit\n         return false;\n       }\n       return !containsChildMatchingPredicate((JavaTree) init,\n-        ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));\n+        (tree -> isIgnoredKind(tree) || isThisOrSuper(tree)));\n     }\n     return false;\n   }\n", "next_change": null}]}}, {"oid": "acee354242c0fa5a3cdabd2769617c861d2a3a68", "url": "https://github.com/SonarSource/sonar-java/commit/acee354242c0fa5a3cdabd2769617c861d2a3a68", "message": "Update java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java\n\nCo-authored-by: margarita-nedzelska-sonarsource <70522623+margarita-nedzelska-sonarsource@users.noreply.github.com>", "committedDate": "2020-11-17T12:56:22Z", "type": "commit"}]}