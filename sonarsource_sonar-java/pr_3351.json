{"pr_number": 3351, "pr_title": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "pr_author": "dorian-burihabwa-sonarsource", "pr_createdAt": "2020-12-14T15:11:24Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3351", "timeline": [{"oid": "ee42f436b58ce3196bf72f3ae03aadd33b79e716", "url": "https://github.com/SonarSource/sonar-java/commit/ee42f436b58ce3196bf72f3ae03aadd33b79e716", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "committedDate": "2020-12-14T15:31:30Z", "type": "forcePushed"}, {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af", "url": "https://github.com/SonarSource/sonar-java/commit/8b51cb43804841a7fd32aa713ff69b41926266af", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules", "committedDate": "2020-12-14T17:52:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4ODg0Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543188846", "body": "```suggestion\r\n      if (!usages.isEmpty()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (usages.size() > 1) {\n          \n          \n            \n                  if (!usages.isEmpty()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (usages<span class=\"pl-k\">.</span><span class=\"x x-first\">size() </span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">1</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first x-last\">!</span>usages<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isEmpty()</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T09:38:20Z", "path": "java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -110,12 +113,31 @@ public void visitConditionalExpression(ConditionalExpressionTree tree) {\n   private boolean isSafeBooleanExpression(ExpressionTree tree) {\n     ExpressionTree boxedBoolean = findBoxedBoolean(tree);\n     if (boxedBoolean != null) {\n+      // The rule is relaxed if the first usage of the variable is a test against nullness.\n+      // A more thorough approach would require tracing all possible paths to lookup the test using symbolic execution.\n+      if (isFirstUsageANullCheck(boxedBoolean)) {\n+        return true;\n+      }\n       context.reportIssue(this, boxedBoolean, \"Use the primitive boolean expression here.\");\n       return false;\n     }\n     return true;\n   }\n \n+  private static boolean isFirstUsageANullCheck(ExpressionTree boxedBoolean) {\n+    if (boxedBoolean.is(Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) boxedBoolean;\n+      List<IdentifierTree> usages = identifier.symbol().usages();\n+      if (usages.size() > 1) {", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218165", "body": "I think this code should not be compliant, cause it's producing NPE", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "bodyHTML": "<p dir=\"auto\">I think this code should not be compliant, cause it's producing NPE</p>", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:18:59Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NTkwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543245900", "bodyText": "The problem with this specific case and the one that follows, at lines 363-364, stems from the fact that the example is not very realistic:  this code is written to crash.\nHowever, if the test against null was followed by an early return, the code would be valid.\nWithout changing the logic of the check, I can rewrite the example to be more realistic.\nOtherwise, we would have to change the logic of the check and look into symbolic execution to distinguish a good test from a bad one.\nWDYT?", "author": "dorian-burihabwa-sonarsource", "createdAt": "2020-12-15T10:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3OTM4OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543279389", "bodyText": "Yep, I see you wanted to cover early returns, but this is actually a SE job, and as we discussed we can return to it later. The thing I'm afraid of is when we're relaxing check for early returns we might introduce some FNs, which is tricky.\nSo, the simple solution could be:\njust add additional test cases with TP, and these ones mark as known FN, which we're going to remove in the future.\nOr:\nOne more possible solution is to check early returns, that the last statement inside null check is actually return. So we will cover early returns and won't introduce these new FN", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T11:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5MzExMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543393111", "bodyText": "I will go with you first suggestion then and add tests with TP and mark those with FN.", "author": "dorian-burihabwa-sonarsource", "createdAt": "2020-12-15T14:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODQzNw==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218437", "body": "I think this code should not be compliant, cause it's producing NPE ", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "bodyHTML": "<p dir=\"auto\">I think this code should not be compliant, cause it's producing NPE</p>", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:19:20Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n+    }\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDkxMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543220911", "body": "I think you don't need to use <code>getCustomNonNull()</code>, but sth like <code>customNullable</code> because the main reason to use @NonNull annotations is to get rid of null checks. And I think the cases with annotation are already covered.", "bodyText": "I think you don't need to use getCustomNonNull(), but sth like customNullable because the main reason to use @nonnull annotations is to get rid of null checks. And I think the cases with annotation are already covered.", "bodyHTML": "<p dir=\"auto\">I think you don't need to use <code>getCustomNonNull()</code>, but sth like <code>customNullable</code> because the main reason to use <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nonnull/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nonnull\">@nonnull</a> annotations is to get rid of null checks. And I think the cases with annotation are already covered.</p>", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:22:45Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMzAyNA==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543223024", "body": "I will also suggest adding more test cases:\r\n\r\n- where condition is in else branch\r\n\r\n-  where there are other usages of checked variable\r\n\r\n- when the tested variable is actually null\r\n\r\n-  etc.", "bodyText": "I will also suggest adding more test cases:\n\n\nwhere condition is in else branch\n\n\nwhere there are other usages of checked variable\n\n\nwhen the tested variable is actually null\n\n\netc.", "bodyHTML": "<p dir=\"auto\">I will also suggest adding more test cases:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">where condition is in else branch</p>\n</li>\n<li>\n<p dir=\"auto\">where there are other usages of checked variable</p>\n</li>\n<li>\n<p dir=\"auto\">when the tested variable is actually null</p>\n</li>\n<li>\n<p dir=\"auto\">etc.</p>\n</li>\n</ul>", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:25:36Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d31efc3f5be969324c242d81d54685448efa2d89", "url": "https://github.com/SonarSource/sonar-java/commit/d31efc3f5be969324c242d81d54685448efa2d89", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "08e140bca87ada7a105c43b2c8d1901310ad18bc", "url": "https://github.com/SonarSource/sonar-java/commit/08e140bca87ada7a105c43b2c8d1901310ad18bc", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "url": "https://github.com/SonarSource/sonar-java/commit/a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "message": "SONARJAVA-3570 Pull request fixes", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives", "committedDate": "2020-12-16T11:46:34Z", "type": "commit"}, {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives", "committedDate": "2020-12-16T11:46:34Z", "type": "forcePushed"}]}