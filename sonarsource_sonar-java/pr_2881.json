{"pr_number": 2881, "pr_title": "SONARJAVA-2941 RSPEC-3740 Generic types shouldn't be used raw", "pr_author": "m-g-sonar", "pr_createdAt": "2020-03-19T14:53:11Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2881", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1ODUwOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2881#discussion_r395558509", "body": "It would be nice to add a test with nested generics. E.g. of FN: `Metric` is a raw generic but there's a false-negative in `implements Function<Metric, String>` here:\r\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/computation/task/projectanalysis/step/LoadMeasureComputersStep.java#L153\r\n\r\nIt would be great to add test cases with method parameters. And to support exclusions of issues on return type and parameters of overridden methods (`methodSymbol.overriddenSymbol() != null`, I'm not sure we need to check `@Override` annotations). Like this false-positive:\r\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/issue/IssuesFinderSort.java#L88\r\n", "bodyText": "It would be nice to add a test with nested generics. E.g. of FN: Metric is a raw generic but there's a false-negative in implements Function<Metric, String> here:\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/computation/task/projectanalysis/step/LoadMeasureComputersStep.java#L153\nIt would be great to add test cases with method parameters. And to support exclusions of issues on return type and parameters of overridden methods (methodSymbol.overriddenSymbol() != null, I'm not sure we need to check @Override annotations). Like this false-positive:\nhttps://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/issue/IssuesFinderSort.java#L88", "bodyHTML": "<p dir=\"auto\">It would be nice to add a test with nested generics. E.g. of FN: <code>Metric</code> is a raw generic but there's a false-negative in <code>implements Function&lt;Metric, String&gt;</code> here:<br>\n<a href=\"https://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/computation/task/projectanalysis/step/LoadMeasureComputersStep.java#L153\">https://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/computation/task/projectanalysis/step/LoadMeasureComputersStep.java#L153</a></p>\n<p dir=\"auto\">It would be great to add test cases with method parameters. And to support exclusions of issues on return type and parameters of overridden methods (<code>methodSymbol.overriddenSymbol() != null</code>, I'm not sure we need to check <code>@Override</code> annotations). Like this false-positive:<br>\n<a href=\"https://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/issue/IssuesFinderSort.java#L88\">https://github.com/SonarSource/ruling_java/blob/7f4b47c9f013c5997f138ddc6e4f916cc7763476/sonarqube-6.5/server/sonar-server/src/main/java/org/sonar/server/issue/IssuesFinderSort.java#L88</a></p>", "author": "alban-auzeill", "createdAt": "2020-03-20T10:48:24Z", "path": "java-checks-test-sources/src/main/java/checks/RawTypeCheck.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package checks;\n+\n+import java.util.Optional;\n+\n+public class RawTypeCheck {\n+\n+  void foo() {\n+    GenericClass v; // Noncompliant [[sc=5;ec=17]] {{Provide the parametrized type for this generic.}}\n+    v = new GenericClass(); // Noncompliant [[sc=13;ec=25]] {{Provide the parametrized type for this generic.}}\n+    v = new RawTypeCheck.GenericClass(); // Noncompliant [[sc=26;ec=38]]\n+\n+    v = new GenericClass<>(); // Compliant\n+    v = new GenericClass<String>(); // Compliant\n+\n+    RawTypeCheck t;\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    Optional o2; // Noncompliant - should be handled by SONARJAVA-2410 and filtered out\n+    Optional<String> o1 = Optional.empty(); // Compliant\n+  }\n+\n+  GenericClass bar() { return null; } // Noncompliant\n+\n+  static class GenericClass<T> { }\n+  interface GenericInterface<T> { }\n+\n+  static class InnerClass1 extends GenericClass { } // Noncompliant [[sc=36;ec=48]] {{Provide the parametrized type for this generic.}}\n+  static class InnerClass2 implements GenericInterface { } // Noncompliant [[sc=39;ec=55]] {{Provide the parametrized type for this generic.}}\n+  enum InnerEnum implements GenericInterface { } // Noncompliant [[sc=29;ec=45]]\n+}", "originalCommit": "b852a82e3e3a95f11a0ec862b63b294cc229b316", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8cd7c25a743ce01657b02d2da9fd1c5f4c4e6463", "url": "https://github.com/SonarSource/sonar-java/commit/8cd7c25a743ce01657b02d2da9fd1c5f4c4e6463", "message": "SONARJAVA-2941 RSPEC-3740 Generic types shouldn't be used raw", "committedDate": "2020-03-24T09:41:33Z", "type": "commit"}, {"oid": "6300cb5f5af5fc720e2c47f1c1793d246a7c837f", "url": "https://github.com/SonarSource/sonar-java/commit/6300cb5f5af5fc720e2c47f1c1793d246a7c837f", "message": "SONARJAVA-2941 Add results of the ruling", "committedDate": "2020-03-24T09:41:33Z", "type": "commit"}, {"oid": "8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "url": "https://github.com/SonarSource/sonar-java/commit/8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "message": "Handle feedback from review", "committedDate": "2020-03-24T09:41:34Z", "type": "commit"}, {"oid": "8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "url": "https://github.com/SonarSource/sonar-java/commit/8457c9e6a74b0c2553841ea6cf9ebe03a155cc91", "message": "Handle feedback from review", "committedDate": "2020-03-24T09:41:34Z", "type": "forcePushed"}]}