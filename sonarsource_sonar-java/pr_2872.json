{"pr_number": 2872, "pr_title": "SONARJAVA-2357 Provide MethodMatcher API to be used in custom rules", "pr_author": "alban-auzeill", "pr_createdAt": "2020-03-10T17:41:08Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2872", "timeline": [{"oid": "91d2ff2be5c7677f2e1042452b8ab457f1d35917", "url": "https://github.com/SonarSource/sonar-java/commit/91d2ff2be5c7677f2e1042452b8ab457f1d35917", "message": "POC to validate that MethodMatcher \"typeDefinition\" and \"callSite\" could be simplified into one method", "committedDate": "2020-03-10T18:06:18Z", "type": "forcePushed"}, {"oid": "49fe7b0c982f3ebb30e2a1f6d09ed3c367d5827d", "url": "https://github.com/SonarSource/sonar-java/commit/49fe7b0c982f3ebb30e2a1f6d09ed3c367d5827d", "message": "POC to validate that MethodMatcher \"typeDefinition\" and \"callSite\" could be simplified into one method (fix ruling)", "committedDate": "2020-03-17T07:32:31Z", "type": "forcePushed"}, {"oid": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "url": "https://github.com/SonarSource/sonar-java/commit/1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "message": "Implement new MethodMatchers and use it in the old MethodMatcher", "committedDate": "2020-03-17T10:29:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NDY4MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393594680", "body": "Not immutable!", "bodyText": "Not immutable!", "bodyHTML": "<p dir=\"auto\">Not immutable!</p>", "author": "alban-auzeill", "createdAt": "2020-03-17T10:56:29Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.matcher;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+public class MethodMatchersBuilder implements MethodMatchers.Builder {\n+\n+  private Predicate<Type> typePredicate;\n+  private Predicate<String> namePredicate;\n+  private Predicate<List<Type>> parametersPredicate;", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex bbbcc92e8..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -39,9 +40,26 @@ import org.sonar.plugins.java.api.tree.Tree;\n \n public class MethodMatchersBuilder implements MethodMatchers.Builder {\n \n-  private Predicate<Type> typePredicate;\n-  private Predicate<String> namePredicate;\n-  private Predicate<List<Type>> parametersPredicate;\n+  @Nullable\n+  private final Predicate<Type> typePredicate;\n+\n+  @Nullable\n+  private final Predicate<String> namePredicate;\n+\n+  @Nullable\n+  private final Predicate<List<Type>> parametersPredicate;\n+\n+  public MethodMatchersBuilder() {\n+    this.typePredicate = null;\n+    this.namePredicate = null;\n+    this.parametersPredicate = null;\n+  }\n+\n+  private MethodMatchersBuilder(@Nullable Predicate<Type> typePredicate, @Nullable Predicate<String> namePredicate, @Nullable Predicate<List<Type>> parametersPredicate) {\n+    this.typePredicate = typePredicate;\n+    this.namePredicate = namePredicate;\n+    this.parametersPredicate = parametersPredicate;\n+  }\n \n   @Override\n   public Builder ofSubType(String fullyQualifiedTypeName) {\n", "next_change": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex 7f4a46342..3b52f916c 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -61,142 +61,90 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n     this.parametersPredicate = parametersPredicate;\n   }\n \n-  @Override\n-  public Builder ofSubType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n-  }\n-\n-  @Override\n-  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofSubType(name);\n+  private static <T> Predicate<T> substituteAny(Predicate<T> predicate, String... names) {\n+    if (Arrays.asList(names).contains(MethodMatchers.ANY)) {\n+      if (names.length > 1) {\n+        throw new IllegalStateException(\"Incompatible MethodMatchers.ANY with other predicates.\");\n+      }\n+      return e -> true;\n     }\n-    return builder;\n+    return predicate;\n   }\n \n   @Override\n-  public Builder ofAnyType() {\n-    if (typePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any type' added to others type predicates.\");\n-    }\n-    return ofType(type -> true);\n+  public NameBuilder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::isSubtypeOf), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  public NameBuilder ofAnyType() {\n+    return ofType(type -> true);\n   }\n \n   @Override\n-  public Builder ofTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofType(name);\n-    }\n-    return builder;\n+  public NameBuilder ofTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::is), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(Predicate<Type> typePredicate) {\n+  public NameBuilder ofType(Predicate<Type> typePredicate) {\n     return new MethodMatchersBuilder(or(this.typePredicate, typePredicate), namePredicate, parametersPredicate);\n   }\n \n   @Override\n-  public Builder name(String methodName) {\n-    return name(methodName::equals);\n+  public ParametersBuilder names(String... names) {\n+    List<String> nameList = Arrays.asList(names);\n+    return name(substituteAny(nameList::contains, names));\n   }\n \n   @Override\n-  public Builder names(String... names) {\n-    Builder builder = this;\n-    for (String name : names) {\n-      builder = builder.name(name);\n-    }\n-    return builder;\n+  public ParametersBuilder anyName() {\n+    return names(MethodMatchers.ANY);\n   }\n \n   @Override\n-  public Builder anyName() {\n-    if (namePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any name' added to others name predicates.\");\n-    }\n-    return name(n -> true);\n+  public ParametersBuilder constructor() {\n+    return names(MethodMatchers.CONSTRUCTOR);\n   }\n \n   @Override\n-  public Builder startWithName(String name) {\n-    return name(n -> n.startsWith(name));\n-  }\n-\n-  @Override\n-  public Builder constructor() {\n-    return name(\"<init>\");\n-  }\n-\n-  @Override\n-  public Builder name(Predicate<String> namePredicate) {\n+  public ParametersBuilder name(Predicate<String> namePredicate) {\n     return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n-  public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+  public ParametersBuilder addParametersMatcher(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType)\n+      .<Predicate<Type>>map(parameterType -> substituteAny(type -> type.is(parameterType), parameterType))\n       .collect(Collectors.toList()));\n   }\n \n-  @Override\n-  @SafeVarargs\n-  public final Builder withParameters(Predicate<Type>... parametersType) {\n-    return withParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder withParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n+  private ParametersBuilder withParameters(List<Predicate<Type>> parametersType) {\n+    return addParametersMatcher((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n   @Override\n-  public MethodMatchers.Builder withoutParameters() {\n+  public ParametersBuilder addWithoutParametersMatcher() {\n     return withParameters(Collections.emptyList());\n   }\n \n   @Override\n-  public MethodMatchers.Builder withAnyParameters() {\n+  public ParametersBuilder withAnyParameters() {\n     if (parametersPredicate != null) {\n       throw new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\");\n     }\n-    return withParameters((List<Type> actualParameters) -> true);\n+    return addParametersMatcher((List<Type> actualParameters) -> true);\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<List<Type>> parametersPredicate) {\n+  public ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersPredicate) {\n     return new MethodMatchersBuilder(typePredicate, namePredicate, or(this.parametersPredicate, parametersPredicate));\n   }\n \n-  @Override\n-  public Builder startWithParameters(String... parametersType) {\n-    return startWithParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n-      .collect(Collectors.toList()));\n-  }\n-\n-  @Override\n-  @SafeVarargs\n-  public final Builder startWithParameters(Predicate<Type>... parametersType) {\n-    return startWithParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder startWithParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> startWithParameters(parametersType, actualTypes));\n-  }\n-\n   private static boolean exactMatchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     return actualTypes.size() == expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n   }\n \n-  private static boolean startWithParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n-    return actualTypes.size() >= expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n-  }\n-\n   private static boolean matchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     for (int i = 0; i < expectedTypes.size(); i++) {\n       if (!expectedTypes.get(i).test(actualTypes.get(i))) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5Nzk3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393597970", "body": "Add withoutParameter(), withAnyParameters()", "bodyText": "Add withoutParameter(), withAnyParameters()", "bodyHTML": "<p dir=\"auto\">Add withoutParameter(), withAnyParameters()</p>", "author": "alban-auzeill", "createdAt": "2020-03-17T11:02:50Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.matcher;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+public class MethodMatchersBuilder implements MethodMatchers.Builder {\n+\n+  private Predicate<Type> typePredicate;\n+  private Predicate<String> namePredicate;\n+  private Predicate<List<Type>> parametersPredicate;\n+\n+  @Override\n+  public Builder ofSubType(String fullyQualifiedTypeName) {\n+    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n+  }\n+\n+  @Override\n+  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    Builder builder = this;\n+    for (String name : fullyQualifiedTypeNames) {\n+      builder = builder.ofSubType(name);\n+    }\n+    return builder;\n+  }\n+\n+  @Override\n+  public Builder ofAnyType() {\n+    return ofType(type -> true);\n+  }\n+\n+  @Override\n+  public Builder ofType(String fullyQualifiedTypeName) {\n+    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  }\n+\n+  @Override\n+  public Builder ofType(Predicate<Type> typePredicate) {\n+    this.typePredicate = or(this.typePredicate, typePredicate);\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder name(String methodName) {\n+    return name(methodName::equals);\n+  }\n+\n+  @Override\n+  public Builder names(String... names) {\n+    Builder builder = this;\n+    for (String name : names) {\n+      builder = builder.name(name);\n+    }\n+    return builder;\n+  }\n+\n+  @Override\n+  public Builder anyName() {\n+    return name(n -> true);\n+  }\n+\n+  @Override\n+  public Builder startWithName(String name) {\n+    return name(n -> n.startsWith(name));\n+  }\n+\n+  @Override\n+  public Builder constructor() {\n+    return name(\"<inti>\");\n+  }\n+\n+  @Override\n+  public Builder name(Predicate<String> namePredicate) {\n+    this.namePredicate = or(this.namePredicate, namePredicate);\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder withParameters(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType).\n+      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+      .collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public Builder withParameters(Predicate<Type>... parametersType) {\n+    return withParameters(Arrays.asList(parametersType));\n+  }\n+", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex bbbcc92e8..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -99,24 +131,23 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n \n   @Override\n   public Builder constructor() {\n-    return name(\"<inti>\");\n+    return name(\"<init>\");\n   }\n \n   @Override\n   public Builder name(Predicate<String> namePredicate) {\n-    this.namePredicate = or(this.namePredicate, namePredicate);\n-    return this;\n+    return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n   public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).\n-      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n       .collect(Collectors.toList()));\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<Type>... parametersType) {\n+  @SafeVarargs\n+  public final Builder withParameters(Predicate<Type>... parametersType) {\n     return withParameters(Arrays.asList(parametersType));\n   }\n \n", "next_change": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex 7f4a46342..3b52f916c 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -61,142 +61,90 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n     this.parametersPredicate = parametersPredicate;\n   }\n \n-  @Override\n-  public Builder ofSubType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n-  }\n-\n-  @Override\n-  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofSubType(name);\n+  private static <T> Predicate<T> substituteAny(Predicate<T> predicate, String... names) {\n+    if (Arrays.asList(names).contains(MethodMatchers.ANY)) {\n+      if (names.length > 1) {\n+        throw new IllegalStateException(\"Incompatible MethodMatchers.ANY with other predicates.\");\n+      }\n+      return e -> true;\n     }\n-    return builder;\n+    return predicate;\n   }\n \n   @Override\n-  public Builder ofAnyType() {\n-    if (typePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any type' added to others type predicates.\");\n-    }\n-    return ofType(type -> true);\n+  public NameBuilder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::isSubtypeOf), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  public NameBuilder ofAnyType() {\n+    return ofType(type -> true);\n   }\n \n   @Override\n-  public Builder ofTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofType(name);\n-    }\n-    return builder;\n+  public NameBuilder ofTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::is), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(Predicate<Type> typePredicate) {\n+  public NameBuilder ofType(Predicate<Type> typePredicate) {\n     return new MethodMatchersBuilder(or(this.typePredicate, typePredicate), namePredicate, parametersPredicate);\n   }\n \n   @Override\n-  public Builder name(String methodName) {\n-    return name(methodName::equals);\n+  public ParametersBuilder names(String... names) {\n+    List<String> nameList = Arrays.asList(names);\n+    return name(substituteAny(nameList::contains, names));\n   }\n \n   @Override\n-  public Builder names(String... names) {\n-    Builder builder = this;\n-    for (String name : names) {\n-      builder = builder.name(name);\n-    }\n-    return builder;\n+  public ParametersBuilder anyName() {\n+    return names(MethodMatchers.ANY);\n   }\n \n   @Override\n-  public Builder anyName() {\n-    if (namePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any name' added to others name predicates.\");\n-    }\n-    return name(n -> true);\n+  public ParametersBuilder constructor() {\n+    return names(MethodMatchers.CONSTRUCTOR);\n   }\n \n   @Override\n-  public Builder startWithName(String name) {\n-    return name(n -> n.startsWith(name));\n-  }\n-\n-  @Override\n-  public Builder constructor() {\n-    return name(\"<init>\");\n-  }\n-\n-  @Override\n-  public Builder name(Predicate<String> namePredicate) {\n+  public ParametersBuilder name(Predicate<String> namePredicate) {\n     return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n-  public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+  public ParametersBuilder addParametersMatcher(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType)\n+      .<Predicate<Type>>map(parameterType -> substituteAny(type -> type.is(parameterType), parameterType))\n       .collect(Collectors.toList()));\n   }\n \n-  @Override\n-  @SafeVarargs\n-  public final Builder withParameters(Predicate<Type>... parametersType) {\n-    return withParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder withParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n+  private ParametersBuilder withParameters(List<Predicate<Type>> parametersType) {\n+    return addParametersMatcher((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n   @Override\n-  public MethodMatchers.Builder withoutParameters() {\n+  public ParametersBuilder addWithoutParametersMatcher() {\n     return withParameters(Collections.emptyList());\n   }\n \n   @Override\n-  public MethodMatchers.Builder withAnyParameters() {\n+  public ParametersBuilder withAnyParameters() {\n     if (parametersPredicate != null) {\n       throw new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\");\n     }\n-    return withParameters((List<Type> actualParameters) -> true);\n+    return addParametersMatcher((List<Type> actualParameters) -> true);\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<List<Type>> parametersPredicate) {\n+  public ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersPredicate) {\n     return new MethodMatchersBuilder(typePredicate, namePredicate, or(this.parametersPredicate, parametersPredicate));\n   }\n \n-  @Override\n-  public Builder startWithParameters(String... parametersType) {\n-    return startWithParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n-      .collect(Collectors.toList()));\n-  }\n-\n-  @Override\n-  @SafeVarargs\n-  public final Builder startWithParameters(Predicate<Type>... parametersType) {\n-    return startWithParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder startWithParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> startWithParameters(parametersType, actualTypes));\n-  }\n-\n   private static boolean exactMatchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     return actualTypes.size() == expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n   }\n \n-  private static boolean startWithParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n-    return actualTypes.size() >= expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n-  }\n-\n   private static boolean matchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     for (int i = 0; i < expectedTypes.size(); i++) {\n       if (!expectedTypes.get(i).test(actualTypes.get(i))) {\n", "next_change": null}]}}, {"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex bbbcc92e8..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -124,21 +155,33 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n     return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n+  @Override\n+  public MethodMatchers.Builder withoutParameters() {\n+    return withParameters(Collections.emptyList());\n+  }\n+\n+  @Override\n+  public MethodMatchers.Builder withAnyParameters() {\n+    if (parametersPredicate != null) {\n+      throw new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\");\n+    }\n+    return withParameters((List<Type> actualParameters) -> true);\n+  }\n+\n   @Override\n   public Builder withParameters(Predicate<List<Type>> parametersPredicate) {\n-    this.parametersPredicate = or(this.parametersPredicate, parametersPredicate);\n-    return this;\n+    return new MethodMatchersBuilder(typePredicate, namePredicate, or(this.parametersPredicate, parametersPredicate));\n   }\n \n   @Override\n   public Builder startWithParameters(String... parametersType) {\n-    return startWithParameters(Arrays.stream(parametersType).\n-      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+    return startWithParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n       .collect(Collectors.toList()));\n   }\n \n   @Override\n-  public Builder startWithParameters(Predicate<Type>... parametersType) {\n+  @SafeVarargs\n+  public final Builder startWithParameters(Predicate<Type>... parametersType) {\n     return startWithParameters(Arrays.asList(parametersType));\n   }\n \n", "next_change": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex 7f4a46342..3b52f916c 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -61,142 +61,90 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n     this.parametersPredicate = parametersPredicate;\n   }\n \n-  @Override\n-  public Builder ofSubType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n-  }\n-\n-  @Override\n-  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofSubType(name);\n+  private static <T> Predicate<T> substituteAny(Predicate<T> predicate, String... names) {\n+    if (Arrays.asList(names).contains(MethodMatchers.ANY)) {\n+      if (names.length > 1) {\n+        throw new IllegalStateException(\"Incompatible MethodMatchers.ANY with other predicates.\");\n+      }\n+      return e -> true;\n     }\n-    return builder;\n+    return predicate;\n   }\n \n   @Override\n-  public Builder ofAnyType() {\n-    if (typePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any type' added to others type predicates.\");\n-    }\n-    return ofType(type -> true);\n+  public NameBuilder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::isSubtypeOf), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  public NameBuilder ofAnyType() {\n+    return ofType(type -> true);\n   }\n \n   @Override\n-  public Builder ofTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofType(name);\n-    }\n-    return builder;\n+  public NameBuilder ofTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::is), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(Predicate<Type> typePredicate) {\n+  public NameBuilder ofType(Predicate<Type> typePredicate) {\n     return new MethodMatchersBuilder(or(this.typePredicate, typePredicate), namePredicate, parametersPredicate);\n   }\n \n   @Override\n-  public Builder name(String methodName) {\n-    return name(methodName::equals);\n+  public ParametersBuilder names(String... names) {\n+    List<String> nameList = Arrays.asList(names);\n+    return name(substituteAny(nameList::contains, names));\n   }\n \n   @Override\n-  public Builder names(String... names) {\n-    Builder builder = this;\n-    for (String name : names) {\n-      builder = builder.name(name);\n-    }\n-    return builder;\n+  public ParametersBuilder anyName() {\n+    return names(MethodMatchers.ANY);\n   }\n \n   @Override\n-  public Builder anyName() {\n-    if (namePredicate != null) {\n-      throw new IllegalStateException(\"Incompatible 'any name' added to others name predicates.\");\n-    }\n-    return name(n -> true);\n+  public ParametersBuilder constructor() {\n+    return names(MethodMatchers.CONSTRUCTOR);\n   }\n \n   @Override\n-  public Builder startWithName(String name) {\n-    return name(n -> n.startsWith(name));\n-  }\n-\n-  @Override\n-  public Builder constructor() {\n-    return name(\"<init>\");\n-  }\n-\n-  @Override\n-  public Builder name(Predicate<String> namePredicate) {\n+  public ParametersBuilder name(Predicate<String> namePredicate) {\n     return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n-  public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+  public ParametersBuilder addParametersMatcher(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType)\n+      .<Predicate<Type>>map(parameterType -> substituteAny(type -> type.is(parameterType), parameterType))\n       .collect(Collectors.toList()));\n   }\n \n-  @Override\n-  @SafeVarargs\n-  public final Builder withParameters(Predicate<Type>... parametersType) {\n-    return withParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder withParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n+  private ParametersBuilder withParameters(List<Predicate<Type>> parametersType) {\n+    return addParametersMatcher((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n   @Override\n-  public MethodMatchers.Builder withoutParameters() {\n+  public ParametersBuilder addWithoutParametersMatcher() {\n     return withParameters(Collections.emptyList());\n   }\n \n   @Override\n-  public MethodMatchers.Builder withAnyParameters() {\n+  public ParametersBuilder withAnyParameters() {\n     if (parametersPredicate != null) {\n       throw new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\");\n     }\n-    return withParameters((List<Type> actualParameters) -> true);\n+    return addParametersMatcher((List<Type> actualParameters) -> true);\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<List<Type>> parametersPredicate) {\n+  public ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersPredicate) {\n     return new MethodMatchersBuilder(typePredicate, namePredicate, or(this.parametersPredicate, parametersPredicate));\n   }\n \n-  @Override\n-  public Builder startWithParameters(String... parametersType) {\n-    return startWithParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n-      .collect(Collectors.toList()));\n-  }\n-\n-  @Override\n-  @SafeVarargs\n-  public final Builder startWithParameters(Predicate<Type>... parametersType) {\n-    return startWithParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder startWithParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> startWithParameters(parametersType, actualTypes));\n-  }\n-\n   private static boolean exactMatchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     return actualTypes.size() == expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n   }\n \n-  private static boolean startWithParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n-    return actualTypes.size() >= expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n-  }\n-\n   private static boolean matchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     for (int i = 0; i < expectedTypes.size(); i++) {\n       if (!expectedTypes.get(i).test(actualTypes.get(i))) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NTYzMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393675631", "body": "Since we moved it to a public interface, we should consider adding Beta annotation.", "bodyText": "Since we moved it to a public interface, we should consider adding Beta annotation.", "bodyHTML": "<p dir=\"auto\">Since we moved it to a public interface, we should consider adding Beta annotation.</p>", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T13:24:44Z", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api.semantic;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatchersBuilder;\n+import org.sonar.java.matcher.MethodMatchersList;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+\n+/**\n+ * Helper interface to help to identify method with given Type, Name and Parameter lists.\n+ *\n+ * The starting point to define a MethodMatcher is {@link #create()}.\n+ * It is required to provide at least the following:\n+ *\n+ * - a type definition\n+ * - a method name\n+ * - a list of parameters\n+ *\n+ * If any of the three is missing, throw an Exception.\n+ * For any of the three elements above, you can specify that any name/type is accepted by using the predicate name -> true.\n+ * It is also possible to define a name/type multiple times, to match one method OR another.\n+ *\n+ * Examples:\n+ *\n+ * - match method \"a\" and \"b\" from any type, and without parameters\n+ * MethodMatcher.create().ofAnyType().names(\"a\", \"b\").withParameters();\n+ * alternatively\n+ * MethodMatcher.create().ofAnyType().name(\"a\").name(\"b\").withParameters();\n+ *\n+ * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n+ * MethodMatcher.create().ofSubType(\"A\").names(\"a\", \"b\").startWithParameters().or(\n+ * MethodMatcher.create().ofSubType(\"B\").names(\"b\", \"c\").startWithParameters());\n+ *\n+ * - match method \"f\" with any type and with:\n+ *   MethodMatcher.create().ofAnyType().name(\"f\")\n+ *  - one parameter of type either int or long\n+ *    .withParameters(\"int\").withParameters(\"long\");\n+ *  - one parameter of type int or one parameter of type long with any other number of parameters\n+ *    .withParameters(\"int\").startWithParameters(\"long\");\n+ *\n+ * - match any method with any type, with parameter int, any, int\n+ *   MethodMatcher.create().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *\n+ * TODO: add more example\n+ *\n+ */\n+public interface MethodMatchers {", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NTAyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393745027", "bodyText": "ok, I added com.google.common.annotations.Beta", "author": "alban-auzeill", "createdAt": "2020-03-17T15:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NTYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 1eef2bb9a..6bbac08d5 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -30,43 +31,65 @@ import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.NewClassTree;\n \n /**\n+ * <pre>\n  * Helper interface to help to identify method with given Type, Name and Parameter lists.\n  *\n- * The starting point to define a MethodMatcher is {@link #create()}.\n- * It is required to provide at least the following:\n+ * The starting point to define a MethodMatchers is {@link #create()}.\n+ * It is required to provide at least one of the following:\n  *\n- * - a type definition\n- * - a method name\n- * - a list of parameters\n+ * - a type definition, 1 or more call to:\n+ *   - ofSubType(String fullyQualifiedTypeName)\n+ *   - ofSubTypes(String... fullyQualifiedTypeNames)\n+ *   - ofType(String fullyQualifiedTypeName)\n+ *   - ofTypes(String... fullyQualifiedTypeNames)\n+ *   - ofType(Predicate<Type> typePredicate)\n+ *   - ofAnyType()                  // same as ofType(type -> true)\n  *\n- * If any of the three is missing, throw an Exception.\n- * For any of the three elements above, you can specify that any name/type is accepted by using the predicate name -> true.\n- * It is also possible to define a name/type multiple times, to match one method OR another.\n+ * - a method name, 1 or more call to:\n+ *   - name(String methodName)\n+ *   - names(String... names)\n+ *   - startWithName(String name)\n+ *   - constructor()\n+ *   - name(Predicate<String> namePredicate)\n+ *   - anyName()                    // same as name(name -> true)\n+ *\n+ * - a list of parameters, 1 or more call to:\n+ *   - withoutParameters()\n+ *   - withParameters(String... parametersType)\n+ *   - withParameters(Predicate<Type>... parametersType)\n+ *   - withParameters(Predicate<List<Type>> parametersType)\n+ *   - startWithParameters(String... parametersType)\n+ *   - startWithParameters(Predicate<Type>... parametersType)\n+ *   - withAnyParameters()          // same as withParameters((List<Type> parameters) -> true)\n+ *\n+ * If any of the three is missing, the matcher throws an Exception.\n+ * It is also possible to define a name/type/parameters multiple times, to match one method OR another.\n  *\n  * Examples:\n  *\n  * - match method \"a\" and \"b\" from any type, and without parameters\n- * MethodMatcher.create().ofAnyType().names(\"a\", \"b\").withParameters();\n- * alternatively\n- * MethodMatcher.create().ofAnyType().name(\"a\").name(\"b\").withParameters();\n+ *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").withoutParameters();\n+ *   alternatively\n+ *     MethodMatchers.create().ofAnyType().name(\"a\").name(\"b\").withoutParameters();\n  *\n  * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n- * MethodMatcher.create().ofSubType(\"A\").names(\"a\", \"b\").startWithParameters().or(\n- * MethodMatcher.create().ofSubType(\"B\").names(\"b\", \"c\").startWithParameters());\n+ *     MethodMatchers.or(\n+ *       MethodMatchers.create().ofSubType(\"A\").names(\"a\", \"b\").withAnyParameters(),\n+ *       MethodMatchers.create().ofSubType(\"B\").names(\"b\", \"c\").withAnyParameters());\n  *\n  * - match method \"f\" with any type and with:\n- *   MethodMatcher.create().ofAnyType().name(\"f\")\n- *  - one parameter of type either int or long\n- *    .withParameters(\"int\").withParameters(\"long\");\n- *  - one parameter of type int or one parameter of type long with any other number of parameters\n- *    .withParameters(\"int\").startWithParameters(\"long\");\n+ *     MethodMatchers.create().ofAnyType().name(\"f\")\n+ *     - one parameter of type either int or long\n+ *        .withParameters(\"int\").withParameters(\"long\");\n+ *     - one parameter of type int or one parameter of type long with any other number of parameters\n+ *        .withParameters(\"int\").startWithParameters(\"long\");\n  *\n  * - match any method with any type, with parameter int, any, int\n- *   MethodMatcher.create().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *   MethodMatchers.create().ofAnyType().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n  *\n- * TODO: add more example\n- *\n- */\n+ * </pre>\n+ *  */\n+@Beta\n public interface MethodMatchers {\n \n   boolean matches(NewClassTree newClassTree);\n", "next_change": {"commit": "8e2102d3372e861d21f74c1c03a4a64ed1eb4d44", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 6bbac08d5..f20eb2c36 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -85,10 +87,12 @@ import org.sonar.plugins.java.api.tree.NewClassTree;\n  *        .withParameters(\"int\").startWithParameters(\"long\");\n  *\n  * - match any method with any type, with parameter int, any, int\n- *   MethodMatchers.create().ofAnyType().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *     MethodMatchers.create().ofAnyType().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n  *\n+ * - match any type AND method name \"a\" OR \"b\" AND parameter int OR long\n+ *     MethodMatchers.create().ofAnyType().name(\"a\").name(\"b\").withParameters(\"int\").withParameters(\"long\")\n  * </pre>\n- *  */\n+ */\n @Beta\n public interface MethodMatchers {\n \n", "next_change": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex f20eb2c36..c6c8acbf9 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -36,61 +36,51 @@ import org.sonar.plugins.java.api.tree.NewClassTree;\n  * Immutable helper interface to help to identify method with given Type, Name and Parameter lists.\n  *\n  * The starting point to define a MethodMatchers is {@link #create()}.\n- * It is required to provide at least one of the following:\n+ * It is required to provide the following:\n  *\n- * - a type definition, 1 or more call to:\n- *   - ofSubType(String fullyQualifiedTypeName)\n+ * - a type definition\n  *   - ofSubTypes(String... fullyQualifiedTypeNames)\n- *   - ofType(String fullyQualifiedTypeName)\n  *   - ofTypes(String... fullyQualifiedTypeNames)\n  *   - ofType(Predicate<Type> typePredicate)\n  *   - ofAnyType()                  // same as ofType(type -> true)\n  *\n- * - a method name, 1 or more call to:\n- *   - name(String methodName)\n+ * - a method name\n  *   - names(String... names)\n- *   - startWithName(String name)\n  *   - constructor()\n  *   - name(Predicate<String> namePredicate)\n  *   - anyName()                    // same as name(name -> true)\n  *\n  * - a list of parameters, 1 or more call to:\n- *   - withoutParameters()\n- *   - withParameters(String... parametersType)\n- *   - withParameters(Predicate<Type>... parametersType)\n- *   - withParameters(Predicate<List<Type>> parametersType)\n- *   - startWithParameters(String... parametersType)\n- *   - startWithParameters(Predicate<Type>... parametersType)\n+ *   (It is possible to define several parameters matcher, to match several method signatures)\n+ *   - addWithoutParametersMatcher()\n+ *   - addParametersMatcher(String...parametersType)\n+ *   - addParametersMatcher(Predicate<List<Type>>parametersType)\n  *   - withAnyParameters()          // same as withParameters((List<Type> parameters) -> true)\n  *\n- * If any of the three is missing, the matcher throws an Exception.\n  * The matcher will return true only when the three predicates are respected.\n- * It is also possible to define a name/type/parameters multiple times, to match one method OR another.\n  *\n  * Examples:\n  *\n  * - match method \"a\" and \"b\" from any type, and without parameters\n- *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").withoutParameters();\n- *   alternatively\n- *     MethodMatchers.create().ofAnyType().name(\"a\").name(\"b\").withoutParameters();\n+ *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addWithoutParametersMatcher();\n  *\n  * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n  *     MethodMatchers.or(\n- *       MethodMatchers.create().ofSubType(\"A\").names(\"a\", \"b\").withAnyParameters(),\n- *       MethodMatchers.create().ofSubType(\"B\").names(\"b\", \"c\").withAnyParameters());\n+ *       MethodMatchers.create().ofSubTypes(\"A\").names(\"a\", \"b\").withAnyParameters(),\n+ *       MethodMatchers.create().ofSubTypes(\"B\").names(\"b\", \"c\").withAnyParameters());\n  *\n  * - match method \"f\" with any type and with:\n- *     MethodMatchers.create().ofAnyType().name(\"f\")\n+ *     MethodMatchers.create().ofAnyType().names(\"f\")\n  *     - one parameter of type either int or long\n- *        .withParameters(\"int\").withParameters(\"long\");\n+ *        .addParametersMatcher(\"int\").addParametersMatcher(\"long\");\n  *     - one parameter of type int or one parameter of type long with any other number of parameters\n- *        .withParameters(\"int\").startWithParameters(\"long\");\n+ *        .addParametersMatcher(\"int\").addParametersMatcher(params -> params.size() >= 1 && params.get(0).is(\"long\"));\n  *\n  * - match any method with any type, with parameter int, any, int\n- *     MethodMatchers.create().ofAnyType().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *     MethodMatchers.create().ofAnyType().anyName().withParameters(\"int\", ANY, \"int\");\n  *\n  * - match any type AND method name \"a\" OR \"b\" AND parameter int OR long\n- *     MethodMatchers.create().ofAnyType().name(\"a\").name(\"b\").withParameters(\"int\").withParameters(\"long\")\n+ *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addParametersMatcher(\"int\").addParametersMatcher(\"long\")\n  * </pre>\n  */\n @Beta\n", "next_change": {"commit": "35d4c46b761554d2703f8681d55b190ee9fce239", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex c6c8acbf9..179bef225 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -32,64 +32,75 @@ import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.NewClassTree;\n \n /**\n- * <pre>\n- * Immutable helper interface to help to identify method with given Type, Name and Parameter lists.\n- *\n+ * Immutable helper interface to help to identify method with given a Type, Name and Parameters.\n+ * <p>\n  * The starting point to define a MethodMatchers is {@link #create()}.\n+ * <p>\n  * It is required to provide the following:\n- *\n- * - a type definition\n- *   - ofSubTypes(String... fullyQualifiedTypeNames)\n- *   - ofTypes(String... fullyQualifiedTypeNames)\n- *   - ofType(Predicate<Type> typePredicate)\n- *   - ofAnyType()                  // same as ofType(type -> true)\n- *\n- * - a method name\n- *   - names(String... names)\n- *   - constructor()\n- *   - name(Predicate<String> namePredicate)\n- *   - anyName()                    // same as name(name -> true)\n- *\n- * - a list of parameters, 1 or more call to:\n+ * <ul>\n+ *  <li> a type definition\n+ *    <ul>\n+ *      <li> {@link TypeBuilder#ofSubTypes(String...)} </li>\n+ *      <li> {@link TypeBuilder#ofTypes(String...)} </li>\n+ *      <li> {@link TypeBuilder#ofType(Predicate<Type>)} </li>\n+ *      <li> {@link TypeBuilder#ofAnyType()}          // same as ofType(type -> true) </li>\n+ *   </ul>\n+ *  </li>\n+ *  <li> a method name\n+ *   <ul>\n+ *    <li> {@link NameBuilder#names(String...)} </li>\n+ *    <li> {@link NameBuilder#constructor()} </li>\n+ *    <li> {@link NameBuilder#name(Predicate<String>)} </li>\n+ *    <li> {@link NameBuilder#anyName()}                    // same as name(name -> true) </li>\n+ *   </ul>\n+ *  </li>\n+ *  <li>a list of parameters, 1 or more call to:\n+ * <p>\n  *   (It is possible to define several parameters matcher, to match several method signatures)\n- *   - addWithoutParametersMatcher()\n- *   - addParametersMatcher(String...parametersType)\n- *   - addParametersMatcher(Predicate<List<Type>>parametersType)\n- *   - withAnyParameters()          // same as withParameters((List<Type> parameters) -> true)\n- *\n+ *   <ul>\n+ *     <li> {@link ParametersBuilder#addWithoutParametersMatcher()} </li>\n+ *     <li> {@link ParametersBuilder#addParametersMatcher(String...)} </li>\n+ *     <li> {@link ParametersBuilder#addParametersMatcher(Predicate<List<Type>>)} </li>\n+ *     <li> {@link ParametersBuilder#withAnyParameters()}          // same as withParameters((List<Type> parameters) -> true) </li>\n+ *   </ul>\n+ *  </li>\n+ * </ul>\n  * The matcher will return true only when the three predicates are respected.\n- *\n+ * <p>\n  * Examples:\n+ * <pre>\n+ *- match method \"a\" and \"b\" from any type, and without parameters:\n+ *    MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addWithoutParametersMatcher();\n  *\n- * - match method \"a\" and \"b\" from any type, and without parameters\n- *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addWithoutParametersMatcher();\n- *\n- * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n- *     MethodMatchers.or(\n- *       MethodMatchers.create().ofSubTypes(\"A\").names(\"a\", \"b\").withAnyParameters(),\n- *       MethodMatchers.create().ofSubTypes(\"B\").names(\"b\", \"c\").withAnyParameters());\n- *\n- * - match method \"f\" with any type and with:\n- *     MethodMatchers.create().ofAnyType().names(\"f\")\n- *     - one parameter of type either int or long\n+ *- match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n+ *    MethodMatchers.or(\n+ *      MethodMatchers.create().ofSubTypes(\"A\").names(\"a\", \"b\").withAnyParameters(),\n+ *      MethodMatchers.create().ofSubTypes(\"B\").names(\"b\", \"c\").withAnyParameters());\n+ *- match method \"f\" with any type and with:\n+ *    MethodMatchers.create().ofAnyType().names(\"f\")\n+ *      - one parameter of type either int or long\n  *        .addParametersMatcher(\"int\").addParametersMatcher(\"long\");\n- *     - one parameter of type int or one parameter of type long with any other number of parameters\n+ *      - one parameter of type int or one parameter of type long with any other number of parameters\n  *        .addParametersMatcher(\"int\").addParametersMatcher(params -> params.size() >= 1 && params.get(0).is(\"long\"));\n  *\n- * - match any method with any type, with parameter int, any, int\n- *     MethodMatchers.create().ofAnyType().anyName().withParameters(\"int\", ANY, \"int\");\n+ *- match any method with any type, with parameter int, any, int:\n+ *    MethodMatchers.create().ofAnyType().anyName().withParameters(\"int\", ANY, \"int\");\n  *\n- * - match any type AND method name \"a\" OR \"b\" AND parameter int OR long\n- *     MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addParametersMatcher(\"int\").addParametersMatcher(\"long\")\n+ *- match any type AND method name \"a\" OR \"b\" AND parameter int OR long:\n+ *    MethodMatchers.create().ofAnyType().names(\"a\", \"b\").addParametersMatcher(\"int\").addParametersMatcher(\"long\")\n  * </pre>\n  */\n @Beta\n public interface MethodMatchers {\n \n   boolean matches(NewClassTree newClassTree);\n+\n   boolean matches(MethodInvocationTree mit);\n+\n   boolean matches(MethodTree methodTree);\n+\n   boolean matches(MethodReferenceTree methodReferenceTree);\n+\n   boolean matches(Symbol symbol);\n \n   static MethodMatchers.TypeBuilder create() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjU3NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393676575", "body": "Should we add\r\n```java\r\nMethodMatchers.Builder ofType(String... fullyQualifiedTypeName);\r\n```\r\n?", "bodyText": "Should we add\nMethodMatchers.Builder ofType(String... fullyQualifiedTypeName);\n?", "bodyHTML": "<p dir=\"auto\">Should we add</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MethodMatchers.Builder ofType(String... fullyQualifiedTypeName);\"><pre><span class=\"pl-smi\">MethodMatchers</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Builder</span> ofType(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">..</span> fullyQualifiedTypeName);</pre></div>\n<p dir=\"auto\">?</p>", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T13:26:01Z", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api.semantic;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatchersBuilder;\n+import org.sonar.java.matcher.MethodMatchersList;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+\n+/**\n+ * Helper interface to help to identify method with given Type, Name and Parameter lists.\n+ *\n+ * The starting point to define a MethodMatcher is {@link #create()}.\n+ * It is required to provide at least the following:\n+ *\n+ * - a type definition\n+ * - a method name\n+ * - a list of parameters\n+ *\n+ * If any of the three is missing, throw an Exception.\n+ * For any of the three elements above, you can specify that any name/type is accepted by using the predicate name -> true.\n+ * It is also possible to define a name/type multiple times, to match one method OR another.\n+ *\n+ * Examples:\n+ *\n+ * - match method \"a\" and \"b\" from any type, and without parameters\n+ * MethodMatcher.create().ofAnyType().names(\"a\", \"b\").withParameters();\n+ * alternatively\n+ * MethodMatcher.create().ofAnyType().name(\"a\").name(\"b\").withParameters();\n+ *\n+ * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n+ * MethodMatcher.create().ofSubType(\"A\").names(\"a\", \"b\").startWithParameters().or(\n+ * MethodMatcher.create().ofSubType(\"B\").names(\"b\", \"c\").startWithParameters());\n+ *\n+ * - match method \"f\" with any type and with:\n+ *   MethodMatcher.create().ofAnyType().name(\"f\")\n+ *  - one parameter of type either int or long\n+ *    .withParameters(\"int\").withParameters(\"long\");\n+ *  - one parameter of type int or one parameter of type long with any other number of parameters\n+ *    .withParameters(\"int\").startWithParameters(\"long\");\n+ *\n+ * - match any method with any type, with parameter int, any, int\n+ *   MethodMatcher.create().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *\n+ * TODO: add more example\n+ *\n+ */\n+public interface MethodMatchers {\n+\n+  boolean matches(NewClassTree newClassTree);\n+  boolean matches(MethodInvocationTree mit);\n+  boolean matches(MethodTree methodTree);\n+  boolean matches(MethodReferenceTree methodReferenceTree);\n+  boolean matches(Symbol symbol);\n+\n+  static MethodMatchers.Builder create() {\n+    return new MethodMatchersBuilder();\n+  }\n+\n+  // Methods related to combination\n+\n+  /**\n+   * Combine multiple method matcher. The matcher will match any of the given matcher.\n+   */\n+  static MethodMatchers or(MethodMatchers... matchers) {\n+    return new MethodMatchersList(Arrays.asList(matchers));\n+  }\n+\n+  static MethodMatchers or(List<MethodMatchers> matchers) {\n+    return new MethodMatchersList(matchers);\n+  }\n+\n+  interface Builder extends MethodMatchers {\n+\n+    // Methods related to types\n+\n+    /**\n+     * Match the type and sub-type of the fully qualified name.\n+     */\n+    MethodMatchers.Builder ofSubType(String fullyQualifiedTypeName);\n+\n+    /**\n+     * Match any of the type and sub-type of the fully qualified name.\n+     */\n+    MethodMatchers.Builder ofSubTypes(String... fullyQualifiedTypeNames);\n+\n+    /**\n+     * Match any type.\n+     */\n+    MethodMatchers.Builder ofAnyType();\n+\n+    /**\n+     * Match the fully qualified name type, but not the subtype.\n+     */\n+    MethodMatchers.Builder ofType(String fullyQualifiedTypeName);", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NTkxMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393745911", "bodyText": "I added ofTypes(String... fullyQualifiedTypeNames) because of one case in java-frontend", "author": "alban-auzeill", "createdAt": "2020-03-17T15:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 1eef2bb9a..6bbac08d5 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -116,6 +139,11 @@ public interface MethodMatchers {\n      */\n     MethodMatchers.Builder ofType(String fullyQualifiedTypeName);\n \n+    /**\n+     * Match any of the fully qualified name types, but not the subtype.\n+     */\n+    MethodMatchers.Builder ofTypes(String... fullyQualifiedTypeNames);\n+\n     /**\n      * Match a type matching a predicate.\n      */\n", "next_change": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 6bbac08d5..c6c8acbf9 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -111,99 +104,79 @@ public interface MethodMatchers {\n     return or(Arrays.asList(matchers));\n   }\n \n-  static MethodMatchers or(List<MethodMatchers> matchers) {\n+  static MethodMatchers or(List<? extends MethodMatchers> matchers) {\n     return new MethodMatchersList(matchers);\n   }\n \n-  interface Builder extends MethodMatchers {\n+  static MethodMatchers none() {\n+    return NoneMethodMatchers.getInstance();\n+  }\n \n-    // Methods related to types\n+  String ANY = \"*\";\n+  String CONSTRUCTOR = \"<init>\";\n \n-    /**\n-     * Match the type and sub-type of the fully qualified name.\n-     */\n-    MethodMatchers.Builder ofSubType(String fullyQualifiedTypeName);\n+  interface TypeBuilder {\n \n     /**\n      * Match any of the type and sub-type of the fully qualified names.\n      */\n-    MethodMatchers.Builder ofSubTypes(String... fullyQualifiedTypeNames);\n+    MethodMatchers.NameBuilder ofSubTypes(String... fullyQualifiedTypeNames);\n \n     /**\n      * Match any type.\n      */\n-    MethodMatchers.Builder ofAnyType();\n-\n-    /**\n-     * Match the fully qualified name type, but not the subtype.\n-     */\n-    MethodMatchers.Builder ofType(String fullyQualifiedTypeName);\n+    MethodMatchers.NameBuilder ofAnyType();\n \n     /**\n      * Match any of the fully qualified name types, but not the subtype.\n      */\n-    MethodMatchers.Builder ofTypes(String... fullyQualifiedTypeNames);\n+    MethodMatchers.NameBuilder ofTypes(String... fullyQualifiedTypeNames);\n \n     /**\n      * Match a type matching a predicate.\n      */\n-    MethodMatchers.Builder ofType(Predicate<Type> typePredicate);\n-\n-    // Methods related to name\n-\n-    /**\n-     * Set a method name to match.\n-     * Can be called multiple times to match any of the name.\n-     */\n-    MethodMatchers.Builder name(String methodName);\n+    MethodMatchers.NameBuilder ofType(Predicate<Type> typePredicate);\n+  }\n \n+  interface NameBuilder {\n     /**\n      * Match a method with any name is the list.\n      */\n-    MethodMatchers.Builder names(String... names);\n+    MethodMatchers.ParametersBuilder names(String... names);\n \n     /**\n      * Match a method with any name.\n      * Equivalent to .name(n -> true).\n      */\n-    MethodMatchers.Builder anyName();\n-\n-    /**\n-     * Match a name starting with a prefix.\n-     * Equivalent to .name(n -> n.startWith(\"something\"))\n-     */\n-    MethodMatchers.Builder startWithName(String name);\n+    MethodMatchers.ParametersBuilder anyName();\n \n     /**\n      * Match a constructor.\n      * Equivalent to .name(n -> \"<init>\".equals(n))\n      */\n-    MethodMatchers.Builder constructor();\n+    MethodMatchers.ParametersBuilder constructor();\n \n     /**\n      * Match the name matching the predicate.\n-     * Can be called multiple times to match a method satisfying a predicate or another.\n      */\n-    MethodMatchers.Builder name(Predicate<String> namePredicate);\n+    MethodMatchers.ParametersBuilder name(Predicate<String> namePredicate);\n+  }\n \n-    // Methods related to parameters\n+  interface ParametersBuilder {\n     /**\n-     * Exact list of parameters.\n-     * Can be called multiple time to match any of the parameters lists.\n+     * With any number of parameters of any types\n      */\n-    MethodMatchers.Builder withoutParameters();\n-    MethodMatchers.Builder withParameters(String... parametersType);\n-    MethodMatchers.Builder withParameters(Predicate<Type>... parametersType);\n-    MethodMatchers.Builder withParameters(Predicate<List<Type>> parametersType);\n-    MethodMatchers.Builder withAnyParameters();\n+    MethodMatchers.ParametersBuilder withAnyParameters();\n \n     /**\n-     * Start of list of parameters, with any other (0 or more) parameter of any type.\n-     * Can be called multiple time to match any of the parameters lists.\n+     * Exact method signature.\n+     * Can be called multiple time to match any of the method signatures.\n      */\n-    MethodMatchers.Builder startWithParameters(String... parametersType);\n-    MethodMatchers.Builder startWithParameters(Predicate<Type>... parametersType);\n+    MethodMatchers.ParametersBuilder addWithoutParametersMatcher();\n+    MethodMatchers.ParametersBuilder addParametersMatcher(String... parametersType);\n+    MethodMatchers.ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersType);\n \n+    MethodMatchers build();\n   }\n \n }\n", "next_change": {"commit": "35d4c46b761554d2703f8681d55b190ee9fce239", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex c6c8acbf9..179bef225 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n", "chunk": "@@ -164,18 +176,32 @@ public interface MethodMatchers {\n \n   interface ParametersBuilder {\n     /**\n-     * With any number of parameters of any types\n+     * Match a method signature with any number of parameters of any types.\n+     * Others method adding parameters matchers can not be called with this method.\n      */\n     MethodMatchers.ParametersBuilder withAnyParameters();\n \n     /**\n-     * Exact method signature.\n-     * Can be called multiple time to match any of the method signatures.\n+     * Match a method signature without parameters.\n+     * Others method adding parameters matcher can be called to match multiples signatures.\n      */\n     MethodMatchers.ParametersBuilder addWithoutParametersMatcher();\n+\n+    /**\n+     * Match a method signature with exactly the types provided.\n+     * Others method adding parameters matcher can be called to match multiples signatures.\n+     */\n     MethodMatchers.ParametersBuilder addParametersMatcher(String... parametersType);\n+\n+    /**\n+     * Match a method signature respecting the predicate.\n+     * Others method adding parameters matcher can be called to match multiples signatures.\n+     */\n     MethodMatchers.ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersType);\n \n+    /**\n+     * Build a MethodMatchers. Throw an Exception if the MethodMatchers is not correctly setup (no parameters list defined).\n+     */\n     MethodMatchers build();\n   }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjUxOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393706518", "body": "Now that we have these two methods, do we still have the need for `startWithParameters`? \r\nThe behavior could be replaced by a call to `withAnyParameters` after `withParameters`?", "bodyText": "Now that we have these two methods, do we still have the need for startWithParameters?\nThe behavior could be replaced by a call to withAnyParameters after withParameters?", "bodyHTML": "<p dir=\"auto\">Now that we have these two methods, do we still have the need for <code>startWithParameters</code>?<br>\nThe behavior could be replaced by a call to <code>withAnyParameters</code> after <code>withParameters</code>?</p>", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T14:09:54Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -104,41 +121,52 @@ public Builder constructor() {\n \n   @Override\n   public Builder name(Predicate<String> namePredicate) {\n-    this.namePredicate = or(this.namePredicate, namePredicate);\n-    return this;\n+    return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n   public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).\n-      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n       .collect(Collectors.toList()));\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<Type>... parametersType) {\n+  @SafeVarargs\n+  public final Builder withParameters(Predicate<Type>... parametersType) {\n     return withParameters(Arrays.asList(parametersType));\n   }\n \n   private Builder withParameters(List<Predicate<Type>> parametersType) {\n     return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n+  @Override\n+  public MethodMatchers.Builder withoutParameters() {\n+    return withParameters(Collections.emptyList());\n+  }\n+\n+  @Override\n+  public MethodMatchers.Builder withAnyParameters() {", "originalCommit": "03d55ad97aacc2dd8a089a87702f4a1152e39b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODkyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393748927", "bodyText": "No, currently all parameters pattern are defined by the call of one method, it allows to do a or.\nif you do: .withParameters(\"int\").withParameters(\"long\").withAnyParameters() it raises a new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\")", "author": "alban-auzeill", "createdAt": "2020-03-17T15:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex 39689d9c9..3b52f916c 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n", "chunk": "@@ -61,127 +61,90 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n     this.parametersPredicate = parametersPredicate;\n   }\n \n-  @Override\n-  public Builder ofSubType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n+  private static <T> Predicate<T> substituteAny(Predicate<T> predicate, String... names) {\n+    if (Arrays.asList(names).contains(MethodMatchers.ANY)) {\n+      if (names.length > 1) {\n+        throw new IllegalStateException(\"Incompatible MethodMatchers.ANY with other predicates.\");\n+      }\n+      return e -> true;\n+    }\n+    return predicate;\n   }\n \n   @Override\n-  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n-    Builder builder = this;\n-    for (String name : fullyQualifiedTypeNames) {\n-      builder = builder.ofSubType(name);\n-    }\n-    return builder;\n+  public NameBuilder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::isSubtypeOf), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofAnyType() {\n+  public NameBuilder ofAnyType() {\n     return ofType(type -> true);\n   }\n \n   @Override\n-  public Builder ofType(String fullyQualifiedTypeName) {\n-    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  public NameBuilder ofTypes(String... fullyQualifiedTypeNames) {\n+    return ofType(substituteAny(type -> Arrays.stream(fullyQualifiedTypeNames).anyMatch(type::is), fullyQualifiedTypeNames));\n   }\n \n   @Override\n-  public Builder ofType(Predicate<Type> typePredicate) {\n+  public NameBuilder ofType(Predicate<Type> typePredicate) {\n     return new MethodMatchersBuilder(or(this.typePredicate, typePredicate), namePredicate, parametersPredicate);\n   }\n \n   @Override\n-  public Builder name(String methodName) {\n-    return name(methodName::equals);\n-  }\n-\n-  @Override\n-  public Builder names(String... names) {\n-    Builder builder = this;\n-    for (String name : names) {\n-      builder = builder.name(name);\n-    }\n-    return builder;\n-  }\n-\n-  @Override\n-  public Builder anyName() {\n-    return name(n -> true);\n+  public ParametersBuilder names(String... names) {\n+    List<String> nameList = Arrays.asList(names);\n+    return name(substituteAny(nameList::contains, names));\n   }\n \n   @Override\n-  public Builder startWithName(String name) {\n-    return name(n -> n.startsWith(name));\n+  public ParametersBuilder anyName() {\n+    return names(MethodMatchers.ANY);\n   }\n \n   @Override\n-  public Builder constructor() {\n-    return name(\"<inti>\");\n+  public ParametersBuilder constructor() {\n+    return names(MethodMatchers.CONSTRUCTOR);\n   }\n \n   @Override\n-  public Builder name(Predicate<String> namePredicate) {\n+  public ParametersBuilder name(Predicate<String> namePredicate) {\n     return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n-  public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+  public ParametersBuilder addParametersMatcher(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType)\n+      .<Predicate<Type>>map(parameterType -> substituteAny(type -> type.is(parameterType), parameterType))\n       .collect(Collectors.toList()));\n   }\n \n-  @Override\n-  @SafeVarargs\n-  public final Builder withParameters(Predicate<Type>... parametersType) {\n-    return withParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder withParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n+  private ParametersBuilder withParameters(List<Predicate<Type>> parametersType) {\n+    return addParametersMatcher((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n   @Override\n-  public MethodMatchers.Builder withoutParameters() {\n+  public ParametersBuilder addWithoutParametersMatcher() {\n     return withParameters(Collections.emptyList());\n   }\n \n   @Override\n-  public MethodMatchers.Builder withAnyParameters() {\n+  public ParametersBuilder withAnyParameters() {\n     if (parametersPredicate != null) {\n       throw new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\");\n     }\n-    return withParameters((List<Type> actualParameters) -> true);\n+    return addParametersMatcher((List<Type> actualParameters) -> true);\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<List<Type>> parametersPredicate) {\n+  public ParametersBuilder addParametersMatcher(Predicate<List<Type>> parametersPredicate) {\n     return new MethodMatchersBuilder(typePredicate, namePredicate, or(this.parametersPredicate, parametersPredicate));\n   }\n \n-  @Override\n-  public Builder startWithParameters(String... parametersType) {\n-    return startWithParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n-      .collect(Collectors.toList()));\n-  }\n-\n-  @Override\n-  @SafeVarargs\n-  public final Builder startWithParameters(Predicate<Type>... parametersType) {\n-    return startWithParameters(Arrays.asList(parametersType));\n-  }\n-\n-  private Builder startWithParameters(List<Predicate<Type>> parametersType) {\n-    return withParameters((List<Type> actualTypes) -> startWithParameters(parametersType, actualTypes));\n-  }\n-\n   private static boolean exactMatchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     return actualTypes.size() == expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n   }\n \n-  private static boolean startWithParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n-    return actualTypes.size() >= expectedTypes.size() && matchesParameters(expectedTypes, actualTypes);\n-  }\n-\n   private static boolean matchesParameters(List<Predicate<Type>> expectedTypes, List<Type> actualTypes) {\n     for (int i = 0; i < expectedTypes.size(); i++) {\n       if (!expectedTypes.get(i).test(actualTypes.get(i))) {\n", "next_change": null}]}}, {"oid": "d69ff080ef8e177edf394efbda5639e6ed030220", "url": "https://github.com/SonarSource/sonar-java/commit/d69ff080ef8e177edf394efbda5639e6ed030220", "message": "Update MethodMatchers documentation and unit tests", "committedDate": "2020-03-17T19:08:06Z", "type": "forcePushed"}, {"oid": "643286abea06a41819926f6a7ab2787d693f1b9b", "url": "https://github.com/SonarSource/sonar-java/commit/643286abea06a41819926f6a7ab2787d693f1b9b", "message": "Update getMethodInvocationMatchers() to return MethodMatchers", "committedDate": "2020-03-18T05:29:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzNTEwOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r394835108", "body": "Duplicated line", "bodyText": "Duplicated line", "bodyHTML": "<p dir=\"auto\">Duplicated line</p>", "author": "alban-auzeill", "createdAt": "2020-03-19T07:33:59Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java", "diffHunk": "@@ -48,47 +47,28 @@\n   private static final String MATH_PACKAGE_NAME = \"java.lang.Math\";\n   private static final String ROUND = \"round\";\n \n-  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS = MethodMatchers.or(\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(\"int\"),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(\"long\")\n-  );\n+  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ABS)\n+      .withParameters(DOUBLE)\n+      .withParameters(FLOAT)\n+      .withParameters(\"int\")\n+      .withParameters(\"long\");\n \n   private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(CEIL).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(CEIL).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ROUND).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ROUND).addParameter(FLOAT)\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(CEIL).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").withParameters(DOUBLE),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT)", "originalCommit": "264bd7434f6f6f13df4e2c549b06d0ddab579f86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\nindex 38144cfdd..a541f3511 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n", "chunk": "@@ -48,27 +48,27 @@ public class ConstantMathCheck extends IssuableSubscriptionVisitor {\n   private static final String ROUND = \"round\";\n \n   private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ABS)\n-      .withParameters(DOUBLE)\n-      .withParameters(FLOAT)\n-      .withParameters(\"int\")\n-      .withParameters(\"long\");\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ABS)\n+      .addParametersMatcher(DOUBLE)\n+      .addParametersMatcher(FLOAT)\n+      .addParametersMatcher(\"int\")\n+      .addParametersMatcher(\"long\");\n \n   private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(CEIL).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").withParameters(DOUBLE),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT)\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"atan2\").withParameters(DOUBLE, DOUBLE),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").withParameters(DOUBLE)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE)\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_OR_ONE_METHODS =\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").withParameters(DOUBLE);\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE);\n \n   @Override\n   public List<Tree.Kind> nodesToVisit() {\n", "next_change": {"commit": "35d4c46b761554d2703f8681d55b190ee9fce239", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\nindex a541f3511..c985cf37c 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n", "chunk": "@@ -52,23 +52,24 @@ public class ConstantMathCheck extends IssuableSubscriptionVisitor {\n       .addParametersMatcher(DOUBLE)\n       .addParametersMatcher(FLOAT)\n       .addParametersMatcher(\"int\")\n-      .addParametersMatcher(\"long\");\n+      .addParametersMatcher(\"long\")\n+      .build();\n \n   private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build()\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE).build()\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_OR_ONE_METHODS =\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE);\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE).build();\n \n   @Override\n   public List<Tree.Kind> nodesToVisit() {\n", "next_change": {"commit": "7ef09516cb06bf4ca002aab09fdf9eba6599dfd7", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\nindex c985cf37c..a140e6d14 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n", "chunk": "@@ -47,29 +49,47 @@ public class ConstantMathCheck extends IssuableSubscriptionVisitor {\n   private static final String MATH_PACKAGE_NAME = \"java.lang.Math\";\n   private static final String ROUND = \"round\";\n \n-  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ABS)\n-      .addParametersMatcher(DOUBLE)\n-      .addParametersMatcher(FLOAT)\n-      .addParametersMatcher(\"int\")\n-      .addParametersMatcher(\"long\")\n-      .build();\n-\n-  private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE).build(),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build()\n+  private static final MethodMatcherCollection CONSTANT_WITH_LITERAL_METHODS = MethodMatcherCollection.create(\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(FLOAT),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(\"int\"),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(\"long\")\n   );\n \n-  private static final MethodMatchers CONSTANT_WITH_ZERO_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE).build(),\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE).build()\n+  private static final MethodMatcherCollection TRUNCATION_METHODS = MethodMatcherCollection.create(\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(CEIL).addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(CEIL).addParameter(FLOAT),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(FLOOR).addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(FLOOR).addParameter(FLOAT),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"rint\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ROUND).addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ROUND).addParameter(FLOAT)\n   );\n \n-  private static final MethodMatchers CONSTANT_WITH_ZERO_OR_ONE_METHODS =\n-    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE).build();\n+  private static final MethodMatcherCollection CONSTANT_WITH_ZERO_METHODS = MethodMatcherCollection.create(\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"atan2\").addParameter(DOUBLE).addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cos\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cosh\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"expm1\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sin\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sinh\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"tan\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"tanh\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"toRadians\").addParameter(DOUBLE)\n+  );\n+\n+  private static final MethodMatcherCollection CONSTANT_WITH_ZERO_OR_ONE_METHODS = MethodMatcherCollection.create(\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"acos\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"asin\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"atan\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cbrt\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"exp\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"log\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"log10\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sqrt\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"toDegrees\").addParameter(DOUBLE),\n+    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"exp\").addParameter(DOUBLE)\n+  );\n \n   @Override\n   public List<Tree.Kind> nodesToVisit() {\n", "next_change": {"commit": "4a84c87434472eb2815a9a8ba6c000a7bfcfe2e7", "changed_code": [{"header": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\nindex a140e6d14..b17d4ecdd 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n", "chunk": "@@ -49,47 +47,28 @@ public class ConstantMathCheck extends IssuableSubscriptionVisitor {\n   private static final String MATH_PACKAGE_NAME = \"java.lang.Math\";\n   private static final String ROUND = \"round\";\n \n-  private static final MethodMatcherCollection CONSTANT_WITH_LITERAL_METHODS = MethodMatcherCollection.create(\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(FLOAT),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(\"int\"),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ABS).addParameter(\"long\")\n+  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ABS)\n+      .addParametersMatcher(DOUBLE)\n+      .addParametersMatcher(FLOAT)\n+      .addParametersMatcher(\"int\")\n+      .addParametersMatcher(\"long\")\n+      .build();\n+\n+  private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT).build()\n   );\n \n-  private static final MethodMatcherCollection TRUNCATION_METHODS = MethodMatcherCollection.create(\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(CEIL).addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(CEIL).addParameter(FLOAT),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(FLOOR).addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(FLOOR).addParameter(FLOAT),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"rint\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ROUND).addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(ROUND).addParameter(FLOAT)\n+  private static final MethodMatchers CONSTANT_WITH_ZERO_METHODS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE).build(),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE).build()\n   );\n \n-  private static final MethodMatcherCollection CONSTANT_WITH_ZERO_METHODS = MethodMatcherCollection.create(\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"atan2\").addParameter(DOUBLE).addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cos\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cosh\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"expm1\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sin\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sinh\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"tan\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"tanh\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"toRadians\").addParameter(DOUBLE)\n-  );\n-\n-  private static final MethodMatcherCollection CONSTANT_WITH_ZERO_OR_ONE_METHODS = MethodMatcherCollection.create(\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"acos\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"asin\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"atan\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"cbrt\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"exp\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"log\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"log10\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"sqrt\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"toDegrees\").addParameter(DOUBLE),\n-    MethodMatcher.create().typeDefinition(MATH_PACKAGE_NAME).name(\"exp\").addParameter(DOUBLE)\n-  );\n+  private static final MethodMatchers CONSTANT_WITH_ZERO_OR_ONE_METHODS =\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE).build();\n \n   @Override\n   public List<Tree.Kind> nodesToVisit() {\n", "next_change": null}]}}]}}]}}]}}, {"oid": "8e2102d3372e861d21f74c1c03a4a64ed1eb4d44", "url": "https://github.com/SonarSource/sonar-java/commit/8e2102d3372e861d21f74c1c03a4a64ed1eb4d44", "message": "Deprecate old method matcher", "committedDate": "2020-03-19T07:57:32Z", "type": "forcePushed"}, {"oid": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "url": "https://github.com/SonarSource/sonar-java/commit/b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "message": "Fix form Michael review n\u00b01 (with missing .build())", "committedDate": "2020-03-19T16:14:36Z", "type": "forcePushed"}, {"oid": "35d4c46b761554d2703f8681d55b190ee9fce239", "url": "https://github.com/SonarSource/sonar-java/commit/35d4c46b761554d2703f8681d55b190ee9fce239", "message": "Add missing .build(), improve predicate performance when there's one element", "committedDate": "2020-03-19T17:46:13Z", "type": "forcePushed"}, {"oid": "3a52d3a1be33b534d729039d7736ec07ee194987", "url": "https://github.com/SonarSource/sonar-java/commit/3a52d3a1be33b534d729039d7736ec07ee194987", "message": "Replace MethodMatcher.create() by MethodMatchers.create() 6/703 remaining", "committedDate": "2020-03-20T16:37:50Z", "type": "forcePushed"}, {"oid": "b1a250df99c5d22a56999076a37099f4f3c2ab8a", "url": "https://github.com/SonarSource/sonar-java/commit/b1a250df99c5d22a56999076a37099f4f3c2ab8a", "message": "SONARJAVA-2357 Remove MethodMatcher, NameCriteria, TypeCriteria, ParametersCriteria", "committedDate": "2020-03-23T09:09:02Z", "type": "forcePushed"}, {"oid": "8345704e764a9855df75a107085ea61fd4e29a35", "url": "https://github.com/SonarSource/sonar-java/commit/8345704e764a9855df75a107085ea61fd4e29a35", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-23T10:05:04Z", "type": "forcePushed"}, {"oid": "a58f3963fee84b4a8f030861af8acf4baf8a1c8e", "url": "https://github.com/SonarSource/sonar-java/commit/a58f3963fee84b4a8f030861af8acf4baf8a1c8e", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-23T10:50:29Z", "type": "forcePushed"}, {"oid": "7ef09516cb06bf4ca002aab09fdf9eba6599dfd7", "url": "https://github.com/SonarSource/sonar-java/commit/7ef09516cb06bf4ca002aab09fdf9eba6599dfd7", "message": "SONARJAVA-2357 Provide MethodMatcher API to be used in custom rules", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "4a84c87434472eb2815a9a8ba6c000a7bfcfe2e7", "url": "https://github.com/SonarSource/sonar-java/commit/4a84c87434472eb2815a9a8ba6c000a7bfcfe2e7", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 1/2", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "efa5ba9772e87d8ba1278a298af30c79ae4455b6", "url": "https://github.com/SonarSource/sonar-java/commit/efa5ba9772e87d8ba1278a298af30c79ae4455b6", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "efa5ba9772e87d8ba1278a298af30c79ae4455b6", "url": "https://github.com/SonarSource/sonar-java/commit/efa5ba9772e87d8ba1278a298af30c79ae4455b6", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-24T07:22:37Z", "type": "forcePushed"}]}