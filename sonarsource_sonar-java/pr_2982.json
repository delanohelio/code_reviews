{"pr_number": 2982, "pr_title": "Regex/sebastian/improve parser", "pr_author": "sebastian-hungerecker-sonarsource", "pr_createdAt": "2020-06-03T12:49:05Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2982", "timeline": [{"oid": "9dc1a5030af5a2d3313fd75a92d40e0069ef27a7", "url": "https://github.com/SonarSource/sonar-java/commit/9dc1a5030af5a2d3313fd75a92d40e0069ef27a7", "message": "Handle Java string escape sequences in regex parser", "committedDate": "2020-06-03T12:51:02Z", "type": "commit"}, {"oid": "46274c8a91ca2bdb770aece46dc2e0981aaf604d", "url": "https://github.com/SonarSource/sonar-java/commit/46274c8a91ca2bdb770aece46dc2e0981aaf604d", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex", "committedDate": "2020-06-03T12:51:02Z", "type": "forcePushed"}, {"oid": "cd54df0444696cfef08bb38c9d2847afac49446a", "url": "https://github.com/SonarSource/sonar-java/commit/cd54df0444696cfef08bb38c9d2847afac49446a", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex", "committedDate": "2020-06-03T13:19:22Z", "type": "commit"}, {"oid": "cd54df0444696cfef08bb38c9d2847afac49446a", "url": "https://github.com/SonarSource/sonar-java/commit/cd54df0444696cfef08bb38c9d2847afac49446a", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex", "committedDate": "2020-06-03T13:19:22Z", "type": "forcePushed"}, {"oid": "7f3624588f307a670b1310327f46869926327dd9", "url": "https://github.com/SonarSource/sonar-java/commit/7f3624588f307a670b1310327f46869926327dd9", "message": "Support escaped meta characters in regex parser", "committedDate": "2020-06-03T15:28:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTEzMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435039131", "body": "Should be annotated with `@CheckForNull`", "bodyText": "Should be annotated with @CheckForNull", "bodyHTML": "<p dir=\"auto\">Should be annotated with <code>@CheckForNull</code></p>", "author": "m-g-sonar", "createdAt": "2020-06-04T07:12:40Z", "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {", "originalCommit": "7f3624588f307a670b1310327f46869926327dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTYyNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435039624", "body": "I would annotate this field with `@Nullable` and explicitly document when it will be null (end of source?)", "bodyText": "I would annotate this field with @Nullable and explicitly document when it will be null (end of source?)", "bodyHTML": "<p dir=\"auto\">I would annotate this field with <code>@Nullable</code> and explicitly document when it will be null (end of source?)</p>", "author": "m-g-sonar", "createdAt": "2020-06-04T07:13:37Z", "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;", "originalCommit": "7f3624588f307a670b1310327f46869926327dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MDIzMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435040231", "body": "Should be annotated with `@CheckForNull` as well, when encountering invalid string literals.", "bodyText": "Should be annotated with @CheckForNull as well, when encountering invalid string literals.", "bodyHTML": "<p dir=\"auto\">Should be annotated with <code>@CheckForNull</code> as well, when encountering invalid string literals.</p>", "author": "m-g-sonar", "createdAt": "2020-06-04T07:14:54Z", "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      return null;\n+    }\n+    if (javaCharacter.getCharacter() == '\\\\') {\n+      return parseJavaEscapeSequence(javaCharacter);\n+    }\n+    unicodeProcessedCharacters.moveNext();\n+    return javaCharacter;\n+  }\n+\n+  private JavaCharacter parseJavaEscapeSequence(JavaCharacter backslash) {", "originalCommit": "7f3624588f307a670b1310327f46869926327dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MzY3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435043670", "body": "I think I would move out of the `switch` the statement `unicodeProcessedCharacters.moveNext();`, I think it simplifies a bit:\r\n\r\n```\r\n    switch (ch) {\r\n      case 'n':\r\n        ch = '\\n';\r\n        break;\r\n      case 'r':\r\n        ch = '\\r';\r\n        break;\r\n      case 'f':\r\n        ch = '\\f';\r\n        break;\r\n      case 'b':\r\n        ch = '\\b';\r\n        break;\r\n      case 't':\r\n        ch = '\\t';\r\n        break;\r\n      default:\r\n        if (isOctalDigit(ch)) {\r\n          StringBuilder codeUnit = new StringBuilder(3);\r\n          for (int i = 0; i < 3 && javaCharacter != null && isOctalDigit(javaCharacter.getCharacter()); i++) {\r\n            codeUnit.append(javaCharacter.getCharacter());\r\n            unicodeProcessedCharacters.moveNext();\r\n            javaCharacter = unicodeProcessedCharacters.getCurrent();\r\n          }\r\n          ch = (char) Integer.parseInt(codeUnit.toString(), 8);\r\n          return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\r\n        }\r\n    }\r\n    unicodeProcessedCharacters.moveNext();\r\n    return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\r\n```", "bodyText": "I think I would move out of the switch the statement unicodeProcessedCharacters.moveNext();, I think it simplifies a bit:\n    switch (ch) {\n      case 'n':\n        ch = '\\n';\n        break;\n      case 'r':\n        ch = '\\r';\n        break;\n      case 'f':\n        ch = '\\f';\n        break;\n      case 'b':\n        ch = '\\b';\n        break;\n      case 't':\n        ch = '\\t';\n        break;\n      default:\n        if (isOctalDigit(ch)) {\n          StringBuilder codeUnit = new StringBuilder(3);\n          for (int i = 0; i < 3 && javaCharacter != null && isOctalDigit(javaCharacter.getCharacter()); i++) {\n            codeUnit.append(javaCharacter.getCharacter());\n            unicodeProcessedCharacters.moveNext();\n            javaCharacter = unicodeProcessedCharacters.getCurrent();\n          }\n          ch = (char) Integer.parseInt(codeUnit.toString(), 8);\n          return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\n        }\n    }\n    unicodeProcessedCharacters.moveNext();\n    return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);", "bodyHTML": "<p dir=\"auto\">I think I would move out of the <code>switch</code> the statement <code>unicodeProcessedCharacters.moveNext();</code>, I think it simplifies a bit:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    switch (ch) {\n      case 'n':\n        ch = '\\n';\n        break;\n      case 'r':\n        ch = '\\r';\n        break;\n      case 'f':\n        ch = '\\f';\n        break;\n      case 'b':\n        ch = '\\b';\n        break;\n      case 't':\n        ch = '\\t';\n        break;\n      default:\n        if (isOctalDigit(ch)) {\n          StringBuilder codeUnit = new StringBuilder(3);\n          for (int i = 0; i &lt; 3 &amp;&amp; javaCharacter != null &amp;&amp; isOctalDigit(javaCharacter.getCharacter()); i++) {\n            codeUnit.append(javaCharacter.getCharacter());\n            unicodeProcessedCharacters.moveNext();\n            javaCharacter = unicodeProcessedCharacters.getCurrent();\n          }\n          ch = (char) Integer.parseInt(codeUnit.toString(), 8);\n          return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\n        }\n    }\n    unicodeProcessedCharacters.moveNext();\n    return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\"><pre><code>    switch (ch) {\n      case 'n':\n        ch = '\\n';\n        break;\n      case 'r':\n        ch = '\\r';\n        break;\n      case 'f':\n        ch = '\\f';\n        break;\n      case 'b':\n        ch = '\\b';\n        break;\n      case 't':\n        ch = '\\t';\n        break;\n      default:\n        if (isOctalDigit(ch)) {\n          StringBuilder codeUnit = new StringBuilder(3);\n          for (int i = 0; i &lt; 3 &amp;&amp; javaCharacter != null &amp;&amp; isOctalDigit(javaCharacter.getCharacter()); i++) {\n            codeUnit.append(javaCharacter.getCharacter());\n            unicodeProcessedCharacters.moveNext();\n            javaCharacter = unicodeProcessedCharacters.getCurrent();\n          }\n          ch = (char) Integer.parseInt(codeUnit.toString(), 8);\n          return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\n        }\n    }\n    unicodeProcessedCharacters.moveNext();\n    return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\n</code></pre></div>", "author": "m-g-sonar", "createdAt": "2020-06-04T07:21:45Z", "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      return null;\n+    }\n+    if (javaCharacter.getCharacter() == '\\\\') {\n+      return parseJavaEscapeSequence(javaCharacter);\n+    }\n+    unicodeProcessedCharacters.moveNext();\n+    return javaCharacter;\n+  }\n+\n+  private JavaCharacter parseJavaEscapeSequence(JavaCharacter backslash) {\n+    unicodeProcessedCharacters.moveNext();\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      // Should only happen in case of syntactically invalid string literals\n+      return null;\n+    }\n+    char ch = javaCharacter.getCharacter();\n+    switch (ch) {\n+      case 'n':\n+        ch = '\\n';\n+        unicodeProcessedCharacters.moveNext();", "originalCommit": "7f3624588f307a670b1310327f46869926327dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34b560f2acc1b83e675098a05a691befe2b0a69d", "url": "https://github.com/SonarSource/sonar-java/commit/34b560f2acc1b83e675098a05a691befe2b0a69d", "message": "Fixes from review", "committedDate": "2020-06-04T08:43:53Z", "type": "commit"}, {"oid": "34b560f2acc1b83e675098a05a691befe2b0a69d", "url": "https://github.com/SonarSource/sonar-java/commit/34b560f2acc1b83e675098a05a691befe2b0a69d", "message": "Fixes from review", "committedDate": "2020-06-04T08:43:53Z", "type": "forcePushed"}]}