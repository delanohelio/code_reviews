{"pr_number": 3291, "pr_title": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "pr_author": "margarita-nedzelska-sonarsource", "pr_createdAt": "2020-11-20T09:48:59Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3291", "timeline": [{"oid": "1f2885adca0be947e261b5b2fbb544edc4cd302c", "url": "https://github.com/SonarSource/sonar-java/commit/1f2885adca0be947e261b5b2fbb544edc4cd302c", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T10:50:12Z", "type": "forcePushed"}, {"oid": "2080118475ada9f5a7e786eaf3964d5436acab47", "url": "https://github.com/SonarSource/sonar-java/commit/2080118475ada9f5a7e786eaf3964d5436acab47", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T10:58:03Z", "type": "forcePushed"}, {"oid": "83a7db4097cfdc752ce6c903533fd1d0f4eab57d", "url": "https://github.com/SonarSource/sonar-java/commit/83a7db4097cfdc752ce6c903533fd1d0f4eab57d", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T12:25:48Z", "type": "forcePushed"}, {"oid": "8d407f508fb86c8170c79718885ac2cf5da131a0", "url": "https://github.com/SonarSource/sonar-java/commit/8d407f508fb86c8170c79718885ac2cf5da131a0", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T12:59:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMjE1MA==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527722150", "body": "```suggestion\r\n    return i -> (R) i; // Compliant, 'R.class::cast' won't compile.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return i -> (R) i; // Compliant, 'R.class::cast' wont compile.\n          \n          \n            \n                return i -> (R) i; // Compliant, 'R.class::cast' won't compile.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (<span class=\"pl-smi\">R</span>) i; <span class=\"pl-c\"><span class=\"pl-c\">//</span> Compliant, 'R.class::cast' <span class=\"x x-first x-last\">wont</span> compile.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (<span class=\"pl-smi\">R</span>) i; <span class=\"pl-c\"><span class=\"pl-c\">//</span> Compliant, 'R.class::cast' <span class=\"x x-first x-last\">won't</span> compile.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T14:19:25Z", "path": "java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java", "diffHunk": "@@ -143,6 +165,10 @@ void test2(Object param) {\n     });\n   }\n \n+  private static <I, R> Function<I, R> castingIdentity() {\n+    return i -> (R) i; // Compliant, 'R.class::cast' wont compile.", "originalCommit": "8d407f508fb86c8170c79718885ac2cf5da131a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527743589", "body": "There is no such thing as an IdentifierTree not being an `IdentifierTreeImpl`, so the first test is useless.\r\n\r\nNow, I'm afraid I don't understand what you try to achieve here.\r\nTesting if we are in the presence of a raw type of a generic type? For instance `(List) obj` ?\r\nWhatever it is, we have a way to express this through our own API rather than relying on the `toString()` of the eclipse binding.", "bodyText": "There is no such thing as an IdentifierTree not being an IdentifierTreeImpl, so the first test is useless.\nNow, I'm afraid I don't understand what you try to achieve here.\nTesting if we are in the presence of a raw type of a generic type? For instance (List) obj ?\nWhatever it is, we have a way to express this through our own API rather than relying on the toString() of the eclipse binding.", "bodyHTML": "<p dir=\"auto\">There is no such thing as an IdentifierTree not being an <code>IdentifierTreeImpl</code>, so the first test is useless.</p>\n<p dir=\"auto\">Now, I'm afraid I don't understand what you try to achieve here.<br>\nTesting if we are in the presence of a raw type of a generic type? For instance <code>(List) obj</code> ?<br>\nWhatever it is, we have a way to express this through our own API rather than relying on the <code>toString()</code> of the eclipse binding.</p>", "author": "m-g-sonar", "createdAt": "2020-11-20T14:51:46Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java", "diffHunk": "@@ -130,12 +135,32 @@ private static boolean nullAgainstParam(ExpressionTree o1, ExpressionTree o2, Sy\n     if (expr.is(Tree.Kind.TYPE_CAST)) {\n       TypeCastTree typeCastTree = (TypeCastTree) expr;\n       if (isSingleParamCast(typeCastTree.expression(), symbol)) {\n-        return Optional.of(typeCastTree.type().symbolType().name());\n+        return getTypeName(typeCastTree.type());\n       }\n     }\n     return Optional.empty();\n   }\n+  \n+  private static Optional<String> getTypeName(TypeTree type) {\n+    if (type.is(Tree.Kind.PARAMETERIZED_TYPE)) {\n+      type = ((ParameterizedTypeTree) type).type();\n+    }\n+    if (type.is(Tree.Kind.IDENTIFIER) && !isGeneric((IdentifierTree) type)) {\n+      return Optional.of(((IdentifierTree) type).name());\n+    }\n+    if (type.is(Tree.Kind.ARRAY_TYPE)) {\n+      return getTypeName(((ArrayTypeTree) type).type()).map(x -> x + \"[]\");\n+    }\n+    if (type.is(Tree.Kind.PRIMITIVE_TYPE)) {\n+      return Optional.of(((PrimitiveTypeTree) type).keyword().text());\n+    }\n+    return Optional.empty();\n+  }\n \n+  private static boolean isGeneric(IdentifierTree identifierTree) {\n+    return (identifierTree instanceof IdentifierTreeImpl) && ((IdentifierTreeImpl) identifierTree).binding.toString().matches(\"<[A-Z]>\");", "originalCommit": "395d42ce77e3243e8481cdd06702c9051121ebc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0NjYwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527746600", "bodyText": "That's a case when we're inside a parametrized method\n  private static <I, R> Function<I, R> castingIdentity() {\n    return i -> (R) i; // Compliant, 'R.class::cast' wont compile.\n  }\n\n'R.class' doesn't compile, but it's still catched as identifier.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T14:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MTk2Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527751966", "bodyText": "So I think this method should help:\nhttps://github.com/SonarSource/sonar-java/blob/master/java-frontend/src/main/java/org/sonar/java/model/JUtils.java#L94\nWhich would make:\nreturn JUtils.isTypeVar(identiferTree.symbolType());", "author": "m-g-sonar", "createdAt": "2020-11-20T15:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2MzIwMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527763202", "bodyText": "Thanks, That helped :)", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T15:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}], "type": "inlineReview"}, {"oid": "7cd57dfb2a1e470b8472cb66ac6dbea253e4ffa8", "url": "https://github.com/SonarSource/sonar-java/commit/7cd57dfb2a1e470b8472cb66ac6dbea253e4ffa8", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "1fa7d2560ca23d1f7116491f6450f78a27768796", "url": "https://github.com/SonarSource/sonar-java/commit/1fa7d2560ca23d1f7116491f6450f78a27768796", "message": "Update java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "cf226f67435570105b7822221e8dab329f98426e", "url": "https://github.com/SonarSource/sonar-java/commit/cf226f67435570105b7822221e8dab329f98426e", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "cf226f67435570105b7822221e8dab329f98426e", "url": "https://github.com/SonarSource/sonar-java/commit/cf226f67435570105b7822221e8dab329f98426e", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "forcePushed"}]}