{"pr_number": 54473, "pr_title": "Introduce autoscaling policies", "pr_author": "jasontedor", "pr_createdAt": "2020-03-31T01:29:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54473", "timeline": [{"oid": "0cd6321d06620f9a807eef8ab5f0f876a6d16f10", "url": "https://github.com/elastic/elasticsearch/commit/0cd6321d06620f9a807eef8ab5f0f876a6d16f10", "message": "Introduce autoscaling policies\n\nThis commit is the first in a series of commits that introduces\nautoscaling policies, and APIs for working with them. For now, we\nintroduce the basic infrastructure, and a single API for putting an\nautoscaling policy. We will follow in rapid succession with APIs for\ngetting, and deleting autoscaling policies.", "committedDate": "2020-03-31T01:25:20Z", "type": "commit"}, {"oid": "9e102e91e190b74ece418dfe0a14e6c7bc895c3a", "url": "https://github.com/elastic/elasticsearch/commit/9e102e91e190b74ece418dfe0a14e6c7bc895c3a", "message": "Fix typo in file name", "committedDate": "2020-03-31T01:40:24Z", "type": "commit"}, {"oid": "c731ca2d90cbcb550cd4a3b846a279d721fd1766", "url": "https://github.com/elastic/elasticsearch/commit/c731ca2d90cbcb550cd4a3b846a279d721fd1766", "message": "Merge branch 'master' into autoscaling-policy", "committedDate": "2020-03-31T02:10:29Z", "type": "commit"}, {"oid": "e8a46497136a6a63009b335d075c578196a60116", "url": "https://github.com/elastic/elasticsearch/commit/e8a46497136a6a63009b335d075c578196a60116", "message": "Revert inadvertent change to test runs", "committedDate": "2020-03-31T02:57:56Z", "type": "commit"}, {"oid": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "url": "https://github.com/elastic/elasticsearch/commit/c83985f0084c2dff40ad8ba2a30a8c8981023890", "message": "Fix compilation", "committedDate": "2020-03-31T03:07:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwODAzMA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400708030", "body": "I wonder if this needs to be a sorted map or if a plain map could work out? I think decisions should work the same regardless, favoring `up` over `down` over `no` scale.", "bodyText": "I wonder if this needs to be a sorted map or if a plain map could work out? I think decisions should work the same regardless, favoring up over down over no scale.", "bodyHTML": "<p dir=\"auto\">I wonder if this needs to be a sorted map or if a plain map could work out? I think decisions should work the same regardless, favoring <code>up</code> over <code>down</code> over <code>no</code> scale.</p>", "author": "henningandersen", "createdAt": "2020-03-31T07:47:53Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingMetadata.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.cluster.DiffableUtils;\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class AutoscalingMetadata implements MetaData.Custom {\n+\n+    public static final String NAME = \"autoscaling\";\n+\n+    public static final ParseField POLICIES_FIELD = new ParseField(\"policies\");\n+    public static final AutoscalingMetadata EMPTY = new AutoscalingMetadata(Collections.emptySortedMap());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AutoscalingMetadata, Void> PARSER = new ConstructingObjectParser<>(\n+        NAME,\n+        c -> new AutoscalingMetadata(\n+            new TreeMap<>(\n+                ((List<AutoscalingPolicyMetadata>) c[0]).stream().collect(Collectors.toMap(p -> p.policy().name(), Function.identity()))\n+            )\n+        )\n+    );\n+\n+    static {\n+        PARSER.declareNamedObjects(\n+            ConstructingObjectParser.constructorArg(),\n+            (p, c, n) -> AutoscalingPolicyMetadata.parse(p, n),\n+            POLICIES_FIELD\n+        );\n+    }\n+\n+    public static AutoscalingMetadata parse(final XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    private final SortedMap<String, AutoscalingPolicyMetadata> policies;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401306091", "bodyText": "I prefer sorted maps because it gives consistent and predictable output. It's not necessary, it's just a preference.", "author": "jasontedor", "createdAt": "2020-04-01T01:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwODAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxODA4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400718084", "body": "I think we should check for metadata write block like we do elsewhere?\r\n\r\n```suggestion\r\n        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);\r\n```\r\n", "bodyText": "I think we should check for metadata write block like we do elsewhere?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);", "bodyHTML": "<p dir=\"auto\">I think we should check for metadata write block like we do elsewhere?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1 x x-first x-last\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"x x-first\">state</span><span class=\"pl-k x\">.</span><span class=\"x\">blocks()</span><span class=\"pl-k x\">.</span><span class=\"x\">globalBlockedException(</span><span class=\"pl-smi x\">ClusterBlockLevel</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">METADATA_WRITE</span></span><span class=\"x x-last\">)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "henningandersen", "createdAt": "2020-03-31T08:05:00Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/TransportPutAutoscalingPolicyAction.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.cluster.AckedClusterStateUpdateTask;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingMetadata;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+public class TransportPutAutoscalingPolicyAction extends TransportMasterNodeAction<\n+    PutAutoscalingPolicyAction.Request,\n+    AcknowledgedResponse> {\n+\n+    private final Logger logger = LogManager.getLogger(TransportPutAutoscalingPolicyAction.class);\n+\n+    @Inject\n+    public TransportPutAutoscalingPolicyAction(\n+        final TransportService transportService,\n+        final ClusterService clusterService,\n+        final ThreadPool threadPool,\n+        final ActionFilters actionFilters,\n+        final IndexNameExpressionResolver indexNameExpressionResolver\n+    ) {\n+        super(\n+            PutAutoscalingPolicyAction.NAME,\n+            transportService,\n+            clusterService,\n+            threadPool,\n+            actionFilters,\n+            PutAutoscalingPolicyAction.Request::new,\n+            indexNameExpressionResolver\n+        );\n+    }\n+\n+    @Override\n+    protected String executor() {\n+        return ThreadPool.Names.SAME;\n+    }\n+\n+    @Override\n+    protected AcknowledgedResponse read(final StreamInput in) throws IOException {\n+        return new AcknowledgedResponse(in);\n+    }\n+\n+    @Override\n+    protected void masterOperation(\n+        final Task task,\n+        final PutAutoscalingPolicyAction.Request request,\n+        final ClusterState state,\n+        final ActionListener<AcknowledgedResponse> listener\n+    ) {\n+        clusterService.submitStateUpdateTask(\"put-autoscaling-policy\", new AckedClusterStateUpdateTask<>(request, listener) {\n+\n+            @Override\n+            protected AcknowledgedResponse newResponse(final boolean acknowledged) {\n+                return new AcknowledgedResponse(acknowledged);\n+            }\n+\n+            @Override\n+            public ClusterState execute(final ClusterState currentState) {\n+                return putAutoscalingPolicy(currentState, request.policy(), logger);\n+            }\n+\n+        });\n+    }\n+\n+    @Override\n+    protected ClusterBlockException checkBlock(final PutAutoscalingPolicyAction.Request request, final ClusterState state) {\n+        return null;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMjA5NA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400732094", "body": "nit: typo, should be `mutateAutoscalingDeciders`", "bodyText": "nit: typo, should be mutateAutoscalingDeciders", "bodyHTML": "<p dir=\"auto\">nit: typo, should be <code>mutateAutoscalingDeciders</code></p>", "author": "henningandersen", "createdAt": "2020-03-31T08:28:12Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingTestCase.java", "diffHunk": "@@ -53,4 +62,50 @@ static AutoscalingDecisions randomAutoscalingDecisions(\n         return new AutoscalingDecisions(decisions);\n     }\n \n+    public static List<AutoscalingDecider> randomAutoscalingDeciders() {\n+        return List.of(new AlwaysAutoscalingDecider());\n+    }\n+\n+    public static AutoscalingPolicy randomAutoscalingPolicy() {\n+        return randomAutoscalingPolicyOfName(randomAlphaOfLength(8));\n+    }\n+\n+    public static AutoscalingPolicy randomAutoscalingPolicyOfName(final String name) {\n+        return new AutoscalingPolicy(name, randomAutoscalingDeciders());\n+    }\n+\n+    public static AutoscalingPolicy mutateAutoscalingPolicy(final AutoscalingPolicy instance) {\n+        final List<AutoscalingDecider> deciders;\n+        if (randomBoolean()) {\n+            // if the policy name did not change, or randomly, use a mutated set of deciders\n+            deciders = mutateAutoscailngDeciders(instance.deciders());\n+        } else {\n+            deciders = instance.deciders();\n+        }\n+        return new AutoscalingPolicy(randomAlphaOfLength(8), deciders);\n+    }\n+\n+    public static List<AutoscalingDecider> mutateAutoscailngDeciders(final List<AutoscalingDecider> deciders) {", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTEzNw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400739137", "body": "At the REST layer, we use a map from decider name to decider details, whereas here we use a list. I think we should align the two.\r\n\r\nI find it hard to imagine using the same decider twice in a single policy. The only case I can think of is a compound decider that decides based on the result of other more basic deciders, like \"only scale up if needed by all inner deciders\" or \"allow scale down if one of these deciders allow it\".\r\n\r\nI think I prefer the map style and not allowing such compound deciders in the future.", "bodyText": "At the REST layer, we use a map from decider name to decider details, whereas here we use a list. I think we should align the two.\nI find it hard to imagine using the same decider twice in a single policy. The only case I can think of is a compound decider that decides based on the result of other more basic deciders, like \"only scale up if needed by all inner deciders\" or \"allow scale down if one of these deciders allow it\".\nI think I prefer the map style and not allowing such compound deciders in the future.", "bodyHTML": "<p dir=\"auto\">At the REST layer, we use a map from decider name to decider details, whereas here we use a list. I think we should align the two.</p>\n<p dir=\"auto\">I find it hard to imagine using the same decider twice in a single policy. The only case I can think of is a compound decider that decides based on the result of other more basic deciders, like \"only scale up if needed by all inner deciders\" or \"allow scale down if one of these deciders allow it\".</p>\n<p dir=\"auto\">I think I prefer the map style and not allowing such compound deciders in the future.</p>", "author": "henningandersen", "createdAt": "2020-03-31T08:39:40Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.policy;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diffable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.decision.AutoscalingDecider;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class AutoscalingPolicy extends AbstractDiffable<AutoscalingPolicy> implements Diffable<AutoscalingPolicy>, ToXContentObject {\n+\n+    public static final String NAME = \"autoscaling_policy\";\n+\n+    public static final ParseField DECIDERS_FIELD = new ParseField(\"deciders\");\n+\n+    public static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;\n+\n+    static {\n+        PARSER = new ConstructingObjectParser<>(NAME, false, (c, name) -> {\n+            @SuppressWarnings(\"unchecked\")\n+            final List<AutoscalingDecider> deciders = (List<AutoscalingDecider>) c[0];\n+            return new AutoscalingPolicy(name, deciders);\n+        });\n+        PARSER.declareNamedObjects(\n+            ConstructingObjectParser.constructorArg(),\n+            (p, c, n) -> p.namedObject(AutoscalingDecider.class, n, null),\n+            DECIDERS_FIELD\n+        );\n+    }\n+\n+    public static AutoscalingPolicy parse(final XContentParser parser, final String name) {\n+        return PARSER.apply(parser, name);\n+    }\n+\n+    private final String name;\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    private final List<AutoscalingDecider> deciders;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjEzMw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401306133", "bodyText": "I changed this to a map.", "author": "jasontedor", "createdAt": "2020-04-01T01:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1NzMyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400757329", "body": "Looking at other mutate functions, they seem to be more sure of returning an unequal instance. I guess it is very unlikely with 8 random chars, but think it would be more clear if we append something to the existing name instead?", "bodyText": "Looking at other mutate functions, they seem to be more sure of returning an unequal instance. I guess it is very unlikely with 8 random chars, but think it would be more clear if we append something to the existing name instead?", "bodyHTML": "<p dir=\"auto\">Looking at other mutate functions, they seem to be more sure of returning an unequal instance. I guess it is very unlikely with 8 random chars, but think it would be more clear if we append something to the existing name instead?</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:09:08Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingTestCase.java", "diffHunk": "@@ -53,4 +62,50 @@ static AutoscalingDecisions randomAutoscalingDecisions(\n         return new AutoscalingDecisions(decisions);\n     }\n \n+    public static List<AutoscalingDecider> randomAutoscalingDeciders() {\n+        return List.of(new AlwaysAutoscalingDecider());\n+    }\n+\n+    public static AutoscalingPolicy randomAutoscalingPolicy() {\n+        return randomAutoscalingPolicyOfName(randomAlphaOfLength(8));\n+    }\n+\n+    public static AutoscalingPolicy randomAutoscalingPolicyOfName(final String name) {\n+        return new AutoscalingPolicy(name, randomAutoscalingDeciders());\n+    }\n+\n+    public static AutoscalingPolicy mutateAutoscalingPolicy(final AutoscalingPolicy instance) {\n+        final List<AutoscalingDecider> deciders;\n+        if (randomBoolean()) {\n+            // if the policy name did not change, or randomly, use a mutated set of deciders\n+            deciders = mutateAutoscailngDeciders(instance.deciders());\n+        } else {\n+            deciders = instance.deciders();\n+        }\n+        return new AutoscalingPolicy(randomAlphaOfLength(8), deciders);", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1ODQ3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400758474", "body": "Depending on the list vs map discussion (see other comment), we could maybe add a random number of always deciders here.", "bodyText": "Depending on the list vs map discussion (see other comment), we could maybe add a random number of always deciders here.", "bodyHTML": "<p dir=\"auto\">Depending on the list vs map discussion (see other comment), we could maybe add a random number of always deciders here.</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:11:04Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingTestCase.java", "diffHunk": "@@ -53,4 +62,50 @@ static AutoscalingDecisions randomAutoscalingDecisions(\n         return new AutoscalingDecisions(decisions);\n     }\n \n+    public static List<AutoscalingDecider> randomAutoscalingDeciders() {\n+        return List.of(new AlwaysAutoscalingDecider());", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjE3OA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401306178", "bodyText": "I made this a map.", "author": "jasontedor", "createdAt": "2020-04-01T01:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1ODQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NzY4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400767681", "body": "I think we write the policy name twice on the stream, both here and in `AutoscalingPolicy.writeTo`. It looks easy to avoid and if so, I would prefer that. Otherwise, it is not a big deal.", "bodyText": "I think we write the policy name twice on the stream, both here and in AutoscalingPolicy.writeTo. It looks easy to avoid and if so, I would prefer that. Otherwise, it is not a big deal.", "bodyHTML": "<p dir=\"auto\">I think we write the policy name twice on the stream, both here and in <code>AutoscalingPolicy.writeTo</code>. It looks easy to avoid and if so, I would prefer that. Otherwise, it is not a big deal.</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:25:43Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingMetadata.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.cluster.DiffableUtils;\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class AutoscalingMetadata implements MetaData.Custom {\n+\n+    public static final String NAME = \"autoscaling\";\n+\n+    public static final ParseField POLICIES_FIELD = new ParseField(\"policies\");\n+    public static final AutoscalingMetadata EMPTY = new AutoscalingMetadata(Collections.emptySortedMap());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AutoscalingMetadata, Void> PARSER = new ConstructingObjectParser<>(\n+        NAME,\n+        c -> new AutoscalingMetadata(\n+            new TreeMap<>(\n+                ((List<AutoscalingPolicyMetadata>) c[0]).stream().collect(Collectors.toMap(p -> p.policy().name(), Function.identity()))\n+            )\n+        )\n+    );\n+\n+    static {\n+        PARSER.declareNamedObjects(\n+            ConstructingObjectParser.constructorArg(),\n+            (p, c, n) -> AutoscalingPolicyMetadata.parse(p, n),\n+            POLICIES_FIELD\n+        );\n+    }\n+\n+    public static AutoscalingMetadata parse(final XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    private final SortedMap<String, AutoscalingPolicyMetadata> policies;\n+\n+    public SortedMap<String, AutoscalingPolicyMetadata> policies() {\n+        return policies;\n+    }\n+\n+    public AutoscalingMetadata(final SortedMap<String, AutoscalingPolicyMetadata> policies) {\n+        this.policies = policies;\n+    }\n+\n+    public AutoscalingMetadata(final StreamInput in) throws IOException {\n+        final int size = in.readVInt();\n+        final SortedMap<String, AutoscalingPolicyMetadata> policies = new TreeMap<>();\n+        for (int i = 0; i < size; i++) {\n+            policies.put(in.readString(), new AutoscalingPolicyMetadata(in));\n+        }\n+        this.policies = policies;\n+    }\n+\n+    @Override\n+    public void writeTo(final StreamOutput out) throws IOException {\n+        out.writeVInt(policies.size());\n+        for (final Map.Entry<String, AutoscalingPolicyMetadata> policy : policies.entrySet()) {\n+            out.writeString(policy.getKey());", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDU5OA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400770598", "body": "I think this could be private?\r\n\r\n```suggestion\r\n    private static final ParseField POLICIES_FIELD = new ParseField(\"policies\");\r\n```", "bodyText": "I think this could be private?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final ParseField POLICIES_FIELD = new ParseField(\"policies\");\n          \n          \n            \n                private static final ParseField POLICIES_FIELD = new ParseField(\"policies\");", "bodyHTML": "<p dir=\"auto\">I think this could be private?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ParseField</span> <span class=\"pl-c1\">POLICIES_FIELD</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParseField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>policies<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ParseField</span> <span class=\"pl-c1\">POLICIES_FIELD</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParseField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>policies<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "henningandersen", "createdAt": "2020-03-31T09:30:21Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingMetadata.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.cluster.DiffableUtils;\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class AutoscalingMetadata implements MetaData.Custom {\n+\n+    public static final String NAME = \"autoscaling\";\n+\n+    public static final ParseField POLICIES_FIELD = new ParseField(\"policies\");", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MTk0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400771945", "body": "I think this could be private too? The usage in `Autoscaling` could use the `AutoscalingMetadata.parse` method instead.", "bodyText": "I think this could be private too? The usage in Autoscaling could use the AutoscalingMetadata.parse method instead.", "bodyHTML": "<p dir=\"auto\">I think this could be private too? The usage in <code>Autoscaling</code> could use the <code>AutoscalingMetadata.parse</code> method instead.</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:32:31Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingMetadata.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.cluster.DiffableUtils;\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class AutoscalingMetadata implements MetaData.Custom {\n+\n+    public static final String NAME = \"autoscaling\";\n+\n+    public static final ParseField POLICIES_FIELD = new ParseField(\"policies\");\n+    public static final AutoscalingMetadata EMPTY = new AutoscalingMetadata(Collections.emptySortedMap());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AutoscalingMetadata, Void> PARSER = new ConstructingObjectParser<>(", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400775063", "body": "It would be weird to have a policy with no deciders (and I think `AutoscalingDecisions` require at least one anyway). Maybe we should validate that here?", "bodyText": "It would be weird to have a policy with no deciders (and I think AutoscalingDecisions require at least one anyway). Maybe we should validate that here?", "bodyHTML": "<p dir=\"auto\">It would be weird to have a policy with no deciders (and I think <code>AutoscalingDecisions</code> require at least one anyway). Maybe we should validate that here?</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:37:26Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PutAutoscalingPolicyAction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedRequest;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+import java.io.IOException;\n+\n+public class PutAutoscalingPolicyAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final PutAutoscalingPolicyAction INSTANCE = new PutAutoscalingPolicyAction();\n+    public static final String NAME = \"cluster:admin/autoscaling/put_autoscaling_policy\";\n+\n+    private PutAutoscalingPolicyAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+\n+    public static class Request extends AcknowledgedRequest<Request> implements ToXContentObject {\n+\n+        static final ParseField POLICY_FIELD = new ParseField(\"policy\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private static final ConstructingObjectParser<Request, String> PARSER = new ConstructingObjectParser<>(\n+            \"put_autoscaling_policy_request\",\n+            a -> new Request((AutoscalingPolicy) a[0])\n+        );\n+\n+        static {\n+            PARSER.declareObject(ConstructingObjectParser.constructorArg(), AutoscalingPolicy::parse, POLICY_FIELD);\n+        }\n+\n+        public static Request parse(final XContentParser parser, final String name) {\n+            return PARSER.apply(parser, name);\n+        }\n+\n+        private final AutoscalingPolicy policy;\n+\n+        public AutoscalingPolicy policy() {\n+            return policy;\n+        }\n+\n+        public Request(final AutoscalingPolicy policy) {\n+            this.policy = policy;\n+        }\n+\n+        public Request(final StreamInput in) throws IOException {\n+            super(in);\n+            policy = new AutoscalingPolicy(in);\n+        }\n+\n+        @Override\n+        public void writeTo(final StreamOutput out) throws IOException {\n+            super.writeTo(out);\n+            policy.writeTo(out);\n+        }\n+\n+        @Override\n+        public ActionRequestValidationException validate() {\n+            return null;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwOTI0MA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401309240", "bodyText": "I think we can add validation for this later.", "author": "jasontedor", "createdAt": "2020-04-01T01:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NTA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjMyOA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400776328", "body": "nit: I think this could be static?", "bodyText": "nit: I think this could be static?", "bodyHTML": "<p dir=\"auto\">nit: I think this could be static?</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:39:30Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/TransportPutAutoscalingPolicyAction.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.cluster.AckedClusterStateUpdateTask;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingMetadata;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicyMetadata;\n+\n+import java.io.IOException;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+public class TransportPutAutoscalingPolicyAction extends TransportMasterNodeAction<\n+    PutAutoscalingPolicyAction.Request,\n+    AcknowledgedResponse> {\n+\n+    private final Logger logger = LogManager.getLogger(TransportPutAutoscalingPolicyAction.class);", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NDA1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400784059", "body": "nit:\r\n\r\n```suggestion\r\n * Represents an autoscaling decider, a component that determines whether or not to scale.\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents an autoscaling decider, a component that determines whether or not scale.\n          \n          \n            \n             * Represents an autoscaling decider, a component that determines whether or not to scale.", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Represents</span> an autoscaling decider, a component that determines whether or not scale.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Represents</span> an autoscaling decider, a component that determines whether or not <span class=\"x x-first x-last\">to </span>scale.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "henningandersen", "createdAt": "2020-03-31T09:51:51Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/decision/AutoscalingDecider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.decision;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+/**\n+ * Represents an autoscaling decider, a component that determines whether or not scale.", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400786371", "body": "We can work out the details in follow-ups, but I think this might need to either be passed a suitable context or have some other way of being passed the current state. The current state includes cluster state and cluster info, but the decider will also require access to services like `MetaDataRolloverService`.", "bodyText": "We can work out the details in follow-ups, but I think this might need to either be passed a suitable context or have some other way of being passed the current state. The current state includes cluster state and cluster info, but the decider will also require access to services like MetaDataRolloverService.", "bodyHTML": "<p dir=\"auto\">We can work out the details in follow-ups, but I think this might need to either be passed a suitable context or have some other way of being passed the current state. The current state includes cluster state and cluster info, but the decider will also require access to services like <code>MetaDataRolloverService</code>.</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:55:26Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/decision/AutoscalingDecider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.decision;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+/**\n+ * Represents an autoscaling decider, a component that determines whether or not scale.\n+ */\n+public interface AutoscalingDecider extends ToXContentObject, NamedWriteable {\n+\n+    /**\n+     * The name of the autoscaling decider.\n+     *\n+     * @return the name\n+     */\n+    String name();\n+\n+    /**\n+     * Whether or not to scale based on the current state.\n+     *\n+     * @return the autoscaling decision\n+     */\n+    AutoscalingDecision scale();", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1Mzc0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401253745", "bodyText": "I agree, it's a matter of figuring out what the context is over time, as we add real deciders.", "author": "jasontedor", "createdAt": "2020-03-31T22:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NzA0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400787045", "body": "I think this could be private?\r\n```suggestion\r\n    private static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;\r\n```", "bodyText": "I think this could be private?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;\n          \n          \n            \n                private static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;", "bodyHTML": "<p dir=\"auto\">I think this could be private?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">ConstructingObjectParser&lt;<span class=\"pl-smi\">AutoscalingPolicy</span>, <span class=\"pl-smi\">String</span>&gt;</span> <span class=\"pl-c1\">PARSER</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">ConstructingObjectParser&lt;<span class=\"pl-smi\">AutoscalingPolicy</span>, <span class=\"pl-smi\">String</span>&gt;</span> <span class=\"pl-c1\">PARSER</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "henningandersen", "createdAt": "2020-03-31T09:56:33Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.policy;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diffable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.decision.AutoscalingDecider;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class AutoscalingPolicy extends AbstractDiffable<AutoscalingPolicy> implements Diffable<AutoscalingPolicy>, ToXContentObject {\n+\n+    public static final String NAME = \"autoscaling_policy\";\n+\n+    public static final ParseField DECIDERS_FIELD = new ParseField(\"deciders\");\n+\n+    public static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4ODYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400788630", "body": "Is empty deciders allowed? I think it is used by tests now.", "bodyText": "Is empty deciders allowed? I think it is used by tests now.", "bodyHTML": "<p dir=\"auto\">Is empty deciders allowed? I think it is used by tests now.</p>", "author": "henningandersen", "createdAt": "2020-03-31T09:58:59Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.policy;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diffable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.autoscaling.decision.AutoscalingDecider;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class AutoscalingPolicy extends AbstractDiffable<AutoscalingPolicy> implements Diffable<AutoscalingPolicy>, ToXContentObject {\n+\n+    public static final String NAME = \"autoscaling_policy\";\n+\n+    public static final ParseField DECIDERS_FIELD = new ParseField(\"deciders\");\n+\n+    public static final ConstructingObjectParser<AutoscalingPolicy, String> PARSER;\n+\n+    static {\n+        PARSER = new ConstructingObjectParser<>(NAME, false, (c, name) -> {\n+            @SuppressWarnings(\"unchecked\")\n+            final List<AutoscalingDecider> deciders = (List<AutoscalingDecider>) c[0];\n+            return new AutoscalingPolicy(name, deciders);\n+        });\n+        PARSER.declareNamedObjects(\n+            ConstructingObjectParser.constructorArg(),\n+            (p, c, n) -> p.namedObject(AutoscalingDecider.class, n, null),\n+            DECIDERS_FIELD\n+        );\n+    }\n+\n+    public static AutoscalingPolicy parse(final XContentParser parser, final String name) {\n+        return PARSER.apply(parser, name);\n+    }\n+\n+    private final String name;\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    private final List<AutoscalingDecider> deciders;\n+\n+    public List<AutoscalingDecider> deciders() {\n+        return deciders;\n+    }\n+\n+    public AutoscalingPolicy(final String name, final List<AutoscalingDecider> deciders) {\n+        this.name = name;\n+        this.deciders = deciders;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwOTE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401309193", "bodyText": "Yeah, it's used by tests now, it's validation that we can add later when we don't have to allow for empty deciders for the purpose of tests.", "author": "jasontedor", "createdAt": "2020-04-01T01:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4ODYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4OTQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400789420", "body": "I think this could be private?\r\n```suggestion\r\n    private static final ConstructingObjectParser<AutoscalingPolicyMetadata, String> PARSER;\r\n```", "bodyText": "I think this could be private?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final ConstructingObjectParser<AutoscalingPolicyMetadata, String> PARSER;\n          \n          \n            \n                private static final ConstructingObjectParser<AutoscalingPolicyMetadata, String> PARSER;", "bodyHTML": "<p dir=\"auto\">I think this could be private?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">ConstructingObjectParser&lt;<span class=\"pl-smi\">AutoscalingPolicyMetadata</span>, <span class=\"pl-smi\">String</span>&gt;</span> <span class=\"pl-c1\">PARSER</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">ConstructingObjectParser&lt;<span class=\"pl-smi\">AutoscalingPolicyMetadata</span>, <span class=\"pl-smi\">String</span>&gt;</span> <span class=\"pl-c1\">PARSER</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "henningandersen", "createdAt": "2020-03-31T10:00:15Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicyMetadata.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.policy;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diffable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class AutoscalingPolicyMetadata extends AbstractDiffable<AutoscalingPolicyMetadata>\n+    implements\n+        Diffable<AutoscalingPolicyMetadata>,\n+        ToXContentObject {\n+\n+    static final ParseField POLICY_FIELD = new ParseField(\"policy\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AutoscalingPolicyMetadata, String> PARSER;", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMzYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r400803603", "body": "I am mildly mystified by how this works (same instance), given that we pick a random node's client in each of the calls and have multiple nodes running? Nevertheless, I ran the test 100 times, so this is purely for my education....", "bodyText": "I am mildly mystified by how this works (same instance), given that we pick a random node's client in each of the calls and have multiple nodes running? Nevertheless, I ran the test 100 times, so this is purely for my education....", "bodyHTML": "<p dir=\"auto\">I am mildly mystified by how this works (same instance), given that we pick a random node's client in each of the calls and have multiple nodes running? Nevertheless, I ran the test 100 times, so this is purely for my education....</p>", "author": "henningandersen", "createdAt": "2020-03-31T10:23:57Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/action/TransportPutAutoscalingPolicyActionIT.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingIntegTestCase;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingMetadata;\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.xpack.autoscaling.AutoscalingTestCase.mutateAutoscailngDeciders;\n+import static org.elasticsearch.xpack.autoscaling.AutoscalingTestCase.randomAutoscalingPolicy;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.sameInstance;\n+\n+public class TransportPutAutoscalingPolicyActionIT extends AutoscalingIntegTestCase {\n+\n+    public void testAddPolicy() {\n+        final AutoscalingPolicy policy = putRandomAutoscalingPolicy();\n+        final ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        final AutoscalingMetadata metadata = state.metaData().custom(AutoscalingMetadata.NAME);\n+        assertNotNull(metadata);\n+        assertThat(metadata.policies(), hasKey(policy.name()));\n+        assertThat(metadata.policies().get(policy.name()).policy(), equalTo(policy));\n+    }\n+\n+    public void testUpdatePolicy() {\n+        final AutoscalingPolicy policy = putRandomAutoscalingPolicy();\n+        final AutoscalingPolicy updatedPolicy = new AutoscalingPolicy(policy.name(), mutateAutoscailngDeciders(policy.deciders()));\n+        putAutoscalingPolicy(updatedPolicy);\n+        final ClusterState state = client().admin().cluster().prepareState().get().getState();\n+        final AutoscalingMetadata metadata = state.metaData().custom(AutoscalingMetadata.NAME);\n+        assertNotNull(metadata);\n+        assertThat(metadata.policies(), hasKey(policy.name()));\n+        assertThat(metadata.policies().get(policy.name()).policy(), equalTo(updatedPolicy));\n+    }\n+\n+    public void testNoOpPolicy() {\n+        final AutoscalingPolicy policy = putRandomAutoscalingPolicy();\n+        final ClusterState beforeState = client().admin().cluster().prepareState().get().getState();\n+        putAutoscalingPolicy(policy);\n+        final ClusterState afterState = client().admin().cluster().prepareState().get().getState();\n+        assertThat(beforeState.custom(AutoscalingMetadata.NAME), sameInstance(afterState.custom(AutoscalingMetadata.NAME)));", "originalCommit": "c83985f0084c2dff40ad8ba2a30a8c8981023890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMDU4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401320584", "bodyText": "Ouch, great catch. This should not be working, and I can tell you why it is, because there's a horrible bug in the assertion! The bug is:\nassertThat(beforeState.custom(AutoscalingMetadata.NAME), sameInstance(afterState.custom(AutoscalingMetadata.NAME)))\n\nshould be\nassertThat(beforeState.metadata().custom(AutoscalingMetadata.NAME), sameInstance(afterState.metadata().custom(AutoscalingMetadata.NAME)))\n\nOops!\nGreat catch though.", "author": "jasontedor", "createdAt": "2020-04-01T02:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMzYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMTQxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401321415", "bodyText": "I pushed a fix.", "author": "jasontedor", "createdAt": "2020-04-01T02:30:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMzYwMw=="}], "type": "inlineReview"}, {"oid": "c3217c3f0a94031ebccc54e34b48da34b089c8e7", "url": "https://github.com/elastic/elasticsearch/commit/c3217c3f0a94031ebccc54e34b48da34b089c8e7", "message": "Merge remote-tracking branch 'elastic/master' into autoscaling-policy", "committedDate": "2020-03-31T22:00:33Z", "type": "commit"}, {"oid": "1b304130a56c3d8e790dd2fa42ab5ceb3969be6d", "url": "https://github.com/elastic/elasticsearch/commit/1b304130a56c3d8e790dd2fa42ab5ceb3969be6d", "message": "Make policies field private", "committedDate": "2020-03-31T22:03:28Z", "type": "commit"}, {"oid": "bab7b9550220dfce1ba3f9d18aefa61a977fcd55", "url": "https://github.com/elastic/elasticsearch/commit/bab7b9550220dfce1ba3f9d18aefa61a977fcd55", "message": "Add test for bad request", "committedDate": "2020-03-31T22:15:06Z", "type": "commit"}, {"oid": "b27f48d2a4e0ed39c4ce1fc9ae23b2c1f572a873", "url": "https://github.com/elastic/elasticsearch/commit/b27f48d2a4e0ed39c4ce1fc9ae23b2c1f572a873", "message": "Mark PARSER private", "committedDate": "2020-03-31T22:16:08Z", "type": "commit"}, {"oid": "5bf3f00c4425133ff09adc97d95e1c1d7235c8b7", "url": "https://github.com/elastic/elasticsearch/commit/5bf3f00c4425133ff09adc97d95e1c1d7235c8b7", "message": "Simple validation", "committedDate": "2020-03-31T22:19:28Z", "type": "commit"}, {"oid": "26ec5b2235a6ddd7653f1cc5ce8a76eed4e026ab", "url": "https://github.com/elastic/elasticsearch/commit/26ec5b2235a6ddd7653f1cc5ce8a76eed4e026ab", "message": "Logger is static", "committedDate": "2020-03-31T22:20:17Z", "type": "commit"}, {"oid": "673715aaa70f1e198647ead6da2bc56c8c57c7ca", "url": "https://github.com/elastic/elasticsearch/commit/673715aaa70f1e198647ead6da2bc56c8c57c7ca", "message": "State block", "committedDate": "2020-03-31T22:20:42Z", "type": "commit"}, {"oid": "b5433f729d746893c5f5cb9eaf608c9636135b93", "url": "https://github.com/elastic/elasticsearch/commit/b5433f729d746893c5f5cb9eaf608c9636135b93", "message": "Add write block", "committedDate": "2020-03-31T22:30:30Z", "type": "commit"}, {"oid": "b354bb609b9f38c8991429747f962f9870ed3757", "url": "https://github.com/elastic/elasticsearch/commit/b354bb609b9f38c8991429747f962f9870ed3757", "message": "Update x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/decision/AutoscalingDecider.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>", "committedDate": "2020-03-31T22:31:39Z", "type": "commit"}, {"oid": "c78bf35715106f33b4e6ef38f9821bbad8c70e7c", "url": "https://github.com/elastic/elasticsearch/commit/c78bf35715106f33b4e6ef38f9821bbad8c70e7c", "message": "Remove unneeded variable", "committedDate": "2020-03-31T22:32:29Z", "type": "commit"}, {"oid": "752f363c1bb351c3eab42af7b17a0a5857e1c5a1", "url": "https://github.com/elastic/elasticsearch/commit/752f363c1bb351c3eab42af7b17a0a5857e1c5a1", "message": "Fix name", "committedDate": "2020-03-31T22:33:02Z", "type": "commit"}, {"oid": "bd4020c73cbedf05f221f0128964c82ee4895c8e", "url": "https://github.com/elastic/elasticsearch/commit/bd4020c73cbedf05f221f0128964c82ee4895c8e", "message": "Ensure unique name", "committedDate": "2020-03-31T22:33:58Z", "type": "commit"}, {"oid": "6e0c43121d007a85f5f43492f46effdc14e0329f", "url": "https://github.com/elastic/elasticsearch/commit/6e0c43121d007a85f5f43492f46effdc14e0329f", "message": "Update x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicyMetadata.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>", "committedDate": "2020-03-31T22:36:37Z", "type": "commit"}, {"oid": "55e8edc656a1acbd072083d2f758bf7c1ff41a0d", "url": "https://github.com/elastic/elasticsearch/commit/55e8edc656a1acbd072083d2f758bf7c1ff41a0d", "message": "Update x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/policy/AutoscalingPolicy.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>", "committedDate": "2020-03-31T22:37:13Z", "type": "commit"}, {"oid": "2996709944071e205e9a237b04717e5b24de04a6", "url": "https://github.com/elastic/elasticsearch/commit/2996709944071e205e9a237b04717e5b24de04a6", "message": "Another blocks test", "committedDate": "2020-03-31T23:28:21Z", "type": "commit"}, {"oid": "8d4e108ee31ed2bd3878556c94fcd5abca2234a5", "url": "https://github.com/elastic/elasticsearch/commit/8d4e108ee31ed2bd3878556c94fcd5abca2234a5", "message": "Use map", "committedDate": "2020-04-01T01:28:04Z", "type": "commit"}, {"oid": "a5f45905cd279c25d35bd1cf38e3c0eff9f01fef", "url": "https://github.com/elastic/elasticsearch/commit/a5f45905cd279c25d35bd1cf38e3c0eff9f01fef", "message": "Address serialization", "committedDate": "2020-04-01T01:41:06Z", "type": "commit"}, {"oid": "7e8f2792515bb16b7fe3f1f947a072730e70bdb2", "url": "https://github.com/elastic/elasticsearch/commit/7e8f2792515bb16b7fe3f1f947a072730e70bdb2", "message": "Add TODOs", "committedDate": "2020-04-01T01:43:20Z", "type": "commit"}, {"oid": "1e31a527b17cdc513a56845f0fda0791a93b8b51", "url": "https://github.com/elastic/elasticsearch/commit/1e31a527b17cdc513a56845f0fda0791a93b8b51", "message": "Fix broken test", "committedDate": "2020-04-01T02:30:19Z", "type": "commit"}, {"oid": "99fcd1687e1821b12e7ed6687802797b5011f588", "url": "https://github.com/elastic/elasticsearch/commit/99fcd1687e1821b12e7ed6687802797b5011f588", "message": "Spotless", "committedDate": "2020-04-01T02:54:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MjAyNw==", "url": "https://github.com/elastic/elasticsearch/pull/54473#discussion_r401452027", "body": ":heart: ", "bodyText": "\u2764\ufe0f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png\">\u2764\ufe0f</g-emoji></p>", "author": "henningandersen", "createdAt": "2020-04-01T08:46:20Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/Autoscaling.java", "diffHunk": "@@ -11,7 +11,7 @@\n import org.elasticsearch.action.ActionResponse;\n import org.elasticsearch.cluster.NamedDiff;\n import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n-import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.metadata.Metadata;", "originalCommit": "99fcd1687e1821b12e7ed6687802797b5011f588", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}