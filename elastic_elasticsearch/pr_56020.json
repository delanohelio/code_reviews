{"pr_number": 56020, "pr_title": "[ML] reduce InferenceProcessor.Factory log spam by not parsing pipelines", "pr_author": "benwtrent", "pr_createdAt": "2020-04-30T12:18:16Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56020", "timeline": [{"oid": "380b459265e7bf74194da0bd325036d27c0f79b3", "url": "https://github.com/elastic/elasticsearch/commit/380b459265e7bf74194da0bd325036d27c0f79b3", "message": "[ML] reduce InfereceProcessor.Factory log spam by not parsing pipelines", "committedDate": "2020-04-30T12:14:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjk0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418012949", "body": "++ on this approach to getting a count of inference processors. It should fit more nicely into the ingest pipeline initialization process and be lighter weight than fully instantiating each pipeline.\r\n\r\nOne thing you might consider is that the config map for an ingest pipeline is a tree structure in which some nodes such as ForEach processors may contain child nodes. I do not know how inference processors are typically configured, but the code above will count them only if they're at the top level of the pipeline tree.", "bodyText": "++ on this approach to getting a count of inference processors. It should fit more nicely into the ingest pipeline initialization process and be lighter weight than fully instantiating each pipeline.\nOne thing you might consider is that the config map for an ingest pipeline is a tree structure in which some nodes such as ForEach processors may contain child nodes. I do not know how inference processors are typically configured, but the code above will count them only if they're at the top level of the pipeline tree.", "bodyHTML": "<p dir=\"auto\">++ on this approach to getting a count of inference processors. It should fit more nicely into the ingest pipeline initialization process and be lighter weight than fully instantiating each pipeline.</p>\n<p dir=\"auto\">One thing you might consider is that the config map for an ingest pipeline is a tree structure in which some nodes such as ForEach processors may contain child nodes. I do not know how inference processors are typically configured, but the code above will count them only if they're at the top level of the pipeline tree.</p>", "author": "danhermann", "createdAt": "2020-04-30T13:34:10Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,14 +200,21 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            if (TYPE.equals(entry.getKey())) {\n+                                count++;\n+                            }\n+                        }\n+                    }", "originalCommit": "380b459265e7bf74194da0bd325036d27c0f79b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyMTc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418021757", "bodyText": "@danhermann good point...I will have to traverse the tree.", "author": "benwtrent", "createdAt": "2020-04-30T13:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjk0OQ=="}], "type": "inlineReview"}, {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48", "url": "https://github.com/elastic/elasticsearch/commit/b3b845742f61a42b593bb2df3b46490bc984ca48", "message": "handling foreach processor", "committedDate": "2020-04-30T15:18:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418106628", "body": "nit: you could use `ForEachProcessor.TYPE`", "bodyText": "nit: you could use ForEachProcessor.TYPE", "bodyHTML": "<p dir=\"auto\">nit: you could use <code>ForEachProcessor.TYPE</code></p>", "author": "danhermann", "createdAt": "2020-04-30T15:43:14Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -165,6 +165,7 @@ public String getType() {\n \n     public static final class Factory implements Processor.Factory, Consumer<ClusterState> {\n \n+        private static final String FOREACH_PROCESSOR_NAME = \"foreach\";", "originalCommit": "b3b845742f61a42b593bb2df3b46490bc984ca48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODkyNg==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418168926", "bodyText": "This would require adding the ingest-common module as a dependency to the ML plugin. Did not want to do that for a single string :/", "author": "benwtrent", "createdAt": "2020-04-30T17:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418187447", "bodyText": "Ah, right. Definitely not worth it for a string.", "author": "danhermann", "createdAt": "2020-04-30T17:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418168432", "body": "The for-each processor and the onFailure directive are the only scenarios I know of that result in child processors. Both of those can be nested to an indefinite number of levels. I'm not sure how far you want to go down that rabbit hole, though.", "bodyText": "The for-each processor and the onFailure directive are the only scenarios I know of that result in child processors. Both of those can be nested to an indefinite number of levels. I'm not sure how far you want to go down that rabbit hole, though.", "bodyHTML": "<p dir=\"auto\">The for-each processor and the onFailure directive are the only scenarios I know of that result in child processors. Both of those can be nested to an indefinite number of levels. I'm not sure how far you want to go down that rabbit hole, though.</p>", "author": "danhermann", "createdAt": "2020-04-30T17:21:41Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "originalCommit": "b3b845742f61a42b593bb2df3b46490bc984ca48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418169695", "bodyText": "Yeesh, yeah, thats right.\nUgh, I will do the recursion. But who on earth would have a foreach processor nested in a foreach processor :(", "author": "benwtrent", "createdAt": "2020-04-30T17:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4ODM3MA==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418188370", "bodyText": "Yep, hence the \ud83d\udc07 hole. \ud83d\ude03", "author": "danhermann", "createdAt": "2020-04-30T17:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwNzY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418207641", "bodyText": "Only allow recursion up to 10 layers. Handling on_failure and foreach. seems to work ok :D", "author": "benwtrent", "createdAt": "2020-04-30T18:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNzg4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418217886", "bodyText": "Looks good to me. Thanks for making that change.", "author": "danhermann", "createdAt": "2020-04-30T18:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}], "type": "inlineReview"}, {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "url": "https://github.com/elastic/elasticsearch/commit/a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "message": "handling recursively defined processors", "committedDate": "2020-04-30T18:28:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5Mjg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419392891", "body": "??\r\n```suggestion\r\n            if (level > 10) {\r\n```", "bodyText": "??\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n          \n          \n            \n                        if (level > 10) {", "bodyHTML": "<p dir=\"auto\">??</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">level</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "davidkyle", "createdAt": "2020-05-04T12:17:19Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {", "originalCommit": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyNTQxMg==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419425412", "bodyText": "lulz, yeah, I goofed.", "author": "benwtrent", "createdAt": "2020-05-04T13:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5Mjg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419406120", "body": "`foreach` can only have 1 processor so there is no need to iterate here. ", "bodyText": "foreach can only have 1 processor so there is no need to iterate here.", "bodyHTML": "<p dir=\"auto\"><code>foreach</code> can only have 1 processor so there is no need to iterate here.</p>", "author": "davidkyle", "createdAt": "2020-05-04T12:42:31Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n+                return count;\n+            }\n+            if (processorType == null || processorDefinition == null) {\n+                return count;\n+            }\n+            if (TYPE.equals(processorType)) {\n+                count++;\n+            }\n+            if (FOREACH_PROCESSOR_NAME.equals(processorType)) {\n+                Map<String, Object> innerProcessor = (Map<String, Object>)processorDefinition.get(\"processor\");\n+                if (innerProcessor != null) {\n+                    for (Map.Entry<String, Object> innerProcessorWithName : innerProcessor.entrySet()) {", "originalCommit": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyNjI0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419426242", "bodyText": "The iteration is just for simplicity. Otherwise I will have assert size is == 1 and then get first entry, etc. Iteration here is cleaner IMO.", "author": "benwtrent", "createdAt": "2020-05-04T13:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMTAyNg==", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419431026", "bodyText": "\ud83d\udc4d\nIt threw me because it is called the foreach processor and it looks like a misunderstanding, perhaps leave a comment", "author": "davidkyle", "createdAt": "2020-05-04T13:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA=="}], "type": "inlineReview"}, {"oid": "914348b403ea158cf6336cc8792c5d6263de0e5e", "url": "https://github.com/elastic/elasticsearch/commit/914348b403ea158cf6336cc8792c5d6263de0e5e", "message": "fixing recursion level check", "committedDate": "2020-05-04T13:21:12Z", "type": "commit"}, {"oid": "3ace497055d7a01b6f0944449a08830f430b43d5", "url": "https://github.com/elastic/elasticsearch/commit/3ace497055d7a01b6f0944449a08830f430b43d5", "message": "Merge branch 'master' into feature/inference-do-not-parse-pipelines-needlessly", "committedDate": "2020-05-04T13:21:15Z", "type": "commit"}, {"oid": "6ae3ade4bbc9b9b122ac6a6433004beb50d79d80", "url": "https://github.com/elastic/elasticsearch/commit/6ae3ade4bbc9b9b122ac6a6433004beb50d79d80", "message": "adding comment", "committedDate": "2020-05-04T13:23:51Z", "type": "commit"}]}