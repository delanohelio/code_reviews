{"pr_number": 65275, "pr_title": "Add basic Fleet plugin", "pr_author": "gwbrown", "pr_createdAt": "2020-11-19T18:02:42Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65275", "timeline": [{"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e", "url": "https://github.com/elastic/elasticsearch/commit/bec5479e950db4d684d0d09f00f5cb1429eab43e", "message": "Add basic Fleet plugin", "committedDate": "2020-11-19T17:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzA0NA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527167044", "body": "Do you specifically want to check for 200, or would this be OK?\r\n```suggestion\r\n        assertOK(response);\r\n```", "bodyText": "Do you specifically want to check for 200, or would this be OK?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(response.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "bodyHTML": "<p dir=\"auto\">Do you specifically want to check for 200, or would this be OK?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertThat</span>(response<span class=\"pl-k x x-first\">.</span><span class=\"x\">getStatusLine()</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusCode(), is(</span><span class=\"pl-c1 x\">200</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertOK</span>(response);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-11-19T20:10:04Z", "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertThat(response.getStatusLine().getStatusCode(), is(200));", "originalCommit": "bec5479e950db4d684d0d09f00f5cb1429eab43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5OTc5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527199797", "bodyText": "These were 100% copy/pasted from the Kibana plugin tests with s/kibana/fleet/g, assertOK is probably better.", "author": "gwbrown", "createdAt": "2020-11-19T21:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2OTc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527169758", "body": "Maybe it would be more readable to assign `module.getSystemIndexDescriptors(Settings.EMPTY)` to a variable?", "bodyText": "Maybe it would be more readable to assign module.getSystemIndexDescriptors(Settings.EMPTY) to a variable?", "bodyHTML": "<p dir=\"auto\">Maybe it would be more readable to assign <code>module.getSystemIndexDescriptors(Settings.EMPTY)</code> to a variable?</p>", "author": "pugnascotia", "createdAt": "2020-11-19T20:14:53Z", "path": "modules/fleet/src/test/java/org/elasticsearch/fleet/FleetModuleTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+\n+public class FleetModuleTests extends ESTestCase {\n+\n+    public void testFleetIndexNames() {\n+        FleetModule module = new FleetModule();\n+\n+        assertThat(\n+            module.getSystemIndexDescriptors(Settings.EMPTY).stream()", "originalCommit": "bec5479e950db4d684d0d09f00f5cb1429eab43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527238170", "body": "These have changed slightly the following indexes are needed:\r\n\r\n```\r\n.fleet-servers\r\n.fleet-policies\r\n.fleet-policies-leader\r\n.fleet-agents\r\n.fleet-actions\r\n.fleet-actions-results\r\n```\r\n\r\nAs for the Agent check-ins that will occur in `logs-elastic_agent.checkin-default`. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?", "bodyText": "These have changed slightly the following indexes are needed:\n.fleet-servers\n.fleet-policies\n.fleet-policies-leader\n.fleet-agents\n.fleet-actions\n.fleet-actions-results\n\nAs for the Agent check-ins that will occur in logs-elastic_agent.checkin-default. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?", "bodyHTML": "<p dir=\"auto\">These have changed slightly the following indexes are needed:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\".fleet-servers\n.fleet-policies\n.fleet-policies-leader\n.fleet-agents\n.fleet-actions\n.fleet-actions-results\"><pre><code>.fleet-servers\n.fleet-policies\n.fleet-policies-leader\n.fleet-agents\n.fleet-actions\n.fleet-actions-results\n</code></pre></div>\n<p dir=\"auto\">As for the Agent check-ins that will occur in <code>logs-elastic_agent.checkin-default</code>. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?</p>", "author": "blakerouse", "createdAt": "2020-11-19T22:14:27Z", "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "originalCommit": "bec5479e950db4d684d0d09f00f5cb1429eab43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NDA1MA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527244050", "bodyText": "Thanks, I'll update the indices shortly.\nThe dividing line is \"Should a user ever directly query, visualize, and/or write to this index?\" - if the answer is no, then it should probably be a system index. There's also a practical consideration in that there's no such thing as a \"system data stream\" (currently), so if being a data stream is a requirement, it can't be a system index.", "author": "gwbrown", "createdAt": "2020-11-19T22:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MTY2MA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527271660", "bodyText": "I've updated the plugin to use this list and removed the ones which were not on the list.", "author": "gwbrown", "createdAt": "2020-11-19T23:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwMTI3NA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527701274", "bodyText": "A user should be able to directly query and visualize the logs-elastic_agent.checkin-default.", "author": "blakerouse", "createdAt": "2020-11-20T13:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}], "type": "inlineReview"}, {"oid": "891ea3b6bed48a8d1bb6dd768af01ad455861bff", "url": "https://github.com/elastic/elasticsearch/commit/891ea3b6bed48a8d1bb6dd768af01ad455861bff", "message": "Xpackify", "committedDate": "2020-11-19T23:08:49Z", "type": "commit"}, {"oid": "1d75f01cbb8b76b8f3b235f29306fade10275b56", "url": "https://github.com/elastic/elasticsearch/commit/1d75f01cbb8b76b8f3b235f29306fade10275b56", "message": "Correct indices", "committedDate": "2020-11-19T23:20:14Z", "type": "commit"}, {"oid": "6a11b8b88fe61916fd0647c8f49cb1873d93f6a3", "url": "https://github.com/elastic/elasticsearch/commit/6a11b8b88fe61916fd0647c8f49cb1873d93f6a3", "message": "Merge branch 'master' into fleet-plugin", "committedDate": "2020-11-19T23:20:22Z", "type": "commit"}, {"oid": "6d771ede9268be7753683b84ed335863709834d4", "url": "https://github.com/elastic/elasticsearch/commit/6d771ede9268be7753683b84ed335863709834d4", "message": "Use assertOK instead of asserting just 200", "committedDate": "2020-11-19T23:25:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjI1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552251", "body": "```suggestion\r\n        assertOK(response);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">assertThat(getResponse</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusLine()</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusCode(), is(</span><span class=\"pl-c1 x\">200</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertOK(response</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-11-20T09:13:33Z", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "originalCommit": "6d771ede9268be7753683b84ed335863709834d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjUwMA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552500", "body": "```suggestion\r\n        assertOK(response);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">assertThat(getResponse</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusLine()</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusCode(), is(</span><span class=\"pl-c1 x\">200</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertOK(response</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-11-20T09:13:58Z", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "originalCommit": "6d771ede9268be7753683b84ed335863709834d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MzU4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527553585", "body": "```suggestion\r\n        assertOK(response);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">assertThat(deleteResponse</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusLine()</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusCode(), is(</span><span class=\"pl-c1 x\">200</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertOK(response</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-11-20T09:15:55Z", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));", "originalCommit": "6d771ede9268be7753683b84ed335863709834d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MDczNw==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527560737", "body": "Nothing to change, but I kinda wish we could do something like:\r\n```java\r\nString.join(\"\\n\",\r\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"1\"))),\r\n\ttoJson(Map.of(\"foo\", \"bar\")),\r\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"2\"))),\r\n\ttoJson(Map.of(\"baz\", \"tag\"))\r\n)\r\n```", "bodyText": "Nothing to change, but I kinda wish we could do something like:\nString.join(\"\\n\",\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"1\"))),\n\ttoJson(Map.of(\"foo\", \"bar\")),\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"2\"))),\n\ttoJson(Map.of(\"baz\", \"tag\"))\n)", "bodyHTML": "<p dir=\"auto\">Nothing to change, but I kinda wish we could do something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String.join(&quot;\\n&quot;,\n\ttoJson(Map.of(&quot;index&quot;, Map.of(&quot;_index&quot;, indexName, &quot;_id&quot;, &quot;1&quot;))),\n\ttoJson(Map.of(&quot;foo&quot;, &quot;bar&quot;)),\n\ttoJson(Map.of(&quot;index&quot;, Map.of(&quot;_index&quot;, indexName, &quot;_id&quot;, &quot;2&quot;))),\n\ttoJson(Map.of(&quot;baz&quot;, &quot;tag&quot;))\n)\"><pre><span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>join(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>,\n\ttoJson(<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_index<span class=\"pl-pds\">\"</span></span>, indexName, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>))),\n\ttoJson(<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>)),\n\ttoJson(<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_index<span class=\"pl-pds\">\"</span></span>, indexName, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span>))),\n\ttoJson(<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tag<span class=\"pl-pds\">\"</span></span>))\n)</pre></div>", "author": "pugnascotia", "createdAt": "2020-11-20T09:27:56Z", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"", "originalCommit": "6d771ede9268be7753683b84ed335863709834d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527562406", "body": "```suggestion\r\n        assertOK(response);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">assertThat(dbqResponse</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusLine()</span><span class=\"pl-k x\">.</span><span class=\"x\">getStatusCode(), is(</span><span class=\"pl-c1 x\">200</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertOK(response</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-11-20T09:30:32Z", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request dbqRequest = new Request(\"POST\", \"/_fleet/\" + indexName + \"/_delete_by_query\");\n+        dbqRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response dbqResponse = client().performRequest(dbqRequest);\n+        assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));", "originalCommit": "6d771ede9268be7753683b84ed335863709834d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjY2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527562667", "bodyText": "There's a bunch more, but I'll stop flagging them \ud83d\ude01", "author": "pugnascotia", "createdAt": "2020-11-20T09:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0MDMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r529040314", "bodyText": "My find/replace missed a bunch! Thanks.", "author": "gwbrown", "createdAt": "2020-11-23T22:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg=="}], "type": "inlineReview"}, {"oid": "7eadbe01ab6900fe04a949a430bb17d0ccad7d86", "url": "https://github.com/elastic/elasticsearch/commit/7eadbe01ab6900fe04a949a430bb17d0ccad7d86", "message": "Use assertOK instead of asserting just 200 (more)", "committedDate": "2020-11-23T22:39:37Z", "type": "commit"}, {"oid": "22602725caf46d897c2b5ec43dec204675af8ebc", "url": "https://github.com/elastic/elasticsearch/commit/22602725caf46d897c2b5ec43dec204675af8ebc", "message": "Fix package", "committedDate": "2020-11-23T22:39:44Z", "type": "commit"}, {"oid": "4606ea28444c79e5d0b6eea2a85d61d8ade29547", "url": "https://github.com/elastic/elasticsearch/commit/4606ea28444c79e5d0b6eea2a85d61d8ade29547", "message": "Javadoc", "committedDate": "2020-11-23T22:49:58Z", "type": "commit"}, {"oid": "575890f613e82bf96bc0cb7c30a55413310fdd8b", "url": "https://github.com/elastic/elasticsearch/commit/575890f613e82bf96bc0cb7c30a55413310fdd8b", "message": "Merge branch 'master' into fleet-plugin", "committedDate": "2020-11-23T22:57:21Z", "type": "commit"}, {"oid": "9f451c1802d4ca63b9827b7aacd5c3c940a0c1ac", "url": "https://github.com/elastic/elasticsearch/commit/9f451c1802d4ca63b9827b7aacd5c3c940a0c1ac", "message": "Remove _fleet APIs", "committedDate": "2020-12-03T18:22:19Z", "type": "commit"}, {"oid": "def4dbc9054d2f9578e59c9103145ea75144ba94", "url": "https://github.com/elastic/elasticsearch/commit/def4dbc9054d2f9578e59c9103145ea75144ba94", "message": "Merge branch 'master' into fleet-plugin", "committedDate": "2020-12-03T18:22:29Z", "type": "commit"}]}