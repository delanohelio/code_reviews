{"pr_number": 57254, "pr_title": "[ML] add max_model_memory parameter to forecast request", "pr_author": "benwtrent", "pr_createdAt": "2020-05-27T20:31:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57254", "timeline": [{"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "url": "https://github.com/elastic/elasticsearch/commit/fa22b8dbf854446efcc5ff819477d69b5d88df5d", "message": "[ML] add max_model_memory parameter to forecast request", "committedDate": "2020-05-27T20:27:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5ODE0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431698145", "body": "I know we do it like this in other places, however: There is a `XContentParseException` which I think fits better (its a specialization of IAE).", "bodyText": "I know we do it like this in other places, however: There is a XContentParseException which I think fits better (its a specialization of IAE).", "bodyHTML": "<p dir=\"auto\">I know we do it like this in other places, however: There is a <code>XContentParseException</code> which I think fits better (its a specialization of IAE).</p>", "author": "hendrikmuhs", "createdAt": "2020-05-28T09:20:01Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/ForecastJobRequest.java", "diffHunk": "@@ -47,11 +51,20 @@\n             (request, val) -> request.setDuration(TimeValue.parseTimeValue(val, DURATION.getPreferredName())), DURATION);\n         PARSER.declareString(\n             (request, val) -> request.setExpiresIn(TimeValue.parseTimeValue(val, EXPIRES_IN.getPreferredName())), EXPIRES_IN);\n+        PARSER.declareField(ForecastJobRequest::setMaxModelMemory, (p, c) -> {\n+            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                return ByteSizeValue.parseBytesSizeValue(p.text(), MAX_MODEL_MEMORY.getPreferredName());\n+            } else if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {\n+                return new ByteSizeValue(p.longValue());\n+            }\n+            throw new IllegalArgumentException(\"Unsupported token [\" + p.currentToken() + \"]\");", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5OTEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431699131", "body": "XContentParseException maybe?", "bodyText": "XContentParseException maybe?", "bodyHTML": "<p dir=\"auto\">XContentParseException maybe?</p>", "author": "hendrikmuhs", "createdAt": "2020-05-28T09:21:47Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -47,6 +50,14 @@ private ForecastJobAction() {\n             PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);\n             PARSER.declareString(Request::setDuration, DURATION);\n             PARSER.declareString(Request::setExpiresIn, EXPIRES_IN);\n+            PARSER.declareField(Request::setMaxModelMemory, (p, c) -> {\n+                if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                    return ByteSizeValue.parseBytesSizeValue(p.text(), MAX_MODEL_MEMORY.getPreferredName()).getBytes();\n+                } else if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {\n+                    return p.longValue();\n+                }\n+                throw new IllegalArgumentException(\"Unsupported token [\" + p.currentToken() + \"]\");", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5OTgwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431699801", "body": "should we have minimum? A limit of 1 byte doesn't make sense.", "bodyText": "should we have minimum? A limit of 1 byte doesn't make sense.", "bodyHTML": "<p dir=\"auto\">should we have minimum? A limit of 1 byte doesn't make sense.</p>", "author": "hendrikmuhs", "createdAt": "2020-05-28T09:22:53Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -116,9 +134,20 @@ public void setExpiresIn(TimeValue expiresIn) {\n             }\n         }\n \n+        public void setMaxModelMemory(long numBytes) {\n+            if (numBytes <= 0) {", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431702431", "body": "nit: you used the constant in the if, so it makes sense to use it here, too", "bodyText": "nit: you used the constant in the if, so it makes sense to use it here, too", "bodyHTML": "<p dir=\"auto\">nit: you used the constant in the if, so it makes sense to use it here, too</p>", "author": "hendrikmuhs", "createdAt": "2020-05-28T09:27:28Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -140,5 +175,14 @@ static void validate(Job job, ForecastJobAction.Request request) {\n                                 + duration.getStringRep() + \"/\" + bucketSpan.getStringRep() + \"]\");\n             }\n         }\n+\n+        if (request.getMaxModelMemory() != null) {\n+            if (request.getMaxModelMemory() >= FORECAST_LOCAL_STORAGE_LIMIT.getBytes()) {\n+                throw ExceptionsHelper.badRequestException(\n+                    \"[{}] must be less than 500MB\",", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc4Mzg1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431783857", "bodyText": "@hendrikmuhs possibly? I am not sure if the stringRep for this value will be 500mb. I just wanted to guarantee a readable error message.", "author": "benwtrent", "createdAt": "2020-05-28T12:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxODU4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431718586", "body": "This should be `PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB`.  After 6.1 we don't let the model memory limit be `null`, so the post-6.1 limit is always explicitly set.  (We had to do this to achieve BWC when we changed the default in 6.1.)", "bodyText": "This should be PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB.  After 6.1 we don't let the model memory limit be null, so the post-6.1 limit is always explicitly set.  (We had to do this to achieve BWC when we changed the default in 6.1.)", "bodyHTML": "<p dir=\"auto\">This should be <code>PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB</code>.  After 6.1 we don't let the model memory limit be <code>null</code>, so the post-6.1 limit is always explicitly set.  (We had to do this to achieve BWC when we changed the default in 6.1.)</p>", "author": "droberts195", "createdAt": "2020-05-28T09:55:40Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMTg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431721891", "body": "I think we should just make the default `null`.  Doing it the way it's currently done means there's a weird situation where an explicitly configured forecast memory of `20mb` works without capping for a job with a `10mb` `model_memory_limit`, but an explicitly configured forecast memory of `19mb` is capped and generates an audit message.", "bodyText": "I think we should just make the default null.  Doing it the way it's currently done means there's a weird situation where an explicitly configured forecast memory of 20mb works without capping for a job with a 10mb model_memory_limit, but an explicitly configured forecast memory of 19mb is capped and generates an audit message.", "bodyHTML": "<p dir=\"auto\">I think we should just make the default <code>null</code>.  Doing it the way it's currently done means there's a weird situation where an explicitly configured forecast memory of <code>20mb</code> works without capping for a job with a <code>10mb</code> <code>model_memory_limit</code>, but an explicitly configured forecast memory of <code>19mb</code> is capped and generates an audit message.</p>", "author": "droberts195", "createdAt": "2020-05-28T10:01:23Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMjYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431722623", "body": "```suggestion\r\n            String msg = \"requested forecast memory limit [\" +\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String msg = \"requested forecast limit [\" +\n          \n          \n            \n                        String msg = \"requested forecast memory limit [\" +", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">String</span> msg <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>requested forecast limit [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">String</span> msg <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>requested forecast <span class=\"x x-first x-last\">memory </span>limit [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "droberts195", "createdAt": "2020-05-28T10:02:40Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMzM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431723360", "body": "Why subtract 1 from `allowedMax`?", "bodyText": "Why subtract 1 from allowedMax?", "bodyHTML": "<p dir=\"auto\">Why subtract 1 from <code>allowedMax</code>?</p>", "author": "droberts195", "createdAt": "2020-05-28T10:04:00Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0NjM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431746341", "bodyText": "@droberts195 the check on the c++ side is >=. This is to make it strictly less than.", "author": "benwtrent", "createdAt": "2020-05-28T10:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc1ODg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431758855", "bodyText": "This is going to lead to confusion when the numbers are on the boundary.  For example, suppose the job model memory limit is 200MB, and somebody configures 80MB for a forecast.  Then we'll create an audit message saying the requested amount exceeded 40% of the job model memory limit.  But it doesn't - it's exactly 40%.\nProbably the best way around this would be to change the check on the C++ side to be > so that round numbers work out nicely.  Or alternatively change the error message below to say \"must be less than 40%\".", "author": "droberts195", "createdAt": "2020-05-28T11:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTE2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431729169", "body": "```suggestion\r\n                \"] bytes exceeded [\" + allowedMax +\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"] exceeded [\" + allowedMax +\n          \n          \n            \n                            \"] bytes exceeded [\" + allowedMax +", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>] exceeded [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> allowedMax <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>] <span class=\"x x-first x-last\">bytes </span>exceeded [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> allowedMax <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "droberts195", "createdAt": "2020-05-28T10:14:38Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +\n+                requestedLimit +\n+                \"] exceeded [\" + allowedMax +", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431729304", "body": "```suggestion\r\n                \"] bytes (40% of the job memory limit). Reducing to allowed maximum before running forecast.\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"] (40% of the anomaly job memory limit). Reducing to allowed maximum before running forecast.\";\n          \n          \n            \n                            \"] bytes (40% of the job memory limit). Reducing to allowed maximum before running forecast.\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>] (40% of the<span class=\"x x-first x-last\"> anomaly</span> job memory limit). Reducing to allowed maximum before running forecast.<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>] <span class=\"x x-first x-last\">bytes </span>(40% of the job memory limit). Reducing to allowed maximum before running forecast.<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "droberts195", "createdAt": "2020-05-28T10:14:51Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +\n+                requestedLimit +\n+                \"] exceeded [\" + allowedMax +\n+                \"] (40% of the anomaly job memory limit). Reducing to allowed maximum before running forecast.\";", "originalCommit": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea859dd1472443107a5c1ba1066e92a07eb34c8e", "url": "https://github.com/elastic/elasticsearch/commit/ea859dd1472443107a5c1ba1066e92a07eb34c8e", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-add-forecast-max-memory-setting", "committedDate": "2020-05-28T11:54:04Z", "type": "commit"}, {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a", "url": "https://github.com/elastic/elasticsearch/commit/ca717c74816231a7c0cd1bbe87535da416c0de2a", "message": "addressing PR comments, fixing tests", "committedDate": "2020-05-28T13:21:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1OTk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431859994", "body": "sorry, me again: should we use 0 as `default`?", "bodyText": "sorry, me again: should we use 0 as default?", "bodyHTML": "<p dir=\"auto\">sorry, me again: should we use 0 as <code>default</code>?</p>", "author": "hendrikmuhs", "createdAt": "2020-05-28T14:03:45Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -116,9 +140,26 @@ public void setExpiresIn(TimeValue expiresIn) {\n             }\n         }\n \n+        public void setMaxModelMemory(long numBytes) {\n+            if (numBytes < MIN_MODEL_MEMORY) {", "originalCommit": "ca717c74816231a7c0cd1bbe87535da416c0de2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NzAzNg==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431867036", "bodyText": "@hendrikmuhs I am not sure what you mean 0. I think allowing it to not be set at all covers the default value handling.", "author": "benwtrent", "createdAt": "2020-05-28T14:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1OTk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MjI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431882286", "bodyText": "true, as said its convenience: if you fire the API with a script which is reading the value from somewhere, you would not need to handle this special case in the script.\nNot important, this is does not seem to be consistently used in the stack, or at least only for those parameters that change state.", "author": "hendrikmuhs", "createdAt": "2020-05-28T14:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1OTk5NA=="}], "type": "inlineReview"}]}