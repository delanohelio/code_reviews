{"pr_number": 55780, "pr_title": "fix the problem of recovering twice when perform a full cluster restart(#55564)", "pr_author": "chengyang14", "pr_createdAt": "2020-04-27T06:23:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55780", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415556760", "body": "I think this is unnecessary (although a `DEBUG`-level log would be ok here); it also doesn't consume the `recoverAfterTime` argument so it fails in the `precommit` build task.", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here); it also doesn't consume the recoverAfterTime argument so it fails in the precommit build task.", "bodyHTML": "<p dir=\"auto\">I think this is unnecessary (although a <code>DEBUG</code>-level log would be ok here); it also doesn't consume the <code>recoverAfterTime</code> argument so it fails in the <code>precommit</code> build task.</p>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:55:18Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -228,6 +228,7 @@ public void onFailure(final Exception e) {\n \n                     @Override\n                     protected void doRun() {\n+                        logger.info(\"performing state recovery...\", recoverAfterTime);", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Nzk0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415557940", "body": "I think we should check the existence of the state-not-recovered block in `currentState`, not whether the local node is elected as master.", "bodyText": "I think we should check the existence of the state-not-recovered block in currentState, not whether the local node is elected as master.", "bodyHTML": "<p dir=\"auto\">I think we should check the existence of the state-not-recovered block in <code>currentState</code>, not whether the local node is elected as master.</p>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:57:22Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558087", "body": "I think this is unnecessary (although a DEBUG-level log would be ok here).", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here).", "bodyHTML": "<p dir=\"auto\">I think this is unnecessary (although a DEBUG-level log would be ok here).</p>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:57:40Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {\n+                logger.info(\"cluster is already recovered\");", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558601", "body": "This doesn't compile right now so I can't test this.\r\n\r\n```\r\n> Task :server:compileTestJava\r\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\r\n        return new GatewayService(settings.build(),\r\n               ^\r\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\r\n  found:    Settings,AllocationService,ClusterService,<null>,<null>,<null>,<null>\r\n  reason: actual and formal argument lists differ in length\r\n```", "bodyText": "This doesn't compile right now so I can't test this.\n> Task :server:compileTestJava\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\n        return new GatewayService(settings.build(),\n               ^\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\n  found:    Settings,AllocationService,ClusterService,<null>,<null>,<null>,<null>\n  reason: actual and formal argument lists differ in length", "bodyHTML": "<p dir=\"auto\">This doesn't compile right now so I can't test this.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&gt; Task :server:compileTestJava\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\n        return new GatewayService(settings.build(),\n               ^\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\n  found:    Settings,AllocationService,ClusterService,&lt;null&gt;,&lt;null&gt;,&lt;null&gt;,&lt;null&gt;\n  reason: actual and formal argument lists differ in length\"><pre><code>&gt; Task :server:compileTestJava\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\n        return new GatewayService(settings.build(),\n               ^\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\n  found:    Settings,AllocationService,ClusterService,&lt;null&gt;,&lt;null&gt;,&lt;null&gt;,&lt;null&gt;\n  reason: actual and formal argument lists differ in length\n</code></pre></div>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:58:36Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n+            EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559170", "body": "This line is longer than 140 characters so fails the `precommit` build task.", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "bodyHTML": "<p dir=\"auto\">This line is longer than 140 characters so fails the <code>precommit</code> build task.</p>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:59:31Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559199", "body": "This line is longer than 140 characters so fails the `precommit` build task.", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "bodyHTML": "<p dir=\"auto\">This line is longer than 140 characters so fails the <code>precommit</code> build task.</p>", "author": "DaveCTurner", "createdAt": "2020-04-27T06:59:34Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDA2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560060", "body": "This assertion is vacuous, I think you mean this:\r\n\r\n```suggestion\r\n        assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));\r\n```", "bodyText": "This assertion is vacuous, I think you mean this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n          \n          \n            \n                    assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));", "bodyHTML": "<p dir=\"auto\">This assertion is vacuous, I think you mean this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertNotEquals</span>(recoveredState<span class=\"pl-k\">.</span>blocks()<span class=\"pl-k\">.</span>global(<span class=\"pl-smi\">ClusterBlockLevel</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>METADATA_WRITE</span>), hasItem(<span class=\"pl-c1\">STATE_NOT_RECOVERED_BLOCK</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertThat</span>(recoveredState<span class=\"pl-k\">.</span>blocks()<span class=\"pl-k\">.</span>global(<span class=\"pl-smi\">ClusterBlockLevel</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>METADATA_WRITE</span>), <span class=\"x x-first x-last\">not(</span>hasItem(<span class=\"pl-c1\">STATE_NOT_RECOVERED_BLOCK</span><span class=\"x x-first x-last\">)</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-04-27T07:01:14Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560215", "body": "```suggestion\r\n        assertSame(recoveredState, clusterState);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(recoveredState, clusterState);\n          \n          \n            \n                    assertSame(recoveredState, clusterState);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertEquals</span>(recoveredState, clusterState);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertSame</span>(recoveredState, clusterState);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-04-27T07:01:32Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n+\n+        ClusterState clusterState = clusterStateUpdateTask.execute(recoveredState);\n+        assertEquals(recoveredState, clusterState);", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "url": "https://github.com/elastic/elasticsearch/commit/96f65029507dfe20590d4b63dfb70bd1dabd2e31", "message": "fix the problem of recovering twice when perform a full cluster restart (#55564)", "committedDate": "2020-04-27T15:11:22Z", "type": "commit"}]}