{"pr_number": 52178, "pr_title": "Respect runas realm for ApiKey security operations", "pr_author": "ywangd", "pr_createdAt": "2020-02-11T02:02:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52178", "timeline": [{"oid": "9712caf5c06b14dac4858db50aed15f3b4b74f9d", "url": "https://github.com/elastic/elasticsearch/commit/9712caf5c06b14dac4858db50aed15f3b4b74f9d", "message": "Initial fix for elastic/elasticsearch#51975", "committedDate": "2020-02-11T01:54:48Z", "type": "commit"}, {"oid": "3899fcc0d5e28e93c9e6c3e973dfb40dd0e592bc", "url": "https://github.com/elastic/elasticsearch/commit/3899fcc0d5e28e93c9e6c3e973dfb40dd0e592bc", "message": "Update manage own api key to always use source realm", "committedDate": "2020-02-12T00:45:37Z", "type": "commit"}, {"oid": "e264109c4a613d0d1e7fddd8213b4faac7f32760", "url": "https://github.com/elastic/elasticsearch/commit/e264109c4a613d0d1e7fddd8213b4faac7f32760", "message": "Add integration tests for runas API key ops", "committedDate": "2020-02-12T02:50:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378015820", "body": "This is not strictly necessary since API key cannot impersonate another API key. But changed anyhow for consistency.", "bodyText": "This is not strictly necessary since API key cannot impersonate another API key. But changed anyhow for consistency.", "bodyHTML": "<p dir=\"auto\">This is not strictly necessary since API key cannot impersonate another API key. But changed anyhow for consistency.</p>", "author": "ywangd", "createdAt": "2020-02-12T02:52:54Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {", "originalCommit": "e264109c4a613d0d1e7fddd8213b4faac7f32760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381200085", "bodyText": "I don't take issue with your change, but ApiKeyService#getCreatorRealmType uses the getAuthenticatedBy realm, so the consistency argument is weak.\nDeep inside I prefer:\nif (Authentication.AuthenticationType.API_KEY == authentication.getAuthenticationType()) { \n\nand that ApiKeyService#getCreatorRealmType/Name be refactored under Authentication .\nBut this is out of scope for this PR.", "author": "albertzaharovits", "createdAt": "2020-02-19T10:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0ODczMw==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381248733", "bodyText": "I mean consistency within the same class, i.e. the following line in the same file.\nI agree with your analysis. The logic in ApiKeyService#getCreatorRealmXxx is inconsistent. Since API key cannot impersonate another API key, it works with both authenticatedBy and lookedUpBy. But I think it's better to keep them consistent. Also worthwhile to change the authentication type test as you suggested. I created a new issue #52511 for these changes. Thanks", "author": "ywangd", "createdAt": "2020-02-19T12:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA=="}], "type": "inlineReview"}, {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "url": "https://github.com/elastic/elasticsearch/commit/455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "message": "Merge remote-tracking branch 'origin/master' into es-51975-runas-for-apikey-ops", "committedDate": "2020-02-12T03:08:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378749450", "body": "I don't think the \"authenticated\" user and realm are the ones required here.\r\n\r\nThis check must verify that the `username` and `realm` request parameters match the user's name and realm. This is because the value of the request parameters are the ones actually used when retrieving/invalidating the API keys.\r\n\r\nFor example, this ought to be possible if user `jacknich` has only the `manage_own_api_keys` privilege.\r\n\r\n```\r\ncurl -u tomcruise -H \"es-security-runas-user: jacknich\" -X DELETE \"localhost:9200/_security/api_key?pretty\" -H 'Content-Type: application/json' -d'\r\n{\r\n  \"username\" : \"jacknich\"\r\n}\r\n'\r\n```\r\nBut it would not work with your changes because the check here compares the \"username\" request parameter to the user that authenticated, i.e. tomcruise.", "bodyText": "I don't think the \"authenticated\" user and realm are the ones required here.\nThis check must verify that the username and realm request parameters match the user's name and realm. This is because the value of the request parameters are the ones actually used when retrieving/invalidating the API keys.\nFor example, this ought to be possible if user jacknich has only the manage_own_api_keys privilege.\ncurl -u tomcruise -H \"es-security-runas-user: jacknich\" -X DELETE \"localhost:9200/_security/api_key?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"username\" : \"jacknich\"\n}\n'\n\nBut it would not work with your changes because the check here compares the \"username\" request parameter to the user that authenticated, i.e. tomcruise.", "bodyHTML": "<p dir=\"auto\">I don't think the \"authenticated\" user and realm are the ones required here.</p>\n<p dir=\"auto\">This check must verify that the <code>username</code> and <code>realm</code> request parameters match the user's name and realm. This is because the value of the request parameters are the ones actually used when retrieving/invalidating the API keys.</p>\n<p dir=\"auto\">For example, this ought to be possible if user <code>jacknich</code> has only the <code>manage_own_api_keys</code> privilege.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"curl -u tomcruise -H &quot;es-security-runas-user: jacknich&quot; -X DELETE &quot;localhost:9200/_security/api_key?pretty&quot; -H 'Content-Type: application/json' -d'\n{\n  &quot;username&quot; : &quot;jacknich&quot;\n}\n'\n\"><pre><code>curl -u tomcruise -H \"es-security-runas-user: jacknich\" -X DELETE \"localhost:9200/_security/api_key?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"username\" : \"jacknich\"\n}\n'\n</code></pre></div>\n<p dir=\"auto\">But it would not work with your changes because the check here compares the \"username\" request parameter to the user that authenticated, i.e. tomcruise.</p>", "author": "albertzaharovits", "createdAt": "2020-02-13T09:42:49Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {\n                     // API key cannot own any other API key so deny access\n                     return false;\n                 } else if (ownedByAuthenticatedUser) {\n                     return true;\n                 } else if (Strings.hasText(username) && Strings.hasText(realmName)) {\n-                    final String authenticatedUserPrincipal = authentication.getUser().principal();\n-                    final String authenticatedUserRealm = authentication.getAuthenticatedBy().getName();\n+                    final String authenticatedUserPrincipal = authentication.getUser().authenticatedUser().principal();\n+                    final String authenticatedUserRealm = authentication.getSourceRealm().getName();\n                     return username.equals(authenticatedUserPrincipal) && realmName.equals(authenticatedUserRealm);\n                 }", "originalCommit": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MTEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378771122", "bodyText": "Thanks Albert. This is a good catch! Really appreciated.\nI thought I understood how User object was designed. But somehow I got it wrong. Thanks for catching this.", "author": "ywangd", "createdAt": "2020-02-13T10:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxOTMxMw==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378819313", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-13T12:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378760057", "body": "add a test when the `owned` flag is not set, but the `username` and `realm` are.", "bodyText": "add a test when the owned flag is not set, but the username and realm are.", "bodyHTML": "<p dir=\"auto\">add a test when the <code>owned</code> flag is not set, but the <code>username</code> and <code>realm</code> are.</p>", "author": "albertzaharovits", "createdAt": "2020-02-13T10:02:39Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +544,25 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUser() throws ExecutionException, InterruptedException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageOwnApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.forOwnedApiKeys(), listener);", "originalCommit": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MjA0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378772045", "bodyText": "I was meant do test without the \"owner\" flag since the updated logic won't get executed with its presense. Somehow I ended up forgetting it. Will update. Thanks", "author": "ywangd", "createdAt": "2020-02-13T10:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDM0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824346", "bodyText": "Add tests for get and invalidate API key without \"owner=true\"", "author": "ywangd", "createdAt": "2020-02-13T12:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MTkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378761923", "body": "same as above, we should also test without the `owner` flag toggled but with the concrete `username` and `realm` set.\r\n\r\n_I would also add a negative test, but this is usually better to do in unit tests, but I sometimes sneak in a negative test in integ tests as well._", "bodyText": "same as above, we should also test without the owner flag toggled but with the concrete username and realm set.\nI would also add a negative test, but this is usually better to do in unit tests, but I sometimes sneak in a negative test in integ tests as well.", "bodyHTML": "<p dir=\"auto\">same as above, we should also test without the <code>owner</code> flag toggled but with the concrete <code>username</code> and <code>realm</code> set.</p>\n<p dir=\"auto\"><em>I would also add a negative test, but this is usually better to do in unit tests, but I sometimes sneak in a negative test in integ tests as well.</em></p>", "author": "albertzaharovits", "createdAt": "2020-02-13T10:06:12Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -600,6 +623,25 @@ public void testInvalidateApiKeysOwnedByCurrentAuthenticatedUser() throws Interr\n         verifyInvalidateResponse(noOfApiKeysForUserWithManageApiKeyRole, userWithManageApiKeyRoleApiKeys, invalidateResponse);\n     }\n \n+    public void testInvalidateApiKeysOwnedByRunAsUser() throws InterruptedException, ExecutionException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<InvalidateApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(InvalidateApiKeyAction.INSTANCE, InvalidateApiKeyRequest.forOwnedApiKeys(), listener);", "originalCommit": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDYwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824609", "bodyText": "Added negative tests for calling get and invalidate API key with mismatching username and/or realm name.", "author": "ywangd", "createdAt": "2020-02-13T12:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MTkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NTExNA==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378765114", "body": "^ This is why the inversion is not caught up by tests\r\n```suggestion\r\n        final User user = new User(runAsUsername, new String[0], new User(username));\r\n```", "bodyText": "^ This is why the inversion is not caught up by tests\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final User user = new User(username, new String[0], new User(runAsUsername));\n          \n          \n            \n                    final User user = new User(runAsUsername, new String[0], new User(username));", "bodyHTML": "<p dir=\"auto\">^ This is why the inversion is not caught up by tests</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">User</span> user <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">User</span>(<span class=\"x x-first x-last\">username</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[<span class=\"pl-c1\">0</span>], <span class=\"pl-k\">new</span> <span class=\"pl-smi\">User</span>(<span class=\"x x-first x-last\">runAsUsername</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">User</span> user <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">User</span>(<span class=\"x x-first x-last\">runAsUsername</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[<span class=\"pl-c1\">0</span>], <span class=\"pl-k\">new</span> <span class=\"pl-smi\">User</span>(<span class=\"x x-first x-last\">username</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "albertzaharovits", "createdAt": "2020-02-13T10:12:07Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "diffHunk": "@@ -96,15 +96,47 @@ public void testAuthenticationWithUserDeniesAccessToApiKeyActionsWhenItIsNotOwne\n         assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n     }\n \n+    public void testGetAndInvalidateApiKeyWillRespectRunAsUser() {\n+        final ClusterPermission clusterPermission =\n+            ManageOwnApiKeyClusterPrivilege.INSTANCE.buildPermission(ClusterPermission.builder()).build();\n+\n+        final Authentication authentication = createMockRunAsAuthentication(\n+            \"user_a\", \"realm_a\", \"realm_a_type\",\n+            \"user_b\", \"realm_b\", \"realm_b_type\");\n+\n+        final TransportRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+        final TransportRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", getApiKeyRequest, authentication));\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n+    }\n+\n     private Authentication createMockAuthentication(String username, String realmName, String realmType, Map<String, Object> metadata) {\n         final User user = new User(username);\n         final Authentication authentication = mock(Authentication.class);\n         final Authentication.RealmRef authenticatedBy = mock(Authentication.RealmRef.class);\n         when(authentication.getUser()).thenReturn(user);\n-        when(authentication.getAuthenticatedBy()).thenReturn(authenticatedBy);\n+        when(authentication.getSourceRealm()).thenReturn(authenticatedBy);\n         when(authenticatedBy.getName()).thenReturn(realmName);\n         when(authenticatedBy.getType()).thenReturn(realmType);\n         when(authentication.getMetadata()).thenReturn(metadata);\n         return authentication;\n     }\n+\n+    private Authentication createMockRunAsAuthentication(String username, String realmName, String realmType,\n+        String runAsUsername, String runAsRealmName, String runAsRealmType) {\n+        final Authentication.RealmRef authenticatedBy = mock(Authentication.RealmRef.class);\n+        when(authenticatedBy.getName()).thenReturn(realmName);\n+        when(authenticatedBy.getType()).thenReturn(realmType);\n+        final Authentication.RealmRef lookedUpBy = mock(Authentication.RealmRef.class);\n+        when(lookedUpBy.getName()).thenReturn(runAsRealmName);\n+        when(lookedUpBy.getType()).thenReturn(runAsRealmType);\n+        final User user = new User(username, new String[0], new User(runAsUsername));", "originalCommit": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f966f4ddd07ebe60b7d7912033ca69a8278c79c0", "url": "https://github.com/elastic/elasticsearch/commit/f966f4ddd07ebe60b7d7912033ca69a8278c79c0", "message": "Update x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java\n\nCo-Authored-By: Albert Zaharovits <albert.zaharovits@gmail.com>", "committedDate": "2020-02-13T10:25:44Z", "type": "commit"}, {"oid": "f3cd6ff31dfbd8f1e85922211cf5b3db517e4816", "url": "https://github.com/elastic/elasticsearch/commit/f3cd6ff31dfbd8f1e85922211cf5b3db517e4816", "message": "Address feedback", "committedDate": "2020-02-13T12:01:22Z", "type": "commit"}, {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227", "url": "https://github.com/elastic/elasticsearch/commit/584343aedd7ff71d94a27e05a0a6f12d0ba88227", "message": "Merge remote-tracking branch 'origin/master' into es-51975-runas-for-apikey-ops", "committedDate": "2020-02-13T12:01:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824002", "body": "In order to have negative tests for realm name mismatch, `user_with_run_as_role` needs to be created in a different realm other than `file` (which is handled by `configureUsers()`). This new helper method creates the user in the native realm.", "bodyText": "In order to have negative tests for realm name mismatch, user_with_run_as_role needs to be created in a different realm other than file (which is handled by configureUsers()). This new helper method creates the user in the native realm.", "bodyHTML": "<p dir=\"auto\">In order to have negative tests for realm name mismatch, <code>user_with_run_as_role</code> needs to be created in a different realm other than <code>file</code> (which is handled by <code>configureUsers()</code>). This new helper method creates the user in the native realm.</p>", "author": "ywangd", "createdAt": "2020-02-13T12:14:35Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -715,6 +829,26 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n         return responses;\n     }\n \n+    private void createUserWithRunAsRole() throws ExecutionException, InterruptedException {\n+        final PutUserRequest putUserRequest = new PutUserRequest();\n+        putUserRequest.username(\"user_with_run_as_role\");\n+        putUserRequest.roles(\"run_as_role\");\n+        putUserRequest.passwordHash(SecuritySettingsSource.TEST_PASSWORD_HASHED.toCharArray());\n+        PlainActionFuture<PutUserResponse> listener = new PlainActionFuture<>();\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        client.execute(PutUserAction.INSTANCE, putUserRequest, listener);\n+        final PutUserResponse putUserResponse = listener.get();\n+        assertTrue(putUserResponse.created());\n+    }", "originalCommit": "584343aedd7ff71d94a27e05a0a6f12d0ba88227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NjMwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382346305", "bodyText": "Can we add that explanation to the code?", "author": "tvernum", "createdAt": "2020-02-21T01:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MzM3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382363375", "bodyText": "Added", "author": "ywangd", "createdAt": "2020-02-21T02:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMTQ0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381201442", "body": "Is this line needed?", "bodyText": "Is this line needed?", "bodyHTML": "<p dir=\"auto\">Is this line needed?</p>", "author": "albertzaharovits", "createdAt": "2020-02-19T10:23:08Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +546,54 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUserWhenOwnerIsTrue() throws ExecutionException, InterruptedException {\n+        createUserWithRunAsRole();\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);", "originalCommit": "584343aedd7ff71d94a27e05a0a6f12d0ba88227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MzIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381243202", "bodyText": "Not strictly needed. I copied it from the existing test and my understanding is that it adds some noise during test setup. After a series of API key operations, the verification step makes sure the operations touch only designated keys and not the noise. I'll just leave them as is since it has some (marginal) value.", "author": "ywangd", "createdAt": "2020-02-19T11:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDYyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381210621", "body": "```suggestion\r\n        assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", GetApiKeyRequest.usingRealmAndUserName(\"realm_a\",\r\n                \"user_a\"), authentication));\r\n        assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\",\r\n                InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_a\", \"user_a\"), authentication));\r\n    }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                    assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", GetApiKeyRequest.usingRealmAndUserName(\"realm_a\",\n          \n          \n            \n                            \"user_a\"), authentication));\n          \n          \n            \n                    assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\",\n          \n          \n            \n                            InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_a\", \"user_a\"), authentication));\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"111\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"111\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first\">    assertFalse(clusterPermission</span><span class=\"pl-k x\">.</span><span class=\"x\">check(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">cluster:admin/xpack/security/api_key/get</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-smi x\">GetApiKeyRequest</span><span class=\"pl-k x\">.</span><span class=\"x\">usingRealmAndUserName(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">realm_a</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">,</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"112\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user_a<span class=\"pl-pds\">\"</span></span>), authentication));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"113\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertFalse(clusterPermission<span class=\"pl-k\">.</span>check(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cluster:admin/xpack/security/api_key/invalidate<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">InvalidateApiKeyRequest</span><span class=\"pl-k\">.</span>usingRealmAndUserName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>realm_a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user_a<span class=\"pl-pds\">\"</span></span>), authentication));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "albertzaharovits", "createdAt": "2020-02-19T10:39:49Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "diffHunk": "@@ -96,15 +96,47 @@ public void testAuthenticationWithUserDeniesAccessToApiKeyActionsWhenItIsNotOwne\n         assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n     }\n \n+    public void testGetAndInvalidateApiKeyWillRespectRunAsUser() {\n+        final ClusterPermission clusterPermission =\n+            ManageOwnApiKeyClusterPrivilege.INSTANCE.buildPermission(ClusterPermission.builder()).build();\n+\n+        final Authentication authentication = createMockRunAsAuthentication(\n+            \"user_a\", \"realm_a\", \"realm_a_type\",\n+            \"user_b\", \"realm_b\", \"realm_b_type\");\n+\n+        final TransportRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+        final TransportRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", getApiKeyRequest, authentication));\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n+    }", "originalCommit": "584343aedd7ff71d94a27e05a0a6f12d0ba88227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MzMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381243315", "bodyText": "I'll inline these. Thanks", "author": "ywangd", "createdAt": "2020-02-19T11:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDYyMQ=="}], "type": "inlineReview"}, {"oid": "df9cf5d89dbebb07861efa1f41de244603bd239e", "url": "https://github.com/elastic/elasticsearch/commit/df9cf5d89dbebb07861efa1f41de244603bd239e", "message": "Address feedback", "committedDate": "2020-02-19T12:09:39Z", "type": "commit"}, {"oid": "b7bdd03bea71e5fe30068e4b75c768d6d43e1816", "url": "https://github.com/elastic/elasticsearch/commit/b7bdd03bea71e5fe30068e4b75c768d6d43e1816", "message": "Merge remote-tracking branch 'origin/master' into es-51975-runas-for-apikey-ops", "committedDate": "2020-02-19T12:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NTkwNg==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382345906", "body": "These seem backwards to me. You authenticate as `runAsUser` but run-as `user`.\r\nI assume the parameters are just strangely named, but it probably makes sense to have `authenticatingUser` and `owningUser` or something like that.", "bodyText": "These seem backwards to me. You authenticate as runAsUser but run-as user.\nI assume the parameters are just strangely named, but it probably makes sense to have authenticatingUser and owningUser or something like that.", "bodyHTML": "<p dir=\"auto\">These seem backwards to me. You authenticate as <code>runAsUser</code> but run-as <code>user</code>.<br>\nI assume the parameters are just strangely named, but it probably makes sense to have <code>authenticatingUser</code> and <code>owningUser</code> or something like that.</p>", "author": "tvernum", "createdAt": "2020-02-21T01:04:11Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -699,14 +799,28 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n     }\n \n     private List<CreateApiKeyResponse> createApiKeys(String user, int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Collections.singletonMap(\n+                \"Authorization\", UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING));\n+        return createApiKeys(headers, noOfApiKeys, expiration, clusterPrivileges);\n+    }\n+\n+    private List<CreateApiKeyResponse> createApiKeys(String user, String runAsUser,\n+        int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(runAsUser, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", user);", "originalCommit": "b7bdd03bea71e5fe30068e4b75c768d6d43e1816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MzY5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382363697", "bodyText": "Good point. It does read awkward. Updated.", "author": "ywangd", "createdAt": "2020-02-21T02:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NTkwNg=="}], "type": "inlineReview"}, {"oid": "57b5b06b8b1a7d886229dc2b4bedbfdf8c512886", "url": "https://github.com/elastic/elasticsearch/commit/57b5b06b8b1a7d886229dc2b4bedbfdf8c512886", "message": "Address feedback", "committedDate": "2020-02-21T02:09:38Z", "type": "commit"}, {"oid": "b1bce896f4446ca9cd8c79c99fd4e82b1f89b70f", "url": "https://github.com/elastic/elasticsearch/commit/b1bce896f4446ca9cd8c79c99fd4e82b1f89b70f", "message": "Merge remote-tracking branch 'origin/master' into es-51975-runas-for-apikey-ops", "committedDate": "2020-02-21T02:09:44Z", "type": "commit"}, {"oid": "a05fdebe09c818a7d18d9d0bf37bd0b80742de02", "url": "https://github.com/elastic/elasticsearch/commit/a05fdebe09c818a7d18d9d0bf37bd0b80742de02", "message": "Update", "committedDate": "2020-02-21T02:12:51Z", "type": "commit"}]}