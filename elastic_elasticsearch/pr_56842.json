{"pr_number": 56842, "pr_title": "Add template simulation API for simulating template composition", "pr_author": "dakrone", "pr_createdAt": "2020-05-15T19:18:05Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56842", "timeline": [{"oid": "581d635cad4aca06996a84c06cb6579e35a2aa69", "url": "https://github.com/elastic/elasticsearch/commit/581d635cad4aca06996a84c06cb6579e35a2aa69", "message": "Add template simulation API for simulating template composition\n\nThis adds an API for simulating template composition with or without an index template.\n\nIt looks like:\n\n```\nPOST /_index_template/_simulate/my-template\n```\n\nTo simulate a template named `my-template` that already exists, or, to simulate a template that does\nnot already exist:\n\n```\nPOST /_index_template/_simulate\n{\n  \"index_patterns\": [\"my-index\"]\n  \"composed_of\": [\"ct1\", \"ct2\"],\n}\n```\n\nThis is related to #55686, which adds an API to simulate composition based on an index name (hence\nthe `_simulate_index` vs `_simulate`).\n\nThis commit also adds reference documentation for both simulation APIs.\n\nRelates to #53101\nResolves #56390\nResolves #56255", "committedDate": "2020-05-15T19:10:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwMTU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56842#discussion_r426001557", "body": "@andreidan I had to remove this wrapping because the simulated documents came back with the `_doc` parameter in the mappings, and they can't be sent as new component or index templates with `_doc` in the mappings", "bodyText": "@andreidan I had to remove this wrapping because the simulated documents came back with the _doc parameter in the mappings, and they can't be sent as new component or index templates with _doc in the mappings", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/andreidan/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/andreidan\">@andreidan</a> I had to remove this wrapping because the simulated documents came back with the <code>_doc</code> parameter in the mappings, and they can't be sent as new component or index templates with <code>_doc</code> in the mappings</p>", "author": "dakrone", "createdAt": "2020-05-15T19:19:37Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/post/TransportSimulateIndexTemplateAction.java", "diffHunk": "@@ -99,30 +98,51 @@ protected SimulateIndexTemplateResponse read(StreamInput in) throws IOException\n     @Override\n     protected void masterOperation(Task task, SimulateIndexTemplateRequest request, ClusterState state,\n                                    ActionListener<SimulateIndexTemplateResponse> listener) throws Exception {\n-        ClusterState simulateOnClusterState = state;\n+        final ClusterState stateWithTemplate;\n         if (request.getIndexTemplateRequest() != null) {\n             // we'll \"locally\" add the template defined by the user in the cluster state (as if it existed in the system)\n-            String simulateTemplateToAdd = \"simulate_new_template_\" + UUIDs.randomBase64UUID().toLowerCase(Locale.ROOT);\n-            simulateOnClusterState = indexTemplateService.addIndexTemplateV2(state, request.getIndexTemplateRequest().create(),\n+            String simulateTemplateToAdd = \"simulate_index_template_\" + UUIDs.randomBase64UUID().toLowerCase(Locale.ROOT);\n+            // Perform validation for things like typos in component template names\n+            MetadataIndexTemplateService.validateV2TemplateRequest(state.metadata(), simulateTemplateToAdd,\n+                request.getIndexTemplateRequest().indexTemplate());\n+            stateWithTemplate = indexTemplateService.addIndexTemplateV2(state, request.getIndexTemplateRequest().create(),\n                 simulateTemplateToAdd, request.getIndexTemplateRequest().indexTemplate());\n+        } else {\n+            stateWithTemplate = state;\n         }\n \n-        String matchingTemplate = findV2Template(simulateOnClusterState.metadata(), request.getIndexName(), false);\n+        String matchingTemplate = findV2Template(stateWithTemplate.metadata(), request.getIndexName(), false);\n         if (matchingTemplate == null) {\n             listener.onResponse(new SimulateIndexTemplateResponse(null, null));\n             return;\n         }\n-        Settings settings = resolveSettings(simulateOnClusterState.metadata(), matchingTemplate);\n \n-        // empty request mapping as the user can't specify any explicit mappings via the simulate api\n-        Map<String, Object> mappings = resolveV2Mappings(\"{}\", simulateOnClusterState, matchingTemplate, xContentRegistry);\n-        String mappingsJson = Strings.toString(XContentFactory.jsonBuilder()\n-            .startObject()\n-            .field(MapperService.SINGLE_MAPPING_NAME, mappings)\n-            .endObject());", "originalCommit": "581d635cad4aca06996a84c06cb6579e35a2aa69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6ff715f461fc3f79babeec70b0977c717ceacb52", "url": "https://github.com/elastic/elasticsearch/commit/6ff715f461fc3f79babeec70b0977c717ceacb52", "message": "Add to list of HLRC test exemptions", "committedDate": "2020-05-15T21:24:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMDY4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56842#discussion_r426520683", "body": "```suggestion\r\n            listener.onFailure(new IllegalArgumentException(\"a template name to match or a new template body must be specified\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        listener.onFailure(new IllegalArgumentException(\"unable to find a matching template\"));\n          \n          \n            \n                        listener.onFailure(new IllegalArgumentException(\"a template name to match or a new template body must be specified\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            listener<span class=\"pl-k\">.</span>onFailure(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">unable </span>to <span class=\"x x-first x-last\">find a matching</span> template<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            listener<span class=\"pl-k\">.</span>onFailure(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">a template name </span>to <span class=\"x x-first x-last\">match or a new</span> template<span class=\"x x-first x-last\"> body must be specified</span><span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "andreidan", "createdAt": "2020-05-18T10:17:45Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/post/TransportSimulateTemplateAction.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.post;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.TransportMasterNodeReadAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.AliasValidator;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.MetadataIndexTemplateService;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.indices.IndicesService;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.elasticsearch.cluster.metadata.MetadataIndexTemplateService.findConflictingV1Templates;\n+import static org.elasticsearch.cluster.metadata.MetadataIndexTemplateService.findConflictingV2Templates;\n+\n+/**\n+ * Handles simulating an index template either by name (looking it up in the\n+ * cluster state), or by a provided template configuration\n+ */\n+public class TransportSimulateTemplateAction\n+    extends TransportMasterNodeReadAction<SimulateTemplateAction.Request, SimulateIndexTemplateResponse> {\n+\n+    private final MetadataIndexTemplateService indexTemplateService;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private final IndicesService indicesService;\n+    private AliasValidator aliasValidator;\n+\n+    @Inject\n+    public TransportSimulateTemplateAction(TransportService transportService, ClusterService clusterService,\n+                                           ThreadPool threadPool, MetadataIndexTemplateService indexTemplateService,\n+                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,\n+                                           NamedXContentRegistry xContentRegistry, IndicesService indicesService) {\n+        super(SimulateTemplateAction.NAME, transportService, clusterService, threadPool, actionFilters,\n+            SimulateTemplateAction.Request::new, indexNameExpressionResolver);\n+        this.indexTemplateService = indexTemplateService;\n+        this.xContentRegistry = xContentRegistry;\n+        this.indicesService = indicesService;\n+        this.aliasValidator = new AliasValidator();\n+    }\n+\n+    @Override\n+    protected String executor() {\n+        return ThreadPool.Names.SAME;\n+    }\n+\n+    @Override\n+    protected SimulateIndexTemplateResponse read(StreamInput in) throws IOException {\n+        return new SimulateIndexTemplateResponse(in);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, SimulateTemplateAction.Request request, ClusterState state,\n+                                   ActionListener<SimulateIndexTemplateResponse> listener) throws Exception {\n+        String uuid = UUIDs.randomBase64UUID().toLowerCase(Locale.ROOT);\n+        final String temporaryIndexName = \"simulate_template_index_\" + uuid;\n+        final ClusterState stateWithTemplate;\n+        final String simulateTemplateToAdd;\n+\n+        // First, if a template body was requested, we need to \"fake add\" that template to the\n+        // cluster state, so it can be used when we resolved settings/etc\n+        if (request.getIndexTemplateRequest() != null) {\n+            // we'll \"locally\" add the template defined by the user in the cluster state (as if it existed in the system)\n+            simulateTemplateToAdd = \"simulate_template_\" + uuid;\n+            // Perform validation for things like typos in component template names\n+            MetadataIndexTemplateService.validateV2TemplateRequest(state.metadata(), simulateTemplateToAdd,\n+                request.getIndexTemplateRequest().indexTemplate());\n+            stateWithTemplate = indexTemplateService.addIndexTemplateV2(state, request.getIndexTemplateRequest().create(),\n+                simulateTemplateToAdd, request.getIndexTemplateRequest().indexTemplate());\n+        } else {\n+            simulateTemplateToAdd = null;\n+            stateWithTemplate = state;\n+        }\n+\n+        // We also need the name of the template we're going to resolve, so if they specified a\n+        // name, use that, otherwise use the name of the template that was \"fake added\" in the previous block\n+        final String matchingTemplate;\n+        if (request.getTemplateName() == null) {\n+            // Automatically match the template that was added\n+            matchingTemplate = simulateTemplateToAdd;\n+        } else {\n+            matchingTemplate = request.getTemplateName();\n+        }\n+\n+        // If they didn't either specify a name that existed or a template body, we cannot simulate anything!\n+        if (matchingTemplate == null) {\n+            // They should have specified either a template name or the body of a template, but neither were specified\n+            listener.onFailure(new IllegalArgumentException(\"unable to find a matching template\"));", "originalCommit": "6ff715f461fc3f79babeec70b0977c717ceacb52", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2756012526d536562d6eeeac7c9b2f13405b0f2", "url": "https://github.com/elastic/elasticsearch/commit/b2756012526d536562d6eeeac7c9b2f13405b0f2", "message": "Add example output to docs", "committedDate": "2020-05-18T18:18:38Z", "type": "commit"}, {"oid": "4b6164b4b1ab955cc04a298c9f568fab83924204", "url": "https://github.com/elastic/elasticsearch/commit/4b6164b4b1ab955cc04a298c9f568fab83924204", "message": "Update server/src/main/java/org/elasticsearch/action/admin/indices/template/post/TransportSimulateTemplateAction.java\n\nCo-authored-by: Andrei Dan <andrei.dan@elastic.co>", "committedDate": "2020-05-18T18:19:13Z", "type": "commit"}, {"oid": "2f0c4ca6372f2c3ee2165a240b5cc411db730642", "url": "https://github.com/elastic/elasticsearch/commit/2f0c4ca6372f2c3ee2165a240b5cc411db730642", "message": "Merge branch 'master' into itv2-add-simulate-template", "committedDate": "2020-05-18T19:32:31Z", "type": "commit"}, {"oid": "9916b812e20f8c40c6965851ba9cdf1051ac1925", "url": "https://github.com/elastic/elasticsearch/commit/9916b812e20f8c40c6965851ba9cdf1051ac1925", "message": "More docs", "committedDate": "2020-05-18T20:09:08Z", "type": "commit"}]}