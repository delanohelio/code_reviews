{"pr_number": 55193, "pr_title": "EQL: Add concat function", "pr_author": "rw-access", "pr_createdAt": "2020-04-15T01:18:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55193", "timeline": [{"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "url": "https://github.com/elastic/elasticsearch/commit/bcc4033416bcb7954e024d5b12109ebd04a994e8", "message": "EQL: Add concat function", "committedDate": "2020-04-15T00:59:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408761192", "body": "Why only `isExact`? Shouldn't this be a string only type of value?", "bodyText": "Why only isExact? Shouldn't this be a string only type of value?", "bodyHTML": "<p dir=\"auto\">Why only <code>isExact</code>? Shouldn't this be a string only type of value?</p>", "author": "astefan", "createdAt": "2020-04-15T11:08:33Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Concat.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ConcatFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific concat function to build a string of all input arguments concatenated.\n+ */\n+public class Concat extends ScalarFunction {\n+\n+    private final List<Expression> values;\n+\n+    public Concat(Source source, List<Expression> values) {\n+        super(source, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution resolution = TypeResolution.TYPE_RESOLVED;\n+        int index = 0;\n+        for (Expression value : values) {\n+            resolution = isExact(value, sourceText(), ParamOrdinal.fromIndex(index));", "originalCommit": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MzI3NA==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408763274", "bodyText": "Also, this loop goes through all of concat's values and returns the resolution of the last element in list. Shouldn't, maybe, stop at the first resolution that is .unresolved() and return that?", "author": "astefan", "createdAt": "2020-04-15T11:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r409011304", "bodyText": "fixed in 9295e79", "author": "rw-access", "createdAt": "2020-04-15T17:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjQyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r409012425", "bodyText": "also, this accepts non string parameters as well, and calls .toString() on them\nthe example uses pid which is a long\nhttps://eql.readthedocs.io/en/latest/query-guide/functions.html#concat", "author": "rw-access", "createdAt": "2020-04-15T17:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDQyNA==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408764424", "body": "```suggestion\r\n        for (Pipe v : values) {\r\n```\r\n\r\nAnd the same change throughout the rest of this function's classes. Thanks.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe v: values) {\n          \n          \n            \n                    for (Pipe v : values) {\n          \n      \n    \n    \n  \n\nAnd the same change throughout the rest of this function's classes. Thanks.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> v<span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> v<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">And the same change throughout the rest of this function's classes. Thanks.</p>", "author": "astefan", "createdAt": "2020-04-15T11:14:55Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {", "originalCommit": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDUzNg==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408764536", "body": "```suggestion\r\n        for (Pipe p : values) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe p: values) {\n          \n          \n            \n                    for (Pipe p : values) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> p<span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> p<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "astefan", "createdAt": "2020-04-15T11:15:09Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {", "originalCommit": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTI2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408765267", "body": "```suggestion\r\n        for (Pipe p : values) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe p: values) {\n          \n          \n            \n                    for (Pipe p : values) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> p<span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> p<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "astefan", "createdAt": "2020-04-15T11:16:40Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {\n+            if (p.supportedByAggsOnlyQuery() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        for (Pipe p: values) {", "originalCommit": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTM5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408765395", "body": "```suggestion\r\n        for (Pipe v : values) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe v: values) {\n          \n          \n            \n                    for (Pipe v : values) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> v<span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Pipe</span> v<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">:</span> values) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "astefan", "createdAt": "2020-04-15T11:16:56Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {\n+            if (p.supportedByAggsOnlyQuery() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        for (Pipe p: values) {\n+            if (p.resolved() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public final void collectFields(QlSourceBuilder sourceBuilder) {\n+        for (Pipe v: values) {", "originalCommit": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd14685e47d1542138517950ff224d45de5be1ae", "url": "https://github.com/elastic/elasticsearch/commit/bd14685e47d1542138517950ff224d45de5be1ae", "message": "EQL: for loop spacing for concat\n\nCo-Authored-By: Andrei Stefan <astefan@users.noreply.github.com>", "committedDate": "2020-04-15T16:35:21Z", "type": "commit"}, {"oid": "9295e7920777ebca4c3d26cc51cedecdbf4869db", "url": "https://github.com/elastic/elasticsearch/commit/9295e7920777ebca4c3d26cc51cedecdbf4869db", "message": "EQL: return unresolved arguments to concat early", "committedDate": "2020-04-15T16:50:50Z", "type": "commit"}, {"oid": "aadfc052f8efe05a028cd9b97d7f5868599bb45f", "url": "https://github.com/elastic/elasticsearch/commit/aadfc052f8efe05a028cd9b97d7f5868599bb45f", "message": "Merge remote-tracking branch 'origin/master' into eql/concat-function", "committedDate": "2020-04-15T16:53:25Z", "type": "commit"}, {"oid": "1050a0d6443c60146cf35140b92dee6565402174", "url": "https://github.com/elastic/elasticsearch/commit/1050a0d6443c60146cf35140b92dee6565402174", "message": "EQL: Add concat integration tests", "committedDate": "2020-04-15T18:03:20Z", "type": "commit"}, {"oid": "01403006024b49b9917a938323b24c10df76201e", "url": "https://github.com/elastic/elasticsearch/commit/01403006024b49b9917a938323b24c10df76201e", "message": "EQL: Fix concat query fail test", "committedDate": "2020-04-15T21:59:00Z", "type": "commit"}, {"oid": "53ab872085e03d44a1b4276d0f4e60653d7608fd", "url": "https://github.com/elastic/elasticsearch/commit/53ab872085e03d44a1b4276d0f4e60653d7608fd", "message": "Merge branch 'master' into eql/concat-function", "committedDate": "2020-04-21T20:36:49Z", "type": "commit"}, {"oid": "f9e0f5af516b60359a6a9edda70cd58b36abb701", "url": "https://github.com/elastic/elasticsearch/commit/f9e0f5af516b60359a6a9edda70cd58b36abb701", "message": "EQL: Add class for concat function testing", "committedDate": "2020-04-21T21:40:35Z", "type": "commit"}, {"oid": "6c28ee3496e907228c5835a08484c5bcfaa8e276", "url": "https://github.com/elastic/elasticsearch/commit/6c28ee3496e907228c5835a08484c5bcfaa8e276", "message": "EQL: Add concat integration tests", "committedDate": "2020-04-21T21:49:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTM2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r413151367", "body": "Small improvement here: if it's possible for a one argument call to not use \"first\" in the error message, that would look more user friendly.\r\n\r\nAlso, I would like to see one or two tests where another argument different from the first doesn't fulfill the restriction.", "bodyText": "Small improvement here: if it's possible for a one argument call to not use \"first\" in the error message, that would look more user friendly.\nAlso, I would like to see one or two tests where another argument different from the first doesn't fulfill the restriction.", "bodyHTML": "<p dir=\"auto\">Small improvement here: if it's possible for a one argument call to not use \"first\" in the error message, that would look more user friendly.</p>\n<p dir=\"auto\">Also, I would like to see one or two tests where another argument different from the first doesn't fulfill the restriction.</p>", "author": "astefan", "createdAt": "2020-04-22T16:54:38Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -93,6 +93,14 @@ public void testCIDRMatchNonString() {\n                 \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n     }\n \n+    public void testConcatWithInexact() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where concat(plain_text)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\nline 1:15: [concat(plain_text)] cannot operate on first argument field of data type \"", "originalCommit": "6c28ee3496e907228c5835a08484c5bcfaa8e276", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fbfbc1b6f35abef581145ec9f8550a78effc569f", "url": "https://github.com/elastic/elasticsearch/commit/fbfbc1b6f35abef581145ec9f8550a78effc569f", "message": "EQL: Update concat() null behavior", "committedDate": "2020-04-30T22:53:33Z", "type": "commit"}, {"oid": "badd0d1beeffe86a51644347608fa2aa24d21bab", "url": "https://github.com/elastic/elasticsearch/commit/badd0d1beeffe86a51644347608fa2aa24d21bab", "message": "Merge remote-tracking branch 'origin/master' into eql/concat-function", "committedDate": "2020-05-04T15:31:40Z", "type": "commit"}]}