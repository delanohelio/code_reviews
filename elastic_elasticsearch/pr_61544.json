{"pr_number": 61544, "pr_title": "[ML] Recover data frame extraction search from latest sort key", "pr_author": "dimitris-athanasiou", "pr_createdAt": "2020-08-25T17:09:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61544", "timeline": [{"oid": "f65d7391a31f5bd554898975374b35eb135048f9", "url": "https://github.com/elastic/elasticsearch/commit/f65d7391a31f5bd554898975374b35eb135048f9", "message": "[ML] Recover data frame extraction search from latest sort key\n\nIf a search failure occurs during data frame extraction we catch\nthe error and retry once. However, we retry another search that is\nidentical to the first one. This means we will re-fetch any docs\nthat were already processed. This may result either to training\na model using duplicate data or in the case of outlier detection to\nan error message that the process received more records than it\nexpected.\n\nThis commit fixes this issue by tracking the latest doc's sort key\nand then using that in a range query in case we restart the search\ndue to a failure.", "committedDate": "2020-08-25T17:01:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODk3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61544#discussion_r477058977", "body": "```suggestion\r\n        hit.sortValues(new String[] { sortValue }, new DocValueFormat[] { DocValueFormat.RAW });\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    hit.sortValues(new String[] { sortValue}, new DocValueFormat[] { DocValueFormat.RAW });\n          \n          \n            \n                    hit.sortValues(new String[] { sortValue }, new DocValueFormat[] { DocValueFormat.RAW });", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        hit<span class=\"pl-k\">.</span>sortValues(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[] { sortValue}, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DocValueFormat</span>[] { <span class=\"pl-smi\">DocValueFormat</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RAW</span> });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        hit<span class=\"pl-k\">.</span>sortValues(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[] { sortValue<span class=\"x x-first x-last\"> </span>}, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DocValueFormat</span>[] { <span class=\"pl-smi\">DocValueFormat</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RAW</span> });</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "przemekwitek", "createdAt": "2020-08-26T06:18:08Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/test/SearchHitBuilder.java", "diffHunk": "@@ -41,6 +42,11 @@ public SearchHitBuilder setSource(String sourceJson) {\n         return this;\n     }\n \n+    public SearchHitBuilder setStringSortValue(String sortValue) {\n+        hit.sortValues(new String[] { sortValue}, new DocValueFormat[] { DocValueFormat.RAW });", "originalCommit": "f65d7391a31f5bd554898975374b35eb135048f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MDIxNg==", "url": "https://github.com/elastic/elasticsearch/pull/61544#discussion_r477060216", "body": "Is `hit.getSortValues()` always non-empty?", "bodyText": "Is hit.getSortValues() always non-empty?", "bodyHTML": "<p dir=\"auto\">Is <code>hit.getSortValues()</code> always non-empty?</p>", "author": "przemekwitek", "createdAt": "2020-08-26T06:21:22Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/extractor/DataFrameDataExtractor.java", "diffHunk": "@@ -426,5 +441,9 @@ public boolean isTraining() {\n         public int getChecksum() {\n             return Arrays.hashCode(values);\n         }\n+\n+        public String getSortKey() {\n+            return (String) hit.getSortValues()[0];", "originalCommit": "f65d7391a31f5bd554898975374b35eb135048f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTEzNA==", "url": "https://github.com/elastic/elasticsearch/pull/61544#discussion_r477075134", "bodyText": "Yes because we own the search from within the extractor and we are sorting on the id copy field.", "author": "dimitris-athanasiou", "createdAt": "2020-08-26T06:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MDIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MDUwOA==", "url": "https://github.com/elastic/elasticsearch/pull/61544#discussion_r477060508", "body": "IMO `hasSize` matcher could be used here instead.", "bodyText": "IMO hasSize matcher could be used here instead.", "bodyHTML": "<p dir=\"auto\">IMO <code>hasSize</code> matcher could be used here instead.</p>", "author": "przemekwitek", "createdAt": "2020-08-26T06:22:08Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/extractor/DataFrameDataExtractorTests.java", "diffHunk": "@@ -196,6 +197,13 @@ public void testRecoveryFromErrorOnSearchAfterRetry() throws IOException {\n         List<String> capturedClearScrollRequests = getCapturedClearScrollIds();\n         assertThat(capturedClearScrollRequests.size(), equalTo(1));\n         assertThat(capturedClearScrollRequests.get(0), equalTo(lastAndEmptyResponse.getScrollId()));\n+\n+        // Notice we've done two searches here\n+        assertThat(dataExtractor.capturedSearchRequests.size(), equalTo(2));", "originalCommit": "f65d7391a31f5bd554898975374b35eb135048f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9dec047329b393c975ad0a1700e005a0e6c8ba6d", "url": "https://github.com/elastic/elasticsearch/commit/9dec047329b393c975ad0a1700e005a0e6c8ba6d", "message": "Address review comments", "committedDate": "2020-08-26T06:56:48Z", "type": "commit"}, {"oid": "bdab6ac7da66876a183fb6e21cc554beeb83dba9", "url": "https://github.com/elastic/elasticsearch/commit/bdab6ac7da66876a183fb6e21cc554beeb83dba9", "message": "Merge branch 'master' into recover-df-extraction-search-from-latest-sort-key", "committedDate": "2020-08-26T07:20:24Z", "type": "commit"}]}