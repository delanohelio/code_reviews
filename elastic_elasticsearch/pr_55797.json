{"pr_number": 55797, "pr_title": "[ML] Do not fail DFA task when it's stopped whilst reindexing", "pr_author": "dimitris-athanasiou", "pr_createdAt": "2020-04-27T11:04:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55797", "timeline": [{"oid": "a3fe99baf975fbb2a71db1c42faeee4e603f4ff4", "url": "https://github.com/elastic/elasticsearch/commit/a3fe99baf975fbb2a71db1c42faeee4e603f4ff4", "message": "[ML] Do not fail DFA task when it's stopped whilst reindexing\n\nAdding to #55659, we missed another way we could set the task to\nfailed due to task cancellation. CI revealed that we might also\nget a `SearchPhaseExecutionException` whose cause is a\n`TaskCancelledException`. That exception is not wrapped so\nunwrapping it will not return the underlying `TaskCancelledException`.\nThus to be complete in catching this, we also need to check the\nerror's cause.\n\nCloses #55068", "committedDate": "2020-04-27T10:58:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyMDE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55797#discussion_r415720166", "body": "static", "bodyText": "static", "bodyHTML": "<p dir=\"auto\">static</p>", "author": "przemekwitek", "createdAt": "2020-04-27T11:07:47Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -294,6 +294,10 @@ private void reindexDataframeAndStartAnalysis(DataFrameAnalyticsTask task, DataF\n                 new GetIndexRequest().indices(config.getDest().getIndex()), destIndexListener);\n     }\n \n+    private boolean isTaskCancelledException(Exception error) {", "originalCommit": "a3fe99baf975fbb2a71db1c42faeee4e603f4ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNDMxMg==", "url": "https://github.com/elastic/elasticsearch/pull/55797#discussion_r415724312", "body": "I wonder if it's also worth unwrapping the cause?\r\n\r\n```suggestion\r\n        return ExceptionsHelper.unwrapCause(error) instanceof TaskCancelledException || ExceptionsHelper.unwrapCause(error.getCause()) instanceof TaskCancelledException;\r\n```\r\n\r\nWhether this is worth it or not depending on whether the nested exception could be a remote transport exception, or whether only the outermost exception can be.  If you don't know the answer it's probably better to add the extra unwrap call.", "bodyText": "I wonder if it's also worth unwrapping the cause?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ExceptionsHelper.unwrapCause(error) instanceof TaskCancelledException || error.getCause() instanceof TaskCancelledException;\n          \n          \n            \n                    return ExceptionsHelper.unwrapCause(error) instanceof TaskCancelledException || ExceptionsHelper.unwrapCause(error.getCause()) instanceof TaskCancelledException;\n          \n      \n    \n    \n  \n\nWhether this is worth it or not depending on whether the nested exception could be a remote transport exception, or whether only the outermost exception can be.  If you don't know the answer it's probably better to add the extra unwrap call.", "bodyHTML": "<p dir=\"auto\">I wonder if it's also worth unwrapping the cause?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">ExceptionsHelper</span><span class=\"pl-k\">.</span>unwrapCause(error) <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TaskCancelledException</span> <span class=\"pl-k\">||</span> error<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TaskCancelledException</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">ExceptionsHelper</span><span class=\"pl-k\">.</span>unwrapCause(error) <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TaskCancelledException</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi x x-first\">ExceptionsHelper</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">unwrapCause(</span>error<span class=\"pl-k\">.</span>getCause(<span class=\"x x-first x-last\">)</span>) <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TaskCancelledException</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Whether this is worth it or not depending on whether the nested exception could be a remote transport exception, or whether only the outermost exception can be.  If you don't know the answer it's probably better to add the extra unwrap call.</p>", "author": "droberts195", "createdAt": "2020-04-27T11:14:50Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -294,6 +294,10 @@ private void reindexDataframeAndStartAnalysis(DataFrameAnalyticsTask task, DataF\n                 new GetIndexRequest().indices(config.getDest().getIndex()), destIndexListener);\n     }\n \n+    private boolean isTaskCancelledException(Exception error) {\n+        return ExceptionsHelper.unwrapCause(error) instanceof TaskCancelledException || error.getCause() instanceof TaskCancelledException;", "originalCommit": "a3fe99baf975fbb2a71db1c42faeee4e603f4ff4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNjk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55797#discussion_r415726981", "bodyText": "Good point. I'll do that.", "author": "dimitris-athanasiou", "createdAt": "2020-04-27T11:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNDMxMg=="}], "type": "inlineReview"}, {"oid": "aecabcf992e78e378699da3109b88a2018892974", "url": "https://github.com/elastic/elasticsearch/commit/aecabcf992e78e378699da3109b88a2018892974", "message": "Make method static", "committedDate": "2020-04-27T11:18:36Z", "type": "commit"}, {"oid": "705adeb8aa9adf57c43efad0cc3e53bc66c6527e", "url": "https://github.com/elastic/elasticsearch/commit/705adeb8aa9adf57c43efad0cc3e53bc66c6527e", "message": "Also unwrap cause", "committedDate": "2020-04-27T11:19:38Z", "type": "commit"}]}