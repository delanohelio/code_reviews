{"pr_number": 60953, "pr_title": "Simplify and Speed up some Compression Usage", "pr_author": "original-brownbear", "pr_createdAt": "2020-08-11T09:33:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60953", "timeline": [{"oid": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "url": "https://github.com/elastic/elasticsearch/commit/c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "message": "Simplify and Speed up some Compression Usage\n\nUse thread-local buffers and deflater and inflater instances to speed up\ncompressing and decompressing from in-memory bytes.\nNot manually invoking `end()` on these should be safe since their off-heap memory\nwill eventually be reclaimed by the finalizer thread which should not be an issue for thread-locals\nthat are not instantiated at a high frequency.\nThis significantly reduces the amount of byte copying and object creation relative to the previous approach\nwhich had to create a fresh temporary buffer (that was then resized multiple times during operations), copied\nbytes out of that buffer to a freshly allocated `byte[]`, used 4k stream buffers needlessly when working with\nbytes that are already in arrays (`writeTo` handles efficient writing to the compression logic now) etc.\n\nRelates #57284 which should be helped by this change to some degree.\nAlso, I expect this change to speed up mapping/template updates a little as those make heavy use of these\ncode paths.", "committedDate": "2020-08-11T09:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468710189", "body": "```suggestion\r\n        return uncompressed().equals(that.uncompressed());\r\n```\r\n\r\nalso looking at the code above, I wonder why we don't compare crc32 first before comparing the compressed byte arrays", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return uncompressed().equals(uncompressed());\n          \n          \n            \n                    return uncompressed().equals(that.uncompressed());\n          \n      \n    \n    \n  \n\nalso looking at the code above, I wonder why we don't compare crc32 first before comparing the compressed byte arrays", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> uncompressed()<span class=\"pl-k\">.</span>equals(uncompressed());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> uncompressed()<span class=\"pl-k\">.</span>equals(<span class=\"x x-first\">that</span><span class=\"pl-k x x-last\">.</span>uncompressed());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">also looking at the code above, I wonder why we don't compare crc32 first before comparing the compressed byte arrays</p>", "author": "jaymode", "createdAt": "2020-08-11T16:28:54Z", "path": "server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java", "diffHunk": "@@ -167,7 +162,7 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        return Arrays.equals(uncompressed(), that.uncompressed());\n+        return uncompressed().equals(uncompressed());", "originalCommit": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjg1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468822858", "bodyText": "\ud83e\udd26 thanks for spotting.\n\nI wonder why we don't compare crc32 first before comparing the compressed byte arrays\n\nI guess you could argue that it's really unlikely that the compressed bytes in the equal (as in equal uncompressed bytes) case aren't actually equal so you'd just add an extra int comparison in the equal case. So if we assume it's mostly the equal case here then the current version is better, I have no clue if that's true though. Probably doesn't matter much in practice since byte array comparison in JDK9+ is blazing fast anyway via jdk.internal.util.ArraysSupport#vectorizedMismatch? :)", "author": "original-brownbear", "createdAt": "2020-08-11T19:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NjY2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468846665", "bodyText": "Probably doesn't matter much in practice\n\nI agree that it doesn't matter much. Just a random thought that popped into my head :)", "author": "jaymode", "createdAt": "2020-08-11T20:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzA0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468713046", "body": "IMO it would be a good idea to add a comment about why these threadlocals are not used in the other methods of the class", "bodyText": "IMO it would be a good idea to add a comment about why these threadlocals are not used in the other methods of the class", "bodyHTML": "<p dir=\"auto\">IMO it would be a good idea to add a comment about why these threadlocals are not used in the other methods of the class</p>", "author": "jaymode", "createdAt": "2020-08-11T16:33:18Z", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -129,4 +131,37 @@ public void close() throws IOException {\n             }\n         };\n     }\n+\n+    private static final ThreadLocal<Inflater> inflaterRef = ThreadLocal.withInitial(() -> new Inflater(true));", "originalCommit": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468822905", "bodyText": "++", "author": "original-brownbear", "createdAt": "2020-08-11T19:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzA0Ng=="}], "type": "inlineReview"}, {"oid": "a02149db0c03391f23345b2d8d72850609152007", "url": "https://github.com/elastic/elasticsearch/commit/a02149db0c03391f23345b2d8d72850609152007", "message": "Merge remote-tracking branch 'elastic/master' into faster-compression", "committedDate": "2020-08-11T19:24:07Z", "type": "commit"}, {"oid": "af815ae229eb3ab4caa7cb502210356063d85a47", "url": "https://github.com/elastic/elasticsearch/commit/af815ae229eb3ab4caa7cb502210356063d85a47", "message": "CR: comments", "committedDate": "2020-08-11T19:44:54Z", "type": "commit"}]}