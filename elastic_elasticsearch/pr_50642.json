{"pr_number": 50642, "pr_title": "Add async dangling indices support", "pr_author": "ywelsch", "pr_createdAt": "2020-01-06T09:20:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50642", "timeline": [{"oid": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "url": "https://github.com/elastic/elasticsearch/commit/7d9e1d42832fc07b87d736b107a7029d5ac6d528", "message": "Add async dangling indices support", "committedDate": "2020-01-06T08:55:36Z", "type": "commit"}, {"oid": "e36f297362275eb8125dc19cffb30a044094a6e3", "url": "https://github.com/elastic/elasticsearch/commit/e36f297362275eb8125dc19cffb30a044094a6e3", "message": "Merge branch 'reduce-metadata-writes-master' into dangling-indices-v2", "committedDate": "2020-01-07T14:56:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3OTI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364179244", "body": "Doing this before calling `indexService.writeDanglingIndicesInfo()` means that `allPendingDanglingIndicesWritten()` may return `true` while there's still a write in progress.", "bodyText": "Doing this before calling indexService.writeDanglingIndicesInfo() means that allPendingDanglingIndicesWritten() may return true while there's still a write in progress.", "bodyHTML": "<p dir=\"auto\">Doing this before calling <code>indexService.writeDanglingIndicesInfo()</code> means that <code>allPendingDanglingIndicesWritten()</code> may return <code>true</code> while there's still a write in progress.</p>", "author": "DaveCTurner", "createdAt": "2020-01-08T11:10:53Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -1487,4 +1529,48 @@ private void setIdFieldDataEnabled(boolean value) {\n         }\n         return Optional.empty();\n     }\n+\n+    private void updateDanglingIndicesInfo(Index index) {\n+        assert DiscoveryNode.isDataNode(settings) : \"dangling indices information should only be persisted on data nodes\";\n+        if (danglingIndicesToWrite.add(index)) {\n+            logger.trace(\"triggered dangling indices update for {}\", index);\n+            final long triggeredTimeMillis = threadPool.relativeTimeInMillis();\n+            try {\n+                danglingIndicesThreadPoolExecutor.execute(new AbstractRunnable() {\n+                    @Override\n+                    public void onFailure(Exception e) {\n+                        logger.info(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index), e);\n+                    }\n+\n+                    @Override\n+                    protected void doRun() {\n+                        final boolean exists = danglingIndicesToWrite.remove(index);", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjM0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216347", "bodyText": "good catch. In an earlier iteration, I had allPendingDanglingIndicesWritten checking the executor as well, but I somehow thought this was unneeded later. I've reinstated the check in 3a7b656", "author": "ywelsch", "createdAt": "2020-01-08T12:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3OTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MDY0NA==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364180644", "body": "If `gateway.write_dangling_indices_info` is `false` I think we should avoid creating a thread here.", "bodyText": "If gateway.write_dangling_indices_info is false I think we should avoid creating a thread here.", "bodyHTML": "<p dir=\"auto\">If <code>gateway.write_dangling_indices_info</code> is <code>false</code> I think we should avoid creating a thread here.</p>", "author": "DaveCTurner", "createdAt": "2020-01-08T11:15:01Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -289,12 +306,25 @@ protected void closeInternal() {\n                 }\n             }\n         };\n+\n+        final String nodeName = Objects.requireNonNull(Node.NODE_NAME_SETTING.get(settings));\n+        danglingIndicesThreadPoolExecutor = EsExecutors.newScaling(\n+            nodeName + \"/\" + DANGLING_INDICES_UPDATE_THREAD_NAME,\n+            1, 1,", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjQ0MA==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216440", "bodyText": "\ud83d\udc4d done in 3a7b656", "author": "ywelsch", "createdAt": "2020-01-08T12:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MTIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364191220", "body": "Nice catch. Maybe call `unreferenceAll()` here instead?", "bodyText": "Nice catch. Maybe call unreferenceAll() here instead?", "bodyHTML": "<p dir=\"auto\">Nice catch. Maybe call <code>unreferenceAll()</code> here instead?</p>", "author": "DaveCTurner", "createdAt": "2020-01-08T11:43:23Z", "path": "server/src/main/java/org/elasticsearch/gateway/MetaStateService.java", "diffHunk": "@@ -264,15 +264,28 @@ public void cleanupIndex(Index index, long currentGeneration) {\n         INDEX_META_DATA_FORMAT.cleanupOldFiles(currentGeneration, nodeEnv.indexPaths(index));\n     }\n \n+    /**\n+     * Creates empty cluster state file on disk, deleting global metadata and unreferencing all index metadata\n+     * (only used for dangling indices at that point).\n+     */\n+    public void unreferenceAll() throws IOException {\n+        MANIFEST_FORMAT.writeAndCleanup(Manifest.empty(), nodeEnv.nodeDataPaths()); // write empty file so that indices become unreferenced\n+        META_DATA_FORMAT.cleanupOldFiles(Long.MAX_VALUE, nodeEnv.nodeDataPaths());\n+    }\n+\n     /**\n      * Removes manifest file, global metadata and all index metadata\n      */\n     public void deleteAll() throws IOException {\n-        MANIFEST_FORMAT.cleanupOldFiles(Long.MAX_VALUE, nodeEnv.nodeDataPaths());\n+        // To ensure that the metadata is never reimported by loadFullStateBWC in case where the deletions here fail mid-way through,\n+        // we first write an empty manifest file so that the indices become unreferenced, then clean up the indices, and only then delete\n+        // the manifest file.\n+        MANIFEST_FORMAT.writeAndCleanup(Manifest.empty(), nodeEnv.nodeDataPaths());", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjQ2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216469", "bodyText": "ok, done in 3a7b656", "author": "ywelsch", "createdAt": "2020-01-08T12:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MTIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MjEwMw==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364192103", "body": "I think a failure here indicates a bad enough problem to warrant a `WARN`-level log.\r\n\r\n```suggestion\r\n            logger.warn(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index()), e);\r\n```", "bodyText": "I think a failure here indicates a bad enough problem to warrant a WARN-level log.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index()), e);\n          \n          \n            \n                        logger.warn(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index()), e);", "bodyHTML": "<p dir=\"auto\">I think a failure here indicates a bad enough problem to warrant a <code>WARN</code>-level log.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParameterizedMessage</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failed to write dangling indices state for index {}<span class=\"pl-pds\">\"</span></span>, index()), e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">warn</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParameterizedMessage</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failed to write dangling indices state for index {}<span class=\"pl-pds\">\"</span></span>, index()), e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-01-08T11:45:44Z", "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "diffHunk": "@@ -324,6 +327,29 @@ public synchronized void close(final String reason, boolean delete) throws IOExc\n         }\n     }\n \n+    // method is synchronized so that IndexService can't be closed while we're writing out dangling indices information\n+    public synchronized void writeDanglingIndicesInfo() {\n+        if (closed.get()) {\n+            return;\n+        }\n+        try {\n+            IndexMetaData.FORMAT.writeAndCleanup(getMetaData(), nodeEnv.indexPaths(index()));\n+        } catch (WriteStateException e) {\n+            logger.info(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index()), e);", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216571", "bodyText": "3a7b656", "author": "ywelsch", "createdAt": "2020-01-08T12:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MjEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MjE2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364192167", "body": "I think a failure here indicates a bad enough problem to warrant a `WARN`-level log.\r\n\r\n```suggestion\r\n            logger.warn(() -> new ParameterizedMessage(\"failed to delete dangling indices state for index {}\", index()), e);\r\n```", "bodyText": "I think a failure here indicates a bad enough problem to warrant a WARN-level log.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(() -> new ParameterizedMessage(\"failed to delete dangling indices state for index {}\", index()), e);\n          \n          \n            \n                        logger.warn(() -> new ParameterizedMessage(\"failed to delete dangling indices state for index {}\", index()), e);", "bodyHTML": "<p dir=\"auto\">I think a failure here indicates a bad enough problem to warrant a <code>WARN</code>-level log.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParameterizedMessage</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failed to delete dangling indices state for index {}<span class=\"pl-pds\">\"</span></span>, index()), e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">warn</span>(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParameterizedMessage</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failed to delete dangling indices state for index {}<span class=\"pl-pds\">\"</span></span>, index()), e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-01-08T11:45:54Z", "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "diffHunk": "@@ -324,6 +327,29 @@ public synchronized void close(final String reason, boolean delete) throws IOExc\n         }\n     }\n \n+    // method is synchronized so that IndexService can't be closed while we're writing out dangling indices information\n+    public synchronized void writeDanglingIndicesInfo() {\n+        if (closed.get()) {\n+            return;\n+        }\n+        try {\n+            IndexMetaData.FORMAT.writeAndCleanup(getMetaData(), nodeEnv.indexPaths(index()));\n+        } catch (WriteStateException e) {\n+            logger.info(() -> new ParameterizedMessage(\"failed to write dangling indices state for index {}\", index()), e);\n+        }\n+    }\n+\n+    // method is synchronized so that IndexService can't be closed while we're deleting dangling indices information\n+    public synchronized void deleteDanglingIndicesInfo() {\n+        if (closed.get()) {\n+            return;\n+        }\n+        try {\n+            MetaDataStateFormat.deleteMetaState(nodeEnv.indexPaths(index()));\n+        } catch (IOException e) {\n+            logger.info(() -> new ParameterizedMessage(\"failed to delete dangling indices state for index {}\", index()), e);", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjYxNA==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216614", "bodyText": "3a7b656", "author": "ywelsch", "createdAt": "2020-01-08T12:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MjE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MzA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364193042", "body": ":+1: noting that if dangling indices functionality is disabled then we delete the metadata as the indices are allocated, so if any indices are genuinely dangling at this point then we keep their metadata around.", "bodyText": "\ud83d\udc4d noting that if dangling indices functionality is disabled then we delete the metadata as the indices are allocated, so if any indices are genuinely dangling at this point then we keep their metadata around.", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji> noting that if dangling indices functionality is disabled then we delete the metadata as the indices are allocated, so if any indices are genuinely dangling at this point then we keep their metadata around.</p>", "author": "DaveCTurner", "createdAt": "2020-01-08T11:48:28Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java", "diffHunk": "@@ -109,7 +109,11 @@ public void start(Settings settings, TransportService transportService, ClusterS\n                             .build());\n                     lucenePersistedState = new LucenePersistedState(\n                         persistenceWriter, currentTerm, clusterState);\n-                    metaStateService.deleteAll(); // delete legacy files\n+                    if (DiscoveryNode.isDataNode(settings)) {\n+                        metaStateService.unreferenceAll(); // unreference legacy files (only keep them for dangling indices functionality)", "originalCommit": "7d9e1d42832fc07b87d736b107a7029d5ac6d528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNjc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50642#discussion_r364216781", "bodyText": "yup.", "author": "ywelsch", "createdAt": "2020-01-08T12:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MzA0Mg=="}], "type": "inlineReview"}, {"oid": "3a7b656f5ce344c3ee413a5a933d4f8fed34cf9a", "url": "https://github.com/elastic/elasticsearch/commit/3a7b656f5ce344c3ee413a5a933d4f8fed34cf9a", "message": "review feedback", "committedDate": "2020-01-08T12:54:03Z", "type": "commit"}]}