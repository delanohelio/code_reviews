{"pr_number": 54729, "pr_title": "Trigger explicit loading of blob container and snapshot in the pre-recovery hook", "pr_author": "tlrx", "pr_createdAt": "2020-04-03T16:13:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54729", "timeline": [{"oid": "1ce45d6ae376d417ffbfcb6ab7f558fa3f2a8714", "url": "https://github.com/elastic/elasticsearch/commit/1ce45d6ae376d417ffbfcb6ab7f558fa3f2a8714", "message": "Load snapshot in pre-recovery", "committedDate": "2020-04-03T15:59:53Z", "type": "commit"}, {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "url": "https://github.com/elastic/elasticsearch/commit/9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "message": "Merge branch 'feature/searchable-snapshots' into load-snapshot", "committedDate": "2020-04-06T07:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403928241", "body": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\r\n\r\n```suggestion\r\n        assert loaded != (snapshot == null);\r\n```", "bodyText": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert loaded ^ snapshot == null;\n          \n          \n            \n                    assert loaded != (snapshot == null);", "bodyHTML": "<p dir=\"auto\">Technically ok, but I think a logical XOR is clearer than a bitwise XOR:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">assert</span> loaded <span class=\"pl-k x x-first\">^</span><span class=\"x x-last\"> </span>snapshot <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">assert</span> loaded <span class=\"pl-k x x-first\">!=</span><span class=\"x x-last\"> (</span>snapshot <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span><span class=\"x x-first x-last\">)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-04-06T08:51:43Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDQ0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403950443", "bodyText": "Sure!", "author": "tlrx", "createdAt": "2020-04-06T09:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODQxMw==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403928413", "body": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\r\n\r\n```suggestion\r\n        assert loaded != (blobContainer == null);\r\n```", "bodyText": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert loaded ^ blobContainer == null;\n          \n          \n            \n                    assert loaded != (blobContainer == null);", "bodyHTML": "<p dir=\"auto\">Technically ok, but I think a logical XOR is clearer than a bitwise XOR:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">assert</span> loaded <span class=\"pl-k x x-first\">^</span><span class=\"x x-last\"> </span>blobContainer <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">assert</span> loaded <span class=\"pl-k x x-first\">!=</span><span class=\"x x-last\"> (</span>blobContainer <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span><span class=\"x x-first x-last\">)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-04-06T08:51:58Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403930708", "body": "Can we keep this assertion, and instead only call this method after checking `loaded`?", "bodyText": "Can we keep this assertion, and instead only call this method after checking loaded?", "bodyHTML": "<p dir=\"auto\">Can we keep this assertion, and instead only call this method after checking <code>loaded</code>?</p>", "author": "DaveCTurner", "createdAt": "2020-04-06T08:55:35Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1OTI2MA==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403959260", "bodyText": "I reverted this change. blobContainer() and snapshot() should only be used after loadSnapshot() has been called, so restoring the previous assertion and not checking for loaded will help to catch any future places where blobContainer()/snapshot() is used before the snapshot is explicitely loaded. WDYT?", "author": "tlrx", "createdAt": "2020-04-06T09:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzY4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403973687", "bodyText": "\ud83d\udc4d yes, I meant that callers should be careful only to call this if loaded. This is good.", "author": "DaveCTurner", "createdAt": "2020-04-06T10:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDc2NA==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403930764", "body": "Can we keep this assertion, and instead only call this method after checking `loaded`?", "bodyText": "Can we keep this assertion, and instead only call this method after checking loaded?", "bodyHTML": "<p dir=\"auto\">Can we keep this assertion, and instead only call this method after checking <code>loaded</code>?</p>", "author": "DaveCTurner", "createdAt": "2020-04-06T08:55:39Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931179", "body": "I don't think we need to assert this here since we're not changing any state?", "bodyText": "I don't think we need to assert this here since we're not changing any state?", "bodyHTML": "<p dir=\"auto\">I don't think we need to assert this here since we're not changing any state?</p>", "author": "DaveCTurner", "createdAt": "2020-04-06T08:56:19Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NTE5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403955196", "bodyText": "Right", "author": "tlrx", "createdAt": "2020-04-06T09:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTIyNw==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931227", "body": "I don't think we need to assert this here since we're not changing any state?", "bodyText": "I don't think we need to assert this here since we're not changing any state?", "bodyHTML": "<p dir=\"auto\">I don't think we need to assert this here since we're not changing any state?</p>", "author": "DaveCTurner", "createdAt": "2020-04-06T08:56:24Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;\n+        final BlobStoreIndexShardSnapshot snapshot = this.snapshot;\n+        assert invariant();", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NTI2MA==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403955260", "bodyText": "Right", "author": "tlrx", "createdAt": "2020-04-06T09:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTU4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931583", "body": "Relates my earlier comment - let's return an empty list if `loaded == false`, then we can be sure that `snapshot()` will return non-null.", "bodyText": "Relates my earlier comment - let's return an empty list if loaded == false, then we can be sure that snapshot() will return non-null.", "bodyHTML": "<p dir=\"auto\">Relates my earlier comment - let's return an empty list if <code>loaded == false</code>, then we can be sure that <code>snapshot()</code> will return non-null.</p>", "author": "DaveCTurner", "createdAt": "2020-04-06T08:56:58Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;\n+        final BlobStoreIndexShardSnapshot snapshot = this.snapshot;\n+        assert invariant();\n         return snapshot;\n     }\n \n+    private List<BlobStoreIndexShardSnapshot.FileInfo> files() {\n+        final BlobStoreIndexShardSnapshot snapshot = snapshot();", "originalCommit": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403952478", "bodyText": "Sure. I must admit I find this code confusing today :/", "author": "tlrx", "createdAt": "2020-04-06T09:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTU4Mw=="}], "type": "inlineReview"}, {"oid": "6c788c20e416898feefc51c90f4075ef194c5bf2", "url": "https://github.com/elastic/elasticsearch/commit/6c788c20e416898feefc51c90f4075ef194c5bf2", "message": "apply feedback", "committedDate": "2020-04-06T09:38:52Z", "type": "commit"}]}