{"pr_number": 50550, "pr_title": "Make EC2 Discovery Plugin Retry Requests", "pr_author": "original-brownbear", "pr_createdAt": "2020-01-02T13:25:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50550", "timeline": [{"oid": "89459220d8631b4ed54046afdecade0f237ac1ac", "url": "https://github.com/elastic/elasticsearch/commit/89459220d8631b4ed54046afdecade0f237ac1ac", "message": "Make EC2 Discovery Plugin Retry Requests\n\nUse the default retry condition instead of never retrying in the discovery plugin causing hot retries upstream and\nadd a test that verifies retrying works.\n\nCloses #50462", "committedDate": "2020-01-02T13:22:12Z", "type": "commit"}, {"oid": "7a5b21f5d243037d0a747ca3ab0502b84b1862fc", "url": "https://github.com/elastic/elasticsearch/commit/7a5b21f5d243037d0a747ca3ab0502b84b1862fc", "message": "nicer", "committedDate": "2020-01-02T13:26:28Z", "type": "commit"}, {"oid": "9c8c589deb08e8ab67ba96ea0eca023756db5dbd", "url": "https://github.com/elastic/elasticsearch/commit/9c8c589deb08e8ab67ba96ea0eca023756db5dbd", "message": "nicer", "committedDate": "2020-01-02T13:28:17Z", "type": "commit"}, {"oid": "2d835a8cda8e04832b9e06633d389ab0145f60dd", "url": "https://github.com/elastic/elasticsearch/commit/2d835a8cda8e04832b9e06633d389ab0145f60dd", "message": "nicer", "committedDate": "2020-01-02T13:29:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3MzM3OA==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362473378", "body": "Admittedly quite a bit of code, but I'm hoping we can just extend the REST layer mocking here and dry things up against the fixture step-by-step like we did for S3 and the other cloud providers in the repository tests to get rid of all our complicated mocking of actual AWS SDK classes and just mock on the REST layer.\r\n", "bodyText": "Admittedly quite a bit of code, but I'm hoping we can just extend the REST layer mocking here and dry things up against the fixture step-by-step like we did for S3 and the other cloud providers in the repository tests to get rid of all our complicated mocking of actual AWS SDK classes and just mock on the REST layer.", "bodyHTML": "<p dir=\"auto\">Admittedly quite a bit of code, but I'm hoping we can just extend the REST layer mocking here and dry things up against the fixture step-by-step like we did for S3 and the other cloud providers in the repository tests to get rid of all our complicated mocking of actual AWS SDK classes and just mock on the REST layer.</p>", "author": "original-brownbear", "createdAt": "2020-01-02T13:32:03Z", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {", "originalCommit": "2d835a8cda8e04832b9e06633d389ab0145f60dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3MzY4NA==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362473684", "body": "Just using the default retry condition here now. We may want to make the retry interval configurable, if only internally for tests. The current settings make the first retry happen after almost 20s but I didn't want to add that complication here yet.", "bodyText": "Just using the default retry condition here now. We may want to make the retry interval configurable, if only internally for tests. The current settings make the first retry happen after almost 20s but I didn't want to add that complication here yet.", "bodyHTML": "<p dir=\"auto\">Just using the default retry condition here now. We may want to make the retry interval configurable, if only internally for tests. The current settings make the first retry happen after almost 20s but I didn't want to add that complication here yet.</p>", "author": "original-brownbear", "createdAt": "2020-01-02T13:33:17Z", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -79,7 +79,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n         // Increase the number of retries in case of 5xx API responses\n         final Random rand = Randomness.get();\n         final RetryPolicy retryPolicy = new RetryPolicy(\n-            RetryPolicy.RetryCondition.NO_RETRY_CONDITION,\n+            null,", "originalCommit": "2d835a8cda8e04832b9e06633d389ab0145f60dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDQyNA==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362474424", "body": "Can we avoid setting our own retry policy at all and use the SDK default? The SDK makes a more nuanced decision about how much to back off based on the error type. If we really want 10 retries then that can be overridden with `setMaxErrorRetry(10)` instead?", "bodyText": "Can we avoid setting our own retry policy at all and use the SDK default? The SDK makes a more nuanced decision about how much to back off based on the error type. If we really want 10 retries then that can be overridden with setMaxErrorRetry(10) instead?", "bodyHTML": "<p dir=\"auto\">Can we avoid setting our own retry policy at all and use the SDK default? The SDK makes a more nuanced decision about how much to back off based on the error type. If we really want 10 retries then that can be overridden with <code>setMaxErrorRetry(10)</code> instead?</p>", "author": "DaveCTurner", "createdAt": "2020-01-02T13:35:54Z", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -79,7 +79,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n         // Increase the number of retries in case of 5xx API responses\n         final Random rand = Randomness.get();\n         final RetryPolicy retryPolicy = new RetryPolicy(", "originalCommit": "2d835a8cda8e04832b9e06633d389ab0145f60dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3OTc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362479758", "bodyText": "Right, that's much nicer. Moved to the default and kept retries at 10 for now in d015576 :)", "author": "original-brownbear", "createdAt": "2020-01-02T13:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDQyNA=="}], "type": "inlineReview"}, {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41", "url": "https://github.com/elastic/elasticsearch/commit/d015576900c80123733e36ce2a8f5a4b8c897b41", "message": "default retry backoff", "committedDate": "2020-01-02T13:53:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4MDc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362480757", "body": "I think this is equivalent (and I prefer it):\r\n\r\n```suggestion\r\n         clientConfiguration.setMaxErrorRetry(10);\r\n```", "bodyText": "I think this is equivalent (and I prefer it):\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    clientConfiguration.setRetryPolicy(retryPolicy);\n          \n          \n            \n                     clientConfiguration.setMaxErrorRetry(10);", "bodyHTML": "<p dir=\"auto\">I think this is equivalent (and I prefer it):</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        clientConfiguration<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">setRetryPolicy(retryPolicy</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\"> </span>clientConfiguration<span class=\"pl-k\">.</span><span class=\"x x-first\">setMaxErrorRetry(</span><span class=\"pl-c1 x x-last\">10</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-01-02T13:57:34Z", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -77,16 +75,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n             clientConfiguration.setProxyPassword(clientSettings.proxyPassword);\n         }\n         // Increase the number of retries in case of 5xx API responses\n-        final Random rand = Randomness.get();\n-        final RetryPolicy retryPolicy = new RetryPolicy(\n-            RetryPolicy.RetryCondition.NO_RETRY_CONDITION,\n-            (originalRequest, exception, retriesAttempted) -> {\n-               // with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000)\n-               logger.warn(\"EC2 API request failed, retry again. Reason was:\", exception);\n-               return 1000L * (long) (10d * Math.pow(2, retriesAttempted / 2.0d) * (1.0d + rand.nextDouble()));\n-            },\n-            10,\n-            false);\n+        final RetryPolicy retryPolicy = new RetryPolicy(null, null, 10, false);\n         clientConfiguration.setRetryPolicy(retryPolicy);", "originalCommit": "d015576900c80123733e36ce2a8f5a4b8c897b41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NDk3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362484973", "body": "```suggestion\r\n            }\r\n\r\n            fail(\"did not send response\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        fail(\"did not send response\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"137\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"137\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"138\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"139\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            fail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>did not send response<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-01-02T14:11:17Z", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {\n+                        exchange.sendResponseHeaders(HttpStatus.SC_SERVICE_UNAVAILABLE, -1);\n+                        return;\n+                    }\n+                    // Simulate an EC2 DescribeInstancesResponse\n+                    byte[] responseBody = null;\n+                    for (NameValuePair parse : URLEncodedUtils.parse(request, UTF_8)) {\n+                        if (\"Action\".equals(parse.getName())) {\n+                            responseBody = generateDescribeInstancesResponse(hosts);\n+                            break;\n+                        }\n+                    }\n+                    responseBody = responseBody == null ? new byte[0] : responseBody;\n+                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/xml; charset=UTF-8\");\n+                    exchange.sendResponseHeaders(HttpStatus.SC_OK, responseBody.length);\n+                    exchange.getResponseBody().write(responseBody);\n+                }\n+            }", "originalCommit": "d015576900c80123733e36ce2a8f5a4b8c897b41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NTA2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362485062", "body": "```suggestion\r\n                    exchange.getResponseBody().write(responseBody);\r\n                    return;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                exchange.getResponseBody().write(responseBody);\n          \n          \n            \n                                exchange.getResponseBody().write(responseBody);\n          \n          \n            \n                                return;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"134\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    exchange<span class=\"pl-k\">.</span>getResponseBody()<span class=\"pl-k\">.</span>write(responseBody);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"134\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    exchange<span class=\"pl-k\">.</span>getResponseBody()<span class=\"pl-k\">.</span>write(responseBody);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"135\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">return</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-01-02T14:11:35Z", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {\n+                        exchange.sendResponseHeaders(HttpStatus.SC_SERVICE_UNAVAILABLE, -1);\n+                        return;\n+                    }\n+                    // Simulate an EC2 DescribeInstancesResponse\n+                    byte[] responseBody = null;\n+                    for (NameValuePair parse : URLEncodedUtils.parse(request, UTF_8)) {\n+                        if (\"Action\".equals(parse.getName())) {\n+                            responseBody = generateDescribeInstancesResponse(hosts);\n+                            break;\n+                        }\n+                    }\n+                    responseBody = responseBody == null ? new byte[0] : responseBody;\n+                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/xml; charset=UTF-8\");\n+                    exchange.sendResponseHeaders(HttpStatus.SC_OK, responseBody.length);\n+                    exchange.getResponseBody().write(responseBody);", "originalCommit": "d015576900c80123733e36ce2a8f5a4b8c897b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ5NjczNg==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362496736", "bodyText": "Makes sense applied together with the otehr suggestion :)", "author": "original-brownbear", "createdAt": "2020-01-02T14:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NTA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NjA5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362486092", "body": "Could we also check that we retry repeatedly? The first five retries take less than a second.", "bodyText": "Could we also check that we retry repeatedly? The first five retries take less than a second.", "bodyHTML": "<p dir=\"auto\">Could we also check that we retry repeatedly? The first five retries take less than a second.</p>", "author": "DaveCTurner", "createdAt": "2020-01-02T14:14:53Z", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {", "originalCommit": "d015576900c80123733e36ce2a8f5a4b8c897b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ5NjU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362496597", "bodyText": "Done :)", "author": "original-brownbear", "createdAt": "2020-01-02T14:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NjA5Mg=="}], "type": "inlineReview"}, {"oid": "ba2026195d528033bb7e085362996f2ecc2d8d41", "url": "https://github.com/elastic/elasticsearch/commit/ba2026195d528033bb7e085362996f2ecc2d8d41", "message": "Merge remote-tracking branch 'elastic/master' into 50462", "committedDate": "2020-01-02T14:23:17Z", "type": "commit"}, {"oid": "fb28d076fc8c44d9c44355b3758da83ccbd544e7", "url": "https://github.com/elastic/elasticsearch/commit/fb28d076fc8c44d9c44355b3758da83ccbd544e7", "message": "Merge remote-tracking branch 'elastic/master' into 50462", "committedDate": "2020-01-02T14:23:27Z", "type": "commit"}, {"oid": "ec56d958a0c424e61668a16e0e4fa7b16d342e1e", "url": "https://github.com/elastic/elasticsearch/commit/ec56d958a0c424e61668a16e0e4fa7b16d342e1e", "message": "CR: comments", "committedDate": "2020-01-02T14:44:21Z", "type": "commit"}]}