{"pr_number": 60730, "pr_title": "Improve some BytesStreamOutput Usage", "pr_author": "original-brownbear", "pr_createdAt": "2020-08-05T11:10:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60730", "timeline": [{"oid": "ce1f65acbe7dec418f1df3e5ad06a508691053a5", "url": "https://github.com/elastic/elasticsearch/commit/ce1f65acbe7dec418f1df3e5ad06a508691053a5", "message": "Improve some BytesStreamOutput Usage\n\n* Stop redundantly creating a `0` length `ByteArray` that is never used\n* Add efficient way to get a minimal size copy of the bytes in a `BytesStreamOutput`\n* Avoid multiple redundant `byte[]` copies in search cache key creation", "committedDate": "2020-08-05T11:06:40Z", "type": "commit"}, {"oid": "5ca8e09523977c53e14b26908fc64330b450392d", "url": "https://github.com/elastic/elasticsearch/commit/5ca8e09523977c53e14b26908fc64330b450392d", "message": "fix", "committedDate": "2020-08-05T11:14:38Z", "type": "commit"}, {"oid": "1a09622477de3abb27edfa3ee07ba84416fd4a57", "url": "https://github.com/elastic/elasticsearch/commit/1a09622477de3abb27edfa3ee07ba84416fd4a57", "message": "fix", "committedDate": "2020-08-05T11:15:27Z", "type": "commit"}, {"oid": "c237272e321c933e1a1382949196f60fc32a76ea", "url": "https://github.com/elastic/elasticsearch/commit/c237272e321c933e1a1382949196f60fc32a76ea", "message": "fix", "committedDate": "2020-08-05T11:16:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NDE2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465654165", "body": "Same optimization already added to `IOUtils` for a single `Releasable` since we now use that heavily in closing the releasable stream.", "bodyText": "Same optimization already added to IOUtils for a single Releasable since we now use that heavily in closing the releasable stream.", "bodyHTML": "<p dir=\"auto\">Same optimization already added to <code>IOUtils</code> for a single <code>Releasable</code> since we now use that heavily in closing the releasable stream.</p>", "author": "original-brownbear", "createdAt": "2020-08-05T11:16:47Z", "path": "server/src/main/java/org/elasticsearch/common/lease/Releasables.java", "diffHunk": "@@ -46,6 +47,15 @@ public static void close(Iterable<? extends Releasable> releasables) {\n         close(releasables, false);\n     }\n \n+    /** Release the provided {@link Releasable}. */\n+    public static void close(@Nullable Releasable releasable) {", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NTAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465655004", "body": "This was really inefficient before. The cache key would usually be ~100b but be written with buffers of sizes `8`, `56` and then `1xx`, then copied again below.\r\n", "bodyText": "This was really inefficient before. The cache key would usually be ~100b but be written with buffers of sizes 8, 56 and then 1xx, then copied again below.", "bodyHTML": "<p dir=\"auto\">This was really inefficient before. The cache key would usually be ~100b but be written with buffers of sizes <code>8</code>, <code>56</code> and then <code>1xx</code>, then copied again below.</p>", "author": "original-brownbear", "createdAt": "2020-08-05T11:18:43Z", "path": "server/src/main/java/org/elasticsearch/search/internal/ShardSearchRequest.java", "diffHunk": "@@ -342,15 +341,20 @@ public void canReturnNullResponseIfMatchNoDocs(boolean value) {\n         this.canReturnNullResponseIfMatchNoDocs = value;\n     }\n \n+    private static final ThreadLocal<BytesStreamOutput> scratch = ThreadLocal.withInitial(BytesStreamOutput::new);\n+\n     /**\n      * Returns the cache key for this shard search request, based on its content\n      */\n     public BytesReference cacheKey() throws IOException {\n-        BytesStreamOutput out = new BytesStreamOutput();", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NTIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465655215", "body": "Obviously somewhat trivial but why not save some bounds checks.", "bodyText": "Obviously somewhat trivial but why not save some bounds checks.", "bodyHTML": "<p dir=\"auto\">Obviously somewhat trivial but why not save some bounds checks.</p>", "author": "original-brownbear", "createdAt": "2020-08-05T11:19:10Z", "path": "server/src/main/java/org/elasticsearch/transport/TcpHeader.java", "diffHunk": "@@ -60,10 +60,11 @@ public static int headerSize(Version version) {\n         }\n     }\n \n+    private static final byte[] PREFIX = {(byte) 'E', (byte) 'S'};\n+\n     public static void writeHeader(StreamOutput output, long requestId, byte status, Version version, int contentSize,\n                                    int variableHeaderSize) throws IOException {\n-        output.writeByte((byte)'E');\n-        output.writeByte((byte)'S');\n+        output.writeBytes(PREFIX);", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1ODY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465658651", "body": "Tiny nit - this could be declared inside the `try`.", "bodyText": "Tiny nit - this could be declared inside the try.", "bodyHTML": "<p dir=\"auto\">Tiny nit - this could be declared inside the <code>try</code>.</p>", "author": "pugnascotia", "createdAt": "2020-08-05T11:26:29Z", "path": "server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java", "diffHunk": "@@ -143,6 +150,27 @@ public BytesReference bytes() {\n         return new PagedBytesReference(bytes, count);\n     }\n \n+    /**\n+     * Like {@link #bytes()} but copies the bytes to a freshly allocated buffer.\n+     *\n+     * @return copy of the bytes in this instances\n+     */\n+    public BytesReference copyBytes() {\n+        final byte[] keyBytes = new byte[count];\n+        int offset = 0;\n+        final BytesRefIterator iterator = bytes().iterator();\n+        BytesRef slice;", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87ee451eea1d1b9baa207cd112a8271da0eed54c", "url": "https://github.com/elastic/elasticsearch/commit/87ee451eea1d1b9baa207cd112a8271da0eed54c", "message": "nits", "committedDate": "2020-08-05T11:27:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDAwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465660008", "body": "Is this comment supposed to be here?", "bodyText": "Is this comment supposed to be here?", "bodyHTML": "<p dir=\"auto\">Is this comment supposed to be here?</p>", "author": "pugnascotia", "createdAt": "2020-08-05T11:29:24Z", "path": "server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java", "diffHunk": "@@ -143,6 +150,27 @@ public BytesReference bytes() {\n         return new PagedBytesReference(bytes, count);\n     }\n \n+    /**\n+     * Like {@link #bytes()} but copies the bytes to a freshly allocated buffer.\n+     *\n+     * @return copy of the bytes in this instances\n+     */\n+    public BytesReference copyBytes() {\n+        final byte[] keyBytes = new byte[count];\n+        int offset = 0;\n+        final BytesRefIterator iterator = bytes().iterator();\n+        BytesRef slice;\n+        try {\n+            while ((slice = iterator.next()) != null) {\n+                System.arraycopy(slice.bytes, slice.offset, keyBytes, offset, slice.length);\n+                offset += slice.length;\n+            }\n+        } catch (IOException e) {\n+            throw new AssertionError(e);\n+        }\n+        return new BytesArray(keyBytes);// do a deep copy", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDY4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465660685", "bodyText": "no :)", "author": "original-brownbear", "createdAt": "2020-08-05T11:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDAwOA=="}], "type": "inlineReview"}, {"oid": "39a6cc4314c2927557fd8a50f504f4b6b64ffcae", "url": "https://github.com/elastic/elasticsearch/commit/39a6cc4314c2927557fd8a50f504f4b6b64ffcae", "message": "no :)", "committedDate": "2020-08-05T11:30:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465662958", "body": "What is the purpose of this block? Is it just to generate a `BytesReference` containing `\"ES\"`? If so, could we not just do:\r\n\r\n```suggestion\r\n    private static final BytesReference PING_MESSAGE = new BytesArray(\"ES\");\r\n```", "bodyText": "What is the purpose of this block? Is it just to generate a BytesReference containing \"ES\"? If so, could we not just do:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final BytesReference PING_MESSAGE;\n          \n          \n            \n            \n          \n          \n            \n                static {\n          \n          \n            \n                    try (BytesStreamOutput out = new BytesStreamOutput()) {\n          \n          \n            \n                        out.writeByte((byte) 'E');\n          \n          \n            \n                        out.writeByte((byte) 'S');\n          \n          \n            \n                        out.writeInt(PING_DATA_SIZE);\n          \n          \n            \n                        PING_MESSAGE = out.copyBytes();\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                        throw new AssertionError(e.getMessage(), e); // won't happen\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private static final BytesReference PING_MESSAGE = new BytesArray(\"ES\");", "bodyHTML": "<p dir=\"auto\">What is the purpose of this block? Is it just to generate a <code>BytesReference</code> containing <code>\"ES\"</code>? If so, could we not just do:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"51\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">BytesReference</span> <span class=\"pl-c1\">PING_MESSAGE</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">static</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">BytesStreamOutput</span> out <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BytesStreamOutput</span>()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            out<span class=\"pl-k\">.</span>writeByte((<span class=\"pl-k\">byte</span>) <span class=\"pl-s\"><span class=\"pl-pds\">'</span>E<span class=\"pl-pds\">'</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            out<span class=\"pl-k\">.</span>writeByte((<span class=\"pl-k\">byte</span>) <span class=\"pl-s\"><span class=\"pl-pds\">'</span>S<span class=\"pl-pds\">'</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            out<span class=\"pl-k\">.</span>writeInt(<span class=\"pl-c1\">PING_DATA_SIZE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">PING_MESSAGE</span> <span class=\"pl-k\">=</span> out<span class=\"pl-k\">.</span>copyBytes();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"60\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(e<span class=\"pl-k\">.</span>getMessage(), e); <span class=\"pl-c\"><span class=\"pl-c\">//</span> won't happen</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"62\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"51\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">BytesReference</span> <span class=\"pl-c1\">PING_MESSAGE</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BytesArray</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ES<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pugnascotia", "createdAt": "2020-08-05T11:35:22Z", "path": "server/src/main/java/org/elasticsearch/transport/TransportKeepAlive.java", "diffHunk": "@@ -48,28 +48,31 @@\n \n     static final int PING_DATA_SIZE = -1;\n \n+    private static final BytesReference PING_MESSAGE;\n+\n+    static {\n+        try (BytesStreamOutput out = new BytesStreamOutput()) {\n+            out.writeByte((byte) 'E');\n+            out.writeByte((byte) 'S');\n+            out.writeInt(PING_DATA_SIZE);\n+            PING_MESSAGE = out.copyBytes();\n+        } catch (IOException e) {\n+            throw new AssertionError(e.getMessage(), e); // won't happen\n+        }\n+    }", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MzczNw==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465663737", "bodyText": "We also have the int PING_DATA_SIZE, but yea the only purpose of the block is setting up the message but I don't think we have a nicer way of building it right at this point.", "author": "original-brownbear", "createdAt": "2020-08-05T11:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5NTM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465695343", "bodyText": "Oh, I missed the part where it writes the size as well.", "author": "pugnascotia", "createdAt": "2020-08-05T12:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA=="}], "type": "inlineReview"}]}