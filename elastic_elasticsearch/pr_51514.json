{"pr_number": 51514, "pr_title": "X-Pack SAML IdP Plugin", "pr_author": "tvernum", "pr_createdAt": "2020-01-28T03:59:09Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51514", "timeline": [{"oid": "049ba5646f742f5a56a334328bfffba821c400b1", "url": "https://github.com/elastic/elasticsearch/commit/049ba5646f742f5a56a334328bfffba821c400b1", "message": "X-Pack SAML IdP Plugin\n\nThis introduces a new sub-plugin to X-Pack that implements the backend\nfor a basic IdP built on top of the X-Pack security primitives.\n\nIn this commit there is a mostly empty plugin implementation and a\nclass the implements the minimum necessary to generate a SAML 2.0\nauthentication \"Response\".", "committedDate": "2020-01-28T03:55:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDE3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371600172", "body": "I've moved this class to core. It seemed silly to duplicate it when it was generally useful.", "bodyText": "I've moved this class to core. It seemed silly to duplicate it when it was generally useful.", "bodyHTML": "<p dir=\"auto\">I've moved this class to core. It seemed silly to duplicate it when it was generally useful.</p>", "author": "tvernum", "createdAt": "2020-01-28T04:00:48Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/support/RestorableContextClassLoader.java", "diffHunk": "@@ -3,7 +3,7 @@\n  * or more contributor license agreements. Licensed under the Elastic License;\n  * you may not use this file except in compliance with the Elastic License.\n  */\n-package org.elasticsearch.xpack.security.support;\n+package org.elasticsearch.xpack.core.security.support;", "originalCommit": "049ba5646f742f5a56a334328bfffba821c400b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "url": "https://github.com/elastic/elasticsearch/commit/1bdccceb9a33db0e1362de84560b6cfb321af0bf", "message": "Update comments in forbidden signatures", "committedDate": "2020-01-28T04:02:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0OTc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371849774", "body": "add an empty private constructor", "bodyText": "add an empty private constructor", "bodyHTML": "<p dir=\"auto\">add an empty private constructor</p>", "author": "jkakavas", "createdAt": "2020-01-28T14:52:47Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlInit.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.slf4j.LoggerFactory;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class SamlInit {", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MDczMA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371850730", "body": "this can be static too", "bodyText": "this can be static too", "bodyHTML": "<p dir=\"auto\">this can be static too</p>", "author": "jkakavas", "createdAt": "2020-01-28T14:54:10Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();\n+\n+    class AttributeNames {\n+        public final String groups = \"https://saml.elasticsearch.org/attributes/groups\";", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372274250", "bodyText": "The idea is that it would probably be configurable, it's just a placeholder for now.\n(Maybe it shouldn't be configurable, I was just sketching something out as I went).", "author": "tvernum", "createdAt": "2020-01-29T09:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzE3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371867176", "body": "I think it would make sense to have a setting on the IDP side that controls the assertion lifetime and maybe allow sp specific configuration overrides. I can't think of a valid reason or use case to extend the lifetime for specific SPs though", "bodyText": "I think it would make sense to have a setting on the IDP side that controls the assertion lifetime and maybe allow sp specific configuration overrides. I can't think of a valid reason or use case to extend the lifetime for specific SPs though", "bodyHTML": "<p dir=\"auto\">I think it would make sense to have a setting on the IDP side that controls the assertion lifetime and maybe allow sp specific configuration overrides. I can't think of a valid reason or use case to extend the lifetime for specific SPs though</p>", "author": "jkakavas", "createdAt": "2020-01-28T15:19:52Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NjAxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372286019", "bodyText": "Since this is just an interface, how we resolve the duration per SP isn't dictated, just that the Response builder doesn't assume it's a global value in the IdP.\nFor things that could reasonably be set per SP (that is, there's no technical reason why it should be fixed for the IdP), I'd prefer to provide them to on the SP so that the Builder doesn't make assumptions.\nOne reason I can think of for having a per-SP duration is if the SP doesn't properly handle clock skew so you need to increase the expiry time specifically for that SP.", "author": "tvernum", "createdAt": "2020-01-29T09:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MDA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371870068", "body": "nitpicking much but I prefer URNs as folks tend to treat ^^ as URLs instead of URIs", "bodyText": "nitpicking much but I prefer URNs as folks tend to treat ^^ as URLs instead of URIs", "bodyHTML": "<p dir=\"auto\">nitpicking much but I prefer URNs as folks tend to treat ^^ as URLs instead of URIs</p>", "author": "jkakavas", "createdAt": "2020-01-28T15:24:12Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();\n+\n+    class AttributeNames {\n+        public final String groups = \"https://saml.elasticsearch.org/attributes/groups\";", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5MTcxMg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372291712", "bodyText": "I'm sure we'll change it, I just needed a value from somewhere, and didn't want to hard code it inside the Response Builder (and the valid syntax for the https scheme is easier to remember than urn).", "author": "tvernum", "createdAt": "2020-01-29T10:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTcwNw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371875707", "body": "```suggestion\r\n * Utility object for constructing new objects and values in a SAML2.0 / OpenSAML context\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Utility object for contructing new objects and values in a SAML2.0 / OpenSAML context\n          \n          \n            \n             * Utility object for constructing new objects and values in a SAML2.0 / OpenSAML context", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Utility</span> object <span class=\"pl-k\">for</span> <span class=\"x x-first x-last\">contructing</span> <span class=\"pl-k\">new</span> objects and values in a SAML2.0 / OpenSAML context</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Utility</span> object <span class=\"pl-k\">for</span> <span class=\"x x-first x-last\">constructing</span> <span class=\"pl-k\">new</span> objects and values in a SAML2.0 / OpenSAML context</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jkakavas", "createdAt": "2020-01-28T15:32:42Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.common.hash.MessageDigests;\n+import org.opensaml.core.xml.XMLObject;\n+import org.opensaml.core.xml.XMLObjectBuilderFactory;\n+import org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport;\n+\n+import javax.xml.namespace.QName;\n+import java.security.SecureRandom;\n+\n+/**\n+ * Utility object for contructing new objects and values in a SAML2.0 / OpenSAML context", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5Mzk5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372193996", "body": "In the case where `user.getGroups()` returns an empty set/list, this will produce an `Attribute` node with no `AttributeValue` . While the specificatio [2.7.3.1](https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf) allows for Attributes without values, the semantics are left to the implementer. I would argue that for an attribute that denotes group membership, the presence or absence of the attribute is of no interest to an SP, they would only care about its values. As such, I suggest we do not send the attribute at all. \r\nOur SP implementation will handle an attribute with no values gracefully, but I'm not sure all SPs will", "bodyText": "In the case where user.getGroups() returns an empty set/list, this will produce an Attribute node with no AttributeValue . While the specificatio 2.7.3.1 allows for Attributes without values, the semantics are left to the implementer. I would argue that for an attribute that denotes group membership, the presence or absence of the attribute is of no interest to an SP, they would only care about its values. As such, I suggest we do not send the attribute at all.\nOur SP implementation will handle an attribute with no values gracefully, but I'm not sure all SPs will", "bodyHTML": "<p dir=\"auto\">In the case where <code>user.getGroups()</code> returns an empty set/list, this will produce an <code>Attribute</code> node with no <code>AttributeValue</code> . While the specificatio <a href=\"https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf\" rel=\"nofollow\">2.7.3.1</a> allows for Attributes without values, the semantics are left to the implementer. I would argue that for an attribute that denotes group membership, the presence or absence of the attribute is of no interest to an SP, they would only care about its values. As such, I suggest we do not send the attribute at all.<br>\nOur SP implementation will handle an attribute with no values gracefully, but I'm not sure all SPs will</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:23:52Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372195063", "body": "If we don't create an empty attribute for no values ( see above ) then we should not add an AttributeStatement to the Assertion either, because the assertion schema has \r\n```\r\n<choice maxOccurs=\"unbounded\">\r\n  <element ref=\"saml:Attribute\"/>\r\n  <element ref=\"saml:EncryptedAttribute\"/>\r\n</choice>\r\n```\r\nwhich , in absence of an explicit `minOccurs`, inherits the default value of 1 ", "bodyText": "If we don't create an empty attribute for no values ( see above ) then we should not add an AttributeStatement to the Assertion either, because the assertion schema has\n<choice maxOccurs=\"unbounded\">\n  <element ref=\"saml:Attribute\"/>\n  <element ref=\"saml:EncryptedAttribute\"/>\n</choice>\n\nwhich , in absence of an explicit minOccurs, inherits the default value of 1", "bodyHTML": "<p dir=\"auto\">If we don't create an empty attribute for no values ( see above ) then we should not add an AttributeStatement to the Assertion either, because the assertion schema has</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;choice maxOccurs=&quot;unbounded&quot;&gt;\n  &lt;element ref=&quot;saml:Attribute&quot;/&gt;\n  &lt;element ref=&quot;saml:EncryptedAttribute&quot;/&gt;\n&lt;/choice&gt;\"><pre><code>&lt;choice maxOccurs=\"unbounded\"&gt;\n  &lt;element ref=\"saml:Attribute\"/&gt;\n  &lt;element ref=\"saml:EncryptedAttribute\"/&gt;\n&lt;/choice&gt;\n</code></pre></div>\n<p dir=\"auto\">which , in absence of an explicit <code>minOccurs</code>, inherits the default value of 1</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:26:07Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NjYzMg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372196632", "body": "I think we should allow for per SP configuration ( not direct feedback for this PR ) and that we should default to transient NameIDs ( so that we can have logout ) and the principal expressed as an attribute. I believe this buys us maximum interoperability (it usually is easier to map an attribute than the NameID value on the SP side ) ", "bodyText": "I think we should allow for per SP configuration ( not direct feedback for this PR ) and that we should default to transient NameIDs ( so that we can have logout ) and the principal expressed as an attribute. I believe this buys us maximum interoperability (it usually is easier to map an attribute than the NameID value on the SP side )", "bodyHTML": "<p dir=\"auto\">I think we should allow for per SP configuration ( not direct feedback for this PR ) and that we should default to transient NameIDs ( so that we can have logout ) and the principal expressed as an attribute. I believe this buys us maximum interoperability (it usually is easier to map an attribute than the NameID value on the SP side )</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:34:20Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODgwMw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372288803", "bodyText": "Yes, I suspect that's probably what we want (but also that generating transient nameids was more trouble than I wanted to go to for the first cut of code).", "author": "tvernum", "createdAt": "2020-01-29T10:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NjYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5Njc2NA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372196764", "body": "see comment about default lifetime being expressed as an idp configuration", "bodyText": "see comment about default lifetime being expressed as an idp configuration", "bodyHTML": "<p dir=\"auto\">see comment about default lifetime being expressed as an idp configuration</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:35:02Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzA5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372197098", "body": "```suggestion\r\n        final Attribute attribute = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);\n          \n          \n            \n                    final Attribute attribute = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Attribute</span> <span class=\"x x-first x-last\">statement</span> <span class=\"pl-k\">=</span> samlFactory<span class=\"pl-k\">.</span>object(<span class=\"pl-smi\">Attribute</span><span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">Attribute</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DEFAULT_ELEMENT_NAME</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Attribute</span> <span class=\"x x-first x-last\">attribute</span> <span class=\"pl-k\">=</span> samlFactory<span class=\"pl-k\">.</span>object(<span class=\"pl-smi\">Attribute</span><span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">Attribute</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DEFAULT_ELEMENT_NAME</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jkakavas", "createdAt": "2020-01-29T05:36:38Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {\n+        final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzM3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372197370", "body": "set `NameFormat` to `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`  \r\n```\r\nattribute.setNameFormat(Attribute.URI_REFERENCE);\r\n```", "bodyText": "set NameFormat to urn:oasis:names:tc:SAML:2.0:attrname-format:uri\nattribute.setNameFormat(Attribute.URI_REFERENCE);", "bodyHTML": "<p dir=\"auto\">set <code>NameFormat</code> to <code>urn:oasis:names:tc:SAML:2.0:attrname-format:uri</code></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"attribute.setNameFormat(Attribute.URI_REFERENCE);\n\"><pre><code>attribute.setNameFormat(Attribute.URI_REFERENCE);\n</code></pre></div>", "author": "jkakavas", "createdAt": "2020-01-29T05:37:46Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {\n+        final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);\n+        statement.setName(formalName);\n+        statement.setFriendlyName(friendlyName);", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5MjgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372292816", "bodyText": "Do you think we can enforce that we only use URIs for attribute names? It's my preference, but it seems most popular IdPs don't.", "author": "tvernum", "createdAt": "2020-01-29T10:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTAxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372299015", "bodyText": "It's up to the IDP so I think we should do it ( my preference too )", "author": "jkakavas", "createdAt": "2020-01-29T10:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTAxNw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372199017", "body": "We would probably need an instance of DocumentBuilderFactory when parsing authentication requests, we could switch to using that at that point. Is it worth adding a comment that this should be used in tests only ? ", "bodyText": "We would probably need an instance of DocumentBuilderFactory when parsing authentication requests, we could switch to using that at that point. Is it worth adding a comment that this should be used in tests only ?", "bodyHTML": "<p dir=\"auto\">We would probably need an instance of DocumentBuilderFactory when parsing authentication requests, we could switch to using that at that point. Is it worth adding a comment that this should be used in tests only ?</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:45:53Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/XmlValidator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSResourceResolver;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Validates an XML stream against a specified schema.\n+ */\n+public class XmlValidator {", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5MzQ5MA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372293490", "bodyText": "We may want this in production if we accept metadata from SPs, but I'm happy to move it to test and move it back again if we do find we need it.", "author": "tvernum", "createdAt": "2020-01-29T10:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372200164", "body": "Since we get to do the naming here (yay), should we settle to something different than groups ? I'm torn as it \"makes sense\" for our SP implementation (see `attributes.groups: `) but as an IDP, will the information that we will encode here denote groups or rather roles ? ", "bodyText": "Since we get to do the naming here (yay), should we settle to something different than groups ? I'm torn as it \"makes sense\" for our SP implementation (see attributes.groups: ) but as an IDP, will the information that we will encode here denote groups or rather roles ?", "bodyHTML": "<p dir=\"auto\">Since we get to do the naming here (yay), should we settle to something different than groups ? I'm torn as it \"makes sense\" for our SP implementation (see <code>attributes.groups: </code>) but as an IDP, will the information that we will encode here denote groups or rather roles ?</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:51:09Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/UserServiceAuthentication.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+\n+import java.util.Set;\n+\n+/**\n+ * Lightweight representation of a user that has authenticated to the IdP in the context of a specific service provider\n+ */\n+public interface UserServiceAuthentication {\n+\n+    String getPrincipal();\n+    Set<String> getGroups();", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NTc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372295755", "bodyText": "Yeah, I was torn on this. They're not really groups, but roles is so over used that I think it will become confusing.\nFrom an ES point of view they'll probably be something related to application privileges.\nSo, from that position they're privileges, but I'm not sure whether exposing that name here is right...", "author": "tvernum", "createdAt": "2020-01-29T10:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwOTc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372409774", "bodyText": "We can defer the decision to a later point I guess", "author": "jkakavas", "createdAt": "2020-01-29T14:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372201652", "body": "The Assertion must contain an `<AuthnStatement>` (  and that should contain a `SessionIndex` since we plan to support SLO )", "bodyText": "The Assertion must contain an <AuthnStatement> (  and that should contain a SessionIndex since we plan to support SLO )", "bodyHTML": "<p dir=\"auto\">The Assertion must contain an <code>&lt;AuthnStatement&gt;</code> (  and that should contain a <code>SessionIndex</code> since we plan to support SLO )</p>", "author": "jkakavas", "createdAt": "2020-01-29T05:58:26Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NjAyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372296023", "bodyText": "Why didn't the schema pick me up on that... :(", "author": "tvernum", "createdAt": "2020-01-29T10:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5ODEzMg==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372298132", "bodyText": "This is a requirement for the Web browser SSO profile so it's not covered by the Assertion schema", "author": "jkakavas", "createdAt": "2020-01-29T10:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNTgyNw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372305827", "bodyText": "Ah, because Saml2Int expects it (as do we) but the schema doesn't.", "author": "tvernum", "createdAt": "2020-01-29T10:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMjM3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372312375", "bodyText": "Not that it matters too much but it's not saml2int but the actual OASIS standard 4.1.4.2. Only mentioning as it can be argued that saml2int is not mandatory to follow ( but rather a choice ), but the actual spec is.", "author": "jkakavas", "createdAt": "2020-01-29T10:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjY5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372202699", "body": "subject should contain an `<SubjectConfirmation>` with\r\n- a `Method` set to `urn:oasis:names:tc:SAML:2.0:cm:bearer`\r\n- a `<SubjectConfirmationData>` element with:\r\n  - a `Recipient` attribute pointing to the SP ACS\r\n  - a `NotOnOrAfter`\r\n  - an `InResponseTo` with the request ID ( if this is SP initiated )", "bodyText": "subject should contain an <SubjectConfirmation> with\n\na Method set to urn:oasis:names:tc:SAML:2.0:cm:bearer\na <SubjectConfirmationData> element with:\n\na Recipient attribute pointing to the SP ACS\na NotOnOrAfter\nan InResponseTo with the request ID ( if this is SP initiated )", "bodyHTML": "<p dir=\"auto\">subject should contain an <code>&lt;SubjectConfirmation&gt;</code> with</p>\n<ul dir=\"auto\">\n<li>a <code>Method</code> set to <code>urn:oasis:names:tc:SAML:2.0:cm:bearer</code></li>\n<li>a <code>&lt;SubjectConfirmationData&gt;</code> element with:\n<ul dir=\"auto\">\n<li>a <code>Recipient</code> attribute pointing to the SP ACS</li>\n<li>a <code>NotOnOrAfter</code></li>\n<li>an <code>InResponseTo</code> with the request ID ( if this is SP initiated )</li>\n</ul>\n</li>\n</ul>", "author": "jkakavas", "createdAt": "2020-01-29T06:03:49Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);", "originalCommit": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d71386556502527f2a90af88d9cab50e320a5e4", "url": "https://github.com/elastic/elasticsearch/commit/5d71386556502527f2a90af88d9cab50e320a5e4", "message": "Address feedback", "committedDate": "2020-01-29T11:37:38Z", "type": "commit"}, {"oid": "2756993c3095f4c14855e382f2cb452b24aa6839", "url": "https://github.com/elastic/elasticsearch/commit/2756993c3095f4c14855e382f2cb452b24aa6839", "message": "Merge branch 'master' into feature-internal-idp", "committedDate": "2020-01-29T11:38:05Z", "type": "commit"}, {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "url": "https://github.com/elastic/elasticsearch/commit/1f1fbd135ade0abd9c7182e1316eaf10ad660125", "message": "Update plugin security policy for classloader move", "committedDate": "2020-01-29T12:24:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4NTU3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372385576", "body": "We should also add a SessionIndex ( with the same value as the Assertion ID see [2.7.2](https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf)", "bodyText": "We should also add a SessionIndex ( with the same value as the Assertion ID see 2.7.2", "bodyHTML": "<p dir=\"auto\">We should also add a SessionIndex ( with the same value as the Assertion ID see <a href=\"https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf\" rel=\"nofollow\">2.7.2</a></p>", "author": "jkakavas", "createdAt": "2020-01-29T13:38:07Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));", "originalCommit": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNjI3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372736273", "bodyText": "Sorry, it was late when I finished up so I didn't comment.\nI agree we'll need one for SLO, but since we're not doing SLO yet, I intentionally left it out so that whoever implements SLO can do it end-to-end.\nThat's on the assumption that there's nothing in the standard that requires a SessionIndex (I didn't see anything).", "author": "tvernum", "createdAt": "2020-01-30T02:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4NTU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxMTc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372811748", "bodyText": "+1", "author": "jkakavas", "createdAt": "2020-01-30T08:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4NTU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwMjgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372402828", "body": "we should aim so that we will never have to use such a declaration", "bodyText": "we should aim so that we will never have to use such a declaration", "bodyHTML": "<p dir=\"auto\">we should aim so that we will never have to use such a declaration</p>", "author": "jkakavas", "createdAt": "2020-01-29T14:10:30Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;\n+            } else if (networkControls.contains(NetworkControl.TLS)) {\n+                return AuthnContext.PPT_AUTHN_CTX;\n+            } else {\n+                return AuthnContext.PASSWORD_AUTHN_CTX;", "originalCommit": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNTg2MA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372735860", "bodyText": "I expect that everything will be over TLS, but I didn't want to assume that in the code.", "author": "tvernum", "createdAt": "2020-01-30T02:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwMjgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwMzA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372403085", "body": ":+1: ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "jkakavas", "createdAt": "2020-01-29T14:10:58Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {", "originalCommit": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNjU4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372736581", "body": "I've assumed Password + IP Filter should be treated as a higher class than Password + TLS, but ideally there would be a class for `IP_PPT_AUTHN_CTX`  instead.", "bodyText": "I've assumed Password + IP Filter should be treated as a higher class than Password + TLS, but ideally there would be a class for IP_PPT_AUTHN_CTX  instead.", "bodyHTML": "<p dir=\"auto\">I've assumed Password + IP Filter should be treated as a higher class than Password + TLS, but ideally there would be a class for <code>IP_PPT_AUTHN_CTX</code>  instead.</p>", "author": "tvernum", "createdAt": "2020-01-30T02:48:29Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;", "originalCommit": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNjcxMA==", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372736710", "body": "This is wrong. Will fix.", "bodyText": "This is wrong. Will fix.", "bodyHTML": "<p dir=\"auto\">This is wrong. Will fix.</p>", "author": "tvernum", "createdAt": "2020-01-30T02:49:04Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;\n+            } else if (networkControls.contains(NetworkControl.TLS)) {\n+                return AuthnContext.PPT_AUTHN_CTX;\n+            } else {\n+                return AuthnContext.PASSWORD_AUTHN_CTX;\n+            }\n+        } else if (authenticationMethods.contains(AuthenticationMethod.KERBEROS)) {\n+            return AuthnContext.KERBEROS_AUTHN_CTX;\n+        } else if (authenticationMethods.contains(AuthenticationMethod.TLS_CLIENT_AUTH) && networkControls.contains(NetworkControl.TLS)) {\n+            return AuthnContext.TLS_CLIENT_AUTHN_CTX;\n+        } else if (authenticationMethods.contains(AuthenticationMethod.PRIOR_SESSION)) {\n+            return AuthnContext.PREVIOUS_SESSION_AUTHN_CTX;\n+        } else if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+            return AuthnContext.IP_PASSWORD_AUTHN_CTX;", "originalCommit": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "62bafdd295a68c13e6768b6e62699231836cdfa4", "url": "https://github.com/elastic/elasticsearch/commit/62bafdd295a68c13e6768b6e62699231836cdfa4", "message": "Fix IP filter auth class", "committedDate": "2020-01-30T02:51:38Z", "type": "commit"}]}