{"pr_number": 54573, "pr_title": "Fix small reads of multi-part blobs", "pr_author": "DaveCTurner", "pr_createdAt": "2020-04-01T11:23:12Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54573", "timeline": [{"oid": "f9ccb5f9226c6e7428bf7209099e2b40189ce6f0", "url": "https://github.com/elastic/elasticsearch/commit/f9ccb5f9226c6e7428bf7209099e2b40189ce6f0", "message": "Fix small reads of multi-part blobs", "committedDate": "2020-04-01T11:21:55Z", "type": "commit"}, {"oid": "2cfd80e7319396104c4fba610d15c2be0d8d444e", "url": "https://github.com/elastic/elasticsearch/commit/2cfd80e7319396104c4fba610d15c2be0d8d444e", "message": "Tighter bound", "committedDate": "2020-04-01T11:26:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjczOA==", "url": "https://github.com/elastic/elasticsearch/pull/54573#discussion_r401566738", "body": "Thanks, I was able to reproduce and came with a similar fix.\r\n\r\nFor better readability I'd suggest to isolate single part case (and be paranoid about the length to read) from the multiple parts case, something like:\r\n\r\n```suggestion\r\n        if (fileInfo.numberOfParts() == 1L) {\r\n            return blobContainer.readBlob(fileInfo.partName(0L), position, Math.min(length, fileInfo.partBytes(0) - position));\r\n        }\r\n\r\n        final long startPart = getPartNumberForPosition(position);\r\n        final long endPart = getPartNumberForPosition(position + length);\r\n\r\n        return new SlicedInputStream(endPart - startPart + 1L) {\r\n            @Override\r\n            protected InputStream openSlice(long slice) throws IOException {\r\n                final long currentPart = startPart + slice;\r\n                final long startInPart = (currentPart == startPart) ? getRelativePositionInPart(position) : 0L;\r\n                final long endInPart\r\n                    = (currentPart == endPart) ? getRelativePositionInPart(position + length) : getLengthOfPart(currentPart);\r\n                return blobContainer.readBlob(fileInfo.partName(currentPart), startInPart, endInPart - startInPart\r\n                );\r\n            }\r\n        };\r\n```\r\n", "bodyText": "Thanks, I was able to reproduce and came with a similar fix.\nFor better readability I'd suggest to isolate single part case (and be paranoid about the length to read) from the multiple parts case, something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    endInPart - startInPart\n          \n          \n            \n                    if (fileInfo.numberOfParts() == 1L) {\n          \n          \n            \n                        return blobContainer.readBlob(fileInfo.partName(0L), position, Math.min(length, fileInfo.partBytes(0) - position));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    final long startPart = getPartNumberForPosition(position);\n          \n          \n            \n                    final long endPart = getPartNumberForPosition(position + length);\n          \n          \n            \n            \n          \n          \n            \n                    return new SlicedInputStream(endPart - startPart + 1L) {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        protected InputStream openSlice(long slice) throws IOException {\n          \n          \n            \n                            final long currentPart = startPart + slice;\n          \n          \n            \n                            final long startInPart = (currentPart == startPart) ? getRelativePositionInPart(position) : 0L;\n          \n          \n            \n                            final long endInPart\n          \n          \n            \n                                = (currentPart == endPart) ? getRelativePositionInPart(position + length) : getLengthOfPart(currentPart);\n          \n          \n            \n                            return blobContainer.readBlob(fileInfo.partName(currentPart), startInPart, endInPart - startInPart\n          \n          \n            \n                            );\n          \n          \n            \n                        }\n          \n          \n            \n                    };", "bodyHTML": "<p dir=\"auto\">Thanks, I was able to reproduce and came with a similar fix.</p>\n<p dir=\"auto\">For better readability I'd suggest to isolate single part case (and be paranoid about the length to read) from the multiple parts case, something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">                endInPart </span><span class=\"pl-k x\">-</span><span class=\"x x-last\"> startInPart</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">if</span><span class=\"x\"> (fileInfo</span><span class=\"pl-k x\">.</span><span class=\"x\">numberOfParts() </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x\">1L</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> blobContainer<span class=\"pl-k\">.</span>readBlob(fileInfo<span class=\"pl-k\">.</span>partName(<span class=\"pl-c1\">0L</span>), position, <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>min(length, fileInfo<span class=\"pl-k\">.</span>partBytes(<span class=\"pl-c1\">0</span>) <span class=\"pl-k\">-</span> position));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> startPart <span class=\"pl-k\">=</span> getPartNumberForPosition(position);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> endPart <span class=\"pl-k\">=</span> getPartNumberForPosition(position <span class=\"pl-k\">+</span> length);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SlicedInputStream</span>(endPart <span class=\"pl-k\">-</span> startPart <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1L</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">InputStream</span> openSlice(<span class=\"pl-k\">long</span> slice) throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> currentPart <span class=\"pl-k\">=</span> startPart <span class=\"pl-k\">+</span> slice;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> startInPart <span class=\"pl-k\">=</span> (currentPart <span class=\"pl-k\">==</span> startPart) <span class=\"pl-k\">?</span> getRelativePositionInPart(position) <span class=\"pl-k\">:</span> <span class=\"pl-c1\">0L</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> endInPart</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">=</span> (currentPart <span class=\"pl-k\">==</span> endPart) <span class=\"pl-k\">?</span> getRelativePositionInPart(position <span class=\"pl-k\">+</span> length) <span class=\"pl-k\">:</span> getLengthOfPart(currentPart);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">return</span> blobContainer<span class=\"pl-k\">.</span>readBlob(fileInfo<span class=\"pl-k\">.</span>partName(currentPart), startInPart, endInPart <span class=\"pl-k\">-</span> startInPart</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                );</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        };</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tlrx", "createdAt": "2020-04-01T12:11:39Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "diffHunk": "@@ -54,10 +54,13 @@ protected InputStream openInputStream(final long position, final long length) th\n                 @Override\n                 protected InputStream openSlice(long slice) throws IOException {\n                     final long currentPart = startPart + slice;\n+                    final long startInPart = (currentPart == startPart) ? getRelativePositionInPart(position) : 0L;\n+                    final long endInPart\n+                        = (currentPart == endPart) ? getRelativePositionInPart(position + length) : getLengthOfPart(currentPart);\n                     return blobContainer.readBlob(\n                         fileInfo.partName(currentPart),\n-                        (currentPart == startPart) ? getRelativePositionInPart(position) : 0L,\n-                        (currentPart == endPart) ? getRelativePositionInPart(length) : getLengthOfPart(currentPart)\n+                        startInPart,\n+                        endInPart - startInPart", "originalCommit": "2cfd80e7319396104c4fba610d15c2be0d8d444e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5NDE0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54573#discussion_r402194142", "bodyText": "Sure, sounds good, see 558e68a.", "author": "DaveCTurner", "createdAt": "2020-04-02T09:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NzE1OA==", "url": "https://github.com/elastic/elasticsearch/pull/54573#discussion_r401567158", "body": ":+1:", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "tlrx", "createdAt": "2020-04-01T12:12:33Z", "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/cache/TestUtils.java", "diffHunk": "@@ -70,70 +70,100 @@ public static void assertCounter(IndexInputStats.Counter counter, long total, lo\n      * Any attempt to read a different blob will throw a {@link FileNotFoundException}\n      */\n     static BlobContainer singleBlobContainer(final String blobName, final byte[] blobContent) {\n-        return new BlobContainer() {\n-\n+        return new MostlyUnimplementedFakeBlobContainer() {\n             @Override\n             public InputStream readBlob(String name, long position, long length) throws IOException {\n                 if (blobName.equals(name) == false) {\n                     throw new FileNotFoundException(\"Blob not found: \" + name);\n                 }\n-                return Streams.limitStream(new ByteArrayInputStream(blobContent, Math.toIntExact(position), blobContent.length), length);\n+                assert position + length <= blobContent.length", "originalCommit": "2cfd80e7319396104c4fba610d15c2be0d8d444e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d69d4689355d8bc57af26cf8002f6c0db7f6c5ea", "url": "https://github.com/elastic/elasticsearch/commit/d69d4689355d8bc57af26cf8002f6c0db7f6c5ea", "message": "Overeager assertion", "committedDate": "2020-04-02T09:57:50Z", "type": "commit"}, {"oid": "558e68a4d0f123ad08266a2e81258cbcf5319a1f", "url": "https://github.com/elastic/elasticsearch/commit/558e68a4d0f123ad08266a2e81258cbcf5319a1f", "message": "Review feedback", "committedDate": "2020-04-02T09:57:59Z", "type": "commit"}, {"oid": "34395e1315f2ca04c517a0c9191a1cd6fa173e9d", "url": "https://github.com/elastic/elasticsearch/commit/34395e1315f2ca04c517a0c9191a1cd6fa173e9d", "message": "Merge branch 'feature/searchable-snapshots' into 2020-04-01-fix-small-reads-of-multi-part-blobs", "committedDate": "2020-04-02T10:00:15Z", "type": "commit"}, {"oid": "e29e59b73f394dcdae0a36de888f6dd2335ff6bf", "url": "https://github.com/elastic/elasticsearch/commit/e29e59b73f394dcdae0a36de888f6dd2335ff6bf", "message": "Merge branch 'feature/searchable-snapshots' into 2020-04-01-fix-small-reads-of-multi-part-blobs", "committedDate": "2020-04-02T13:14:01Z", "type": "commit"}]}