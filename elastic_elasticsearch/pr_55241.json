{"pr_number": 55241, "pr_title": "SQL: Implement scripting inside aggs", "pr_author": "matriv", "pr_createdAt": "2020-04-15T14:46:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55241", "timeline": [{"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "url": "https://github.com/elastic/elasticsearch/commit/57bd9c05f801f31fcb541b178caee9ddb1ce6176", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T14:48:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r408979641", "body": "So this code becomes:\r\n```java\r\nObject argument = asFieldOrLiteralOrScript(c.field());\r\n\r\n           if (c.distinct()) {\r\n                    return new CardinalityAgg(id, argument);\r\n                } else {\r\n                    return new FilterExistsAgg(id, argument);\r\n                }\r\n```", "bodyText": "So this code becomes:\nObject argument = asFieldOrLiteralOrScript(c.field());\n\n           if (c.distinct()) {\n                    return new CardinalityAgg(id, argument);\n                } else {\n                    return new FilterExistsAgg(id, argument);\n                }", "bodyHTML": "<p dir=\"auto\">So this code becomes:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Object argument = asFieldOrLiteralOrScript(c.field());\n\n           if (c.distinct()) {\n                    return new CardinalityAgg(id, argument);\n                } else {\n                    return new FilterExistsAgg(id, argument);\n                }\"><pre><span class=\"pl-smi\">Object</span> argument <span class=\"pl-k\">=</span> asFieldOrLiteralOrScript(c<span class=\"pl-k\">.</span>field());\n\n           <span class=\"pl-k\">if</span> (c<span class=\"pl-k\">.</span>distinct()) {\n                    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CardinalityAgg</span>(id, argument);\n                } <span class=\"pl-k\">else</span> {\n                    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FilterExistsAgg</span>(id, argument);\n                }</pre></div>", "author": "costin", "createdAt": "2020-04-15T16:36:12Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -523,10 +524,19 @@ public QueryTranslation translate(Expression exp, boolean onAggs, TranslatorHand\n \n         @Override\n         protected LeafAgg toAgg(String id, Count c) {\n-            if (c.distinct()) {\n-                return new CardinalityAgg(id, field(c));\n+            if (fieldOrLiteral(c)) {\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, field(c));\n+                } else {\n+                    return new FilterExistsAgg(id, field(c));\n+                }\n             } else {\n-                return new FilterExistsAgg(id, field(c));\n+                ScriptTemplate scriptTemplate = ((Function) c.field()).asScript();\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, scriptTemplate);\n+                } else {\n+                    return new FilterExistsAgg(id, scriptTemplate);\n+                }\n             }", "originalCommit": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "url": "https://github.com/elastic/elasticsearch/commit/db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "message": "added tests", "committedDate": "2020-04-15T16:59:06Z", "type": "forcePushed"}, {"oid": "8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "url": "https://github.com/elastic/elasticsearch/commit/8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:36:15Z", "type": "forcePushed"}, {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:43:41Z", "type": "commit"}, {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:43:41Z", "type": "forcePushed"}, {"oid": "18b38d1f62aa154498c18c75920aed91a8d300dd", "url": "https://github.com/elastic/elasticsearch/commit/18b38d1f62aa154498c18c75920aed91a8d300dd", "message": "Avoid instantiating SqlFunctionRegistry multiple times", "committedDate": "2020-04-15T20:02:21Z", "type": "commit"}, {"oid": "30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "url": "https://github.com/elastic/elasticsearch/commit/30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "message": "remove unused import", "committedDate": "2020-04-15T20:18:34Z", "type": "commit"}, {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "url": "https://github.com/elastic/elasticsearch/commit/b8bc29f350f24b22bde8b9096a95d4273dd822fe", "message": "re-arrange imports", "committedDate": "2020-04-15T20:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409127574", "body": "This method seems to be used in one place as such extracting it in a different class doesn't add much value since there's no reuse.\r\nThe name also indicates that - a method specific to cardinality/count.", "bodyText": "This method seems to be used in one place as such extracting it in a different class doesn't add much value since there's no reuse.\nThe name also indicates that - a method specific to cardinality/count.", "bodyHTML": "<p dir=\"auto\">This method seems to be used in one place as such extracting it in a different class doesn't add much value since there's no reuse.<br>\nThe name also indicates that - a method specific to cardinality/count.</p>", "author": "costin", "createdAt": "2020-04-15T20:54:00Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java", "diffHunk": "@@ -66,6 +66,13 @@ public static ScriptTemplate nullSafeFilter(ScriptTemplate script) {\n                 DataTypes.BOOLEAN);\n     }\n \n+    public static ScriptTemplate isNotNullCardinality(ScriptTemplate script) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMTY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409131696", "body": "`String.valueOf(arg.fold())`\r\nThere's rarely a reason to cast to a `Literal`", "bodyText": "String.valueOf(arg.fold())\nThere's rarely a reason to cast to a Literal", "bodyHTML": "<p dir=\"auto\"><code>String.valueOf(arg.fold())</code><br>\nThere's rarely a reason to cast to a <code>Literal</code></p>", "author": "costin", "createdAt": "2020-04-15T21:02:06Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -240,15 +236,11 @@ static String nameOf(Expression e) {\n         }\n     }\n \n-    static String dateFormat(Expression e) {\n-        if (e instanceof DateTimeFunction) {\n-            return ((DateTimeFunction) e).dateTimeFormat();\n-        }\n-        return null;\n-    }\n-\n     static String field(AggregateFunction af) {\n         Expression arg = af.field();\n+        if (arg.foldable()) {\n+            return String.valueOf(((Literal) arg).value());", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132371", "body": "`return  isFieldOrLiteral(af) ?  field(af) : ((ScalarFunction) af.field()).asScript()`", "bodyText": "return  isFieldOrLiteral(af) ?  field(af) : ((ScalarFunction) af.field()).asScript()", "bodyHTML": "<p dir=\"auto\"><code>return  isFieldOrLiteral(af) ?  field(af) : ((ScalarFunction) af.field()).asScript()</code></p>", "author": "costin", "createdAt": "2020-04-15T21:03:24Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {\n+        if (isFieldOrLiteral(af)) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNDEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409134104", "bodyText": "The logic from topAggsFieldOrScript and this method is similar and should be reused - I like the instanceof check for Scalar instead of the direct cast; a bit verbose but safe.", "author": "costin", "createdAt": "2020-04-15T21:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjkxNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132914", "body": "get prefix is for getter - use something like `toField..` or `asField..`", "bodyText": "get prefix is for getter - use something like toField.. or asField..", "bodyHTML": "<p dir=\"auto\">get prefix is for getter - use something like <code>toField..</code> or <code>asField..</code></p>", "author": "costin", "createdAt": "2020-04-15T21:04:22Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409133221", "body": "This can be moved under the TopHit agg class", "bodyText": "This can be moved under the TopHit agg class", "bodyHTML": "<p dir=\"auto\">This can be moved under the TopHit agg class</p>", "author": "costin", "createdAt": "2020-04-15T21:04:57Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMDA2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409410065", "bodyText": "Consolidated into one method.", "author": "matriv", "createdAt": "2020-04-16T09:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MTQ5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409141496", "body": "Thinking a bit more about this, a better solution might be creating a simple DTO specific for Agg that can hold either a String or a ScriptTemplate.\r\nThat one would handle the hashCode, equals, etc.\r\nFurther more maybe extend it to accept behavior by accepting a `ValuesSourceAggregationBuilder` and internally call either `field` or `script` based on its content.\r\n```suggestion\r\n    Agg(String id, AggTarget target) {\r\n       this.target = target;\r\n    }\r\n    ...\r\n    class AggTarget {\r\n        private final String fieldName;\r\n        private final ScriptTemplate script;\r\n        \r\n        ...\r\n        \r\n        ValuesSourceAggregationBuilder with(ValuesSourceAggregationBuilder aggBuilder) {\r\n            if (field != null) {\r\n                 aggBuilder.field(field);\r\n             }\r\n             else {\r\n                 aggBuilder.script(scriptTemplate.asScript());\r\n              }\r\n        }\r\n    }\r\n```\r\n\r\nThis would improve `LeafAgg` which would improve `toBuilder` and call `AggTarget` so that subclasses would only have to create the `ValueSourceAggregationBuilder`. In fact we could just declare them as a method reference for a string:\r\n\r\n```java\r\npublic abstract class LeafAgg extends Agg {\r\n\r\n    LeafAgg(String id, AggTarget target) {\r\n        super(id, target);\r\n    }\r\n\r\n    ValuesSourceAggregationBuilder builder() {\r\n         return aggBuilder.apply(id()).with(aggTarget);\r\n    }\r\n\r\n    protected abstract Function<String, ValuesSourceAggregationBuilder> aggBuilder();\r\n```\r\n\r\nso that subclasses would now look like:\r\n```java\r\n\r\npublic class CardinalityAgg extends LeafAgg {\r\n\r\n    public CardinalityAgg(String id, AggTarget aggTarget) {\r\n        super(id, aggTarget);\r\n    }\r\n\r\n    @Override\r\n    ValuesSourceAggregationBuilder aggBuilder() {\r\n        return AggregationBuilders::cardinality;\r\n    }\r\n}\r\n```", "bodyText": "Thinking a bit more about this, a better solution might be creating a simple DTO specific for Agg that can hold either a String or a ScriptTemplate.\nThat one would handle the hashCode, equals, etc.\nFurther more maybe extend it to accept behavior by accepting a ValuesSourceAggregationBuilder and internally call either field or script based on its content.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Agg(String id, Object fieldOrScript) {\n          \n          \n            \n                Agg(String id, AggTarget target) {\n          \n          \n            \n                   this.target = target;\n          \n          \n            \n                }\n          \n          \n            \n                ...\n          \n          \n            \n                class AggTarget {\n          \n          \n            \n                    private final String fieldName;\n          \n          \n            \n                    private final ScriptTemplate script;\n          \n          \n            \n                    \n          \n          \n            \n                    ...\n          \n          \n            \n                    \n          \n          \n            \n                    ValuesSourceAggregationBuilder with(ValuesSourceAggregationBuilder aggBuilder) {\n          \n          \n            \n                        if (field != null) {\n          \n          \n            \n                             aggBuilder.field(field);\n          \n          \n            \n                         }\n          \n          \n            \n                         else {\n          \n          \n            \n                             aggBuilder.script(scriptTemplate.asScript());\n          \n          \n            \n                          }\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThis would improve LeafAgg which would improve toBuilder and call AggTarget so that subclasses would only have to create the ValueSourceAggregationBuilder. In fact we could just declare them as a method reference for a string:\npublic abstract class LeafAgg extends Agg {\n\n    LeafAgg(String id, AggTarget target) {\n        super(id, target);\n    }\n\n    ValuesSourceAggregationBuilder builder() {\n         return aggBuilder.apply(id()).with(aggTarget);\n    }\n\n    protected abstract Function<String, ValuesSourceAggregationBuilder> aggBuilder();\nso that subclasses would now look like:\npublic class CardinalityAgg extends LeafAgg {\n\n    public CardinalityAgg(String id, AggTarget aggTarget) {\n        super(id, aggTarget);\n    }\n\n    @Override\n    ValuesSourceAggregationBuilder aggBuilder() {\n        return AggregationBuilders::cardinality;\n    }\n}", "bodyHTML": "<p dir=\"auto\">Thinking a bit more about this, a better solution might be creating a simple DTO specific for Agg that can hold either a String or a ScriptTemplate.<br>\nThat one would handle the hashCode, equals, etc.<br>\nFurther more maybe extend it to accept behavior by accepting a <code>ValuesSourceAggregationBuilder</code> and internally call either <code>field</code> or <code>script</code> based on its content.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    Agg(<span class=\"pl-smi\">String</span> id, <span class=\"pl-smi x x-first\">Object</span><span class=\"x x-last\"> fieldOrScript</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    Agg(<span class=\"pl-smi\">String</span> id, <span class=\"pl-smi x x-first\">AggTarget</span><span class=\"x x-last\"> target</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>target <span class=\"pl-k\">=</span> target;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1\">...</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">class</span> <span class=\"pl-en\">AggTarget</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> fieldName;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ScriptTemplate</span> script;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">...</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">ValuesSourceAggregationBuilder</span> with(<span class=\"pl-smi\">ValuesSourceAggregationBuilder</span> aggBuilder) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (field <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                 aggBuilder<span class=\"pl-k\">.</span>field(field);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                 aggBuilder<span class=\"pl-k\">.</span>script(scriptTemplate<span class=\"pl-k\">.</span>asScript());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This would improve <code>LeafAgg</code> which would improve <code>toBuilder</code> and call <code>AggTarget</code> so that subclasses would only have to create the <code>ValueSourceAggregationBuilder</code>. In fact we could just declare them as a method reference for a string:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public abstract class LeafAgg extends Agg {\n\n    LeafAgg(String id, AggTarget target) {\n        super(id, target);\n    }\n\n    ValuesSourceAggregationBuilder builder() {\n         return aggBuilder.apply(id()).with(aggTarget);\n    }\n\n    protected abstract Function&lt;String, ValuesSourceAggregationBuilder&gt; aggBuilder();\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">LeafAgg</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Agg</span> {\n\n    <span class=\"pl-en\">LeafAgg</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">id</span>, <span class=\"pl-smi\">AggTarget</span> <span class=\"pl-v\">target</span>) {\n        <span class=\"pl-c1\">super</span>(id, target);\n    }\n\n    <span class=\"pl-smi\">ValuesSourceAggregationBuilder</span> <span class=\"pl-en\">builder</span>() {\n         <span class=\"pl-k\">return</span> aggBuilder<span class=\"pl-k\">.</span>apply(id())<span class=\"pl-k\">.</span>with(aggTarget);\n    }\n\n    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">ValuesSourceAggregationBuilder</span>&gt;</span> <span class=\"pl-en\">aggBuilder</span>();</pre></div>\n<p dir=\"auto\">so that subclasses would now look like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\npublic class CardinalityAgg extends LeafAgg {\n\n    public CardinalityAgg(String id, AggTarget aggTarget) {\n        super(id, aggTarget);\n    }\n\n    @Override\n    ValuesSourceAggregationBuilder aggBuilder() {\n        return AggregationBuilders::cardinality;\n    }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">CardinalityAgg</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">LeafAgg</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-en\">CardinalityAgg</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">id</span>, <span class=\"pl-smi\">AggTarget</span> <span class=\"pl-v\">aggTarget</span>) {\n        <span class=\"pl-c1\">super</span>(id, aggTarget);\n    }\n\n    <span class=\"pl-k\">@Override</span>\n    <span class=\"pl-smi\">ValuesSourceAggregationBuilder</span> <span class=\"pl-en\">aggBuilder</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">AggregationBuilders</span><span class=\"pl-k\">::</span>cardinality;\n    }\n}</pre></div>", "author": "costin", "createdAt": "2020-04-15T21:22:14Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -17,10 +20,19 @@\n \n     private final String id;\n     private final String fieldName;\n+    private final ScriptTemplate scriptTemplate;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, Object fieldOrScript) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NTk0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409495940", "bodyText": "Thx @costin, It's cleaner this way!", "author": "matriv", "createdAt": "2020-04-16T11:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MTQ5Ng=="}], "type": "inlineReview"}, {"oid": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "url": "https://github.com/elastic/elasticsearch/commit/ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "message": "Address comments", "committedDate": "2020-04-16T08:58:59Z", "type": "commit"}, {"oid": "fabece71f4d5aed991dc31765f412d4574af1c8d", "url": "https://github.com/elastic/elasticsearch/commit/fabece71f4d5aed991dc31765f412d4574af1c8d", "message": "fix check for matrix aggs", "committedDate": "2020-04-16T10:10:26Z", "type": "commit"}, {"oid": "5dae3ae643d8f5018e1201ec225045e12b8ffbce", "url": "https://github.com/elastic/elasticsearch/commit/5dae3ae643d8f5018e1201ec225045e12b8ffbce", "message": "Add one more ordering test", "committedDate": "2020-04-16T11:00:41Z", "type": "commit"}, {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "url": "https://github.com/elastic/elasticsearch/commit/2ef7067aa600d8bae79a5caddb48687c4bc1a508", "message": "use a POJO for fielname or script", "committedDate": "2020-04-16T11:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNTkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409505908", "body": "`Objects.hash(id, target)`", "bodyText": "Objects.hash(id, target)", "bodyHTML": "<p dir=\"auto\"><code>Objects.hash(id, target)</code></p>", "author": "costin", "createdAt": "2020-04-16T12:11:35Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -19,37 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n-    private final ScriptTemplate scriptTemplate;\n+    private final AggTarget target;\n \n-    Agg(String id, Object fieldOrScript) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        if (fieldOrScript instanceof String) {\n-            this.fieldName = (String) fieldOrScript;\n-            this.scriptTemplate = null;\n-        } else if (fieldOrScript instanceof ScriptTemplate) {\n-            this.fieldName = null;\n-            this.scriptTemplate = (ScriptTemplate) fieldOrScript;\n-        } else {\n-            throw new SqlIllegalArgumentException(\"Argument of an aggregate function should be String or ScriptTemplate\");\n-        }\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");\n+        this.target = target;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    protected String fieldName() {\n-        return fieldName;\n-    }\n-\n-    public ScriptTemplate scriptTemplate() {\n-        return scriptTemplate;\n+    public AggTarget target() {\n+        return target;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id, fieldName, scriptTemplate);\n+        return Objects.hash(id) + target.hashCode();", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409508602", "body": "The name is leaking implementation details - why not `addTarget()`?", "bodyText": "The name is leaking implementation details - why not addTarget()?", "bodyHTML": "<p dir=\"auto\">The name is leaking implementation details - why not <code>addTarget()</code>?</p>", "author": "costin", "createdAt": "2020-04-16T12:16:21Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java", "diffHunk": "@@ -6,12 +6,18 @@\n package org.elasticsearch.xpack.sql.querydsl.agg;\n \n import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n \n public abstract class LeafAgg extends Agg {\n \n-    LeafAgg(String id, String fieldName) {\n-        super(id, fieldName);\n+    LeafAgg(String id, AggTarget target) {\n+        super(id, target);\n     }\n \n     abstract AggregationBuilder toBuilder();\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    protected ValuesSourceAggregationBuilder addFieldOrScript(ValuesSourceAggregationBuilder builder) {", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMDYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409510600", "bodyText": "Yep, forgot to rename that, thx.", "author": "matriv", "createdAt": "2020-04-16T12:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409519334", "body": "Can this error message be improved?\r\n- why is it mentioning matrix stats, isn't this an implementation detail?\r\n- not a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)", "bodyText": "Can this error message be improved?\n\nwhy is it mentioning matrix stats, isn't this an implementation detail?\nnot a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)", "bodyHTML": "<p dir=\"auto\">Can this error message be improved?</p>\n<ul dir=\"auto\">\n<li>why is it mentioning matrix stats, isn't this an implementation detail?</li>\n<li>not a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)</li>\n</ul>", "author": "astefan", "createdAt": "2020-04-16T12:34:29Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -535,104 +528,122 @@ protected LeafAgg toAgg(String id, Count c) {\n \n         @Override\n         protected LeafAgg toAgg(String id, Sum s) {\n-            return new SumAgg(id, field(s));\n+            return new SumAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class Avgs extends SingleValueAggTranslator<Avg> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Avg a) {\n-            return new AvgAgg(id, field(a));\n+            return new AvgAgg(id, asFieldOrLiteralOrScript(a));\n         }\n     }\n \n     static class Maxes extends SingleValueAggTranslator<Max> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Max m) {\n-            return new MaxAgg(id, field(m));\n+            return new MaxAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Mins extends SingleValueAggTranslator<Min> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Min m) {\n-            return new MinAgg(id, field(m));\n+            return new MinAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class MADs extends SingleValueAggTranslator<MedianAbsoluteDeviation> {\n         @Override\n         protected LeafAgg toAgg(String id, MedianAbsoluteDeviation m) {\n-            return new MedianAbsoluteDeviationAgg(id, field(m));\n+            return new MedianAbsoluteDeviationAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Firsts extends TopHitsAggTranslator<First> {\n \n         @Override\n         protected LeafAgg toAgg(String id, First f) {\n-            return new TopHitsAgg(id, topAggsField(f, f.field()), f.dataType(),\n-                topAggsField(f, f.orderField()), f.orderField() == null ? null : f.orderField().dataType(), SortOrder.ASC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(f, f.field()),\n+                f.dataType(),\n+                asFieldOrLiteralOrScript(f, f.orderField()),\n+                f.orderField() == null ? null : f.orderField().dataType(),\n+                SortOrder.ASC\n+            );\n         }\n     }\n \n     static class Lasts extends TopHitsAggTranslator<Last> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Last l) {\n-            return new TopHitsAgg(id, topAggsField(l, l.field()), l.dataType(),\n-                topAggsField(l, l.orderField()), l.orderField() == null ? null : l.orderField().dataType(), SortOrder.DESC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(l, l.field()),\n+                l.dataType(),\n+                asFieldOrLiteralOrScript(l, l.orderField()),\n+                l.orderField() == null ? null : l.orderField().dataType(),\n+                SortOrder.DESC\n+            );\n         }\n     }\n \n     static class StatsAggs extends CompoundAggTranslator<Stats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Stats s) {\n-            return new StatsAgg(id, field(s));\n+            return new StatsAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class ExtendedStatsAggs extends CompoundAggTranslator<ExtendedStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, ExtendedStats e) {\n-            return new ExtendedStatsAgg(id, field(e));\n+            return new ExtendedStatsAgg(id, asFieldOrLiteralOrScript(e));\n         }\n     }\n \n     static class MatrixStatsAggs extends CompoundAggTranslator<MatrixStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, MatrixStats m) {\n-            return new MatrixStatsAgg(id, singletonList(field(m)));\n+            if (isFieldOrLiteral(m.field())) {\n+                return new MatrixStatsAgg(id, singletonList(field(m, m.field())));\n+            }\n+            throw new SqlIllegalArgumentException(\n+                \"Cannot use scalar functions or operators: [{}] in matrix stats \" + \"aggregate functions [KURTOSIS] and [SKEWNESS]\",", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyOTQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409529422", "bodyText": "why is it mentioning matrix stats, isn't this an implementation detail?\n\n\nYep, I can remove that.\n\n\nnot a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)\n\n\nNot really, I've tried it,  because we don't have the original function anymore here, only MatrixStats. I was considering checking that earlier on the functions themselves, but then resolveType() didn't seem to me a good place to add such a verification, since it's regarding the DataType and not if the arg is field or function.", "author": "matriv", "createdAt": "2020-04-16T12:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MzIyOA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409773228", "bodyText": "This is better handled in the verifier by checking that Kurtosis & co (namely MatrixStatsEnclosed) don't have a scalar expression as argument.\nFurther more I would add an issue to extend the aggregation to support scripts not just fields.", "author": "costin", "createdAt": "2020-04-16T18:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mzc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409793757", "bodyText": "Created issue: #55344", "author": "matriv", "createdAt": "2020-04-16T19:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyMDIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409520215", "body": "You could move this call as the first in the constructor, no?", "bodyText": "You could move this call as the first in the constructor, no?", "bodyHTML": "<p dir=\"auto\">You could move this call as the first in the constructor, no?</p>", "author": "astefan", "createdAt": "2020-04-16T12:35:57Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -16,24 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n+    private final AggTarget target;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        this.fieldName = fieldName;\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86f701e647277d51821a62934282ca13455cb38c", "url": "https://github.com/elastic/elasticsearch/commit/86f701e647277d51821a62934282ca13455cb38c", "message": "rename class and method", "committedDate": "2020-04-16T12:43:08Z", "type": "commit"}, {"oid": "45458799873cac06dc903e2ba57e12d5657e1a77", "url": "https://github.com/elastic/elasticsearch/commit/45458799873cac06dc903e2ba57e12d5657e1a77", "message": "address more comments", "committedDate": "2020-04-16T12:52:30Z", "type": "commit"}, {"oid": "4dc7a8118538a0189c646602219c89329c5183fa", "url": "https://github.com/elastic/elasticsearch/commit/4dc7a8118538a0189c646602219c89329c5183fa", "message": "fix docs", "committedDate": "2020-04-16T12:59:14Z", "type": "commit"}, {"oid": "a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "url": "https://github.com/elastic/elasticsearch/commit/a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "message": "address comments", "committedDate": "2020-04-16T19:49:14Z", "type": "commit"}, {"oid": "126460bacaa6fa49ce12e076cd3e722fa8745bd3", "url": "https://github.com/elastic/elasticsearch/commit/126460bacaa6fa49ce12e076cd3e722fa8745bd3", "message": "fix imports", "committedDate": "2020-04-16T19:59:19Z", "type": "commit"}]}