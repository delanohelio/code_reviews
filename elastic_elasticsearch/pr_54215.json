{"pr_number": 54215, "pr_title": "Add end to end QA authentication test", "pr_author": "jkakavas", "pr_createdAt": "2020-03-25T17:55:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54215", "timeline": [{"oid": "7febd2e3fd0502283adfcdc4e1e772701b1cc22e", "url": "https://github.com/elastic/elasticsearch/commit/7febd2e3fd0502283adfcdc4e1e772701b1cc22e", "message": "Add end to end QA authentication test\n\nUse the same ES cluster as both an SP and an IDP and perform\nIDP initiated and SP initiated SSO. The REST client plays the role\nof both the Cloud UI and Kibana in these flows", "committedDate": "2020-03-25T17:49:51Z", "type": "commit"}, {"oid": "cdead22fa5478d26066971be3155dff6f7671eb3", "url": "https://github.com/elastic/elasticsearch/commit/cdead22fa5478d26066971be3155dff6f7671eb3", "message": "Merge remote-tracking branch 'origin/master' into qa-auth-tests", "committedDate": "2020-03-25T17:50:28Z", "type": "commit"}, {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94", "url": "https://github.com/elastic/elasticsearch/commit/ab6d965d7ac7ffda1384b0668169410284a60d94", "message": "remove unecessary privilege from idp admin", "committedDate": "2020-03-25T17:54:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTg5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401341893", "body": "When we merge #54440, this will need to change to \r\n```suggestion\r\n                Map.entry(\"roles\", List.of(\"sso:(\\\\w+)))\r\n```\r\n", "bodyText": "When we merge #54440, this will need to change to\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n          \n          \n            \n                            Map.entry(\"roles\", List.of(\"sso:(\\\\w+)))", "bodyHTML": "<p dir=\"auto\">When we merge <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"590400167\" data-permission-text=\"Title is private\" data-url=\"https://github.com/elastic/elasticsearch/issues/54440\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/elastic/elasticsearch/pull/54440/hovercard\" href=\"https://github.com/elastic/elasticsearch/pull/54440\">#54440</a>, this will need to change to</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>entry(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>roles<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi x x-first x-last\">Map</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">superuser</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">role:superuser</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">viewer</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">role:viewer</span><span class=\"pl-pds x x-last\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>entry(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>roles<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi x x-first x-last\">List</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">sso:(</span><span class=\"pl-cce x\">\\\\</span><span class=\"x x-last\">w+)</span>))</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tvernum", "createdAt": "2020-04-01T03:55:33Z", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))", "originalCommit": "ab6d965d7ac7ffda1384b0668169410284a60d94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MTMyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401461325", "bodyText": "ack", "author": "jkakavas", "createdAt": "2020-04-01T09:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzAxMw==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343013", "body": "Did you have a thought on how we would test wildcard services here?\r\nJust another method, or switch one of these to be wildcarded rather than registered?\r\n\r\nI don't think we want to hold up this PR for it, but we should have a follow up to add it. \r\n", "bodyText": "Did you have a thought on how we would test wildcard services here?\nJust another method, or switch one of these to be wildcarded rather than registered?\nI don't think we want to hold up this PR for it, but we should have a follow up to add it.", "bodyHTML": "<p dir=\"auto\">Did you have a thought on how we would test wildcard services here?<br>\nJust another method, or switch one of these to be wildcarded rather than registered?</p>\n<p dir=\"auto\">I don't think we want to hold up this PR for it, but we should have a follow up to add it.</p>", "author": "tvernum", "createdAt": "2020-04-01T04:00:38Z", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {", "originalCommit": "ab6d965d7ac7ffda1384b0668169410284a60d94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNDk0NA==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401404944", "bodyText": "I was thinking of adding method(s) for wildcarded - will take care of it in a followup", "author": "jkakavas", "createdAt": "2020-04-01T07:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343317", "body": "I think we can pull this into the base class from here and `ManageServiceProviderRestIT`", "bodyText": "I think we can pull this into the base class from here and ManageServiceProviderRestIT", "bodyHTML": "<p dir=\"auto\">I think we can pull this into the base class from here and <code>ManageServiceProviderRestIT</code></p>", "author": "tvernum", "createdAt": "2020-04-01T04:02:03Z", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {", "originalCommit": "ab6d965d7ac7ffda1384b0668169410284a60d94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzQwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343404", "body": "As above, I think pulling this into IdpRestTestCase make sense.", "bodyText": "As above, I think pulling this into IdpRestTestCase make sense.", "bodyHTML": "<p dir=\"auto\">As above, I think pulling this into IdpRestTestCase make sense.</p>", "author": "tvernum", "createdAt": "2020-04-01T04:02:29Z", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {\n+        final Request request = new Request(\"GET\", SamlServiceProviderIndex.INDEX_NAME + \"/_doc/\" + docVersion.id);\n+        final Response response = adminClient().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(map.get(\"_index\"), equalTo(SamlServiceProviderIndex.INDEX_NAME));\n+        assertThat(map.get(\"_id\"), equalTo(docVersion.id));\n+        assertThat(asLong(map.get(\"_seq_no\")), equalTo(docVersion.seqNo));\n+        assertThat(asLong(map.get(\"_primary_term\")), equalTo(docVersion.primaryTerm));\n+    }\n+\n+    private SamlServiceProviderIndex.DocumentVersion createServiceProvider(String entityId, Map<String, Object> body) throws IOException {", "originalCommit": "ab6d965d7ac7ffda1384b0668169410284a60d94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NDA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401344058", "body": "Suggestion:\r\nThis could return `SamlPrepareAuthenticationResponse` instead rather than using a tuple where the caller need to know what `v1` and `v2` mean.", "bodyText": "Suggestion:\nThis could return SamlPrepareAuthenticationResponse instead rather than using a tuple where the caller need to know what v1 and v2 mean.", "bodyHTML": "<p dir=\"auto\">Suggestion:<br>\nThis could return <code>SamlPrepareAuthenticationResponse</code> instead rather than using a tuple where the caller need to know what <code>v1</code> and <code>v2</code> mean.</p>", "author": "tvernum", "createdAt": "2020-04-01T04:05:00Z", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {\n+        final Request request = new Request(\"GET\", SamlServiceProviderIndex.INDEX_NAME + \"/_doc/\" + docVersion.id);\n+        final Response response = adminClient().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(map.get(\"_index\"), equalTo(SamlServiceProviderIndex.INDEX_NAME));\n+        assertThat(map.get(\"_id\"), equalTo(docVersion.id));\n+        assertThat(asLong(map.get(\"_seq_no\")), equalTo(docVersion.seqNo));\n+        assertThat(asLong(map.get(\"_primary_term\")), equalTo(docVersion.primaryTerm));\n+    }\n+\n+    private SamlServiceProviderIndex.DocumentVersion createServiceProvider(String entityId, Map<String, Object> body) throws IOException {\n+        final Request request =\n+            new Request(\"PUT\", \"/_idp/saml/sp/\" + encode(entityId) + \"?refresh=\" + WriteRequest.RefreshPolicy.IMMEDIATE.getValue());\n+        final String entity = Strings.toString(JsonXContent.contentBuilder().map(body));\n+        request.setJsonEntity(entity);\n+        final Response response = client().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), equalTo(entityId));\n+        assertThat(ObjectPath.eval(\"service_provider.enabled\", map), equalTo(true));\n+\n+        final Object docId = ObjectPath.eval(\"document._id\", map);\n+        final Object seqNo = ObjectPath.eval(\"document._seq_no\", map);\n+        final Object primaryTerm = ObjectPath.eval(\"document._primary_term\", map);\n+        assertThat(docId, instanceOf(String.class));\n+        assertThat(seqNo, instanceOf(Number.class));\n+        assertThat(primaryTerm, instanceOf(Number.class));\n+        return new SamlServiceProviderIndex.DocumentVersion((String) docId, asLong(primaryTerm), asLong(seqNo));\n+    }\n+\n+    private Map<String, Object> validateAuthnRequest(String entityId, String authnRequestQuery) throws Exception {\n+        final Request request = new Request(\"POST\", \"/_idp/saml/validate\");\n+        request.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + authnRequestQuery + \"\\\"}\");\n+        final Response response = client().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), instanceOf(String.class));\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), equalTo(entityId));\n+        assertThat(ObjectPath.eval(\"authn_state\", map), instanceOf(Map.class));\n+        return ObjectPath.eval(\"authn_state\", map);\n+    }\n+\n+    private Tuple<String, String> generateSamlAuthnRequest(String realmName) throws Exception {", "originalCommit": "ab6d965d7ac7ffda1384b0668169410284a60d94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de2e2f4da0a4bee95c09a160956f6d4a4a316729", "url": "https://github.com/elastic/elasticsearch/commit/de2e2f4da0a4bee95c09a160956f6d4a4a316729", "message": "Merge remote-tracking branch 'origin/master' into qa-auth-tests", "committedDate": "2020-04-01T07:27:39Z", "type": "commit"}, {"oid": "88f777b5d11003942e67924ab0d72f3faec484e7", "url": "https://github.com/elastic/elasticsearch/commit/88f777b5d11003942e67924ab0d72f3faec484e7", "message": "Address feedback", "committedDate": "2020-04-01T08:49:33Z", "type": "commit"}]}