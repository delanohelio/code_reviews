{"pr_number": 65501, "pr_title": "Allow to create SparseFileTracker with ranges already present", "pr_author": "tlrx", "pr_createdAt": "2020-11-25T15:13:32Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65501", "timeline": [{"oid": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "url": "https://github.com/elastic/elasticsearch/commit/f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "message": "Allow to create SparseFileTracker with ranges already present", "committedDate": "2020-11-25T15:11:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530450315", "body": "Since `ranges` is a `SortedSet` we're iterating through them in order, so can we just remember the previous range we added?", "bodyText": "Since ranges is a SortedSet we're iterating through them in order, so can we just remember the previous range we added?", "bodyHTML": "<p dir=\"auto\">Since <code>ranges</code> is a <code>SortedSet</code> we're iterating through them in order, so can we just remember the previous range we added?</p>", "author": "DaveCTurner", "createdAt": "2020-11-25T15:18:00Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -37,12 +37,56 @@\n \n     private final long length;\n \n+    /**\n+     * Creates a new empty {@link SparseFileTracker}\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     */\n     public SparseFileTracker(String description, long length) {\n+        this(description, length, Collections.emptySortedSet());\n+    }\n+\n+    /**\n+     * Creates a {@link SparseFileTracker} with some ranges already present\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     * @param ranges      the set of ranges to be considered present\n+     */\n+    public SparseFileTracker(String description, long length, SortedSet<Tuple<Long, Long>> ranges) {\n         this.description = description;\n         this.length = length;\n         if (length < 0) {\n             throw new IllegalArgumentException(\"Length [\" + length + \"] must be equal to or greater than 0 for [\" + description + \"]\");\n         }\n+        if (ranges.isEmpty() == false) {\n+            synchronized (mutex) {\n+                for (Tuple<Long, Long> next : ranges) {\n+                    final Range range = new Range(next.v1(), next.v2(), null);\n+                    if (range.end <= range.start) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" cannot be empty\");\n+                    }\n+                    if (length < range.end) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" is exceeding maximum length [\" + length + ']');\n+                    }\n+\n+                    final SortedSet<Range> previousRanges = this.ranges.headSet(range);", "originalCommit": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530459426", "bodyText": "Makes sense.", "author": "tlrx", "createdAt": "2020-11-25T15:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MDMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MTQzNw==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530451437", "body": "I think this is impossible, so we may as well just `assert added`.", "bodyText": "I think this is impossible, so we may as well just assert added.", "bodyHTML": "<p dir=\"auto\">I think this is impossible, so we may as well just <code>assert added</code>.</p>", "author": "DaveCTurner", "createdAt": "2020-11-25T15:19:38Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -37,12 +37,56 @@\n \n     private final long length;\n \n+    /**\n+     * Creates a new empty {@link SparseFileTracker}\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     */\n     public SparseFileTracker(String description, long length) {\n+        this(description, length, Collections.emptySortedSet());\n+    }\n+\n+    /**\n+     * Creates a {@link SparseFileTracker} with some ranges already present\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     * @param ranges      the set of ranges to be considered present\n+     */\n+    public SparseFileTracker(String description, long length, SortedSet<Tuple<Long, Long>> ranges) {\n         this.description = description;\n         this.length = length;\n         if (length < 0) {\n             throw new IllegalArgumentException(\"Length [\" + length + \"] must be equal to or greater than 0 for [\" + description + \"]\");\n         }\n+        if (ranges.isEmpty() == false) {\n+            synchronized (mutex) {\n+                for (Tuple<Long, Long> next : ranges) {\n+                    final Range range = new Range(next.v1(), next.v2(), null);\n+                    if (range.end <= range.start) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" cannot be empty\");\n+                    }\n+                    if (length < range.end) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" is exceeding maximum length [\" + length + ']');\n+                    }\n+\n+                    final SortedSet<Range> previousRanges = this.ranges.headSet(range);\n+                    if (previousRanges.isEmpty() == false) {\n+                        final Range previous = previousRanges.last();\n+                        if (range.start <= previous.end) {\n+                            throw new IllegalArgumentException(\"Range \" + range + \" is overlapping a previous range \" + previous);\n+                        }\n+                    }\n+                    final boolean added = this.ranges.add(range);\n+                    if (added == false) {", "originalCommit": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTU2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530459566", "bodyText": "Right", "author": "tlrx", "createdAt": "2020-11-25T15:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MTQzNw=="}], "type": "inlineReview"}, {"oid": "aaf845b7597456d3f01f1ccc3e3dce98f1339575", "url": "https://github.com/elastic/elasticsearch/commit/aaf845b7597456d3f01f1ccc3e3dce98f1339575", "message": "feedback", "committedDate": "2020-11-25T15:30:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2NDc2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530464762", "body": "Think this is off-by-one \ud83d\ude01 \r\n\r\n```suggestion\r\n            i = end + 1L + randomLongBetween(0L, Math.max(0L, length - end)); // +1 for non contiguous ranges\r\n```", "bodyText": "Think this is off-by-one \ud83d\ude01\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        i = end + 2L + randomLongBetween(0L, Math.max(0L, length - end)); // +2 for non contiguous ranges\n          \n          \n            \n                        i = end + 1L + randomLongBetween(0L, Math.max(0L, length - end)); // +1 for non contiguous ranges", "bodyHTML": "<p dir=\"auto\">Think this is off-by-one <g-emoji class=\"g-emoji\" alias=\"grin\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f601.png\">\ud83d\ude01</g-emoji></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            i <span class=\"pl-k\">=</span> end <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">2L</span> <span class=\"pl-k\">+</span> randomLongBetween(<span class=\"pl-c1\">0L</span>, <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>max(<span class=\"pl-c1\">0L</span>, length <span class=\"pl-k\">-</span> end)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> +<span class=\"x x-first x-last\">2</span> for non contiguous ranges</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            i <span class=\"pl-k\">=</span> end <span class=\"pl-k\">+</span> <span class=\"pl-c1 x x-first x-last\">1L</span> <span class=\"pl-k\">+</span> randomLongBetween(<span class=\"pl-c1\">0L</span>, <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>max(<span class=\"pl-c1\">0L</span>, length <span class=\"pl-k\">-</span> end)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> +<span class=\"x x-first x-last\">1</span> for non contiguous ranges</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DaveCTurner", "createdAt": "2020-11-25T15:38:11Z", "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/cache/SparseFileTrackerTests.java", "diffHunk": "@@ -536,4 +563,18 @@ private static boolean processGap(byte[] fileContents, SparseFileTracker.Gap gap\n             return true;\n         }\n     }\n+\n+    /**\n+     * Generates a sorted set of non-empty and non-contiguous random ranges that could fit into a file of a given maximum length.\n+     */\n+    private static SortedSet<Tuple<Long, Long>> randomRanges(long length) {\n+        final SortedSet<Tuple<Long, Long>> randomRanges = new TreeSet<>(Comparator.comparingLong(Tuple::v1));\n+        for (long i = 0L; i < length;) {\n+            long start = randomLongBetween(i, Math.max(0L, length - 1L));\n+            long end = randomLongBetween(start + 1L, length); // +1 for non empty ranges\n+            randomRanges.add(Tuple.tuple(start, end));\n+            i = end + 2L + randomLongBetween(0L, Math.max(0L, length - end)); // +2 for non contiguous ranges", "originalCommit": "aaf845b7597456d3f01f1ccc3e3dce98f1339575", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3NDA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530474049", "bodyText": "A tradition, I told you", "author": "tlrx", "createdAt": "2020-11-25T15:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2NDc2Mg=="}], "type": "inlineReview"}, {"oid": "60e85cd376d198784fd12e765d5877a5043e869d", "url": "https://github.com/elastic/elasticsearch/commit/60e85cd376d198784fd12e765d5877a5043e869d", "message": "off by one", "committedDate": "2020-11-25T15:50:17Z", "type": "commit"}]}