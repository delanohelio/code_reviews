{"pr_number": 56989, "pr_title": "Close channel on handshake error with old version", "pr_author": "DaveCTurner", "pr_createdAt": "2020-05-20T11:22:50Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56989", "timeline": [{"oid": "58e9c301371543aa426a5757baa213503cccab78", "url": "https://github.com/elastic/elasticsearch/commit/58e9c301371543aa426a5757baa213503cccab78", "message": "Close channel on handshake error with old version\n\nToday a transport response uses the same wire format version as the\ncorresponding request. This mostly works since we mostly know we are\ncommunicating with a node with a compatible version. TCP handshakes don't have\nthis guarantee since they use `Version.CURRENT.minimumCompatibilityVersion()`\nto let us handshake with older nodes. This results in the strange situation of\na node of major version `N` responding to a node of major version `N-1` using a\nwire format of version `N-2`.\n\nWe put extra effort into the longer BWC requirements for successful responses,\nbut we do not offer the same guarantees for error responses since they may be\nrather complicated to serialize. This can result in the sender misinterpreting\nthe response which may have unpredictable consequences.\n\nRather than strengthening the guarantees in this area, this commit simply logs\nthe exception and closes the connection on a handshake error with a node that\nuses an incompatible wire format.\n\nCloses #54337", "committedDate": "2020-05-20T11:08:02Z", "type": "commit"}, {"oid": "08ce006b88d3c9265b713f40c1dada6c18577f98", "url": "https://github.com/elastic/elasticsearch/commit/08ce006b88d3c9265b713f40c1dada6c18577f98", "message": "Precommit", "committedDate": "2020-05-20T11:35:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2ODU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56989#discussion_r427968571", "body": "I think we can do this way shorter as:\r\n\r\n```java\r\n            @Override\r\n            public StreamInput openOrGetStreamInput() {\r\n                final StreamInput streamInput = new InputStreamStreamInput(new InputStream() {\r\n                    @Override\r\n                    public int read() {\r\n                        throw new ElasticsearchException(\"unreadable handshake\");\r\n                    }\r\n                });\r\n                streamInput.setVersion(message.getHeader().getVersion());\r\n                return streamInput;\r\n            }\r\n```", "bodyText": "I think we can do this way shorter as:\n            @Override\n            public StreamInput openOrGetStreamInput() {\n                final StreamInput streamInput = new InputStreamStreamInput(new InputStream() {\n                    @Override\n                    public int read() {\n                        throw new ElasticsearchException(\"unreadable handshake\");\n                    }\n                });\n                streamInput.setVersion(message.getHeader().getVersion());\n                return streamInput;\n            }", "bodyHTML": "<p dir=\"auto\">I think we can do this way shorter as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"            @Override\n            public StreamInput openOrGetStreamInput() {\n                final StreamInput streamInput = new InputStreamStreamInput(new InputStream() {\n                    @Override\n                    public int read() {\n                        throw new ElasticsearchException(&quot;unreadable handshake&quot;);\n                    }\n                });\n                streamInput.setVersion(message.getHeader().getVersion());\n                return streamInput;\n            }\"><pre>            <span class=\"pl-k\">@Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">StreamInput</span> openOrGetStreamInput() {\n                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">StreamInput</span> streamInput <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">InputStreamStreamInput</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">InputStream</span>() {\n                    <span class=\"pl-k\">@Override</span>\n                    <span class=\"pl-k\">public</span> <span class=\"pl-k\">int</span> <span class=\"pl-en\">read</span>() {\n                        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ElasticsearchException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>unreadable handshake<span class=\"pl-pds\">\"</span></span>);\n                    }\n                });\n                streamInput<span class=\"pl-k\">.</span>setVersion(message<span class=\"pl-k\">.</span>getHeader()<span class=\"pl-k\">.</span>getVersion());\n                <span class=\"pl-k\">return</span> streamInput;\n            }</pre></div>", "author": "original-brownbear", "createdAt": "2020-05-20T12:28:00Z", "path": "server/src/test/java/org/elasticsearch/transport/TransportServiceHandshakeTests.java", "diffHunk": "@@ -190,4 +307,59 @@ public void testNodeConnectWithDifferentNodeId() {\n         }\n     }\n \n+    private static Version randomCompatibleVersion() {\n+        return VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumCompatibilityVersion(), Version.CURRENT);\n+    }\n+\n+    private static InboundMessage unreadableHandshake(InboundMessage message) {\n+        return new InboundMessage(message.getHeader(), false) {\n+            @Override\n+            public int getContentLength() {\n+                return message.getContentLength();\n+            }\n+\n+            @Override\n+            public StreamInput openOrGetStreamInput() {", "originalCommit": "08ce006b88d3c9265b713f40c1dada6c18577f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk3OTI2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56989#discussion_r427979267", "bodyText": "Thanks, I was pretty sure there was a way to do this by overriding a single method somewhere.", "author": "DaveCTurner", "createdAt": "2020-05-20T12:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2ODU3MQ=="}], "type": "inlineReview"}, {"oid": "80371a87229e856054303ca1480bddd208148050", "url": "https://github.com/elastic/elasticsearch/commit/80371a87229e856054303ca1480bddd208148050", "message": "Test this in InboundHandlerTests instead", "committedDate": "2020-05-20T16:50:42Z", "type": "commit"}]}