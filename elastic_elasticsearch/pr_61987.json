{"pr_number": 61987, "pr_title": "Media-type parser", "pr_author": "pgomulka", "pr_createdAt": "2020-09-04T13:17:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61987", "timeline": [{"oid": "5e4239099c44ff785746ed7ee86b326789910c4d", "url": "https://github.com/elastic/elasticsearch/commit/5e4239099c44ff785746ed7ee86b326789910c4d", "message": "Split responsibility for format parsing", "committedDate": "2020-09-02T12:03:20Z", "type": "commit"}, {"oid": "01f001d57540b3d44634551ee067e443eae09b75", "url": "https://github.com/elastic/elasticsearch/commit/01f001d57540b3d44634551ee067e443eae09b75", "message": "parse * and ndjson", "committedDate": "2020-09-02T12:24:16Z", "type": "commit"}, {"oid": "50a88a0d190a882ed3cb389d17a97349de6e540a", "url": "https://github.com/elastic/elasticsearch/commit/50a88a0d190a882ed3cb389d17a97349de6e540a", "message": "make format not accepting applicaiton/", "committedDate": "2020-09-02T12:26:40Z", "type": "commit"}, {"oid": "fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "url": "https://github.com/elastic/elasticsearch/commit/fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "message": "post data request should parse applicaiton/json style", "committedDate": "2020-09-02T12:35:26Z", "type": "commit"}, {"oid": "09f281ecf956a7dc76c72daedc18dbb097709d02", "url": "https://github.com/elastic/elasticsearch/commit/09f281ecf956a7dc76c72daedc18dbb097709d02", "message": "unused import", "committedDate": "2020-09-02T14:34:45Z", "type": "commit"}, {"oid": "8bc024f5af943b2e38dce377dae21c8db34115aa", "url": "https://github.com/elastic/elasticsearch/commit/8bc024f5af943b2e38dce377dae21c8db34115aa", "message": "fix sql parsing", "committedDate": "2020-09-02T15:11:32Z", "type": "commit"}, {"oid": "070508c2a2adc3e1197377f6747de18fff3c4b88", "url": "https://github.com/elastic/elasticsearch/commit/070508c2a2adc3e1197377f6747de18fff3c4b88", "message": "split format and accept header", "committedDate": "2020-09-03T13:32:00Z", "type": "commit"}, {"oid": "3c7ab16fc839d7ade510e8025ad39f106d12752f", "url": "https://github.com/elastic/elasticsearch/commit/3c7ab16fc839d7ade510e8025ad39f106d12752f", "message": "fix and todos", "committedDate": "2020-09-03T15:29:51Z", "type": "commit"}, {"oid": "59a7f42f1877c31102196900c9e33ee1dc6ededd", "url": "https://github.com/elastic/elasticsearch/commit/59a7f42f1877c31102196900c9e33ee1dc6ededd", "message": "Merge branch 'master' into xcontent_format_parsing", "committedDate": "2020-09-03T16:09:35Z", "type": "commit"}, {"oid": "968b1c98da20f2efecd989d6b5926e4241ec46e0", "url": "https://github.com/elastic/elasticsearch/commit/968b1c98da20f2efecd989d6b5926e4241ec46e0", "message": "media type parser", "committedDate": "2020-09-04T13:04:22Z", "type": "commit"}, {"oid": "46f8f33af567e170cf235f12f246b689dbf687d9", "url": "https://github.com/elastic/elasticsearch/commit/46f8f33af567e170cf235f12f246b689dbf687d9", "message": "media type parser", "committedDate": "2020-09-04T13:12:39Z", "type": "commit"}, {"oid": "cbbe0933024511f2e5fd9686df8f95df4d86be08", "url": "https://github.com/elastic/elasticsearch/commit/cbbe0933024511f2e5fd9686df8f95df4d86be08", "message": "precommit", "committedDate": "2020-09-04T14:33:00Z", "type": "commit"}, {"oid": "222caeea550d1d0340e717546cc280b64c5d1c58", "url": "https://github.com/elastic/elasticsearch/commit/222caeea550d1d0340e717546cc280b64c5d1c58", "message": "rename and null check", "committedDate": "2020-09-07T08:21:21Z", "type": "commit"}, {"oid": "6bdec139fc47573e4d7de0b95994dd25714708ed", "url": "https://github.com/elastic/elasticsearch/commit/6bdec139fc47573e4d7de0b95994dd25714708ed", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-07T08:40:32Z", "type": "commit"}, {"oid": "ee9756490274252a6ee4f9f18956e32d80c98aeb", "url": "https://github.com/elastic/elasticsearch/commit/ee9756490274252a6ee4f9f18956e32d80c98aeb", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-07T08:51:29Z", "type": "commit"}, {"oid": "7f52e11aae3df3fe785f30d5c4668cae5b663058", "url": "https://github.com/elastic/elasticsearch/commit/7f52e11aae3df3fe785f30d5c4668cae5b663058", "message": "fix text format parsing", "committedDate": "2020-09-07T10:52:30Z", "type": "commit"}, {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "url": "https://github.com/elastic/elasticsearch/commit/63db70c3c79a2343f4c4864d1f77fb96cfecc657", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-08T10:56:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MTIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484961204", "body": "Wondering if this media-type origin split is strictly necessary: the previous code tried to fetch a token from somewhere - in order of preference: enforced format (CBOR), `format` URL attribute, `Accept` header, `Content-Type` header and repeatedly checking `accept` against `null` - then validate that token against a _media type_ or as a _format_ (#`fromMediaTypeOrFormat()`).\r\n\r\nThe new code checks if it's a _format_ (in `getXContentType()` @ L143), or then if it's a _media type_, by one of these XContentType instances (@ L147). **But** the source preferences is already stored in the way the `accept` member is set (by those subsequent `null` checks), so could we not simply serially invoke #`fromMediaType(accept)` and #`fromFormat(accept)` and return the first non-null value to simplify the code? Similar to what we do in `TextFormat#fromMediaTypeOrFormat()`.", "bodyText": "Wondering if this media-type origin split is strictly necessary: the previous code tried to fetch a token from somewhere - in order of preference: enforced format (CBOR), format URL attribute, Accept header, Content-Type header and repeatedly checking accept against null - then validate that token against a media type or as a format (#fromMediaTypeOrFormat()).\nThe new code checks if it's a format (in getXContentType() @ L143), or then if it's a media type, by one of these XContentType instances (@ L147). But the source preferences is already stored in the way the accept member is set (by those subsequent null checks), so could we not simply serially invoke #fromMediaType(accept) and #fromFormat(accept) and return the first non-null value to simplify the code? Similar to what we do in TextFormat#fromMediaTypeOrFormat().", "bodyHTML": "<p dir=\"auto\">Wondering if this media-type origin split is strictly necessary: the previous code tried to fetch a token from somewhere - in order of preference: enforced format (CBOR), <code>format</code> URL attribute, <code>Accept</code> header, <code>Content-Type</code> header and repeatedly checking <code>accept</code> against <code>null</code> - then validate that token against a <em>media type</em> or as a <em>format</em> (#<code>fromMediaTypeOrFormat()</code>).</p>\n<p dir=\"auto\">The new code checks if it's a <em>format</em> (in <code>getXContentType()</code> @ L143), or then if it's a <em>media type</em>, by one of these XContentType instances (@ L147). <strong>But</strong> the source preferences is already stored in the way the <code>accept</code> member is set (by those subsequent <code>null</code> checks), so could we not simply serially invoke #<code>fromMediaType(accept)</code> and #<code>fromFormat(accept)</code> and return the first non-null value to simplify the code? Similar to what we do in <code>TextFormat#fromMediaTypeOrFormat()</code>.</p>", "author": "bpintea", "createdAt": "2020-09-08T14:24:02Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -65,6 +65,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * isn't then we use the {@code Content-Type} header which is required.\n          */\n         String accept = null;\n+        XContentType acceptHeader = null;\n+        XContentType contentTypeHeader = null;", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTIzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485651235", "bodyText": "good point, I have refactored this as per your suggestions", "author": "pgomulka", "createdAt": "2020-09-09T14:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MTIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484963165", "body": "Is the extension necessary? ", "bodyText": "Is the extension necessary?", "bodyHTML": "<p dir=\"auto\">Is the extension necessary?</p>", "author": "bpintea", "createdAt": "2020-09-08T14:26:33Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -32,7 +34,7 @@\n /**\n  * Templating class for displaying SQL responses in text formats.\n  */\n-enum TextFormat {\n+enum TextFormat implements MediaType {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MjA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485652078", "bodyText": "in order to use a MediaType parser for both TextFormat and XContentType i had to introduce an interface that is implemented by both", "author": "pgomulka", "createdAt": "2020-09-09T14:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MzI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486493261", "bodyText": "Right. Thanks.", "author": "bpintea", "createdAt": "2020-09-10T16:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2NTExMw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484965113", "body": "remove reminder.", "bodyText": "remove reminder.", "bodyHTML": "<p dir=\"auto\">remove reminder.</p>", "author": "bpintea", "createdAt": "2020-09-08T14:29:06Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -92,7 +97,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * that doesn't parse it'll throw an {@link IllegalArgumentException}\n          * which we turn into a 400 error.\n          */\n-        XContentType xContentType = accept == null ? XContentType.JSON : XContentType.fromMediaTypeOrFormat(accept);\n+        //TODO PG this all logic needs a review from SQL team", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MDA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484970088", "body": "Good to know. Having multiple header fields with same name is legal though, I guess we should leave it as is.", "bodyText": "Good to know. Having multiple header fields with same name is legal though, I guess we should leave it as is.", "bodyHTML": "<p dir=\"auto\">Good to know. Having multiple header fields with same name is legal though, I guess we should leave it as is.</p>", "author": "bpintea", "createdAt": "2020-09-08T14:35:19Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -197,6 +204,7 @@ String maybeEscape(String value, Character delimiter) {\n         boolean hasHeader(RestRequest request) {\n             String header = request.param(URL_PARAM_HEADER);\n             if (header == null) {\n+                //TODO PG in most places we only assume one accept header", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MTc0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485071742", "body": "```suggestion\r\n        return type() + \"/\" + subtype();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return type()+\"/\"+subtype();\n          \n          \n            \n                    return type() + \"/\" + subtype();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> type()<span class=\"pl-k x x-first x-last\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span><span class=\"pl-k x x-first x-last\">+</span>subtype();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> type()<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span><span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span>subtype();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:07:10Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){\n+        return type()+\"/\"+subtype();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072287", "body": "```suggestion\r\n        if (format == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(format == null) {\n          \n          \n            \n                    if (format == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span>(format <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(format <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:08:13Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjkxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072915", "body": "```suggestion\r\n    private final Map<String, T> formatToMediaType = new HashMap<>();\r\n    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> formatToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> typeSubtypeToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> formatToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> typeSubtypeToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:09:18Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MzM2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485073365", "body": "```suggestion\r\n    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n          \n          \n            \n                public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">MediaTypeParser&lt;<span class=\"pl-smi\">XContentType</span>&gt;</span> mediaTypeParser <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">MediaTypeParser&lt;&gt;</span>(<span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>values())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">MediaTypeParser&lt;<span class=\"pl-smi\">XContentType</span>&gt;</span> mediaTypeParser <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">MediaTypeParser&lt;&gt;</span>(<span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>values())</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:10:06Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDE0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074143", "body": "can we remove this method? I favor immutability and this could be replaced by a constructor that takes another argument that is a map?", "bodyText": "can we remove this method? I favor immutability and this could be replaced by a constructor that takes another argument that is a map?", "bodyHTML": "<p dir=\"auto\">can we remove this method? I favor immutability and this could be replaced by a constructor that takes another argument that is a map?</p>", "author": "jaymode", "createdAt": "2020-09-08T17:11:35Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDkwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420906", "bodyText": "will do", "author": "pgomulka", "createdAt": "2020-09-09T08:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074383", "body": "```suggestion\r\n```", "bodyText": "Suggested change", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:11:59Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n+        .withAdditionalMediaType(\"application/*\", JSON)\n+        .withAdditionalMediaType(\"application/x-ndjson\", JSON);\n+\n+\n+", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074958", "body": "```suggestion\r\n            if (responseContentType == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(responseContentType == null) {\n          \n          \n            \n                        if (responseContentType == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span>(responseContentType <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(responseContentType <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:13:05Z", "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n+            responseContentType = XContentType.fromFormat(format);\n+            if(responseContentType == null) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075529", "body": "Maybe open an issue for this. My guess is that there is some precedence already and it might be that format overrides the header", "bodyText": "Maybe open an issue for this. My guess is that there is some precedence already and it might be that format overrides the header", "bodyHTML": "<p dir=\"auto\">Maybe open an issue for this. My guess is that there is some precedence already and it might be that format overrides the header</p>", "author": "jaymode", "createdAt": "2020-09-08T17:14:09Z", "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MDgwMA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487780800", "bodyText": "raised #62294 to discuss this", "author": "pgomulka", "createdAt": "2020-09-14T09:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075702", "body": "```suggestion\r\n        if (request.hasParam(\"format\")) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(request.hasParam(\"format\")) {\n          \n          \n            \n                    if (request.hasParam(\"format\")) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span>(request<span class=\"pl-k\">.</span>hasParam(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>format<span class=\"pl-pds\">\"</span></span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(request<span class=\"pl-k\">.</span>hasParam(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>format<span class=\"pl-pds\">\"</span></span>)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-08T17:14:27Z", "path": "server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java", "diffHunk": "@@ -51,13 +51,20 @@\n \n     public static RestResponse buildResponse(Table table, RestChannel channel) throws Exception {\n         RestRequest request = channel.request();\n-        XContentType xContentType = XContentType.fromMediaTypeOrFormat(request.param(\"format\", request.header(\"Accept\")));\n+        XContentType xContentType = getxContentType(request);\n         if (xContentType != null) {\n             return buildXContentBuilder(table, channel);\n         }\n         return buildTextPlainResponse(table, channel);\n     }\n \n+    private static XContentType getxContentType(RestRequest request) {\n+        if(request.hasParam(\"format\")) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485270166", "body": "I think you need to check for `keyValueParam.size` before accessing `[1]` in the case of a malformed `key=` (no value)", "bodyText": "I think you need to check for keyValueParam.size before accessing [1] in the case of a malformed key= (no value)", "bodyHTML": "<p dir=\"auto\">I think you need to check for <code>keyValueParam.size</code> before accessing <code>[1]</code> in the case of a malformed <code>key=</code> (no value)</p>", "author": "jakelandis", "createdAt": "2020-09-09T00:39:22Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTkyNA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485609924", "bodyText": "good point, will add test cases", "author": "pgomulka", "createdAt": "2020-09-09T13:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485275066", "body": "I'm not sure I completely follow the `format` variant of parsing... but I think this method does not support that... right ? \r\n\r\nThe previous version accepted either variants (format (`json`) or the mime type (`application/json`) ... so splitting these requires the caller to know know which one to call. \r\n\r\nI see two cases `TextTemplateEngine` and `RestSqlQueryAction` where it is not immediately obvious that is correct. It seems strange that we would support this shorter name in some cases for parsing headers, but not others, and when the the format variant is used (e.g. `json`) is used we don't support parsing the parameters. \r\n\r\nIs possible to just support the mime type for all content-type and accept header parsing ? (leaving the `format` soley to the realm of the query string parameter) \r\n\r\n", "bodyText": "I'm not sure I completely follow the format variant of parsing... but I think this method does not support that... right ?\nThe previous version accepted either variants (format (json) or the mime type (application/json) ... so splitting these requires the caller to know know which one to call.\nI see two cases TextTemplateEngine and RestSqlQueryAction where it is not immediately obvious that is correct. It seems strange that we would support this shorter name in some cases for parsing headers, but not others, and when the the format variant is used (e.g. json) is used we don't support parsing the parameters.\nIs possible to just support the mime type for all content-type and accept header parsing ? (leaving the format soley to the realm of the query string parameter)", "bodyHTML": "<p dir=\"auto\">I'm not sure I completely follow the <code>format</code> variant of parsing... but I think this method does not support that... right ?</p>\n<p dir=\"auto\">The previous version accepted either variants (format (<code>json</code>) or the mime type (<code>application/json</code>) ... so splitting these requires the caller to know know which one to call.</p>\n<p dir=\"auto\">I see two cases <code>TextTemplateEngine</code> and <code>RestSqlQueryAction</code> where it is not immediately obvious that is correct. It seems strange that we would support this shorter name in some cases for parsing headers, but not others, and when the the format variant is used (e.g. <code>json</code>) is used we don't support parsing the parameters.</p>\n<p dir=\"auto\">Is possible to just support the mime type for all content-type and accept header parsing ? (leaving the <code>format</code> soley to the realm of the query string parameter)</p>", "author": "jakelandis", "createdAt": "2020-09-09T00:58:13Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTQ5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485609492", "bodyText": "4x yes.\nso this is exactly the intention here.\nre1 The parseMediaType is not supporting the format parsing.\nre2 The caller has to know which one to call.\nre3 There should not be a place were we parse a format but a value is taken from Accept or Content-Type headers. Values from headers should follow media-type format (type/subtype;parameters)\nre4 I hope after this PR this will be clear that mime types are for headers, format for query parameter", "author": "pgomulka", "createdAt": "2020-09-09T13:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485685511", "bodyText": "thanks.. i double checked TextTemplateEngine and while it appears that the former supported either application/json or json,  I think we are fine (as-is here) to only support json for these reasons:   1) only applicable to inline mustache scripts in watcher 2) it is not documented and only lightly tested 3) only found one example of its usage in the wild  (and it used json).  Given the lack of documentation i doubt this is used much at all and if so likely uses the short form json.\nI have not validated RestSqlQueryAction behavior", "author": "jakelandis", "createdAt": "2020-09-09T15:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NjgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487756836", "bodyText": "RestSqlQueryAction was reviewed by @bpintea", "author": "pgomulka", "createdAt": "2020-09-14T08:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3ODEyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485278129", "body": "Format, shortName, and subType seem like 3 ways to represent the same thing, and would be great if we could get to a common term (`subtype`) across the board. I think we can just drop `format` in favor of `subtype` ?", "bodyText": "Format, shortName, and subType seem like 3 ways to represent the same thing, and would be great if we could get to a common term (subtype) across the board. I think we can just drop format in favor of subtype ?", "bodyHTML": "<p dir=\"auto\">Format, shortName, and subType seem like 3 ways to represent the same thing, and would be great if we could get to a common term (<code>subtype</code>) across the board. I think we can just drop <code>format</code> in favor of <code>subtype</code> ?</p>", "author": "jakelandis", "createdAt": "2020-09-09T01:09:41Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420315", "bodyText": "in some cases these 3 are actually different. For instance - text/plain has subtype=plain, but format and shortName txt \nsimilarly for versioned media types I plan this to be: application/vnd.elasticsearch+json;compatible-with=7 subtype is vnd.elasticsearch+json, format is json and shortName json\nI think shortName is redundant and I will give it a go to remove it", "author": "pgomulka", "createdAt": "2020-09-09T08:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3ODEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485279927", "body": "I think `type` and `subtype` here are redundant since they can be found via the `MediaType`", "bodyText": "I think type and subtype here are redundant since they can be found via the MediaType", "bodyHTML": "<p dir=\"auto\">I think <code>type</code> and <code>subtype</code> here are redundant since they can be found via the <code>MediaType</code></p>", "author": "jakelandis", "createdAt": "2020-09-09T01:15:57Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(type, subtype, parameters, xContentType);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more\n+     */\n+    public class ParsedMediaType {\n+        private final String type;\n+        private final String subtype;", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMTA5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485421093", "bodyText": "good point, will remove", "author": "pgomulka", "createdAt": "2020-09-09T08:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjkxOA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485282918", "body": "nit: `typeWithSubtype` or or just `get()` or `asString`", "bodyText": "nit: typeWithSubtype or or just get() or asString", "bodyHTML": "<p dir=\"auto\">nit: <code>typeWithSubtype</code> or or just <code>get()</code> or <code>asString</code></p>", "author": "jakelandis", "createdAt": "2020-09-09T01:27:08Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420638", "bodyText": "typeWithSubtype looks best to me. (although asString is tempting too..)", "author": "pgomulka", "createdAt": "2020-09-09T08:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485283479", "body": "nit: `typeWithSubTypeToMediaType` or `stringToMediaType`", "bodyText": "nit: typeWithSubTypeToMediaType or stringToMediaType", "bodyHTML": "<p dir=\"auto\">nit: <code>typeWithSubTypeToMediaType</code> or <code>stringToMediaType</code></p>", "author": "jakelandis", "createdAt": "2020-09-09T01:29:01Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "url": "https://github.com/elastic/elasticsearch/commit/57ddb407557e4cf5b97a8a030bf97da7d836c728", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>", "committedDate": "2020-09-09T08:11:57Z", "type": "commit"}, {"oid": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "url": "https://github.com/elastic/elasticsearch/commit/b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "message": "code review follow up", "committedDate": "2020-09-09T14:59:09Z", "type": "commit"}, {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92", "url": "https://github.com/elastic/elasticsearch/commit/90e798dd31197bc7424db396c6b5f152d6864f92", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split", "committedDate": "2020-09-09T15:03:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NjE0MA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485686140", "body": "You can remove this todo, answered in another comment. ", "bodyText": "You can remove this todo, answered in another comment.", "bodyHTML": "<p dir=\"auto\">You can remove this todo, answered in another comment.</p>", "author": "jakelandis", "createdAt": "2020-09-09T15:05:34Z", "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java", "diffHunk": "@@ -82,7 +82,8 @@ private XContentType detectContentType(String content) {\n             //There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3\n             int endOfContentName = content.indexOf(\"__::\", 3);\n             if (endOfContentName != -1) {\n-                return XContentType.fromMediaTypeOrFormat(content.substring(2, endOfContentName));\n+                //TODO PG what do we expect here?", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjU2NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486486564", "body": "can you add javadocs to the class and methods?", "bodyText": "can you add javadocs to the class and methods?", "bodyHTML": "<p dir=\"auto\">can you add javadocs to the class and methods?</p>", "author": "jaymode", "createdAt": "2020-09-10T16:43:31Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486487974", "body": "shouldn't we base this on https://tools.ietf.org/html/rfc7231#section-3.1.1.1", "bodyText": "shouldn't we base this on https://tools.ietf.org/html/rfc7231#section-3.1.1.1", "bodyHTML": "<p dir=\"auto\">shouldn't we base this on <a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.1.1\" rel=\"nofollow\">https://tools.ietf.org/html/rfc7231#section-3.1.1.1</a></p>", "author": "jaymode", "createdAt": "2020-09-10T16:45:46Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1MjM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487752397", "bodyText": "you are right. the rfc2616 is obsolete.\nrfc7231 is the updated one", "author": "pgomulka", "createdAt": "2020-09-14T08:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486491645", "body": "per the RFC, it is not allowed so I guess we should", "bodyText": "per the RFC, it is not allowed so I guess we should", "bodyHTML": "<p dir=\"auto\">per the RFC, it is not allowed so I guess we should</p>", "author": "jaymode", "createdAt": "2020-09-10T16:52:04Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        // should we validate that there are no spaces between key = value?", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NTA5NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486495094", "body": "Just a small compacting suggestion: \r\n```suggestion\r\n        XContentType xContentType = XContentType.fromFormat(accept);\r\n        return xContentType != null ? xContentType : XContentType.fromMediaType(accept);\r\n```", "bodyText": "Just a small compacting suggestion:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    xContentType = XContentType.fromMediaType(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    return xContentType;\n          \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    return xContentType != null ? xContentType : XContentType.fromMediaType(accept);", "bodyHTML": "<p dir=\"auto\">Just a small compacting suggestion:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">XContentType</span> xContentType <span class=\"pl-k\">=</span> <span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>fromFormat(accept);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (xContentType <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> xContentType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        xContentType <span class=\"pl-k\">=</span> <span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>fromMediaType(accept);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (xContentType <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> xContentType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> xContentType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">XContentType</span> xContentType <span class=\"pl-k\">=</span> <span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>fromFormat(accept);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> xContentType <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> xContentType <span class=\"pl-k\">:</span> <span class=\"pl-smi\">XContentType</span><span class=\"pl-k\">.</span>fromMediaType(accept);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bpintea", "createdAt": "2020-09-10T16:57:36Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -130,6 +130,21 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n         });\n     }\n \n+    private XContentType getXContentType(String accept) {\n+        if (accept == null) {\n+            return XContentType.JSON;\n+        }\n+        XContentType xContentType = XContentType.fromFormat(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        xContentType = XContentType.fromMediaType(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        return xContentType;", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "url": "https://github.com/elastic/elasticsearch/commit/fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "message": "javadoc and validation", "committedDate": "2020-09-14T09:22:20Z", "type": "commit"}, {"oid": "31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "url": "https://github.com/elastic/elasticsearch/commit/31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "message": "Update x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>", "committedDate": "2020-09-14T09:22:25Z", "type": "commit"}, {"oid": "a925fbebfa43ee1ae179ef1d9638a948ad654677", "url": "https://github.com/elastic/elasticsearch/commit/a925fbebfa43ee1ae179ef1d9638a948ad654677", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split", "committedDate": "2020-09-14T09:26:31Z", "type": "commit"}, {"oid": "23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "url": "https://github.com/elastic/elasticsearch/commit/23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "message": "javadoc fix", "committedDate": "2020-09-14T11:31:37Z", "type": "commit"}, {"oid": "b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "url": "https://github.com/elastic/elasticsearch/commit/b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "message": "remove shortName", "committedDate": "2020-09-14T11:45:10Z", "type": "commit"}, {"oid": "c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "url": "https://github.com/elastic/elasticsearch/commit/c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "message": "javadoc fix", "committedDate": "2020-09-14T12:33:28Z", "type": "commit"}, {"oid": "7d6bd08e0a9f18576c30ac8b355794eb22605160", "url": "https://github.com/elastic/elasticsearch/commit/7d6bd08e0a9f18576c30ac8b355794eb22605160", "message": "fix compile error", "committedDate": "2020-09-14T12:40:41Z", "type": "commit"}, {"oid": "3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "url": "https://github.com/elastic/elasticsearch/commit/3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "message": "fix test compile", "committedDate": "2020-09-14T12:56:58Z", "type": "commit"}, {"oid": "77068a802c498afb4582186bab517913b4414a2a", "url": "https://github.com/elastic/elasticsearch/commit/77068a802c498afb4582186bab517913b4414a2a", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-15T06:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1OTUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488659537", "body": "can you add a test for `assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\")` I think it will error with index out of bounds. ", "bodyText": "can you add a test for assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\") I think it will error with index out of bounds.", "bodyHTML": "<p dir=\"auto\">can you add a test for <code>assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\")</code> I think it will error with index out of bounds.</p>", "author": "jakelandis", "createdAt": "2020-09-15T13:18:47Z", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class MediaTypeParserTests extends ESTestCase {\n+    MediaTypeParser<XContentType> mediaTypeParser = XContentType.mediaTypeParser;\n+\n+    public void testJsonWithParameters() throws Exception {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \";\").getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+    }\n+\n+    public void testWhiteSpaceInTypeSubtype() {\n+        String mediaType = \" application/json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getMediaType(),\n+            equalTo(XContentType.JSON));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;\\n charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+\n+        mediaType = \" application / json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType),\n+            is(nullValue()));\n+    }\n+\n+    public void testInvalidParameters() {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; keyvalueNoEqualsSign\"),\n+            is(nullValue()));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key = value\"),\n+            is(nullValue()));", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzQzNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489573437", "bodyText": "this would mean that the result of String[] keyValueParam = split[i].trim().split(\"=\"); has length  = 1\nit is checked in a next line.\n if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\nadded a testcase", "author": "pgomulka", "createdAt": "2020-09-16T16:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1OTUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488661900", "body": "can you leave these specific TODO's out. IMO TODO's left in the code base should be rare and general enough such that any future dev can understand and implement it. ", "bodyText": "can you leave these specific TODO's out. IMO TODO's left in the code base should be rare and general enough such that any future dev can understand and implement it.", "bodyHTML": "<p dir=\"auto\">can you leave these specific TODO's out. IMO TODO's left in the code base should be rare and general enough such that any future dev can understand and implement it.</p>", "author": "jakelandis", "createdAt": "2020-09-15T13:21:59Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        //spaces are allowed between parameters, but not between '=' sign\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n+                            return null;\n+                        }\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(xContentType, parameters);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    private boolean hasSpaces(String s) {\n+        return s.trim().equals(s) == false;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489573613", "bodyText": "agree. removed the todo", "author": "pgomulka", "createdAt": "2020-09-16T16:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MzIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488663225", "body": "\u2764\ufe0f ", "bodyText": "\u2764\ufe0f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png\">\u2764\ufe0f</g-emoji></p>", "author": "jakelandis", "createdAt": "2020-09-15T13:23:42Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8fb0cd4c41710853001b5468f931dca0b0227c05", "url": "https://github.com/elastic/elasticsearch/commit/8fb0cd4c41710853001b5468f931dca0b0227c05", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-15T18:54:24Z", "type": "commit"}, {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "url": "https://github.com/elastic/elasticsearch/commit/63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "message": "remove todo and a testcase", "committedDate": "2020-09-16T16:37:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489722755", "body": "Thank you for adding these javadocs!\r\n\r\n```suggestion\r\n     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\r\n```", "bodyText": "Thank you for adding these javadocs!\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text but format is txt\n          \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt", "bodyHTML": "<p dir=\"auto\">Thank you for adding these javadocs!</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Can</span> differ from the <span class=\"pl-smi\">MediaType</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s subtype i.e plain/text but format is txt</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Can</span> differ from the <span class=\"pl-smi\">MediaType</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s subtype i.e plain/text <span class=\"x x-first x-last\">has a subtype of text </span>but format is txt</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-16T20:04:08Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "originalCommit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNzY5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489727697", "body": "This could be considered a nit and is my preference on style and immutability.\r\n\r\n```suggestion\r\n    private final Map<String, T> formatToMediaType;\r\n    private final Map<String, T> typeWithSubtypeToMediaType;\r\n\r\n    public MediaTypeParser(T[] acceptedMediaTypes) {\r\n        this(acceptedMediaTypes, Map.of());\r\n    }\r\n\r\n    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\r\n        final int size = acceptedMediaTypes.length + additionalMediaTypes.size();\r\n        Map<String, T> formatMap = new HashMap<>(size);\r\n        Map<String, T> typeMap = new HashMap<>(size);\r\n        for (T mediaType : acceptedMediaTypes) {\r\n            typeMap.put(mediaType.typeWithSubtype(), mediaType);\r\n            formatMap.put(mediaType.format(), mediaType);\r\n        }\r\n        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\r\n            String typeWithSubtype = entry.getKey();\r\n            T mediaType = entry.getValue();\r\n\r\n            typeMap.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\r\n            formatMap.put(mediaType.format(), mediaType);\r\n        }\r\n\r\n        this.formatToMediaType = Map.copyOf(formatMap);\r\n        this.typeWithSubtypeToMediaType = Map.copyOf(typeMap);\r\n    }\r\n```", "bodyText": "This could be considered a nit and is my preference on style and immutability.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes);\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private final Map<String, T> formatToMediaType;\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType;\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes, Map.of());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    final int size = acceptedMediaTypes.length + additionalMediaTypes.size();\n          \n          \n            \n                    Map<String, T> formatMap = new HashMap<>(size);\n          \n          \n            \n                    Map<String, T> typeMap = new HashMap<>(size);\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeMap.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeMap.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    this.formatToMediaType = Map.copyOf(formatMap);\n          \n          \n            \n                    this.typeWithSubtypeToMediaType = Map.copyOf(typeMap);\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">This could be considered a nit and is my preference on style and immutability.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> formatToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> typeWithSubtypeToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> MediaTypeParser(<span class=\"pl-k\">T</span>[] acceptedMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">T</span> mediaType <span class=\"pl-k\">:</span> acceptedMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            typeWithSubtypeToMediaType<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>typeWithSubtype(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            formatToMediaType<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>format(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"60\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"62\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> MediaTypeParser(<span class=\"pl-k\">T</span>[] acceptedMediaTypes, <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> additionalMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"63\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span>(acceptedMediaTypes);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"64\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> entry <span class=\"pl-k\">:</span> additionalMediaTypes<span class=\"pl-k\">.</span>entrySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"65\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">String</span> typeWithSubtype <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getKey();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">T</span> mediaType <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getValue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"68\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            typeWithSubtypeToMediaType<span class=\"pl-k\">.</span>put(typeWithSubtype<span class=\"pl-k\">.</span>toLowerCase(<span class=\"pl-smi\">Locale</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ROOT</span>), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            formatToMediaType<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>format(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"71\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> formatToMediaType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> typeWithSubtypeToMediaType;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> MediaTypeParser(<span class=\"pl-k\">T</span>[] acceptedMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span>(acceptedMediaTypes, <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>of());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> MediaTypeParser(<span class=\"pl-k\">T</span>[] acceptedMediaTypes, <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> additionalMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"60\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> size <span class=\"pl-k\">=</span> acceptedMediaTypes<span class=\"pl-k\">.</span>length <span class=\"pl-k\">+</span> additionalMediaTypes<span class=\"pl-k\">.</span>size();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> formatMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>(size);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"62\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> typeMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>(size);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"63\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">T</span> mediaType <span class=\"pl-k\">:</span> acceptedMediaTypes) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"64\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            typeMap<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>typeWithSubtype(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"65\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            formatMap<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>format(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> entry <span class=\"pl-k\">:</span> additionalMediaTypes<span class=\"pl-k\">.</span>entrySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"68\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">String</span> typeWithSubtype <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getKey();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">T</span> mediaType <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getValue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"71\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            typeMap<span class=\"pl-k\">.</span>put(typeWithSubtype<span class=\"pl-k\">.</span>toLowerCase(<span class=\"pl-smi\">Locale</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ROOT</span>), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"72\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            formatMap<span class=\"pl-k\">.</span>put(mediaType<span class=\"pl-k\">.</span>format(), mediaType);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"73\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"74\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"75\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>formatToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>copyOf(formatMap);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"76\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>typeWithSubtypeToMediaType <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span>copyOf(typeMap);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"77\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jaymode", "createdAt": "2020-09-16T20:14:06Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }", "originalCommit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4598a0a9a1dbc301673e217849be11c7778cc539", "url": "https://github.com/elastic/elasticsearch/commit/4598a0a9a1dbc301673e217849be11c7778cc539", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>", "committedDate": "2020-09-17T12:58:23Z", "type": "commit"}]}