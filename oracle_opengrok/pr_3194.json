{"pr_number": 3194, "pr_title": "Feature/coverage", "pr_author": "idodeclare", "pr_createdAt": "2020-08-22T23:33:15Z", "pr_url": "https://github.com/oracle/opengrok/pull/3194", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487980137", "body": "```suggestion\r\n    @Test(expected = NoPathParameterException.class)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                @Test(expected = NoPathParameterException.class)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"37\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Test</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"37\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Test</span><span class=\"x x-first\">(</span><span class=\"pl-c1 x\">expected</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">NoPathParameterException</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class)</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "vladak", "createdAt": "2020-09-14T14:33:31Z", "path": "opengrok-web/src/test/java/org/opengrok/web/util/FileUtilTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.web.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import java.io.FileNotFoundException;\n+import java.util.UUID;\n+\n+/**\n+ * Represents a container for tests of {@link FileUtil}.\n+ */\n+public class FileUtilTest {\n+\n+    @Test", "originalCommit": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTM5NA==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487981394", "bodyText": "or given that we already use Junit 5 it should be possible to use assertThrows()", "author": "vladak", "createdAt": "2020-09-14T14:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4MzQ2Ng==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r491483466", "bodyText": "Done", "author": "idodeclare", "createdAt": "2020-09-19T19:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDExMw==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487984113", "body": "ditto - use JUnit mechanisms for asserting the exceptions ?", "bodyText": "ditto - use JUnit mechanisms for asserting the exceptions ?", "bodyHTML": "<p dir=\"auto\">ditto - use JUnit mechanisms for asserting the exceptions ?</p>", "author": "vladak", "createdAt": "2020-09-14T14:38:33Z", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;", "originalCommit": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTc5Ng==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r487985796", "body": "would be nice to see what happens if the parameters include path to non-existent file.", "bodyText": "would be nice to see what happens if the parameters include path to non-existent file.", "bodyHTML": "<p dir=\"auto\">would be nice to see what happens if the parameters include path to non-existent file.</p>", "author": "vladak", "createdAt": "2020-09-14T14:40:46Z", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());", "originalCommit": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4MzQ5OA==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r491483498", "bodyText": "Done", "author": "idodeclare", "createdAt": "2020-09-19T19:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjA0MQ==", "url": "https://github.com/oracle/opengrok/pull/3194#discussion_r488012041", "body": "why test 2 projects if they are both random ?", "bodyText": "why test 2 projects if they are both random ?", "bodyHTML": "<p dir=\"auto\">why test 2 projects if they are both random ?</p>", "author": "vladak", "createdAt": "2020-09-14T15:14:03Z", "path": "plugins/src/test/java/opengrok/auth/plugin/UserWhiteListPluginTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package opengrok.auth.plugin;\n+\n+import opengrok.auth.plugin.entity.User;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.Group;\n+import org.opengrok.indexer.configuration.Project;\n+import org.opengrok.indexer.util.RandomString;\n+import org.opengrok.indexer.web.DummyHttpServletRequest;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Represents a container for tests of {@link UserWhiteListPlugin}.\n+ */\n+public class UserWhiteListPluginTest {\n+\n+    private static final String OK_USER = \"user1321\";\n+    private static File tempWhitelist;\n+    private static HashMap<String, Object> validPluginParameters;\n+\n+    private UserWhiteListPlugin plugin;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        tempWhitelist = File.createTempFile(\"UserWhiteListPluginTest\", \"txt\");\n+        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(tempWhitelist), StandardCharsets.UTF_8))) {\n+            writer.write(OK_USER);\n+            // Don't bother with trailing LF.\n+        }\n+\n+        validPluginParameters = new HashMap<>();\n+        validPluginParameters.put(UserWhiteListPlugin.FILE_PARAM, tempWhitelist.getPath());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        if (tempWhitelist != null) {\n+            //noinspection ResultOfMethodCallIgnored\n+            tempWhitelist.delete();\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        plugin = new UserWhiteListPlugin();\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNullArgument() {\n+        NullPointerException caughtException = null;\n+        try {\n+            //noinspection ConstantConditions\n+            plugin.load(null);\n+        } catch (NullPointerException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught NullPointerException\", caughtException);\n+    }\n+\n+    @Test\n+    public void shouldThrowOnLoadIfNoFileSpecified() {\n+        IllegalArgumentException caughtException = null;\n+        try {\n+            plugin.load(new HashMap<>());\n+        } catch (IllegalArgumentException ex) {\n+            caughtException = ex;\n+        }\n+\n+        assertNotNull(\"caught IllegalArgumentException\", caughtException);\n+        assertTrue(\"caughtException should mention 'Missing parameter'\",\n+                caughtException.getMessage().contains(\"Missing parameter\"));\n+    }\n+\n+    @Test\n+    public void shouldUnload() {\n+        plugin.unload();\n+    }\n+\n+    @Test\n+    public void shouldAllowWhitelistedUserForAnyProject() {\n+        plugin.load(validPluginParameters);\n+\n+        DummyHttpServletRequest req = new DummyHttpServletRequest();\n+        req.setAttribute(UserPlugin.REQUEST_ATTR, new User(OK_USER));\n+\n+        Project randomProject = new Project(RandomString.generateUpper(10));\n+        boolean projectAllowed = plugin.isAllowed(req, randomProject);\n+        assertTrue(\"should allow OK_USER for random project 1\", projectAllowed);\n+\n+        randomProject = new Project(RandomString.generateUpper(10));", "originalCommit": "c43807263e4dedefe3c7eec37e4d5df5fe0a7796", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14a7711388e6865129f93e80258be8e01d12a599", "url": "https://github.com/oracle/opengrok/commit/14a7711388e6865129f93e80258be8e01d12a599", "message": "Add tests of FileUtil and NoPathParameterException\n\nAlso, remove unused method.", "committedDate": "2020-09-18T22:00:25Z", "type": "commit"}, {"oid": "df1c9e51fbe24af46ce5caaef9402ab65c08dd3d", "url": "https://github.com/oracle/opengrok/commit/df1c9e51fbe24af46ce5caaef9402ab65c08dd3d", "message": "Add tests of HCL xref and symbols", "committedDate": "2020-09-18T22:00:25Z", "type": "commit"}, {"oid": "f22c0acfee9cca757d8ee3306f52240dce897489", "url": "https://github.com/oracle/opengrok/commit/f22c0acfee9cca757d8ee3306f52240dce897489", "message": "Move class only used for testing", "committedDate": "2020-09-18T22:00:25Z", "type": "commit"}, {"oid": "34130fa010bdde632d637120db063eb2b6fe6f04", "url": "https://github.com/oracle/opengrok/commit/34130fa010bdde632d637120db063eb2b6fe6f04", "message": "Add tests of UserWhiteListPlugin", "committedDate": "2020-09-18T22:00:52Z", "type": "commit"}, {"oid": "e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "url": "https://github.com/oracle/opengrok/commit/e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "message": "Add tests of TruePlugin and FalsePlugin", "committedDate": "2020-09-18T22:00:53Z", "type": "commit"}, {"oid": "e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "url": "https://github.com/oracle/opengrok/commit/e87e70f6d1b31f83e6722fae1e2ce775a7f1c52a", "message": "Add tests of TruePlugin and FalsePlugin", "committedDate": "2020-09-18T22:00:53Z", "type": "forcePushed"}]}