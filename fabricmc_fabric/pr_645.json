{"pr_number": 645, "pr_title": "Screen API v1", "pr_author": "i509VCB", "pr_createdAt": "2020-05-29T07:09:55Z", "pr_url": "https://github.com/FabricMC/fabric/pull/645", "merge_commit": "8e23c1d877bafbf6c12607be5c8450b4824be329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDI5Mg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300292", "body": "scaledWidth and scaledHeight", "bodyText": "scaledWidth and scaledHeight", "bodyHTML": "<p dir=\"auto\">scaledWidth and scaledHeight</p>", "author": "shedaniel", "createdAt": "2020-05-29T07:21:15Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {\n+\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n+\t\tfor (ScreenInitializeCallback callback : callbacks) {\n+\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+\t\t}\n+\t});\n+\n+\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);", "originalCommit": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMTQyMw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432301423", "bodyText": "onInit preferably to match yarn", "author": "shedaniel", "createdAt": "2020-05-29T07:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\nsimilarity index 67%\nrename from fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java\nrename to fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\nindex b8fa138b..35e56598 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\n", "chunk": "@@ -25,12 +25,12 @@ import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n @Environment(EnvType.CLIENT)\n-public interface ScreenInitializeCallback {\n-\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n-\t\tfor (ScreenInitializeCallback callback : callbacks) {\n-\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+public interface ScreenInitCallback {\n+\tEvent<ScreenInitCallback> EVENT = EventFactory.createArrayBacked(ScreenInitCallback.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (ScreenInitCallback callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);\n+\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432300878", "body": "ScreenInitializationCallback or ScreenInitCallback", "bodyText": "ScreenInitializationCallback or ScreenInitCallback", "bodyHTML": "<p dir=\"auto\">ScreenInitializationCallback or ScreenInitCallback</p>", "author": "shedaniel", "createdAt": "2020-05-29T07:22:30Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public interface ScreenInitializeCallback {", "originalCommit": "937ebb6424ea7fa4c1535fd109dee35981a3bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MzU4NA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432353584", "bodyText": "I'm in favour of ScreenInitCallback. It's shorter, and helps mitigate the Murikanization of \"initialise\"", "author": "Sollace", "createdAt": "2020-05-29T09:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTMzNg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r432989336", "bodyText": "went for init", "author": "i509VCB", "createdAt": "2020-05-31T22:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMDg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\nsimilarity index 67%\nrename from fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java\nrename to fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\nindex b8fa138b..35e56598 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitializeCallback.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenInitCallback.java\n", "chunk": "@@ -25,12 +25,12 @@ import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n @Environment(EnvType.CLIENT)\n-public interface ScreenInitializeCallback {\n-\tEvent<ScreenInitializeCallback> EVENT = EventFactory.createArrayBacked(ScreenInitializeCallback.class, callbacks -> (screen, context, client, windowWidth, windowHeight) -> {\n-\t\tfor (ScreenInitializeCallback callback : callbacks) {\n-\t\t\tcallback.onInitialize(screen, context, client, windowWidth, windowHeight);\n+public interface ScreenInitCallback {\n+\tEvent<ScreenInitCallback> EVENT = EventFactory.createArrayBacked(ScreenInitCallback.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (ScreenInitCallback callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\tvoid onInitialize(Screen screen, ScreenContext context, MinecraftClient client, int windowWidth, int windowHeight);\n+\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODIxNw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447868217", "body": "```suggestion\r\n\t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));\n          \n          \n            \n            \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>info(<span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">format(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Initializing <span class=\"x x-first x-last\">%s</span><span class=\"pl-pds\">\"</span></span>, screen<span class=\"pl-k\">.</span>getClass()<span class=\"pl-k\">.</span>getName(<span class=\"x x-first x-last\">)</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Initializing <span class=\"x x-first x-last\">{}</span><span class=\"pl-pds\">\"</span></span>, screen<span class=\"pl-k\">.</span>getClass()<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Juuxel", "createdAt": "2020-06-30T17:44:21Z", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.TitleScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenInitCallback;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n+\n+public class ScreenTests implements ClientModInitializer {\n+\tpublic static final Random RANDOM = new Random();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tLOGGER.info(\"Started Screen Testmod\");\n+\t\tScreenInitCallback.EVENT.register(this::onInit);\n+\t\tScreenRenderCallback.EVENT.register(this::onRender);\n+\t}\n+\n+\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n+\t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));", "originalCommit": "80969ca2a84e30d6f8fe9afba8730f78300c36a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex 643322730..4a1c4a016 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -46,7 +46,7 @@ public class ScreenTests implements ClientModInitializer {\n \t}\n \n \tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n-\t\tLOGGER.info(String.format(\"Initializing %s\", screen.getClass().getName()));\n+\t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n \t\t\t// Shrink the realms button, should be the third button on the list\n", "next_change": {"commit": "4958018e67c6013226e31669684bb8a1eec4ba03", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex 4a1c4a01..82fa9776 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -41,8 +41,8 @@ public class ScreenTests implements ClientModInitializer {\n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenInitCallback.EVENT.register(this::onInit);\n-\t\tScreenRenderCallback.EVENT.register(this::onRender);\n+\t\tScreenEvents.INIT.register(this::onInit);\n+\t\tScreenEvents.AFTER_RENDER.register(this::onRender);\n \t}\n \n \tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n", "next_change": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex 82fa97767..eefb29a12 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -31,32 +31,37 @@ import net.minecraft.client.gui.widget.AbstractButtonWidget;\n import net.minecraft.client.util.math.MatrixStack;\n \n import net.fabricmc.api.ClientModInitializer;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n public class ScreenTests implements ClientModInitializer {\n \tpublic static final Random RANDOM = new Random();\n \tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n+\tprivate static boolean PRINT_RESIZE_SCREEN_EVENTS = System.getProperty(\"fabric-screen-api-testmod.printResizeScreenEvents\") != null;\n \n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenEvents.INIT.register(this::onInit);\n-\t\tScreenEvents.AFTER_RENDER.register(this::onRender);\n+\t\tScreenEvents.BEFORE_INIT.register(this::beforeInitScreen);\n+\t\tScreenEvents.AFTER_INIT.register(this::afterInitScreen);\n \t}\n \n-\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n+\tprivate void beforeInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n+\t\t// TODO: Write tests listening to addition of child elements\n+\t}\n+\n+\tprivate void afterInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n \t\t\t// Shrink the realms button, should be the third button on the list\n-\t\t\tfinal AbstractButtonWidget optionsButton = context.getButtons().get(2);\n+\t\t\tfinal AbstractButtonWidget optionsButton = info.getButtons().get(2);\n \t\t\toptionsButton.setWidth(98);\n \n \t\t\t// Add a new button\n-\t\t\tcontext.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n+\t\t\tinfo.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n \t\t\t// And another button\n-\t\t\tcontext.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n+\t\t\tinfo.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n \n \t\t\t// And some automatic validation, make sure the buttons we added are on the list of child elements\n \t\t\tscreen.children().stream()\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex eefb29a12..eef62a4a1 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -28,42 +27,45 @@ import net.minecraft.client.gui.hud.InGameHud;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.screen.TitleScreen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n-import net.minecraft.client.util.math.MatrixStack;\n \n import net.fabricmc.api.ClientModInitializer;\n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenKeyboardEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.Screens;\n \n-public class ScreenTests implements ClientModInitializer {\n-\tpublic static final Random RANDOM = new Random();\n+@Environment(EnvType.CLIENT)\n+public final class ScreenTests implements ClientModInitializer {\n \tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n-\tprivate static boolean PRINT_RESIZE_SCREEN_EVENTS = System.getProperty(\"fabric-screen-api-testmod.printResizeScreenEvents\") != null;\n \n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenEvents.BEFORE_INIT.register(this::beforeInitScreen);\n-\t\tScreenEvents.AFTER_INIT.register(this::afterInitScreen);\n-\t}\n+\t\tScreenEvents.BEFORE_INIT.register((client, screen, width, height) -> {\n+\t\t\t// TODO: Write tests listening to addition of child elements\n+\t\t});\n \n-\tprivate void beforeInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n-\t\t// TODO: Write tests listening to addition of child elements\n+\t\tScreenEvents.AFTER_INIT.register(this::afterInitScreen);\n \t}\n \n-\tprivate void afterInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n+\tprivate void afterInitScreen(MinecraftClient client, Screen screen, int windowWidth, int windowHeight) {\n \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n+\t\t\tfinal List<AbstractButtonWidget> buttons = Screens.getButtons(screen);\n+\n \t\t\t// Shrink the realms button, should be the third button on the list\n-\t\t\tfinal AbstractButtonWidget optionsButton = info.getButtons().get(2);\n+\t\t\tfinal AbstractButtonWidget optionsButton = buttons.get(2);\n \t\t\toptionsButton.setWidth(98);\n \n \t\t\t// Add a new button\n-\t\t\tinfo.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n+\t\t\tbuttons.add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n \t\t\t// And another button\n-\t\t\tinfo.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n+\t\t\tbuttons.add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n \n-\t\t\t// And some automatic validation, make sure the buttons we added are on the list of child elements\n+\t\t\t// Testing:\n+\t\t\t// Some automatic validation that the screen list works, make sure the buttons we added are on the list of child elements\n \t\t\tscreen.children().stream()\n \t\t\t\t\t.filter(element -> element instanceof SoundButton)\n \t\t\t\t\t.findAny()\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex eef62a4a1..4a1c4a016 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -29,43 +30,35 @@ import net.minecraft.client.gui.screen.TitleScreen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n import net.fabricmc.api.ClientModInitializer;\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenKeyboardEvents;\n-import net.fabricmc.fabric.api.client.screen.v1.Screens;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenInitCallback;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n \n-@Environment(EnvType.CLIENT)\n-public final class ScreenTests implements ClientModInitializer {\n+public class ScreenTests implements ClientModInitializer {\n+\tpublic static final Random RANDOM = new Random();\n \tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n \n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenEvents.BEFORE_INIT.register((client, screen, width, height) -> {\n-\t\t\t// TODO: Write tests listening to addition of child elements\n-\t\t});\n-\n-\t\tScreenEvents.AFTER_INIT.register(this::afterInitScreen);\n+\t\tScreenInitCallback.EVENT.register(this::onInit);\n+\t\tScreenRenderCallback.EVENT.register(this::onRender);\n \t}\n \n-\tprivate void afterInitScreen(MinecraftClient client, Screen screen, int windowWidth, int windowHeight) {\n+\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n-\t\t\tfinal List<AbstractButtonWidget> buttons = Screens.getButtons(screen);\n-\n \t\t\t// Shrink the realms button, should be the third button on the list\n-\t\t\tfinal AbstractButtonWidget optionsButton = buttons.get(2);\n+\t\t\tfinal AbstractButtonWidget optionsButton = context.getButtons().get(2);\n \t\t\toptionsButton.setWidth(98);\n \n \t\t\t// Add a new button\n-\t\t\tbuttons.add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n+\t\t\tcontext.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n \t\t\t// And another button\n-\t\t\tbuttons.add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n+\t\t\tcontext.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n \n-\t\t\t// Testing:\n-\t\t\t// Some automatic validation that the screen list works, make sure the buttons we added are on the list of child elements\n+\t\t\t// And some automatic validation, make sure the buttons we added are on the list of child elements\n \t\t\tscreen.children().stream()\n \t\t\t\t\t.filter(element -> element instanceof SoundButton)\n \t\t\t\t\t.findAny()\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex 4a1c4a016..d6b625192 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -41,22 +41,21 @@ public class ScreenTests implements ClientModInitializer {\n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenInitCallback.EVENT.register(this::onInit);\n-\t\tScreenRenderCallback.EVENT.register(this::onRender);\n+\t\tScreenEvents.AFTER_INIT.register(this::onInitScreen);\n \t}\n \n-\tprivate void onInit(MinecraftClient client, Screen screen, ScreenContext context, int windowWidth, int windowHeight) {\n+\tprivate void onInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n \t\t\t// Shrink the realms button, should be the third button on the list\n-\t\t\tfinal AbstractButtonWidget optionsButton = context.getButtons().get(2);\n+\t\t\tfinal AbstractButtonWidget optionsButton = info.getButtons().get(2);\n \t\t\toptionsButton.setWidth(98);\n \n \t\t\t// Add a new button\n-\t\t\tcontext.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n+\t\t\tinfo.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n \t\t\t// And another button\n-\t\t\tcontext.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n+\t\t\tinfo.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n \n \t\t\t// And some automatic validation, make sure the buttons we added are on the list of child elements\n \t\t\tscreen.children().stream()\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\nindex d6b625192..48f248b31 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/ScreenTests.java\n", "chunk": "@@ -28,36 +27,45 @@ import net.minecraft.client.gui.hud.InGameHud;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.screen.TitleScreen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n-import net.minecraft.client.util.math.MatrixStack;\n \n import net.fabricmc.api.ClientModInitializer;\n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenKeyboardEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.Screens;\n \n-public class ScreenTests implements ClientModInitializer {\n-\tpublic static final Random RANDOM = new Random();\n+@Environment(EnvType.CLIENT)\n+public final class ScreenTests implements ClientModInitializer {\n \tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricScreenApiTests\");\n \n \t@Override\n \tpublic void onInitializeClient() {\n \t\tLOGGER.info(\"Started Screen Testmod\");\n-\t\tScreenEvents.AFTER_INIT.register(this::onInitScreen);\n+\t\tScreenEvents.BEFORE_INIT.register((client, screen, width, height) -> {\n+\t\t\t// TODO: Write tests listening to addition of child elements\n+\t\t});\n+\n+\t\tScreenEvents.AFTER_INIT.register(this::afterInitScreen);\n \t}\n \n-\tprivate void onInitScreen(MinecraftClient client, Screen screen, FabricScreen info, int windowWidth, int windowHeight) {\n+\tprivate void afterInitScreen(MinecraftClient client, Screen screen, int windowWidth, int windowHeight) {\n \t\tLOGGER.info(\"Initializing {}\", screen.getClass().getName());\n \n \t\tif (screen instanceof TitleScreen) {\n+\t\t\tfinal List<AbstractButtonWidget> buttons = Screens.getButtons(screen);\n+\n \t\t\t// Shrink the realms button, should be the third button on the list\n-\t\t\tfinal AbstractButtonWidget optionsButton = info.getButtons().get(2);\n+\t\t\tfinal AbstractButtonWidget optionsButton = buttons.get(2);\n \t\t\toptionsButton.setWidth(98);\n \n \t\t\t// Add a new button\n-\t\t\tinfo.getButtons().add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n+\t\t\tbuttons.add(new SoundButton((screen.width / 2) + 2, ((screen.height / 4) + 96), 72, 20));\n \t\t\t// And another button\n-\t\t\tinfo.getButtons().add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n+\t\t\tbuttons.add(new StopSoundButton(screen, (screen.width / 2) + 80, ((screen.height / 4) + 95), 20, 20));\n \n-\t\t\t// And some automatic validation, make sure the buttons we added are on the list of child elements\n+\t\t\t// Testing:\n+\t\t\t// Some automatic validation that the screen list works, make sure the buttons we added are on the list of child elements\n \t\t\tscreen.children().stream()\n \t\t\t\t\t.filter(element -> element instanceof SoundButton)\n \t\t\t\t\t.findAny()\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2OTUzMw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r447869533", "body": "Should make this method return an ioob exception than a message.", "bodyText": "Should make this method return an ioob exception than a message.", "bodyHTML": "<p dir=\"auto\">Should make this method return an ioob exception than a message.</p>", "author": "liach", "createdAt": "2020-06-30T17:46:39Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);\n+\n+\t\tif (index > -1) {\n+\t\t\tthis.children.remove(index);\n+\t\t}\n+\n+\t\treturn removedButton;\n+\t}\n+\n+\t@Override\n+\tpublic int size() {\n+\t\treturn this.buttons.size();\n+\t}\n+\n+\tprivate void rangeCheck(int index) {\n+\t\tif (index >= this.size()) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate void rangeCheckForAdd(int index) {\n+\t\tif (index > this.size() || index < 0) {\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t}\n+\t}\n+\n+\tprivate String outOfBoundsMsg(int index) {", "originalCommit": "80969ca2a84e30d6f8fe9afba8730f78300c36a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4958018e67c6013226e31669684bb8a1eec4ba03", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2784f5919..2e8af5320 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -80,18 +80,18 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \n \tprivate void rangeCheck(int index) {\n \t\tif (index >= this.size()) {\n-\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t\tthrow createOutOfBoundsException(index);\n \t\t}\n \t}\n \n \tprivate void rangeCheckForAdd(int index) {\n \t\tif (index > this.size() || index < 0) {\n-\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t\tthrow createOutOfBoundsException(index);\n \t\t}\n \t}\n \n-\tprivate String outOfBoundsMsg(int index) {\n-\t\treturn \"Index: \" + index + \", Size: \"+ size();\n+\tprivate IndexOutOfBoundsException createOutOfBoundsException(int index) {\n+\t\treturn new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ this.size());\n \t}\n }\n \n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2e8af5320..2784f5919 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -80,18 +80,18 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \n \tprivate void rangeCheck(int index) {\n \t\tif (index >= this.size()) {\n-\t\t\tthrow createOutOfBoundsException(index);\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n \t\t}\n \t}\n \n \tprivate void rangeCheckForAdd(int index) {\n \t\tif (index > this.size() || index < 0) {\n-\t\t\tthrow createOutOfBoundsException(index);\n+\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n \t\t}\n \t}\n \n-\tprivate IndexOutOfBoundsException createOutOfBoundsException(int index) {\n-\t\treturn new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ this.size());\n+\tprivate String outOfBoundsMsg(int index) {\n+\t\treturn \"Index: \" + index + \", Size: \"+ size();\n \t}\n }\n \n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2784f5919..2e8af5320 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -80,18 +80,18 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \n \tprivate void rangeCheck(int index) {\n \t\tif (index >= this.size()) {\n-\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t\tthrow createOutOfBoundsException(index);\n \t\t}\n \t}\n \n \tprivate void rangeCheckForAdd(int index) {\n \t\tif (index > this.size() || index < 0) {\n-\t\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n+\t\t\tthrow createOutOfBoundsException(index);\n \t\t}\n \t}\n \n-\tprivate String outOfBoundsMsg(int index) {\n-\t\treturn \"Index: \" + index + \", Size: \"+ size();\n+\tprivate IndexOutOfBoundsException createOutOfBoundsException(int index) {\n+\t\treturn new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ this.size());\n \t}\n }\n \n", "next_change": null}]}}]}}]}}, {"oid": "2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "url": "https://github.com/FabricMC/fabric/commit/2632d263dbcffe5e92a80dcc7078e4dc7e1be0ca", "message": "Implement screen api", "committedDate": "2020-07-01T21:45:07Z", "type": "forcePushed"}, {"oid": "e9f1219b54753bf6682d2adccaee575e336798e2", "url": "https://github.com/FabricMC/fabric/commit/e9f1219b54753bf6682d2adccaee575e336798e2", "message": "Implement screen api", "committedDate": "2020-07-01T21:47:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448670388", "body": "more like `FabricScreen`?", "bodyText": "more like FabricScreen?", "bodyHTML": "<p dir=\"auto\">more like <code>FabricScreen</code>?</p>", "author": "liach", "createdAt": "2020-07-01T23:40:13Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface ScreenContext {", "originalCommit": "a50d955f3442bc6247104fc437cd7e1ef1537285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMzk5OQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448723999", "bodyText": "Somewhat against FabricScreen. ScreenAccess is pretty bad for a name imo", "author": "i509VCB", "createdAt": "2020-07-02T03:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTc1Ng==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448759756", "bodyText": "\ud83d\udc4d for screen access over screen context", "author": "liach", "createdAt": "2020-07-02T05:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\nsimilarity index 50%\nrename from fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java\nrename to fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\nindex e3bf8291d..41bb85706 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenContext.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\n", "chunk": "@@ -25,20 +25,21 @@ import net.minecraft.client.render.item.ItemRenderer;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n \n /**\n  * Provides access to additional context a screen can hold.\n  */\n @Environment(EnvType.CLIENT)\n-public interface ScreenContext {\n+public interface FabricScreen {\n \t/**\n-\t * Gets the screen's context.\n+\t * Gets the screen's additional info.\n \t *\n \t * @param screen the screen\n \t * @return the screen's context\n \t */\n-\tstatic ScreenContext from(Screen screen) {\n-\t\treturn (ScreenContext) screen;\n+\tstatic FabricScreen getInfo(Screen screen) {\n+\t\treturn (FabricScreen) screen;\n \t}\n \n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671059", "body": "need to change this to do actual captures.\r\nalso can you guarantee all screen implementations that override `render` calls `super.render`? otherwise this hook will just be skipped.\r\nSame below.", "bodyText": "need to change this to do actual captures.\nalso can you guarantee all screen implementations that override render calls super.render? otherwise this hook will just be skipped.\nSame below.", "bodyHTML": "<p dir=\"auto\">need to change this to do actual captures.<br>\nalso can you guarantee all screen implementations that override <code>render</code> calls <code>super.render</code>? otherwise this hook will just be skipped.<br>\nSame below.</p>", "author": "liach", "createdAt": "2020-07-01T23:42:37Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class GameRendererMixin {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)", "originalCommit": "a50d955f3442bc6247104fc437cd7e1ef1537285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMzU5Mg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448723592", "bodyText": "This is the invocation of the actual render method.\nSame with tick methods except for the one odd case with loading screen.", "author": "i509VCB", "createdAt": "2020-07-02T03:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1OTY4Nw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448759687", "bodyText": "Then it should be safe.", "author": "liach", "createdAt": "2020-07-02T05:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b6fed301a..a5701ce9d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -28,8 +29,7 @@ import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n \n @Mixin(GameRenderer.class)\n public abstract class GameRendererMixin {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..334de34a0 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -29,7 +29,7 @@ import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n \n @Mixin(GameRenderer.class)\n public abstract class GameRendererMixin {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 334de34a0..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate ScreenExtensions renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (ScreenExtensions) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..cff18ca24 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -19,44 +19,29 @@ package net.fabricmc.fabric.mixin.screen;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n-import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n \n-@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-abstract class GameRendererMixin {\n+public abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Unique\n-\tprivate Screen renderingScreen;\n-\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n-\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n-\t}\n-\n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n-\t\t// Finally set the currently rendering screen to null\n-\t\tthis.renderingScreen = null;\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n+\t\t// Copied from game renderer so we don't need a stupid amount of locals\n+\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n+\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n+\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex cff18ca24..7cf86d986 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -36,12 +38,8 @@ public abstract class GameRendererMixin {\n \tprivate MinecraftClient client;\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n-\t\t// Copied from game renderer so we don't need a stupid amount of locals\n-\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n-\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n-\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 7cf86d986..b6fed301a 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,9 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t}\n+\n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b6fed301a..6e94d79b8 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 6e94d79b8..a5701ce9d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,22 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Unique\n+\tprivate FabricScreen renderingScreen;\n+\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n+\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n+\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n+\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\t// Finally set the currently rendering screen to null\n+\t\tthis.renderingScreen = null;\n \t}\n }\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate FabricScreen renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..b7ea2b6d3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b7ea2b6d3..072bec19d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..334de34a0 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -38,13 +38,13 @@ public abstract class GameRendererMixin {\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate FabricScreen renderingScreen;\n+\tprivate ScreenExtensions renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n+\t\tthis.renderingScreen = (ScreenExtensions) this.client.currentScreen;\n \t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n \t}\n \n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 334de34a0..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate ScreenExtensions renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (ScreenExtensions) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..cff18ca24 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -19,44 +19,29 @@ package net.fabricmc.fabric.mixin.screen;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n-import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n \n-@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-abstract class GameRendererMixin {\n+public abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Unique\n-\tprivate Screen renderingScreen;\n-\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n-\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n-\t}\n-\n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n-\t\t// Finally set the currently rendering screen to null\n-\t\tthis.renderingScreen = null;\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n+\t\t// Copied from game renderer so we don't need a stupid amount of locals\n+\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n+\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n+\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex cff18ca24..7cf86d986 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -36,12 +38,8 @@ public abstract class GameRendererMixin {\n \tprivate MinecraftClient client;\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n-\t\t// Copied from game renderer so we don't need a stupid amount of locals\n-\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n-\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n-\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 7cf86d986..b6fed301a 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,9 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t}\n+\n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b6fed301a..6e94d79b8 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 6e94d79b8..a5701ce9d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,22 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Unique\n+\tprivate FabricScreen renderingScreen;\n+\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n+\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n+\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n+\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\t// Finally set the currently rendering screen to null\n+\t\tthis.renderingScreen = null;\n \t}\n }\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate FabricScreen renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..b7ea2b6d3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b7ea2b6d3..072bec19d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b6fed301a..a5701ce9d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,22 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\t@Unique\n+\tprivate FabricScreen renderingScreen;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n+\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n+\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n+\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\t// Finally set the currently rendering screen to null\n+\t\tthis.renderingScreen = null;\n \t}\n }\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate FabricScreen renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..cff18ca24 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -19,44 +19,29 @@ package net.fabricmc.fabric.mixin.screen;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n-import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenRenderCallback;\n \n-@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-abstract class GameRendererMixin {\n+public abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Unique\n-\tprivate Screen renderingScreen;\n-\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n-\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n-\t}\n-\n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n-\t\t// Finally set the currently rendering screen to null\n-\t\tthis.renderingScreen = null;\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n+\t\t// Copied from game renderer so we don't need a stupid amount of locals\n+\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n+\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n+\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex cff18ca24..7cf86d986 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -36,12 +38,8 @@ public abstract class GameRendererMixin {\n \tprivate MinecraftClient client;\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\", shift = At.Shift.AFTER))\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci) {\n-\t\t// Copied from game renderer so we don't need a stupid amount of locals\n-\t\tfinal int mouseX = (int) (this.client.mouse.getX() * (double) this.client.getWindow().getScaledWidth() / (double) this.client.getWindow().getWidth());\n-\t\tfinal int mouseY = (int) (this.client.mouse.getY() * (double) this.client.getWindow().getScaledHeight() / (double) this.client.getWindow().getHeight());\n-\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n \t}\n }\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 7cf86d986..b6fed301a 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,9 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t}\n+\n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n-\tprivate void onRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenRenderCallback.EVENT.invoker().onRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, this.client.getLastFrameDuration());\n+\tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b6fed301a..6e94d79b8 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,14 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n-\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.PRINT)\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (ScreenContext) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n \t}\n }\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex 6e94d79b8..a5701ce9d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -37,14 +37,22 @@ public abstract class GameRendererMixin {\n \t@Final\n \tprivate MinecraftClient client;\n \n+\t@Unique\n+\tprivate FabricScreen renderingScreen;\n+\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.BEFORE_RENDER.invoker().beforeRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n+\t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n+\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n+\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.AFTER_RENDER.invoker().afterRender(this.client, matrices, this.client.currentScreen, (FabricScreen) this.client.currentScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\t// Finally set the currently rendering screen to null\n+\t\tthis.renderingScreen = null;\n \t}\n }\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex a5701ce9d..ee8b10712 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -26,32 +26,36 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.render.GameRenderer;\n import net.minecraft.client.util.math.MatrixStack;\n \n-import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n+@Environment(EnvType.CLIENT)\n @Mixin(GameRenderer.class)\n-public abstract class GameRendererMixin {\n+abstract class GameRendererMixin {\n \t@Shadow\n \t@Final\n \tprivate MinecraftClient client;\n \n \t@Unique\n-\tprivate FabricScreen renderingScreen;\n+\tprivate Screen renderingScreen;\n \n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onBeforeRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n-\t\tthis.renderingScreen = (FabricScreen) this.client.currentScreen;\n-\t\tthis.renderingScreen.getBeforeRenderEvent().invoker().beforeRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tthis.renderingScreen = this.client.currentScreen;\n+\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tthis.renderingScreen.getAfterRenderEvent().invoker().afterRender(this.client, matrices, this.renderingScreen.getScreen(), this.renderingScreen, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex ee8b10712..b7ea2b6d3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.getBeforeRenderEvent(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.getAfterRenderEvent(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\nindex b7ea2b6d3..072bec19d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/GameRendererMixin.java\n", "chunk": "@@ -49,13 +49,13 @@ abstract class GameRendererMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before render event.\n \t\t// If someone changes the screen, the after render event will likely have class cast exceptions or an NPE.\n \t\tthis.renderingScreen = this.client.currentScreen;\n-\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.beforeRender(this.renderingScreen).invoker().beforeRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t}\n \n \t// This injection should end up in the try block so exceptions are caught\n \t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(Lnet/minecraft/client/util/math/MatrixStack;IIF)V\", shift = At.Shift.AFTER), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void onAfterRenderScreen(float tickDelta, long startTime, boolean tick, CallbackInfo ci, int mouseX, int mouseY, MatrixStack matrices) {\n-\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(matrices, mouseX, mouseY, tickDelta);\n+\t\tScreenEvents.afterRender(this.renderingScreen).invoker().afterRender(this.renderingScreen, matrices, mouseX, mouseY, tickDelta);\n \t\t// Finally set the currently rendering screen to null\n \t\tthis.renderingScreen = null;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448671353", "body": "should fail hard. see no point of generating an exception stub.", "bodyText": "should fail hard. see no point of generating an exception stub.", "bodyHTML": "<p dir=\"auto\">should fail hard. see no point of generating an exception stub.</p>", "author": "liach", "createdAt": "2020-07-01T23:43:34Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screen;\n+\n+import java.util.function.Function;\n+\n+import com.mojang.datafixers.util.Function4;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Coerce;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.resource.DataPackSettings;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.world.SaveProperties;\n+import net.minecraft.world.level.storage.LevelStorage;\n+\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+\n+@Mixin(MinecraftClient.class)\n+public abstract class MinecraftClientMixin {\n+\t@Shadow\n+\tpublic Screen currentScreen;\n+\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)", "originalCommit": "a50d955f3442bc6247104fc437cd7e1ef1537285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MzIzNA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448673234", "bodyText": "It will hard fail, this just guarantees this is part of the screen crash log", "author": "i509VCB", "createdAt": "2020-07-01T23:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDgyNg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r448674826", "bodyText": "Not until now do I realize how trashy mixin is", "author": "liach", "createdAt": "2020-07-01T23:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 5e676185f..7b5e0ffa5 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -21,51 +21,60 @@ import java.util.function.Function;\n import com.mojang.datafixers.util.Function4;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Coerce;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.resource.DataPackSettings;\n import net.minecraft.resource.ResourceManager;\n-import net.minecraft.util.registry.RegistryTracker;\n+import net.minecraft.util.registry.DynamicRegistryManager;\n import net.minecraft.world.SaveProperties;\n import net.minecraft.world.level.storage.LevelStorage;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n \n @Mixin(MinecraftClient.class)\n public abstract class MinecraftClientMixin {\n \t@Shadow\n \tpublic Screen currentScreen;\n \n-\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\t@Unique\n+\tprivate FabricScreen tickingScreen;\n \n-\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\t// These two injections should be caught by \"Screen#wrapScreenError\" if anything fails in an event and then rethrown in the crash report\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"))\n \tprivate void beforeScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n+\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n+\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n \t}\n \n-\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"))\n \tprivate void afterScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// Finally set the currently ticking screen to null\n+\t\tthis.tickingScreen = null;\n \t}\n \n-\t// This is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n-\n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n-\tprivate void beforeLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n+\t// We Coerce the package-private inner class representing the world load action so we don't need an access widener.\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n+\tprivate void beforeLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n+\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n+\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n \t}\n \n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void afterLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n+\tprivate void afterLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// Finally set the currently ticking screen to null\n+\t\tthis.tickingScreen = null;\n \t}\n }\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 7b5e0ffa5..c441ff31f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -64,16 +68,16 @@ public abstract class MinecraftClientMixin {\n \t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n \t// We Coerce the package-private inner class representing the world load action so we don't need an access widener.\n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n-\tprivate void beforeLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\tprivate void beforeLoadingScreenTick(CallbackInfo ci) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n-\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n-\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n-\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or throw a NPE.\n+\t\tthis.tickingScreen = this.currentScreen;\n+\t\tScreenEvents.getBeforeTickEvent(this.tickingScreen).invoker().beforeTick();\n \t}\n \n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void afterLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\tprivate void afterLoadingScreenTick(CallbackInfo ci) {\n+\t\tScreenEvents.getAfterTickEvent(this.tickingScreen).invoker().afterTick();\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex c441ff31f..2e92dc2d2 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -1,84 +1,34 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package net.fabricmc.fabric.mixin.screen;\n \n-import org.jetbrains.annotations.Nullable;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n \n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.world.level.LevelInfo;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenTickCallback;\n \n @Mixin(MinecraftClient.class)\n-abstract class MinecraftClientMixin {\n+public abstract class MinecraftClientMixin {\n \t@Shadow\n \tpublic Screen currentScreen;\n \n-\t@Unique\n-\tprivate Screen tickingScreen;\n-\n-\t@Inject(method = \"openScreen\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;removed()V\", shift = At.Shift.AFTER))\n-\tprivate void onScreenRemove(@Nullable Screen screen, CallbackInfo ci) {\n-\t\tScreenEvents.getRemoveEvent(this.currentScreen).invoker().onRemove();\n-\t}\n-\n-\t@Inject(method = \"stop\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;removed()V\", shift = At.Shift.AFTER))\n-\tprivate void onScreenRemoveBecauseStopping(CallbackInfo ci) {\n-\t\tScreenEvents.getRemoveEvent(this.currentScreen).invoker().onRemove();\n-\t}\n-\n-\t// Synthetic method in `tick`\n-\t// These two injections should be caught by \"Screen#wrapScreenError\" if anything fails in an event and then rethrown in the crash report\n-\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"))\n-\tprivate void beforeScreenTick(CallbackInfo ci) {\n-\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n-\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n-\t\tthis.tickingScreen = this.currentScreen;\n-\t\tScreenEvents.getBeforeTickEvent(this.tickingScreen).invoker().beforeTick();\n-\t}\n-\n-\t// Synthetic method in `tick`\n-\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"))\n-\tprivate void afterScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.getAfterTickEvent(this.tickingScreen).invoker().afterTick();\n-\t\t// Finally set the currently ticking screen to null\n-\t\tthis.tickingScreen = null;\n-\t}\n-\n-\t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n-\t// We Coerce the package-private inner class representing the world load action so we don't need an access widener.\n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n-\tprivate void beforeLoadingScreenTick(CallbackInfo ci) {\n-\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n-\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or throw a NPE.\n-\t\tthis.tickingScreen = this.currentScreen;\n-\t\tScreenEvents.getBeforeTickEvent(this.tickingScreen).invoker().beforeTick();\n+\t// Should be caught by \"Screen#wrapScreenError\" if anything fails\n+\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\tprivate void onTickScreen(CallbackInfo ci, Screen screen) {\n+\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, screen, (ScreenContext) screen);\n \t}\n \n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void afterLoadingScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.getAfterTickEvent(this.tickingScreen).invoker().afterTick();\n-\t\t// Finally set the currently ticking screen to null\n-\t\tthis.tickingScreen = null;\n+\t// This is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n+\t@Inject(method = \"startIntegratedServer\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n+\tprivate void onTickLoadingScreen(String name, String displayName, LevelInfo levelInfo, CallbackInfo ci) {\n+\t\tfinal Screen currentScreen = this.currentScreen;\n+\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n \t}\n }\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 2e92dc2d2..a6c824011 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -21,13 +30,13 @@ public abstract class MinecraftClientMixin {\n \n \t// Should be caught by \"Screen#wrapScreenError\" if anything fails\n \t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onTickScreen(CallbackInfo ci, Screen screen) {\n-\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, screen, (ScreenContext) screen);\n+\tprivate void onTickScreen(CallbackInfo ci) {\n+\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n \t}\n \n \t// This is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n-\t@Inject(method = \"startIntegratedServer\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void onTickLoadingScreen(String name, String displayName, LevelInfo levelInfo, CallbackInfo ci) {\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n+\tprivate void onTickLoadingScreen(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n \t\tfinal Screen currentScreen = this.currentScreen;\n \t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n \t}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex a6c824011..5e676185f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -17,27 +33,39 @@ import net.minecraft.resource.DataPackSettings;\n import net.minecraft.resource.ResourceManager;\n import net.minecraft.util.registry.RegistryTracker;\n import net.minecraft.world.SaveProperties;\n-import net.minecraft.world.level.LevelInfo;\n import net.minecraft.world.level.storage.LevelStorage;\n \n import net.fabricmc.fabric.api.client.screen.v1.ScreenContext;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenTickCallback;\n+import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n @Mixin(MinecraftClient.class)\n public abstract class MinecraftClientMixin {\n \t@Shadow\n \tpublic Screen currentScreen;\n \n-\t// Should be caught by \"Screen#wrapScreenError\" if anything fails\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\tprivate void beforeScreenTick(CallbackInfo ci) {\n+\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\t}\n+\n \t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n-\tprivate void onTickScreen(CallbackInfo ci) {\n-\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\tprivate void afterScreenTick(CallbackInfo ci) {\n+\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n \t}\n \n \t// This is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n+\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n+\tprivate void beforeLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\t\tfinal Screen currentScreen = this.currentScreen;\n+\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t}\n+\n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void onTickLoadingScreen(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\tprivate void afterLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n \t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenTickCallback.EVENT.invoker().onTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n \t}\n }\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 5e676185f..41f7516b3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -43,29 +43,30 @@ public abstract class MinecraftClientMixin {\n \t@Shadow\n \tpublic Screen currentScreen;\n \n-\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails\n+\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails and then rethrown in the crash report\n \n \t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void beforeScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, this.currentScreen, (FabricScreen) this.currentScreen);\n \t}\n \n \t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n \tprivate void afterScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, this.currentScreen, (ScreenContext) this.currentScreen);\n+\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, this.currentScreen, (FabricScreen) this.currentScreen);\n \t}\n \n-\t// This is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n+\t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n+\t// We Coerce the package-private inner class representing the world load action.\n \n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n-\tprivate void beforeLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n+\tprivate void beforeLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n \t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, currentScreen, (FabricScreen) currentScreen);\n \t}\n \n-\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/RegistryTracker$Modifiable;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void afterLoadingScreenTick(String worldName, RegistryTracker.Modifiable registryTracker, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, RegistryTracker.Modifiable, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n+\tprivate void afterLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n \t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, currentScreen, (ScreenContext) currentScreen);\n+\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, currentScreen, (FabricScreen) currentScreen);\n \t}\n }\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 41f7516b3..7b5e0ffa5 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -36,37 +36,45 @@ import net.minecraft.world.SaveProperties;\n import net.minecraft.world.level.storage.LevelStorage;\n \n import net.fabricmc.fabric.api.client.screen.v1.FabricScreen;\n-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;\n \n @Mixin(MinecraftClient.class)\n public abstract class MinecraftClientMixin {\n \t@Shadow\n \tpublic Screen currentScreen;\n \n-\t// These two should be caught by \"Screen#wrapScreenError\" if anything fails and then rethrown in the crash report\n+\t@Unique\n+\tprivate FabricScreen tickingScreen;\n \n-\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\t// These two injections should be caught by \"Screen#wrapScreenError\" if anything fails in an event and then rethrown in the crash report\n+\t@Inject(method = \"method_1572\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;tick()V\"))\n \tprivate void beforeScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, this.currentScreen, (FabricScreen) this.currentScreen);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n+\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n+\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n \t}\n \n-\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"), locals = LocalCapture.CAPTURE_FAILEXCEPTION)\n+\t@Inject(method = \"method_1572\", at = @At(\"TAIL\"))\n \tprivate void afterScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, this.currentScreen, (FabricScreen) this.currentScreen);\n+\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// Finally set the currently ticking screen to null\n+\t\tthis.tickingScreen = null;\n \t}\n \n \t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n-\t// We Coerce the package-private inner class representing the world load action.\n-\n+\t// We Coerce the package-private inner class representing the world load action so we don't need an access widener.\n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n \tprivate void beforeLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.BEFORE_TICK.invoker().beforeTick((MinecraftClient) (Object) this, currentScreen, (FabricScreen) currentScreen);\n+\t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n+\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n+\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n \t}\n \n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n \tprivate void afterLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tfinal Screen currentScreen = this.currentScreen;\n-\t\tScreenEvents.AFTER_TICK.invoker().afterTick((MinecraftClient) (Object) this, currentScreen, (FabricScreen) currentScreen);\n+\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// Finally set the currently ticking screen to null\n+\t\tthis.tickingScreen = null;\n \t}\n }\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 7b5e0ffa5..71ed2aee1 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -77,4 +77,10 @@ public abstract class MinecraftClientMixin {\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n+\n+\t@Inject(method = \"onResolutionChanged\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;resize(Lnet/minecraft/client/MinecraftClient;II)V\", shift = At.Shift.AFTER))\n+\tprivate void afterResize(CallbackInfo ci) {\n+\t\tfinal FabricScreen fabricScreen = (FabricScreen) this.currentScreen;\n+\t\tfabricScreen.getAfterResizeEvent().invoker().onResize((MinecraftClient) (Object) this, fabricScreen.getScreen(), fabricScreen);\n+\t}\n }\n", "next_change": {"commit": "ed17f6bcc330e4695f01ae39f20236d16c7d7de8", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 71ed2aee1..7b5e0ffa5 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -77,10 +77,4 @@ public abstract class MinecraftClientMixin {\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n-\n-\t@Inject(method = \"onResolutionChanged\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;resize(Lnet/minecraft/client/MinecraftClient;II)V\", shift = At.Shift.AFTER))\n-\tprivate void afterResize(CallbackInfo ci) {\n-\t\tfinal FabricScreen fabricScreen = (FabricScreen) this.currentScreen;\n-\t\tfabricScreen.getAfterResizeEvent().invoker().onResize((MinecraftClient) (Object) this, fabricScreen.getScreen(), fabricScreen);\n-\t}\n }\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 7b5e0ffa5..375abf90e 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -64,16 +57,16 @@ public abstract class MinecraftClientMixin {\n \t// The LevelLoadingScreen is the odd screen that isn't ticked by the main tick loop, so we fire events for this screen.\n \t// We Coerce the package-private inner class representing the world load action so we don't need an access widener.\n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/LevelLoadingScreen;tick()V\"))\n-\tprivate void beforeLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n+\tprivate void beforeLoadingScreenTick(CallbackInfo ci) {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n-\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or an NPE.\n-\t\tthis.tickingScreen = (FabricScreen) this.currentScreen;\n-\t\tthis.tickingScreen.getBeforeTickEvent().invoker().beforeTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or throw a NPE.\n+\t\tthis.tickingScreen = this.currentScreen;\n+\t\tScreenEvents.getBeforeTickEvent(this.tickingScreen).invoker().beforeTick();\n \t}\n \n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n-\tprivate void afterLoadingScreenTick(String worldName, DynamicRegistryManager.Impl dynamicRegistryManager, Function<LevelStorage.Session, DataPackSettings> function, Function4<LevelStorage.Session, DynamicRegistryManager.Impl, ResourceManager, DataPackSettings, SaveProperties> function4, boolean safeMode, @Coerce Object worldLoadAction, CallbackInfo ci) {\n-\t\tthis.tickingScreen.getAfterTickEvent().invoker().afterTick((MinecraftClient) (Object) this, this.tickingScreen.getScreen(), this.tickingScreen);\n+\tprivate void afterLoadingScreenTick(CallbackInfo ci) {\n+\t\tScreenEvents.getAfterTickEvent(this.tickingScreen).invoker().afterTick();\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n", "next_change": {"commit": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex 375abf90e..da1c7b1f3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -61,12 +72,12 @@ abstract class MinecraftClientMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n \t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or throw a NPE.\n \t\tthis.tickingScreen = this.currentScreen;\n-\t\tScreenEvents.getBeforeTickEvent(this.tickingScreen).invoker().beforeTick();\n+\t\tScreenEvents.beforeTick(this.tickingScreen).invoker().beforeTick();\n \t}\n \n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n \tprivate void afterLoadingScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.getAfterTickEvent(this.tickingScreen).invoker().afterTick();\n+\t\tScreenEvents.afterTick(this.tickingScreen).invoker().afterTick();\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\nindex da1c7b1f3..e4ade04e9 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/MinecraftClientMixin.java\n", "chunk": "@@ -72,12 +72,12 @@ abstract class MinecraftClientMixin {\n \t\t// Store the screen in a variable in case someone tries to change the screen during this before tick event.\n \t\t// If someone changes the screen, the after tick event will likely have class cast exceptions or throw a NPE.\n \t\tthis.tickingScreen = this.currentScreen;\n-\t\tScreenEvents.beforeTick(this.tickingScreen).invoker().beforeTick();\n+\t\tScreenEvents.beforeTick(this.tickingScreen).invoker().beforeTick(this.tickingScreen);\n \t}\n \n \t@Inject(method = \"startIntegratedServer(Ljava/lang/String;Lnet/minecraft/util/registry/DynamicRegistryManager$Impl;Ljava/util/function/Function;Lcom/mojang/datafixers/util/Function4;ZLnet/minecraft/client/MinecraftClient$WorldLoadAction;)V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;render(Z)V\"))\n \tprivate void afterLoadingScreenTick(CallbackInfo ci) {\n-\t\tScreenEvents.afterTick(this.tickingScreen).invoker().afterTick();\n+\t\tScreenEvents.afterTick(this.tickingScreen).invoker().afterTick(this.tickingScreen);\n \t\t// Finally set the currently ticking screen to null\n \t\tthis.tickingScreen = null;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "4958018e67c6013226e31669684bb8a1eec4ba03", "url": "https://github.com/FabricMC/fabric/commit/4958018e67c6013226e31669684bb8a1eec4ba03", "message": "Split render and tick events to before and after", "committedDate": "2020-07-26T02:48:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517201", "body": "I wonder if there is a better name for this?", "bodyText": "I wonder if there is a better name for this?", "bodyHTML": "<p dir=\"auto\">I wonder if there is a better name for this?</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:47:29Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.item.ItemRenderer;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Provides access to additional context a screen can hold.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricScreen {", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NzA3Mg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460547072", "bodyText": "Originally this was ScreenContext a few commits ago.\nScreenInfo could work.", "author": "i509VCB", "createdAt": "2020-07-26T16:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzA3MQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583071", "bodyText": "This is really fabric screens as this is injected wholesale into screen class.", "author": "liach", "createdAt": "2020-07-26T22:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyODkyNQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r480828925", "bodyText": "Decided on ScreenExtensions in the end.", "author": "i509VCB", "createdAt": "2020-09-01T05:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\nindex bdbf13cab..41bb85706 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\n", "chunk": "@@ -25,6 +25,7 @@ import net.minecraft.client.render.item.ItemRenderer;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n \n /**\n  * Provides access to additional context a screen can hold.\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenExtensions.java\nsimilarity index 61%\nrename from fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\nrename to fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenExtensions.java\nindex 41bb85706..2e55abf77 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/FabricScreen.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenExtensions.java\n", "chunk": "@@ -31,15 +31,15 @@ import net.fabricmc.fabric.api.event.Event;\n  * Provides access to additional context a screen can hold.\n  */\n @Environment(EnvType.CLIENT)\n-public interface FabricScreen {\n+public interface ScreenExtensions {\n \t/**\n \t * Gets the screen's additional info.\n \t *\n \t * @param screen the screen\n \t * @return the screen's context\n \t */\n-\tstatic FabricScreen getInfo(Screen screen) {\n-\t\treturn (FabricScreen) screen;\n+\tstatic ScreenExtensions getExtensions(Screen screen) {\n+\t\treturn (ScreenExtensions) screen;\n \t}\n \n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzMyNQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517325", "body": "Yes, this is good!", "bodyText": "Yes, this is good!", "bodyHTML": "<p dir=\"auto\">Yes, this is good!</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:48:41Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2e8af5320..d3e18277f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -22,11 +22,16 @@ import java.util.List;\n import net.minecraft.client.gui.Element;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n+import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+\n+// TODO: When events for listening to addition of child elements are added, fire events from this list.\n public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final ScreenExtensions extensions;\n \tprivate final List<T> buttons;\n \tprivate final List<Element> children;\n \n-\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\tpublic ButtonList(ScreenExtensions extensions, List<T> buttons, List<Element> children) {\n+\t\tthis.extensions = extensions;\n \t\tthis.buttons = buttons;\n \t\tthis.children = children;\n \t}\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex d3e18277f..ff2b0458d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -19,19 +19,25 @@ package net.fabricmc.fabric.impl.client.screen;\n import java.util.AbstractList;\n import java.util.List;\n \n+import org.jetbrains.annotations.ApiStatus;\n+\n import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n \n // TODO: When events for listening to addition of child elements are added, fire events from this list.\n+@ApiStatus.Internal\n+@Environment(EnvType.CLIENT)\n public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n-\tprivate final ScreenExtensions extensions;\n+\tprivate final Screen screen;\n \tprivate final List<T> buttons;\n \tprivate final List<Element> children;\n \n-\tpublic ButtonList(ScreenExtensions extensions, List<T> buttons, List<Element> children) {\n-\t\tthis.extensions = extensions;\n+\tpublic ButtonList(Screen screen, List<T> buttons, List<Element> children) {\n+\t\tthis.screen = screen;\n \t\tthis.buttons = buttons;\n \t\tthis.children = children;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex ff2b0458d..2784f5919 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -19,25 +19,14 @@ package net.fabricmc.fabric.impl.client.screen;\n import java.util.AbstractList;\n import java.util.List;\n \n-import org.jetbrains.annotations.ApiStatus;\n-\n import net.minecraft.client.gui.Element;\n-import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-\n-// TODO: When events for listening to addition of child elements are added, fire events from this list.\n-@ApiStatus.Internal\n-@Environment(EnvType.CLIENT)\n public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n-\tprivate final Screen screen;\n \tprivate final List<T> buttons;\n \tprivate final List<Element> children;\n \n-\tpublic ButtonList(Screen screen, List<T> buttons, List<Element> children) {\n-\t\tthis.screen = screen;\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n \t\tthis.buttons = buttons;\n \t\tthis.children = children;\n \t}\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2784f5919..d3e18277f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -22,11 +22,16 @@ import java.util.List;\n import net.minecraft.client.gui.Element;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n+import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+\n+// TODO: When events for listening to addition of child elements are added, fire events from this list.\n public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final ScreenExtensions extensions;\n \tprivate final List<T> buttons;\n \tprivate final List<Element> children;\n \n-\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\tpublic ButtonList(ScreenExtensions extensions, List<T> buttons, List<Element> children) {\n+\t\tthis.extensions = extensions;\n \t\tthis.buttons = buttons;\n \t\tthis.children = children;\n \t}\n", "next_change": {"commit": "d01613d6d1daae0a579545765d43ce7384e3beb5", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex d3e18277f..ff2b0458d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -19,19 +19,25 @@ package net.fabricmc.fabric.impl.client.screen;\n import java.util.AbstractList;\n import java.util.List;\n \n+import org.jetbrains.annotations.ApiStatus;\n+\n import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.widget.AbstractButtonWidget;\n \n-import net.fabricmc.fabric.api.client.screen.v1.ScreenExtensions;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n \n // TODO: When events for listening to addition of child elements are added, fire events from this list.\n+@ApiStatus.Internal\n+@Environment(EnvType.CLIENT)\n public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n-\tprivate final ScreenExtensions extensions;\n+\tprivate final Screen screen;\n \tprivate final List<T> buttons;\n \tprivate final List<Element> children;\n \n-\tpublic ButtonList(ScreenExtensions extensions, List<T> buttons, List<Element> children) {\n-\t\tthis.extensions = extensions;\n+\tpublic ButtonList(Screen screen, List<T> buttons, List<Element> children) {\n+\t\tthis.screen = screen;\n \t\tthis.buttons = buttons;\n \t\tthis.children = children;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517724", "body": "Whats the use case for the tick events?", "bodyText": "Whats the use case for the tick events?", "bodyHTML": "<p dir=\"auto\">Whats the use case for the tick events?</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:52:20Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODAxMA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460548010", "bodyText": "I'd argue it's nessecary if someone adds a widget to a screen that needs to be ticked.\nFor example if someone added a sort of chyron to the title screen showing news about the latest snapshots, they would need to tick that element of the screen to advance the position of text.", "author": "i509VCB", "createdAt": "2020-07-26T16:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzE3Mw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583173", "bodyText": "So in case a tick-needed widget added to a non-ticking screen?", "author": "liach", "createdAt": "2020-07-26T22:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4MzY1MA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460583650", "bodyText": "All screens are ticking, but child elements of a screen are not automatically ticking (some screen impls do do that).\nOften the tick method of each element is called in the screen's tick method", "author": "i509VCB", "createdAt": "2020-07-26T22:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc2Mg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517762", "body": "should say is the before tick", "bodyText": "should say is the before tick", "bodyHTML": "<p dir=\"auto\">should say is the before tick</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:52:41Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc4Mg==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517782", "body": "same here say its the after tick", "bodyText": "same here say its the after tick", "bodyHTML": "<p dir=\"auto\">same here say its the after tick</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:52:53Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzc5Nw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517797", "body": "again here, say its the after renderer", "bodyText": "again here, say its the after renderer", "bodyHTML": "<p dir=\"auto\">again here, say its the after renderer</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:53:07Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzgwOA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517808", "body": "and before", "bodyText": "and before", "bodyHTML": "<p dir=\"auto\">and before</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:53:11Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460517859", "body": "Would it be worth exanding the docs to say what can do be done here. For example adding or changing buttons.", "bodyText": "Would it be worth exanding the docs to say what can do be done here. For example adding or changing buttons.", "bodyHTML": "<p dir=\"auto\">Would it be worth exanding the docs to say what can do be done here. For example adding or changing buttons.</p>", "author": "modmuss50", "createdAt": "2020-07-26T11:53:49Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODE3OA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460548178", "bodyText": "I'll add some docs to the class explaining those two cases.", "author": "i509VCB", "createdAt": "2020-07-26T16:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Mzc5OA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553798", "bodyText": "might want to mention that this is after the init", "author": "shedaniel", "createdAt": "2020-07-26T17:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNzg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MjkwNA==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460552904", "body": "just extend `AbstractPressableButtonWidget` instead of `ButtonWidget` so you don't pass a null", "bodyText": "just extend AbstractPressableButtonWidget instead of ButtonWidget so you don't pass a null", "bodyHTML": "<p dir=\"auto\">just extend <code>AbstractPressableButtonWidget</code> instead of <code>ButtonWidget</code> so you don't pass a null</p>", "author": "shedaniel", "createdAt": "2020-07-26T17:29:30Z", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import java.util.Random;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.sound.PositionedSoundInstance;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.sound.SoundEvents;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+class SoundButton extends ButtonWidget {\n+\tprivate static final Random RANDOM = new Random();\n+\n+\tSoundButton(int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 758b17364..9a9107572 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -19,18 +19,18 @@ package net.fabricmc.fabric.test.screen;\n import java.util.Random;\n \n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.gui.widget.AbstractPressableButtonWidget;\n import net.minecraft.client.sound.PositionedSoundInstance;\n import net.minecraft.sound.SoundEvent;\n import net.minecraft.sound.SoundEvents;\n import net.minecraft.text.Text;\n import net.minecraft.util.registry.Registry;\n \n-class SoundButton extends ButtonWidget {\n+class SoundButton extends AbstractPressableButtonWidget {\n \tprivate static final Random RANDOM = new Random();\n \n \tSoundButton(int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);\n+\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"));\n \t}\n \n \t@Override\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 9a9107572..69d9569c6 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -30,7 +30,7 @@ class SoundButton extends AbstractPressableButtonWidget {\n \tprivate static final Random RANDOM = new Random();\n \n \tSoundButton(int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"));\n+\t\tsuper(x, y, width, height, Text.of(\"Sound Button\"));\n \t}\n \n \t@Override\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 69d9569c6..3c9461229 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -35,8 +38,9 @@ class SoundButton extends AbstractPressableButtonWidget {\n \n \t@Override\n \tpublic void onPress() {\n-\t\tfinal int size = Registry.SOUND_EVENT.getIds().size();\n-\t\tfinal SoundEvent event = Registry.SOUND_EVENT.get(RANDOM.nextInt(size - 1));\n+\t\t// Upcast on registry is fine\n+\t\t@Nullable\n+\t\tfinal SoundEvent event = ((SimpleRegistry<SoundEvent>) Registry.SOUND_EVENT).getRandom(RANDOM);\n \n \t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(event != null ? event : SoundEvents.ENTITY_GENERIC_EXPLODE, 1.0F, 1.0F));\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 3c9461229..77e6e21d2 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -16,32 +16,18 @@\n \n package net.fabricmc.fabric.test.screen;\n \n-import java.util.Random;\n-\n-import org.jetbrains.annotations.Nullable;\n-\n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.widget.AbstractPressableButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n import net.minecraft.client.sound.PositionedSoundInstance;\n-import net.minecraft.sound.SoundEvent;\n-import net.minecraft.sound.SoundEvents;\n-import net.minecraft.text.Text;\n import net.minecraft.util.registry.Registry;\n-import net.minecraft.util.registry.SimpleRegistry;\n-\n-class SoundButton extends AbstractPressableButtonWidget {\n-\tprivate static final Random RANDOM = new Random();\n \n+class SoundButton extends ButtonWidget {\n \tSoundButton(int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.of(\"Sound Button\"));\n+\t\tsuper(x, y, width, height, \"Sound Button\", null);\n \t}\n \n \t@Override\n \tpublic void onPress() {\n-\t\t// Upcast on registry is fine\n-\t\t@Nullable\n-\t\tfinal SoundEvent event = ((SimpleRegistry<SoundEvent>) Registry.SOUND_EVENT).getRandom(RANDOM);\n-\n-\t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(event != null ? event : SoundEvents.ENTITY_GENERIC_EXPLODE, 1.0F, 1.0F));\n+\t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(Registry.SOUND_EVENT.getRandom(ScreenTests.RANDOM), 1.0F, 1.0F));\n \t}\n }\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 77e6e21d2..368152012 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -16,18 +16,30 @@\n \n package net.fabricmc.fabric.test.screen;\n \n+import java.util.Random;\n+\n+import com.mojang.datafixers.DataFixUtils;\n+\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.widget.ButtonWidget;\n import net.minecraft.client.sound.PositionedSoundInstance;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.sound.SoundEvents;\n+import net.minecraft.text.Text;\n import net.minecraft.util.registry.Registry;\n \n class SoundButton extends ButtonWidget {\n+\tprivate static final Random RANDOM = new Random();\n+\n \tSoundButton(int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, \"Sound Button\", null);\n+\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);\n \t}\n \n \t@Override\n \tpublic void onPress() {\n-\t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(Registry.SOUND_EVENT.getRandom(ScreenTests.RANDOM), 1.0F, 1.0F));\n+\t\tfinal int size = Registry.SOUND_EVENT.getIds().size();\n+\t\tfinal SoundEvent event = Registry.SOUND_EVENT.get(RANDOM.nextInt(size - 1));\n+\n+\t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(event != null ? event : SoundEvents.ENTITY_GENERIC_EXPLODE, 1.0F, 1.0F));\n \t}\n }\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\nindex 368152012..3c9461229 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/SoundButton.java\n", "chunk": "@@ -18,27 +18,29 @@ package net.fabricmc.fabric.test.screen;\n \n import java.util.Random;\n \n-import com.mojang.datafixers.DataFixUtils;\n+import org.jetbrains.annotations.Nullable;\n \n import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.gui.widget.AbstractPressableButtonWidget;\n import net.minecraft.client.sound.PositionedSoundInstance;\n import net.minecraft.sound.SoundEvent;\n import net.minecraft.sound.SoundEvents;\n import net.minecraft.text.Text;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.SimpleRegistry;\n \n-class SoundButton extends ButtonWidget {\n+class SoundButton extends AbstractPressableButtonWidget {\n \tprivate static final Random RANDOM = new Random();\n \n \tSoundButton(int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.method_30163(\"Sound Button\"), null);\n+\t\tsuper(x, y, width, height, Text.of(\"Sound Button\"));\n \t}\n \n \t@Override\n \tpublic void onPress() {\n-\t\tfinal int size = Registry.SOUND_EVENT.getIds().size();\n-\t\tfinal SoundEvent event = Registry.SOUND_EVENT.get(RANDOM.nextInt(size - 1));\n+\t\t// Upcast on registry is fine\n+\t\t@Nullable\n+\t\tfinal SoundEvent event = ((SimpleRegistry<SoundEvent>) Registry.SOUND_EVENT).getRandom(RANDOM);\n \n \t\tMinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(event != null ? event : SoundEvents.ENTITY_GENERIC_EXPLODE, 1.0F, 1.0F));\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzA3MQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553071", "body": "same here with the null", "bodyText": "same here with the null", "bodyHTML": "<p dir=\"auto\">same here with the null</p>", "author": "shedaniel", "createdAt": "2020-07-26T17:30:49Z", "path": "fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.screen;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.hud.InGameHud;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+\n+class StopSoundButton extends ButtonWidget {\n+\tprivate final Screen screen;\n+\n+\tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n+\t\tsuper(x, y, width, height, Text.method_30163(\"\"), null);", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex a85da74ea..ee5dbd71a 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -22,16 +22,16 @@ import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.DrawableHelper;\n import net.minecraft.client.gui.hud.InGameHud;\n import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.gui.widget.AbstractPressableButtonWidget;\n import net.minecraft.client.util.math.MatrixStack;\n import net.minecraft.text.LiteralText;\n import net.minecraft.text.Text;\n \n-class StopSoundButton extends ButtonWidget {\n+class StopSoundButton extends AbstractPressableButtonWidget {\n \tprivate final Screen screen;\n \n \tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.method_30163(\"\"), null);\n+\t\tsuper(x, y, width, height, Text.method_30163(\"\"));\n \t\tthis.screen = screen;\n \t}\n \n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex ee5dbd71a..d77f8181b 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -31,7 +31,7 @@ class StopSoundButton extends AbstractPressableButtonWidget {\n \tprivate final Screen screen;\n \n \tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.method_30163(\"\"));\n+\t\tsuper(x, y, width, height, Text.of(\"\"));\n \t\tthis.screen = screen;\n \t}\n \n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex d77f8181b..8d5303c8a 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -38,7 +36,6 @@ class StopSoundButton extends AbstractPressableButtonWidget {\n \t@Override\n \tpublic void render(MatrixStack matrices, int mouseX, int mouseY, float tickDelta) {\n \t\tMinecraftClient client = MinecraftClient.getInstance();\n-\t\tRenderSystem.pushMatrix();\n \t\t// Render the armor icon to test\n \t\tclient.getTextureManager().bindTexture(InGameHud.GUI_ICONS_TEXTURE);\n \t\tDrawableHelper.drawTexture(matrices, this.x, this.y, this.width, this.height, 43, 27, 9, 9, 256, 256);\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex 8d5303c8a..267f583a4 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -16,33 +16,35 @@\n \n package net.fabricmc.fabric.test.screen;\n \n+import com.mojang.blaze3d.systems.RenderSystem;\n+\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.DrawableHelper;\n import net.minecraft.client.gui.hud.InGameHud;\n import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.widget.AbstractPressableButtonWidget;\n-import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.text.LiteralText;\n-import net.minecraft.text.Text;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n \n-class StopSoundButton extends AbstractPressableButtonWidget {\n+class StopSoundButton extends ButtonWidget {\n \tprivate final Screen screen;\n \n \tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, Text.of(\"\"));\n+\t\tsuper(x, y, width, height, \"\", null);\n \t\tthis.screen = screen;\n \t}\n \n \t@Override\n-\tpublic void render(MatrixStack matrices, int mouseX, int mouseY, float tickDelta) {\n+\tpublic void render(int mouseX, int mouseY, float tickDelta) {\n \t\tMinecraftClient client = MinecraftClient.getInstance();\n+\t\tRenderSystem.pushMatrix();\n \t\t// Render the armor icon to test\n-\t\tclient.getTextureManager().bindTexture(InGameHud.GUI_ICONS_TEXTURE);\n-\t\tDrawableHelper.drawTexture(matrices, this.x, this.y, this.width, this.height, 43, 27, 9, 9, 256, 256);\n+\t\tclient.getTextureManager().bindTexture(InGameHud.GUI_ICONS_LOCATION);\n+\t\tDrawableHelper.blit(this.x, this.y, this.width, this.height, 43, 27, 9, 9, 256, 256);\n \n \t\tif (this.isMouseOver(mouseX, mouseY)) {\n-\t\t\tthis.screen.renderTooltip(matrices, new LiteralText(\"Click to stop all sounds\"), this.x, this.y);\n+\t\t\tthis.screen.renderTooltip(\"Click to stop all sounds\", this.x, this.y);\n \t\t}\n+\n+\t\tRenderSystem.popMatrix();\n \t}\n \n \t@Override\n", "next_change": {"commit": "585ede1f279ff0e5803088172422f59f0123e4f4", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex 267f583a4..a85da74ea 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -23,25 +23,28 @@ import net.minecraft.client.gui.DrawableHelper;\n import net.minecraft.client.gui.hud.InGameHud;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n \n class StopSoundButton extends ButtonWidget {\n \tprivate final Screen screen;\n \n \tStopSoundButton(Screen screen, int x, int y, int width, int height) {\n-\t\tsuper(x, y, width, height, \"\", null);\n+\t\tsuper(x, y, width, height, Text.method_30163(\"\"), null);\n \t\tthis.screen = screen;\n \t}\n \n \t@Override\n-\tpublic void render(int mouseX, int mouseY, float tickDelta) {\n+\tpublic void render(MatrixStack matrices, int mouseX, int mouseY, float tickDelta) {\n \t\tMinecraftClient client = MinecraftClient.getInstance();\n \t\tRenderSystem.pushMatrix();\n \t\t// Render the armor icon to test\n-\t\tclient.getTextureManager().bindTexture(InGameHud.GUI_ICONS_LOCATION);\n-\t\tDrawableHelper.blit(this.x, this.y, this.width, this.height, 43, 27, 9, 9, 256, 256);\n+\t\tclient.getTextureManager().bindTexture(InGameHud.GUI_ICONS_TEXTURE);\n+\t\tDrawableHelper.drawTexture(matrices, this.x, this.y, this.width, this.height, 43, 27, 9, 9, 256, 256);\n \n \t\tif (this.isMouseOver(mouseX, mouseY)) {\n-\t\t\tthis.screen.renderTooltip(\"Click to stop all sounds\", this.x, this.y);\n+\t\t\tthis.screen.renderTooltip(matrices, new LiteralText(\"Click to stop all sounds\"), this.x, this.y);\n \t\t}\n \n \t\tRenderSystem.popMatrix();\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\nindex a85da74ea..8d5303c8a 100644\n--- a/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n+++ b/fabric-screen-api-v1/src/testmod/java/net/fabricmc/fabric/test/screen/StopSoundButton.java\n", "chunk": "@@ -46,8 +43,6 @@ class StopSoundButton extends ButtonWidget {\n \t\tif (this.isMouseOver(mouseX, mouseY)) {\n \t\t\tthis.screen.renderTooltip(matrices, new LiteralText(\"Click to stop all sounds\"), this.x, this.y);\n \t\t}\n-\n-\t\tRenderSystem.popMatrix();\n \t}\n \n \t@Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MzUxNw==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553517", "body": "is it possible to just `this.children.remove(removedButton);`", "bodyText": "is it possible to just this.children.remove(removedButton);", "bodyHTML": "<p dir=\"auto\">is it possible to just <code>this.children.remove(removedButton);</code></p>", "author": "shedaniel", "createdAt": "2020-07-26T17:35:06Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.screen;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+public final class ButtonList<T extends AbstractButtonWidget> extends AbstractList<T> {\n+\tprivate final List<T> buttons;\n+\tprivate final List<Element> children;\n+\n+\tpublic ButtonList(List<T> buttons, List<Element> children) {\n+\t\tthis.buttons = buttons;\n+\t\tthis.children = children;\n+\t}\n+\n+\t@Override\n+\tpublic T get(int index) {\n+\t\treturn this.buttons.get(index);\n+\t}\n+\n+\t@Override\n+\tpublic T set(int index, T element) {\n+\t\tthis.remove(element); // verify / ensure no duplicates\n+\n+\t\tfinal T existingButton = this.buttons.get(index);\n+\t\tint elementIndex = this.children.indexOf(existingButton);\n+\n+\t\tif (elementIndex > -1) {\n+\t\t\tthis.children.set(elementIndex, element);\n+\t\t}\n+\n+\t\treturn this.buttons.set(index, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, T element) {\n+\t\tthis.rangeCheckForAdd(index); // verify index bounds\n+\t\tthis.remove(element); // ensure no duplicates\n+\n+\t\tthis.buttons.add(index, element);\n+\t\tthis.children.add(Math.min(this.children.size(), index), element);\n+\t}\n+\n+\t@Override\n+\tpublic T remove(int index) {\n+\t\tthis.rangeCheck(index); // verify index bounds\n+\n+\t\tfinal T removedButton = this.buttons.remove(index);\n+\t\tindex = this.children.indexOf(removedButton);", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2e8af5320..a0c97fb7d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -64,11 +64,7 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \t\tthis.rangeCheck(index); // verify index bounds\n \n \t\tfinal T removedButton = this.buttons.remove(index);\n-\t\tindex = this.children.indexOf(removedButton);\n-\n-\t\tif (index > -1) {\n-\t\t\tthis.children.remove(index);\n-\t\t}\n+\t\tthis.children.remove(removedButton);\n \n \t\treturn removedButton;\n \t}\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex a0c97fb7d..2784f5919 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -64,7 +64,11 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \t\tthis.rangeCheck(index); // verify index bounds\n \n \t\tfinal T removedButton = this.buttons.remove(index);\n-\t\tthis.children.remove(removedButton);\n+\t\tindex = this.children.indexOf(removedButton);\n+\n+\t\tif (index > -1) {\n+\t\t\tthis.children.remove(index);\n+\t\t}\n \n \t\treturn removedButton;\n \t}\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\nindex 2784f5919..a0c97fb7d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java\n", "chunk": "@@ -64,11 +64,7 @@ public final class ButtonList<T extends AbstractButtonWidget> extends AbstractLi\n \t\tthis.rangeCheck(index); // verify index bounds\n \n \t\tfinal T removedButton = this.buttons.remove(index);\n-\t\tindex = this.children.indexOf(removedButton);\n-\n-\t\tif (index > -1) {\n-\t\t\tthis.children.remove(index);\n-\t\t}\n+\t\tthis.children.remove(removedButton);\n \n \t\treturn removedButton;\n \t}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1Mzg2OQ==", "url": "https://github.com/FabricMC/fabric/pull/645#discussion_r460553869", "body": "functional interface? seeing that you have another pr that does that", "bodyText": "functional interface? seeing that you have another pr that does that", "bodyHTML": "<p dir=\"auto\">functional interface? seeing that you have another pr that does that</p>", "author": "shedaniel", "createdAt": "2020-07-26T17:38:54Z", "path": "fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t}\n+\n+\tpublic interface AfterTick {", "originalCommit": "2793731b822f69913cda29a579abccfe4aeec903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185123611a9d881425c647543ee0cf10b3495a15", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f5e047e36 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -19,130 +19,156 @@ package net.fabricmc.fabric.api.client.screen.v1;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.util.profiler.Profiler;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n \n+// TODO:\n+// Char typed\n+// Add Child\n+// Add button\n+// Change ButtonList to fire add child and button events\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * It should be noted many of the methods in {@link FabricScreen} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t *\n+\t * <p>Typically this event is used to register screen events such as listening to when child elements are added to the screen.\n+\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n+\t *\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n-\t\tfor (Init callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called before a screen is rendered.\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * Since this event is fired after a screen has been initialized,\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this callback.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (AfterInit callback : callbacks) {\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"fabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t}\n \n-\tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3ccacc14c7856191ec2d2381d39bef189aadee67", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f5e047e36..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -93,82 +94,82 @@ public final class ScreenEvents {\n \n \t@FunctionalInterface\n \tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..89dd7f427 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -25,151 +27,179 @@ import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n \n /**\n  * Holds events related to {@link Screen}s.\n+ *\n+ * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n+ * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n+ * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n+ *\n+ * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n+ *\n+ * @see ScreenKeyboardEvents\n+ * @see ScreenMouseEvents\n+ * @see Screens\n  */\n @Environment(EnvType.CLIENT)\n public final class ScreenEvents {\n \t/**\n-\t * An event that is called before a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n-\t * It should be noted many of the methods in {@link ScreenExtensions} such as the screen's text renderer may not be initialized yet, and as such their use is discouraged.\n+\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n+\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n \t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. -=- Uncomment when child add/remove event is added for elements-->\n+\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n \t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n \t *\n \t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n \t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * &#64;Override\n \t * public void onInitializeClient() {\n-\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n+\t * \t\t\t\t...\n+\t * \t\t\t});\n \t * \t\t}\n \t * \t});\n \t * }\n-\t *\n-\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n-\t * \t...\n-\t * }\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been closed.\n+\t * This event can also indicate that the previous screen has been changed.\n \t * @see ScreenEvents#AFTER_INIT\n \t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t/**\n-\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n \t *\n \t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * <pre>{@code\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n+\t/**\n+\t * An event that is called after {@link Screen#removed()} is called.\n+\t * This event signifies that the screen is now closed.\n+\t *\n+\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n+\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n+\t */\n+\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n+\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface Remove {\n+\t\tvoid onRemove();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "d881c61353d65b65b2eb36c884dc918d46d5f571", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\ndeleted file mode 100644\nindex 89dd7f427..000000000\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.screen.v1;\n-\n-import java.util.Objects;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-import net.minecraft.client.gui.screen.TickableElement;\n-import net.minecraft.client.util.math.MatrixStack;\n-\n-import net.fabricmc.api.EnvType;\n-import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-import net.fabricmc.fabric.impl.client.screen.ScreenExtensions;\n-\n-/**\n- * Holds events related to {@link Screen}s.\n- *\n- * <p>The events that are obtained by use of methods and all events in {@link ScreenKeyboardEvents} and {@link ScreenMouseEvents} are registered to their corresponding screen instances.\n- * This registration model is used since a screen being (re)initialized will reset the screen to it's default state, therefore reverting all changes a mod developer may have applied to a screen.\n- * Furthermore this design was chosen to reduce the amount of wasted iterations of events as a mod developer would only need to register screen events for rendering, ticking, keyboards and mice if needed on a per instance basis.\n- *\n- * <p>The primary entrypoint into a screen is when it is being opened, this is signified by an event {@link ScreenEvents#BEFORE_INIT before} and {@link ScreenEvents#AFTER_INIT after} initialization of the screen.\n- *\n- * @see ScreenKeyboardEvents\n- * @see ScreenMouseEvents\n- * @see Screens\n- */\n-@Environment(EnvType.CLIENT)\n-public final class ScreenEvents {\n-\t/**\n-\t * An event that is called before {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t * It should be noted some of the methods in {@link Screens} such as a screen's {@link Screens#getTextRenderer(Screen) text renderer} may not be initialized yet, and as such their use is discouraged.\n-\t *\n-\t * <!--<p>Typically this event is used to register screen events such as listening to when child elements are added to the screen. ------ Uncomment when child add/remove event is added for elements-->\n-\t * You can still use {@link ScreenEvents#AFTER_INIT} to register events such as keyboard and mouse events.\n-\t *\n-\t * <p>The {@link ScreenExtensions} provided by the {@code info} parameter may be used to register tick, render events, keyboard, mouse, additional and removal of child elements (including buttons).\n-\t * For example, to register an event on inventory like screens after render, the following code could be used:\n-\t * <pre>{@code\n-\t * &#64;Override\n-\t * public void onInitializeClient() {\n-\t * \tScreenEvents.BEFORE_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n-\t * \t\t\tScreenEvents.getAfterRenderEvent(screen).register((matrices, mouseX, mouseY, tickDelta) -> {\n-\t * \t\t\t\t...\n-\t * \t\t\t});\n-\t * \t\t}\n-\t * \t});\n-\t * }\n-\t * }</pre>\n-\t *\n-\t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n-\t * This event can also indicate that the previous screen has been changed.\n-\t * @see ScreenEvents#AFTER_INIT\n-\t */\n-\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (BeforeInit callback : callbacks) {\n-\t\t\tcallback.beforeInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#init(MinecraftClient, int, int) a screen is initialized} to it's default state.\n-\t *\n-\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n-\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n-\t *\n-\t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <pre>{@code\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, scaledWidth, scaledHeight) -> {\n-\t * \tif (screen instanceof TitleScreen) {\n-\t * \t\tScreens.getButtons(screen).add(new ButtonWidget(...));\n-\t * \t}\n-\t * });\n-\t * }</pre>\n-\t *\n-\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n-\t *\n-\t * <p>This event can also indicate that the previous screen has been closed.\n-\t * @see ScreenEvents#BEFORE_INIT\n-\t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n-\t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after {@link Screen#removed()} is called.\n-\t * This event signifies that the screen is now closed.\n-\t *\n-\t * <p>This event is typically used to undo any screen specific state changes such as setting the keyboard to receive {@link net.minecraft.client.Keyboard#setRepeatEvents(boolean) repeat events} or terminate threads spawned by a screen.\n-\t * This event may precede initialization events {@link ScreenEvents#BEFORE_INIT} but there is no guarantee that event will be called immediately afterwards.\n-\t */\n-\tpublic static Event<Remove> getRemoveEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getRemoveEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n-\t}\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t *\n-\t * @return the event\n-\t */\n-\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n-\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n-\n-\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface Remove {\n-\t\tvoid onRemove();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n-\t}\n-\n-\t@Environment(EnvType.CLIENT)\n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick();\n-\t}\n-\n-\tprivate ScreenEvents() {\n-\t}\n-}\n", "next_change": {"commit": "ade900474066bcb629f695e9f8b88daf30fdd179", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nnew file mode 100644\nindex 000000000..a38123054\n--- /dev/null\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.screen.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+@Environment(EnvType.CLIENT)\n+public final class ScreenEvents {\n+\t/**\n+\t * An event that is called when a {@link Screen#init(MinecraftClient, int, int) screen is initialized}.\n+\t */\n+\tpublic static final Event<Init> INIT = EventFactory.createArrayBacked(Init.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\t\tfor (Init callback : callbacks) {\n+\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t */\n+\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeRender callback : callbacks) {\n+\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t */\n+\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricRenderScreen\");\n+\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterRender callback : callbacks) {\n+\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t */\n+\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (BeforeTick callback : callbacks) {\n+\t\t\t\tcallback.beforeTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t */\n+\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n+\t\tif (EventFactory.isProfilingEnabled()) {\n+\t\t\tfinal Profiler profiler = client.getProfiler();\n+\t\t\tprofiler.push(\"fabricScreenTick\");\n+\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t\tprofiler.pop();\n+\t\t\t}\n+\n+\t\t\tprofiler.pop();\n+\t\t} else {\n+\t\t\tfor (AfterTick callback : callbacks) {\n+\t\t\t\tcallback.afterTick(client, screen, context);\n+\t\t\t}\n+\t\t}\n+\t});\n+\n+\tpublic interface Init {\n+\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t}\n+\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t}\n+\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t}\n+\n+\tprivate ScreenEvents() {\n+\t}\n+}\n", "next_change": {"commit": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex a38123054..e43a296bf 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -126,23 +126,23 @@ public final class ScreenEvents {\n \t});\n \n \tpublic interface Init {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, ScreenContext context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenContext context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenContext context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "ff4765c1596c979b1c57c01f636ddba2614166ab", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex e43a296bf..f44e3cf6c 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -125,22 +140,27 @@ public final class ScreenEvents {\n \t\t}\n \t});\n \n-\tpublic interface Init {\n+\t@FunctionalInterface\n+\tpublic interface AfterInit {\n \t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeRender {\n \t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterRender {\n \t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface BeforeTick {\n \t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n \n+\t@FunctionalInterface\n \tpublic interface AfterTick {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n \t}\n", "next_change": {"commit": "cd890185674ec10edfc12dd733b6d15240f38c3b", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex f44e3cf6c..10b132c3d 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -36,133 +35,61 @@ public final class ScreenEvents {\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n \t * <blockquote><pre>\n-\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n \t * </pre></blockquote>\n \t *\n-\t * <p>This event also indicates that the previous screen has been closed.\n-\t * Mods may also use this callback to clear their current screen state\n+\t * <p>The {@link FabricScreen} provided by the {@code info} parameter may be used to register tick and render events.\n+\t * For example, to register an event on inventory like screens after render, the following code could be used:\n+\t * <blockquote><pre>\n+\t * &#64;Override\n+\t * public void onInitializeClient() {\n+\t * \tScreenEvents.AFTER_INIT.register((client, screen, info, scaledWidth, scaledHeight) -> {\n+\t * \t\tif (screen instanceof AbstractInventoryScreen) {\n+\t * \t\t\tinfo.getAfterRenderEvent().register(this::onRenderInventoryScreen);\n+\t * \t\t}\n+\t * \t});\n+\t * }\n+\t *\n+\t * private void onRenderInventoryScreen(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta) {\n+\t * \t...\n+\t * }\n+\t * </pre></blockquote>\n+\t *\n+\t * <p>This event also indicates that the previous screen has been closed, and as such can be used to clear a mod's current screen state.\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, context, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, context, scaledWidth, scaledHeight);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is rendered.\n-\t */\n-\tpublic static final Event<BeforeRender> BEFORE_RENDER = EventFactory.createArrayBacked(BeforeRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricRenderScreen\");\n-\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeRender callback : callbacks) {\n-\t\t\t\tcallback.beforeRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is rendered.\n-\t */\n-\tpublic static final Event<AfterRender> AFTER_RENDER = EventFactory.createArrayBacked(AfterRender.class, callbacks -> (client, matrices, screen, context, mouseX, mouseY, tickDelta) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricRenderScreen\");\n-\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterRender callback : callbacks) {\n-\t\t\t\tcallback.afterRender(client, matrices, screen, context, mouseX, mouseY, tickDelta);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called before a screen is ticked.\n-\t */\n-\tpublic static final Event<BeforeTick> BEFORE_TICK = EventFactory.createArrayBacked(BeforeTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"beforeFabricScreenTick\");\n-\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (BeforeTick callback : callbacks) {\n-\t\t\t\tcallback.beforeTick(client, screen, context);\n-\t\t\t}\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event that is called after a screen is ticked.\n-\t */\n-\tpublic static final Event<AfterTick> AFTER_TICK = EventFactory.createArrayBacked(AfterTick.class, callbacks -> (client, screen, context) -> {\n-\t\tif (EventFactory.isProfilingEnabled()) {\n-\t\t\tfinal Profiler profiler = client.getProfiler();\n-\t\t\tprofiler.push(\"afterFabricScreenTick\");\n-\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tprofiler.push(EventFactory.getHandlerName(callback));\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t\tprofiler.pop();\n-\t\t\t}\n-\n-\t\t\tprofiler.pop();\n-\t\t} else {\n-\t\t\tfor (AfterTick callback : callbacks) {\n-\t\t\t\tcallback.afterTick(client, screen, context);\n-\t\t\t}\n+\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen context, int scaledWidth, int scaledHeight);\n+\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen context, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen context);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 10b132c3d..7f79c052b 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -92,6 +92,11 @@ public final class ScreenEvents {\n \t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface AfterResize {\n+\t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "251079d642840b1b3f436982554adf5596084cc0", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 7f79c052b..2125bead3 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -97,6 +97,46 @@ public final class ScreenEvents {\n \t\tvoid onResize(MinecraftClient client, Screen screen, FabricScreen info);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyPressed {\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyPressed {\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeKeyReleased {\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterKeyReleased {\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseClicked {\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseClicked {\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseReleased {\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseReleased {\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "4beaf04abd414d702bbe1454ac1a2d2740885694", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 2125bead3..0e070a9ad 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -137,6 +140,16 @@ public final class ScreenEvents {\n \t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n \t}\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeMouseScrolled {\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface AfterMouseScrolled {\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t}\n+\n \tprivate ScreenEvents() {\n \t}\n }\n", "next_change": {"commit": "c40779f62040ca0bb777ce072073fa1e87799146", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 0e070a9ad..cea1b765f 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -66,88 +56,120 @@ public final class ScreenEvents {\n \t * </pre></blockquote>\n \t *\n \t * <p>This event indicates a screen has been resized, and therefore is being re-initialized.\n+\t * This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#AFTER_INIT\n+\t */\n+\tpublic static final Event<ScreenEvents.BeforeInit> BEFORE_INIT = EventFactory.createArrayBacked(ScreenEvents.BeforeInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\t\tfor (BeforeInit callback : callbacks) {\n+\t\t\tcallback.beforeInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event that is called after a {@link Screen#init(MinecraftClient, int, int) screen is initialized} to it's default state.\n+\t *\n+\t * <p>Typically this event is used to modify a screen after the screen has been initialized.\n+\t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n+\t *\n+\t * <p>For example, to add a button to the title screen, the following code could be used:\n+\t * <blockquote><pre>\n+\t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n+\t * \tif (screen instanceof TitleScreen) {\n+\t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n+\t * \t}\n+\t * });\n+\t * </pre></blockquote>\n+\t *\n+\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n+\t * @see ScreenEvents#BEFORE_INIT\n \t */\n \tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.onInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n+\t@FunctionalInterface\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n+\t}\n+\n \t@FunctionalInterface\n \tpublic interface AfterInit {\n-\t\tvoid onInit(MinecraftClient client, Screen screen, FabricScreen info, int scaledWidth, int scaledHeight);\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, FabricScreen info, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, FabricScreen info);\n+\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, FabricScreen info, int key, int scancode, int modifiers);\n+\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, int button);\n+\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \t@FunctionalInterface\n \tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, FabricScreen info, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex cea1b765f..4a8850c92 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -72,104 +75,103 @@ public final class ScreenEvents {\n \t * Modifications such as changing sizes of buttons, removing buttons and adding/removing child elements to the screen can be done safely using this event.\n \t *\n \t * <p>For example, to add a button to the title screen, the following code could be used:\n-\t * <blockquote><pre>\n+\t * <pre>{@code\n \t * ScreenEvents.AFTER_INIT.register((client, screen, context, scaledWidth, scaledHeight) -> {\n \t * \tif (screen instanceof TitleScreen) {\n \t * \t\tcontext.getButtons().add(new ButtonWidget(...));\n \t * \t}\n \t * });\n-\t * </pre></blockquote>\n+\t * }</pre>\n \t *\n-\t *<p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n-\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the correspondding screen events.\n+\t * <p>Note that by adding an element to a screen, the element is not automatically {@link net.minecraft.client.gui.screen.TickableElement ticked} or {@link net.minecraft.client.gui.Drawable drawn}.\n+\t * Unless the element is button, you need to call the specific {@link TickableElement#tick() tick} and {@link net.minecraft.client.gui.Drawable#render(MatrixStack, int, int, float) render} methods in the corresponding screen events.\n \t *\n \t * <p>This event can also indicate that the previous screen has been closed.\n \t * @see ScreenEvents#BEFORE_INIT\n \t */\n-\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, info, scaledWidth, scaledHeight) -> {\n+\tpublic static final Event<AfterInit> AFTER_INIT = EventFactory.createArrayBacked(AfterInit.class, callbacks -> (client, screen, scaledWidth, scaledHeight) -> {\n \t\tfor (AfterInit callback : callbacks) {\n-\t\t\tcallback.afterInit(client, screen, info, scaledWidth, scaledHeight);\n+\t\t\tcallback.afterInit(client, screen, scaledWidth, scaledHeight);\n \t\t}\n \t});\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeInit {\n-\t\tvoid beforeInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface AfterInit {\n-\t\tvoid afterInit(MinecraftClient client, Screen screen, ScreenExtensions context, int scaledWidth, int scaledHeight);\n-\t}\n-\n-\t@FunctionalInterface\n-\tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeRender> getBeforeRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterRender {\n-\t\tvoid afterRender(MinecraftClient client, MatrixStack matrices, Screen screen, ScreenExtensions context, int mouseX, int mouseY, float tickDelta);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeTick {\n-\t\tvoid beforeTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is rendered.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterRender> getAfterRenderEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterTick {\n-\t\tvoid afterTick(MinecraftClient client, Screen screen, ScreenExtensions context);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterRenderEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyPressed {\n-\t\tboolean beforeKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called before a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<BeforeTick> getBeforeTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyPressed {\n-\t\tvoid afterKeyPress(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getBeforeTickEvent();\n \t}\n \n-\t@FunctionalInterface\n-\tpublic interface BeforeKeyReleased {\n-\t\tboolean beforeKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n-\t}\n+\t/**\n+\t * An event that is called after a screen is ticked.\n+\t *\n+\t * @return the event\n+\t */\n+\tpublic static Event<AfterTick> getAfterTickEvent(Screen screen) {\n+\t\tObjects.requireNonNull(screen, \"Screen cannot be null\");\n \n-\t@FunctionalInterface\n-\tpublic interface AfterKeyReleased {\n-\t\tvoid afterKeyReleased(MinecraftClient client, Screen screen, ScreenExtensions context, int key, int scancode, int modifiers);\n+\t\treturn ScreenExtensions.getExtensions(screen).fabric_getAfterTickEvent();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseClicked {\n-\t\tboolean beforeMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeInit {\n+\t\tvoid beforeInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseClicked {\n-\t\tvoid afterMouseClicked(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterInit {\n+\t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n-\n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseReleased {\n-\t\tboolean beforeMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface BeforeRender {\n+\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseReleased {\n-\t\tvoid afterMouseReleased(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, int button);\n+\tpublic interface AfterRender {\n+\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface BeforeMouseScrolled {\n-\t\tboolean beforeMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface BeforeTick {\n+\t\tvoid beforeTick();\n \t}\n \n+\t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n-\tpublic interface AfterMouseScrolled {\n-\t\tvoid afterMouseScrolled(MinecraftClient client, Screen screen, ScreenExtensions context, double mouseX, double mouseY, double horizontalAmount, double verticalAmount);\n+\tpublic interface AfterTick {\n+\t\tvoid afterTick();\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": {"commit": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "changed_code": [{"header": "diff --git a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\nindex 4a8850c92..4acd331cb 100644\n--- a/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n+++ b/fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/api/client/screen/v1/ScreenEvents.java\n", "chunk": "@@ -150,28 +173,35 @@ public final class ScreenEvents {\n \tpublic interface AfterInit {\n \t\tvoid afterInit(MinecraftClient client, Screen screen, int scaledWidth, int scaledHeight);\n \t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface Remove {\n+\t\tvoid onRemove(Screen screen);\n+\t}\n+\n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeRender {\n-\t\tvoid beforeRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid beforeRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterRender {\n-\t\tvoid afterRender(MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n+\t\tvoid afterRender(Screen screen, MatrixStack matrices, int mouseX, int mouseY, float tickDelta);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface BeforeTick {\n-\t\tvoid beforeTick();\n+\t\tvoid beforeTick(Screen screen);\n \t}\n \n \t@Environment(EnvType.CLIENT)\n \t@FunctionalInterface\n \tpublic interface AfterTick {\n-\t\tvoid afterTick();\n+\t\tvoid afterTick(Screen screen);\n \t}\n \n \tprivate ScreenEvents() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "185123611a9d881425c647543ee0cf10b3495a15", "url": "https://github.com/FabricMC/fabric/commit/185123611a9d881425c647543ee0cf10b3495a15", "message": "Before init is nessecary to listen to addition/removal of child elements", "committedDate": "2020-08-07T04:53:34Z", "type": "forcePushed"}, {"oid": "126413bc8db08dbfbe8c0fd6f8fd6eff8e606731", "url": "https://github.com/FabricMC/fabric/commit/126413bc8db08dbfbe8c0fd6f8fd6eff8e606731", "message": "Before init is nessecary to listen to addition/removal of child elements", "committedDate": "2020-09-01T04:55:29Z", "type": "forcePushed"}, {"oid": "3ccacc14c7856191ec2d2381d39bef189aadee67", "url": "https://github.com/FabricMC/fabric/commit/3ccacc14c7856191ec2d2381d39bef189aadee67", "message": "Mappings updates on testmod", "committedDate": "2020-10-02T00:54:05Z", "type": "forcePushed"}, {"oid": "56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "url": "https://github.com/FabricMC/fabric/commit/56a0dbd1e0ab32c708a70eb8dc3343b5c9f80e68", "message": "javadoc formatting again", "committedDate": "2020-10-28T02:13:57Z", "type": "forcePushed"}, {"oid": "fad33ba4ffb7b494e2b65e219c15375777207055", "url": "https://github.com/FabricMC/fabric/commit/fad33ba4ffb7b494e2b65e219c15375777207055", "message": "javadoc formatting again", "committedDate": "2020-11-20T04:06:22Z", "type": "forcePushed"}, {"oid": "27d99857051c1e10db88aaee7038d0a2ffe978ba", "url": "https://github.com/FabricMC/fabric/commit/27d99857051c1e10db88aaee7038d0a2ffe978ba", "message": "Module dependencies", "committedDate": "2020-11-22T09:25:00Z", "type": "forcePushed"}, {"oid": "d881c61353d65b65b2eb36c884dc918d46d5f571", "url": "https://github.com/FabricMC/fabric/commit/d881c61353d65b65b2eb36c884dc918d46d5f571", "message": "Implement screen api", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "585ede1f279ff0e5803088172422f59f0123e4f4", "url": "https://github.com/FabricMC/fabric/commit/585ede1f279ff0e5803088172422f59f0123e4f4", "message": "Actually update to 20w27a", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "ade900474066bcb629f695e9f8b88daf30fdd179", "url": "https://github.com/FabricMC/fabric/commit/ade900474066bcb629f695e9f8b88daf30fdd179", "message": "Split render and tick events to before and after", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "a4da197d3e46b3a28a3476ff27275edf10e6bb52", "url": "https://github.com/FabricMC/fabric/commit/a4da197d3e46b3a28a3476ff27275edf10e6bb52", "message": "Rename and update", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "ff4765c1596c979b1c57c01f636ddba2614166ab", "url": "https://github.com/FabricMC/fabric/commit/ff4765c1596c979b1c57c01f636ddba2614166ab", "message": "A bit of javadoc and profiler name fixes", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "cd890185674ec10edfc12dd733b6d15240f38c3b", "url": "https://github.com/FabricMC/fabric/commit/cd890185674ec10edfc12dd733b6d15240f38c3b", "message": "Add functional interface annotations, move render and ticking events to actual FabricScreen instance.", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "url": "https://github.com/FabricMC/fabric/commit/26d6e095dd4bbdf45e40837d8904e4a70d5b3f83", "message": "Add after screen resize event", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "251079d642840b1b3f436982554adf5596084cc0", "url": "https://github.com/FabricMC/fabric/commit/251079d642840b1b3f436982554adf5596084cc0", "message": "Implement key and mouse click/press and release events.", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "1fb9dcd404309f86f7c0893e9bceb52d404bd413", "url": "https://github.com/FabricMC/fabric/commit/1fb9dcd404309f86f7c0893e9bceb52d404bd413", "message": "Move keyboard and mouse events to their own pojos", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "ed17f6bcc330e4695f01ae39f20236d16c7d7de8", "url": "https://github.com/FabricMC/fabric/commit/ed17f6bcc330e4695f01ae39f20236d16c7d7de8", "message": "Init and resize are the same thing. Maybe Screen#init needs a rename", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "4beaf04abd414d702bbe1454ac1a2d2740885694", "url": "https://github.com/FabricMC/fabric/commit/4beaf04abd414d702bbe1454ac1a2d2740885694", "message": "Add mouse scroll events", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "5c78e1f1559251954182e88b9412ee00fe79322d", "url": "https://github.com/FabricMC/fabric/commit/5c78e1f1559251954182e88b9412ee00fe79322d", "message": "checkstyle", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "22d1bf054d654b7954b58f505c2cabe72fc7b13f", "url": "https://github.com/FabricMC/fabric/commit/22d1bf054d654b7954b58f505c2cabe72fc7b13f", "message": "Refresh event instances after init", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "65d008c89b3e930674d1d126a226fb5d1b1a4e41", "url": "https://github.com/FabricMC/fabric/commit/65d008c89b3e930674d1d126a226fb5d1b1a4e41", "message": "Before init is nessecary to listen to addition/removal of child elements", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "c40779f62040ca0bb777ce072073fa1e87799146", "url": "https://github.com/FabricMC/fabric/commit/c40779f62040ca0bb777ce072073fa1e87799146", "message": "Polish up the javadoc and do a rename to the public api interface.", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "110669020a3f2eb2ad980bb5004dbdf0b8562483", "url": "https://github.com/FabricMC/fabric/commit/110669020a3f2eb2ad980bb5004dbdf0b8562483", "message": "Mappings updates on testmod", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "bd7fa98ad5836abd8ed8dba64eb14824c0c450f7", "url": "https://github.com/FabricMC/fabric/commit/bd7fa98ad5836abd8ed8dba64eb14824c0c450f7", "message": "javadoc formatting again", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "787f48725d2665d22b493ea987ac282bbd0cd4bd", "url": "https://github.com/FabricMC/fabric/commit/787f48725d2665d22b493ea987ac282bbd0cd4bd", "message": "Rework screen api design to be more ergonomic.", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "e6a01147b87772dc2bcba739d26480b413992c1a", "url": "https://github.com/FabricMC/fabric/commit/e6a01147b87772dc2bcba739d26480b413992c1a", "message": "Add remove event, some javadoc", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "d01613d6d1daae0a579545765d43ce7384e3beb5", "url": "https://github.com/FabricMC/fabric/commit/d01613d6d1daae0a579545765d43ce7384e3beb5", "message": "Add allow phase", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "ac28de50761b962f24e8749fbc1c727f03d7e044", "url": "https://github.com/FabricMC/fabric/commit/ac28de50761b962f24e8749fbc1c727f03d7e044", "message": "Module dependencies", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "610bd6ddcd28f23a8920f008e9f6256c18cda9c0", "url": "https://github.com/FabricMC/fabric/commit/610bd6ddcd28f23a8920f008e9f6256c18cda9c0", "message": "Fix null ticking when no screen is open", "committedDate": "2020-12-12T21:52:09Z", "type": "commit"}, {"oid": "47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "url": "https://github.com/FabricMC/fabric/commit/47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "message": "Refer to GLFW constants in mouse click/release events", "committedDate": "2020-12-12T22:24:58Z", "type": "commit"}, {"oid": "47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "url": "https://github.com/FabricMC/fabric/commit/47de7ec9b0ea945d2ddafed1443f2d8634fc1845", "message": "Refer to GLFW constants in mouse click/release events", "committedDate": "2020-12-12T22:24:58Z", "type": "forcePushed"}, {"oid": "f9d2b942a3ba75ac69b4dc4cee855c8dc6a78499", "url": "https://github.com/FabricMC/fabric/commit/f9d2b942a3ba75ac69b4dc4cee855c8dc6a78499", "message": "Keyboard event GLFW constant javadoc", "committedDate": "2020-12-13T23:11:07Z", "type": "commit"}, {"oid": "9688302b8638e4c1f523f5917a9d1522ca681135", "url": "https://github.com/FabricMC/fabric/commit/9688302b8638e4c1f523f5917a9d1522ca681135", "message": "Remove redundant qualifier", "committedDate": "2020-12-24T22:22:36Z", "type": "commit"}, {"oid": "80a86c77d696b8f0824d9237d75a230ba6ed7d38", "url": "https://github.com/FabricMC/fabric/commit/80a86c77d696b8f0824d9237d75a230ba6ed7d38", "message": "Some docs, degetterifying", "committedDate": "2021-01-18T04:39:35Z", "type": "commit"}, {"oid": "3171d32e55485fe6ef9a7bbddb5a0866f6809204", "url": "https://github.com/FabricMC/fabric/commit/3171d32e55485fe6ef9a7bbddb5a0866f6809204", "message": "Because global go brr add screen params back around", "committedDate": "2021-01-18T05:25:24Z", "type": "commit"}, {"oid": "165d3e3e2e36414241cae113990520cf92d4bdb8", "url": "https://github.com/FabricMC/fabric/commit/165d3e3e2e36414241cae113990520cf92d4bdb8", "message": "Add module lifecycle to FMJ", "committedDate": "2021-01-19T02:41:54Z", "type": "commit"}]}