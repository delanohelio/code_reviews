{"pr_number": 525, "pr_title": "Fix some known issues with the registry sync module.", "pr_author": "modmuss50", "pr_createdAt": "2020-03-11T19:34:05Z", "pr_url": "https://github.com/FabricMC/fabric/pull/525", "timeline": [{"oid": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "url": "https://github.com/FabricMC/fabric/commit/1b0605ea5f722a18737bab4aa4cfa717905d8105", "message": "Try to detect if a registry is modded, if its not it will left alone and no syncing or saving will take place.", "committedDate": "2020-03-11T19:29:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0OTU5NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r391449595", "body": "Shouldn't this be a set ?", "bodyText": "Shouldn't this be a set ?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be a set ?</p>", "author": "Pyrofab", "createdAt": "2020-03-12T07:53:52Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -55,6 +59,9 @@\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n \n+\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();\n+\tpublic static final ArrayList<Registry<?>> moddedRegistries = new ArrayList<>();", "originalCommit": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c7a00f35f545635f429b5eaa455e87b5babd78a", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 81a62a22..15cd9c24 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -46,27 +51,25 @@ import net.minecraft.util.PacketByteBuf;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n \n+import net.fabricmc.loader.api.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.fabric.api.network.PacketContext;\n import net.fabricmc.fabric.api.network.ServerSidePacketRegistry;\n-import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n-import net.fabricmc.fabric.api.event.registry.RegistryEntryRemovedCallback;\n \n public final class RegistrySyncManager {\n \tstatic final boolean DEBUG = System.getProperty(\"fabric.registry.debug\", \"false\").equalsIgnoreCase(\"true\");\n \tstatic final Identifier ID = new Identifier(\"fabric\", \"registry/sync\");\n \tprivate static final Logger LOGGER = LogManager.getLogger();\n \tprivate static final boolean DEBUG_WRITE_REGISTRY_DATA = System.getProperty(\"fabric.registry.debug.writeContentsAsCsv\", \"false\").equalsIgnoreCase(\"true\");\n-\tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n-\tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n+\tprivate static final RegistryTypes REGISTRY_TYPES = RegistryTypes.getInstance();\n \n-\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();\n-\tpublic static final ArrayList<Registry<?>> moddedRegistries = new ArrayList<>();\n+\tpublic static boolean postBootstrap = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n-\t\tbuf.writeCompoundTag(toTag(true));\n+\t\tbuf.writeCompoundTag(toTag(true, null));\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n \t}\n", "next_change": {"commit": "57cf312c5e581efb0a1414bed2525b4fe3e362ba", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 15cd9c24..fc5f1b31 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -47,27 +39,29 @@ import org.apache.logging.log4j.Logger;\n import net.minecraft.nbt.CompoundTag;\n import net.minecraft.network.Packet;\n import net.minecraft.util.Identifier;\n-import net.minecraft.util.PacketByteBuf;\n+import net.minecraft.network.PacketByteBuf;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n \n-import net.fabricmc.loader.api.FabricLoader;\n-import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.fabric.api.network.PacketContext;\n import net.fabricmc.fabric.api.network.ServerSidePacketRegistry;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n \n public final class RegistrySyncManager {\n \tstatic final boolean DEBUG = System.getProperty(\"fabric.registry.debug\", \"false\").equalsIgnoreCase(\"true\");\n \tstatic final Identifier ID = new Identifier(\"fabric\", \"registry/sync\");\n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n \tprivate static final boolean DEBUG_WRITE_REGISTRY_DATA = System.getProperty(\"fabric.registry.debug.writeContentsAsCsv\", \"false\").equalsIgnoreCase(\"true\");\n-\tprivate static final RegistryTypes REGISTRY_TYPES = RegistryTypes.getInstance();\n \n+\t//Set to true after vanilla's bootstrap has completed\n \tpublic static boolean postBootstrap = false;\n+\tprivate static boolean hasChecked = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n+\t\tLOGGER.debug(\"Creating registry sync packet\");\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(toTag(true, null));\n \n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex fc5f1b31..60a169da 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -56,14 +55,19 @@ public final class RegistrySyncManager {\n \n \t//Set to true after vanilla's bootstrap has completed\n \tpublic static boolean postBootstrap = false;\n-\tprivate static boolean hasChecked = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n-\t\tbuf.writeCompoundTag(toTag(true, null));\n+\t\tCompoundTag tag = toTag(true, null);\n+\n+\t\tif (tag == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n \t}\n", "next_change": {"commit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da..88a0e2b7 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,13 +60,14 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n+\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 88a0e2b78..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,14 +60,13 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": {"commit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da0..88a0e2b78 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,13 +60,14 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n+\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0OTkxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r391449918", "body": "Should use fastutil's `Object2IntMap`", "bodyText": "Should use fastutil's Object2IntMap", "bodyHTML": "<p dir=\"auto\">Should use fastutil's <code>Object2IntMap</code></p>", "author": "Pyrofab", "createdAt": "2020-03-12T07:54:44Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -55,6 +59,9 @@\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n \n+\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();", "originalCommit": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c7a00f35f545635f429b5eaa455e87b5babd78a", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 81a62a22..15cd9c24 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -46,27 +51,25 @@ import net.minecraft.util.PacketByteBuf;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n \n+import net.fabricmc.loader.api.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.fabric.api.network.PacketContext;\n import net.fabricmc.fabric.api.network.ServerSidePacketRegistry;\n-import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n-import net.fabricmc.fabric.api.event.registry.RegistryEntryRemovedCallback;\n \n public final class RegistrySyncManager {\n \tstatic final boolean DEBUG = System.getProperty(\"fabric.registry.debug\", \"false\").equalsIgnoreCase(\"true\");\n \tstatic final Identifier ID = new Identifier(\"fabric\", \"registry/sync\");\n \tprivate static final Logger LOGGER = LogManager.getLogger();\n \tprivate static final boolean DEBUG_WRITE_REGISTRY_DATA = System.getProperty(\"fabric.registry.debug.writeContentsAsCsv\", \"false\").equalsIgnoreCase(\"true\");\n-\tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n-\tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n+\tprivate static final RegistryTypes REGISTRY_TYPES = RegistryTypes.getInstance();\n \n-\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();\n-\tpublic static final ArrayList<Registry<?>> moddedRegistries = new ArrayList<>();\n+\tpublic static boolean postBootstrap = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n-\t\tbuf.writeCompoundTag(toTag(true));\n+\t\tbuf.writeCompoundTag(toTag(true, null));\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n \t}\n", "next_change": {"commit": "57cf312c5e581efb0a1414bed2525b4fe3e362ba", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 15cd9c24..fc5f1b31 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -47,27 +39,29 @@ import org.apache.logging.log4j.Logger;\n import net.minecraft.nbt.CompoundTag;\n import net.minecraft.network.Packet;\n import net.minecraft.util.Identifier;\n-import net.minecraft.util.PacketByteBuf;\n+import net.minecraft.network.PacketByteBuf;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n \n-import net.fabricmc.loader.api.FabricLoader;\n-import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.fabric.api.network.PacketContext;\n import net.fabricmc.fabric.api.network.ServerSidePacketRegistry;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n \n public final class RegistrySyncManager {\n \tstatic final boolean DEBUG = System.getProperty(\"fabric.registry.debug\", \"false\").equalsIgnoreCase(\"true\");\n \tstatic final Identifier ID = new Identifier(\"fabric\", \"registry/sync\");\n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n \tprivate static final boolean DEBUG_WRITE_REGISTRY_DATA = System.getProperty(\"fabric.registry.debug.writeContentsAsCsv\", \"false\").equalsIgnoreCase(\"true\");\n-\tprivate static final RegistryTypes REGISTRY_TYPES = RegistryTypes.getInstance();\n \n+\t//Set to true after vanilla's bootstrap has completed\n \tpublic static boolean postBootstrap = false;\n+\tprivate static boolean hasChecked = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n+\t\tLOGGER.debug(\"Creating registry sync packet\");\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(toTag(true, null));\n \n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex fc5f1b31..60a169da 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -56,14 +55,19 @@ public final class RegistrySyncManager {\n \n \t//Set to true after vanilla's bootstrap has completed\n \tpublic static boolean postBootstrap = false;\n-\tprivate static boolean hasChecked = false;\n \n \tprivate RegistrySyncManager() { }\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n \t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n-\t\tbuf.writeCompoundTag(toTag(true, null));\n+\t\tCompoundTag tag = toTag(true, null);\n+\n+\t\tif (tag == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n \t}\n", "next_change": {"commit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da..88a0e2b7 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,13 +60,14 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n+\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 88a0e2b78..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,14 +60,13 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": {"commit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da0..88a0e2b78 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -60,13 +60,14 @@ public final class RegistrySyncManager {\n \n \tpublic static Packet<?> createPacket() {\n \t\tLOGGER.debug(\"Creating registry sync packet\");\n-\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n+\n \t\tCompoundTag tag = toTag(true, null);\n \n \t\tif (tag == null) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tPacketByteBuf buf = new PacketByteBuf(Unpooled.buffer());\n \t\tbuf.writeCompoundTag(tag);\n \n \t\treturn ServerSidePacketRegistry.INSTANCE.toPacket(ID, buf);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "1c7a00f35f545635f429b5eaa455e87b5babd78a", "url": "https://github.com/FabricMC/fabric/commit/1c7a00f35f545635f429b5eaa455e87b5babd78a", "message": "Some more work on moddable registries", "committedDate": "2020-03-16T21:17:29Z", "type": "commit"}, {"oid": "c4eefc32a80ea8924bd645c40b8c7e9a11eeaa73", "url": "https://github.com/FabricMC/fabric/commit/c4eefc32a80ea8924bd645c40b8c7e9a11eeaa73", "message": "Checkstyle", "committedDate": "2020-03-16T21:26:33Z", "type": "commit"}, {"oid": "de260f3066543079fa2c63aa86438adf6f153376", "url": "https://github.com/FabricMC/fabric/commit/de260f3066543079fa2c63aa86438adf6f153376", "message": "Fix licences", "committedDate": "2020-03-16T21:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMjUwNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r393332506", "body": "This may not be ideal, as mod provided registries should be able to define these.", "bodyText": "This may not be ideal, as mod provided registries should be able to define these.", "bodyHTML": "<p dir=\"auto\">This may not be ideal, as mod provided registries should be able to define these.</p>", "author": "modmuss50", "createdAt": "2020-03-16T21:57:38Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +268,67 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\t\t((ModdableRegistry) registry).storeIdHash(registry.getIds().hashCode());\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\tprivate static void markModded(Registry<?> registry) {\n+\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\t((ModdableRegistry) registry).markModded();\n+\t\t} else {\n+\t\t\tthrow new RuntimeException(\"Cannot mark a none moddable registry as modded!\");\n+\t\t}\n+\t}\n+\n+\tpublic static boolean isRegistryModded(Identifier registryId) {\n+\t\t//All none minecraft registries are modded\n+\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tRegistry<?> registry = Registry.REGISTRIES.get(registryId);\n+\n+\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\tModdableRegistry moddableRegistry = (ModdableRegistry) registry;\n+\t\t\treturn moddableRegistry.isModded();\n+\t\t} else {\n+\t\t\treturn false; //TODO what should this be?\n+\t\t}\n+\t}\n+\n+\tprivate static class RegistryTypes {", "originalCommit": "de260f3066543079fa2c63aa86438adf6f153376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1062b723644b43e6b774588a92056e5d1547ec98", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 16cd3c7df..24c2c6a4a 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -302,33 +300,4 @@ public final class RegistrySyncManager {\n \t\t\treturn false; //TODO what should this be?\n \t\t}\n \t}\n-\n-\tprivate static class RegistryTypes {\n-\t\tprivate List<Identifier> nonePersistent;\n-\t\tprivate List<Identifier> persistent;\n-\t\tprivate List<Identifier> networkBlacklist;\n-\n-\t\tprivate static Gson GSON = new GsonBuilder()\n-\t\t\t\t.registerTypeAdapter(Identifier.class, new TypeAdapter<Identifier>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void write(JsonWriter out, Identifier value) throws IOException {\n-\t\t\t\t\t\tout.value(value.toString());\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Identifier read(JsonReader in) throws IOException {\n-\t\t\t\t\t\treturn new Identifier(in.nextString());\n-\t\t\t\t\t}\n-\t\t\t\t}).create();\n-\n-\t\tpublic static RegistryTypes getInstance() {\n-\t\t\tModContainer modContainer = FabricLoader.getInstance().getModContainer(\"fabric-registry-sync-v0\").get();\n-\n-\t\t\ttry (InputStreamReader isr = new InputStreamReader(Files.newInputStream(modContainer.getPath(\"fabric-registry-sync-v0.registry-types.json\")))) {\n-\t\t\t\treturn GSON.fromJson(isr, RegistryTypes.class);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to read registry types\", e);\n-\t\t\t}\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 24c2c6a4a..a01211fcf 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -293,11 +303,6 @@ public final class RegistrySyncManager {\n \n \t\tRegistry<?> registry = Registry.REGISTRIES.get(registryId);\n \n-\t\tif (registry instanceof ModdableRegistry) {\n-\t\t\tModdableRegistry moddableRegistry = (ModdableRegistry) registry;\n-\t\t\treturn moddableRegistry.isModded();\n-\t\t} else {\n-\t\t\treturn false; //TODO what should this be?\n-\t\t}\n+\t\treturn RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.MODDED);\n \t}\n }\n", "next_change": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex a01211fcf..8767cd4b8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -294,15 +295,4 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \t}\n-\n-\tpublic static boolean isRegistryModded(Identifier registryId) {\n-\t\t//All none minecraft registries are modded\n-\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tRegistry<?> registry = Registry.REGISTRIES.get(registryId);\n-\n-\t\treturn RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.MODDED);\n-\t}\n }\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 8767cd4b8..d96ae1d57 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -271,28 +274,6 @@ public final class RegistrySyncManager {\n \t}\n \n \tpublic static void bootstrapRegistries() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\t((HashedRegistry) registry).storeHash();\n-\t\t\t}\n-\t\t}\n-\n \t\tpostBootstrap = true;\n \t}\n-\n-\t// Checks the stored hash against the current hash, if it has changed mark as modded\n-\tpublic static void checkRegistryHashes() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\tif (((HashedRegistry) registry).getStoredHash() != ((HashedRegistry) registry).storeHash()) {\n-\t\t\t\t\tRegistryAttributeHolder<?> holder = RegistryAttributeHolder.get(registry);\n-\n-\t\t\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n-\t\t\t\t\t\tLOGGER.debug(\"Registry {} has been marked as modded as the hash changed since bootstrap\", Registry.REGISTRIES.getId(registry));\n-\t\t\t\t\t\tholder.addAttribute(RegistryAttribute.MODDED);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "b5259c209890b4b50c3bd512f1434e463245427e", "url": "https://github.com/FabricMC/fabric/commit/b5259c209890b4b50c3bd512f1434e463245427e", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-04-16T21:43:36Z", "type": "commit"}, {"oid": "1062b723644b43e6b774588a92056e5d1547ec98", "url": "https://github.com/FabricMC/fabric/commit/1062b723644b43e6b774588a92056e5d1547ec98", "message": "Cleanup registry attributes", "committedDate": "2020-04-16T22:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4Njk0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409886948", "body": "Hmm, can we use like a class than an enum in case mods add custom attributes", "bodyText": "Hmm, can we use like a class than an enum in case mods add custom attributes", "bodyHTML": "<p dir=\"auto\">Hmm, can we use like a class than an enum in case mods add custom attributes</p>", "author": "liach", "createdAt": "2020-04-16T22:33:18Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+public enum RegistryAttribute {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNTMzNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409905336", "bodyText": "Humm, possibly. Not too sure what the use would be / if they would need to be more than just a yes/no?", "author": "modmuss50", "createdAt": "2020-04-16T23:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4Njk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\nindex ee87ab3c1..da8b94d53 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\n", "chunk": "@@ -1,14 +1,18 @@\n package net.fabricmc.fabric.api.event.registry;\n \n public enum RegistryAttribute {\n-\n \t/**\n-\t * Registry will be saved to disk\n+\t * Registry will be saved to disk when modded.\n \t */\n \tPERSISTENT,\n \n \t/**\n-\t * Registry will be synced to the client\n+\t * Registry will be synced to the client when modded.\n+\t */\n+\tSYNC,\n+\n+\t/**\n+\t * Registry has been modded.\n \t */\n-\tSYNC\n+\tMODDED\n }\n", "next_change": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\nindex da8b94d53..fca0ff5e3 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java\n", "chunk": "@@ -4,12 +4,12 @@ public enum RegistryAttribute {\n \t/**\n \t * Registry will be saved to disk when modded.\n \t */\n-\tPERSISTENT,\n+\tPERSISTED,\n \n \t/**\n \t * Registry will be synced to the client when modded.\n \t */\n-\tSYNC,\n+\tSYNCED,\n \n \t/**\n \t * Registry has been modded.\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzI5Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409887296", "body": "I'd prefer one\r\n```java\r\nvoid registerAttributes(Registry<?> registry, RegistryAttribute attribute);\r\nvoid registerAttributes(Registry<?> registry, RegistryAttribute... attributes);\r\n```\r\ninstead\r\n\r\nAlso consider turning these attributes into like keys, like `RegistryAttribute<T>` where `T` may carry custom values for properties", "bodyText": "I'd prefer one\nvoid registerAttributes(Registry<?> registry, RegistryAttribute attribute);\nvoid registerAttributes(Registry<?> registry, RegistryAttribute... attributes);\ninstead\nAlso consider turning these attributes into like keys, like RegistryAttribute<T> where T may carry custom values for properties", "bodyHTML": "<p dir=\"auto\">I'd prefer one</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"void registerAttributes(Registry&lt;?&gt; registry, RegistryAttribute attribute);\nvoid registerAttributes(Registry&lt;?&gt; registry, RegistryAttribute... attributes);\"><pre><span class=\"pl-k\">void</span> registerAttributes(<span class=\"pl-k\">Registry&lt;?&gt;</span> registry, <span class=\"pl-smi\">RegistryAttribute</span> attribute);\n<span class=\"pl-k\">void</span> registerAttributes(<span class=\"pl-k\">Registry&lt;?&gt;</span> registry, <span class=\"pl-smi\">RegistryAttribute</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">..</span> attributes);</pre></div>\n<p dir=\"auto\">instead</p>\n<p dir=\"auto\">Also consider turning these attributes into like keys, like <code>RegistryAttribute&lt;T&gt;</code> where <code>T</code> may carry custom values for properties</p>", "author": "liach", "createdAt": "2020-04-16T22:34:12Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+//TODO better class name here lol\n+public interface RegistryAttributeRegistry {\n+\n+\tRegistryAttributeRegistry INSTANCE = RegistryAttributeRegistryImpl.INSTANCE;\n+\n+\tvoid registerAttributes(RegistryAttribute attribute, Registry<?>... registries);", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODgwNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r418778804", "bodyText": "Possibly, I want to rethink this this part of the API.", "author": "modmuss50", "createdAt": "2020-05-01T23:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java\ndeleted file mode 100644\nindex 0a6d45ab3..000000000\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,20 +0,0 @@\n-package net.fabricmc.fabric.api.event.registry;\n-\n-import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n-import net.minecraft.util.Identifier;\n-import net.minecraft.util.registry.Registry;\n-\n-//TODO better class name here lol\n-public interface RegistryAttributeRegistry {\n-\n-\tRegistryAttributeRegistry INSTANCE = RegistryAttributeRegistryImpl.INSTANCE;\n-\n-\tvoid registerAttributes(RegistryAttribute attribute, Registry<?>... registries);\n-\n-\tboolean hasAttribute(Registry<?> registry, RegistryAttribute attribute);\n-\n-\tdefault boolean hasAttribute(Identifier registryID, RegistryAttribute attribute) {\n-\t\treturn hasAttribute(Registry.REGISTRIES.get(registryID), attribute);\n-\t}\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDc1NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409884754", "body": "Would `SyncAttributeRegistry` make sense?", "bodyText": "Would SyncAttributeRegistry make sense?", "bodyHTML": "<p dir=\"auto\">Would <code>SyncAttributeRegistry</code> make sense?</p>", "author": "i509VCB", "createdAt": "2020-04-16T22:27:31Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+//TODO better class name here lol\n+public interface RegistryAttributeRegistry {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTA2Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409889067", "bodyText": "Its more than just syncing", "author": "modmuss50", "createdAt": "2020-04-16T22:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java\ndeleted file mode 100644\nindex 0a6d45ab3..000000000\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,20 +0,0 @@\n-package net.fabricmc.fabric.api.event.registry;\n-\n-import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n-import net.minecraft.util.Identifier;\n-import net.minecraft.util.registry.Registry;\n-\n-//TODO better class name here lol\n-public interface RegistryAttributeRegistry {\n-\n-\tRegistryAttributeRegistry INSTANCE = RegistryAttributeRegistryImpl.INSTANCE;\n-\n-\tvoid registerAttributes(RegistryAttribute attribute, Registry<?>... registries);\n-\n-\tboolean hasAttribute(Registry<?> registry, RegistryAttribute attribute);\n-\n-\tdefault boolean hasAttribute(Identifier registryID, RegistryAttribute attribute) {\n-\t\treturn hasAttribute(Registry.REGISTRIES.get(registryID), attribute);\n-\t}\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTcwMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409885700", "body": "Maybe throw a comment in, like a `TODO` saying we need to add new registries to this list if a new one appears during an update.\r\n\r\nAlso could there be a way we can `detect` if a registry needs to be synced or persisted without having to manually specify these for all 39+ registries.", "bodyText": "Maybe throw a comment in, like a TODO saying we need to add new registries to this list if a new one appears during an update.\nAlso could there be a way we can detect if a registry needs to be synced or persisted without having to manually specify these for all 39+ registries.", "bodyHTML": "<p dir=\"auto\">Maybe throw a comment in, like a <code>TODO</code> saying we need to add new registries to this list if a new one appears during an update.</p>\n<p dir=\"auto\">Also could there be a way we can <code>detect</code> if a registry needs to be synced or persisted without having to manually specify these for all 39+ registries.</p>", "author": "i509VCB", "createdAt": "2020-04-16T22:30:05Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t//TODO this is a basic list of what should be done, a full list needs to be created", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNTA3Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409905072", "bodyText": "Yes, this TODO here is just saying that its incomplete and need fully populating before its ready to be merged.\nIm not sure of a way to be able to detect this, it would be nice to be able to ensure that we cover all bases. This is honesly going to be a big pita to keep up to date and correct, but I dont see another way to go about this.", "author": "modmuss50", "createdAt": "2020-04-16T23:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex c0eaaa10c..f5b7f05b0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -1,23 +1,27 @@\n package net.fabricmc.fabric.impl.registry.sync;\n \n+import net.minecraft.util.registry.Registry;\n+\n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n-import net.fabricmc.fabric.api.event.registry.RegistryAttributeRegistry;\n-import net.minecraft.util.registry.Registry;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n \n public class FabricRegistryInit implements ModInitializer {\n \t@Override\n \tpublic void onInitialize() {\n-\t\t//TODO this is a basic list of what should be done, a full list needs to be created\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNC);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNC);\n \n-\t\tRegistryAttributeRegistry.INSTANCE.registerAttributes(RegistryAttribute.SYNC,\n-\t\t\t\tRegistry.BLOCK,\n-\t\t\t\tRegistry.ITEM,\n-\t\t\t\tRegistry.BIOME\n-\t\t);\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNC)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTENT);\n \n-\t\tRegistryAttributeRegistry.INSTANCE.registerAttributes(RegistryAttribute.PERSISTENT,\n-\t\t\t\tRegistry.BIOME\n-\t\t);\n+\t\t// StatusEffectInstance serialises with raw id\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNC)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTENT);\n \t}\n }\n", "next_change": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex f5b7f05b0..37f785fb3 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -10,18 +10,18 @@ public class FabricRegistryInit implements ModInitializer {\n \t@Override\n \tpublic void onInitialize() {\n \t\tRegistryAttributeHolder.get(Registry.BLOCK)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNC);\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\tRegistryAttributeHolder.get(Registry.ITEM)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNC);\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\tRegistryAttributeHolder.get(Registry.BIOME)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNC)\n-\t\t\t\t.addAttribute(RegistryAttribute.PERSISTENT);\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n \t\t// StatusEffectInstance serialises with raw id\n \t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNC)\n-\t\t\t\t.addAttribute(RegistryAttribute.PERSISTENT);\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \t}\n }\n", "next_change": {"commit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 37f785fb3..fa559d9da 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -9,19 +25,134 @@ import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n public class FabricRegistryInit implements ModInitializer {\n \t@Override\n \tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n \t\tRegistryAttributeHolder.get(Registry.BLOCK)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n \t\tRegistryAttributeHolder.get(Registry.ITEM)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n \t\tRegistryAttributeHolder.get(Registry.BIOME)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// StatusEffectInstance serialises with raw id\n-\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.MEMORY_MODULE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.SENSOR_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.SCHEDULE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \t}\n }\n", "next_change": {"commit": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..55a5a2d06 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -73,86 +73,103 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n \n-\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\t// Synced in ParticleS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n \n-\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n \t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\t// Synced in PaintingSpawnS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n \t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n \n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n \n-\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\t// Synced in OpenScreenS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n \n+\t\t// Synced by id\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n \n+\t\t// Synced and saved by id\n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n-\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n \t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.MEMORY_MODULE_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SENSOR_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SCHEDULE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \t}\n }\n", "next_change": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 55a5a2d06..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -171,5 +168,14 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25299);\n \t}\n }\n", "next_change": {"commit": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex b5957e199..64ce2b927 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -169,13 +169,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_POOL_ENTRY_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_FUNCTION_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25299);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_CONDITION_TYPE);\n \t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NjQzMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409886432", "body": "Maybe this should be `ModifiableRegistry`?", "bodyText": "Maybe this should be ModifiableRegistry?", "bodyHTML": "<p dir=\"auto\">Maybe this should be <code>ModifiableRegistry</code>?</p>", "author": "i509VCB", "createdAt": "2020-04-16T22:31:55Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/ModdableRegistry.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+public interface ModdableRegistry {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzgxNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409903815", "bodyText": "Possibly, Modifiable might mean its changeable, where as this is directally a reigstry that can have modded items in.\nI might remove this instance and move it to be part of the attributes.", "author": "modmuss50", "createdAt": "2020-04-16T23:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NjQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/ModdableRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/HashedRegistry.java\nsimilarity index 86%\nrename from fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/ModdableRegistry.java\nrename to fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/HashedRegistry.java\nindex 5e44eb6df..b5bc32e30 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/ModdableRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/HashedRegistry.java\n", "chunk": "@@ -16,10 +16,8 @@\n \n package net.fabricmc.fabric.impl.registry.sync;\n \n-public interface ModdableRegistry {\n-\tboolean isModded();\n+public interface HashedRegistry {\n+\tint getStoredHash();\n \n-\tvoid markModded();\n-\n-\tvoid storeIdHash(int hash);\n+\tint storeHash();\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409887342", "body": "Would a version bump make sense?\r\n\r\nObviously the schema hasn't changed but it's worth considering.", "bodyText": "Would a version bump make sense?\nObviously the schema hasn't changed but it's worth considering.", "bodyHTML": "<p dir=\"auto\">Would a version bump make sense?</p>\n<p dir=\"auto\">Obviously the schema hasn't changed but it's worth considering.</p>", "author": "i509VCB", "createdAt": "2020-04-16T22:34:20Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -168,18 +204,38 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t\tregistryTag.putInt(id.toString(), rawId);\n \t\t\t\t}\n \n+\t\t\t\t// Look for existing registry key/values that are not in the current registries\n+\t\t\t\tif (!isClientSync && existingRegistryData != null) {\n+\t\t\t\t\tfor (String key : existingRegistryData.getKeys()) {\n+\t\t\t\t\t\tif (!registryTag.contains(key)) {\n+\t\t\t\t\t\t\tLOGGER.info(\"Saving orphaned registry entry: \" + key);\n+\t\t\t\t\t\t\tregistryTag.putInt(key, registryTag.getInt(key));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n \t\t\t\tmainTag.put(registryId.toString(), registryTag);\n \t\t\t}\n \t\t}\n \n+\t\t// Ensure any orphaned registry's are kept on disk\n+\t\tif (!isClientSync && activeIdMap != null) {\n+\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\t\t\tif (!mainTag.contains(registryKey)) {\n+\t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n+\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTgxMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409889812", "bodyText": "imo using an arbitrary verison here is not as good as using channels with version in channel names, like fabric-registry-sync:sync/v1 etc", "author": "liach", "createdAt": "2020-04-16T22:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzUyMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409903520", "bodyText": "I think once im more happy with the state of the PR I will make it a -v1, its easier to see the changes like this now.", "author": "modmuss50", "createdAt": "2020-04-16T23:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDA4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422550082", "bodyText": "Decided this is not needed, as it should be forwards/backwards compatible, as the format didnt change.", "author": "modmuss50", "createdAt": "2020-05-09T21:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 24c2c6a4a..f750945a5 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -219,11 +225,11 @@ public final class RegistrySyncManager {\n \t\t}\n \n \t\t// Ensure any orphaned registry's are kept on disk\n-\t\tif (!isClientSync && activeIdMap != null) {\n-\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\tif (!isClientSync && activeTag != null) {\n+\t\t\tfor (String registryKey : activeTag.getKeys()) {\n \t\t\t\tif (!mainTag.contains(registryKey)) {\n \t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n-\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t\tmainTag.put(registryKey, activeTag.getCompound(registryKey));\n \t\t\t\t}\n \t\t\t}\n \t\t}\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex f750945a5..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -238,6 +244,10 @@ public final class RegistrySyncManager {\n \t\ttag.putInt(\"version\", 1);\n \t\ttag.put(\"registries\", mainTag);\n \n+\t\tif (mainTag.getKeys().isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da..88a0e2b7 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -240,14 +241,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tCompoundTag tag = new CompoundTag();\n-\t\ttag.putInt(\"version\", 1);\n-\t\ttag.put(\"registries\", mainTag);\n-\n \t\tif (mainTag.getKeys().isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tCompoundTag tag = new CompoundTag();\n+\t\ttag.putInt(\"version\", 1);\n+\t\ttag.put(\"registries\", mainTag);\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 88a0e2b78..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -241,14 +240,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tif (mainTag.getKeys().isEmpty()) {\n-\t\t\treturn null;\n-\t\t}\n-\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);\n \t\ttag.put(\"registries\", mainTag);\n \n+\t\tif (mainTag.getKeys().isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da0..88a0e2b78 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -240,14 +241,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tCompoundTag tag = new CompoundTag();\n-\t\ttag.putInt(\"version\", 1);\n-\t\ttag.put(\"registries\", mainTag);\n-\n \t\tif (mainTag.getKeys().isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tCompoundTag tag = new CompoundTag();\n+\t\ttag.putInt(\"version\", 1);\n+\t\ttag.put(\"registries\", mainTag);\n+\n \t\treturn tag;\n \t}\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "d04ae79675e225997b75f8dffa83cc3fffb46063", "url": "https://github.com/FabricMC/fabric/commit/d04ae79675e225997b75f8dffa83cc3fffb46063", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinLevelStorageSession.java", "committedDate": "2020-05-03T21:05:40Z", "type": "commit"}, {"oid": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "url": "https://github.com/FabricMC/fabric/commit/a995b1c341320be9d50e7200d5f0f14fffba0c73", "message": "Rework again", "committedDate": "2020-05-03T21:47:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTI5OQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165299", "body": "This should prob be moved from here, to adding `RegistryAttribute.MODDED` when creating the RegistryAttributeHolder", "bodyText": "This should prob be moved from here, to adding RegistryAttribute.MODDED when creating the RegistryAttributeHolder", "bodyHTML": "<p dir=\"auto\">This should prob be moved from here, to adding <code>RegistryAttribute.MODDED</code> when creating the RegistryAttributeHolder</p>", "author": "modmuss50", "createdAt": "2020-05-03T21:49:22Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +268,41 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\t((HashedRegistry) registry).storeHash();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\t// Checks the stored hash against the current hash, if it has changed mark as modded\n+\tpublic static void checkRegistryHashes() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\tif (((HashedRegistry) registry).getStoredHash() != ((HashedRegistry) registry).storeHash()) {\n+\t\t\t\t\tRegistryAttributeHolder<?> holder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\t\t\t\tLOGGER.debug(\"Registry {} has been marked as modded as the hash changed since bootstrap\", Registry.REGISTRIES.getId(registry));\n+\t\t\t\t\t\tholder.addAttribute(RegistryAttribute.MODDED);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static boolean isRegistryModded(Identifier registryId) {\n+\t\t//All none minecraft registries are modded\n+\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n+\t\t\treturn true;\n+\t\t}", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex a01211fcf..8767cd4b8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -294,15 +295,4 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \t}\n-\n-\tpublic static boolean isRegistryModded(Identifier registryId) {\n-\t\t//All none minecraft registries are modded\n-\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tRegistry<?> registry = Registry.REGISTRIES.get(registryId);\n-\n-\t\treturn RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.MODDED);\n-\t}\n }\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 8767cd4b8..d96ae1d57 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -271,28 +274,6 @@ public final class RegistrySyncManager {\n \t}\n \n \tpublic static void bootstrapRegistries() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\t((HashedRegistry) registry).storeHash();\n-\t\t\t}\n-\t\t}\n-\n \t\tpostBootstrap = true;\n \t}\n-\n-\t// Checks the stored hash against the current hash, if it has changed mark as modded\n-\tpublic static void checkRegistryHashes() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\tif (((HashedRegistry) registry).getStoredHash() != ((HashedRegistry) registry).storeHash()) {\n-\t\t\t\t\tRegistryAttributeHolder<?> holder = RegistryAttributeHolder.get(registry);\n-\n-\t\t\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n-\t\t\t\t\t\tLOGGER.debug(\"Registry {} has been marked as modded as the hash changed since bootstrap\", Registry.REGISTRIES.getId(registry));\n-\t\t\t\t\t\tholder.addAttribute(RegistryAttribute.MODDED);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTQwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165401", "body": "Would storing the values or implementing the `RegistryAttributeHolder` onto the Registry make more sense?", "bodyText": "Would storing the values or implementing the RegistryAttributeHolder onto the Registry make more sense?", "bodyHTML": "<p dir=\"auto\">Would storing the values or implementing the <code>RegistryAttributeHolder</code> onto the Registry make more sense?</p>", "author": "i509VCB", "createdAt": "2020-05-03T21:50:14Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class RegistryAttributesImpl<T> implements RegistryAttributeHolder<T> {\n+\tprivate static final Map<Registry<?>, RegistryAttributeHolder<?>> registryAttributeMap = new HashMap<>();", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2Njg1NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419166855", "bodyText": "Yes, possibly. I dont see why not", "author": "modmuss50", "createdAt": "2020-05-03T22:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\nindex d7d54954b..f6435d716 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n", "chunk": "@@ -5,6 +5,7 @@ import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n+import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n", "next_change": {"commit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\ndeleted file mode 100644\nindex f6435d716..000000000\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-package net.fabricmc.fabric.impl.registry.sync;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import net.minecraft.util.registry.MutableRegistry;\n-import net.minecraft.util.registry.Registry;\n-\n-import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n-import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n-\n-public class RegistryAttributesImpl<T> implements RegistryAttributeHolder<T> {\n-\tprivate static final Map<Registry<?>, RegistryAttributeHolder<?>> registryAttributeMap = new HashMap<>();\n-\n-\tpublic static <T> RegistryAttributeHolder<T> get(Registry<T> registry) {\n-\t\t//noinspection unchecked\n-\t\treturn (RegistryAttributeHolder<T>) registryAttributeMap.computeIfAbsent(registry, RegistryAttributesImpl::new);\n-\t}\n-\n-\tpublic RegistryAttributesImpl(Registry<T> registry) {\n-\t\tif (registry instanceof MutableRegistry) {\n-\t\t\tif (!Registry.REGISTRIES.getId((MutableRegistry<?>) registry).getNamespace().equals(\"minecraft\")) {\n-\t\t\t\t// By default always sync, save and mark modded registries as modded\n-\t\t\t\taddAttribute(RegistryAttribute.SYNCED);\n-\t\t\t\taddAttribute(RegistryAttribute.PERSISTED);\n-\t\t\t\taddAttribute(RegistryAttribute.MODDED);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n-\n-\t@Override\n-\tpublic RegistryAttributeHolder<T> addAttribute(RegistryAttribute attribute) {\n-\t\tattributes.add(attribute);\n-\t\treturn this;\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasAttribute(RegistryAttribute attribute) {\n-\t\treturn attributes.contains(attribute);\n-\t}\n-}\n", "next_change": null}]}}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\nindex d7d54954b..f6435d716 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n", "chunk": "@@ -15,7 +16,18 @@ public class RegistryAttributesImpl<T> implements RegistryAttributeHolder<T> {\n \n \tpublic static <T> RegistryAttributeHolder<T> get(Registry<T> registry) {\n \t\t//noinspection unchecked\n-\t\treturn (RegistryAttributeHolder<T>) registryAttributeMap.computeIfAbsent(registry, r -> new RegistryAttributesImpl<>());\n+\t\treturn (RegistryAttributeHolder<T>) registryAttributeMap.computeIfAbsent(registry, RegistryAttributesImpl::new);\n+\t}\n+\n+\tpublic RegistryAttributesImpl(Registry<T> registry) {\n+\t\tif (registry instanceof MutableRegistry) {\n+\t\t\tif (!Registry.REGISTRIES.getId((MutableRegistry<?>) registry).getNamespace().equals(\"minecraft\")) {\n+\t\t\t\t// By default always sync, save and mark modded registries as modded\n+\t\t\t\taddAttribute(RegistryAttribute.SYNCED);\n+\t\t\t\taddAttribute(RegistryAttribute.PERSISTED);\n+\t\t\t\taddAttribute(RegistryAttribute.MODDED);\n+\t\t\t}\n+\t\t}\n \t}\n \n \tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n", "next_change": {"commit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\ndeleted file mode 100644\nindex f6435d716..000000000\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-package net.fabricmc.fabric.impl.registry.sync;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import net.minecraft.util.registry.MutableRegistry;\n-import net.minecraft.util.registry.Registry;\n-\n-import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n-import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n-\n-public class RegistryAttributesImpl<T> implements RegistryAttributeHolder<T> {\n-\tprivate static final Map<Registry<?>, RegistryAttributeHolder<?>> registryAttributeMap = new HashMap<>();\n-\n-\tpublic static <T> RegistryAttributeHolder<T> get(Registry<T> registry) {\n-\t\t//noinspection unchecked\n-\t\treturn (RegistryAttributeHolder<T>) registryAttributeMap.computeIfAbsent(registry, RegistryAttributesImpl::new);\n-\t}\n-\n-\tpublic RegistryAttributesImpl(Registry<T> registry) {\n-\t\tif (registry instanceof MutableRegistry) {\n-\t\t\tif (!Registry.REGISTRIES.getId((MutableRegistry<?>) registry).getNamespace().equals(\"minecraft\")) {\n-\t\t\t\t// By default always sync, save and mark modded registries as modded\n-\t\t\t\taddAttribute(RegistryAttribute.SYNCED);\n-\t\t\t\taddAttribute(RegistryAttribute.PERSISTED);\n-\t\t\t\taddAttribute(RegistryAttribute.MODDED);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n-\n-\t@Override\n-\tpublic RegistryAttributeHolder<T> addAttribute(RegistryAttribute attribute) {\n-\t\tattributes.add(attribute);\n-\t\treturn this;\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasAttribute(RegistryAttribute attribute) {\n-\t\treturn attributes.contains(attribute);\n-\t}\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTY2Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165666", "body": "```suggestion\r\n\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tLOGGER.debug(\"Not saving none-persistent registry: \" + registryId);\n          \n          \n            \n            \t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Not saving <span class=\"x x-first x-last\">none</span>-persistent registry: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> registryId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Not saving <span class=\"x x-first x-last\">non</span>-persistent registry: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> registryId);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "i509VCB", "createdAt": "2020-05-03T21:52:23Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -131,13 +139,35 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\t//noinspection unchecked\n+\t\t\tif (!isClientSync && !RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.PERSISTENT)) {\n+\t\t\t\tLOGGER.debug(\"Not saving none-persistent registry: \" + registryId);", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32626a437574da74e22959f9bf9dfb915da0e70d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex a01211fcf..8767cd4b8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -146,19 +146,20 @@ public final class RegistrySyncManager {\n \t\t\t}\n \n \t\t\t//noinspection unchecked\n-\t\t\tif (!isClientSync && !RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.PERSISTENT)) {\n-\t\t\t\tLOGGER.debug(\"Not saving none-persistent registry: \" + registryId);\n+\t\t\tRegistryAttributeHolder<?> attributeHolder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\t//noinspection unchecked\n-\t\t\tif (isClientSync && !RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.SYNC)) {\n+\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n \t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\t//Keep vanilla registry that we have no existing registry entries for\n-\t\t\tif (existingRegistryData == null && !isRegistryModded(registryId)) {\n+\t\t\tif (existingRegistryData == null && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n", "next_change": {"commit": "57cf312c5e581efb0a1414bed2525b4fe3e362ba", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 8767cd4b8..fc5f1b319 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -158,7 +158,12 @@ public final class RegistrySyncManager {\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\t//Keep vanilla registry that we have no existing registry entries for\n+\t\t\t/*\n+\t\t\t * Dont do anything with vanilla registries, that are un-modded and we do not have previous ids for.\n+\t\t\t *\n+\t\t\t * This will still sync IDs if a world has been previously modded, either from removed mods\n+\t\t\t * or a previous version of fabric registry sync.\n+\t\t\t */\n \t\t\tif (existingRegistryData == null && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n", "next_change": {"commit": "6186a43450f0fe7004f973b7389db27872c721fb", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex fc5f1b31..1afa6f98 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -159,14 +159,18 @@ public final class RegistrySyncManager {\n \t\t\t}\n \n \t\t\t/*\n-\t\t\t * Dont do anything with vanilla registries, that are un-modded and we do not have previous ids for.\n+\t\t\t * Dont do anything with vanilla registries on client sync.\n+\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.\n \t\t\t *\n-\t\t\t * This will still sync IDs if a world has been previously modded, either from removed mods\n-\t\t\t * or a previous version of fabric registry sync.\n+\t\t\t * This will not sync IDs if a world has been previously modded, either from removed mods\n+\t\t\t * or a previous version of fabric registry sync, but will save these ids to disk in case the mod or mods\n+\t\t\t * are added back.\n \t\t\t */\n-\t\t\tif (existingRegistryData == null && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\tif ((existingRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n+\t\t\t} else if (existingRegistryData != null) {\n+\t\t\t\tLOGGER.debug(\"Preserving previously modded registry: \" + registryId);\n \t\t\t}\n \n \t\t\tif (isClientSync) {\n", "next_change": {"commit": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 1afa6f984..557c35e17 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -140,36 +140,35 @@ public final class RegistrySyncManager {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tCompoundTag existingRegistryData = null;\n+\t\t\t/*\n+\t\t\t * This contains the previous state's registry data, this is used for a few things:\n+\t\t\t * Such as ensuring that previously modded registries or registry entries are not lost or overwritten.\n+\t\t\t */\n+\t\t\tCompoundTag previousRegistryData = null;\n \n-\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n-\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\tif (activeTag != null && activeTag.contains(registryId.toString())) {\n+\t\t\t\tpreviousRegistryData = activeTag.getCompound(registryId.toString());\n \t\t\t}\n \n \t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n \n-\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n-\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n-\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n+\t\t\tif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\t/*\n \t\t\t * Dont do anything with vanilla registries on client sync.\n-\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.\n+\t\t\t * When saving skip none modded registries that doesnt have previous registry data\n \t\t\t *\n \t\t\t * This will not sync IDs if a world has been previously modded, either from removed mods\n \t\t\t * or a previous version of fabric registry sync, but will save these ids to disk in case the mod or mods\n \t\t\t * are added back.\n \t\t\t */\n-\t\t\tif ((existingRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\tif ((previousRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (existingRegistryData != null) {\n+\t\t\t} else if (previousRegistryData != null) {\n \t\t\t\tLOGGER.debug(\"Preserving previously modded registry: \" + registryId);\n \t\t\t}\n \n", "next_change": null}]}}]}}]}}]}}, {"oid": "32626a437574da74e22959f9bf9dfb915da0e70d", "url": "https://github.com/FabricMC/fabric/commit/32626a437574da74e22959f9bf9dfb915da0e70d", "message": "Some small tweaks", "committedDate": "2020-05-03T21:58:25Z", "type": "commit"}, {"oid": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "url": "https://github.com/FabricMC/fabric/commit/d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "message": "Yet another refactor", "committedDate": "2020-05-04T13:58:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1Nzc2Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419457763", "body": "Everything that has a comment on I have checked. If someone can validate this that would be great.\r\n\r\nI will finish off the other later.", "bodyText": "Everything that has a comment on I have checked. If someone can validate this that would be great.\nI will finish off the other later.", "bodyHTML": "<p dir=\"auto\">Everything that has a comment on I have checked. If someone can validate this that would be great.</p>\n<p dir=\"auto\">I will finish off the other later.</p>", "author": "modmuss50", "createdAt": "2020-05-04T13:59:50Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -25,11 +25,11 @@ import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n public class FabricRegistryInit implements ModInitializer {\n \t@Override\n \tpublic void onInitialize() {\n-\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\t// Synced in PlaySoundS2CPacket.\n \t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n \t\tRegistryAttributeHolder.get(Registry.FLUID)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTg5NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419459894", "body": "uhh, find and replace went wrong here ;) I will fix this. Should just be \"synced\"", "bodyText": "uhh, find and replace went wrong here ;) I will fix this. Should just be \"synced\"", "bodyHTML": "<p dir=\"auto\">uhh, find and replace went wrong here ;) I will fix this. Should just be \"synced\"</p>", "author": "modmuss50", "createdAt": "2020-05-04T14:02:47Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -62,10 +62,10 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be accessed apart from registering?\n \t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.FEATURE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n \n \t\t// Saved to level format\n", "next_change": null}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -73,44 +73,44 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n \n-\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\t// Synced in ParticleS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n \n-\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n \t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\t// Synced in PaintingSpawnS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n \t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n \n \t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n", "next_change": {"commit": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 168e6e97e..55a5a2d06 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -113,46 +113,63 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n \t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n \n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n \n \t\t// Synced in OpenScreenS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n \n+\t\t// Synced by id\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n \n+\t\t// Synced and saved by id\n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n \t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n \t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.MEMORY_MODULE_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SENSOR_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SCHEDULE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \t}\n }\n", "next_change": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 55a5a2d06..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -171,5 +168,14 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25299);\n \t}\n }\n", "next_change": {"commit": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex b5957e199..64ce2b927 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -169,13 +169,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_POOL_ENTRY_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_FUNCTION_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25299);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_CONDITION_TYPE);\n \t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NTM1Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419475357", "body": "From what I can tell we dont need to sync items, but im not sure what happens with server side only items? We might need a way only make sure that the registries contain the same keys?", "bodyText": "From what I can tell we dont need to sync items, but im not sure what happens with server side only items? We might need a way only make sure that the registries contain the same keys?", "bodyHTML": "<p dir=\"auto\">From what I can tell we dont need to sync items, but im not sure what happens with server side only items? We might need a way only make sure that the registries contain the same keys?</p>", "author": "modmuss50", "createdAt": "2020-05-04T14:24:06Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -38,14 +38,14 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n \t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n \n-\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n \t\tRegistryAttributeHolder.get(Registry.BLOCK)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\t// Does not appear to be saved or synced, the string id is used.\n \t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n \n-\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\t// Synced in EntitySpawnS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n", "next_change": {"commit": "6186a43450f0fe7004f973b7389db27872c721fb", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 168e6e97e..43b212ffd 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -50,8 +50,7 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 43b212ffd..d236be91c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -45,12 +45,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Does not appear to be saved or synced, the string id is used.\n \t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n \n-\t\t// Synced in EntitySpawnS2CPacket\n+\t\t// Synced in EntitySpawnS2CPacket and RegistryTagManager\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\t\t// Synced in RegistryTagManager\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": null}]}}]}}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -53,7 +53,7 @@ public class FabricRegistryInit implements ModInitializer {\n \t\tRegistryAttributeHolder.get(Registry.ITEM)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n \n \t\t// Doesnt seem to be accessed apart from registering?\n", "next_change": {"commit": "6186a43450f0fe7004f973b7389db27872c721fb", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 168e6e97e..43b212ffd 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -50,8 +50,7 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 43b212ffd..d236be91c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -45,12 +45,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Does not appear to be saved or synced, the string id is used.\n \t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n \n-\t\t// Synced in EntitySpawnS2CPacket\n+\t\t// Synced in EntitySpawnS2CPacket and RegistryTagManager\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\t\t// Synced in RegistryTagManager\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MTAwMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419491003", "body": "If it is a builder wouldn't you want to just call the method `attribute(RegistryAttribute)`", "bodyText": "If it is a builder wouldn't you want to just call the method attribute(RegistryAttribute)", "bodyHTML": "<p dir=\"auto\">If it is a builder wouldn't you want to just call the method <code>attribute(RegistryAttribute)</code></p>", "author": "i509VCB", "createdAt": "2020-05-04T14:44:58Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+public class FabricRegistryBuilder<T> {\n+\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\tprivate final Registry<T> registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\n+\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\t\tthis.registry = registry;\n+\t\taddAttribute(RegistryAttribute.MODDED);\n+\t}\n+\n+\tpublic FabricRegistryBuilder<T> addAttribute(RegistryAttribute attribute) {", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex badc8845a..65626e28f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -33,10 +33,10 @@ public class FabricRegistryBuilder<T> {\n \n \tprivate FabricRegistryBuilder(Registry<T> registry) {\n \t\tthis.registry = registry;\n-\t\taddAttribute(RegistryAttribute.MODDED);\n+\t\tattribute(RegistryAttribute.MODDED);\n \t}\n \n-\tpublic FabricRegistryBuilder<T> addAttribute(RegistryAttribute attribute) {\n+\tpublic FabricRegistryBuilder<T> attribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n \t\treturn this;\n \t}\n", "next_change": {"commit": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 65626e28f..53f7e8440 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -23,25 +23,58 @@ import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n \n-public class FabricRegistryBuilder<T> {\n-\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+/**\n+ * Used to create custom registry's, with specified registry attributes.\n+ *\n+ * <pre>\n+ *     MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ *\n+ * \t\tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends Registry<T>> {\n+\n+\t/**\n+\t * Create a new FabricRegistryBuilder, the registry has the {@link RegistryAttribute#MODDED} attribute by default\n+\t *\n+\t * @param registry The base registry type such as {@link net.minecraft.util.registry.SimpleRegistry} or {@link net.minecraft.util.registry.DefaultedRegistry}\n+\t * @param <T> The type stored in the Registry\n+\t * @param <R> The registry type\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> create(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n-\tprivate final Registry<T> registry;\n+\tprivate final R registry;\n \tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n \n-\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\tprivate FabricRegistryBuilder(R registry) {\n \t\tthis.registry = registry;\n \t\tattribute(RegistryAttribute.MODDED);\n \t}\n \n-\tpublic FabricRegistryBuilder<T> attribute(RegistryAttribute attribute) {\n+\t/**\n+\t * Add a {@link RegistryAttribute} to the registry\n+\t *\n+\t * @param attribute the {@link RegistryAttribute} to add to the registry\n+\t * @return the instance of {@link FabricRegistryBuilder}\n+\t */\n+\tpublic FabricRegistryBuilder<T, R> attribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n \t\treturn this;\n \t}\n \n-\tpublic Registry<T> build() {\n+\t/**\n+\t * Applies the attributes to the registry\n+\t * @return the registry instance with the attributes applied.\n+\t */\n+\tpublic R build() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n \t\tfabricRegistry.build(attributes);\n \t\treturn registry;\n", "next_change": {"commit": "7b62eada728c2ccd9f66793286103563c2c3031c", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 53f7e8440..c05a2de6d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -71,8 +97,8 @@ public class FabricRegistryBuilder<T, R extends Registry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry\n-\t * @return the registry instance with the attributes applied.\n+\t * Applies the attributes to the registry.\n+\t * @return the registry instance with the attributes applied\n \t */\n \tpublic R build() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex c05a2de6d..ac2834fa6 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -97,12 +104,16 @@ public class FabricRegistryBuilder<T, R extends Registry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry.\n+\t * Applies the attributes to the registry and register's it.\n \t * @return the registry instance with the attributes applied\n \t */\n-\tpublic R build() {\n+\tpublic R buildAndRegister() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n \t\tfabricRegistry.build(attributes);\n+\n+\t\t//noinspection unchecked\n+\t\tAccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n+\n \t\treturn registry;\n \t}\n }\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -112,7 +112,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t\tfabricRegistry.build(attributes);\n \n \t\t//noinspection unchecked\n-\t\tAccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n+\t\tAccessorRegistry.getROOT().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n \n \t\treturn registry;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NDc4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419494782", "body": "I assume the fact this is used in a data tracker isn't a real issue with syncing. (I think it calls getRawId when being queried to track) \r\n\r\nThis is part of the VillagerDataContainer but that stores this as an identifier.\r\n\r\nSomething similar with the Villager professions. ", "bodyText": "I assume the fact this is used in a data tracker isn't a real issue with syncing. (I think it calls getRawId when being queried to track)\nThis is part of the VillagerDataContainer but that stores this as an identifier.\nSomething similar with the Villager professions.", "bodyHTML": "<p dir=\"auto\">I assume the fact this is used in a data tracker isn't a real issue with syncing. (I think it calls getRawId when being queried to track)</p>\n<p dir=\"auto\">This is part of the VillagerDataContainer but that stores this as an identifier.</p>\n<p dir=\"auto\">Something similar with the Villager professions.</p>", "author": "i509VCB", "createdAt": "2020-05-04T14:50:10Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMjM1Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r421812352", "bodyText": "Looking at this it needs to be synced as its written to a packet using the raw id.", "author": "modmuss50", "createdAt": "2020-05-07T21:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NDc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -137,7 +137,7 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n-\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n", "next_change": {"commit": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 168e6e97e..55a5a2d06 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -113,46 +113,63 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n \t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n \n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n \n \t\t// Synced in OpenScreenS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n \n+\t\t// Synced by id\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n \n+\t\t// Synced and saved by id\n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n \t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n \t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.MEMORY_MODULE_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SENSOR_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SCHEDULE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \t}\n }\n", "next_change": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 55a5a2d06..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -171,5 +168,14 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25299);\n \t}\n }\n", "next_change": {"commit": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex b5957e199..64ce2b927 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -169,13 +169,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_POOL_ENTRY_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_FUNCTION_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25299);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_CONDITION_TYPE);\n \t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTMwOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419495309", "body": "Only present on a server world from my knowledge. ", "bodyText": "Only present on a server world from my knowledge.", "bodyHTML": "<p dir=\"auto\">Only present on a server world from my knowledge.</p>", "author": "i509VCB", "createdAt": "2020-05-04T14:50:54Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a8135c210eefbc0f1d32fd1161851f967f75271", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex fa559d9da..168e6e97e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -137,7 +137,7 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n-\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n", "next_change": {"commit": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 168e6e97e..55a5a2d06 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -113,46 +113,63 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n \t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n \n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n \n \t\t// Synced in OpenScreenS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n \n+\t\t// Synced by id\n \t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n \n+\t\t// Synced and saved by id\n \t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n \n \t\t// Synced in StatisticsS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n \t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n \n+\t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.MEMORY_MODULE_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SENSOR_TYPE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.SCHEDULE);\n \n+\t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \t}\n }\n", "next_change": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 55a5a2d06..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -171,5 +168,14 @@ public class FabricRegistryInit implements ModInitializer {\n \n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\n+\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n+\t\tRegistryAttributeHolder.get(Registry.field_25299);\n \t}\n }\n", "next_change": {"commit": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex b5957e199..64ce2b927 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -169,13 +169,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Doesnt seem to be serialised or synced.\n \t\tRegistryAttributeHolder.get(Registry.ACTIVITY);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_POOL_ENTRY_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25293);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_POOL_ENTRY_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_FUNCTION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25294);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_FUNCTION_TYPE);\n \n-\t\t// Doesnt seem to be serialised or synced. (LOOT_CONDITION_TYPE)\n-\t\tRegistryAttributeHolder.get(Registry.field_25299);\n+\t\t// Doesnt seem to be serialised or synced.\n+\t\tRegistryAttributeHolder.get(Registry.LOOT_CONDITION_TYPE);\n \t}\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "36e2a931e1085541998d5a1fa326ab7361433d38", "url": "https://github.com/FabricMC/fabric/commit/36e2a931e1085541998d5a1fa326ab7361433d38", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-07T21:33:58Z", "type": "commit"}, {"oid": "5a8135c210eefbc0f1d32fd1161851f967f75271", "url": "https://github.com/FabricMC/fabric/commit/5a8135c210eefbc0f1d32fd1161851f967f75271", "message": "Some minor style fixes", "committedDate": "2020-05-07T21:36:50Z", "type": "commit"}, {"oid": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "url": "https://github.com/FabricMC/fabric/commit/2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "message": "Finish checking registries", "committedDate": "2020-05-07T21:48:07Z", "type": "commit"}, {"oid": "57cf312c5e581efb0a1414bed2525b4fe3e362ba", "url": "https://github.com/FabricMC/fabric/commit/57cf312c5e581efb0a1414bed2525b4fe3e362ba", "message": "Start on a test mod, and apply some fixes.", "committedDate": "2020-05-08T12:37:52Z", "type": "commit"}, {"oid": "c8916aee09265a79f16512d7ba002ca0363bcce6", "url": "https://github.com/FabricMC/fabric/commit/c8916aee09265a79f16512d7ba002ca0363bcce6", "message": "Checkstyle fixes", "committedDate": "2020-05-09T20:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjE1Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546157", "body": "Need a synced here, you missed that line", "bodyText": "Need a synced here, you missed that line", "bodyHTML": "<p dir=\"auto\">Need a synced here, you missed that line</p>", "author": "liach", "createdAt": "2020-05-09T21:06:22Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and synced using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// Synced in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// Synced in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\t// Synced by id\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\t// Synced and saved by id\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// Synced in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjgxMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546810", "bodyText": "Yes, thank you.", "author": "modmuss50", "createdAt": "2020-05-09T21:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6186a43450f0fe7004f973b7389db27872c721fb", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 55a5a2d06..43b212ffd 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -155,7 +154,8 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n-\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjIzOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546239", "body": "Should probably bump version here", "bodyText": "Should probably bump version here", "bodyHTML": "<p dir=\"auto\">Should probably bump version here</p>", "author": "liach", "createdAt": "2020-05-09T21:07:01Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -168,18 +204,38 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t\tregistryTag.putInt(id.toString(), rawId);\n \t\t\t\t}\n \n+\t\t\t\t// Look for existing registry key/values that are not in the current registries\n+\t\t\t\tif (!isClientSync && existingRegistryData != null) {\n+\t\t\t\t\tfor (String key : existingRegistryData.getKeys()) {\n+\t\t\t\t\t\tif (!registryTag.contains(key)) {\n+\t\t\t\t\t\t\tLOGGER.info(\"Saving orphaned registry entry: \" + key);\n+\t\t\t\t\t\t\tregistryTag.putInt(key, registryTag.getInt(key));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n \t\t\t\tmainTag.put(registryId.toString(), registryTag);\n \t\t\t}\n \t\t}\n \n+\t\t// Ensure any orphaned registry's are kept on disk\n+\t\tif (!isClientSync && activeIdMap != null) {\n+\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\t\t\tif (!mainTag.contains(registryKey)) {\n+\t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n+\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0Njc3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546774", "bodyText": "No, it should be compatible with previous fabric api versions. I need to test this.", "author": "modmuss50", "createdAt": "2020-05-09T21:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex fc5f1b319..f750945a5 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -219,11 +225,11 @@ public final class RegistrySyncManager {\n \t\t}\n \n \t\t// Ensure any orphaned registry's are kept on disk\n-\t\tif (!isClientSync && activeIdMap != null) {\n-\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\tif (!isClientSync && activeTag != null) {\n+\t\t\tfor (String registryKey : activeTag.getKeys()) {\n \t\t\t\tif (!mainTag.contains(registryKey)) {\n \t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n-\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t\tmainTag.put(registryKey, activeTag.getCompound(registryKey));\n \t\t\t\t}\n \t\t\t}\n \t\t}\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex f750945a5..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -238,6 +244,10 @@ public final class RegistrySyncManager {\n \t\ttag.putInt(\"version\", 1);\n \t\ttag.put(\"registries\", mainTag);\n \n+\t\tif (mainTag.getKeys().isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da..88a0e2b7 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -240,14 +241,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tCompoundTag tag = new CompoundTag();\n-\t\ttag.putInt(\"version\", 1);\n-\t\ttag.put(\"registries\", mainTag);\n-\n \t\tif (mainTag.getKeys().isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tCompoundTag tag = new CompoundTag();\n+\t\ttag.putInt(\"version\", 1);\n+\t\ttag.put(\"registries\", mainTag);\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 88a0e2b78..60a169da0 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -241,14 +240,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tif (mainTag.getKeys().isEmpty()) {\n-\t\t\treturn null;\n-\t\t}\n-\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);\n \t\ttag.put(\"registries\", mainTag);\n \n+\t\tif (mainTag.getKeys().isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\treturn tag;\n \t}\n \n", "next_change": {"commit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 60a169da0..88a0e2b78 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -240,14 +241,14 @@ public final class RegistrySyncManager {\n \t\t\t}\n \t\t}\n \n-\t\tCompoundTag tag = new CompoundTag();\n-\t\ttag.putInt(\"version\", 1);\n-\t\ttag.put(\"registries\", mainTag);\n-\n \t\tif (mainTag.getKeys().isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \n+\t\tCompoundTag tag = new CompoundTag();\n+\t\ttag.putInt(\"version\", 1);\n+\t\ttag.put(\"registries\", mainTag);\n+\n \t\treturn tag;\n \t}\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjQwOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546408", "body": "enum set maybe? unless you use manningheim mills", "bodyText": "enum set maybe? unless you use manningheim mills", "bodyHTML": "<p dir=\"auto\">enum set maybe? unless you use manningheim mills</p>", "author": "liach", "createdAt": "2020-05-09T21:08:25Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 91ee7ebaa..79a9f137f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -34,7 +34,7 @@ import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n @Mixin(Registry.class)\n public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n \t@Unique\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);\n \n \t@Unique\n \tprivate int preBootstrapHash = -1;\n", "next_change": {"commit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 79a9f137f..ce30f6a5b 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -34,7 +34,7 @@ import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n @Mixin(Registry.class)\n public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n \t@Unique\n-\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \t@Unique\n \tprivate int preBootstrapHash = -1;\n", "next_change": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex ce30f6a5b..e74402e67 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -37,7 +37,7 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \t@Unique\n-\tprivate int preBootstrapHash = -1;\n+\tprivate int previousHash = -1;\n \n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex e74402e67..73c84794f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -29,16 +29,12 @@ import net.minecraft.util.Identifier;\n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n-import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n \n @Mixin(Registry.class)\n-public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry {\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Unique\n-\tprivate int previousHash = -1;\n-\n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n \n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 73c84794f..9fba93fe8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -35,16 +33,6 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Shadow\n-\tpublic abstract Set<Identifier> getIds();\n-\n-\t/**\n-\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n-\t * This is set to true when using FabricRegistryBuilder\n-\t */\n-\t@Unique\n-\tprivate boolean builtWithBuilder = false;\n-\n \t@Override\n \tpublic RegistryAttributeHolder addAttribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "6186a43450f0fe7004f973b7389db27872c721fb", "url": "https://github.com/FabricMC/fabric/commit/6186a43450f0fe7004f973b7389db27872c721fb", "message": "Tweak the logic behind previously modded registries", "committedDate": "2020-05-09T21:36:33Z", "type": "commit"}, {"oid": "6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "url": "https://github.com/FabricMC/fabric/commit/6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "message": "Use EnumSet", "committedDate": "2020-05-09T21:46:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422552744", "body": "```suggestion\r\n\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);\n          \n          \n            \n            \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">EnumSet&lt;<span class=\"pl-smi\">RegistryAttribute</span>&gt;</span> attributes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EnumSet</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">allOf</span>(<span class=\"pl-smi\">RegistryAttribute</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">EnumSet&lt;<span class=\"pl-smi\">RegistryAttribute</span>&gt;</span> attributes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EnumSet</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">noneOf</span>(<span class=\"pl-smi\">RegistryAttribute</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "liach", "createdAt": "2020-05-09T22:13:40Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -34,7 +34,7 @@\n @Mixin(Registry.class)\n public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n \t@Unique\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);", "originalCommit": "6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjk4Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422552983", "bodyText": "Im glad you here ;P", "author": "modmuss50", "createdAt": "2020-05-09T22:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mzg2Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553866", "bodyText": "Hmm I knew that looked odd", "author": "i509VCB", "createdAt": "2020-05-09T22:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 79a9f137f..ce30f6a5b 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -34,7 +34,7 @@ import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n @Mixin(Registry.class)\n public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n \t@Unique\n-\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \t@Unique\n \tprivate int preBootstrapHash = -1;\n", "next_change": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex ce30f6a5b..e74402e67 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -37,7 +37,7 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \t@Unique\n-\tprivate int preBootstrapHash = -1;\n+\tprivate int previousHash = -1;\n \n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex e74402e67..73c84794f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -29,16 +29,12 @@ import net.minecraft.util.Identifier;\n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n-import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n \n @Mixin(Registry.class)\n-public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry {\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Unique\n-\tprivate int previousHash = -1;\n-\n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n \n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 73c84794f..9fba93fe8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -35,16 +33,6 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Shadow\n-\tpublic abstract Set<Identifier> getIds();\n-\n-\t/**\n-\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n-\t * This is set to true when using FabricRegistryBuilder\n-\t */\n-\t@Unique\n-\tprivate boolean builtWithBuilder = false;\n-\n \t@Override\n \tpublic RegistryAttributeHolder addAttribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n", "next_change": null}]}}]}}]}}]}}, {"oid": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "url": "https://github.com/FabricMC/fabric/commit/976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "message": "Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>", "committedDate": "2020-05-09T22:16:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553302", "body": "are all registries always going to be modded, just curious?", "bodyText": "are all registries always going to be modded, just curious?", "bodyHTML": "<p dir=\"auto\">are all registries always going to be modded, just curious?</p>", "author": "liach", "createdAt": "2020-05-09T22:19:28Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+public class FabricRegistryBuilder<T> {\n+\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\tprivate final Registry<T> registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\n+\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\t\tthis.registry = registry;\n+\t\tattribute(RegistryAttribute.MODDED);", "originalCommit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mzk0MA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553940", "bodyText": "Via the builder, probably. But I assume there will be a way to not require syncing", "author": "i509VCB", "createdAt": "2020-05-09T22:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTI0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555248", "bodyText": "All modded registries are always going to be modded.", "author": "modmuss50", "createdAt": "2020-05-09T22:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTUzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555534", "bodyText": "Oh right this is a registry builder, thought this was a registry attribute builder", "author": "liach", "createdAt": "2020-05-09T22:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 65626e28f..53f7e8440 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -23,25 +23,58 @@ import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n \n-public class FabricRegistryBuilder<T> {\n-\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+/**\n+ * Used to create custom registry's, with specified registry attributes.\n+ *\n+ * <pre>\n+ *     MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ *\n+ * \t\tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends Registry<T>> {\n+\n+\t/**\n+\t * Create a new FabricRegistryBuilder, the registry has the {@link RegistryAttribute#MODDED} attribute by default\n+\t *\n+\t * @param registry The base registry type such as {@link net.minecraft.util.registry.SimpleRegistry} or {@link net.minecraft.util.registry.DefaultedRegistry}\n+\t * @param <T> The type stored in the Registry\n+\t * @param <R> The registry type\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> create(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n-\tprivate final Registry<T> registry;\n+\tprivate final R registry;\n \tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n \n-\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\tprivate FabricRegistryBuilder(R registry) {\n \t\tthis.registry = registry;\n \t\tattribute(RegistryAttribute.MODDED);\n \t}\n \n-\tpublic FabricRegistryBuilder<T> attribute(RegistryAttribute attribute) {\n+\t/**\n+\t * Add a {@link RegistryAttribute} to the registry\n+\t *\n+\t * @param attribute the {@link RegistryAttribute} to add to the registry\n+\t * @return the instance of {@link FabricRegistryBuilder}\n+\t */\n+\tpublic FabricRegistryBuilder<T, R> attribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n \t\treturn this;\n \t}\n \n-\tpublic Registry<T> build() {\n+\t/**\n+\t * Applies the attributes to the registry\n+\t * @return the registry instance with the attributes applied.\n+\t */\n+\tpublic R build() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n \t\tfabricRegistry.build(attributes);\n \t\treturn registry;\n", "next_change": {"commit": "7b62eada728c2ccd9f66793286103563c2c3031c", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 53f7e8440..c05a2de6d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -71,8 +97,8 @@ public class FabricRegistryBuilder<T, R extends Registry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry\n-\t * @return the registry instance with the attributes applied.\n+\t * Applies the attributes to the registry.\n+\t * @return the registry instance with the attributes applied\n \t */\n \tpublic R build() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex c05a2de6d..ac2834fa6 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -97,12 +104,16 @@ public class FabricRegistryBuilder<T, R extends Registry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry.\n+\t * Applies the attributes to the registry and register's it.\n \t * @return the registry instance with the attributes applied\n \t */\n-\tpublic R build() {\n+\tpublic R buildAndRegister() {\n \t\tFabricRegistry fabricRegistry = (FabricRegistry) registry;\n \t\tfabricRegistry.build(attributes);\n+\n+\t\t//noinspection unchecked\n+\t\tAccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n+\n \t\treturn registry;\n \t}\n }\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -112,7 +112,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t\tfabricRegistry.build(attributes);\n \n \t\t//noinspection unchecked\n-\t\tAccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n+\t\tAccessorRegistry.getROOT().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n \n \t\treturn registry;\n \t}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzM4Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553387", "body": "Wondering if we can sort these calls by their order of appearance in `Registry` class or how are we going to organize and make sure no vanilla registry is missed?", "bodyText": "Wondering if we can sort these calls by their order of appearance in Registry class or how are we going to organize and make sure no vanilla registry is missed?", "bodyHTML": "<p dir=\"auto\">Wondering if we can sort these calls by their order of appearance in <code>Registry</code> class or how are we going to organize and make sure no vanilla registry is missed?</p>", "author": "liach", "createdAt": "2020-05-09T22:20:20Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)", "originalCommit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTMxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555318", "bodyText": "They should be in the right order, making sure they are all covered should be quite easy. Possibly just printing out that a registry hasnt been accounted for?", "author": "modmuss50", "createdAt": "2020-05-09T22:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzM4Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a2f7212d4f8669a579e9f0c42130e1ae07374be2", "url": "https://github.com/FabricMC/fabric/commit/a2f7212d4f8669a579e9f0c42130e1ae07374be2", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-11T23:56:23Z", "type": "commit"}, {"oid": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "url": "https://github.com/FabricMC/fabric/commit/926ef1e408dc1361a9600f6429c4099629ce4b3e", "message": "Fix generics, add javadoc, add tests", "committedDate": "2020-05-12T00:11:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423394379", "body": "I personally find it a bit odd to pass registry into a builder. ", "bodyText": "I personally find it a bit odd to pass registry into a builder.", "bodyHTML": "<p dir=\"auto\">I personally find it a bit odd to pass registry into a builder.</p>", "author": "i509VCB", "createdAt": "2020-05-12T00:27:17Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+/**\n+ * Used to create custom registry's, with specified registry attributes.\n+ *\n+ * <pre>\n+ *     MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())", "originalCommit": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NzQwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423397401", "bodyText": "Yeah, it is slightly odd. I could keep this but add createSimple and createDefault?", "author": "modmuss50", "createdAt": "2020-05-12T00:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODMwMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423398303", "bodyText": "Yeah that seems like a reasonable approach. Maybe make the method where you can pass a custom registry through something like from.\nI'd createDefaulted is a bit more descriptive for the second name", "author": "i509VCB", "createdAt": "2020-05-12T00:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzE0Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423613143", "bodyText": "{@literal} please for < and >, or use &lt; for < and &gt; for >.", "author": "liach", "createdAt": "2020-05-12T09:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzcxMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423627711", "bodyText": "Or you can use a {@code} tag as well, see this.", "author": "Juuxel", "createdAt": "2020-05-12T10:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3fb992723f4b4463f59d74705459e420ba8a6d9c", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 53f7e8440..feaf891cd 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -19,19 +19,23 @@ package net.fabricmc.fabric.api.event.registry;\n import java.util.HashSet;\n import java.util.Set;\n \n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n \n /**\n  * Used to create custom registry's, with specified registry attributes.\n  *\n  * <pre>\n- *     MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n- * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n- * \t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n- *\n- * \t\tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * {@code\n+ *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * \t}\n  * </pre>\n  *\n  * @param <T> The type stored in the Registry\n", "next_change": {"commit": "7b62eada728c2ccd9f66793286103563c2c3031c", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex feaf891cd..c05a2de6d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -42,9 +42,8 @@ import net.minecraft.util.registry.SimpleRegistry;\n  * @param <R> The registry type\n  */\n public class FabricRegistryBuilder<T, R extends Registry<T>> {\n-\n \t/**\n-\t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default\n+\t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n \t * @param registry The base registry type such as {@link net.minecraft.util.registry.SimpleRegistry} or {@link net.minecraft.util.registry.DefaultedRegistry}\n \t * @param <T> The type stored in the Registry\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex c05a2de6d..ac2834fa6 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -41,7 +46,7 @@ import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n  * @param <T> The type stored in the Registry\n  * @param <R> The registry type\n  */\n-public class FabricRegistryBuilder<T, R extends Registry<T>> {\n+public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n", "next_change": {"commit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..0a3ba342d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -36,17 +34,16 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  *\n  * <pre>\n  * {@code\n- *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n- * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n- * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n- * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ *  SimpleRegistry<String> registry = FabricRegistryBuilder.createSimple(String.class, new Identifier(\"registry_sync\", \"fabric_registry\"))\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n  * \t}\n  * </pre>\n  *\n  * @param <T> The type stored in the Registry\n  * @param <R> The registry type\n  */\n-public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+public final class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n", "next_change": null}]}}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex c05a2de6d..ac2834fa6 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -50,31 +55,33 @@ public class FabricRegistryBuilder<T, R extends Registry<T>> {\n \t * @param <R> The registry type\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type) {\n-\t\treturn from(new SimpleRegistry<>());\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier defaultId) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString()));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n \t}\n \n \tprivate final R registry;\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -80,12 +80,12 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n \t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n \t}\n \n \tprivate final R registry;\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \tprivate FabricRegistryBuilder(R registry) {\n \t\tthis.registry = registry;\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -62,26 +59,24 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type, Identifier registryId) {\n+\t\treturn from(new SimpleRegistry<T>(RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier registryId, Identifier defaultId) {\n+\t\treturn from(new DefaultedRegistry<T>(defaultId.toString(), RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \tprivate final R registry;\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "3fb992723f4b4463f59d74705459e420ba8a6d9c", "url": "https://github.com/FabricMC/fabric/commit/3fb992723f4b4463f59d74705459e420ba8a6d9c", "message": "More changes", "committedDate": "2020-05-13T17:06:44Z", "type": "commit"}, {"oid": "ecb4240a44d716ac7c553e046805834644bea52c", "url": "https://github.com/FabricMC/fabric/commit/ecb4240a44d716ac7c553e046805834644bea52c", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-15T13:16:31Z", "type": "commit"}, {"oid": "7b62eada728c2ccd9f66793286103563c2c3031c", "url": "https://github.com/FabricMC/fabric/commit/7b62eada728c2ccd9f66793286103563c2c3031c", "message": "Checkstyle fixes", "committedDate": "2020-05-15T13:18:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MjYyNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426152624", "body": "```suggestion\r\n * Used to create custom registries, with specified registry attributes.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Used to create custom registry's, with specified registry attributes.\n          \n          \n            \n             * Used to create custom registries, with specified registry attributes.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Used</span> to create custom <span class=\"x x-first\">registry</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">s</span>, with specified registry attributes.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Used</span> to create custom <span class=\"x x-first x-last\">registries</span>, with specified registry attributes.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Earthcomputer", "createdAt": "2020-05-16T13:13:24Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+/**\n+ * Used to create custom registry's, with specified registry attributes.", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex c05a2de6d..b454e849c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -27,7 +27,7 @@ import net.minecraft.util.registry.Registry;\n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n \n /**\n- * Used to create custom registry's, with specified registry attributes.\n+ * Used to create custom registries, with specified registry attributes.\n  *\n  * <pre>\n  * {@code\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex b454e849c..ac2834fa6 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -19,12 +19,17 @@ package net.fabricmc.fabric.api.event.registry;\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.class_5321;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.SimpleRegistry;\n import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n \n /**\n  * Used to create custom registries, with specified registry attributes.\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -16,17 +16,16 @@\n \n package net.fabricmc.fabric.api.event.registry;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.EnumSet;\n \n import com.mojang.serialization.Lifecycle;\n \n-import net.minecraft.class_5321;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.DefaultedRegistry;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.SimpleRegistry;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -24,7 +24,6 @@ import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.DefaultedRegistry;\n import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.SimpleRegistry;\n-import net.minecraft.util.registry.Registry;\n import net.minecraft.util.registry.RegistryKey;\n \n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n", "next_change": null}]}}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -36,10 +35,11 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  *\n  * <pre>\n  * {@code\n- *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n- * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n- * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n- * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ *  RegistryKey<Registry<String>> registryKey = RegistryKey.ofRegistry(new Identifier(\"registry_sync\", \"fabric_registry\"));\n+ *\n+ * \t\tMutableRegistry<String> registry = FabricRegistryBuilder.createSimple(registryKey, Lifecycle.stable())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n  * \t}\n  * </pre>\n  *\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -35,9 +34,7 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  *\n  * <pre>\n  * {@code\n- *  RegistryKey<Registry<String>> registryKey = RegistryKey.ofRegistry(new Identifier(\"registry_sync\", \"fabric_registry\"));\n- *\n- * \t\tMutableRegistry<String> registry = FabricRegistryBuilder.createSimple(registryKey, Lifecycle.stable())\n+ *  SimpleRegistry<String> registry = FabricRegistryBuilder.createSimple(String.class, new Identifier(\"registry_sync\", \"fabric_registry\"))\n  * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n  * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n  * \t}\n", "next_change": {"commit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ed9a3220c..0a3ba342d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -43,7 +43,7 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  * @param <T> The type stored in the Registry\n  * @param <R> The registry type\n  */\n-public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+public final class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426156519", "body": "This implementation of `storeHash` rings alarm bells for me. This `hashCode` is implemented by `AbstractSet`, which simply sums the hashCode of its elements. Each element is an `Identifier`, which is itself a bad hash function.\r\nRather than using a hash, it would be far better to simply check the size of the registry to check if it has been added to. No-one is going to remove from a registry after all (that's a hard thing to do and no-one would want to anyway).", "bodyText": "This implementation of storeHash rings alarm bells for me. This hashCode is implemented by AbstractSet, which simply sums the hashCode of its elements. Each element is an Identifier, which is itself a bad hash function.\nRather than using a hash, it would be far better to simply check the size of the registry to check if it has been added to. No-one is going to remove from a registry after all (that's a hard thing to do and no-one would want to anyway).", "bodyHTML": "<p dir=\"auto\">This implementation of <code>storeHash</code> rings alarm bells for me. This <code>hashCode</code> is implemented by <code>AbstractSet</code>, which simply sums the hashCode of its elements. Each element is an <code>Identifier</code>, which is itself a bad hash function.<br>\nRather than using a hash, it would be far better to simply check the size of the registry to check if it has been added to. No-one is going to remove from a registry after all (that's a hard thing to do and no-one would want to anyway).</p>", "author": "Earthcomputer", "createdAt": "2020-05-16T14:05:56Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n+\n+\t@Unique\n+\tprivate int preBootstrapHash = -1;\n+\n+\t@Shadow\n+\tpublic abstract Set<Identifier> getIds();\n+\n+\t/**\n+\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n+\t * This is set to true when using FabricRegistryBuilder\n+\t */\n+\t@Unique\n+\tprivate boolean builtWithBuilder = false;\n+\n+\t@Override\n+\tpublic RegistryAttributeHolder addAttribute(RegistryAttribute attribute) {\n+\t\tattributes.add(attribute);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasAttribute(RegistryAttribute attribute) {\n+\t\treturn attributes.contains(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void build(Set<RegistryAttribute> attributes) {\n+\t\tbuiltWithBuilder = true;\n+\t\tthis.attributes.addAll(attributes);\n+\t}\n+\n+\t@Override\n+\tpublic boolean builtByBuilder() {\n+\t\treturn builtWithBuilder;\n+\t}\n+\n+\t@Override\n+\tpublic int getStoredHash() {\n+\t\treturn preBootstrapHash;\n+\t}\n+\n+\t@Override\n+\tpublic int storeHash() {\n+\t\treturn preBootstrapHash = getIds().hashCode();", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzgzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426167834", "bodyText": "Removal from registries to replace stuff has been seen before, the hallow did it to allow place able pumpkin pie.", "author": "i509VCB", "createdAt": "2020-05-16T16:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3MTIxOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426171219", "bodyText": "Why is this hash even needed? It does nothing extra compared to what MixinSimpleRegistry does.", "author": "Earthcomputer", "createdAt": "2020-05-16T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODMzOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518339", "bodyText": "The only use for this whole hash thing is trying to detect mods that remove from the registry without marking the registry as modified.\nThe whole thing could be removed as mods that do odd things should start using the api provided to mark the registry as modded. This is here to try and maintain backwards compat where possible.", "author": "modmuss50", "createdAt": "2020-05-18T10:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex ce30f6a5b..e74402e67 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -73,11 +73,11 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \n \t@Override\n \tpublic int getStoredHash() {\n-\t\treturn preBootstrapHash;\n+\t\treturn previousHash;\n \t}\n \n \t@Override\n \tpublic int storeHash() {\n-\t\treturn preBootstrapHash = getIds().hashCode();\n+\t\treturn previousHash = getIds().hashCode();\n \t}\n }\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex e74402e67..73c84794f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -70,14 +66,4 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \tpublic boolean builtByBuilder() {\n \t\treturn builtWithBuilder;\n \t}\n-\n-\t@Override\n-\tpublic int getStoredHash() {\n-\t\treturn previousHash;\n-\t}\n-\n-\t@Override\n-\tpublic int storeHash() {\n-\t\treturn previousHash = getIds().hashCode();\n-\t}\n }\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 73c84794f..9fba93fe8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -58,12 +46,6 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \n \t@Override\n \tpublic void build(Set<RegistryAttribute> attributes) {\n-\t\tbuiltWithBuilder = true;\n \t\tthis.attributes.addAll(attributes);\n \t}\n-\n-\t@Override\n-\tpublic boolean builtByBuilder() {\n-\t\treturn builtWithBuilder;\n-\t}\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Njg1Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426156853", "body": "Maybe also check if this registry is the registry registry.", "bodyText": "Maybe also check if this registry is the registry registry.", "bodyHTML": "<p dir=\"auto\">Maybe also check if this registry is the registry registry.</p>", "author": "Earthcomputer", "createdAt": "2020-05-16T14:10:04Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistrySyncManager;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+@Mixin(SimpleRegistry.class)\n+public abstract class MixinSimpleRegistry<T> extends Registry<T> {\n+\t@Unique\n+\tprivate static final Logger FARBIC_LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n+\n+\t@Inject(method = \"add\", at = @At(\"RETURN\"))\n+\tprivate <V extends T> void add(Identifier id, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(id);\n+\t\tcheckEntry(id, entry);\n+\t}\n+\n+\t@Inject(method = \"set\", at = @At(\"RETURN\"))\n+\tprivate <V extends T> void set(int rawId, Identifier id, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(id);\n+\t\tcheckEntry(id, entry);\n+\t}\n+\n+\t@Unique\n+\tprivate void onChange(Identifier id) {\n+\t\tif (RegistrySyncManager.postBootstrap || !id.getNamespace().equals(\"minecraft\")) {\n+\t\t\tRegistryAttributeHolder holder = RegistryAttributeHolder.get(this);\n+\n+\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\t\t//noinspection unchecked\n+\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", Registry.REGISTRIES.getId((MutableRegistry<T>) (Object) this), id);\n+\t\t\t\tRegistryAttributeHolder.get(this).addAttribute(RegistryAttribute.MODDED);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Unique\n+\tprivate <V extends T> void checkEntry(Identifier id, V entry) {\n+\t\t// Detect legacy modded registries, this is deprecated as they should use the builder from now on.\n+\t\tif (entry instanceof FabricRegistry) {", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODcyMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518721", "bodyText": "good idea. Yes", "author": "modmuss50", "createdAt": "2020-05-18T10:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Njg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\nindex 9da0dc2cc..930cd992d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n", "chunk": "@@ -67,7 +67,7 @@ public abstract class MixinSimpleRegistry<T> extends Registry<T> {\n \t@Unique\n \tprivate <V extends T> void checkEntry(Identifier id, V entry) {\n \t\t// Detect legacy modded registries, this is deprecated as they should use the builder from now on.\n-\t\tif (entry instanceof FabricRegistry) {\n+\t\tif (((Object) this) == Registry.REGISTRIES && entry instanceof FabricRegistry) {\n \t\t\tif (!id.getNamespace().equals(\"minecraft\")) {\n \t\t\t\tFabricRegistry fabricRegistry = (FabricRegistry) entry;\n \n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\nindex 930cd992d..299151105 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n", "chunk": "@@ -24,61 +25,43 @@ import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n-import net.minecraft.util.Identifier;\n-import net.minecraft.util.registry.MutableRegistry;\n import net.minecraft.util.registry.Registry;\n import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.class_5321;\n \n import net.fabricmc.fabric.impl.registry.sync.RegistrySyncManager;\n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n-import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n \n @Mixin(SimpleRegistry.class)\n public abstract class MixinSimpleRegistry<T> extends Registry<T> {\n \t@Unique\n \tprivate static final Logger FARBIC_LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n \n+\tprotected MixinSimpleRegistry(class_5321<Registry<T>> arg, Lifecycle lifecycle) {\n+\t\tsuper(arg, lifecycle);\n+\t}\n+\n \t@Inject(method = \"add\", at = @At(\"RETURN\"))\n-\tprivate <V extends T> void add(Identifier id, V entry, CallbackInfoReturnable<V> info) {\n-\t\tonChange(id);\n-\t\tcheckEntry(id, entry);\n+\tprivate <V extends T> void add(class_5321<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(registryKey);\n \t}\n \n \t@Inject(method = \"set\", at = @At(\"RETURN\"))\n-\tprivate <V extends T> void set(int rawId, Identifier id, V entry, CallbackInfoReturnable<V> info) {\n-\t\tonChange(id);\n-\t\tcheckEntry(id, entry);\n+\tprivate <V extends T> void set(int rawId, class_5321<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(registryKey);\n \t}\n \n \t@Unique\n-\tprivate void onChange(Identifier id) {\n-\t\tif (RegistrySyncManager.postBootstrap || !id.getNamespace().equals(\"minecraft\")) {\n+\tprivate void onChange(class_5321<Registry<T>> registryKey) {\n+\t\tif (RegistrySyncManager.postBootstrap || !registryKey.method_29177().getNamespace().equals(\"minecraft\")) {\n \t\t\tRegistryAttributeHolder holder = RegistryAttributeHolder.get(this);\n \n \t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n-\t\t\t\t//noinspection unchecked\n-\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", Registry.REGISTRIES.getId((MutableRegistry<T>) (Object) this), id);\n+\t\t\t\t// noinspection unchecked\n+\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", ((Registry) Registry.REGISTRIES).getId(this), registryKey.method_29177());\n \t\t\t\tRegistryAttributeHolder.get(this).addAttribute(RegistryAttribute.MODDED);\n \t\t\t}\n \t\t}\n \t}\n-\n-\t@Unique\n-\tprivate <V extends T> void checkEntry(Identifier id, V entry) {\n-\t\t// Detect legacy modded registries, this is deprecated as they should use the builder from now on.\n-\t\tif (((Object) this) == Registry.REGISTRIES && entry instanceof FabricRegistry) {\n-\t\t\tif (!id.getNamespace().equals(\"minecraft\")) {\n-\t\t\t\tFabricRegistry fabricRegistry = (FabricRegistry) entry;\n-\n-\t\t\t\tif (!fabricRegistry.builtByBuilder()) {\n-\t\t\t\t\tFARBIC_LOGGER.warn(\"Registry {} was not built with FabricRegistryBuilder this is deprecated! It has been given default attributes.\", id);\n-\t\t\t\t\tfabricRegistry\n-\t\t\t\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n-\t\t\t\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED)\n-\t\t\t\t\t\t\t.addAttribute(RegistryAttribute.MODDED);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\nindex 299151105..4feb14fe7 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java\n", "chunk": "@@ -38,28 +38,28 @@ public abstract class MixinSimpleRegistry<T> extends Registry<T> {\n \t@Unique\n \tprivate static final Logger FARBIC_LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n \n-\tprotected MixinSimpleRegistry(class_5321<Registry<T>> arg, Lifecycle lifecycle) {\n+\tprotected MixinSimpleRegistry(RegistryKey<Registry<T>> arg, Lifecycle lifecycle) {\n \t\tsuper(arg, lifecycle);\n \t}\n \n \t@Inject(method = \"add\", at = @At(\"RETURN\"))\n-\tprivate <V extends T> void add(class_5321<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n+\tprivate <V extends T> void add(RegistryKey<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n \t\tonChange(registryKey);\n \t}\n \n \t@Inject(method = \"set\", at = @At(\"RETURN\"))\n-\tprivate <V extends T> void set(int rawId, class_5321<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n+\tprivate <V extends T> void set(int rawId, RegistryKey<Registry<T>> registryKey, V entry, CallbackInfoReturnable<V> info) {\n \t\tonChange(registryKey);\n \t}\n \n \t@Unique\n-\tprivate void onChange(class_5321<Registry<T>> registryKey) {\n-\t\tif (RegistrySyncManager.postBootstrap || !registryKey.method_29177().getNamespace().equals(\"minecraft\")) {\n+\tprivate void onChange(RegistryKey<Registry<T>> registryKey) {\n+\t\tif (RegistrySyncManager.postBootstrap || !registryKey.getValue().getNamespace().equals(\"minecraft\")) {\n \t\t\tRegistryAttributeHolder holder = RegistryAttributeHolder.get(this);\n \n \t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\t// noinspection unchecked\n-\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", ((Registry) Registry.REGISTRIES).getId(this), registryKey.method_29177());\n+\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", ((Registry) Registry.REGISTRIES).getId(this), registryKey.getValue());\n \t\t\t\tRegistryAttributeHolder.get(this).addAttribute(RegistryAttribute.MODDED);\n \t\t\t}\n \t\t}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NzUzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426157534", "body": "From what I understand, the purpose of this check is to handle implementations of `MutableRegistry` which are not `SimpleRegistry`s or to handle `SimpleRegistry`s modified through accessor mixins. Otherwise, surely what is in `MixinSimpleRegistry` is sufficient. I would like to point out that all vanilla registries which are `MutableRegistry`s are also `SimpleRegistry`s.", "bodyText": "From what I understand, the purpose of this check is to handle implementations of MutableRegistry which are not SimpleRegistrys or to handle SimpleRegistrys modified through accessor mixins. Otherwise, surely what is in MixinSimpleRegistry is sufficient. I would like to point out that all vanilla registries which are MutableRegistrys are also SimpleRegistrys.", "bodyHTML": "<p dir=\"auto\">From what I understand, the purpose of this check is to handle implementations of <code>MutableRegistry</code> which are not <code>SimpleRegistry</code>s or to handle <code>SimpleRegistry</code>s modified through accessor mixins. Otherwise, surely what is in <code>MixinSimpleRegistry</code> is sufficient. I would like to point out that all vanilla registries which are <code>MutableRegistry</code>s are also <code>SimpleRegistry</code>s.</p>", "author": "Earthcomputer", "createdAt": "2020-05-16T14:19:46Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +278,30 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\t((HashedRegistry) registry).storeHash();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\t// Checks the stored hash against the current hash, if it has changed mark as modded\n+\tpublic static void checkRegistryHashes() {", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 1afa6f984..d96ae1d57 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -280,28 +274,6 @@ public final class RegistrySyncManager {\n \t}\n \n \tpublic static void bootstrapRegistries() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\t((HashedRegistry) registry).storeHash();\n-\t\t\t}\n-\t\t}\n-\n \t\tpostBootstrap = true;\n \t}\n-\n-\t// Checks the stored hash against the current hash, if it has changed mark as modded\n-\tpublic static void checkRegistryHashes() {\n-\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n-\t\t\tif (registry instanceof HashedRegistry) {\n-\t\t\t\tif (((HashedRegistry) registry).getStoredHash() != ((HashedRegistry) registry).storeHash()) {\n-\t\t\t\t\tRegistryAttributeHolder holder = RegistryAttributeHolder.get(registry);\n-\n-\t\t\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n-\t\t\t\t\t\tLOGGER.debug(\"Registry {} has been marked as modded as the hash changed since bootstrap\", Registry.REGISTRIES.getId(registry));\n-\t\t\t\t\t\tholder.addAttribute(RegistryAttribute.MODDED);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Nzg4MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426157881", "body": "This is a bad name as it's set every time `storeHash` is called, which includes in `RegistrySyncManager.bootstrapRegistries()`, which is called *after* bootstrap.", "bodyText": "This is a bad name as it's set every time storeHash is called, which includes in RegistrySyncManager.bootstrapRegistries(), which is called after bootstrap.", "bodyHTML": "<p dir=\"auto\">This is a bad name as it's set every time <code>storeHash</code> is called, which includes in <code>RegistrySyncManager.bootstrapRegistries()</code>, which is called <em>after</em> bootstrap.</p>", "author": "Earthcomputer", "createdAt": "2020-05-16T14:23:34Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n+\n+\t@Unique\n+\tprivate int preBootstrapHash = -1;", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex ce30f6a5b..e74402e67 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -37,7 +37,7 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \t@Unique\n-\tprivate int preBootstrapHash = -1;\n+\tprivate int previousHash = -1;\n \n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n", "next_change": {"commit": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex e74402e67..73c84794f 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -29,16 +29,12 @@ import net.minecraft.util.Identifier;\n import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n-import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n \n @Mixin(Registry.class)\n-public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry {\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Unique\n-\tprivate int previousHash = -1;\n-\n \t@Shadow\n \tpublic abstract Set<Identifier> getIds();\n \n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\nindex 73c84794f..9fba93fe8 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n", "chunk": "@@ -35,16 +33,6 @@ public abstract class MixinRegistry<T> implements RegistryAttributeHolder, Fabri\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Shadow\n-\tpublic abstract Set<Identifier> getIds();\n-\n-\t/**\n-\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n-\t * This is set to true when using FabricRegistryBuilder\n-\t */\n-\t@Unique\n-\tprivate boolean builtWithBuilder = false;\n-\n \t@Override\n \tpublic RegistryAttributeHolder addAttribute(RegistryAttribute attribute) {\n \t\tattributes.add(attribute);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODQ2Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426408462", "body": "Gone as of 20w20a", "bodyText": "Gone as of 20w20a", "bodyHTML": "<p dir=\"auto\">Gone as of 20w20a</p>", "author": "i509VCB", "createdAt": "2020-05-18T07:04:43Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\n+\t\t// Saved and synced using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// Synced in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODk3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518974", "bodyText": "ill merge it up", "author": "modmuss50", "createdAt": "2020-05-18T10:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d690625ac15672ae7ce786b054b8db3ad8b80916", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 43b212ffd..71029dbba 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -97,9 +97,6 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n \n-\t\t// Serialised by string, doesnt seem to be synced\n-\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n-\n \t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n \t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n", "next_change": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 71029dbba..63cc3d544 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -95,12 +95,7 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Serialised by string, doesnt seem to be synced\n-\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n-\n-\t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n-\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n-\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n-\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE);\n \n \t\t// Synced in PaintingSpawnS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n", "next_change": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 63cc3d544..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -97,6 +99,9 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Serialised by string, doesnt seem to be synced\n \t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE);\n \n+\t\t// Not synced or saved\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_ENTITY_TYPE);\n+\n \t\t// Synced in PaintingSpawnS2CPacket\n \t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426410301", "body": "Checkstyle your drunk, go home.", "bodyText": "Checkstyle your drunk, go home.", "bodyHTML": "<p dir=\"auto\">Checkstyle your drunk, go home.</p>", "author": "i509VCB", "createdAt": "2020-05-18T07:09:04Z", "path": "fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.registry.sync;\n+\n+import org.apache.commons.lang3.Validate;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Material;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.api.event.registry.FabricRegistryBuilder;\n+\n+public class RegistrySyncTest implements ModInitializer {\n+\t/**\n+\t * These are system property's as it allows for easier testing with different run configurations.\n+\t */\n+\tpublic static final boolean REGISTER_BLOCKS = Boolean.parseBoolean(System.getProperty(\"fabric.registry.sync.test.register.blocks\", \"true\"));\n+\tpublic static final boolean REGISTER_ITEMS = Boolean.parseBoolean(System.getProperty(\"fabric.registry.sync.test.register.items\", \"true\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tif (REGISTER_BLOCKS) {\n+\t\t\tfor (int i = 0; i < 5; i++) {\n+\t\t\t\tBlock block = new Block(AbstractBlock.Settings.of(Material.STONE));\n+\t\t\t\tRegistry.BLOCK.add(new Identifier(\"registry_sync\", \"block_\" + i), block);\n+\n+\t\t\t\tif (REGISTER_ITEMS) {\n+\t\t\t\t\tBlockItem blockItem = new BlockItem(block, new Item.Settings());\n+\t\t\t\t\tRegistry.ITEM.add(new Identifier(\"registry_sync\", \"block_\" + i), blockItem);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tValidate.isTrue(RegistryAttributeHolder.get(Registry.BLOCK).hasAttribute(RegistryAttribute.MODDED), \"Modded block was registered but registry not marked as modded\");\n+\n+\t\t\tif (REGISTER_ITEMS) {\n+\t\t\t\tValidate.isTrue(RegistryAttributeHolder.get(Registry.ITEM).hasAttribute(RegistryAttribute.MODDED), \"Modded item was registered but registry not marked as modded\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tMutableRegistry<String> fabricRegistry = FabricRegistryBuilder.createSimple(String.class)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.build();", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNjMzMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426436333", "bodyText": "Checkstyle wasn't run on travis as it is only run after compilation success.", "author": "liach", "createdAt": "2020-05-18T07:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2MTc4NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426661785", "bodyText": "this passes", "author": "modmuss50", "createdAt": "2020-05-18T14:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java b/fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java\nindex b1ca73d75..27d93b2c1 100644\n--- a/fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java\n+++ b/fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java\n", "chunk": "@@ -60,25 +61,17 @@ public class RegistrySyncTest implements ModInitializer {\n \t\t\t}\n \t\t}\n \n-\t\tMutableRegistry<String> fabricRegistry = FabricRegistryBuilder.createSimple(String.class)\n+\t\tclass_5321<Registry<String>> fabricRegistryKey = class_5321.method_29180(new Identifier(\"registry_sync\", \"fabric_registry\"));\n+\t\tMutableRegistry<String> fabricRegistry = FabricRegistryBuilder.createSimple(fabricRegistryKey, Lifecycle.stable())\n \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n \n-\t\tRegistry.REGISTRIES.add(new Identifier(\"registry_sync\", \"fabric_registry\"), fabricRegistry);\n-\t\tfabricRegistry.add(new Identifier(\"registry_sync\", \"test\"), \"test\");\n+\t\tRegistry.register(fabricRegistry, new Identifier(\"registry_sync\", \"test\"), \"test\");\n \n-\t\tMutableRegistry<String> legacyRegistry = new SimpleRegistry<>();\n-\n-\t\tRegistry.REGISTRIES.add(new Identifier(\"registry_sync\", \"legacy_registry\"), legacyRegistry);\n-\t\tlegacyRegistry.add(new Identifier(\"registry_sync\", \"test\"), \"test\");\n+\t\tValidate.isTrue(Registry.REGISTRIES.containsId(new Identifier(\"registry_sync\", \"fabric_registry\")));\n \n \t\tValidate.isTrue(RegistryAttributeHolder.get(fabricRegistry).hasAttribute(RegistryAttribute.MODDED));\n-\t\tValidate.isTrue(RegistryAttributeHolder.get(legacyRegistry).hasAttribute(RegistryAttribute.MODDED));\n-\n \t\tValidate.isTrue(RegistryAttributeHolder.get(fabricRegistry).hasAttribute(RegistryAttribute.SYNCED));\n \t\tValidate.isTrue(!RegistryAttributeHolder.get(fabricRegistry).hasAttribute(RegistryAttribute.PERSISTED));\n-\n-\t\tValidate.isTrue(RegistryAttributeHolder.get(legacyRegistry).hasAttribute(RegistryAttribute.SYNCED));\n-\t\tValidate.isTrue(RegistryAttributeHolder.get(legacyRegistry).hasAttribute(RegistryAttribute.PERSISTED));\n \t}\n }\n", "next_change": null}]}}, {"oid": "d690625ac15672ae7ce786b054b8db3ad8b80916", "url": "https://github.com/FabricMC/fabric/commit/d690625ac15672ae7ce786b054b8db3ad8b80916", "message": "Minor fixes", "committedDate": "2020-05-18T14:23:54Z", "type": "commit"}, {"oid": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "url": "https://github.com/FabricMC/fabric/commit/12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "message": "Remove hash stuff", "committedDate": "2020-05-19T12:31:06Z", "type": "commit"}, {"oid": "adb73e4b980a3d0f6fac0ee3ab4618819395712b", "url": "https://github.com/FabricMC/fabric/commit/adb73e4b980a3d0f6fac0ee3ab4618819395712b", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "committedDate": "2020-05-21T18:17:25Z", "type": "commit"}, {"oid": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "url": "https://github.com/FabricMC/fabric/commit/d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "message": "20w21a - massive changes", "committedDate": "2020-05-21T19:05:30Z", "type": "commit"}, {"oid": "b9d1f803937de229fbaef06965d6a1c160661acd", "url": "https://github.com/FabricMC/fabric/commit/b9d1f803937de229fbaef06965d6a1c160661acd", "message": "fix build", "committedDate": "2020-05-21T19:14:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjAxNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428862016", "body": "```suggestion\r\n\t * Applies the attributes to the registry and registers it.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Applies the attributes to the registry and register's it.\n          \n          \n            \n            \t * Applies the attributes to the registry and registers it.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Applies</span> the attributes to the registry and <span class=\"x x-first\">register</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">s</span> it.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Applies</span> the attributes to the registry and <span class=\"x x-first x-last\">registers</span> it.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Earthcomputer", "createdAt": "2020-05-21T19:21:07Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -97,12 +104,16 @@ private FabricRegistryBuilder(R registry) {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry.\n+\t * Applies the attributes to the registry and register's it.", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..f4581d350 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -104,7 +104,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry and register's it.\n+\t * Applies the attributes to the registry and registers it.\n \t * @return the registry instance with the attributes applied\n \t */\n \tpublic R buildAndRegister() {\n", "next_change": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex f4581d350..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -104,7 +104,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry and registers it.\n+\t * Applies the attributes to the registry and register's it.\n \t * @return the registry instance with the attributes applied\n \t */\n \tpublic R buildAndRegister() {\n", "next_change": {"commit": "c2eda65f7a6ad0b62bed53c120f9522107d8c915", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ab0103c0d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -104,7 +104,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry and register's it.\n+\t * Applies the attributes to the registry and registers it.\n \t * @return the registry instance with the attributes applied\n \t */\n \tpublic R buildAndRegister() {\n", "next_change": null}]}}, {"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex f4581d350..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -112,7 +112,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t\tfabricRegistry.build(attributes);\n \n \t\t//noinspection unchecked\n-\t\tAccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n+\t\tAccessorRegistry.getROOT().add(((AccessorRegistry) registry).getRegistryKey(), registry);\n \n \t\treturn registry;\n \t}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428862642", "body": "Should there be helper methods here to allow for passing an `Identifier` rather than a `RegistryKey` here? And a default value for `lifecycle`?", "bodyText": "Should there be helper methods here to allow for passing an Identifier rather than a RegistryKey here? And a default value for lifecycle?", "bodyHTML": "<p dir=\"auto\">Should there be helper methods here to allow for passing an <code>Identifier</code> rather than a <code>RegistryKey</code> here? And a default value for <code>lifecycle</code>?</p>", "author": "Earthcomputer", "createdAt": "2020-05-21T19:22:26Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -50,31 +55,33 @@\n \t * @param <R> The registry type\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type) {\n-\t\treturn from(new SimpleRegistry<>());\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDkwNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864904", "bodyText": "The RegistryKey now provides the type T removes the need for passing a Class as well.", "author": "modmuss50", "createdAt": "2020-05-21T19:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MTM4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428991382", "bodyText": "That generic sugar in registry key is totally unused and can be safely casted. I support earthcomputer's proposal here. A needed registry key in this case can always be created by RegistryKey.ofRegistry(id), creating a registry key of any type extending Registry<T> (T is a wildcard), with registry \"minecraft:root\" and value from id parameter.", "author": "liach", "createdAt": "2020-05-22T01:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MjE1MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428992151", "bodyText": "Also on lifecycle: we can use Lifecycle.stable() as the default lifecycle.", "author": "liach", "createdAt": "2020-05-22T01:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTQ4Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429275483", "bodyText": "I dont really think there is a need to pass the Lifecyle, stable should be fine for all.", "author": "modmuss50", "createdAt": "2020-05-22T14:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -67,7 +67,7 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n \t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n \t}\n \n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -62,26 +59,24 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type, Identifier registryId) {\n+\t\treturn from(new SimpleRegistry<T>(RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier registryId, Identifier defaultId) {\n+\t\treturn from(new DefaultedRegistry<T>(defaultId.toString(), RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \tprivate final R registry;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDAyNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864024", "body": "Screw backwards compatibility at this point, I guess?", "bodyText": "Screw backwards compatibility at this point, I guess?", "bodyHTML": "<p dir=\"auto\">Screw backwards compatibility at this point, I guess?</p>", "author": "Earthcomputer", "createdAt": "2020-05-21T19:25:11Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -35,16 +33,6 @@\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Shadow\n-\tpublic abstract Set<Identifier> getIds();\n-\n-\t/**\n-\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n-\t * This is set to true when using FabricRegistryBuilder\n-\t */\n-\t@Unique\n-\tprivate boolean builtWithBuilder = false;", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDY3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864674", "bodyText": "Yes, an API is needed to add a registry now, so no point in assuming the old way is used anymore. If mods have updated in the past few days then they should be active enought to move to the API.", "author": "modmuss50", "createdAt": "2020-05-21T19:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDAyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "url": "https://github.com/FabricMC/fabric/commit/89e5bfbde8bcb196583b5937c27ba3446f3408b7", "message": "Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>", "committedDate": "2020-05-21T19:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MTgxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428991818", "body": "Imo we should use an identifier. You cannot prevent people from passing botched registry keys with registry reference other than `minecraft:root`, while an identifier only specifying the value of the registry key is always safe.", "bodyText": "Imo we should use an identifier. You cannot prevent people from passing botched registry keys with registry reference other than minecraft:root, while an identifier only specifying the value of the registry key is always safe.", "bodyHTML": "<p dir=\"auto\">Imo we should use an identifier. You cannot prevent people from passing botched registry keys with registry reference other than <code>minecraft:root</code>, while an identifier only specifying the value of the registry key is always safe.</p>", "author": "liach", "createdAt": "2020-05-22T01:02:43Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -50,31 +55,33 @@\n \t * @param <R> The registry type\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type) {\n-\t\treturn from(new SimpleRegistry<>());\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier defaultId) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString()));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ac2834fa6..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -80,12 +80,12 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n \t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n \t}\n \n \tprivate final R registry;\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \tprivate FabricRegistryBuilder(R registry) {\n \t\tthis.registry = registry;\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -62,26 +59,24 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type, Identifier registryId) {\n+\t\treturn from(new SimpleRegistry<T>(RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier registryId, Identifier defaultId) {\n+\t\treturn from(new DefaultedRegistry<T>(defaultId.toString(), RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \tprivate final R registry;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMDgxNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429010815", "body": "EnumSet", "bodyText": "EnumSet", "bodyHTML": "<p dir=\"auto\">EnumSet</p>", "author": "sfPlayer1", "createdAt": "2020-05-22T02:27:21Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.class_5321;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * \t}\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registry The base registry type such as {@link net.minecraft.util.registry.SimpleRegistry} or {@link net.minecraft.util.registry.DefaultedRegistry}\n+\t * @param <T> The type stored in the Registry\n+\t * @param <R> The registry type\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param <T> The type stored in the Registry\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\t}\n+\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param defaultId The default registry id\n+\t * @param <T> The type stored in the Registry\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\t}\n+\n+\tprivate final R registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex f4581d350..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -80,12 +80,12 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n \t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n \t}\n \n \tprivate final R registry;\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n \tprivate FabricRegistryBuilder(R registry) {\n \t\tthis.registry = registry;\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -62,26 +59,24 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type, Identifier registryId) {\n+\t\treturn from(new SimpleRegistry<T>(RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier registryId, Identifier defaultId) {\n+\t\treturn from(new DefaultedRegistry<T>(defaultId.toString(), RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \tprivate final R registry;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNzU0Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429017543", "body": "Shouldn't we register it fully? The code in buildAndRegister does `AccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);`, which looks similar?", "bodyText": "Shouldn't we register it fully? The code in buildAndRegister does AccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);, which looks similar?", "bodyHTML": "<p dir=\"auto\">Shouldn't we register it fully? The code in buildAndRegister does <code>AccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);</code>, which looks similar?</p>", "author": "sfPlayer1", "createdAt": "2020-05-22T02:56:57Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.class_5321;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTE4MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429169181", "bodyText": "Ah, the javadoc needs updating since it was changed.", "author": "modmuss50", "createdAt": "2020-05-22T10:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNzU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex f4581d350..50b672812 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -36,10 +35,11 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  *\n  * <pre>\n  * {@code\n- *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n- * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n- * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n- * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ *  RegistryKey<Registry<String>> registryKey = RegistryKey.ofRegistry(new Identifier(\"registry_sync\", \"fabric_registry\"));\n+ *\n+ * \t\tMutableRegistry<String> registry = FabricRegistryBuilder.createSimple(registryKey, Lifecycle.stable())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n  * \t}\n  * </pre>\n  *\n", "next_change": {"commit": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..ed9a3220c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -35,9 +34,7 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  *\n  * <pre>\n  * {@code\n- *  RegistryKey<Registry<String>> registryKey = RegistryKey.ofRegistry(new Identifier(\"registry_sync\", \"fabric_registry\"));\n- *\n- * \t\tMutableRegistry<String> registry = FabricRegistryBuilder.createSimple(registryKey, Lifecycle.stable())\n+ *  SimpleRegistry<String> registry = FabricRegistryBuilder.createSimple(String.class, new Identifier(\"registry_sync\", \"fabric_registry\"))\n  * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n  * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n  * \t}\n", "next_change": {"commit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ed9a3220c..0a3ba342d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -43,7 +43,7 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  * @param <T> The type stored in the Registry\n  * @param <R> The registry type\n  */\n-public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+public final class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDU4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429020582", "body": "IMO this code would be clearer by writing it like thhs since I had to look twice whether it was exhaustive:\r\n\r\n```\r\nif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\r\n\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\r\n\tcontinue;\r\n}\r\n```", "bodyText": "IMO this code would be clearer by writing it like thhs since I had to look twice whether it was exhaustive:\nif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n\tcontinue;\n}", "bodyHTML": "<p dir=\"auto\">IMO this code would be clearer by writing it like thhs since I had to look twice whether it was exhaustive:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n\tLOGGER.debug(&quot;Not {} registry: {}&quot;, isClientSync ? &quot;syncing&quot; : &quot;saving&quot;, registryId);\n\tcontinue;\n}\"><pre><code>if (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n\tcontinue;\n}\n</code></pre></div>", "author": "sfPlayer1", "createdAt": "2020-05-22T03:10:52Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (isClientSync && REGISTRY_BLACKLIST_NETWORK.contains(registryId)) {\n+\t\t\t}\n+\n+\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n+\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 7cd7399a8..f750945a5 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -133,21 +140,20 @@ public final class RegistrySyncManager {\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\t/*\n+\t\t\t * This contains the previous state's registry data, this is used for a few things:\n+\t\t\t * Such as ensuring that previously modded registries or registry entries are not lost or overwritten.\n+\t\t\t */\n \t\t\tCompoundTag existingRegistryData = null;\n \n-\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n-\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\tif (activeTag != null && activeTag.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeTag.getCompound(registryId.toString());\n \t\t\t}\n \n \t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n \n-\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n-\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n-\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n+\t\t\tif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n", "next_change": {"commit": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex f750945a5..557c35e17 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -159,16 +159,16 @@ public final class RegistrySyncManager {\n \n \t\t\t/*\n \t\t\t * Dont do anything with vanilla registries on client sync.\n-\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.\n+\t\t\t * When saving skip none modded registries that doesnt have previous registry data\n \t\t\t *\n \t\t\t * This will not sync IDs if a world has been previously modded, either from removed mods\n \t\t\t * or a previous version of fabric registry sync, but will save these ids to disk in case the mod or mods\n \t\t\t * are added back.\n \t\t\t */\n-\t\t\tif ((existingRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\tif ((previousRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (existingRegistryData != null) {\n+\t\t\t} else if (previousRegistryData != null) {\n \t\t\t\tLOGGER.debug(\"Preserving previously modded registry: \" + registryId);\n \t\t\t}\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDgzMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429020831", "body": "\"preserve existing registry ids if they exist\"", "bodyText": "\"preserve existing registry ids if they exist\"", "bodyHTML": "<p dir=\"auto\">\"preserve existing registry ids if they exist\"</p>", "author": "sfPlayer1", "createdAt": "2020-05-22T03:11:58Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (isClientSync && REGISTRY_BLACKLIST_NETWORK.contains(registryId)) {\n+\t\t\t}\n+\n+\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n+\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tRegistry registry = Registry.REGISTRIES.get(registryId);\n+\t\t\t/*\n+\t\t\t * Dont do anything with vanilla registries on client sync.\n+\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 7cd7399a8..f750945a5 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -133,21 +140,20 @@ public final class RegistrySyncManager {\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\t/*\n+\t\t\t * This contains the previous state's registry data, this is used for a few things:\n+\t\t\t * Such as ensuring that previously modded registries or registry entries are not lost or overwritten.\n+\t\t\t */\n \t\t\tCompoundTag existingRegistryData = null;\n \n-\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n-\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\tif (activeTag != null && activeTag.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeTag.getCompound(registryId.toString());\n \t\t\t}\n \n \t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n \n-\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n-\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n-\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n+\t\t\tif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n", "next_change": {"commit": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex f750945a5..557c35e17 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -159,16 +159,16 @@ public final class RegistrySyncManager {\n \n \t\t\t/*\n \t\t\t * Dont do anything with vanilla registries on client sync.\n-\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.\n+\t\t\t * When saving skip none modded registries that doesnt have previous registry data\n \t\t\t *\n \t\t\t * This will not sync IDs if a world has been previously modded, either from removed mods\n \t\t\t * or a previous version of fabric registry sync, but will save these ids to disk in case the mod or mods\n \t\t\t * are added back.\n \t\t\t */\n-\t\t\tif ((existingRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\tif ((previousRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (existingRegistryData != null) {\n+\t\t\t} else if (previousRegistryData != null) {\n \t\t\t\tLOGGER.debug(\"Preserving previously modded registry: \" + registryId);\n \t\t\t}\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTUwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429021501", "body": "It is quite unclear from a quick look what \"existingRegistryData\" and \"activeIdMap\" are supposed to mean", "bodyText": "It is quite unclear from a quick look what \"existingRegistryData\" and \"activeIdMap\" are supposed to mean", "bodyHTML": "<p dir=\"auto\">It is quite unclear from a quick look what \"existingRegistryData\" and \"activeIdMap\" are supposed to mean</p>", "author": "sfPlayer1", "createdAt": "2020-05-22T03:15:13Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTQ2NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429169465", "bodyText": "I will go around and put some comments on things.", "author": "modmuss50", "createdAt": "2020-05-22T10:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex 7cd7399a8..f750945a5 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -133,21 +140,20 @@ public final class RegistrySyncManager {\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\t/*\n+\t\t\t * This contains the previous state's registry data, this is used for a few things:\n+\t\t\t * Such as ensuring that previously modded registries or registry entries are not lost or overwritten.\n+\t\t\t */\n \t\t\tCompoundTag existingRegistryData = null;\n \n-\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n-\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\tif (activeTag != null && activeTag.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeTag.getCompound(registryId.toString());\n \t\t\t}\n \n \t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n \n-\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n-\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n-\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n+\t\t\tif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n", "next_change": {"commit": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\nindex f750945a5..557c35e17 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java\n", "chunk": "@@ -159,16 +159,16 @@ public final class RegistrySyncManager {\n \n \t\t\t/*\n \t\t\t * Dont do anything with vanilla registries on client sync.\n-\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.\n+\t\t\t * When saving skip none modded registries that doesnt have previous registry data\n \t\t\t *\n \t\t\t * This will not sync IDs if a world has been previously modded, either from removed mods\n \t\t\t * or a previous version of fabric registry sync, but will save these ids to disk in case the mod or mods\n \t\t\t * are added back.\n \t\t\t */\n-\t\t\tif ((existingRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\tif ((previousRegistryData == null || isClientSync) && !attributeHolder.hasAttribute(RegistryAttribute.MODDED)) {\n \t\t\t\tLOGGER.debug(\"Skipping un-modded registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (existingRegistryData != null) {\n+\t\t\t} else if (previousRegistryData != null) {\n \t\t\t\tLOGGER.debug(\"Preserving previously modded registry: \" + registryId);\n \t\t\t}\n \n", "next_change": null}]}}]}}, {"oid": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "url": "https://github.com/FabricMC/fabric/commit/af7a17b7bc44a9c474f61fd65c84f2975e584870", "message": "Feedback and update mappings", "committedDate": "2020-05-22T13:29:01Z", "type": "commit"}, {"oid": "c2eda65f7a6ad0b62bed53c120f9522107d8c915", "url": "https://github.com/FabricMC/fabric/commit/c2eda65f7a6ad0b62bed53c120f9522107d8c915", "message": "Merge remote-tracking branch 'modmuss50/vanilla_registries' into vanilla_registries", "committedDate": "2020-05-22T13:29:33Z", "type": "commit"}, {"oid": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "url": "https://github.com/FabricMC/fabric/commit/b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "message": "No longer apply mappings to vanilla registries, no longer save empty mapping data.", "committedDate": "2020-05-22T14:04:17Z", "type": "commit"}, {"oid": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "url": "https://github.com/FabricMC/fabric/commit/ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "message": "Use Identifier in FabricRegistryBuilder over RegistryKey\nImprove empty registry tag handling", "committedDate": "2020-05-22T14:22:45Z", "type": "commit"}, {"oid": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "url": "https://github.com/FabricMC/fabric/commit/90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "message": "Reorder toTag empty checks", "committedDate": "2020-05-22T14:47:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzczNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429593734", "body": "Maybe also clarify this is synced from the `RegistryTagManager`", "bodyText": "Maybe also clarify this is synced from the RegistryTagManager", "bodyHTML": "<p dir=\"auto\">Maybe also clarify this is synced from the <code>RegistryTagManager</code></p>", "author": "i509VCB", "createdAt": "2020-05-24T02:40:10Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket", "originalCommit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 63cc3d544..d236be91c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -45,12 +45,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Does not appear to be saved or synced, the string id is used.\n \t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n \n-\t\t// Synced in EntitySpawnS2CPacket\n+\t\t// Synced in EntitySpawnS2CPacket and RegistryTagManager\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\t\t// Synced in RegistryTagManager\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mzc3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429593774", "body": "Needs to be synced. Called by `RegistryTagManager` which syncs raw ids", "bodyText": "Needs to be synced. Called by RegistryTagManager which syncs raw ids", "bodyHTML": "<p dir=\"auto\">Needs to be synced. Called by <code>RegistryTagManager</code> which syncs raw ids</p>", "author": "i509VCB", "createdAt": "2020-05-24T02:41:03Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);", "originalCommit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f56b2f5f1f80162569a68d2673c4226f816437b5", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex 63cc3d544..d236be91c 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -45,12 +45,13 @@ public class FabricRegistryInit implements ModInitializer {\n \t\t// Does not appear to be saved or synced, the string id is used.\n \t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n \n-\t\t// Synced in EntitySpawnS2CPacket\n+\t\t// Synced in EntitySpawnS2CPacket and RegistryTagManager\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Doesnt appear to need syncing or saving?\n-\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\t\t// Synced in RegistryTagManager\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Saved and synced using string ID.\n \t\tRegistryAttributeHolder.get(Registry.POTION);\n", "next_change": null}]}}, {"oid": "f56b2f5f1f80162569a68d2673c4226f816437b5", "url": "https://github.com/FabricMC/fabric/commit/f56b2f5f1f80162569a68d2673c4226f816437b5", "message": "Minor fixes", "committedDate": "2020-05-25T16:16:04Z", "type": "commit"}, {"oid": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "url": "https://github.com/FabricMC/fabric/commit/5398201dbc8b34cc83ff451e6bc907524f23ad6f", "message": "Merge remote-tracking branch 'modmuss50/vanilla_registries' into vanilla_registries", "committedDate": "2020-05-25T16:16:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MTcwOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430691708", "body": "Should this be final?", "bodyText": "Should this be final?", "bodyHTML": "<p dir=\"auto\">Should this be final?</p>", "author": "i509VCB", "createdAt": "2020-05-26T20:34:02Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.EnumSet;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  SimpleRegistry<String> registry = FabricRegistryBuilder.createSimple(String.class, new Identifier(\"registry_sync\", \"fabric_registry\"))\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n+ * \t}\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {", "originalCommit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex ed9a3220c..0a3ba342d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -43,7 +43,7 @@ import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n  * @param <T> The type stored in the Registry\n  * @param <R> The registry type\n  */\n-public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+public final class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430692200", "body": "`RegistryAccessor`?", "bodyText": "RegistryAccessor?", "bodyHTML": "<p dir=\"auto\"><code>RegistryAccessor</code>?</p>", "author": "i509VCB", "createdAt": "2020-05-26T20:34:36Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/AccessorRegistry.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+@Mixin(Registry.class)\n+public interface AccessorRegistry<T> {", "originalCommit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5OTQyMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430699420", "bodyText": "AccessibleRegistry or RegistryAccess/RegistryAccessor. AccessorRegistry sounds like a registry of accessors.", "author": "liach", "createdAt": "2020-05-26T20:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMjM5Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430702396", "bodyText": "The rest of the module has Mixin* (including MixinRegistry). so not sure what to do here.", "author": "modmuss50", "createdAt": "2020-05-26T20:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMjg0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430702842", "bodyText": "no worries, this is rather trivial.", "author": "liach", "createdAt": "2020-05-26T20:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "url": "https://github.com/FabricMC/fabric/commit/1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "message": "Make FabricRegistryBuilder final", "committedDate": "2020-05-26T20:55:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430721548", "body": "Can't `Lifecycle.stable()` be a default?", "bodyText": "Can't Lifecycle.stable() be a default?", "bodyHTML": "<p dir=\"auto\">Can't <code>Lifecycle.stable()</code> be a default?</p>", "author": "Earthcomputer", "createdAt": "2020-05-26T21:36:06Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -67,7 +67,7 @@\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMjE0MA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430722140", "bodyText": "Oh, I can't read apparently", "author": "Earthcomputer", "createdAt": "2020-05-26T21:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMjI3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430722274", "bodyText": "People should decide the lifecycle themselves.", "author": "i509VCB", "createdAt": "2020-05-26T21:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMzEyNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430723125", "bodyText": "People should decide the lifecycle themselves.\n\nWhy... Lifecycle.experimental() should not be used except in truly experimental circumstances (which are exceptional). It causes a warning message to pup up for the player.", "author": "Earthcomputer", "createdAt": "2020-05-26T21:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "edfbf82966fcc736b9f40cd0461500748ba9ef36", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\nindex 50b672812..0a3ba342d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n", "chunk": "@@ -62,26 +59,24 @@ public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type, Identifier registryId) {\n+\t\treturn from(new SimpleRegistry<T>(RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param registryKey The RegistryKey to create the registry\n-\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param registryId The registry {@link Identifier} used as the registry id\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier registryId, Identifier defaultId) {\n+\t\treturn from(new DefaultedRegistry<T>(defaultId.toString(), RegistryKey.ofRegistry(registryId), Lifecycle.stable()));\n \t}\n \n \tprivate final R registry;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4MzQ0MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432083441", "body": "Raw id used in the `EnchantmentTableScreenHandler`. Needs to be synced", "bodyText": "Raw id used in the EnchantmentTableScreenHandler. Needs to be synced", "bodyHTML": "<p dir=\"auto\">Raw id used in the <code>EnchantmentTableScreenHandler</code>. Needs to be synced</p>", "author": "i509VCB", "createdAt": "2020-05-28T19:52:15Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);", "originalCommit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDI5Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432690293", "bodyText": "Great spot, thanks a lot.", "author": "modmuss50", "createdAt": "2020-05-29T19:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4MzQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "changed_code": [{"header": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\nindex d236be91c..b5957e199 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java\n", "chunk": "@@ -42,8 +42,9 @@ public class FabricRegistryInit implements ModInitializer {\n \t\tRegistryAttributeHolder.get(Registry.BLOCK)\n \t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n-\t\t// Does not appear to be saved or synced, the string id is used.\n-\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\t\t// Synced in EnchantmentScreenHandler\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n \n \t\t// Synced in EntitySpawnS2CPacket and RegistryTagManager\n \t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTQwOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432131409", "body": "Entry for BlockEntityType is missing", "bodyText": "Entry for BlockEntityType is missing", "bodyHTML": "<p dir=\"auto\">Entry for BlockEntityType is missing</p>", "author": "i509VCB", "createdAt": "2020-05-28T21:22:41Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {", "originalCommit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTkxMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432131910", "bodyText": "From my checks, the raw ids are not used anywhere", "author": "i509VCB", "createdAt": "2020-05-28T21:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTQwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "edfbf82966fcc736b9f40cd0461500748ba9ef36", "url": "https://github.com/FabricMC/fabric/commit/edfbf82966fcc736b9f40cd0461500748ba9ef36", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tbuild.gradle\n#\tfabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinIdRegistry.java", "committedDate": "2020-05-29T19:22:04Z", "type": "commit"}, {"oid": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "url": "https://github.com/FabricMC/fabric/commit/bc362d49d7891775e1c4c4a7320962771ae7d5f7", "message": "Update registry attributes", "committedDate": "2020-05-29T19:27:36Z", "type": "commit"}, {"oid": "a1c295c9093c1eb5ed08605f347855a26ec338f4", "url": "https://github.com/FabricMC/fabric/commit/a1c295c9093c1eb5ed08605f347855a26ec338f4", "message": "Merge remote-tracking branch 'remotes/origin/1.16' into vanilla_registries", "committedDate": "2020-06-04T20:25:15Z", "type": "commit"}, {"oid": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "url": "https://github.com/FabricMC/fabric/commit/ad4e033bf603860318a7fee6a73ce5128b5efebd", "message": "Fix compile issue", "committedDate": "2020-06-04T20:27:23Z", "type": "commit"}]}