{"pr_number": 2191, "pr_title": "[JBPM-9277] JMS Audit Data Replication in spring boot", "pr_createdAt": "2020-08-11T10:50:15Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191", "merge_commit": "7d6074851f311350f63bc402919442dda7f55b83", "timeline": [{"oid": "c713d4f00efa8b5634091eed0af2a47a0e913a88", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c713d4f00efa8b5634091eed0af2a47a0e913a88", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-12T10:33:23Z", "type": "forcePushed"}, {"oid": "e759311bfdbb1b03eb419c8063fa17001bf75631", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e759311bfdbb1b03eb419c8063fa17001bf75631", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-12T13:21:09Z", "type": "forcePushed"}, {"oid": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7da7ab4939e33569e7c47c953ecbffb3db7350ad", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T10:15:41Z", "type": "forcePushed"}, {"oid": "6842f958b337e770fac9d312f5267aeb85f4a102", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6842f958b337e770fac9d312f5267aeb85f4a102", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T10:32:12Z", "type": "forcePushed"}, {"oid": "33b974eaa8b1696d2ce329b389d4362a486673de", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/33b974eaa8b1696d2ce329b389d4362a486673de", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T15:00:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0MjgxOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469842819", "body": "`if` statement is redundant. `packagesToScan` is always not null as already checked at line 69:\r\n\r\nhttps://github.com/kiegroup/droolsjbpm-integration/blob/e759311bfdbb1b03eb419c8063fa17001bf75631/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java#L69", "bodyText": "if statement is redundant. packagesToScan is always not null as already checked at line 69:\n\n  \n    \n      droolsjbpm-integration/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java\n    \n    \n         Line 69\n      in\n      e759311\n    \n    \n    \n    \n\n        \n          \n           if (packagesToScan != null) {", "bodyHTML": "<p dir=\"auto\"><code>if</code> statement is redundant. <code>packagesToScan</code> is always not null as already checked at line 69:</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/kiegroup/droolsjbpm-integration/blob/e759311bfdbb1b03eb419c8063fa17001bf75631/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java#L69\">droolsjbpm-integration/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 69\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/kiegroup/droolsjbpm-integration/commit/e759311bfdbb1b03eb419c8063fa17001bf75631\">e759311</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (packagesToScan <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "afalhambra", "createdAt": "2020-08-13T10:06:30Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.autoconfigure;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PersistenceException;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.persistence.JBPMPersistenceUnitPostProcessor;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.core.type.filter.AnnotationTypeFilter;\n+import org.springframework.core.type.filter.TypeFilter;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+public final class EntityManagerFactoryHelper {\n+\n+    private static final String CLASS_RESOURCE_PATTERN = \"/**/*.class\";\n+    private static final String PACKAGE_INFO_SUFFIX = \".package-info\";\n+\n+    public EntityManagerFactoryHelper() {\n+        // nothing\n+    }\n+\n+    public static LocalContainerEntityManagerFactoryBean create(ApplicationContext applicationContext, DataSource dataSource, JpaProperties jpaProperties, String puName, String location) {\n+        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();\n+        factoryBean.setPersistenceUnitName(puName);\n+        factoryBean.setPersistenceXmlLocation(location);\n+        factoryBean.setJtaDataSource(dataSource);\n+        factoryBean.setJpaPropertyMap(jpaProperties.getProperties());\n+        HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();\n+        adapter.setPrepareConnection(false);\n+        factoryBean.setJpaVendorAdapter(adapter);\n+\n+        List<PersistenceUnitPostProcessor> postProcessors = new ArrayList<>();\n+        String packagesToScan = jpaProperties.getProperties().get(\"entity-scan-packages\");\n+        if (packagesToScan != null) {\n+            postProcessors.add(new PersistenceUnitPostProcessor() {\n+\n+                @Override\n+                public void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {\n+                    Set<TypeFilter> entityTypeFilters = new LinkedHashSet<TypeFilter>(3);\n+                    entityTypeFilters.add(new AnnotationTypeFilter(Entity.class, false));\n+                    entityTypeFilters.add(new AnnotationTypeFilter(Embeddable.class, false));\n+                    entityTypeFilters.add(new AnnotationTypeFilter(MappedSuperclass.class, false));\n+\n+                    ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+\n+                    if (packagesToScan != null) {", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0MzI1NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472943254", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0MjgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java\nindex 91e3fc8b9..a89efa1ba 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java\n", "chunk": "@@ -78,29 +78,29 @@ public final class EntityManagerFactoryHelper {\n \n                     ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n \n-                    if (packagesToScan != null) {\n-                        for (String pkg : packagesToScan.split(\",\")) {\n-                            try {\n-                                String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +\n-                                                 ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN;\n-                                Resource[] resources = resourcePatternResolver.getResources(pattern);\n-                                MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(resourcePatternResolver);\n-                                for (Resource resource : resources) {\n-                                    if (resource.isReadable()) {\n-                                        MetadataReader reader = readerFactory.getMetadataReader(resource);\n-                                        String className = reader.getClassMetadata().getClassName();\n-                                        if (matchesFilter(reader, readerFactory, entityTypeFilters)) {\n-                                            pui.addManagedClassName(className);\n-                                        } else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {\n-                                            pui.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()));\n-                                        }\n+\n+                    for (String pkg : packagesToScan.split(\",\")) {\n+                        try {\n+                            String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +\n+                                             ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN;\n+                            Resource[] resources = resourcePatternResolver.getResources(pattern);\n+                            MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(resourcePatternResolver);\n+                            for (Resource resource : resources) {\n+                                if (resource.isReadable()) {\n+                                    MetadataReader reader = readerFactory.getMetadataReader(resource);\n+                                    String className = reader.getClassMetadata().getClassName();\n+                                    if (matchesFilter(reader, readerFactory, entityTypeFilters)) {\n+                                        pui.addManagedClassName(className);\n+                                    } else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {\n+                                        pui.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()));\n                                     }\n                                 }\n-                            } catch (IOException ex) {\n-                                throw new PersistenceException(\"Failed to scan classpath for unlisted entity classes\", ex);\n                             }\n+                        } catch (IOException ex) {\n+                            throw new PersistenceException(\"Failed to scan classpath for unlisted entity classes\", ex);\n                         }\n                     }\n+                    \n \n                 }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjE3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469876171", "body": "please change it to:\r\n\r\n```suggestion\r\n    private static final Logger logger = LoggerFactory.getLogger(JMSSender.class);\r\n```", "bodyText": "please change it to:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(JMSSender.class);", "bodyHTML": "<p dir=\"auto\">please change it to:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi x x-first x-last\">AuditDataReplicationProcessEventProducer</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi x x-first x-last\">JMSSender</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T11:13:17Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.TextMessage;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JMSSender {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDA4Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944083", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T11:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\nindex fd5d7c961..9e28de12a 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n", "chunk": "@@ -28,7 +28,7 @@ import org.springframework.stereotype.Component;\n @Component\n public class JMSSender {\n \n-    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);\n+    private static Logger logger = LoggerFactory.getLogger(JMSSender.class);\n \n     @Autowired\n     private JmsTemplate jmsTemplate;\n", "next_change": {"commit": "109ca537184dbf433fef14680c4d205a10876671", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\nindex 9e28de12a..5eba01d88 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n", "chunk": "@@ -18,14 +18,13 @@ package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n \n import javax.jms.TextMessage;\n \n-import com.thoughtworks.xstream.XStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jms.core.JmsTemplate;\n-import org.springframework.stereotype.Component;\n \n-@Component\n+import com.thoughtworks.xstream.XStream;\n+\n public class JMSSender {\n \n     private static Logger logger = LoggerFactory.getLogger(JMSSender.class);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjYyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469876628", "body": "Remove extra placeholders:\r\n\r\n```suggestion\r\n            logger.info(\"Sending JMS Message {}\", message);\r\n```", "bodyText": "Remove extra placeholders:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(\"Sending JMS Message {} {} {}\", message);\n          \n          \n            \n                        logger.info(\"Sending JMS Message {}\", message);", "bodyHTML": "<p dir=\"auto\">Remove extra placeholders:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sending JMS Message {}<span class=\"x x-first x-last\"> {} {}</span><span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sending JMS Message {}<span class=\"pl-pds\">\"</span></span>, message);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T11:14:16Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.TextMessage;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JMSSender {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);\n+\n+    @Autowired\n+    private JmsTemplate jmsTemplate;\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private String endpointName;\n+\n+    public JMSSender(String endpointName) {\n+        this.endpointName = endpointName;\n+    }\n+\n+    protected void sendMessage(Object messageContent, Integer eventType, int priority) {\n+\n+        String eventXml = xstream.toXML(messageContent);\n+\n+        logger.info(\"XML Event: \\n {}\", eventXml);\n+\n+        jmsTemplate.send(endpointName, messageCreator -> {\n+            TextMessage message = messageCreator.createTextMessage(eventXml);\n+            message.setIntProperty(\"EventType\", eventType);\n+            message.setStringProperty(\"LogType\", \"Process\");\n+            message.setJMSPriority(priority);\n+            logger.info(\"Sending JMS Message {} {} {}\", message);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDMyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944323", "bodyText": "not existing anymore", "author": "elguardian", "createdAt": "2020-08-19T11:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "33b974eaa8b1696d2ce329b389d4362a486673de", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\nindex fd5d7c961..807a0d187 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n", "chunk": "@@ -46,14 +46,13 @@ public class JMSSender {\n \n         String eventXml = xstream.toXML(messageContent);\n \n-        logger.info(\"XML Event: \\n {}\", eventXml);\n+        logger.debug(\"XML Event: \\n {}\", eventXml);\n \n         jmsTemplate.send(endpointName, messageCreator -> {\n             TextMessage message = messageCreator.createTextMessage(eventXml);\n             message.setIntProperty(\"EventType\", eventType);\n             message.setStringProperty(\"LogType\", \"Process\");\n             message.setJMSPriority(priority);\n-            logger.info(\"Sending JMS Message {} {} {}\", message);\n             return message;\n         });\n \n", "next_change": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\nindex 807a0d187..9e28de12a 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java\n", "chunk": "@@ -51,8 +51,6 @@ public class JMSSender {\n         jmsTemplate.send(endpointName, messageCreator -> {\n             TextMessage message = messageCreator.createTextMessage(eventXml);\n             message.setIntProperty(\"EventType\", eventType);\n-            message.setStringProperty(\"LogType\", \"Process\");\n-            message.setJMSPriority(priority);\n             return message;\n         });\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3Nzc0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469877741", "body": "Shouldn't we mapped them to the events defined in the jbpm module somehow (i.e. Enums, etc)? wdyt?", "bodyText": "Shouldn't we mapped them to the events defined in the jbpm module somehow (i.e. Enums, etc)? wdyt?", "bodyHTML": "<p dir=\"auto\">Shouldn't we mapped them to the events defined in the jbpm module somehow (i.e. Enums, etc)? wdyt?</p>", "author": "afalhambra", "createdAt": "2020-08-13T11:16:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/MessageType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+public final class MessageType {\n+\n+    private MessageType() {\n+        // private\n+    }\n+\n+    public static final int PROCESS_START_EVENT_TYPE = 100;\n+    public static final int PROCESS_COMPLETED_EVENT_TYPE = 101;\n+    public static final int NODE_ENTER_EVENT_TYPE = 102;\n+    public static final int NODE_LEFT_EVENT_TYPE = 103;\n+    public static final int VAR_CHANGE_EVENT_TYPE = 104;\n+    public static final int NODE_SLA_VIOLATED = 105;\n+    public static final int PROCESS_SLA_VIOLATED = 106;\n+\n+    public static final int TASK_STARTED = 201;\n+    public static final int TASK_ACTIVATED = 202;\n+    public static final int TASK_CLAIMED = 203;\n+    public static final int TASK_SKIPPED = 204;\n+    public static final int TASK_STOPPED = 205;\n+    public static final int TASK_COMPLETED = 206;\n+    public static final int TASK_FAILED = 207;\n+    public static final int TASK_EVENT = 208;\n+    public static final int TASK_ADDED = 209;\n+    public static final int TASK_EXITED = 210;\n+    public static final int TASK_RELEASED = 211;\n+    public static final int TASK_RESUMED = 212;\n+    public static final int TASK_SUSPENDED = 213;\n+    public static final int TASK_FORWARDED = 214;\n+    public static final int TASK_DELEGATED = 215;\n+    public static final int TASK_NOMINATED = 216;\n+    public static final int TASK_UPDATED = 217;\n+    public static final int TASK_REASSIGNED = 218;\n+    public static final int TASK_VAR_OUT_CHANGED = 219;\n+    public static final int TASK_VAR_IN_CHANGED = 210;\n+\n+    public static final int BAM_TASK_EVENT = 301;", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDQ3NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944475", "bodyText": "enums are not good for sending over the wire.", "author": "elguardian", "createdAt": "2020-08-19T11:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3Nzc0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODIyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469878225", "body": "Not really sure why we need to override Id generator here? can you please clarify?\r\nThanks!", "bodyText": "Not really sure why we need to override Id generator here? can you please clarify?\nThanks!", "bodyHTML": "<p dir=\"auto\">Not really sure why we need to override Id generator here? can you please clarify?<br>\nThanks!</p>", "author": "afalhambra", "createdAt": "2020-08-13T11:17:35Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDUzNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472950537", "bodyText": "ok. When you do merge in on a entity it is required to generate a new id if it does not exist in the database. This causes to generate new ids when you have to replicate the exact same tuple of data coming (including id)", "author": "elguardian", "createdAt": "2020-08-19T11:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\nindex 797c97c58..de582a2f9 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\n", "chunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n \n import java.io.Serializable;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MDk3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469940971", "body": "Shouldn't this be a `Consumer` bean instead?\r\n\r\n```suggestion\r\n    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\r\n```", "bodyText": "Shouldn't this be a Consumer bean instead?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n          \n          \n            \n                @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")", "bodyHTML": "<p dir=\"auto\">Shouldn't this be a <code>Consumer</code> bean instead?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@ConditionalOnMissingBean</span>(<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">auditDataReplicationProducer</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@ConditionalOnMissingBean</span>(<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">auditDataReplicationConsumer</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T13:13:38Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JmsTemplate createJMSQueueTemplate(ConnectionFactory connectionFactory) {\n+        return new JmsTemplate(connectionFactory);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JMSSender createJMSQueueSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JMSSender createJMSTopicSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex f6cd1240a..39f4e6f37 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -137,11 +136,15 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n-    public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n-        return new AuditDataReplicationJMSConsumer(emf);\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            return new AuditDataReplicationJMSQueueConsumer(emf);\n+        } else {\n+            return new AuditDataReplicationJMSTopicConsumer(emf);\n+        }\n     }\n \n }\n", "next_change": {"commit": "60774947bc23e405ed29e13c941212dc4ecd635c", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 39f4e6f37..945deae71 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -147,4 +129,10 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         }\n     }\n \n+    @Bean\n+    public JBPMPersistenceUnitPostProcessor createPersistenceUnitProcessor() {\n+        logger.info(\"Adding OverrideId to the persistence Unit processor\");\n+        return new OverrideIdJBPMPersistenceUnitPostProcessor();\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTM4NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469941384", "body": "Shouldn't this be a `Consumer` bean instead?\r\n\r\n```suggestion\r\n    public AuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\r\n```", "bodyText": "Shouldn't this be a Consumer bean instead?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n          \n          \n            \n                public AuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "bodyHTML": "<p dir=\"auto\">Shouldn't this be a <code>Consumer</code> bean instead?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AuditDataReplicationJMSConsumer</span> <span class=\"x x-first x-last\">createAuditDataReplicationProducer</span>(<span class=\"pl-k\">@Qualifier</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>auditEntityManagerFactory<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AuditDataReplicationJMSConsumer</span> <span class=\"x x-first x-last\">createAuditDataReplicationConsumer</span>(<span class=\"pl-k\">@Qualifier</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>auditEntityManagerFactory<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T13:14:16Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JmsTemplate createJMSQueueTemplate(ConnectionFactory connectionFactory) {\n+        return new JmsTemplate(connectionFactory);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JMSSender createJMSQueueSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JMSSender createJMSTopicSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex f6cd1240a..39f4e6f37 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -137,11 +136,15 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n-    public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n-        return new AuditDataReplicationJMSConsumer(emf);\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            return new AuditDataReplicationJMSQueueConsumer(emf);\n+        } else {\n+            return new AuditDataReplicationJMSTopicConsumer(emf);\n+        }\n     }\n \n }\n", "next_change": {"commit": "60774947bc23e405ed29e13c941212dc4ecd635c", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 39f4e6f37..945deae71 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -147,4 +129,10 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         }\n     }\n \n+    @Bean\n+    public JBPMPersistenceUnitPostProcessor createPersistenceUnitProcessor() {\n+        logger.info(\"Adding OverrideId to the persistence Unit processor\");\n+        return new OverrideIdJBPMPersistenceUnitPostProcessor();\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NzI0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469947248", "body": "typo\r\n```suggestion\r\n                logger.error(\"Something went wrong while consuming an event\", e);\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Something happeng during consuming and event\", e);\n          \n          \n            \n                            logger.error(\"Something went wrong while consuming an event\", e);", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something <span class=\"x x-first x-last\">happeng during </span>consuming <span class=\"x x-first x-last\">and</span> event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something <span class=\"x x-first x-last\">went wrong while </span>consuming <span class=\"x x-first x-last\">an</span> event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T13:23:25Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,7 +48,7 @@ public class AuditDataReplicationJMSConsumer {\n             try {\n                 String messageContent = textMessage.getText();\n                 Integer eventType = textMessage.getIntProperty(\"EventType\");\n-                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n             } catch (JMSException e) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NzUzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469947532", "body": "typo\r\n```suggestion\r\n                throw new RuntimeException(\"Exception when receiving audit event\", e);\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event event\", e);\n          \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event\", e);", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception when receiving audit event<span class=\"x x-first x-last\"> event</span><span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception when receiving audit event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T13:23:52Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,7 +48,7 @@ public class AuditDataReplicationJMSConsumer {\n             try {\n                 String messageContent = textMessage.getText();\n                 Integer eventType = textMessage.getIntProperty(\"EventType\");\n-                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n             } catch (JMSException e) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0ODEwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469948101", "body": "```suggestion\r\n    private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AuditDataReplicationJMSConsumer</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AuditDataReplicationJMSConsumer</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-13T13:24:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -25,25 +25,22 @@ import com.thoughtworks.xstream.XStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jms.annotation.JmsListener;\n-import org.springframework.transaction.annotation.Transactional;\n \n-public class AuditDataReplicationJMSConsumer {\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n \n-    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n \n     @Autowired\n     private XStream xstream;\n \n     private EntityManagerFactory emf;\n \n-    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n-    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n-    @Transactional\n-    public void receiveMessage(Object message) {\n+\n+    protected void processMessage(Object message) {\n \n         if (message instanceof TextMessage) {\n             EntityManager em = emf.createEntityManager();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjY0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469952644", "body": "why not increasing logging level to `debug` instead of `info` - otherwise we might end up generating a large log every time a message is received here. Wdyt?", "bodyText": "why not increasing logging level to debug instead of info - otherwise we might end up generating a large log every time a message is received here. Wdyt?", "bodyHTML": "<p dir=\"auto\">why not increasing logging level to <code>debug</code> instead of <code>info</code> - otherwise we might end up generating a large log every time a message is received here. Wdyt?</p>", "author": "afalhambra", "createdAt": "2020-08-13T13:31:21Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -25,25 +25,22 @@ import com.thoughtworks.xstream.XStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jms.annotation.JmsListener;\n-import org.springframework.transaction.annotation.Transactional;\n \n-public class AuditDataReplicationJMSConsumer {\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n \n-    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n \n     @Autowired\n     private XStream xstream;\n \n     private EntityManagerFactory emf;\n \n-    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n-    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n-    @Transactional\n-    public void receiveMessage(Object message) {\n+\n+    protected void processMessage(Object message) {\n \n         if (message instanceof TextMessage) {\n             EntityManager em = emf.createEntityManager();\n", "next_change": null}, {"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,7 +48,7 @@ public class AuditDataReplicationJMSConsumer {\n             try {\n                 String messageContent = textMessage.getText();\n                 Integer eventType = textMessage.getIntProperty(\"EventType\");\n-                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n             } catch (JMSException e) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NzY1Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469957657", "body": "Shouldn't we declare a `containerFactory` for JMS?", "bodyText": "Shouldn't we declare a containerFactory for JMS?", "bodyHTML": "<p dir=\"auto\">Shouldn't we declare a <code>containerFactory</code> for JMS?</p>", "author": "afalhambra", "createdAt": "2020-08-13T13:38:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 76%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..47440ab0b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -25,25 +25,22 @@ import com.thoughtworks.xstream.XStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jms.annotation.JmsListener;\n-import org.springframework.transaction.annotation.Transactional;\n \n-public class AuditDataReplicationJMSConsumer {\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n \n-    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n \n     @Autowired\n     private XStream xstream;\n \n     private EntityManagerFactory emf;\n \n-    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n-    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n-    @Transactional\n-    public void receiveMessage(Object message) {\n+\n+    protected void processMessage(Object message) {\n \n         if (message instanceof TextMessage) {\n             EntityManager em = emf.createEntityManager();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzU4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470017585", "body": "Should we log some warning or something in case message is not in text format? or not really? wdyt?", "bodyText": "Should we log some warning or something in case message is not in text format? or not really? wdyt?", "bodyHTML": "<p dir=\"auto\">Should we log some warning or something in case message is not in text format? or not really? wdyt?</p>", "author": "afalhambra", "createdAt": "2020-08-13T15:00:19Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);\n+            } finally {\n+                em.close();\n+            }\n+        }", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nsimilarity index 71%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 9960184cd..da0794e43 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,11 +60,11 @@ public class AuditDataReplicationJMSConsumer {\n             try {\n                 String messageContent = textMessage.getText();\n                 Integer eventType = textMessage.getIntProperty(\"EventType\");\n-                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n+                messagesProcessed.incrementAndGet();\n             } catch (JMSException e) {\n-                logger.error(\"Something happeng during consuming and event\", e);\n                 throw new RuntimeException(\"Exception when receiving audit event event\", e);\n             } finally {\n                 em.close();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMDc3NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470030774", "body": "there's no `METADATA_INPUT_VAR_EVENT` object added to the metadata event in jbpm module", "bodyText": "there's no METADATA_INPUT_VAR_EVENT object added to the metadata event in jbpm module", "bodyHTML": "<p dir=\"auto\">there's no <code>METADATA_INPUT_VAR_EVENT</code> object added to the metadata event in jbpm module</p>", "author": "afalhambra", "createdAt": "2020-08-13T15:18:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type, 1));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        }", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex 21aa13c3b..bc037657d 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -55,21 +55,21 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n     private void sendMessage(TaskEvent event, int type, int priority) {\n         Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n         if (msg != null) {\n-            jmsSender.sendMessage(msg, type, 1);\n+            jmsSender.sendMessage(msg, type);\n             event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n         }\n \n         msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n         if (msg != null) {\n-            jmsSender.sendMessage(msg, type, 1);\n+            jmsSender.sendMessage(msg, type);\n             event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n         }\n \n-        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n         if (msg != null) {\n             List<TaskVariable> variables = (List<TaskVariable>) msg;\n-            variables.forEach(e -> jmsSender.sendMessage(e, type, 1));\n-            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n         }\n     }\n \n", "next_change": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex bc037657d..01a39f7ed 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -75,104 +75,104 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n \n     @Override\n     public void afterTaskActivatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ACTIVATED, 1);\n+        sendMessage(event, TASK_ACTIVATED);\n     }\n \n     @Override\n     public void afterTaskClaimedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_CLAIMED, 1);\n+        sendMessage(event, TASK_CLAIMED);\n     }\n \n     @Override\n     public void afterTaskSkippedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SKIPPED, 1);\n+        sendMessage(event, TASK_SKIPPED);\n \n     }\n \n     @Override\n     public void afterTaskStartedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STARTED, 1);\n+        sendMessage(event, TASK_STARTED);\n     }\n \n     @Override\n     public void afterTaskStoppedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STOPPED, 1);\n+        sendMessage(event, TASK_STOPPED);\n     }\n \n     @Override\n     public void afterTaskCompletedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_COMPLETED, 1);\n+        sendMessage(event, TASK_COMPLETED);\n     }\n \n     @Override\n     public void afterTaskFailedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FAILED, 1);\n+        sendMessage(event, TASK_FAILED);\n     }\n \n     @Override\n     public void afterTaskAddedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ADDED, 1);\n+        sendMessage(event, TASK_ADDED);\n     }\n \n     @Override\n     public void afterTaskExitedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_EXITED, 1);\n+        sendMessage(event, TASK_EXITED);\n     }\n \n     @Override\n     public void beforeTaskReleasedEvent(TaskEvent event) {\n-\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskResumedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RESUMED, 1);\n+        sendMessage(event, TASK_RESUMED);\n     }\n \n     @Override\n     public void afterTaskSuspendedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SUSPENDED, 1);\n+        sendMessage(event, TASK_SUSPENDED);\n     }\n \n     @Override\n     public void afterTaskForwardedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FORWARDED, 1);\n+        sendMessage(event, TASK_FORWARDED);\n     }\n \n     @Override\n     public void afterTaskDelegatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_DELEGATED, 1);\n+        sendMessage(event, TASK_DELEGATED);\n     }\n \n     @Override\n     public void afterTaskNominatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_NOMINATED, 1);\n+        sendMessage(event, TASK_NOMINATED);\n     }\n     \n \n     @Override\n     public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_OUT_CHANGED);\n     }\n \n     @Override\n     public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_IN_CHANGED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMjkwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470032901", "body": "Should we not make JMS priority messages configurable instead of setting it always to `1`? wdyt?", "bodyText": "Should we not make JMS priority messages configurable instead of setting it always to 1? wdyt?", "bodyHTML": "<p dir=\"auto\">Should we not make JMS priority messages configurable instead of setting it always to <code>1</code>? wdyt?</p>", "author": "afalhambra", "createdAt": "2020-08-13T15:21:29Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex 21aa13c3b..bc037657d 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -55,21 +55,21 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n     private void sendMessage(TaskEvent event, int type, int priority) {\n         Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n         if (msg != null) {\n-            jmsSender.sendMessage(msg, type, 1);\n+            jmsSender.sendMessage(msg, type);\n             event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n         }\n \n         msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n         if (msg != null) {\n-            jmsSender.sendMessage(msg, type, 1);\n+            jmsSender.sendMessage(msg, type);\n             event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n         }\n \n-        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n         if (msg != null) {\n             List<TaskVariable> variables = (List<TaskVariable>) msg;\n-            variables.forEach(e -> jmsSender.sendMessage(e, type, 1));\n-            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n         }\n     }\n \n", "next_change": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex bc037657d..01a39f7ed 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -75,104 +75,104 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n \n     @Override\n     public void afterTaskActivatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ACTIVATED, 1);\n+        sendMessage(event, TASK_ACTIVATED);\n     }\n \n     @Override\n     public void afterTaskClaimedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_CLAIMED, 1);\n+        sendMessage(event, TASK_CLAIMED);\n     }\n \n     @Override\n     public void afterTaskSkippedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SKIPPED, 1);\n+        sendMessage(event, TASK_SKIPPED);\n \n     }\n \n     @Override\n     public void afterTaskStartedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STARTED, 1);\n+        sendMessage(event, TASK_STARTED);\n     }\n \n     @Override\n     public void afterTaskStoppedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STOPPED, 1);\n+        sendMessage(event, TASK_STOPPED);\n     }\n \n     @Override\n     public void afterTaskCompletedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_COMPLETED, 1);\n+        sendMessage(event, TASK_COMPLETED);\n     }\n \n     @Override\n     public void afterTaskFailedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FAILED, 1);\n+        sendMessage(event, TASK_FAILED);\n     }\n \n     @Override\n     public void afterTaskAddedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ADDED, 1);\n+        sendMessage(event, TASK_ADDED);\n     }\n \n     @Override\n     public void afterTaskExitedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_EXITED, 1);\n+        sendMessage(event, TASK_EXITED);\n     }\n \n     @Override\n     public void beforeTaskReleasedEvent(TaskEvent event) {\n-\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskResumedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RESUMED, 1);\n+        sendMessage(event, TASK_RESUMED);\n     }\n \n     @Override\n     public void afterTaskSuspendedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SUSPENDED, 1);\n+        sendMessage(event, TASK_SUSPENDED);\n     }\n \n     @Override\n     public void afterTaskForwardedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FORWARDED, 1);\n+        sendMessage(event, TASK_FORWARDED);\n     }\n \n     @Override\n     public void afterTaskDelegatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_DELEGATED, 1);\n+        sendMessage(event, TASK_DELEGATED);\n     }\n \n     @Override\n     public void afterTaskNominatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_NOMINATED, 1);\n+        sendMessage(event, TASK_NOMINATED);\n     }\n     \n \n     @Override\n     public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_OUT_CHANGED);\n     }\n \n     @Override\n     public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_IN_CHANGED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NzQ5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471297495", "body": "I would rename it to something generic for both Queues and topics:\r\n\r\n```suggestion\r\n    public JMSSender createAuditDataReplicationSender() {\r\n```", "bodyText": "I would rename it to something generic for both Queues and topics:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JMSSender createJMSQueueSender() {\n          \n          \n            \n                public JMSSender createAuditDataReplicationSender() {", "bodyHTML": "<p dir=\"auto\">I would rename it to something generic for both Queues and topics:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JMSSender</span> <span class=\"x x-first x-last\">createJMSQueueSender</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JMSSender</span> <span class=\"x x-first x-last\">createAuditDataReplicationSender</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-17T07:40:14Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTY5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472945693", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NzQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex db7644bad..f48a5d943 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -62,7 +62,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n \n     @Bean\n     @ConditionalOnMissingBean(name = \"jmsSender\")\n-    public JMSSender createJMSQueueSender() {\n+    public JMSSender createAuditDataReplicationSender() {\n         if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n             String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n             return new JMSSender(endpointName);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5ODgxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471298816", "body": "typo\r\n```suggestion\r\n    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n          \n          \n            \n                public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TaskLifeCycleEventListener</span> <span class=\"x x-first x-last\">createBAMTaskSumaryListener</span>(<span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TaskLifeCycleEventListener</span> <span class=\"x x-first x-last\">createBAMTaskSummaryListener</span>(<span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-17T07:43:01Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTg3Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472945872", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5ODgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex db7644bad..f48a5d943 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -120,7 +120,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n-    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n", "next_change": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex f48a5d943..369c4d817 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -125,7 +116,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "7d6074851f311350f63bc402919442dda7f55b83", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex db7644bad..945deae71 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -120,15 +112,15 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n-    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n-    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n         if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n             return new AuditDataReplicationJMSQueueConsumer(emf);\n", "next_change": null}]}, "commits_in_main": [{"oid": "7d6074851f311350f63bc402919442dda7f55b83", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMDAyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471300022", "body": "I would rename to something more generic for both queues and topics:\r\n\r\n```suggestion\r\n    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\r\n```", "bodyText": "I would rename to something more generic for both queues and topics:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n          \n          \n            \n                public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "bodyHTML": "<p dir=\"auto\">I would rename to something more generic for both queues and topics:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AbstractAuditDataReplicationJMSConsumer</span> <span class=\"x x-first x-last\">createAuditDataReplicationQueueConsumer</span>(<span class=\"pl-k\">@Qualifier</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>auditEntityManagerFactory<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AbstractAuditDataReplicationJMSConsumer</span> <span class=\"x x-first x-last\">createAuditDataReplicationConsumer</span>(<span class=\"pl-k\">@Qualifier</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>auditEntityManagerFactory<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">EntityManagerFactory</span> emf) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-17T07:45:25Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NjA2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472946069", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMDAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex db7644bad..f48a5d943 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -120,7 +120,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n-    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n", "next_change": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex f48a5d943..369c4d817 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -125,7 +116,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex db7644bad..f48a5d943 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -128,7 +128,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n-    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n         if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n             return new AuditDataReplicationJMSQueueConsumer(emf);\n", "next_change": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex f48a5d943..369c4d817 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -125,7 +116,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTE5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471305193", "body": "Sorry, can't see why or where the priority is defined/set? can you please clarify?", "bodyText": "Sorry, can't see why or where the priority is defined/set? can you please clarify?", "bodyHTML": "<p dir=\"auto\">Sorry, can't see why or where the priority is defined/set? can you please clarify?</p>", "author": "afalhambra", "createdAt": "2020-08-17T07:55:51Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+\n+import org.jbpm.process.audit.AbstractAuditLoggerAdapter;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.manager.audit.VariableInstanceLog;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_ENTER_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_LEFT_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_COMPLETED_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_START_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.VAR_CHANGE_EVENT_TYPE;\n+\n+\n+/**\n+ * AuditListener\n+ */\n+\n+public class AuditDataReplicationProcessEventProducer extends AbstractAuditLoggerAdapter {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    @Override\n+    protected void processStarted(ProcessStartedEvent event) {\n+        ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n+        if (log != null) {\n+            jmsSender.sendMessage(log, PROCESS_START_EVENT_TYPE, 1);\n+        }\n+    }\n+\n+    @Override\n+    protected void processCompleted(ProcessCompletedEvent event) {\n+        ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n+        if (log != null) {\n+            jmsSender.sendMessage(log, PROCESS_COMPLETED_EVENT_TYPE, 8);", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NzkwMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472947900", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-19T11:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\nindex 7b8205a82..adbede1c7 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\n", "chunk": "@@ -53,7 +53,7 @@ public class AuditDataReplicationProcessEventProducer extends AbstractAuditLogge\n     protected void processStarted(ProcessStartedEvent event) {\n         ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n         if (log != null) {\n-            jmsSender.sendMessage(log, PROCESS_START_EVENT_TYPE, 1);\n+            jmsSender.sendMessage(log, PROCESS_START_EVENT_TYPE);\n         }\n     }\n \n", "next_change": null}, {"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\nindex 7b8205a82..adbede1c7 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java\n", "chunk": "@@ -61,7 +61,7 @@ public class AuditDataReplicationProcessEventProducer extends AbstractAuditLogge\n     protected void processCompleted(ProcessCompletedEvent event) {\n         ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n         if (log != null) {\n-            jmsSender.sendMessage(log, PROCESS_COMPLETED_EVENT_TYPE, 8);\n+            jmsSender.sendMessage(log, PROCESS_COMPLETED_EVENT_TYPE);\n         }\n     }\n \n", "next_change": null}]}}, {"oid": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-19T11:14:26Z", "type": "forcePushed"}, {"oid": "109ca537184dbf433fef14680c4d205a10876671", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/109ca537184dbf433fef14680c4d205a10876671", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-20T11:04:55Z", "type": "forcePushed"}, {"oid": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-20T14:05:19Z", "type": "forcePushed"}, {"oid": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f5148b1f515a316b8a3158e34894254ac4a3bba7", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-24T09:20:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzEwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647108", "body": "Typo.\r\n\r\n```suggestion\r\n                logger.error(\"Something went wrong while consuming an event\", e);\r\n```", "bodyText": "Typo.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Something happeng during consuming and event\", e);\n          \n          \n            \n                            logger.error(\"Something went wrong while consuming an event\", e);", "bodyHTML": "<p dir=\"auto\">Typo.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something <span class=\"x x-first x-last\">happeng during </span>consuming <span class=\"x x-first x-last\">and</span> event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something <span class=\"x x-first x-last\">went wrong while </span>consuming <span class=\"x x-first x-last\">an</span> event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:47:40Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+\n+    protected void processMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODA2Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628062", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-24T13:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 47440ab0b..da0794e43 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,8 +63,8 @@ public abstract class AbstractAuditDataReplicationJMSConsumer {\n                 logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n+                messagesProcessed.incrementAndGet();\n             } catch (JMSException e) {\n-                logger.error(\"Something happeng during consuming and event\", e);\n                 throw new RuntimeException(\"Exception when receiving audit event event\", e);\n             } finally {\n                 em.close();\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex da0794e43..c47044b81 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -63,9 +63,9 @@ public abstract class AbstractAuditDataReplicationJMSConsumer {\n                 logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n-                messagesProcessed.incrementAndGet();\n+                processedMessages.incrementAndGet();\n             } catch (JMSException e) {\n-                throw new RuntimeException(\"Exception when receiving audit event event\", e);\n+                throw new RuntimeException(\"Something went wrong while consuming an event\", e);\n             } finally {\n                 em.close();\n             }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzYxMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647612", "body": "this should be `final`\r\n\r\n```suggestion\r\n    private static final Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\r\n```", "bodyText": "this should be final\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);", "bodyHTML": "<p dir=\"auto\">this should be <code>final</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"33\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AbstractAuditDataReplicationJMSConsumer</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"33\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AbstractAuditDataReplicationJMSConsumer</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:48:48Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzkyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647920", "body": "can be final\r\n```suggestion\r\n    private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\r\n```", "bodyText": "can be final\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);", "bodyHTML": "<p dir=\"auto\">can be final</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AuditDataReplicationKieServerAutoConfiguration</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">AuditDataReplicationKieServerAutoConfiguration</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:49:29Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODQwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628408", "bodyText": "not needed anymore", "author": "elguardian", "createdAt": "2020-08-24T13:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODA4NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648084", "body": "typo\r\n```suggestion\r\n    public ProcessEventListener createProcessEventListenerProducer() {\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ProcessEventListener createrocessEventListenerProducer() {\n          \n          \n            \n                public ProcessEventListener createProcessEventListenerProducer() {", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ProcessEventListener</span> <span class=\"x x-first x-last\">createrocessEventListenerProducer</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ProcessEventListener</span> <span class=\"x x-first x-last\">createProcessEventListenerProducer</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:49:53Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MDc1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r477160756", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-26T09:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "60774947bc23e405ed29e13c941212dc4ecd635c", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 878baf4be..945deae71 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -95,7 +96,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n-    public ProcessEventListener createrocessEventListenerProducer() {\n+    public ProcessEventListener createProcessEventListenerProducer() {\n         logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n         return new AuditDataReplicationProcessEventProducer();\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODE4Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648183", "body": "typo\r\n```suggestion\r\n        logger.info(\"Adding AuditDataReplicationProcessEvent for data replication\");\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationProcessEvent for data replication\");", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationProcessEvent <span class=\"x x-first x-last\">from</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationProcessEvent <span class=\"x x-first x-last\">for</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:50:09Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODc0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628741", "bodyText": "not correct", "author": "elguardian", "createdAt": "2020-08-24T13:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "60774947bc23e405ed29e13c941212dc4ecd635c", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 878baf4be..945deae71 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -95,7 +96,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n-    public ProcessEventListener createrocessEventListenerProducer() {\n+    public ProcessEventListener createProcessEventListenerProducer() {\n         logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n         return new AuditDataReplicationProcessEventProducer();\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODMzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648338", "body": "typo\r\n\r\n```suggestion\r\n        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer for data replication\");\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer for data replication\");", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationTaskLifeCycleEventListenerProducer <span class=\"x x-first x-last\">from</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationTaskLifeCycleEventListenerProducer <span class=\"x x-first x-last\">for</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:50:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODQ0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648448", "body": "typo\r\n\r\n```suggestion\r\n        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer fordata replication\");\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer fordata replication\");", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationBAMTaskSumaryListenerProducer <span class=\"x x-first x-last\">from data</span> replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding AuditDataReplicationBAMTaskSumaryListenerProducer <span class=\"x x-first x-last\">fordata</span> replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:50:46Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 878baf4be..369c4d817 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,7 +116,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODU3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648579", "body": "typo\r\n\r\n```suggestion\r\n        logger.info(\"Adding auditDataReplicationConsumer for data replication\");\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding auditDataReplicationConsumer for data replication\");", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"124\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding auditDataReplicationConsumer <span class=\"x x-first x-last\">from</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"124\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding auditDataReplicationConsumer <span class=\"x x-first x-last\">for</span> data replication<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:51:03Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+        logger.info(\"Adding auditDataReplicationConsumer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 878baf4be..369c4d817 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,7 +116,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")\n     @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0OTE0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474649147", "body": "typo\r\n\r\n```suggestion\r\n                throw new RuntimeException(\"Exception when receiving audit event\", e);\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event event\", e);\n          \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event\", e);", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception when receiving audit event<span class=\"x x-first x-last\"> event</span><span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception when receiving audit event<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T11:52:24Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+\n+    protected void processMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex 47440ab0b..da0794e43 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -51,8 +63,8 @@ public abstract class AbstractAuditDataReplicationJMSConsumer {\n                 logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n+                messagesProcessed.incrementAndGet();\n             } catch (JMSException e) {\n-                logger.error(\"Something happeng during consuming and event\", e);\n                 throw new RuntimeException(\"Exception when receiving audit event event\", e);\n             } finally {\n                 em.close();\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex da0794e43..c47044b81 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -63,9 +63,9 @@ public abstract class AbstractAuditDataReplicationJMSConsumer {\n                 logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n                 Object event = xstream.fromXML(messageContent);\n                 em.merge(event);\n-                messagesProcessed.incrementAndGet();\n+                processedMessages.incrementAndGet();\n             } catch (JMSException e) {\n-                throw new RuntimeException(\"Exception when receiving audit event event\", e);\n+                throw new RuntimeException(\"Something went wrong while consuming an event\", e);\n             } finally {\n                 em.close();\n             }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MDgwMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474650802", "body": "would it not be benefitial to distinguish between these 2 events changing the event type. I mean both are `TASK_REASSIGNED` so it will be difficult to know whether it's one event or another?", "bodyText": "would it not be benefitial to distinguish between these 2 events changing the event type. I mean both are TASK_REASSIGNED so it will be difficult to know whether it's one event or another?", "bodyHTML": "<p dir=\"auto\">would it not be benefitial to distinguish between these 2 events changing the event type. I mean both are <code>TASK_REASSIGNED</code> so it will be difficult to know whether it's one event or another?</p>", "author": "afalhambra", "createdAt": "2020-08-21T11:56:26Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        }\n+    }\n+\n+    @Override\n+    public void afterTaskActivatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ACTIVATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskClaimedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_CLAIMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSkippedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SKIPPED, 1);\n+\n+    }\n+\n+    @Override\n+    public void afterTaskStartedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STARTED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskStoppedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STOPPED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskCompletedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_COMPLETED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskFailedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FAILED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAddedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ADDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskExitedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_EXITED, 1);\n+    }\n+\n+    @Override\n+    public void beforeTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskResumedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RESUMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSuspendedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SUSPENDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskForwardedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FORWARDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskDelegatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_DELEGATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskNominatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_NOMINATED, 1);\n+    }\n+    \n+\n+    @Override\n+    public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n+        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n+        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n+        sendMessage(event, TASK_REASSIGNED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n+        sendMessage(event, TASK_REASSIGNED, 1);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex 8e2afce9b..01a39f7ed 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -75,104 +75,104 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n \n     @Override\n     public void afterTaskActivatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ACTIVATED, 1);\n+        sendMessage(event, TASK_ACTIVATED);\n     }\n \n     @Override\n     public void afterTaskClaimedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_CLAIMED, 1);\n+        sendMessage(event, TASK_CLAIMED);\n     }\n \n     @Override\n     public void afterTaskSkippedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SKIPPED, 1);\n+        sendMessage(event, TASK_SKIPPED);\n \n     }\n \n     @Override\n     public void afterTaskStartedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STARTED, 1);\n+        sendMessage(event, TASK_STARTED);\n     }\n \n     @Override\n     public void afterTaskStoppedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STOPPED, 1);\n+        sendMessage(event, TASK_STOPPED);\n     }\n \n     @Override\n     public void afterTaskCompletedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_COMPLETED, 1);\n+        sendMessage(event, TASK_COMPLETED);\n     }\n \n     @Override\n     public void afterTaskFailedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FAILED, 1);\n+        sendMessage(event, TASK_FAILED);\n     }\n \n     @Override\n     public void afterTaskAddedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ADDED, 1);\n+        sendMessage(event, TASK_ADDED);\n     }\n \n     @Override\n     public void afterTaskExitedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_EXITED, 1);\n+        sendMessage(event, TASK_EXITED);\n     }\n \n     @Override\n     public void beforeTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskResumedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RESUMED, 1);\n+        sendMessage(event, TASK_RESUMED);\n     }\n \n     @Override\n     public void afterTaskSuspendedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SUSPENDED, 1);\n+        sendMessage(event, TASK_SUSPENDED);\n     }\n \n     @Override\n     public void afterTaskForwardedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FORWARDED, 1);\n+        sendMessage(event, TASK_FORWARDED);\n     }\n \n     @Override\n     public void afterTaskDelegatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_DELEGATED, 1);\n+        sendMessage(event, TASK_DELEGATED);\n     }\n \n     @Override\n     public void afterTaskNominatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_NOMINATED, 1);\n+        sendMessage(event, TASK_NOMINATED);\n     }\n     \n \n     @Override\n     public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_OUT_CHANGED);\n     }\n \n     @Override\n     public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_IN_CHANGED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MjA2Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474652066", "body": "is `TASK_RELEASE` a correct type event? I mean, it's just a step before actually releasing the task, wdyt?", "bodyText": "is TASK_RELEASE a correct type event? I mean, it's just a step before actually releasing the task, wdyt?", "bodyHTML": "<p dir=\"auto\">is <code>TASK_RELEASE</code> a correct type event? I mean, it's just a step before actually releasing the task, wdyt?</p>", "author": "afalhambra", "createdAt": "2020-08-21T11:59:20Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        }\n+    }\n+\n+    @Override\n+    public void afterTaskActivatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ACTIVATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskClaimedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_CLAIMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSkippedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SKIPPED, 1);\n+\n+    }\n+\n+    @Override\n+    public void afterTaskStartedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STARTED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskStoppedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STOPPED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskCompletedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_COMPLETED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskFailedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FAILED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAddedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ADDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskExitedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_EXITED, 1);\n+    }\n+\n+    @Override\n+    public void beforeTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex 8e2afce9b..01a39f7ed 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -75,104 +75,104 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n \n     @Override\n     public void afterTaskActivatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ACTIVATED, 1);\n+        sendMessage(event, TASK_ACTIVATED);\n     }\n \n     @Override\n     public void afterTaskClaimedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_CLAIMED, 1);\n+        sendMessage(event, TASK_CLAIMED);\n     }\n \n     @Override\n     public void afterTaskSkippedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SKIPPED, 1);\n+        sendMessage(event, TASK_SKIPPED);\n \n     }\n \n     @Override\n     public void afterTaskStartedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STARTED, 1);\n+        sendMessage(event, TASK_STARTED);\n     }\n \n     @Override\n     public void afterTaskStoppedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_STOPPED, 1);\n+        sendMessage(event, TASK_STOPPED);\n     }\n \n     @Override\n     public void afterTaskCompletedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_COMPLETED, 1);\n+        sendMessage(event, TASK_COMPLETED);\n     }\n \n     @Override\n     public void afterTaskFailedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FAILED, 1);\n+        sendMessage(event, TASK_FAILED);\n     }\n \n     @Override\n     public void afterTaskAddedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_ADDED, 1);\n+        sendMessage(event, TASK_ADDED);\n     }\n \n     @Override\n     public void afterTaskExitedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_EXITED, 1);\n+        sendMessage(event, TASK_EXITED);\n     }\n \n     @Override\n     public void beforeTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskReleasedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RELEASED, 1);\n+        sendMessage(event, TASK_RELEASED);\n     }\n \n     @Override\n     public void afterTaskResumedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_RESUMED, 1);\n+        sendMessage(event, TASK_RESUMED);\n     }\n \n     @Override\n     public void afterTaskSuspendedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_SUSPENDED, 1);\n+        sendMessage(event, TASK_SUSPENDED);\n     }\n \n     @Override\n     public void afterTaskForwardedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_FORWARDED, 1);\n+        sendMessage(event, TASK_FORWARDED);\n     }\n \n     @Override\n     public void afterTaskDelegatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_DELEGATED, 1);\n+        sendMessage(event, TASK_DELEGATED);\n     }\n \n     @Override\n     public void afterTaskNominatedEvent(TaskEvent event) {\n-        sendMessage(event, TASK_NOMINATED, 1);\n+        sendMessage(event, TASK_NOMINATED);\n     }\n     \n \n     @Override\n     public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_OUT_CHANGED);\n     }\n \n     @Override\n     public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n-        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+        sendMessage(event, TASK_VAR_IN_CHANGED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n     @Override\n     public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n-        sendMessage(event, TASK_REASSIGNED, 1);\n+        sendMessage(event, TASK_REASSIGNED);\n     }\n \n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NDU2NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474654565", "body": "`priority` is not used anywhere in this method, please remove.", "bodyText": "priority is not used anywhere in this method, please remove.", "bodyHTML": "<p dir=\"auto\"><code>priority</code> is not used anywhere in this method, please remove.</p>", "author": "afalhambra", "createdAt": "2020-08-21T12:05:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\nindex 8e2afce9b..01a39f7ed 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java\n", "chunk": "@@ -52,7 +52,7 @@ public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends Defa\n     private JMSSender jmsSender;\n \n \n-    private void sendMessage(TaskEvent event, int type, int priority) {\n+    private void sendMessage(TaskEvent event, int type) {\n         Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n         if (msg != null) {\n             jmsSender.sendMessage(msg, type);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjM5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474656395", "body": "Please update or remove this java doc", "bodyText": "Please update or remove this java doc", "bodyHTML": "<p dir=\"auto\">Please update or remove this java doc</p>", "author": "afalhambra", "createdAt": "2020-08-21T12:09:21Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+\n+import org.jbpm.process.audit.AbstractAuditLoggerAdapter;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.manager.audit.VariableInstanceLog;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_ENTER_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_LEFT_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_COMPLETED_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_START_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.VAR_CHANGE_EVENT_TYPE;\n+\n+\n+/**\n+ * AuditListener\n+ */", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwMTU4Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474701586", "body": "typo\r\n```suggestion\r\npublic class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n          \n          \n            \n            public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">AuditDataReplicationBAMTaskSumaryListenerProducer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DefaultTaskEventListener</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">AuditDataReplicationBAMTaskSummaryListenerProducer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DefaultTaskEventListener</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T13:35:37Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.jbpm.services.task.lifecycle.listeners.BAMTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n+\n+public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\nsimilarity index 96%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\nindex 7d100aa1b..00222f3eb 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\n", "chunk": "@@ -23,7 +23,7 @@ import org.springframework.beans.factory.annotation.Autowired;\n \n import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n \n-public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n+public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {\n \n     @Autowired\n     private JMSSender jmsSender;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwOTk5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474709999", "body": "Please refactor imports as some are not really needed", "bodyText": "Please refactor imports as some are not really needed", "bodyHTML": "<p dir=\"auto\">Please refactor imports as some are not really needed</p>", "author": "afalhambra", "createdAt": "2020-08-21T13:49:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/ApplicationSender.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\n+import org.jbpm.services.task.identity.MvelUserGroupCallbackImpl;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.security.SpringSecurityUserGroupCallback;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.jdbc.DataSourceBuilder;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.jms.annotation.EnableJms;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxNTMwNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474715306", "body": "returned value is never used, return `void` instead?", "bodyText": "returned value is never used, return void instead?", "bodyHTML": "<p dir=\"auto\">returned value is never used, return <code>void</code> instead?</p>", "author": "afalhambra", "createdAt": "2020-08-21T13:58:27Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskSkipProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.forward(e, USER_GENERIC, USER_NOMINATED));\n+        tasks.forEach(e -> userTaskService.skip(e, USER_NOMINATED));\n+        \n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskExitProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.exit(e, USER_ADMIN));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskFailProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.fail(e, USER_ADMIN, emptyMap()));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    private boolean compareData() {\n+        EntityManager original = originalEntityManagerFactory.createEntityManager();\n+        EntityManager audit = auditEntityManagerFactory.createEntityManager();\n+\n+        List<ProcessInstanceLog> pil = audit.createQuery(\"SELECT o FROM ProcessInstanceLog o ORDER BY o.id ASC\",\n+                                                         ProcessInstanceLog.class).getResultList();\n+        List<ProcessInstanceLog> pil_a = original.createQuery(\"SELECT o FROM ProcessInstanceLog o ORDER BY o.id ASC\",\n+                                                              ProcessInstanceLog.class).getResultList();\n+        Assertions.assertThat(pil).containsExactlyElementsOf(pil_a);\n+\n+        List<NodeInstanceLog> nil = audit.createQuery(\"SELECT o FROM NodeInstanceLog o ORDER BY o.id ASC\",\n+                                                      NodeInstanceLog.class).getResultList();\n+        List<NodeInstanceLog> nil_a = original.createQuery(\"SELECT o FROM NodeInstanceLog o ORDER BY o.id ASC\",\n+                                                           NodeInstanceLog.class).getResultList();\n+        Assertions.assertThat(nil).containsExactlyElementsOf(nil_a);\n+\n+        List<VariableInstanceLog> vil = audit.createQuery(\"SELECT o FROM VariableInstanceLog o ORDER BY o.id ASC\",\n+                                                          VariableInstanceLog.class).getResultList();\n+        List<VariableInstanceLog> vil_a = original.createQuery(\"SELECT o FROM VariableInstanceLog o ORDER BY o.id ASC\",\n+                                                               VariableInstanceLog.class).getResultList();\n+        Assertions.assertThat(vil).containsExactlyElementsOf(vil_a);\n+\n+        List<BAMTaskSummaryImpl> btl = audit.createQuery(\"SELECT o FROM BAMTaskSummaryImpl o ORDER BY o.pk ASC\",\n+                                                         BAMTaskSummaryImpl.class).getResultList();\n+        List<BAMTaskSummaryImpl> btl_a = original.createQuery(\"SELECT o FROM BAMTaskSummaryImpl o ORDER BY o.pk ASC\",\n+                                                              BAMTaskSummaryImpl.class).getResultList();\n+        Assertions.assertThat(btl).containsExactlyElementsOf(btl_a);\n+\n+        // here we have a problem as TaskVariableImpl are removed in the original db after process is gone\n+        // so audit table well have more entries than the original\n+        List<TaskVariableImpl> tvl = audit.createQuery(\"SELECT o FROM TaskVariableImpl o ORDER BY o.id ASC\",\n+                                                       TaskVariableImpl.class).getResultList();\n+        List<TaskVariableImpl> tvl_a = original.createQuery(\"SELECT o FROM TaskVariableImpl o ORDER BY o.id ASC\",\n+                                                            TaskVariableImpl.class).getResultList();\n+        Assertions.assertThat(tvl).containsAll(tvl_a);\n+\n+        List<AuditTaskImpl> atl = audit.createQuery(\"SELECT o FROM AuditTaskImpl o ORDER BY o.id ASC\",\n+                                                    AuditTaskImpl.class).getResultList();\n+        List<AuditTaskImpl> atl_a = original.createQuery(\"SELECT o FROM AuditTaskImpl o ORDER BY o.id ASC\",\n+                                                         AuditTaskImpl.class).getResultList();\n+        Assertions.assertThat(atl).containsExactlyElementsOf(atl_a);\n+\n+        List<TaskEventImpl> tel = audit.createQuery(\"SELECT o FROM TaskEventImpl o ORDER BY o.id ASC\",\n+                                                    TaskEventImpl.class).getResultList();\n+        List<TaskEventImpl> tel_a = original.createQuery(\"SELECT o FROM TaskEventImpl o ORDER BY o.id ASC\",\n+                                                         TaskEventImpl.class).getResultList();\n+        Assertions.assertThat(tel).containsExactlyElementsOf(tel_a);\n+\n+        original.close();\n+        audit.close();\n+        return true;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -231,6 +227,19 @@ public class AuditDataReplicationKieServerTest {\n         return true;\n     }\n \n+    private void waitForEventProcessing(long total) throws Exception {\n+        \n+        long count = -1;\n+        long start = System.currentTimeMillis();\n+        while(count != total && start + TIMEOUT > System.currentTimeMillis()) {\n+            if(total == consumer.get()) {\n+                break;\n+            }\n+            Thread.sleep(100L);\n+        }\n+\n+    }\n+\n     private void clearDatasource(DataSource datasource) {\n         try (Connection c = datasource.getConnection(); Statement s = c.createStatement();) {\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcyMzE4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474723187", "body": "`com.google.common.io.Files` class is marked as `@Beta` - maybe, we can use following class instead:\r\n\r\n```suggestion\r\n            fos.write(org.apache.commons.io.FileUtils.readFileToByteArray(new File(resource + \"/pom.xml\")));\r\n```", "bodyText": "com.google.common.io.Files class is marked as @Beta - maybe, we can use following class instead:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        fos.write(Files.toByteArray(new File(resource + \"/pom.xml\")));\n          \n          \n            \n                        fos.write(org.apache.commons.io.FileUtils.readFileToByteArray(new File(resource + \"/pom.xml\")));", "bodyHTML": "<p dir=\"auto\"><code>com.google.common.io.Files</code> class is marked as <code>@Beta</code> - maybe, we can use following class instead:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            fos<span class=\"pl-k\">.</span>write(<span class=\"pl-smi x x-first\">Files</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toByteArray</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(resource <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/pom.xml<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            fos<span class=\"pl-k\">.</span>write(<span class=\"pl-smi\"><span class=\"x x-first\">org.apache.commons.io</span><span class=\"pl-k x\">.</span><span class=\"x\">FileUtils</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">readFileToByteArray</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(resource <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/pom.xml<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-21T14:10:56Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/KieJarBuildHelper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.appformer.maven.integration.MavenRepository;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.Message;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.io.Files;\n+\n+public class KieJarBuildHelper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KieJarBuildHelper.class);\n+\n+    public static void createKieJar(String resource) {       \n+        \n+        KieServices ks = KieServices.get();\n+        KieBuilder kieBuilder = ks.newKieBuilder(new File(resource));\n+        KieBuilder build = kieBuilder.buildAll();\n+        InternalKieModule kjar = (InternalKieModule) build.getKieModule();\n+\n+        List<Message> messages = kieBuilder.buildAll().getResults().getMessages();\n+        if (!messages.isEmpty()) {\n+            for (Message message : messages) {\n+                LOGGER.error(\"Error Message: ({}) {}\", message.getPath(), message.getText());\n+            }\n+            throw new RuntimeException(\"There are errors building the package, please check your knowledge assets!\");\n+        }\n+        \n+        String pomFileName = MavenRepository.toFileName(kjar.getReleaseId(), null) + \".pom\";\n+        File pomFile = new File(System.getProperty(\"java.io.tmpdir\"), pomFileName);\n+        try (FileOutputStream fos = new FileOutputStream(pomFile)) {\n+            fos.write(Files.toByteArray(new File(resource + \"/pom.xml\")));", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NDE2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475394164", "body": "Please remove unused import statements.", "bodyText": "Please remove unused import statements.", "bodyHTML": "<p dir=\"auto\">Please remove unused import statements.</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:29:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NDMxMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475394313", "body": "Not needed for the test case", "bodyText": "Not needed for the test case", "bodyHTML": "<p dir=\"auto\">Not needed for the test case</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:29:37Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -82,11 +76,12 @@ public class AuditDataReplicationKieServerTest {\n     @Autowired\n     private UserTaskService userTaskService;\n \n-    @Autowired\n-    private UserTaskAdminService userTaskAdminService;\n-\n     protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n \n+    @Autowired\n+    @Qualifier(\"auditDataReplicationQueueConsumer\")\n+    private  AuditDataReplicationJMSQueueConsumer consumer;\n+\n     @BeforeClass\n     public static void startUp() throws Exception {\n         KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n", "next_change": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex f940a5641..6016cee47 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -79,7 +81,7 @@ public class AuditDataReplicationKieServerTest {\n     protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n \n     @Autowired\n-    @Qualifier(\"auditDataReplicationQueueConsumer\")\n+    @Qualifier(\"auditDataReplicationConsumer\")\n     private  AuditDataReplicationJMSQueueConsumer consumer;\n \n     @BeforeClass\n", "next_change": null}, {"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex f940a5641..6016cee47 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -88,6 +90,13 @@ public class AuditDataReplicationKieServerTest {\n         Configuration config = new ConfigurationImpl();\n         config.setSecurityEnabled(false);\n         config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+\n+        CoreQueueConfiguration auditQueue = new CoreQueueConfiguration();\n+        auditQueue.setAddress(\"audit-queue\");\n+        auditQueue.setRoutingType(RoutingType.ANYCAST);\n+        auditQueue.setName(\"audit-queue\");\n+        config.addQueueConfiguration(auditQueue); \n+\n         embedded.setConfiguration(config);\n         embedded.start();\n         \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NTAyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475395025", "body": "`Exception` is never thrown within this code", "bodyText": "Exception is never thrown within this code", "bodyHTML": "<p dir=\"auto\"><code>Exception</code> is never thrown within this code</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:31:03Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -105,20 +100,21 @@ public class AuditDataReplicationKieServerTest {\n \n     @Before\n     public void reset() throws Exception {\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+        consumer.reset();\n \n-        \n         KieContainerResource resource = new KieContainerResource();\n         resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n         resource.addConfigItem(new KieServerConfigItem());\n         kieServer.createContainer(\"test\", resource);\n \n-        clearDatasource(datasourceOriginal);\n-        clearDatasource(datasourceReplica);\n     }\n \n     @Test\n     public void testSimpleProcess() throws Exception {\n         processService.startProcess(\"test\", \"kjar.simple-process\");\n+        waitForEventProcessing(15);\n         compareData();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NTE3NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475395174", "body": "`Exception` is never thrown within this code", "bodyText": "Exception is never thrown within this code", "bodyHTML": "<p dir=\"auto\"><code>Exception</code> is never thrown within this code</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:31:23Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -105,20 +100,21 @@ public class AuditDataReplicationKieServerTest {\n \n     @Before\n     public void reset() throws Exception {\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+        consumer.reset();\n \n-        \n         KieContainerResource resource = new KieContainerResource();\n         resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n         resource.addConfigItem(new KieServerConfigItem());\n         kieServer.createContainer(\"test\", resource);\n \n-        clearDatasource(datasourceOriginal);\n-        clearDatasource(datasourceReplica);\n     }\n \n     @Test\n     public void testSimpleProcess() throws Exception {\n         processService.startProcess(\"test\", \"kjar.simple-process\");\n+        waitForEventProcessing(15);\n         compareData();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5OTE5MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475399191", "body": "```suggestion\r\n        Thread.sleep(TIMEOUT);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Thread.sleep(1000L);\n          \n          \n            \n                    Thread.sleep(TIMEOUT);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>sleep(<span class=\"pl-c1 x x-first x-last\">1000L</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>sleep(<span class=\"pl-c1 x x-first x-last\">TIMEOUT</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-24T07:39:51Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -137,7 +133,7 @@ public class AuditDataReplicationKieServerTest {\n         tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n         tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n \n-        Thread.sleep(1000L);\n+        waitForEventProcessing(50);\n         compareData();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwNTYxNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475405617", "body": "can be converted to a local variable in `configure` method.", "bodyText": "can be converted to a local variable in configure method.", "bodyHTML": "<p dir=\"auto\">can be converted to a local variable in <code>configure</code> method.</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:51:38Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.io.Serializable;\n+import java.util.Properties;\n+\n+import org.hibernate.HibernateException;\n+import org.hibernate.MappingException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.id.Configurable;\n+import org.hibernate.id.IdentifierGenerator;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.type.Type;\n+\n+public class OverrideId implements IdentifierGenerator, Configurable {\n+\tprivate String entityName;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\nindex 797c97c58..de582a2f9 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java\n", "chunk": "@@ -12,7 +28,6 @@ import org.hibernate.service.ServiceRegistry;\n import org.hibernate.type.Type;\n \n public class OverrideId implements IdentifierGenerator, Configurable {\n-\tprivate String entityName;\n \n     public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException {\n         Serializable id = session.getEntityPersister(null, object)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwNzAzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475407032", "body": "Use `TimeUnit.SECONDS.sleep` instead.", "bodyText": "Use TimeUnit.SECONDS.sleep instead.", "bodyHTML": "<p dir=\"auto\">Use <code>TimeUnit.SECONDS.sleep</code> instead.</p>", "author": "afalhambra", "createdAt": "2020-08-24T07:54:24Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -137,7 +133,7 @@ public class AuditDataReplicationKieServerTest {\n         tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n         tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n \n-        Thread.sleep(1000L);\n+        waitForEventProcessing(50);\n         compareData();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxODI1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475418253", "body": "Maybe we can call this method in an `@After` annotation so we don't need to call it in every single test method", "bodyText": "Maybe we can call this method in an @After annotation so we don't need to call it in every single test method", "bodyHTML": "<p dir=\"auto\">Maybe we can call this method in an <code>@After</code> annotation so we don't need to call it in every single test method</p>", "author": "afalhambra", "createdAt": "2020-08-24T08:15:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskSkipProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.forward(e, USER_GENERIC, USER_NOMINATED));\n+        tasks.forEach(e -> userTaskService.skip(e, USER_NOMINATED));\n+        \n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskExitProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.exit(e, USER_ADMIN));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskFailProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.fail(e, USER_ADMIN, emptyMap()));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    private boolean compareData() {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTA1MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475629051", "bodyText": "assert should be in the test method.", "author": "elguardian", "createdAt": "2020-08-24T13:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxODI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex 402c64012..f940a5641 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -174,7 +170,7 @@ public class AuditDataReplicationKieServerTest {\n         tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n         tasks.forEach(e -> userTaskService.fail(e, USER_ADMIN, emptyMap()));\n \n-        Thread.sleep(TIMEOUT);\n+        waitForEventProcessing(32);\n         compareData();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTg2MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475509861", "body": "typo\r\n```suggestion\r\npublic class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n          \n          \n            \n            public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">AuditDataReplicationBAMTaskSumaryListenerProducer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DefaultTaskEventListener</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">AuditDataReplicationBAMTaskSummaryListenerProducer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DefaultTaskEventListener</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-24T10:38:02Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.jbpm.services.task.lifecycle.listeners.BAMTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n+\n+public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxOTk0MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r476219940", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-25T06:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\nsimilarity index 96%\nrename from kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java\nrename to kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\nindex 7d100aa1b..00222f3eb 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSummaryListenerProducer.java\n", "chunk": "@@ -23,7 +23,7 @@ import org.springframework.beans.factory.annotation.Autowired;\n \n import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n \n-public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n+public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {\n \n     @Autowired\n     private JMSSender jmsSender;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTExNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475525114", "body": "```suggestion\r\n    private AtomicLong processedMessages = new AtomicLong();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AtomicLong messagesProcessed = new AtomicLong();\n          \n          \n            \n                private AtomicLong processedMessages = new AtomicLong();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">AtomicLong</span> <span class=\"x x-first x-last\">messagesProcessed</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AtomicLong</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">AtomicLong</span> <span class=\"x x-first x-last\">processedMessages</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AtomicLong</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-24T11:10:57Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    private AtomicLong messagesProcessed = new AtomicLong();", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDI2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475630267", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T13:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTExNA=="}], "type": "inlineReview", "revised_code": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\nindex da0794e43..c47044b81 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java\n", "chunk": "@@ -37,14 +37,14 @@ public abstract class AbstractAuditDataReplicationJMSConsumer {\n \n     private EntityManagerFactory emf;\n \n-    private AtomicLong messagesProcessed = new AtomicLong();\n+    private AtomicLong processedMessages = new AtomicLong();\n \n     public Long get() {\n-        return messagesProcessed.get();\n+        return processedMessages.get();\n     }\n     \n     public void reset () {\n-        messagesProcessed.set(0);\n+        processedMessages.set(0);\n     }\n \n     public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjAyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475526028", "body": "This bean is more generic, so it might be either a queue or a topic, so I would rename it to \r\n```suggestion\r\n    @Bean(name=\"auditDataReplicationConsumer\")\r\n```", "bodyText": "This bean is more generic, so it might be either a queue or a topic, so I would rename it to\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean(name=\"auditDataReplicationQueueConsumer\")\n          \n          \n            \n                @Bean(name=\"auditDataReplicationConsumer\")", "bodyHTML": "<p dir=\"auto\">This bean is more generic, so it might be either a queue or a topic, so I would rename it to</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Bean</span>(<span class=\"pl-c1\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">auditDataReplicationQueueConsumer</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Bean</span>(<span class=\"pl-c1\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">auditDataReplicationConsumer</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-24T11:12:53Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTE5MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475631191", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T13:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex 369c4d817..ec0164517 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -116,8 +116,8 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n         return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n     }\n \n-    @Bean(name=\"auditDataReplicationQueueConsumer\")\n-    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @Bean(name=\"auditDataReplicationConsumer\")\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n     public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n         logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n", "next_change": {"commit": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\nindex ec0164517..3365167f1 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java\n", "chunk": "@@ -113,7 +113,7 @@ public class AuditDataReplicationKieServerAutoConfiguration {\n     @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n     public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n         logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n-        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+        return new AuditDataReplicationBAMTaskSummaryListenerProducer();\n     }\n \n     @Bean(name=\"auditDataReplicationConsumer\")\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzOTEyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475539122", "body": "It might be worth removing `data` and `transactions-logs` folders after test case execution. It will fail next test otherwise.", "bodyText": "It might be worth removing data and transactions-logs folders after test case execution. It will fail next test otherwise.", "bodyHTML": "<p dir=\"auto\">It might be worth removing <code>data</code> and <code>transactions-logs</code> folders after test case execution. It will fail next test otherwise.</p>", "author": "afalhambra", "createdAt": "2020-08-24T11:40:02Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 10000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @Autowired\n+    @Qualifier(\"auditDataReplicationQueueConsumer\")\n+    private  AuditDataReplicationJMSQueueConsumer consumer;\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTQyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475631428", "bodyText": "in post integration test pom.xml", "author": "elguardian", "createdAt": "2020-08-24T13:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzOTEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "a6f5fc0bc2a660455b8394f147e32a395133d125", "changed_code": [{"header": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\nindex f940a5641..6016cee47 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java\n", "chunk": "@@ -88,6 +90,13 @@ public class AuditDataReplicationKieServerTest {\n         Configuration config = new ConfigurationImpl();\n         config.setSecurityEnabled(false);\n         config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+\n+        CoreQueueConfiguration auditQueue = new CoreQueueConfiguration();\n+        auditQueue.setAddress(\"audit-queue\");\n+        auditQueue.setRoutingType(RoutingType.ANYCAST);\n+        auditQueue.setName(\"audit-queue\");\n+        config.addQueueConfiguration(auditQueue); \n+\n         embedded.setConfiguration(config);\n         embedded.start();\n         \n", "next_change": null}]}}, {"oid": "a6f5fc0bc2a660455b8394f147e32a395133d125", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a6f5fc0bc2a660455b8394f147e32a395133d125", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-24T14:06:23Z", "type": "forcePushed"}, {"oid": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f94fb061f7f90f084cb9086804f90c2d91c229ea", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-25T06:48:14Z", "type": "forcePushed"}, {"oid": "60774947bc23e405ed29e13c941212dc4ecd635c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/60774947bc23e405ed29e13c941212dc4ecd635c", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-25T11:07:13Z", "type": "forcePushed"}, {"oid": "f3d3753df936f103d58b18e5a96dad22d33dd959", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f3d3753df936f103d58b18e5a96dad22d33dd959", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-26T09:21:57Z", "type": "commit"}, {"oid": "f3d3753df936f103d58b18e5a96dad22d33dd959", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f3d3753df936f103d58b18e5a96dad22d33dd959", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-26T09:21:57Z", "type": "forcePushed"}]}