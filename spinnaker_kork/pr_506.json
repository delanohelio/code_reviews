{"pr_number": 506, "pr_title": "feat(plugins): Constructor dependency injection for extensions", "pr_author": "robzienert", "pr_createdAt": "2020-02-06T23:59:57Z", "pr_url": "https://github.com/spinnaker/kork/pull/506", "merge_commit": "fc264be519e4b998a17961a8150ea7b6a3671d80", "timeline": [{"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "url": "https://github.com/spinnaker/kork/commit/189eb43ef60adaebca6a251bff08b41c1416ed9b", "message": "feat(plugins): Constructor dependency injection for extensions", "committedDate": "2020-02-07T00:17:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NzA3MQ==", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377277071", "body": "I'm not actually seeing this used anywhere.  What are the plans for this?", "bodyText": "I'm not actually seeing this used anywhere.  What are the plans for this?", "bodyHTML": "<p dir=\"auto\">I'm not actually seeing this used anywhere.  What are the plans for this?</p>", "author": "jonsie", "createdAt": "2020-02-10T19:44:21Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * A marker annotation that documents a type as being injectable into an Extension.\n+ *\n+ * <p>Any class in the Plugins API with this annotation will be available for injection into an\n+ * Extension at initialization time.\n+ *\n+ * <pre>{@code\n+ * @Extension\n+ * class MyExtension {\n+ *\n+ *   private final HttpClientProvider httpClientProvider;\n+ *\n+ *   public MyExtension(HttpClientProvider httpClientProvider) {\n+ *     this.httpClientProvider = httpClientProvider;\n+ *   }\n+ * }\n+ * }</pre>\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.CLASS)\n+@Documented\n+public @interface Injectable {}", "originalCommit": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3OTU1OQ==", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377279559", "bodyText": "You're right, it's not used in this PR. It would be used for SDKs, such as HttpClient and so-on. It's a marker annotation that informs plugin developers what is available for injection, and could be used to auto-generate docs on what is available. It's possible that we could tie it back into the DependencyProviders, but I'm not sure if there's value at this point.", "author": "robzienert", "createdAt": "2020-02-10T19:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NzA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "00ad18752349d168b0db47e8004a9936570a2743", "changed_code": [{"header": "diff --git a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\nindex 3807b136..dfb21594 100644\n--- a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\n+++ b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\n", "chunk": "@@ -28,11 +28,15 @@ import java.lang.annotation.*;\n  * @Extension\n  * class MyExtension {\n  *\n+ *   private final MyConfig config;\n  *   private final HttpClientProvider httpClientProvider;\n  *\n- *   public MyExtension(HttpClientProvider httpClientProvider) {\n+ *   public MyExtension(MyConfig config, HttpClientProvider httpClientProvider) {\n+ *     this.config = config;\n  *     this.httpClientProvider = httpClientProvider;\n  *   }\n+ *\n+ *   public static class MyConfig {}\n  * }\n  * }</pre>\n  */\n", "next_change": {"commit": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "changed_code": [{"header": "diff --git a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\nsimilarity index 50%\nrename from kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\nrename to kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\nindex dfb21594..03346fff 100644\n--- a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\n+++ b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\n", "chunk": "@@ -12,35 +12,24 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n  */\n package com.netflix.spinnaker.kork.plugins.api;\n \n-import java.lang.annotation.*;\n-\n /**\n- * A marker annotation that documents a type as being injectable into an Extension.\n+ * A convenience interface for accessing plugin SDK services.\n  *\n- * <p>Any class in the Plugins API with this annotation will be available for injection into an\n- * Extension at initialization time.\n+ * <p>If an extension needs any services, this interface can be included as a constructor parameter\n+ * and the implementation will be injected into the extension.\n  *\n  * <pre>{@code\n- * @Extension\n- * class MyExtension {\n+ * public class MyExtension {\n  *\n- *   private final MyConfig config;\n- *   private final HttpClientProvider httpClientProvider;\n+ *   private final PluginServices pluginServices;\n  *\n- *   public MyExtension(MyConfig config, HttpClientProvider httpClientProvider) {\n- *     this.config = config;\n- *     this.httpClientProvider = httpClientProvider;\n+ *   public MyExtension(PluginServices pluginServices) {\n+ *     this.pluginServices = pluginServices;\n  *   }\n- *\n- *   public static class MyConfig {}\n  * }\n  * }</pre>\n  */\n-@Target(ElementType.TYPE)\n-@Retention(RetentionPolicy.CLASS)\n-@Documented\n-public @interface Injectable {}\n+public interface PluginSdks {}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "fc264be519e4b998a17961a8150ea7b6a3671d80", "changed_code": [{"header": "diff --git a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\nsimilarity index 55%\nrename from kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\nrename to kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\nindex 3807b136..03346fff 100644\n--- a/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java\n+++ b/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginSdks.java\n", "chunk": "@@ -12,31 +12,24 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n  */\n package com.netflix.spinnaker.kork.plugins.api;\n \n-import java.lang.annotation.*;\n-\n /**\n- * A marker annotation that documents a type as being injectable into an Extension.\n+ * A convenience interface for accessing plugin SDK services.\n  *\n- * <p>Any class in the Plugins API with this annotation will be available for injection into an\n- * Extension at initialization time.\n+ * <p>If an extension needs any services, this interface can be included as a constructor parameter\n+ * and the implementation will be injected into the extension.\n  *\n  * <pre>{@code\n- * @Extension\n- * class MyExtension {\n+ * public class MyExtension {\n  *\n- *   private final HttpClientProvider httpClientProvider;\n+ *   private final PluginServices pluginServices;\n  *\n- *   public MyExtension(HttpClientProvider httpClientProvider) {\n- *     this.httpClientProvider = httpClientProvider;\n+ *   public MyExtension(PluginServices pluginServices) {\n+ *     this.pluginServices = pluginServices;\n  *   }\n  * }\n  * }</pre>\n  */\n-@Target(ElementType.TYPE)\n-@Retention(RetentionPolicy.CLASS)\n-@Documented\n-public @interface Injectable {}\n+public interface PluginSdks {}\n", "next_change": null}]}, "commits_in_main": [{"oid": "fc264be519e4b998a17961a8150ea7b6a3671d80", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MTA5Nw==", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377281097", "body": "`extensionExtensionInitializer` -- probably a typo.", "bodyText": "extensionExtensionInitializer -- probably a typo.", "bodyHTML": "<p dir=\"auto\"><code>extensionExtensionInitializer</code> -- probably a typo.</p>", "author": "jonsie", "createdAt": "2020-02-10T19:52:20Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -86,10 +92,10 @@ public static ConfigResolver springEnvironmentConfigResolver(\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ConfigResolver configResolver) {\n+      ExtensionInitializer extensionExtensionInitializer) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        configResolver,\n+        extensionExtensionInitializer,", "originalCommit": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00ad18752349d168b0db47e8004a9936570a2743", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 6dbe6f2e..7fb700cc 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -92,10 +97,10 @@ public class PluginsAutoConfiguration {\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ExtensionInitializer extensionExtensionInitializer) {\n+      ExtensionInitializer extensionInitializer) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        extensionExtensionInitializer,\n+        extensionInitializer,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n         Paths.get(\n", "next_change": {"commit": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 7fb700cc..528ca555 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -97,10 +90,12 @@ public class PluginsAutoConfiguration {\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ExtensionInitializer extensionInitializer) {\n+      ExtensionConfigFactory extensionConfigFactory,\n+      List<SdkFactory> sdkFactories) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        extensionInitializer,\n+        extensionConfigFactory,\n+        sdkFactories,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n         Paths.get(\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "fc264be519e4b998a17961a8150ea7b6a3671d80", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 6dbe6f2e..528ca555 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -92,10 +90,12 @@ public class PluginsAutoConfiguration {\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ExtensionInitializer extensionExtensionInitializer) {\n+      ExtensionConfigFactory extensionConfigFactory,\n+      List<SdkFactory> sdkFactories) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        extensionExtensionInitializer,\n+        extensionConfigFactory,\n+        sdkFactories,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n         Paths.get(\n", "next_change": {"commit": "f6082f7cf7dd3cdbd2e75cccdf6df79f00f7f180", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 528ca555..6dd3d6f5 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -90,11 +90,11 @@ public class PluginsAutoConfiguration {\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ExtensionConfigFactory extensionConfigFactory,\n+      ConfigFactory configFactory,\n       List<SdkFactory> sdkFactories) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        extensionConfigFactory,\n+        configFactory,\n         sdkFactories,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n", "next_change": {"commit": "ba7858026eb2f6a5352c3cbf13cc94f197708072", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 6dd3d6f5..e9164208 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -88,11 +118,15 @@ public class PluginsAutoConfiguration {\n \n   @Bean\n   public static SpinnakerPluginManager pluginManager(\n+      VersionResolver serviceVersionResolver,\n+      VersionManager versionManager,\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n       ConfigFactory configFactory,\n       List<SdkFactory> sdkFactories) {\n     return new SpinnakerPluginManager(\n+        serviceVersionResolver,\n+        versionManager,\n         pluginStatusProvider,\n         configFactory,\n         sdkFactories,\n", "next_change": {"commit": "c4f352331286727f8c11fd005a07676e0f3f62cd", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex e9164208..0d4fae42 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -118,14 +123,14 @@ public class PluginsAutoConfiguration {\n \n   @Bean\n   public static SpinnakerPluginManager pluginManager(\n-      VersionResolver serviceVersionResolver,\n+      ServiceVersion serviceVersion,\n       VersionManager versionManager,\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n       ConfigFactory configFactory,\n       List<SdkFactory> sdkFactories) {\n     return new SpinnakerPluginManager(\n-        serviceVersionResolver,\n+        serviceVersion,\n         versionManager,\n         pluginStatusProvider,\n         configFactory,\n", "next_change": {"commit": "39ea2e161c462fbb60727d2a78e008e8a42ee6b8", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 0d4fae42..8637ac0f 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -128,7 +129,8 @@ public class PluginsAutoConfiguration {\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n       ConfigFactory configFactory,\n-      List<SdkFactory> sdkFactories) {\n+      List<SdkFactory> sdkFactories,\n+      PluginBundleExtractor pluginBundleExtractor) {\n     return new SpinnakerPluginManager(\n         serviceVersion,\n         versionManager,\n", "next_change": {"commit": "193f9b48ba7f7050435ceafb3f02cb14177243b6", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 8637ac0f..842cd782 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -139,18 +134,28 @@ public class PluginsAutoConfiguration {\n         sdkFactories,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n-        Paths.get(\n-            applicationContext\n-                .getEnvironment()\n-                .getProperty(\n-                    PluginsConfigurationProperties.ROOT_PATH_CONFIG,\n-                    PluginsConfigurationProperties.DEFAULT_ROOT_PATH)),\n+        determineRootPluginPath(applicationContext),\n         pluginBundleExtractor);\n   }\n \n+  /**\n+   * If the plugins-root-path property is set, returns the absolute path to the property. Otherwise,\n+   * returns the default root path 'plugins'.\n+   */\n+  private static Path determineRootPluginPath(ApplicationContext applicationContext) {\n+    String rootPathConfig =\n+        applicationContext\n+            .getEnvironment()\n+            .getProperty(PluginsConfigurationProperties.ROOT_PATH_CONFIG);\n+    return rootPathConfig == null\n+        ? Paths.get(PluginsConfigurationProperties.DEFAULT_ROOT_PATH)\n+        : Paths.get(rootPathConfig).toAbsolutePath();\n+  }\n+\n   @Bean\n-  public static PluginBundleExtractor pluginBundleExtractor(Environment environment) {\n-    return new PluginBundleExtractor(environment);\n+  public static PluginBundleExtractor pluginBundleExtractor(\n+      SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider) {\n+    return new PluginBundleExtractor(springStrictPluginLoaderStatusProvider);\n   }\n \n   @Bean\n", "next_change": {"commit": "64376c116e0a612bc06ab8f1389fc5727be199a7", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 842cd782..36b14218 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -159,18 +174,23 @@ public class PluginsAutoConfiguration {\n   }\n \n   @Bean\n-  public static PluginInfoReleaseProvider pluginReleaseProvider(\n-      SpringPluginStatusProvider pluginStatusProvider,\n-      VersionManager versionManager,\n-      SpinnakerUpdateManager updateManager,\n-      SpinnakerPluginManager pluginManager,\n+  public static PluginInfoReleaseSource springPluginInfoReleaseSource(\n+      SpringPluginStatusProvider pluginStatusProvider) {\n+    return new SpringPluginInfoReleaseSource(pluginStatusProvider);\n+  }\n+\n+  @Bean\n+  public static PluginInfoReleaseSource latestPluginInfoReleaseSource(\n+      SpinnakerUpdateManager updateManager) {\n+    return new LatestPluginInfoReleaseSource(updateManager, null);\n+  }\n+\n+  @Bean\n+  public static PluginInfoReleaseProvider pluginInfoReleaseProvider(\n+      List<PluginInfoReleaseSource> pluginInfoReleaseSources,\n       SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider) {\n-    return new SpringPluginInfoReleaseProvider(\n-        pluginStatusProvider,\n-        versionManager,\n-        updateManager,\n-        pluginManager,\n-        springStrictPluginLoaderStatusProvider);\n+    return new AggregatePluginInfoReleaseProvider(\n+        pluginInfoReleaseSources, springStrictPluginLoaderStatusProvider);\n   }\n \n   @Bean\n", "next_change": {"commit": "44e1536e59fe19aa461b03e73438b18597408ec8", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 36b14218..33b21867 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -193,6 +201,26 @@ public class PluginsAutoConfiguration {\n         pluginInfoReleaseSources, springStrictPluginLoaderStatusProvider);\n   }\n \n+  @Bean\n+  public static RemotePluginInfoReleaseCache remotePluginInfoReleaseCache(\n+      Collection<PluginInfoReleaseSource> pluginInfoReleaseSources,\n+      SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider,\n+      ApplicationEventPublisher applicationEventPublisher,\n+      SpinnakerUpdateManager updateManager,\n+      SpinnakerPluginManager pluginManager,\n+      SpringPluginStatusProvider springPluginStatusProvider) {\n+    return new RemotePluginInfoReleaseCache(\n+        new AggregatePluginInfoReleaseProvider(\n+            pluginInfoReleaseSources.stream()\n+                .filter(source -> !(source instanceof Front50PluginInfoReleaseSource))\n+                .collect(Collectors.toList()),\n+            springStrictPluginLoaderStatusProvider),\n+        applicationEventPublisher,\n+        updateManager,\n+        pluginManager,\n+        springPluginStatusProvider);\n+  }\n+\n   @Bean\n   public static SpinnakerUpdateManager pluginUpdateManager(\n       SpinnakerPluginManager pluginManager,\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "fc264be519e4b998a17961a8150ea7b6a3671d80", "message": "Merge commit", "committedDate": null}, {"oid": "f6082f7cf7dd3cdbd2e75cccdf6df79f00f7f180", "committedDate": "2020-02-18 19:20:21 +0000", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface (#518)"}, {"oid": "3ee938624233083df2c8adf4d0bdf9f07aa53a29", "committedDate": "2020-02-24 21:02:45 +0000", "message": "feat(plugins): Adding Front50 FileDownloader (#525)"}, {"oid": "ba7858026eb2f6a5352c3cbf13cc94f197708072", "committedDate": "2020-02-26 19:29:42 +0000", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints (#526)"}, {"oid": "c4f352331286727f8c11fd005a07676e0f3f62cd", "committedDate": "2020-02-28 12:12:42 -0800", "message": "fix(plugins): Rework ServiceVersion bean wiring (#531)"}, {"oid": "1f27a13db31f222b5022bb9f7261119644e2b65c", "committedDate": "2020-03-02 21:02:37 +0000", "message": "feat(plugins): HTTP client plugin API (#507)"}, {"oid": "6e885cdd3638358d253fda03cc17ba41504cb333", "committedDate": "2020-03-05 17:02:43 -0800", "message": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context (#545)"}, {"oid": "39ea2e161c462fbb60727d2a78e008e8a42ee6b8", "committedDate": "2020-03-25 19:59:24 +0000", "message": "fix(plugins): allow for plugin configs on all services (#564)"}, {"oid": "a423399b56774b18f59e15d4a6f043e6167d8225", "committedDate": "2020-03-31 16:26:55 -0500", "message": "fix(plugins): allow for relaxed plugin loading (#573)"}, {"oid": "193f9b48ba7f7050435ceafb3f02cb14177243b6", "committedDate": "2020-04-11 15:18:53 -0700", "message": "feat(plugins): Add kork-plugins-tck module to support testing plugins in services (#595)"}, {"oid": "64376c116e0a612bc06ab8f1389fc5727be199a7", "committedDate": "2020-04-28 09:19:54 -0700", "message": "refactor(plugins): Add AggregatePluginInfoReleaseProvider that aggregates over list of PluginInfoReleaseSource (#624)"}, {"oid": "e44522a4fa3f9ff1519f2b1bfb4b0a1f9ed48df1", "committedDate": "2020-05-07 17:15:12 -0700", "message": "feat(plugins): Add preferred plugin info release source (#642)"}, {"oid": "8a1084815c631b6a5eee6cc7d6e27cd92fbb13b6", "committedDate": "2020-05-19 23:40:52 +0000", "message": "refactor(plugins): Move installed plugins actutator endpoint (#656)"}, {"oid": "44e1536e59fe19aa461b03e73438b18597408ec8", "committedDate": "2020-08-06 15:27:22 -0700", "message": "feat(plugins): Add remote plugin info release cache for plugins that contain remote extensions, add kork-api module (#734)"}, {"oid": "efcd26096dffbc163126ec97c05db625785da6f5", "committedDate": "2020-08-19 15:53:15 -0700", "message": "feat(plugins): Remote plugins configuration, cache, and remote transport with OkHttp3 client implementation (#747)"}, {"oid": "a0545f4f6e50ca2e403ad4b7571320776e8085e1", "committedDate": "2020-08-21 19:38:51 +0000", "message": "feat(plugins): Spring-backed native plugin extensions (#752)"}, {"oid": "4ae400c5144bfa42886838630051dc966598b905", "committedDate": "2020-08-24 18:51:47 +0000", "message": "fix(plugins): Inlining V1 plugin framework config (removing @Import) (#758)"}, {"oid": "00cb8ea81dfddaacc9a8f2af6c6872212b187a54", "committedDate": "2020-08-27 16:29:55 -0700", "message": "fix(plugins): Move all config code under PluginsAutoConfiguration (#763)"}, {"oid": "9346f4c884d76526acd6a762b50b179d04e554cc", "committedDate": "2020-09-30 19:28:15 +0000", "message": "feat(plugins): V2 framework is now the default (#790)"}, {"oid": "0266630bf81d09d400e48d40a81202bb396dac41", "committedDate": "2020-10-21 19:39:42 +0000", "message": "feat(plugins): Include spinnaker-official and spinnaker-community repositories by default (#806)"}, {"oid": "47bd625f762ee2868c2f3f51b1ad5c4530d9366b", "committedDate": "2020-10-27 15:18:56 -0400", "message": "feat(plugins): allow service-side extension injection without special (#812)"}, {"oid": "f2315066f688131d78eb4d720b7dc0c5d61844bd", "committedDate": "2020-12-14 17:50:54 +0000", "message": "fix(plugins): Use getter/setters for accessing config flag (#832)"}, {"oid": "29b1a97e61e0796514cdd00340fb5cc07f23aa4d", "committedDate": "2021-03-17 17:41:03 -0700", "message": "feat(plugins): Add config property to enable/disable extension proxying (#853)"}, {"oid": "2a30b08cb626080aed851e8bf22ad1e86790d0b1", "committedDate": "2021-03-18 12:23:48 -0700", "message": "Revert \"feat(plugins): Add config property to enable/disable extension proxying (#853)\" (#854)"}, {"oid": "d1eb57a94d9a585a338e5c0eada04b93c5603b96", "committedDate": "2021-04-12 08:36:38 -0400", "message": "fix(plugins): fixes enable-default-repositories flag (#860)"}, {"oid": "f7c9ef75cf93ba4ec36b3855ae5853631ac09860", "committedDate": "2023-04-12 00:09:12 +0000", "message": "fix(plugins): Enable RemotePluginInfoReleaseCache bean only when the property matches the condition (#1041)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MjU2OQ==", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377282569", "body": "It wont be long before we build up another `DependencyProvider`, so let's make the `DependencyProvider` objects separate beans and then add them to this `extensionInjector` factory so we keep the arguments clean (i.e. -- `ConfigResolver` is a dependency for `ConfigDependencyProvider` and not `ExtensionInitializer`).", "bodyText": "It wont be long before we build up another DependencyProvider, so let's make the DependencyProvider objects separate beans and then add them to this extensionInjector factory so we keep the arguments clean (i.e. -- ConfigResolver is a dependency for ConfigDependencyProvider and not ExtensionInitializer).", "bodyHTML": "<p dir=\"auto\">It wont be long before we build up another <code>DependencyProvider</code>, so let's make the <code>DependencyProvider</code> objects separate beans and then add them to this <code>extensionInjector</code> factory so we keep the arguments clean (i.e. -- <code>ConfigResolver</code> is a dependency for <code>ConfigDependencyProvider</code> and not <code>ExtensionInitializer</code>).</p>", "author": "jonsie", "createdAt": "2020-02-10T19:55:05Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -74,6 +74,12 @@ public static ConfigResolver springEnvironmentConfigResolver(\n     return new SpringEnvironmentConfigResolver(environment);\n   }\n \n+  @Bean\n+  ExtensionInitializer extensionsInjector(ConfigResolver configResolver) {", "originalCommit": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00ad18752349d168b0db47e8004a9936570a2743", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 6dbe6f2e..7fb700cc 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -75,9 +76,13 @@ public class PluginsAutoConfiguration {\n   }\n \n   @Bean\n-  ExtensionInitializer extensionsInjector(ConfigResolver configResolver) {\n-    return new ConstructorExtensionInitializer(\n-        Arrays.asList(new ConfigDependencyProvider(configResolver)));\n+  ConfigDependencyProvider configDependencyProvider(ConfigResolver configResolver) {\n+    return new ConfigDependencyProvider(configResolver);\n+  }\n+\n+  @Bean\n+  ExtensionInitializer extensionsInjector(List<DependencyProvider> dependencyProviders) {\n+    return new ConstructorExtensionInitializer(dependencyProviders);\n   }\n \n   @Bean\n", "next_change": {"commit": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 7fb700cc..528ca555 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -76,13 +74,8 @@ public class PluginsAutoConfiguration {\n   }\n \n   @Bean\n-  ConfigDependencyProvider configDependencyProvider(ConfigResolver configResolver) {\n-    return new ConfigDependencyProvider(configResolver);\n-  }\n-\n-  @Bean\n-  ExtensionInitializer extensionsInjector(List<DependencyProvider> dependencyProviders) {\n-    return new ConstructorExtensionInitializer(dependencyProviders);\n+  ExtensionConfigFactory extensionConfigInitializer(ConfigResolver configResolver) {\n+    return new ExtensionConfigFactory(configResolver);\n   }\n \n   @Bean\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "fc264be519e4b998a17961a8150ea7b6a3671d80", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 6dbe6f2e..528ca555 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -75,9 +74,8 @@ public class PluginsAutoConfiguration {\n   }\n \n   @Bean\n-  ExtensionInitializer extensionsInjector(ConfigResolver configResolver) {\n-    return new ConstructorExtensionInitializer(\n-        Arrays.asList(new ConfigDependencyProvider(configResolver)));\n+  ExtensionConfigFactory extensionConfigInitializer(ConfigResolver configResolver) {\n+    return new ExtensionConfigFactory(configResolver);\n   }\n \n   @Bean\n", "next_change": {"commit": "f6082f7cf7dd3cdbd2e75cccdf6df79f00f7f180", "changed_code": [{"header": "diff --git a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\nindex 528ca555..6dd3d6f5 100644\n--- a/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n+++ b/kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java\n", "chunk": "@@ -74,8 +74,8 @@ public class PluginsAutoConfiguration {\n   }\n \n   @Bean\n-  ExtensionConfigFactory extensionConfigInitializer(ConfigResolver configResolver) {\n-    return new ExtensionConfigFactory(configResolver);\n+  ConfigFactory configFactory(ConfigResolver configResolver) {\n+    return new ConfigFactory(configResolver);\n   }\n \n   @Bean\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fc264be519e4b998a17961a8150ea7b6a3671d80", "message": "Merge commit", "committedDate": null}, {"oid": "f6082f7cf7dd3cdbd2e75cccdf6df79f00f7f180", "committedDate": "2020-02-18 19:20:21 +0000", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface (#518)"}, {"oid": "3ee938624233083df2c8adf4d0bdf9f07aa53a29", "committedDate": "2020-02-24 21:02:45 +0000", "message": "feat(plugins): Adding Front50 FileDownloader (#525)"}, {"oid": "ba7858026eb2f6a5352c3cbf13cc94f197708072", "committedDate": "2020-02-26 19:29:42 +0000", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints (#526)"}, {"oid": "c4f352331286727f8c11fd005a07676e0f3f62cd", "committedDate": "2020-02-28 12:12:42 -0800", "message": "fix(plugins): Rework ServiceVersion bean wiring (#531)"}, {"oid": "1f27a13db31f222b5022bb9f7261119644e2b65c", "committedDate": "2020-03-02 21:02:37 +0000", "message": "feat(plugins): HTTP client plugin API (#507)"}, {"oid": "6e885cdd3638358d253fda03cc17ba41504cb333", "committedDate": "2020-03-05 17:02:43 -0800", "message": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context (#545)"}, {"oid": "39ea2e161c462fbb60727d2a78e008e8a42ee6b8", "committedDate": "2020-03-25 19:59:24 +0000", "message": "fix(plugins): allow for plugin configs on all services (#564)"}, {"oid": "a423399b56774b18f59e15d4a6f043e6167d8225", "committedDate": "2020-03-31 16:26:55 -0500", "message": "fix(plugins): allow for relaxed plugin loading (#573)"}, {"oid": "193f9b48ba7f7050435ceafb3f02cb14177243b6", "committedDate": "2020-04-11 15:18:53 -0700", "message": "feat(plugins): Add kork-plugins-tck module to support testing plugins in services (#595)"}, {"oid": "64376c116e0a612bc06ab8f1389fc5727be199a7", "committedDate": "2020-04-28 09:19:54 -0700", "message": "refactor(plugins): Add AggregatePluginInfoReleaseProvider that aggregates over list of PluginInfoReleaseSource (#624)"}, {"oid": "e44522a4fa3f9ff1519f2b1bfb4b0a1f9ed48df1", "committedDate": "2020-05-07 17:15:12 -0700", "message": "feat(plugins): Add preferred plugin info release source (#642)"}, {"oid": "8a1084815c631b6a5eee6cc7d6e27cd92fbb13b6", "committedDate": "2020-05-19 23:40:52 +0000", "message": "refactor(plugins): Move installed plugins actutator endpoint (#656)"}, {"oid": "44e1536e59fe19aa461b03e73438b18597408ec8", "committedDate": "2020-08-06 15:27:22 -0700", "message": "feat(plugins): Add remote plugin info release cache for plugins that contain remote extensions, add kork-api module (#734)"}, {"oid": "efcd26096dffbc163126ec97c05db625785da6f5", "committedDate": "2020-08-19 15:53:15 -0700", "message": "feat(plugins): Remote plugins configuration, cache, and remote transport with OkHttp3 client implementation (#747)"}, {"oid": "a0545f4f6e50ca2e403ad4b7571320776e8085e1", "committedDate": "2020-08-21 19:38:51 +0000", "message": "feat(plugins): Spring-backed native plugin extensions (#752)"}, {"oid": "4ae400c5144bfa42886838630051dc966598b905", "committedDate": "2020-08-24 18:51:47 +0000", "message": "fix(plugins): Inlining V1 plugin framework config (removing @Import) (#758)"}, {"oid": "00cb8ea81dfddaacc9a8f2af6c6872212b187a54", "committedDate": "2020-08-27 16:29:55 -0700", "message": "fix(plugins): Move all config code under PluginsAutoConfiguration (#763)"}, {"oid": "9346f4c884d76526acd6a762b50b179d04e554cc", "committedDate": "2020-09-30 19:28:15 +0000", "message": "feat(plugins): V2 framework is now the default (#790)"}, {"oid": "0266630bf81d09d400e48d40a81202bb396dac41", "committedDate": "2020-10-21 19:39:42 +0000", "message": "feat(plugins): Include spinnaker-official and spinnaker-community repositories by default (#806)"}, {"oid": "47bd625f762ee2868c2f3f51b1ad5c4530d9366b", "committedDate": "2020-10-27 15:18:56 -0400", "message": "feat(plugins): allow service-side extension injection without special (#812)"}, {"oid": "f2315066f688131d78eb4d720b7dc0c5d61844bd", "committedDate": "2020-12-14 17:50:54 +0000", "message": "fix(plugins): Use getter/setters for accessing config flag (#832)"}, {"oid": "29b1a97e61e0796514cdd00340fb5cc07f23aa4d", "committedDate": "2021-03-17 17:41:03 -0700", "message": "feat(plugins): Add config property to enable/disable extension proxying (#853)"}, {"oid": "2a30b08cb626080aed851e8bf22ad1e86790d0b1", "committedDate": "2021-03-18 12:23:48 -0700", "message": "Revert \"feat(plugins): Add config property to enable/disable extension proxying (#853)\" (#854)"}, {"oid": "d1eb57a94d9a585a338e5c0eada04b93c5603b96", "committedDate": "2021-04-12 08:36:38 -0400", "message": "fix(plugins): fixes enable-default-repositories flag (#860)"}, {"oid": "f7c9ef75cf93ba4ec36b3855ae5853631ac09860", "committedDate": "2023-04-12 00:09:12 +0000", "message": "fix(plugins): Enable RemotePluginInfoReleaseCache bean only when the property matches the condition (#1041)"}]}, {"oid": "00ad18752349d168b0db47e8004a9936570a2743", "url": "https://github.com/spinnaker/kork/commit/00ad18752349d168b0db47e8004a9936570a2743", "message": "feat(plugins): Constructor dependency injection for extensions", "committedDate": "2020-02-11T19:12:38Z", "type": "forcePushed"}, {"oid": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "url": "https://github.com/spinnaker/kork/commit/b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "message": "feat(plugins): Constructor dependency injection for extensions", "committedDate": "2020-02-12T07:17:45Z", "type": "commit"}, {"oid": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "url": "https://github.com/spinnaker/kork/commit/b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "message": "feat(plugins): Constructor dependency injection for extensions", "committedDate": "2020-02-12T07:17:45Z", "type": "forcePushed"}, {"oid": "d21feb897d2e380179212dcbc2de11c72a9ff88f", "url": "https://github.com/spinnaker/kork/commit/d21feb897d2e380179212dcbc2de11c72a9ff88f", "message": "Merge branch 'master' into di", "committedDate": "2020-02-13T20:48:21Z", "type": "commit"}, {"oid": "8e1998e0cdaf66de3db93a82d0eb2e9334fea08f", "url": "https://github.com/spinnaker/kork/commit/8e1998e0cdaf66de3db93a82d0eb2e9334fea08f", "message": "Merge branch 'master' into di", "committedDate": "2020-02-13T20:54:22Z", "type": "commit"}]}