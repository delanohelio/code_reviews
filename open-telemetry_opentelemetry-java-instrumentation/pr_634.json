{"pr_number": 634, "pr_title": "Server spans", "pr_author": "iNikem", "pr_createdAt": "2020-07-05T14:47:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634", "timeline": [{"oid": "ea6a486f3feb428c0d3d1a2f267dbcae16823e56", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea6a486f3feb428c0d3d1a2f267dbcae16823e56", "message": "Milestone 1", "committedDate": "2020-07-05T12:43:08Z", "type": "commit"}, {"oid": "03f6e51915faf23d171fee04ae02a7e5028c415b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/03f6e51915faf23d171fee04ae02a7e5028c415b", "message": "Netty 4.1 done", "committedDate": "2020-07-05T12:43:30Z", "type": "commit"}, {"oid": "dc701d53dc8641760f5730c9e32f0980aead64c5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc701d53dc8641760f5730c9e32f0980aead64c5", "message": "Netty 4.0 done", "committedDate": "2020-07-05T12:43:30Z", "type": "commit"}, {"oid": "b03b5ee5efbf2314ababd0c246cbd195c8b613df", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b03b5ee5efbf2314ababd0c246cbd195c8b613df", "message": "Netty 3.8 done", "committedDate": "2020-07-05T12:43:30Z", "type": "commit"}, {"oid": "0fc92ad77c46794b5fbe7cfc48cf40c5d888cb91", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0fc92ad77c46794b5fbe7cfc48cf40c5d888cb91", "message": "All tests pass", "committedDate": "2020-07-05T12:44:07Z", "type": "commit"}, {"oid": "2a5b40dc29ccec974bff316ed522be9d6c726d7b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a5b40dc29ccec974bff316ed522be9d6c726d7b", "message": "Test fix", "committedDate": "2020-07-05T12:44:07Z", "type": "commit"}, {"oid": "e6db0db86c2b32a29f4e37b0bb21f7bb87055198", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e6db0db86c2b32a29f4e37b0bb21f7bb87055198", "message": "Last proper server tracers done", "committedDate": "2020-07-05T14:42:45Z", "type": "commit"}, {"oid": "2bf7819035bd4f62f3c891fce1a6a551337b7740", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2bf7819035bd4f62f3c891fce1a6a551337b7740", "message": "Format fix", "committedDate": "2020-07-05T15:04:03Z", "type": "commit"}, {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39d7338cca36cd7a6f01e655b140a6517add32ea", "message": "Tests fixed", "committedDate": "2020-07-05T18:29:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4Mjc1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r449982759", "body": "Do we need to check whether there is a current `CONTEXT_SERVER_SPAN_KEY` to prevent duplicate server spans here?", "bodyText": "Do we need to check whether there is a current CONTEXT_SERVER_SPAN_KEY to prevent duplicate server spans here?", "bodyHTML": "<p dir=\"auto\">Do we need to check whether there is a current <code>CONTEXT_SERVER_SPAN_KEY</code> to prevent duplicate server spans here?</p>", "author": "anuraaga", "createdAt": "2020-07-06T04:53:42Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -56,25 +59,31 @@ public HttpServerTracer() {\n \n   protected abstract String getVersion();\n \n-  public Span startSpan(REQUEST request, Method origin, String originType) {\n+  public Span startSpan(REQUEST request, CONNECTION connection, Method origin, String originType) {\n+    String spanName = spanNameForMethod(origin);\n+    return startSpan(request, connection, spanName, originType);\n+  }\n+\n+  public Span startSpan(\n+      REQUEST request, CONNECTION connection, String spanName, String originType) {\n     final Span.Builder builder =", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExNjYyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450116622", "bodyText": "It was @trask wish to never return null from startSpan methods. And to let every instrumentation to check the existence of the server span themselves. Unfortunately :) I saw his point, so couldn't object too much.", "author": "iNikem", "createdAt": "2020-07-06T10:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4Mjc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5OTkzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450499936", "body": "```suggestion\r\n      attributeKey(HttpServerTracingHandler.class.getName() + \".context\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".span\");\n          \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".context\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      attributeKey(<span class=\"pl-smi\">HttpServerTracingHandler</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"x x-first x-last\">span</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      attributeKey(<span class=\"pl-smi\">HttpServerTracingHandler</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"x x-first x-last\">context</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-06T21:55:10Z", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_0/AttributeKeys.java", "diffHunk": "@@ -39,7 +40,7 @@\n   public static final AttributeKey<Span> PARENT_CONNECT_SPAN_ATTRIBUTE_KEY =\n       attributeKey(\"io.opentelemetry.auto.instrumentation.netty.v4_0.parent.connect.span\");\n \n-  public static final AttributeKey<Span> SERVER_ATTRIBUTE_KEY =\n+  public static final AttributeKey<Context> SERVER_ATTRIBUTE_KEY =\n       attributeKey(HttpServerTracingHandler.class.getName() + \".span\");", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMDQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450530469", "body": "there's several of call sites that pass `500`, maybe an overload that defaults to `500`?", "bodyText": "there's several of call sites that pass 500, maybe an overload that defaults to 500?", "bodyHTML": "<p dir=\"auto\">there's several of call sites that pass <code>500</code>, maybe an overload that defaults to <code>500</code>?</p>", "author": "trask", "createdAt": "2020-07-06T23:29:38Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerInstrumentation.java", "diffHunk": "@@ -149,16 +110,13 @@ public SyncWrapper(final Function1<HttpRequest, HttpResponse> userHandler) {\n \n     @Override\n     public HttpResponse apply(final HttpRequest request) {\n-      final SpanWithScope spanWithScope = WrapperHelper.createSpan(request);\n-      final Span span = spanWithScope.getSpan();\n-      try {\n+      Span span = TRACER.startSpan(request, request, \"akka.request\", null);\n+      try (Scope ignored = TRACER.startScope(span, request)) {\n         final HttpResponse response = userHandler.apply(request);\n-        spanWithScope.closeScope();\n-        WrapperHelper.finishSpan(span, response);\n+        TRACER.end(span, response.status().intValue());\n         return response;\n       } catch (final Throwable t) {\n-        spanWithScope.closeScope();\n-        WrapperHelper.finishSpan(span, t);\n+        TRACER.endExceptionally(span, t, 500);", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTUzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450541533", "body": "```suggestion\r\n   * Returns context stored to the given request-response-loop storage by {@link #attachServerSpanContext(Context,\r\n   * STORAGE)}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns context stored to the given storage by {@link #attachServerSpanContext(Context,\n          \n          \n            \n               * STORAGE)}.\n          \n          \n            \n               * Returns context stored to the given request-response-loop storage by {@link #attachServerSpanContext(Context,\n          \n          \n            \n               * STORAGE)}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> context stored to the given storage by {<span class=\"pl-k\">@link</span> #attachServerSpanContext(<span class=\"pl-smi\">Context</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-c1\">STORAGE</span>)}<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> context stored to the given <span class=\"x x-first\">request</span><span class=\"pl-k x\">-</span><span class=\"x\">response</span><span class=\"pl-k x\">-</span><span class=\"x x-last\">loop </span>storage by {<span class=\"pl-k\">@link</span> #attachServerSpanContext(<span class=\"pl-smi\">Context</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-c1\">STORAGE</span>)}<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:08:50Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */\n+  protected abstract void attachServerSpanContext(Context context, STORAGE storage);\n \n   /**\n-   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   * Returns context stored to the given storage by {@link #attachServerSpanContext(Context,\n+   * STORAGE)}.", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MjM2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542361", "body": "to self doc that it doesn't use storage\r\n```suggestion\r\npublic class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, Void> {\r\n```", "bodyText": "to self doc that it doesn't use storage\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n          \n          \n            \n            public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, Void> {", "bodyHTML": "<p dir=\"auto\">to self doc that it doesn't use storage</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">AkkaHttpServerTracer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">HttpServerTracer&lt;<span class=\"pl-smi\">HttpRequest</span>, <span class=\"pl-smi\">HttpRequest</span>, <span class=\"pl-smi x x-first x-last\">HttpRequest</span>&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">AkkaHttpServerTracer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">HttpServerTracer&lt;<span class=\"pl-smi\">HttpRequest</span>, <span class=\"pl-smi\">HttpRequest</span>, <span class=\"pl-smi x x-first x-last\">Void</span>&gt;</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:11:52Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Mjc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542748", "body": "```suggestion\r\n  protected void attachServerSpanContext(Context context, Void storage) {}\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}\n          \n          \n            \n              protected void attachServerSpanContext(Context context, Void storage) {}", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">protected</span> <span class=\"pl-k\">void</span> attachServerSpanContext(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-smi x x-first\">HttpRequest</span><span class=\"x x-last\"> httpRequest</span>) {}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">protected</span> <span class=\"pl-k\">void</span> attachServerSpanContext(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-smi x x-first\">Void</span><span class=\"x x-last\"> storage</span>) {}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:13:21Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n+  public static final AkkaHttpServerTracer TRACER = new AkkaHttpServerTracer();\n \n   @Override\n   protected String method(final HttpRequest httpRequest) {\n     return httpRequest.method().value();\n   }\n \n+  @Override\n+  protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Mjc5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542797", "body": "```suggestion\r\n  public Context getServerSpanContext(Void storage) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Context getServerSpanContext(HttpRequest httpRequest) {\n          \n          \n            \n              public Context getServerSpanContext(Void storage) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Context</span> getServerSpanContext(<span class=\"pl-smi x x-first\">HttpRequest</span><span class=\"x x-last\"> httpRequest</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Context</span> getServerSpanContext(<span class=\"pl-smi x x-first\">Void</span><span class=\"x x-last\"> storage</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:13:31Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n+  public static final AkkaHttpServerTracer TRACER = new AkkaHttpServerTracer();\n \n   @Override\n   protected String method(final HttpRequest httpRequest) {\n     return httpRequest.method().value();\n   }\n \n+  @Override\n+  protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}\n+\n+  @Override\n+  public Context getServerSpanContext(HttpRequest httpRequest) {", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0NjAyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450546022", "body": "can merge inner try/catch into the outer try-with-resources (and i think same in v4_0 and v4_1 copies)", "bodyText": "can merge inner try/catch into the outer try-with-resources (and i think same in v4_0 and v4_1 copies)", "bodyHTML": "<p dir=\"auto\">can merge inner try/catch into the outer try-with-resources (and i think same in v4_0 and v4_1 copies)</p>", "author": "trask", "createdAt": "2020-07-07T00:25:43Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/HttpServerRequestTracingHandler.java", "diffHunk": "@@ -48,43 +45,25 @@ public void messageReceived(final ChannelHandlerContext ctx, final MessageEvent\n         contextStore.putIfAbsent(ctx.getChannel(), ChannelTraceContext.Factory.INSTANCE);\n \n     if (!(msg.getMessage() instanceof HttpRequest)) {\n-      final Span span = channelTraceContext.getServerSpan();\n-      if (span == null) {\n-        ctx.sendUpstream(msg); // superclass does not throw\n+      Context serverSpanContext = TRACER.getServerSpanContext(channelTraceContext);\n+      if (serverSpanContext == null) {\n+        ctx.sendUpstream(msg);\n       } else {\n-        try (final Scope scope = TRACER.withSpan(span)) {\n-          ctx.sendUpstream(msg); // superclass does not throw\n+        try (final Scope ignored = ContextUtils.withScopedContext(serverSpanContext)) {\n+          ctx.sendUpstream(msg);\n         }\n       }\n       return;\n     }\n \n     final HttpRequest request = (HttpRequest) msg.getMessage();\n \n-    final Span.Builder spanBuilder =\n-        TRACER.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(SERVER);\n-    final SpanContext extractedContext = extract(request.headers(), GETTER);\n-    if (extractedContext.isValid()) {\n-      spanBuilder.setParent(extractedContext);\n-    } else {\n-      // explicitly setting \"no parent\" in case a span was propagated to this thread\n-      // by the java-concurrent instrumentation when the thread was started\n-      spanBuilder.setNoParent();\n-    }\n-    final Span span = spanBuilder.startSpan();\n-    try (final Scope scope = TRACER.withSpan(span)) {\n-      DECORATE.afterStart(span);\n-      DECORATE.onConnection(span, ctx.getChannel());\n-      DECORATE.onRequest(span, request);\n-\n-      channelTraceContext.setServerSpan(span);\n-\n+    Span span = TRACER.startSpan(request, ctx.getChannel(), \"netty.request\", null);\n+    try (final Scope ignored = TRACER.startScope(span, channelTraceContext)) {", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0NzA3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450547073", "body": "can be single-level try, e.g. (and same in v4_0 and v4_1 copies)\r\n```\r\n    Span span = TracingContextUtils.getSpan(context);\r\n    try (final Scope ignored = ContextUtils.withScopedContext(context)) {\r\n      ctx.write(msg, prm);\r\n    } catch (final Throwable throwable) {\r\n      TRACER.endExceptionally(span, throwable, 500);\r\n      throw throwable;\r\n    }\r\n    TRACER.end(span, ((HttpResponse) msg).status().code());\r\n```", "bodyText": "can be single-level try, e.g. (and same in v4_0 and v4_1 copies)\n    Span span = TracingContextUtils.getSpan(context);\n    try (final Scope ignored = ContextUtils.withScopedContext(context)) {\n      ctx.write(msg, prm);\n    } catch (final Throwable throwable) {\n      TRACER.endExceptionally(span, throwable, 500);\n      throw throwable;\n    }\n    TRACER.end(span, ((HttpResponse) msg).status().code());", "bodyHTML": "<p dir=\"auto\">can be single-level try, e.g. (and same in v4_0 and v4_1 copies)</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    Span span = TracingContextUtils.getSpan(context);\n    try (final Scope ignored = ContextUtils.withScopedContext(context)) {\n      ctx.write(msg, prm);\n    } catch (final Throwable throwable) {\n      TRACER.endExceptionally(span, throwable, 500);\n      throw throwable;\n    }\n    TRACER.end(span, ((HttpResponse) msg).status().code());\"><pre><code>    Span span = TracingContextUtils.getSpan(context);\n    try (final Scope ignored = ContextUtils.withScopedContext(context)) {\n      ctx.write(msg, prm);\n    } catch (final Throwable throwable) {\n      TRACER.endExceptionally(span, throwable, 500);\n      throw throwable;\n    }\n    TRACER.end(span, ((HttpResponse) msg).status().code());\n</code></pre></div>", "author": "trask", "createdAt": "2020-07-07T00:29:33Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/HttpServerResponseTracingHandler.java", "diffHunk": "@@ -44,26 +45,21 @@ public void writeRequested(final ChannelHandlerContext ctx, final MessageEvent m\n     final ChannelTraceContext channelTraceContext =\n         contextStore.putIfAbsent(ctx.getChannel(), ChannelTraceContext.Factory.INSTANCE);\n \n-    final Span span = channelTraceContext.getServerSpan();\n-    if (span == null || !(msg.getMessage() instanceof HttpResponse)) {\n+    final Context context = TRACER.getServerSpanContext(channelTraceContext);\n+    if (context == null || !(msg.getMessage() instanceof HttpResponse)) {\n       ctx.sendDownstream(msg);\n       return;\n     }\n \n-    try (final Scope scope = TRACER.withSpan(span)) {\n-      final HttpResponse response = (HttpResponse) msg.getMessage();\n-\n+    try (final Scope ignored = ContextUtils.withScopedContext(context)) {", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Nzg0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450547846", "body": "```suggestion\r\n      attributeKey(HttpServerTracingHandler.class.getName() + \".context\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".span\");\n          \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".context\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      attributeKey(<span class=\"pl-smi\">HttpServerTracingHandler</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"x x-first x-last\">span</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      attributeKey(<span class=\"pl-smi\">HttpServerTracingHandler</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"x x-first x-last\">context</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:32:35Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/AttributeKeys.java", "diffHunk": "@@ -44,10 +45,10 @@\n    * io.opentelemetry.auto.instrumentation.ratpack.server.TracingHandler, so if this changes, that\n    * must also change.\n    */\n-  // TODO understand and change to context\n-  public static final AttributeKey<Span> SERVER_ATTRIBUTE_KEY =\n+  public static final AttributeKey<Context> SERVER_ATTRIBUTE_KEY =\n       attributeKey(HttpServerTracingHandler.class.getName() + \".span\");", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450548852", "body": "i think all these server helpers can go away", "bodyText": "i think all these server helpers can go away", "bodyHTML": "<p dir=\"auto\">i think all these server helpers can go away</p>", "author": "trask", "createdAt": "2020-07-07T00:36:59Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -69,7 +69,7 @@ public ChannelFutureListenerInstrumentation() {\n       packageName + \".client.HttpClientResponseTracingHandler\",\n       packageName + \".client.HttpClientTracingHandler\",\n       // server helpers\n-      packageName + \".server.NettyHttpServerDecorator\",\n+      packageName + \".server.NettyHttpServerTracer\",", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMTgxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450621811", "bodyText": "Why? From class loading perspective they don't differ from old decorator, do they?", "author": "iNikem", "createdAt": "2020-07-07T05:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMzk5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450623993", "bodyText": "A, I see what you mean... Let me try", "author": "iNikem", "createdAt": "2020-07-07T05:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyOTEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450629106", "bodyText": "Nope, they cannot. ChannelFutureListenerInstrumentation uses AttributeKeys, which depends on HttpServerTracingHandler", "author": "iNikem", "createdAt": "2020-07-07T06:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0OTAzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450549038", "body": "i think this is a good catch, it seems to me this instrumentation only applies to netty client, should we move it to the client subpackage?", "bodyText": "i think this is a good catch, it seems to me this instrumentation only applies to netty client, should we move it to the client subpackage?", "bodyHTML": "<p dir=\"auto\">i think this is a good catch, it seems to me this instrumentation only applies to netty client, should we move it to the client subpackage?</p>", "author": "trask", "createdAt": "2020-07-07T00:37:44Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n import com.google.auto.service.AutoService;\n import io.netty.channel.ChannelFuture;\n-import io.opentelemetry.auto.instrumentation.netty.v4_1.server.NettyHttpServerDecorator;\n+import io.opentelemetry.auto.instrumentation.netty.v4_1.client.NettyHttpClientDecorator;", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MDM2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450550361", "body": "trying to differentiate more between the different storages\r\n```suggestion\r\n  /** Stores given context in the request-response-loop storage in implementation specific way. */```", "bodyText": "trying to differentiate more between the different storages\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Stores given context in the given storage in implementation specific way. */\n          \n          \n            \n              /** Stores given context in the request-response-loop storage in implementation specific way. */```", "bodyHTML": "<p dir=\"auto\">trying to differentiate more between the different storages</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Stores given context in the <span class=\"x x-first x-last\">given</span> storage in implementation specific way. <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Stores given context in the <span class=\"x x-first x-last\">request-response-loop</span> storage in implementation specific way. <span class=\"pl-c\">*/</span></span><span class=\"x x-first x-last\">```</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:43:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MTE0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450551143", "body": "i found \"server span context\" a bit confusing. i got used to it by the end of reviewing the PR, but maybe just \"server context\"?\r\n\r\nand this method, being defined in `HttpServerTracer` could be just\r\n\r\n```suggestion\r\n  protected abstract void attachContext(Context context, STORAGE storage);\r\n```", "bodyText": "i found \"server span context\" a bit confusing. i got used to it by the end of reviewing the PR, but maybe just \"server context\"?\nand this method, being defined in HttpServerTracer could be just\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract void attachServerSpanContext(Context context, STORAGE storage);\n          \n          \n            \n              protected abstract void attachContext(Context context, STORAGE storage);", "bodyHTML": "<p dir=\"auto\">i found \"server span context\" a bit confusing. i got used to it by the end of reviewing the PR, but maybe just \"server context\"?</p>\n<p dir=\"auto\">and this method, being defined in <code>HttpServerTracer</code> could be just</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">attachServerSpanContext</span>(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-c1\">STORAGE</span> storage);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">attachContext</span>(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-c1\">STORAGE</span> storage);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-07T00:46:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */\n+  protected abstract void attachServerSpanContext(Context context, STORAGE storage);", "originalCommit": "39d7338cca36cd7a6f01e655b140a6517add32ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMjc4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450622780", "bodyText": "I can rename attach method because it is protected, but getServerSpanContext is public, meant to be used by instrumentations. And I think there the longer, more explicit name, is better.", "author": "iNikem", "createdAt": "2020-07-07T05:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyODgzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450628835", "bodyText": "what do u think of  attachServerContext() and getServerContext()?", "author": "trask", "createdAt": "2020-07-07T06:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MTE0Mw=="}], "type": "inlineReview"}, {"oid": "bb260334037ad60fde5378ca2ce0dc32c4aee9dd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb260334037ad60fde5378ca2ce0dc32c4aee9dd", "message": "Polish", "committedDate": "2020-07-07T07:07:49Z", "type": "commit"}, {"oid": "beb1ba89228cf5514e9f8d017c9cd7e6b6781515", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/beb1ba89228cf5514e9f8d017c9cd7e6b6781515", "message": "Polish", "committedDate": "2020-07-07T08:33:37Z", "type": "commit"}]}