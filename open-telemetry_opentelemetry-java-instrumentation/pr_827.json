{"pr_number": 827, "pr_title": "feat(tags): http", "pr_author": "FrankSpitulski", "pr_createdAt": "2020-07-28T23:14:33Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTM0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461949349", "body": "do you think we need to support this header?", "bodyText": "do you think we need to support this header?", "bodyHTML": "<p dir=\"auto\">do you think we need to support this header?</p>", "author": "trask", "createdAt": "2020-07-28T23:25:03Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded", "originalCommit": "952c19e5130f7075f2e747c5367da719107dcbb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NDIxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461974210", "bodyText": "yeah, mozilla says it's the real standard while x-forwarded-for is the defacto standard. best to get both imo. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded", "author": "FrankSpitulski", "createdAt": "2020-07-29T00:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461950076", "body": "should be slightly faster to split by `,` and then trim result", "bodyText": "should be slightly faster to split by , and then trim result", "bodyHTML": "<p dir=\"auto\">should be slightly faster to split by <code>,</code> and then trim result</p>", "author": "trask", "createdAt": "2020-07-28T23:27:07Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : forwarded.split(\";|(, *)\")) {\n+        String[] split = forwardedValues.split(\"=\", 2);\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        if (\"for\".equalsIgnoreCase(split[0]) && !split[1].isEmpty()) {\n+          return split[1];\n+        }\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      String[] split = forwarded.split(\", *\", 2); // only need the first", "originalCommit": "952c19e5130f7075f2e747c5367da719107dcbb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4ODM1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461988359", "bodyText": "I got rid of the regex in the x-forwarded-for case", "author": "FrankSpitulski", "createdAt": "2020-07-29T01:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461950865", "body": "ya, fix should be merged shortly in #824 \ud83d\udc4d", "bodyText": "ya, fix should be merged shortly in #824 \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\">ya, fix should be merged shortly in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"667367768\" data-permission-text=\"Title is private\" data-url=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/824\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/open-telemetry/opentelemetry-java-instrumentation/pull/824/hovercard\" href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/824\">#824</a> <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "trask", "createdAt": "2020-07-28T23:29:16Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DelegatingSpan.java", "diffHunk": "@@ -91,6 +91,11 @@ public void setStatus(final Status status) {\n     delegate.setStatus(status);\n   }\n \n+  @Override\n+  public void recordException(Throwable throwable) {\n+    delegate.recordException(throwable);\n+  }\n+", "originalCommit": "952c19e5130f7075f2e747c5367da719107dcbb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4ODQxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461988410", "bodyText": "rebased", "author": "FrankSpitulski", "createdAt": "2020-07-29T01:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MTQ4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461951488", "body": "does this work?\r\n```suggestion\r\n    return request.getProtocolVersion().toString();\r\n```", "bodyText": "does this work?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null; // TODO flavor is on the request, not the connection for this tracer\n          \n          \n            \n                return request.getProtocolVersion().toString();", "bodyHTML": "<p dir=\"auto\">does this work?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-c1 x x-first\">null</span><span class=\"x\">; </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO flavor is on the </span>request<span class=\"x x-first x-last\">, not the connection for this tracer</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> request<span class=\"pl-k x x-first\">.</span><span class=\"x\">getProtocolVersion()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString();</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-28T23:31:08Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/NettyHttpServerTracer.java", "diffHunk": "@@ -67,6 +72,11 @@ protected String peerHostIP(final Channel channel) {\n     return null;\n   }\n \n+  @Override\n+  protected String flavor(Channel channel, HttpRequest request) {\n+    return null; // TODO flavor is on the request, not the connection for this tracer", "originalCommit": "952c19e5130f7075f2e747c5367da719107dcbb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NDU2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461974561", "bodyText": "yep, I just missed this one when I added the request param.", "author": "FrankSpitulski", "createdAt": "2020-07-29T00:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MTQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDAxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461954010", "body": "`split(regex)` is really slow, if we need a regex we should use `Pattern.compile` at least. But it'd be best if we can avoid split too due to the array allocations, do you think we can loop through to find the indexes instead of splitting?\r\n\r\n@trask By the way, is it ok to use Guava here? `CharMatcher` can help with such searches.", "bodyText": "split(regex) is really slow, if we need a regex we should use Pattern.compile at least. But it'd be best if we can avoid split too due to the array allocations, do you think we can loop through to find the indexes instead of splitting?\n@trask By the way, is it ok to use Guava here? CharMatcher can help with such searches.", "bodyHTML": "<p dir=\"auto\"><code>split(regex)</code> is really slow, if we need a regex we should use <code>Pattern.compile</code> at least. But it'd be best if we can avoid split too due to the array allocations, do you think we can loop through to find the indexes instead of splitting?</p>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/trask/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/trask\">@trask</a> By the way, is it ok to use Guava here? <code>CharMatcher</code> can help with such searches.</p>", "author": "anuraaga", "createdAt": "2020-07-28T23:38:50Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : forwarded.split(\";|(, *)\")) {", "originalCommit": "952c19e5130f7075f2e747c5367da719107dcbb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461958524", "bodyText": "is it ok to use Guava here?\n\nCurrently we don't, maybe better not to add this [EDIT: all of Guava] to our instrumentation api contract. We could expose something in our instrumentation api that wraps specific guava functionality if we need. I'd probably lean towards doing the index looping here for now (assuming we need to support the \"Forwarded\" header).", "author": "trask", "createdAt": "2020-07-28T23:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MTczMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461961731", "bodyText": "Ah forgot this is the instrumentation API, also used in library instrumentation. Agree not to add dependencies.", "author": "anuraaga", "createdAt": "2020-07-29T00:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NDgzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461974837", "bodyText": "I'll change it to pattern.compile and incorporate the trim optimisation", "author": "FrankSpitulski", "createdAt": "2020-07-29T00:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDAxMA=="}], "type": "inlineReview"}, {"oid": "44e5261fd119c564cee426c09c87e377b3f34c4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44e5261fd119c564cee426c09c87e377b3f34c4e", "message": "feat(tags): http\n\nflavour, user agent, client ip", "committedDate": "2020-07-29T01:39:58Z", "type": "forcePushed"}, {"oid": "f4a7fc944c30333b0b9e35ff3be8a496bba0cd1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f4a7fc944c30333b0b9e35ff3be8a496bba0cd1e", "message": "feat(tags): http\n\nflavour, user agent, client ip", "committedDate": "2020-07-29T01:40:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMzUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462013531", "body": "did we need trim here?\r\n```suggestion\r\n        forwarded = forwarded.substring(0, endIndex).trim();\r\n```", "bodyText": "did we need trim here?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    forwarded = forwarded.substring(0, endIndex);\n          \n          \n            \n                    forwarded = forwarded.substring(0, endIndex).trim();", "bodyHTML": "<p dir=\"auto\">did we need trim here?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"228\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        forwarded <span class=\"pl-k\">=</span> forwarded<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, endIndex);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"228\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        forwarded <span class=\"pl-k\">=</span> forwarded<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, endIndex)<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">trim()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-07-29T03:17:45Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +205,48 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : FORWARDED_SPLIT_PATTERN.split(forwarded)) {\n+        forwardedValues = forwardedValues.trim();\n+        String[] split = EQUALS_PATTERN.split(forwardedValues, 2);\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        if (\"for\".equalsIgnoreCase(split[0]) && !split[1].isEmpty()) {\n+          return split[1];\n+        }\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);", "originalCommit": "2ee612c5aa6d6225c35a224a66e30a152c98739c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMzY1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462023656", "bodyText": "no, there aren't going to be any spaces before the first comma and we only need the first value", "author": "FrankSpitulski", "createdAt": "2020-07-29T03:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMzUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462016099", "body": "can you convert `EQUALS_PATTERN` to indexOf/substring to avoid that regex? I don't think that would add code complexity.\r\n\r\nreplacing `FORWARDED_SPLIT_PATTERN` would definitely add code complexity, so i don't mind keeping", "bodyText": "can you convert EQUALS_PATTERN to indexOf/substring to avoid that regex? I don't think that would add code complexity.\nreplacing FORWARDED_SPLIT_PATTERN would definitely add code complexity, so i don't mind keeping", "bodyHTML": "<p dir=\"auto\">can you convert <code>EQUALS_PATTERN</code> to indexOf/substring to avoid that regex? I don't think that would add code complexity.</p>\n<p dir=\"auto\">replacing <code>FORWARDED_SPLIT_PATTERN</code> would definitely add code complexity, so i don't mind keeping</p>", "author": "trask", "createdAt": "2020-07-29T03:27:43Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +205,48 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : FORWARDED_SPLIT_PATTERN.split(forwarded)) {\n+        forwardedValues = forwardedValues.trim();\n+        String[] split = EQUALS_PATTERN.split(forwardedValues, 2);", "originalCommit": "2ee612c5aa6d6225c35a224a66e30a152c98739c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyNTQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462025490", "bodyText": "Out of curiosity, what do you think about this? I noticed the lines of code are very close to what we have right now even though we define a helper method.\nint forIndex = forwarded.indexOf(\"for=\");\nint endIndex = findForwardedEnd(forwarded, forIndex + 4);\nforwarded.substring(forIndex + 4, endIndex);\n\nint find forwardedEnd(String s, int start) {\n  for (int i = start; i < s.length(); i++) {\n    char c = s.charAt(i);\n    if (c == ',' || c == ';') {\n      return i;\n    }\n  }\n  return s.length()", "author": "anuraaga", "createdAt": "2020-07-29T04:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzA2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462047062", "bodyText": "@anuraaga this would work for regular cases but would not catch a malformed header such as \"for=, for=1.1.1.1\" That's probably okay though. I will use your implementation.", "author": "FrankSpitulski", "createdAt": "2020-07-29T05:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjA5OQ=="}], "type": "inlineReview"}, {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3eddbad4b7a4e00fe62587b74a1f5e3700119617", "message": "feat(tags): http\n\nflavour, user agent, client ip", "committedDate": "2020-07-29T17:55:43Z", "type": "commit"}, {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3eddbad4b7a4e00fe62587b74a1f5e3700119617", "message": "feat(tags): http\n\nflavour, user agent, client ip", "committedDate": "2020-07-29T17:55:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MTg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462591866", "body": "Can you add unit test for this method (to mitigate against the extra complexity we asked for :smile:)?", "bodyText": "Can you add unit test for this method (to mitigate against the extra complexity we asked for \ud83d\ude04)?", "bodyHTML": "<p dir=\"auto\">Can you add unit test for this method (to mitigate against the extra complexity we asked for <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji>)?</p>", "author": "trask", "createdAt": "2020-07-29T21:11:46Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,59 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      forwarded = extractForwardedFor(forwarded);\n+      if (forwarded != null) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);\n+      }\n+      if (!forwarded.isEmpty()) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // fallback to peer IP if there are no proxy headers\n+    return peerHostIP(connection);\n+  }\n+\n+  private static String extractForwardedFor(String forwarded) {", "originalCommit": "3eddbad4b7a4e00fe62587b74a1f5e3700119617", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Nzk4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462647985", "bodyText": "added tests, caught an edge case", "author": "FrankSpitulski", "createdAt": "2020-07-29T23:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MTg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NDY2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462664664", "bodyText": "getting another issue with latestDepTest though.\n./gradlew :instrumentation:grpc-1.5:latestDepTest fails\n./gradlew :instrumentation:grpc-1.5:test works", "author": "FrankSpitulski", "createdAt": "2020-07-30T00:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MTg2Ng=="}], "type": "inlineReview"}, {"oid": "413eefb590daa8320b6b5798c4590f89c04e9a4b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/413eefb590daa8320b6b5798c4590f89c04e9a4b", "message": "add tests", "committedDate": "2020-07-29T23:31:49Z", "type": "commit"}, {"oid": "f6ce87ff1410f21df72a561d814623bcc08a0c46", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6ce87ff1410f21df72a561d814623bcc08a0c46", "message": "add copyright", "committedDate": "2020-07-29T23:49:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462667339", "body": "Since the spec seems to use lowercase, and it's not a commonly used header anyways, I probably wouldn't be so permissive and just not do the `toLowerCase` but it's ok too. From what I can tell, we consider it unimportant enough to not have unit tests :P", "bodyText": "Since the spec seems to use lowercase, and it's not a commonly used header anyways, I probably wouldn't be so permissive and just not do the toLowerCase but it's ok too. From what I can tell, we consider it unimportant enough to not have unit tests :P", "bodyHTML": "<p dir=\"auto\">Since the spec seems to use lowercase, and it's not a commonly used header anyways, I probably wouldn't be so permissive and just not do the <code>toLowerCase</code> but it's ok too. From what I can tell, we consider it unimportant enough to not have unit tests :P</p>", "author": "anuraaga", "createdAt": "2020-07-30T00:38:40Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,63 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      forwarded = extractForwardedFor(forwarded);\n+      if (forwarded != null) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);\n+      }\n+      if (!forwarded.isEmpty()) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // fallback to peer IP if there are no proxy headers\n+    return peerHostIP(connection);\n+  }\n+\n+  // VisibleForTesting\n+  static String extractForwardedFor(String forwarded) {\n+    int start = forwarded.toLowerCase().indexOf(\"for=\");", "originalCommit": "f6ce87ff1410f21df72a561d814623bcc08a0c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MDQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462680461", "bodyText": "the mozilla spec says it can be any case, so I just stuck that in there. I've never seen it used in practice but it's apparently the standard.", "author": "FrankSpitulski", "createdAt": "2020-07-30T01:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MDc5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462680793", "bodyText": "there's an uppercase example in the RFC https://tools.ietf.org/html/rfc7239#section-4", "author": "FrankSpitulski", "createdAt": "2020-07-30T01:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MTM2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462681363", "bodyText": "Ah thanks I couldn't find it, in that case can we add one test case for it?", "author": "anuraaga", "createdAt": "2020-07-30T01:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MDU0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462690546", "bodyText": "sure, added", "author": "FrankSpitulski", "createdAt": "2020-07-30T02:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ=="}], "type": "inlineReview"}, {"oid": "610199f67ec5b2fb576aa308128ead9eef568d0c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/610199f67ec5b2fb576aa308128ead9eef568d0c", "message": "add caps test", "committedDate": "2020-07-30T02:02:40Z", "type": "commit"}, {"oid": "2b0d3ac8ebdc7281e65a82d8aa16c8b8e1a2abbe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2b0d3ac8ebdc7281e65a82d8aa16c8b8e1a2abbe", "message": "Merge remote-tracking branch 'upstream/master' into FrankSpitulski-http", "committedDate": "2020-07-30T06:27:21Z", "type": "commit"}]}