{"pr_number": 1208, "pr_title": "Logback MDC auto-instrumentation gets muzzled and does not work", "pr_author": "mateuszrzeszutek", "pr_createdAt": "2020-09-15T17:37:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0ODY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r488848680", "body": "I'll replace `\"traceId\"` and others either here or in https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200 - depending on which one gets merged first.", "bodyText": "I'll replace \"traceId\" and others either here or in #1200 - depending on which one gets merged first.", "bodyHTML": "<p dir=\"auto\">I'll replace <code>\"traceId\"</code> and others either here or in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"701125372\" data-permission-text=\"Title is private\" data-url=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/1200\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/open-telemetry/opentelemetry-java-instrumentation/pull/1200/hovercard\" href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200\">#1200</a> - depending on which one gets merged first.</p>", "author": "mateuszrzeszutek", "createdAt": "2020-09-15T17:38:02Z", "path": "instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.logback.v1_0_0;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class LoggingEventInstrumentation extends Instrumenter.Default {\n+  public LoggingEventInstrumentation() {\n+    super(\"logback\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet$ConcatenatedSetIterator\"\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"ch.qos.logback.classic.spi.ILoggingEvent\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"ch.qos.logback.classic.spi.ILoggingEvent\", Span.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"getMDCPropertyMap\").or(named(\"getMdc\")))\n+            .and(takesArguments(0)),\n+        LoggingEventInstrumentation.class.getName() + \"$GetMdcAdvice\");\n+  }\n+\n+  public static class GetMdcAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ILoggingEvent event,\n+        @Advice.Return(typing = Typing.DYNAMIC, readOnly = false) Map<String, String> contextData) {\n+      if (contextData != null && contextData.containsKey(\"traceId\")) {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDk5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489130997", "body": "I think this:\r\n```suggestion\r\n      if (currentSpan == null || !currentSpan.getContext().isValid()) {\r\n```", "bodyText": "I think this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (currentSpan != null && !currentSpan.getContext().isValid()) {\n          \n          \n            \n                  if (currentSpan == null || !currentSpan.getContext().isValid()) {", "bodyHTML": "<p dir=\"auto\">I think this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (currentSpan <span class=\"pl-k x x-first x-last\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k x x-first x-last\">&amp;&amp;</span> <span class=\"pl-k\">!</span>currentSpan<span class=\"pl-k\">.</span>getContext()<span class=\"pl-k\">.</span>isValid()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">if</span> (currentSpan <span class=\"pl-k x x-first x-last\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k x x-first x-last\">||</span> <span class=\"pl-k\">!</span>currentSpan<span class=\"pl-k\">.</span>getContext()<span class=\"pl-k\">.</span>isValid()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-09-16T02:55:12Z", "path": "instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.logback.v1_0_0;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class LoggingEventInstrumentation extends Instrumenter.Default {\n+  public LoggingEventInstrumentation() {\n+    super(\"logback\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet\",\n+      \"io.opentelemetry.instrumentation.logback.v1_0_0.UnionMap$ConcatenatedSet$ConcatenatedSetIterator\"\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"ch.qos.logback.classic.spi.ILoggingEvent\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"ch.qos.logback.classic.spi.ILoggingEvent\", Span.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"getMDCPropertyMap\").or(named(\"getMdc\")))\n+            .and(takesArguments(0)),\n+        LoggingEventInstrumentation.class.getName() + \"$GetMdcAdvice\");\n+  }\n+\n+  public static class GetMdcAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ILoggingEvent event,\n+        @Advice.Return(typing = Typing.DYNAMIC, readOnly = false) Map<String, String> contextData) {\n+      if (contextData != null && contextData.containsKey(\"traceId\")) {\n+        // Assume already instrumented event if traceId is present.\n+        return;\n+      }\n+\n+      Span currentSpan = InstrumentationContext.get(ILoggingEvent.class, Span.class).get(event);\n+      if (currentSpan != null && !currentSpan.getContext().isValid()) {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MTg3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489251878", "bodyText": "\ud83e\udd26  - that's correct, that was a stupid mistake on my side.", "author": "mateuszrzeszutek", "createdAt": "2020-09-16T08:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODQ5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489158491", "body": "Can you move this into a subpackage `internal`? We shouldn't add this to our public API", "bodyText": "Can you move this into a subpackage internal? We shouldn't add this to our public API", "bodyHTML": "<p dir=\"auto\">Can you move this into a subpackage <code>internal</code>? We shouldn't add this to our public API</p>", "author": "anuraaga", "createdAt": "2020-09-16T04:45:16Z", "path": "instrumentation/logback/logback-1.0.0/library/src/main/java/io/opentelemetry/instrumentation/logback/v1_0_0/UnionMap.java", "diffHunk": "@@ -29,14 +29,14 @@\n  * An immutable view over two maps, with keys resolving from the first map first, or otherwise the\n  * second if not present in the first.\n  */\n-final class UnionMap<K, V> extends AbstractMap<K, V> {\n+public final class UnionMap<K, V> extends AbstractMap<K, V> {", "originalCommit": "ae73a1b81b32b102d0d1e43e17fd3b45b0716255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDQ1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1208#discussion_r489254450", "bodyText": "Done, thanks!", "author": "mateuszrzeszutek", "createdAt": "2020-09-16T08:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODQ5MQ=="}], "type": "inlineReview"}, {"oid": "573b2eb56921c53191faa550af511f72db7ed48b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/573b2eb56921c53191faa550af511f72db7ed48b", "message": "Logback MDC auto-instrumentation gets muzzled and does not work", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "70f37c7a95cfed228f86e601700bc3a35c17f851", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/70f37c7a95cfed228f86e601700bc3a35c17f851", "message": "Update instrumentation/logback/logback-1.0.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/logback/v1_0_0/LoggingEventInstrumentation.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "3e560f62432a1c977d73f395d5ba306b48cc1446", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3e560f62432a1c977d73f395d5ba306b48cc1446", "message": "Logback MDC auto-instrumentation gets muzzled and does not work\n\nMoved UnionMap to internal package", "committedDate": "2020-09-16T08:23:00Z", "type": "commit"}, {"oid": "3e560f62432a1c977d73f395d5ba306b48cc1446", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3e560f62432a1c977d73f395d5ba306b48cc1446", "message": "Logback MDC auto-instrumentation gets muzzled and does not work\n\nMoved UnionMap to internal package", "committedDate": "2020-09-16T08:23:00Z", "type": "forcePushed"}]}