{"pr_number": 1207, "pr_title": "Review semantic convention for Http Server spans", "pr_author": "iNikem", "pr_createdAt": "2020-09-15T13:03:55Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207", "timeline": [{"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "message": "Review semantic convention for Http Server spans", "committedDate": "2020-09-15T13:35:38Z", "type": "commit"}, {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "message": "Review semantic convention for Http Server spans", "committedDate": "2020-09-15T13:35:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489133003", "body": "```suggestion\r\n  But in Java world there is no standard way to access \"The full request target as passed in a HTTP request line or equivalent\"\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"\n          \n          \n            \n              But in Java world there is no standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-smi\">But</span> in <span class=\"pl-smi\">Java</span> world there is <span class=\"x x-first x-last\">now</span> standard way to access <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The full request target as passed in a HTTP request line or equivalent<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-smi\">But</span> in <span class=\"pl-smi\">Java</span> world there is <span class=\"x x-first x-last\">no</span> standard way to access <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The full request target as passed in a HTTP request line or equivalent<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-09-16T03:02:49Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -169,27 +165,30 @@ protected void onConnection(Span span, CONNECTION connection) {\n     }\n   }\n \n-  // TODO use semantic attributes\n   protected void onRequest(Span span, REQUEST request) {\n     SemanticAttributes.HTTP_METHOD.set(span, method(request));\n-    String userAgent = requestHeader(request, USER_AGENT);\n-    if (userAgent != null) {\n-      SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n-    }\n+    SemanticAttributes.HTTP_USER_AGENT.set(span, requestHeader(request, USER_AGENT));\n+\n+    setUrl(span, request);\n \n-    try {\n-      URI url = url(request);\n-      HttpUrlUtils.setHttpUrl(span, url);\n-      if (Config.get().isHttpServerTagQueryString()) {\n-        span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n-        span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n-      }\n-    } catch (Exception e) {\n-      log.debug(\"Error tagging url\", e);\n-    }\n     // TODO set resource name from URL.\n   }\n \n+  /*\n+  https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n+\n+  HTTP semantic convention recommends setting http.scheme, http.host, http.target attributes\n+  instead of http.url because it \"is usually not readily available on the server side but would have\n+  to be assembled in a cumbersome and sometimes lossy process from other information\".\n+\n+  But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNDAzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489134036", "body": "I think `warn` is ok, but wouldn't be opposed to `debug` either", "bodyText": "I think warn is ok, but wouldn't be opposed to debug either", "bodyHTML": "<p dir=\"auto\">I think <code>warn</code> is ok, but wouldn't be opposed to <code>debug</code> either</p>", "author": "trask", "createdAt": "2020-09-16T03:07:04Z", "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -26,21 +26,30 @@\n import java.security.Principal;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class ServletHttpServerTracer<RESPONSE>\n     extends HttpServerTracer<HttpServletRequest, RESPONSE, HttpServletRequest, HttpServletRequest> {\n \n+  private static final Logger log = LoggerFactory.getLogger(ServletHttpServerTracer.class);\n+\n   @Override\n-  // TODO this violates convention\n-  protected URI url(HttpServletRequest httpServletRequest) throws URISyntaxException {\n-    return new URI(\n-        httpServletRequest.getScheme(),\n-        null,\n-        httpServletRequest.getServerName(),\n-        httpServletRequest.getServerPort(),\n-        httpServletRequest.getRequestURI(),\n-        httpServletRequest.getQueryString(),\n-        null);\n+  protected String url(HttpServletRequest httpServletRequest) {\n+    try {\n+      return new URI(\n+              httpServletRequest.getScheme(),\n+              null,\n+              httpServletRequest.getServerName(),\n+              httpServletRequest.getServerPort(),\n+              httpServletRequest.getRequestURI(),\n+              httpServletRequest.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.warn(\"Failed to construct request URI\", e);", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTQ4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135483", "body": "check startsWith \"http://\" or startsWith \"https://\" to avoid edge case", "bodyText": "check startsWith \"http://\" or startsWith \"https://\" to avoid edge case", "bodyHTML": "<p dir=\"auto\">check startsWith \"http://\" or startsWith \"https://\" to avoid edge case</p>", "author": "trask", "createdAt": "2020-09-16T03:12:43Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/server/NettyHttpServerTracer.java", "diffHunk": "@@ -60,10 +58,10 @@ public Context getServerContext(ChannelTraceContext channelTraceContext) {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135586", "body": "same comment", "bodyText": "same comment", "bodyHTML": "<p dir=\"auto\">same comment</p>", "author": "trask", "createdAt": "2020-09-16T03:13:07Z", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTY0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135644", "body": "same", "bodyText": "same", "bodyHTML": "<p dir=\"auto\">same</p>", "author": "trask", "createdAt": "2020-09-16T03:13:22Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.uri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.uri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.uri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dde4fd52ed8e45fc087d912c9494c163312cc62d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dde4fd52ed8e45fc087d912c9494c163312cc62d", "message": "Polish", "committedDate": "2020-09-16T05:52:25Z", "type": "commit"}]}