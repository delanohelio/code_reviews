{"pr_number": 1929, "pr_title": "Liberty server span handling", "pr_author": "laurit", "pr_createdAt": "2020-12-17T15:30:05Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929", "timeline": [{"oid": "4893a144f0233efe51195f705950e738b69a7417", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4893a144f0233efe51195f705950e738b69a7417", "message": "Liberty server span handling", "committedDate": "2020-12-17T15:26:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTAxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325012", "body": "```suggestion\r\n    return \"io.opentelemetry.javaagent.liberty-dispatcher\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.liberty-dispatcher\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.javaagent.liberty<span class=\"x x-first x-last\">.</span>dispatcher<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.javaagent.liberty<span class=\"x x-first x-last\">-</span>dispatcher<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-12-20T05:34:09Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTMwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325306", "body": "`Void` has been convention when storage not needed\r\n```suggestion\r\n        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Void> {\r\n```", "bodyText": "Void has been convention when storage not needed\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n          \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Void> {", "bodyHTML": "<p dir=\"auto\"><code>Void</code> has been convention when storage not needed</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">LibertyRequestWrapper</span>, <span class=\"pl-smi\">LibertyResponseWrapper</span>, <span class=\"pl-smi\">LibertyConnectionWrapper</span>, <span class=\"pl-smi x x-first x-last\">Object</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">LibertyRequestWrapper</span>, <span class=\"pl-smi\">LibertyResponseWrapper</span>, <span class=\"pl-smi\">LibertyConnectionWrapper</span>, <span class=\"pl-smi x x-first x-last\">Void</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-12-20T05:37:02Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTYzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325632", "body": "doesn't look like context can be null here\r\n```suggestion\r\n```", "bodyText": "doesn't look like context can be null here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  // an existing span was found\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">doesn't look like context can be null here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (context <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span> an existing span was found</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-12-20T05:42:04Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Argument(value = 0) StatusCodes statusCode,\n+      @Advice.Argument(value = 2) Exception failure,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      // an existing span was found\n+      return;\n+    }\n+", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326253", "body": "I'm not sure if `request.getRequestURI()` is a spec compliant span name due to high cardinality, spec recommends `HTTP {METHOD_NAME}` in this case", "bodyText": "I'm not sure if request.getRequestURI() is a spec compliant span name due to high cardinality, spec recommends HTTP {METHOD_NAME} in this case", "bodyHTML": "<p dir=\"auto\">I'm not sure if <code>request.getRequestURI()</code> is a spec compliant span name due to high cardinality, spec recommends <code>HTTP {METHOD_NAME}</code> in this case</p>", "author": "trask", "createdAt": "2020-12-20T05:49:42Z", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyHttpServerTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.Servlet3HttpServerTracer;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class LibertyHttpServerTracer extends Servlet3HttpServerTracer {\n+  private static final LibertyHttpServerTracer TRACER = new LibertyHttpServerTracer();\n+\n+  public static LibertyHttpServerTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  public Context startSpan(HttpServletRequest request) {\n+    // using request URI as span name as server isn't ready for calling request.getServletPath()\n+    // span name will be updated a bit later when calling request.getServletPath() works\n+    Context context = startSpan(request, request, request, request.getRequestURI());", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MTI5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546771294", "bodyText": "Changed it to HTTP {METHOD_NAME} as suggested", "author": "laurit", "createdAt": "2020-12-21T15:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326297", "body": "I'm not sure if this span name is spec compliant due to high cardinality of pathInfo, the spec recommends falling back to `HTTP {METHOD_NAME}` when route is not available", "bodyText": "I'm not sure if this span name is spec compliant due to high cardinality of pathInfo, the spec recommends falling back to HTTP {METHOD_NAME} when route is not available", "bodyHTML": "<p dir=\"auto\">I'm not sure if this span name is spec compliant due to high cardinality of pathInfo, the spec recommends falling back to <code>HTTP {METHOD_NAME}</code> when route is not available</p>", "author": "trask", "createdAt": "2020-12-20T05:50:32Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path\n+    if (pathInfo != null && spanName.isEmpty()) {\n+      spanName = pathInfo;", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTkzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546775932", "bodyText": "If request.getServletPath() is empty then set span name to HTTP {METHOD_NAME} as suggested.\nNote that request.getServletPath() isn't always low cardinality.\nIf servlet is mapped to / then getServletPath for request to /foo/bar/baz is /foo/bar/baz. Default servlet that serves static content is typically mapped to /\nIf servlet is mapped to *.html then getServletPath for request to /foo/bar/baz.html is /foo/bar/baz.html.", "author": "laurit", "createdAt": "2020-12-21T15:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg3NjE1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546876157", "bodyText": "this is a great point, I opened #1954 to track", "author": "trask", "createdAt": "2020-12-21T19:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjU5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546486594", "body": "`getCallDepthKey()` may be more descriptive", "bodyText": "getCallDepthKey() may be more descriptive", "bodyHTML": "<p dir=\"auto\"><code>getCallDepthKey()</code> may be more descriptive</p>", "author": "trask", "createdAt": "2020-12-21T03:02:56Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -62,4 +62,18 @@ public static void setServletUpdatedServerSpanName(Context ctx, boolean value) {\n       appServerBridge.servletUpdatedServerSpanName.set(value);\n     }\n   }\n+\n+  /**\n+   * Class used as key in CallDepthThreadLocalMap for counting servlet invocation depth in\n+   * Servlet3Advice and Servlet2Advice. We can not use helper classes like Servlet3Advice and\n+   * Servlet2Advice for determining call depth of server invocation because they can be injected\n+   * into multiple class loaders.\n+   *\n+   * @return class used as a key in CallDepthThreadLocalMap for counting servlet invocation depth\n+   */\n+  public static Class<?> getServletKey() {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzUwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546487501", "body": "in general we use verbose Java naming style \ud83d\ude04, probably `lrw` -> `requestWrapper` and `lcw` -> `connectionWrapper` would be more consistent here (and similar in a couple other places)", "bodyText": "in general we use verbose Java naming style \ud83d\ude04, probably lrw -> requestWrapper and lcw -> connectionWrapper would be more consistent here (and similar in a couple other places)", "bodyHTML": "<p dir=\"auto\">in general we use verbose Java naming style <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji>, probably <code>lrw</code> -&gt; <code>requestWrapper</code> and <code>lcw</code> -&gt; <code>connectionWrapper</code> would be more consistent here (and similar in a couple other places)</p>", "author": "trask", "createdAt": "2020-12-21T03:07:02Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538577", "body": "I think this comment is somewhat confusing. If there is no servlet, then that request will not reach this code, will it?", "bodyText": "I think this comment is somewhat confusing. If there is no servlet, then that request will not reach this code, will it?", "bodyHTML": "<p dir=\"auto\">I think this comment is somewhat confusing. If there is no servlet, then that request will not reach this code, will it?</p>", "author": "iNikem", "createdAt": "2020-12-21T06:56:40Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjY3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546626672", "bodyText": "It is called from LibertyUpdateSpanAdvice for all requests including the ones that don't have a servelt", "author": "laurit", "createdAt": "2020-12-21T10:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MDI1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546670256", "bodyText": "I don't understand. In what sense \"is called\"? LibertyUpdateSpanAdvice uses LibertyHttpServerTracer, not servlet tracer, doesn't it?", "author": "iNikem", "createdAt": "2020-12-21T12:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MTI4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546671289", "bodyText": "LibertyHttpServerTracer extends Servlet3HttpServerTracer", "author": "laurit", "createdAt": "2020-12-21T12:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMzA0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546703044", "bodyText": "It can. On liberty there is no default servlet for static content, but we still call getSpanName for requests that are for static files. Similarly default servlet can be removed/disable on at least tomcat, in that case it is possible to have a filter that sees the request but no servlet.", "author": "laurit", "createdAt": "2020-12-21T13:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODkwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538907", "body": "Is it possible for server span to be null here? In what case?", "bodyText": "Is it possible for server span to be null here? In what case?", "bodyHTML": "<p dir=\"auto\">Is it possible for server span to be null here? In what case?</p>", "author": "iNikem", "createdAt": "2020-12-21T06:57:55Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -141,8 +149,15 @@ private static String getSpanName(HttpServletRequest request) {\n   public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n     if (AppServerBridge.isPresent(attachedContext)\n         && !AppServerBridge.isServerSpanNameUpdatedFromServlet(attachedContext)) {\n-      getServerSpan(request).updateName(getSpanName(request));\n+      updateSpanName(request);\n       AppServerBridge.setServletUpdatedServerSpanName(attachedContext, true);\n     }\n   }\n+\n+  public void updateSpanName(HttpServletRequest request) {\n+    Span span = getServerSpan(request);\n+    if (span != null) {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMDYxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546700612", "bodyText": "It is possible when liberty request integration didn't start span because the method from where it is supposed to start it wasn't called, but the integration that is supposed to update span name is called. I'll change it so that it won't try to update span when it wasn't started.", "author": "laurit", "createdAt": "2020-12-21T13:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTY3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546539676", "body": "@trask should we have `classLoaderMatcher` here somewhere? Or `classLoaderOptimization`?", "bodyText": "@trask should we have classLoaderMatcher here somewhere? Or classLoaderOptimization?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/trask/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/trask\">@trask</a> should we have <code>classLoaderMatcher</code> here somewhere? Or <code>classLoaderOptimization</code>?</p>", "author": "iNikem", "createdAt": "2020-12-21T07:00:48Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyDispatcherInstrumentationModule extends InstrumentationModule {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MjAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546642030", "bodyText": "I believe it is not needed because this one matches based on exact class name. classLoaderOptimization usually uses hasClassesNamed which uses ClassLoader.getResource to verify that given class loader can see some type that the instrumentation depends on. For example when you want to instrument all classes that implement some interface you first check whether current class loader can see that interface, if it doesn't the assumption is that this class loader can't contain classes that would be needed to instrumented by this module. The idea behind this is that checking whether class implements some interface is currently expensive so we try to avoid it by doing a cheaper check before it, but ClassLoader.getResource isn't free either so if it isn't really needed i would skip it.", "author": "laurit", "createdAt": "2020-12-21T10:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540144", "body": "Why this is not implemented?", "bodyText": "Why this is not implemented?", "bodyHTML": "<p dir=\"auto\">Why this is not implemented?</p>", "author": "iNikem", "createdAt": "2020-12-21T07:02:27Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MzQ5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546643498", "bodyText": "Because it is not needed and I din't immediately see an easy way to implement it. This advice is only used when server didn't find matching application or got an internal error. Nothing that is called within this advice should require access to the span.", "author": "laurit", "createdAt": "2020-12-21T11:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2ODgxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546668814", "bodyText": "That deserves documentation in the code then", "author": "iNikem", "createdAt": "2020-12-21T12:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjMxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546776318", "bodyText": "comment added", "author": "laurit", "createdAt": "2020-12-21T15:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540272", "body": "I think this javadoc is not formatted as you intended :)", "bodyText": "I think this javadoc is not formatted as you intended :)", "bodyHTML": "<p dir=\"auto\">I think this javadoc is not formatted as you intended :)</p>", "author": "iNikem", "createdAt": "2020-12-21T07:02:59Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540983", "body": "Why do you need a wrapper for a single value?", "bodyText": "Why do you need a wrapper for a single value?", "bodyHTML": "<p dir=\"auto\">Why do you need a wrapper for a single value?</p>", "author": "iNikem", "createdAt": "2020-12-21T07:05:22Z", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyResponseWrapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+\n+public class LibertyResponseWrapper {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0NDI1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546644251", "bodyText": "To be consistent with request and connection that have wrappers. Additionally I only used liberty classes from the wrappers", "author": "laurit", "createdAt": "2020-12-21T11:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MzAxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546543015", "body": "Can you please add a little README to this module? Its instrumentations are not straightforward and depend on each other. It is quite hard to follow the instrumentation path from the code.", "bodyText": "Can you please add a little README to this module? Its instrumentations are not straightforward and depend on each other. It is quite hard to follow the instrumentation path from the code.", "bodyHTML": "<p dir=\"auto\">Can you please add a little README to this module? Its instrumentations are not straightforward and depend on each other. It is quite hard to follow the instrumentation path from the code.</p>", "author": "iNikem", "createdAt": "2020-12-21T07:12:19Z", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyInstrumentationModule extends InstrumentationModule {", "originalCommit": "4893a144f0233efe51195f705950e738b69a7417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjU0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546776542", "bodyText": "Added javadoc to LibertyInstrumentationModule", "author": "laurit", "createdAt": "2020-12-21T15:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MzAxNQ=="}], "type": "inlineReview"}, {"oid": "a14e8e17bd408eeda9b2fcad3f1b41e6ff7d4a2b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a14e8e17bd408eeda9b2fcad3f1b41e6ff7d4a2b", "message": "review fixes", "committedDate": "2020-12-21T12:12:03Z", "type": "commit"}, {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91e5f5c36e1846913cb0e84d4772f6676b8a4322", "message": "review fixes", "committedDate": "2020-12-21T15:30:39Z", "type": "commit"}, {"oid": "c51f09176e71e85c01847fef1eb82b8e252747f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c51f09176e71e85c01847fef1eb82b8e252747f5", "message": "add doc about using compile stubs", "committedDate": "2020-12-21T16:15:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1ODg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546858865", "body": "```suggestion\r\n * Instrumenting request handling in Liberty.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Instrumenting request handling in liberty.\n          \n          \n            \n             * Instrumenting request handling in Liberty.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Instrumenting</span> request handling in <span class=\"x x-first x-last\">liberty</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Instrumenting</span> request handling in <span class=\"pl-smi x x-first x-last\">Liberty</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "iNikem", "createdAt": "2020-12-21T18:21:41Z", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.", "originalCommit": "91e5f5c36e1846913cb0e84d4772f6676b8a4322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTMxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859314", "body": "Thanks! This is really helpful. Can you add links to corresponding advice classes as well?", "bodyText": "Thanks! This is really helpful. Can you add links to corresponding advice classes as well?", "bodyHTML": "<p dir=\"auto\">Thanks! This is really helpful. Can you add links to corresponding advice classes as well?</p>", "author": "iNikem", "createdAt": "2020-12-21T18:22:43Z", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.\n+ *\n+ * <ul>\n+ *   <li>On entry to WebApp.handleRequest remember request.\n+ *   <li>On call to WebApp.isForbidden (called from WebApp.handleRequest) start span based on\n+ *       remembered request. We don't start span immediately at the start or handleRequest because\n+ *       HttpServletRequest isn't usable yet.\n+ *   <li>On exit from WebAppDispatcherContext.setPathElements (called from WebApp.handleRequest)\n+ *       update span name. We don't do it before because before this method is called we can't use\n+ *       HttpServletRequest.getServletPath.\n+ *   <li>On exit from WebApp.handleRequest close the span.\n+ * </ul>\n+ */", "originalCommit": "91e5f5c36e1846913cb0e84d4772f6676b8a4322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg2ODc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546868745", "bodyText": "Done.", "author": "laurit", "createdAt": "2020-12-21T18:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTUyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859527", "body": "```suggestion\r\n   * @return true when span should be updated, false when span was already updated or span wasn't\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return true when span should be update, false when span was already updated or span wasn't\n          \n          \n            \n               * @return true when span should be updated, false when span was already updated or span wasn't", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-c1\">true</span> when span should be <span class=\"x x-first x-last\">update</span>, <span class=\"pl-c1\">false</span> when span was already updated or span wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-c1\">true</span> when span should be <span class=\"x x-first x-last\">updated</span>, <span class=\"pl-c1\">false</span> when span was already updated or span wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "iNikem", "createdAt": "2020-12-21T18:23:11Z", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java", "diffHunk": "@@ -57,9 +57,13 @@ public boolean startSpan() {\n   /**\n    * Test whether span should be updated.\n    *\n-   * @return true when span should be update, false when span was already updated\n+   * @return true when span should be update, false when span was already updated or span wasn't", "originalCommit": "91e5f5c36e1846913cb0e84d4772f6676b8a4322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2d61e4d851cb0333a6a4d14840b2200c1fffdc3f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2d61e4d851cb0333a6a4d14840b2200c1fffdc3f", "message": "Update instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>", "committedDate": "2020-12-21T18:38:21Z", "type": "commit"}, {"oid": "da965a63614ca86c8f620d981c2bdb4b3de32e1a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da965a63614ca86c8f620d981c2bdb4b3de32e1a", "message": "Update instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>", "committedDate": "2020-12-21T18:38:32Z", "type": "commit"}, {"oid": "1c299806d9c5482c7aeacf2151d2ffd9a96e4cf9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c299806d9c5482c7aeacf2151d2ffd9a96e4cf9", "message": "add links to advice classes", "committedDate": "2020-12-21T18:43:39Z", "type": "commit"}, {"oid": "9037fd3d481da02dec59ca88448294f41ec3b779", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9037fd3d481da02dec59ca88448294f41ec3b779", "message": "add commnet, remove unneeded dependency", "committedDate": "2020-12-21T22:51:18Z", "type": "commit"}, {"oid": "463f1573aac70843fd7d80ae53acb6e4699f489e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/463f1573aac70843fd7d80ae53acb6e4699f489e", "message": "Merge branch 'master' into liberty", "committedDate": "2020-12-22T12:29:07Z", "type": "commit"}]}