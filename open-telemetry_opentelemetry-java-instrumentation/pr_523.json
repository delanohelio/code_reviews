{"pr_number": 523, "pr_title": "Next attempt to extract common logic from instrumentations.", "pr_author": "iNikem", "pr_createdAt": "2020-06-15T15:23:13Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523", "timeline": [{"oid": "423541196db2bca8eb1308eae00418eaed395b83", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/423541196db2bca8eb1308eae00418eaed395b83", "message": "Next attempt to extract common logic from instrumentations.\n\nI tried to reduce code repetition in DB client instrumentations, jdbc and mongo ones. This time I experimented with another approach, different from HttpServerTracer. Namely, I have extracted that common `startSpan` method into `DatabaseClientDecorator` itself. The idea is still the same as before, but I wanted to see if we can migrate by smaller steps, reusing much of the existing code and just incrementally reducing public API.", "committedDate": "2020-06-15T15:22:01Z", "type": "commit"}, {"oid": "34542cca0ba2c936e92c1dd2f78d373b568a265d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/34542cca0ba2c936e92c1dd2f78d373b568a265d", "message": "Extracted separate Tracer after all", "committedDate": "2020-06-15T17:30:05Z", "type": "commit"}, {"oid": "2ed22cc40b6d39770963d2b8421afeae556340b3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2ed22cc40b6d39770963d2b8421afeae556340b3", "message": "More explicit call depth handling", "committedDate": "2020-06-17T09:22:15Z", "type": "commit"}, {"oid": "e15c77a7c2f6f215d7ca9550e6e5c1700832a67d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e15c77a7c2f6f215d7ca9550e6e5c1700832a67d", "message": "Fix format", "committedDate": "2020-06-17T09:42:45Z", "type": "commit"}, {"oid": "7c9e3b2d6a551514397b1e94f530c6a181f37dd3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c9e3b2d6a551514397b1e94f530c6a181f37dd3", "message": "Merge remote-tracking branch 'upstream/master' into db-client-decorator", "committedDate": "2020-06-17T09:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441735252", "body": "i think this is not used?", "bodyText": "i think this is not used?", "bodyHTML": "<p dir=\"auto\">i think this is not used?</p>", "author": "trask", "createdAt": "2020-06-17T18:11:29Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/CallDepthThreadLocalMap.java", "diffHunk": "@@ -31,24 +40,36 @@ protected ThreadLocalDepth computeValue(Class<?> type) {\n         }\n       };\n \n+  public static Depth getCallDepth(final Class<?> k) {\n+    return TLS.get(k).get();\n+  }\n+\n   public static int incrementCallDepth(final Class<?> k) {\n-    return TLS.get(k).get().increment();\n+    return TLS.get(k).get().getAndIncrement();\n+  }\n+\n+  public static int decrementCallDepth(final Class<?> k) {", "originalCommit": "2ed22cc40b6d39770963d2b8421afeae556340b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzA4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441747080", "bodyText": "I have added it mostly for symmetry and it is used from tests", "author": "iNikem", "createdAt": "2020-06-17T18:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczODE0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441738142", "body": "move query lookup to overloaded `JdbcTracer.startSpan(Statement)`, since that will be useful for manual instrumentation also?\r\n\r\n```suggestion\r\n        span = TRACER.startSpan(statement);\r\n```", "bodyText": "move query lookup to overloaded JdbcTracer.startSpan(Statement), since that will be useful for manual instrumentation also?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n          \n          \n            \n                    span = TRACER.startSpan(statement);", "bodyHTML": "<p dir=\"auto\">move query lookup to overloaded <code>JdbcTracer.startSpan(Statement)</code>, since that will be useful for manual instrumentation also?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        span <span class=\"pl-k\">=</span> <span class=\"pl-c1\">TRACER</span><span class=\"pl-k\">.</span>startSpan(statement<span class=\"x x-first\">, </span><span class=\"pl-smi x\">JDBCMaps</span><span class=\"pl-k x\">.</span><span class=\"x\">preparedStatements</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">get(statement)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        span <span class=\"pl-k\">=</span> <span class=\"pl-c1\">TRACER</span><span class=\"pl-k\">.</span>startSpan(statement);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-06-17T18:16:24Z", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "diffHunk": "@@ -75,28 +76,31 @@ public PreparedStatementInstrumentation() {\n     public static void onEnter(\n         @Advice.This final PreparedStatement statement,\n         @Advice.Local(\"otelSpan\") Span span,\n-        @Advice.Local(\"otelScope\") Scope scope) {\n+        @Advice.Local(\"otelScope\") Scope scope,\n+        @Advice.Local(\"otelCallDepth\") Depth callDepth) {\n \n-      span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n-      if (span != null) {\n-        scope = TRACER.withSpan(span);\n+      callDepth = TRACER.getCallDepth();\n+      if (callDepth.getAndIncrement() == 0) {\n+        span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));", "originalCommit": "2ed22cc40b6d39770963d2b8421afeae556340b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczODkxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441738912", "body": "i like this, and the corresponding `callDepth.decrementAndGet() == 0` in `@OnMethodExit`", "bodyText": "i like this, and the corresponding callDepth.decrementAndGet() == 0 in @OnMethodExit", "bodyHTML": "<p dir=\"auto\">i like this, and the corresponding <code>callDepth.decrementAndGet() == 0</code> in <code>@OnMethodExit</code></p>", "author": "trask", "createdAt": "2020-06-17T18:17:53Z", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "diffHunk": "@@ -75,28 +76,31 @@ public PreparedStatementInstrumentation() {\n     public static void onEnter(\n         @Advice.This final PreparedStatement statement,\n         @Advice.Local(\"otelSpan\") Span span,\n-        @Advice.Local(\"otelScope\") Scope scope) {\n+        @Advice.Local(\"otelScope\") Scope scope,\n+        @Advice.Local(\"otelCallDepth\") Depth callDepth) {\n \n-      span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n-      if (span != null) {\n-        scope = TRACER.withSpan(span);\n+      callDepth = TRACER.getCallDepth();\n+      if (callDepth.getAndIncrement() == 0) {", "originalCommit": "2ed22cc40b6d39770963d2b8421afeae556340b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "38e765cf50eacbb21e746c0ef90ff240327a6898", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38e765cf50eacbb21e746c0ef90ff240327a6898", "message": "More reusable method overloads", "committedDate": "2020-06-17T18:37:48Z", "type": "commit"}, {"oid": "7c077c0965c41b27d2b609018657dc98f89edee0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c077c0965c41b27d2b609018657dc98f89edee0", "message": "Merge remote-tracking branch 'upstream/master' into db-client-decorator", "committedDate": "2020-06-17T18:37:58Z", "type": "commit"}]}