{"pr_number": 573, "pr_title": "Propagate full Context while processing http server requests", "pr_author": "iNikem", "pr_createdAt": "2020-06-24T13:42:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573", "timeline": [{"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "message": "Propagate full Context while processing http server requests", "committedDate": "2020-06-24T15:43:24Z", "type": "commit"}, {"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "message": "Propagate full Context while processing http server requests", "committedDate": "2020-06-24T15:43:24Z", "type": "forcePushed"}, {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/967d0935f5c9ad0007539b8fd1bf35e411bbca45", "message": "Polish", "committedDate": "2020-06-24T18:00:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445130731", "body": "currently at least, this method isn't needed (the only callers use the `public` overrides directly)", "bodyText": "currently at least, this method isn't needed (the only callers use the public overrides directly)", "bodyHTML": "<p dir=\"auto\">currently at least, this method isn't needed (the only callers use the <code>public</code> overrides directly)</p>", "author": "trask", "createdAt": "2020-06-24T19:46:18Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -223,9 +230,15 @@ private void setStatus(Span span, int status) {\n \n   protected abstract String method(REQUEST request);\n \n-  protected void attachSpanToRequest(Span span, REQUEST request) {}\n+  /** Stores given context in the given request in implementation specific way. */\n+  protected void attachContextToRequest(Context context, REQUEST request) {}\n \n-  protected Span getAttachedSpan(REQUEST request) {\n+  /**\n+   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   *\n+   * <p>May be null.\n+   */\n+  protected Context getAttachedContext(REQUEST request) {", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjI2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322262", "bodyText": "I am thinking about making this public and changing this and attachContextToRequest abstract methods here.", "author": "iNikem", "createdAt": "2020-06-25T05:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445131131", "body": "what do u think of `startScope`?", "bodyText": "what do u think of startScope?", "bodyHTML": "<p dir=\"auto\">what do u think of <code>startScope</code>?</p>", "author": "trask", "createdAt": "2020-06-24T19:47:07Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -172,8 +173,15 @@ public Span getCurrentSpan() {\n     return tracer.getCurrentSpan();\n   }\n \n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope newScope(Span span, REQUEST request) {", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322360", "bodyText": "Both looks fine to me, can rename if you wish.", "author": "iNikem", "createdAt": "2020-06-25T05:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445138691", "body": "not related to this PR, but how about below\r\n\r\nmaybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE `protected` to force access via tracers(?)\r\n\r\n```suggestion\r\n      Context context = TRACER.removeAttachedContext(request);\r\n      if (context != null) {\r\n        TRACER.end(getSpan(context), request.getResponse().getStatus());\r\n      }\r\n```", "bodyText": "not related to this PR, but how about below\nmaybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE protected to force access via tracers(?)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                  if (contextAttribute instanceof Context) {\n          \n          \n            \n                    request.removeAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                    TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n          \n          \n            \n                  }\n          \n          \n            \n                  Context context = TRACER.removeAttachedContext(request);\n          \n          \n            \n                  if (context != null) {\n          \n          \n            \n                    TRACER.end(getSpan(context), request.getResponse().getStatus());\n          \n          \n            \n                  }", "bodyHTML": "<p dir=\"auto\">not related to this PR, but how about below</p>\n<p dir=\"auto\">maybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE <code>protected</code> to force access via tracers(?)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Object</span> contextAttribute <span class=\"pl-k\">=</span> request<span class=\"pl-k\">.</span>getAttribute(<span class=\"pl-c1\">CONTEXT_ATTRIBUTE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (contextAttribute <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Context</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        request<span class=\"pl-k\">.</span>removeAttribute(<span class=\"pl-c1\">CONTEXT_ATTRIBUTE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"120\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">TRACER</span><span class=\"pl-k\">.</span>end(getSpan((<span class=\"pl-smi\">Context</span>) contextAttribute), request<span class=\"pl-k\">.</span>getResponse()<span class=\"pl-k\">.</span>getStatus());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"121\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">Context</span> context <span class=\"pl-k\">=</span> <span class=\"pl-c1\">TRACER</span><span class=\"pl-k\">.</span>removeAttachedContext(request);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">if</span> (context <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">TRACER</span><span class=\"pl-k\">.</span>end(getSpan(context), request<span class=\"pl-k\">.</span>getResponse()<span class=\"pl-k\">.</span>getStatus());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"120\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-06-24T20:01:21Z", "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "diffHunk": "@@ -111,10 +113,10 @@ public static void methodExit(\n \n     @Override\n     public void onAfterService(final Request request) {\n-      final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof Span) {\n-        request.removeAttribute(SPAN_ATTRIBUTE);\n-        TRACER.end((Span) spanAttr, request.getResponse().getStatus());\n+      final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n+      if (contextAttribute instanceof Context) {\n+        request.removeAttribute(CONTEXT_ATTRIBUTE);\n+        TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n       }", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322866", "bodyText": "Definitely. In my ideal vision even these methods will not be needed and tracer will expose more semantically meaningful methods if it cannot handle everything itself.", "author": "iNikem", "createdAt": "2020-06-25T05:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445170745", "body": "this just got re-worked in https://github.com/DataDog/dd-trace-java/pull/1595", "bodyText": "this just got re-worked in DataDog/dd-trace-java#1595", "bodyHTML": "<p dir=\"auto\">this just got re-worked in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"639838870\" data-permission-text=\"Title is private\" data-url=\"https://github.com/DataDog/dd-trace-java/issues/1595\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/DataDog/dd-trace-java/pull/1595/hovercard\" href=\"https://github.com/DataDog/dd-trace-java/pull/1595\">DataDog/dd-trace-java#1595</a></p>", "author": "trask", "createdAt": "2020-06-24T21:03:59Z", "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3HttpServerTracer.java", "diffHunk": "@@ -73,22 +77,23 @@ public void onRequest(Span span, HttpServletRequest request) {\n    * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n    * chain.\n    */\n+  // TODO review this hacky-hacky", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445173003", "body": "\"ServletContext\" sounds so much like something else, maybe:\r\n\r\n```suggestion\r\n        @Advice.Local(\"_originalContext\") Object originalContext,\r\n```", "bodyText": "\"ServletContext\" sounds so much like something else, maybe:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Advice.Local(\"_originalServletContext\") Object originalServletContext,\n          \n          \n            \n                    @Advice.Local(\"_originalContext\") Object originalContext,", "bodyHTML": "<p dir=\"auto\">\"ServletContext\" sounds so much like something else, maybe:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">@Advice.Local</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">_originalServletContext</span><span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">Object</span> <span class=\"x x-first x-last\">originalServletContext</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">@Advice.Local</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">_originalContext</span><span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">Object</span> <span class=\"x x-first x-last\">originalContext</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trask", "createdAt": "2020-06-24T21:08:51Z", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -87,12 +90,13 @@ public RequestDispatcherInstrumentation() {\n     public static SpanWithScope start(\n         @Advice.Origin(\"#m\") final String method,\n         @Advice.This final RequestDispatcher dispatcher,\n-        @Advice.Local(\"_originalServletSpan\") Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") Object originalServletContext,", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445200890", "body": "hm, good question, i think `include` and `forward` are synchronous, so thread-local context propagation should be enough", "bodyText": "hm, good question, i think include and forward are synchronous, so thread-local context propagation should be enough", "bodyHTML": "<p dir=\"auto\">hm, good question, i think <code>include</code> and <code>forward</code> are synchronous, so thread-local context propagation should be enough</p>", "author": "trask", "createdAt": "2020-06-24T22:13:08Z", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -125,28 +129,31 @@ public static SpanWithScope start(\n \n       // save the original servlet span before overwriting the request attribute, so that it can be\n       // restored on method exit\n-      originalServletSpan = request.getAttribute(SPAN_ATTRIBUTE);\n+      originalServletContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n       // this tells the dispatched servlet to use the current span as the parent for its work\n-      request.setAttribute(SPAN_ATTRIBUTE, span);\n+      Context newContext = withSpan(span, Context.current());\n+      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n \n-      return new SpanWithScope(span, currentContextWith(span));\n+      return new SpanWithScope(span, withScopedContext(newContext));\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void stop(\n         @Advice.Enter final SpanWithScope spanWithScope,\n-        @Advice.Local(\"_originalServletSpan\") final Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") final Object originalServletContext,\n         @Advice.Argument(0) final ServletRequest request,\n         @Advice.Thrown final Throwable throwable) {\n       if (spanWithScope == null) {\n         return;\n       }\n \n       // restore the original servlet span\n-      // since spanWithScope is non-null here, originalServletSpan must have been set with the prior\n+      // since spanWithScope is non-null here, originalServletContext must have been set with the\n+      // prior\n       // servlet span (as opposed to remaining unset)\n-      request.setAttribute(SPAN_ATTRIBUTE, originalServletSpan);\n+      // TODO review this logic. Seems like manual context management", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445336566", "bodyText": "Made #579 to come back to this later.", "author": "iNikem", "createdAt": "2020-06-25T06:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA=="}], "type": "inlineReview"}, {"oid": "b5c1d7d047f2ed915556f6486e7db6d8f0829821", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b5c1d7d047f2ed915556f6486e7db6d8f0829821", "message": "Polish and revert scala test related changes", "committedDate": "2020-06-25T06:36:20Z", "type": "commit"}, {"oid": "abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "message": "Merge branch 'master' into request-context-propagation", "committedDate": "2020-06-25T06:59:42Z", "type": "commit"}, {"oid": "e2e2b6077c26e07b2c98e8d8837003d91daa0259", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2e2b6077c26e07b2c98e8d8837003d91daa0259", "message": "Merge remote-tracking branch 'upstream/master' into request-context-propagation", "committedDate": "2020-06-26T14:12:17Z", "type": "commit"}, {"oid": "d2b014a3b31be0c1bad854eba1434d6883666f77", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2b014a3b31be0c1bad854eba1434d6883666f77", "message": "Format", "committedDate": "2020-06-26T14:34:30Z", "type": "commit"}]}