{"pr_number": 1893, "pr_title": "HTTP client instrumentation cleanup, part 0", "pr_author": "trask", "pr_createdAt": "2020-12-13T22:21:31Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893", "timeline": [{"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c6e639de19221c66c0346b3e0c36b5758fa4412", "message": "HTTP client instrumentation cleanup, part 0", "committedDate": "2020-12-13T22:20:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542076374", "body": "I'd put this method in a PR with at least one usage of it - inClientSpan / withClientSpan are quite clear here, but not this method which isn't used. One way to keep PRs small is to change just one usage in one PR, and remaining usages in a mechanical way in another.", "bodyText": "I'd put this method in a PR with at least one usage of it - inClientSpan / withClientSpan are quite clear here, but not this method which isn't used. One way to keep PRs small is to change just one usage in one PR, and remaining usages in a mechanical way in another.", "bodyHTML": "<p dir=\"auto\">I'd put this method in a PR with at least one usage of it - inClientSpan / withClientSpan are quite clear here, but not this method which isn't used. One way to keep PRs small is to change just one usage in one PR, and remaining usages in a mechanical way in another.</p>", "author": "anuraaga", "createdAt": "2020-12-14T02:50:01Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "originalCommit": "2c6e639de19221c66c0346b3e0c36b5758fa4412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3Nzc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542077745", "bodyText": "added example", "author": "trask", "createdAt": "2020-12-14T02:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTY5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542111699", "bodyText": "I think a while ago we had a thought that this pattern is technically the most precise\nThrowable err = null;\ntry (context.makeCurrent()) {\n  doWork();\n} catch (Throwable t) {\n  err = t;\n} finally {\n  span.end\n}\nIf so I guess this class isn't only useful for bytecode manipulation - do you think we can remove the two variants and merge into a single end method eventually?", "author": "anuraaga", "createdAt": "2020-12-14T04:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMzcxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542123714", "bodyText": "Added TODO comment on this method to revisit", "author": "trask", "createdAt": "2020-12-14T05:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}], "type": "inlineReview"}, {"oid": "a03ecc075e3b0c18ef3375a0447972342c402fdb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a03ecc075e3b0c18ef3375a0447972342c402fdb", "message": "Add an example", "committedDate": "2020-12-14T02:55:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMjA0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542112045", "body": "```suggestion\r\n  public void endMaybeExceptionally(Context context, RESPONSE response, @Nullable Throwable throwable) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {\n          \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, @Nullable Throwable throwable) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> endMaybeExceptionally(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-c1\">RESPONSE</span> response, <span class=\"pl-smi\">Throwable</span> throwable) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> endMaybeExceptionally(<span class=\"pl-smi\">Context</span> context, <span class=\"pl-c1\">RESPONSE</span> response, <span class=\"pl-k x x-first\">@Nullable</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Throwable</span> throwable) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "anuraaga", "createdAt": "2020-12-14T04:57:49Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "originalCommit": "a03ecc075e3b0c18ef3375a0447972342c402fdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfd546702150fcb003785f44a9acc32fd7827435", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfd546702150fcb003785f44a9acc32fd7827435", "message": "Mark param Nullable", "committedDate": "2020-12-14T05:29:09Z", "type": "commit"}, {"oid": "1b7d1ed0615c792e084a5b4ff120fcfbfaf3041d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1b7d1ed0615c792e084a5b4ff120fcfbfaf3041d", "message": "Add comment", "committedDate": "2020-12-14T05:35:58Z", "type": "commit"}, {"oid": "48ac23a9242cdcc9c0e8cdb82f34c23c62d3686d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/48ac23a9242cdcc9c0e8cdb82f34c23c62d3686d", "message": "Merge remote-tracking branch 'upstream/master' into http-client-instrumentation-part-0", "committedDate": "2020-12-14T23:42:49Z", "type": "commit"}]}