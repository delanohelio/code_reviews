{"pr_number": 3998, "pr_title": "fix-NXP-28964-annotation-on-version", "pr_author": "kevinleturc", "pr_createdAt": "2020-05-04T12:01:13Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3998", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419522025", "body": "I am wondering if we should add the `author` and `text` to `toString` method in the case where we log a sensitive data I mean. what each person says :) ", "bodyText": "I am wondering if we should add the author and text to toString method in the case where we log a sensitive data I mean. what each person says :)", "bodyHTML": "<p dir=\"auto\">I am wondering if we should add the <code>author</code> and <code>text</code> to <code>toString</code> method in the case where we log a sensitive data I mean. what each person says :)</p>", "author": "RSalem07", "createdAt": "2020-05-04T15:27:56Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "originalCommit": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjQ1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420012450", "bodyText": "Good interrogation, I don't have any clue on this. Maybe the @nuxeo/platform team?", "author": "kevinleturc", "createdAt": "2020-05-05T10:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNzY3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420217672", "bodyText": "Interesting question... is it more or less secure than logging document titles (DocumentModelImpl#toString implementation)?", "author": "troger", "createdAt": "2020-05-05T15:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2MDU0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420260541", "bodyText": "Agreed, the id is enough imho.", "author": "efge", "createdAt": "2020-05-05T16:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NzA3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420267071", "bodyText": "Agree with you @troger, that's I didn't have any clue...\nIn the end, I rollbacked.", "author": "kevinleturc", "createdAt": "2020-05-05T17:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NDAyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419544026", "body": "I am wondering in the case of migrating the comment from property to tree as the same implementation has the `COMMENT_PARENT_ID_PROPERTY`. perhaps we replace it by:\r\n\r\n```\r\n    @Override\r\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\r\n            throws CommentNotFoundException, CommentSecurityException {\r\n        DocumentRef commentRef = new IdRef(commentId);\r\n        return execute(session, commentRef, cm -> cm.updateComment(session, commentId, comment));\r\n    }\r\n```\r\nwdyt and I did the change on my local machine it compile... :) but i didn't run the test ", "bodyText": "I am wondering in the case of migrating the comment from property to tree as the same implementation has the COMMENT_PARENT_ID_PROPERTY. perhaps we replace it by:\n    @Override\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        return execute(session, commentRef, cm -> cm.updateComment(session, commentId, comment));\n    }\n\nwdyt and I did the change on my local machine it compile... :) but i didn't run the test", "bodyHTML": "<p dir=\"auto\">I am wondering in the case of migrating the comment from property to tree as the same implementation has the <code>COMMENT_PARENT_ID_PROPERTY</code>. perhaps we replace it by:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Override\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        return execute(session, commentRef, cm -&gt; cm.updateComment(session, commentId, comment));\n    }\"><pre><code>    @Override\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        return execute(session, commentRef, cm -&gt; cm.updateComment(session, commentId, comment));\n    }\n</code></pre></div>\n<p dir=\"auto\">wdyt and I did the change on my local machine it compile... :) but i didn't run the test</p>", "author": "RSalem07", "createdAt": "2020-05-04T15:58:53Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });", "originalCommit": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDA3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419550074", "bodyText": "I don't want to change the implementation there, If this has worked until there I would rather keep it. I just added a doPriviledge because only administrator case was tested before.", "author": "kevinleturc", "createdAt": "2020-05-04T16:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NDAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NTU2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419545564", "body": "same as above where we can replace with:\r\n```\r\n @Override\r\n    public void deleteComment(CoreSession session, String commentId)\r\n            throws CommentNotFoundException, CommentSecurityException {\r\n        DocumentRef commentRef = new IdRef(commentId);\r\n        execute(session, commentRef, cm -> {\r\n            cm.deleteComment(session, commentId);\r\n            return true;\r\n        });\r\n    }\r\n```\r\nhere I just wrap the deletion to return a boolean because the execute `function` param is function Type", "bodyText": "same as above where we can replace with:\n @Override\n    public void deleteComment(CoreSession session, String commentId)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        execute(session, commentRef, cm -> {\n            cm.deleteComment(session, commentId);\n            return true;\n        });\n    }\n\nhere I just wrap the deletion to return a boolean because the execute function param is function Type", "bodyHTML": "<p dir=\"auto\">same as above where we can replace with:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Override\n    public void deleteComment(CoreSession session, String commentId)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        execute(session, commentRef, cm -&gt; {\n            cm.deleteComment(session, commentId);\n            return true;\n        });\n    }\"><pre><code> @Override\n    public void deleteComment(CoreSession session, String commentId)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        execute(session, commentRef, cm -&gt; {\n            cm.deleteComment(session, commentId);\n            return true;\n        });\n    }\n</code></pre></div>\n<p dir=\"auto\">here I just wrap the deletion to return a boolean because the execute <code>function</code> param is function Type</p>", "author": "RSalem07", "createdAt": "2020-05-04T16:01:07Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });\n     }\n \n     @Override\n     public void deleteComment(CoreSession session, String commentId)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            second.deleteComment(session, commentId);\n-        } else {\n-            first.deleteComment(session, commentId);\n-        }\n+        CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                second.deleteComment(session, commentId);\n+            } else {\n+                first.deleteComment(session, commentId);\n+            }\n+        });", "originalCommit": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDIyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419550228", "bodyText": "Same as other.", "author": "kevinleturc", "createdAt": "2020-05-04T16:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NTU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420220192", "body": "Worth adding a `@since` here?", "bodyText": "Worth adding a @since here?", "bodyHTML": "<p dir=\"auto\">Worth adding a <code>@since</code> here?</p>", "author": "troger", "createdAt": "2020-05-05T15:57:10Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -70,7 +71,7 @@\n \n     private static final Logger log = LogManager.getLogger(AbstractCommentManager.class);\n \n-    protected static final String COMMENTS_DIRECTORY = \"Comments\";\n+    public static final String COMMENTS_DIRECTORY = \"Comments\";", "originalCommit": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMTE2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420221167", "body": "`@since`?", "bodyText": "@since?", "bodyHTML": "<p dir=\"auto\"><code>@since</code>?</p>", "author": "troger", "createdAt": "2020-05-05T15:58:27Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public BridgeCommentManager(CommentManager first, CommentManager second) {\n         this.second = second;\n     }\n \n+    public CommentManager getFirst() {\n+        return first;\n+    }\n+\n+    public CommentManager getSecond() {\n+        return second;\n+    }\n+", "originalCommit": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17225c0cd4590fd59122db13b8a6f76b605c42ce", "url": "https://github.com/nuxeo/nuxeo/commit/17225c0cd4590fd59122db13b8a6f76b605c42ce", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-05T17:02:58Z", "type": "forcePushed"}, {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8", "url": "https://github.com/nuxeo/nuxeo/commit/708fb0507cf5771b789bda96f049d6cd9882e4f8", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-05T17:05:04Z", "type": "forcePushed"}, {"oid": "083fa0ea163d06c44851c7904ce074bd7899ab19", "url": "https://github.com/nuxeo/nuxeo/commit/083fa0ea163d06c44851c7904ce074bd7899ab19", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-06T14:06:15Z", "type": "forcePushed"}, {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9", "url": "https://github.com/nuxeo/nuxeo/commit/ccfd4ee88f67022b60b22945ec762345d6774df9", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-06T14:56:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDIxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420640216", "body": "```suggestion\r\n        return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event for event: \" + event));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n          \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event for event: \" + event));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> findFirstCapturedEvent(event)<span class=\"pl-k\">.</span>orElseThrow(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to find first Event<span class=\"pl-pds x x-first x-last\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> findFirstCapturedEvent(event)<span class=\"pl-k\">.</span>orElseThrow(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to find first Event<span class=\"x x-first\"> for event: </span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> event</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-05-06T08:56:39Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/test/CapturingEventListener.java", "diffHunk": "@@ -97,8 +105,165 @@ public CapturingEventListener(String... events) {\n         return streamCapturedEventContexts().filter(clazz::isInstance).map(clazz::cast);\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent() {\n+        return streamCapturedEvents().findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow() {\n+        return findFirstCapturedEvent().orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent(String event) {\n+        return streamCapturedEvents(event).findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow(String event) {\n+        return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));", "originalCommit": "708fb0507cf5771b789bda96f049d6cd9882e4f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDAwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420894009", "body": "You could maybe move that just before the `if` using it?", "bodyText": "You could maybe move that just before the if using it?", "bodyHTML": "<p dir=\"auto\">You could maybe move that just before the <code>if</code> using it?</p>", "author": "troger", "createdAt": "2020-05-06T15:42:51Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/listener/CheckedInCommentListener.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  \n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.listener;\n+\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.impl.AbstractCommentManager.COMMENTS_DIRECTORY;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+\n+/**\n+ * Listener that updates {@code comment:parentId} and {@code comment:ancestorIds} on version's comments after the\n+ * check-in event.\n+ *\n+ * @since 11.1\n+ */\n+public class CheckedInCommentListener implements EventListener {\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        EventContext ctx = event.getContext();\n+        if (ctx instanceof DocumentEventContext) {\n+            DocumentEventContext docCtx = (DocumentEventContext) ctx;\n+            CoreSession session = docCtx.getCoreSession();", "originalCommit": "ccfd4ee88f67022b60b22945ec762345d6774df9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTUxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420909513", "body": "Empty line.", "bodyText": "Empty line.", "bodyHTML": "<p dir=\"auto\">Empty line.</p>", "author": "troger", "createdAt": "2020-05-06T16:03:54Z", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentManagerImpl.java", "diffHunk": "@@ -55,105 +47,223 @@\n @Features(RelationCommentFeature.class)\n public class TestCommentManagerImpl extends AbstractTestCommentManager {\n \n-    public static final String QUERY_COMMENTS_AS_DOCUMENTS = \"SELECT * FROM \" + COMMENT_DOC_TYPE;\n+    public TestCommentManagerImpl() {\n+        super(CommentManagerImpl.class);\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testCreateReply() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetCommentPermissions() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsPaginationOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testGetCommentsWithReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateComment() {\n+        super.testUpdateComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByItsAuthor() {\n+        super.testUpdateCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByPowerfulUser() {\n+        super.testUpdateCommentByPowerfulUser(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentWithModificationDate() {\n+        super.testUpdateCommentWithModificationDate(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testUpdateReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteCommentByItsAuthor() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalComment() {\n+        super.testGetExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalCommentPermissions() {\n+        super.testGetExternalCommentPermissions(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalComment() {\n+        super.testUpdateExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByItsAuthor() {\n+        super.testUpdateExternalCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByPowerfulUser() {\n+        super.testUpdateExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    public static final String USERNAME = \"Foo\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalComment() {\n+        super.testDeleteExternalComment(); // if implemented one day\n+    }\n \n-    public static final String COMMENT_CONTENT = \"This is my comment\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByItsAuthor() {\n+        super.testDeleteExternalCommentByItsAuthor(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected CoreFeature coreFeature;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByPowerfulUser() {\n+        super.testDeleteExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected UserManager userManager;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testExternalCommentOnVersion() {\n+        super.testExternalCommentOnVersion(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - deprecated implementation\")\n+    public void testCommentsAncestorIds() {\n+", "originalCommit": "ccfd4ee88f67022b60b22945ec762345d6774df9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed00df92a3f6dc29e903548ec62110657207484b", "url": "https://github.com/nuxeo/nuxeo/commit/ed00df92a3f6dc29e903548ec62110657207484b", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-06T17:04:30Z", "type": "forcePushed"}, {"oid": "00101368a68e018d1212649e316b3e3e82e5784e", "url": "https://github.com/nuxeo/nuxeo/commit/00101368a68e018d1212649e316b3e3e82e5784e", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-05-15T08:24:18Z", "type": "forcePushed"}, {"oid": "fbe72176439fff9943fdfb2cb1a7dbfb72ce3166", "url": "https://github.com/nuxeo/nuxeo/commit/fbe72176439fff9943fdfb2cb1a7dbfb72ce3166", "message": "NXP-28964: Cleanup / Format", "committedDate": "2020-06-08T08:46:58Z", "type": "commit"}, {"oid": "ccc12163b34cf7e8f1d45f1093a3f442579bd992", "url": "https://github.com/nuxeo/nuxeo/commit/ccc12163b34cf7e8f1d45f1093a3f442579bd992", "message": "NXP-28964: Improve CapturingEventListener", "committedDate": "2020-06-08T08:47:01Z", "type": "commit"}, {"oid": "061c91a2e08c11b62112ad0c010b5e6373f5a35a", "url": "https://github.com/nuxeo/nuxeo/commit/061c91a2e08c11b62112ad0c010b5e6373f5a35a", "message": "NXP-28964: Make possible to clear mails", "committedDate": "2020-06-08T08:47:01Z", "type": "commit"}, {"oid": "dd47498b221b9a352883539dee8babc2a171a68f", "url": "https://github.com/nuxeo/nuxeo/commit/dd47498b221b9a352883539dee8babc2a171a68f", "message": "NXP-28964: Prepare tests for external API deprecation", "committedDate": "2020-06-08T08:51:06Z", "type": "commit"}, {"oid": "08a3f44de77d4adb21ddd0319650fb6fae77d00d", "url": "https://github.com/nuxeo/nuxeo/commit/08a3f44de77d4adb21ddd0319650fb6fae77d00d", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-06-08T08:51:07Z", "type": "commit"}, {"oid": "08a3f44de77d4adb21ddd0319650fb6fae77d00d", "url": "https://github.com/nuxeo/nuxeo/commit/08a3f44de77d4adb21ddd0319650fb6fae77d00d", "message": "NXP-28964: Handle external comment when they are linked to a version", "committedDate": "2020-06-08T08:51:07Z", "type": "forcePushed"}]}