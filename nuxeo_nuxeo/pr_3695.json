{"pr_number": 3695, "pr_title": "10.10-HF/improvement-NXP-28254-conversation-participants-missing-notifications", "pr_author": "nuxeojenkins", "pr_createdAt": "2020-01-24T18:31:02Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3695", "timeline": [{"oid": "e42b7ca24b4664e507f30b1fc925836547b60afd", "url": "https://github.com/nuxeo/nuxeo/commit/e42b7ca24b4664e507f30b1fc925836547b60afd", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T15:33:43Z", "type": "forcePushed"}, {"oid": "0175506bbd408a3f64ea2fd511189de9976039f9", "url": "https://github.com/nuxeo/nuxeo/commit/0175506bbd408a3f64ea2fd511189de9976039f9", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T15:39:50Z", "type": "forcePushed"}, {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "url": "https://github.com/nuxeo/nuxeo/commit/0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T15:42:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDI5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376460298", "body": "IDE automatically removes trailing spaces. Since there are no cleanup commits in backports I can either leave it as it is, or put it back in a text editor, but the problem will happen again and again in next commits.", "bodyText": "IDE automatically removes trailing spaces. Since there are no cleanup commits in backports I can either leave it as it is, or put it back in a text editor, but the problem will happen again and again in next commits.", "bodyHTML": "<p dir=\"auto\">IDE automatically removes trailing spaces. Since there are no cleanup commits in backports I can either leave it as it is, or put it back in a text editor, but the problem will happen again and again in next commits.</p>", "author": "NourNuxeo", "createdAt": "2020-02-07T15:44:12Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -316,7 +361,7 @@ public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef documen\n     /**\n      * Gets or creates the 'Comments' folder, this folder will be under the document being commented and it contains the\n      * whole comments of the first document that we comment.\n-     * \n+     *", "originalCommit": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MjM1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376482356", "bodyText": "I'm ok keeping it \ud83e\udd37\u200d\u2642", "author": "troger", "createdAt": "2020-02-07T16:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -337,102 +301,30 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     @Override\n-    public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef documentRef) {\n-        return CoreInstance.doPrivileged(s, session -> {\n-            if (!session.exists(documentRef)) {\n-                throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", documentRef));\n-            }\n-\n-            DocumentModel documentModel = session.getDocument(documentRef);\n-            while (documentModel.hasSchema(COMMENT_SCHEMA) || COMMENTS_DIRECTORY_TYPE.equals(documentModel.getType())) {\n-                documentModel = session.getDocument(documentModel.getParentRef());\n-            }\n-\n-            NuxeoPrincipal principal = s.getPrincipal();\n-            if (!session.hasPermission(principal, documentModel.getRef(), SecurityConstants.READ)) {\n-                throw new CommentSecurityException(\"The user \" + principal.getName()\n-                        + \" does not have access to the comments of document \" + documentModel.getRef().reference());\n-            }\n-\n-            return documentModel.getRef();\n-        });\n-    }\n-\n-    /**\n-     * Gets or creates the 'Comments' folder, this folder will be under the document being commented and it contains the\n-     * whole comments of the first document that we comment.\n-     *\n-     * @param session the core session\n-     * @param documentModel the document model to comment, it's can be the first document of the hierarchy or any\n-     *            comment that being replied\n-     * @return the comments folder for a given document model\n-     */\n-    protected DocumentModel getOrCreateCommentsFolder(CoreSession session, DocumentModel documentModel) {\n-        // Depending on the case, the given document model can be the document being commented (the root document, the\n-        // first comment of the tree) or the comment (case where we reply on existing comment)\n-        DocumentRef rootDocumentRef = getTopLevelCommentAncestor(session, documentModel.getRef());\n-        DocumentModel rootDocModel = session.getDocument(rootDocumentRef);\n-\n-        DocumentModel commentsFolder = session.createDocumentModel(rootDocModel.getPathAsString(),\n-                COMMENTS_DIRECTORY_NAME, COMMENTS_DIRECTORY_TYPE);\n-        // No need to notify the creation of the Comments folder\n-        commentsFolder.putContextData(DISABLE_NOTIFICATION_SERVICE, TRUE);\n-        commentsFolder = session.getOrCreateDocument(commentsFolder);\n-        session.save();\n-\n-        return commentsFolder;\n-    }\n-\n-    /**\n-     * Checks if the user related to the {@code session} can comments the document linked to the {@code documentRef}.\n-     *\n-     * @return {@code true} if the user session can comments the given document model, otherwise throws a\n-     *         {@link CommentSecurityException}\n-     */\n-    protected void checkCreateCommentPermissions(CoreSession s, DocumentRef documentRef) {\n-        DocumentRef rootDocRef = CoreInstance.doPrivileged(s, session -> {\n-            return getTopLevelCommentAncestor(session, documentRef);\n-        });\n-        if (!s.hasPermission(rootDocRef, SecurityConstants.READ)) {\n-            throw new CommentSecurityException(String.format(\"The user %s can not create comments on document %s\",\n-                    s.getPrincipal().getName(), rootDocRef));\n-        }\n-    }\n-\n-    /**\n-     * Checks if the user related to the {@code session} can read the comments of the document linked to the given\n-     * {@code documentRef}.\n-     *\n-     * @return {@code true} if the user session can read the comments of the given document model, otherwise throws a\n-     *         {@link CommentSecurityException}\n-     */\n-    protected void checkReadCommentPermissions(CoreSession s, DocumentRef documentRef) {\n-        DocumentRef rootDocRef = CoreInstance.doPrivileged(s, session -> {\n-            return getTopLevelCommentAncestor(session, documentRef);\n-        });\n-\n-        if (!s.hasPermission(rootDocRef, SecurityConstants.READ)) {\n-            throw new CommentSecurityException(\n-                    String.format(\"The user %s does not have access to the comments of document %s\",\n-                            s.getPrincipal().getName(), documentRef));\n+    protected DocumentModel getTopLevelDocument(CoreSession session, DocumentModel commentDoc) {\n+        DocumentModel documentModel = commentDoc;\n+        while (documentModel.hasSchema(COMMENT_SCHEMA) || COMMENTS_DIRECTORY_TYPE.equals(documentModel.getType())) {\n+            documentModel = session.getDocument(documentModel.getParentRef());\n         }\n+        return documentModel;\n     }\n \n     /**\n-     * Checks if the user related to the {@code session} can update the given {@code comment}.\n-     *\n-     * @return {@code true} if the user session can update the given {@code comment}, otherwise throws a\n-     *         {@link CommentSecurityException}\n+     * Checks if the user related to the {@code session} can comments the document linked to the {@code documentRef}.\n      */\n-    protected void checkUpdateCommentPermissions(CoreSession session, Comment comment) {\n-        NuxeoPrincipal principal = session.getPrincipal();\n-        if (!principal.isAdministrator() && !comment.getAuthor().equals(principal.getName())) {\n-            throw new CommentSecurityException(String.format(\"The user %s cannot edit comments of document %s\",\n-                    principal.getName(), comment.getParentId()));\n+    protected void checkCreateCommentPermissions(CoreSession session, DocumentRef documentRef) {\n+        try {\n+            if (!session.hasPermission(documentRef, SecurityConstants.READ)) {\n+                throw new CommentSecurityException(String.format(\"The user %s cannot create comments on document %s\",\n+                        session.getPrincipal().getName(), documentRef));\n+            }\n+        } catch (DocumentNotFoundException dnfe) {\n+            throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", documentRef), dnfe);\n         }\n     }\n \n     /**\n+     * @param session the user session, in order to implicitly check permissions\n      * @return the external document model for the given {@code entityId}, if it exists, otherwise throws a\n      *         {@link CommentNotFoundException}\n      */\n", "next_change": null}]}}, {"oid": "db0078fd7b15fd8af33ba31fe44681623c8ec60f", "url": "https://github.com/nuxeo/nuxeo/commit/db0078fd7b15fd8af33ba31fe44681623c8ec60f", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T15:50:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NzAyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376467026", "body": "As this method is reworked and the variables are renamed on master, I thought it would be better to keep the same names on 10.10 even if it induces mixing a bit of Cleanup/Refacto in the commit\r\n\r\nSame on \r\n\r\n- https://github.com/nuxeo/nuxeo/pull/3695/commits/db0078fd7b15fd8af33ba31fe44681623c8ec60f#diff-28554eaa66542e2d29a24a2ced0d0134R157\r\n- https://github.com/nuxeo/nuxeo/pull/3695/commits/db0078fd7b15fd8af33ba31fe44681623c8ec60f#diff-b5ba4c2a86feb19034eeccb42bbcd8aaR136", "bodyText": "As this method is reworked and the variables are renamed on master, I thought it would be better to keep the same names on 10.10 even if it induces mixing a bit of Cleanup/Refacto in the commit\nSame on\n\ndb0078f#diff-28554eaa66542e2d29a24a2ced0d0134R157\ndb0078f#diff-b5ba4c2a86feb19034eeccb42bbcd8aaR136", "bodyHTML": "<p dir=\"auto\">As this method is reworked and the variables are renamed on master, I thought it would be better to keep the same names on 10.10 even if it induces mixing a bit of Cleanup/Refacto in the commit</p>\n<p dir=\"auto\">Same on</p>\n<ul dir=\"auto\">\n<li><a class=\"commit-link\" href=\"https://github.com/nuxeo/nuxeo/commit/db0078fd7b15fd8af33ba31fe44681623c8ec60f#diff-28554eaa66542e2d29a24a2ced0d0134R157\"><tt>db0078f</tt>#diff-28554eaa66542e2d29a24a2ced0d0134R157</a></li>\n<li><a class=\"commit-link\" href=\"https://github.com/nuxeo/nuxeo/commit/db0078fd7b15fd8af33ba31fe44681623c8ec60f#diff-b5ba4c2a86feb19034eeccb42bbcd8aaR136\"><tt>db0078f</tt>#diff-b5ba4c2a86feb19034eeccb42bbcd8aaR136</a></li>\n</ul>", "author": "NourNuxeo", "createdAt": "2020-02-07T15:55:54Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateAnnotation() {\n-        // We subscribe to the update document to check that we will not be notified about the annotation updated as\n-        // document (see CommentModificationVeto), only the annotation updated.\n-        Annotation annotation = createAnnotationAndAddSubscription(\"CommentUpdated\", \"Modification\");\n-\n-        captureAndVerifyAnnotationEventNotification(() -> {\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n-            return session.getDocument(new IdRef(annotation.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenRemoveAnnotation() {\n-        Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentRemoved\");\n-        DocumentModel annotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));", "originalCommit": "db0078fd7b15fd8af33ba31fe44681623c8ec60f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -133,14 +133,13 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenRemoveAnnotation() {\n         Annotation annotation = createAnnotation(annotatedDocumentModel);\n-        DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n-        annotationDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         // Notified by comment added\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n-            annotationService.deleteAnnotation(session, annotation.getId());\n+            DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            annotationService.deleteAnnotation(session, annotation.getId());\n             transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex 3c761c567fd..c1961d367e2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -133,13 +133,14 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenRemoveAnnotation() {\n         Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n+        annotationDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         // Notified by comment added\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n-            DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n+            annotationService.deleteAnnotation(session, annotation.getId());\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            annotationService.deleteAnnotation(session, annotation.getId());\n             transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -133,14 +133,13 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenRemoveAnnotation() {\n         Annotation annotation = createAnnotation(annotatedDocumentModel);\n-        DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n-        annotationDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         // Notified by comment added\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n-            annotationService.deleteAnnotation(session, annotation.getId());\n+            DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            annotationService.deleteAnnotation(session, annotation.getId());\n             transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n", "next_change": null}]}}]}}]}}, {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321", "url": "https://github.com/nuxeo/nuxeo/commit/1783390e77b2380b73ef19d91d0a50452efaa321", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T16:00:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MDM2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376470365", "body": "same issue than https://github.com/nuxeo/nuxeo/pull/3695/commits/1783390e77b2380b73ef19d91d0a50452efaa321#r376460298", "bodyText": "same issue than 1783390#r376460298", "bodyHTML": "<p dir=\"auto\">same issue than <a class=\"commit-link\" href=\"https://github.com/nuxeo/nuxeo/commit/1783390e77b2380b73ef19d91d0a50452efaa321#r376460298\"><tt>1783390</tt>#r376460298</a></p>", "author": "NourNuxeo", "createdAt": "2020-02-07T16:02:00Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestPropertyCommentNotification.java", "diffHunk": "@@ -12,13 +12,25 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *  \n+ *", "originalCommit": "1783390e77b2380b73ef19d91d0a50452efaa321", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MDU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376470584", "body": "same issue than https://github.com/nuxeo/nuxeo/pull/3695/commits/1783390e77b2380b73ef19d91d0a50452efaa321#r376460298", "bodyText": "same issue than 1783390#r376460298", "bodyHTML": "<p dir=\"auto\">same issue than <a class=\"commit-link\" href=\"https://github.com/nuxeo/nuxeo/commit/1783390e77b2380b73ef19d91d0a50452efaa321#r376460298\"><tt>1783390</tt>#r376460298</a></p>", "author": "NourNuxeo", "createdAt": "2020-02-07T16:02:26Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeCommentNotification.java", "diffHunk": "@@ -12,15 +12,24 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *  \n+ *", "originalCommit": "1783390e77b2380b73ef19d91d0a50452efaa321", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "505180ba05068f8d389584a1b59c10c2e505f1be", "url": "https://github.com/nuxeo/nuxeo/commit/505180ba05068f8d389584a1b59c10c2e505f1be", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T16:03:36Z", "type": "forcePushed"}, {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "url": "https://github.com/nuxeo/nuxeo/commit/7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-07T16:12:13Z", "type": "forcePushed"}, {"oid": "0df0a5c788546bee17d3391f78721ace3b535766", "url": "https://github.com/nuxeo/nuxeo/commit/0df0a5c788546bee17d3391f78721ace3b535766", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-10T10:15:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzU2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377003560", "body": "This file has been renamed, even in 10.10. Can you move your change to the appropriate test class?", "bodyText": "This file has been renamed, even in 10.10. Can you move your change to the appropriate test class?", "bodyHTML": "<p dir=\"auto\">This file has been renamed, even in 10.10. Can you move your change to the appropriate test class?</p>", "author": "kevinleturc", "createdAt": "2020-02-10T11:20:05Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonWriterTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuno Cunha <ncunha@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n+import org.nuxeo.ecm.platform.comment.CommentFeature;\n+import org.nuxeo.ecm.platform.comment.api.Comment;\n+import org.nuxeo.ecm.platform.comment.api.CommentImpl;\n+import org.nuxeo.ecm.platform.comment.api.CommentManager;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 10.3\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CommentFeature.class)\n+public class CommentJsonWriterTest extends AbstractJsonWriterTest.External<CommentJsonWriter, Comment> {", "originalCommit": "0df0a5c788546bee17d3391f78721ace3b535766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "886e9fbcf58a75010b635b3ec569f5e1f429d625", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonWriterTest.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonWriterTest.java\ndeleted file mode 100644\nindex 157c874a0bc..00000000000\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonWriterTest.java\n+++ /dev/null\n", "chunk": "@@ -1,208 +0,0 @@\n-/*\n- * (C) Copyright 2018 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Nuno Cunha <ncunha@nuxeo.com>\n- */\n-\n-package org.nuxeo.ecm.platform.comment.impl;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;\n-\n-import java.io.IOException;\n-import java.time.Instant;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n-import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n-import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n-import org.nuxeo.ecm.platform.comment.CommentFeature;\n-import org.nuxeo.ecm.platform.comment.api.Comment;\n-import org.nuxeo.ecm.platform.comment.api.CommentImpl;\n-import org.nuxeo.ecm.platform.comment.api.CommentManager;\n-import org.nuxeo.runtime.test.runner.Features;\n-import org.nuxeo.runtime.test.runner.FeaturesRunner;\n-\n-/**\n- * @since 10.3\n- */\n-@RunWith(FeaturesRunner.class)\n-@Features(CommentFeature.class)\n-public class CommentJsonWriterTest extends AbstractJsonWriterTest.External<CommentJsonWriter, Comment> {\n-\n-    @Inject\n-    protected CommentManager commentManager;\n-\n-    @Inject\n-    protected CoreSession session;\n-\n-    protected DocumentModel docModel;\n-\n-    protected Comment comment;\n-\n-    protected List<Comment> replies;\n-\n-    public CommentJsonWriterTest() {\n-        super(CommentJsonWriter.class, Comment.class);\n-    }\n-\n-    @Before\n-    public void setUp() {\n-\n-        DocumentModel doc = session.createDocumentModel(\"/\", \"myDoc\", \"File\");\n-        docModel = session.createDocument(doc);\n-        session.save();\n-\n-        Comment commentToCreate = new CommentImpl();\n-        commentToCreate.setParentId(docModel.getId());\n-        commentToCreate.setAuthor(session.getPrincipal().getName());\n-        commentToCreate.setText(\"main comment\");\n-        comment = commentManager.createComment(session, commentToCreate);\n-\n-        replies = new ArrayList<>();\n-        Instant date = Instant.now();\n-        Comment firstReply = new CommentImpl();\n-        firstReply.setParentId(comment.getId());\n-        firstReply.setAuthor(session.getPrincipal().getName());\n-        firstReply.setText(\"first reply\");\n-        firstReply.setCreationDate(date);\n-\n-        Comment secondReply = new CommentImpl();\n-        secondReply.setParentId(comment.getId());\n-        secondReply.setAuthor(session.getPrincipal().getName());\n-        secondReply.setText(\"second reply\");\n-        secondReply.setCreationDate(date.plusSeconds(1));\n-\n-        Comment thirdReply = new CommentImpl();\n-        thirdReply.setParentId(comment.getId());\n-        thirdReply.setAuthor(session.getPrincipal().getName());\n-        thirdReply.setText(\"third reply\");\n-        thirdReply.setCreationDate(date.plusSeconds(2));\n-        ((CommentImpl) thirdReply).setOrigin(\"origin\");\n-        ((CommentImpl) thirdReply).setEntity(\"entity\");\n-        ((CommentImpl) thirdReply).setEntityId(\"entityId\");\n-\n-        replies.add(commentManager.createComment(session, firstReply));\n-        replies.add(commentManager.createComment(session, secondReply));\n-        replies.add(commentManager.createComment(session, thirdReply));\n-\n-        session.save();\n-\n-    }\n-\n-    @Test\n-    public void shouldWriteDefaultPropertiesWhenNoFetchersAreProvided() throws IOException {\n-        RenderingContext ctx = RenderingContext.CtxBuilder.session(session).get();\n-        JsonAssert json = jsonAssert(comment, ctx);\n-        assertCommentProperties(json);\n-    }\n-\n-    @Test\n-    public void shouldWriteCompleteRepliesSummaryWhenRepliesFetcherIsProvided() throws IOException {\n-        RenderingContext ctx = RenderingContext.CtxBuilder.session(session).fetch(\"comment\", \"repliesSummary\").get();\n-        JsonAssert json = jsonAssert(comment, ctx);\n-        assertCommentProperties(json);\n-        assertRepliesSummary(json, true);\n-    }\n-\n-    @Test\n-    public void shouldWriteRepliesSummaryWithoutLastReplyWhenRepliesFetcherIsProvidedButThereAreNoReplies()\n-            throws IOException {\n-        RenderingContext ctx = RenderingContext.CtxBuilder.session(session).fetch(\"comment\", \"repliesSummary\").get();\n-        JsonAssert json = jsonAssert(replies.get(0), ctx);\n-        assertCommentProperties(json);\n-        assertRepliesSummary(json, false);\n-    }\n-\n-    @Test\n-    public void shouldWriteCorrectInfoWhenCommentHasRepliesAndFetcherIsProvided() throws IOException {\n-        RenderingContext ctx = RenderingContext.CtxBuilder.session(session).fetch(\"comment\", \"repliesSummary\").get();\n-        JsonAssert json = jsonAssert(comment, ctx);\n-        assertCommentProperties(json);\n-        assertRepliesSummary(json, true);\n-\n-        json.has(\"id\").isEquals(comment.getId());\n-        json.has(\"parentId\").isEquals(comment.getParentId());\n-        json.has(\"ancestorIds\").length(1);\n-        json.has(\"author\").isEquals(comment.getAuthor());\n-        json.has(\"text\").isEquals(comment.getText());\n-        json.has(\"creationDate\").isEquals(comment.getCreationDate().toString());\n-        json.has(\"modificationDate\").isEmptyStringOrNull();\n-        json.has(\"entity\").isEmptyStringOrNull();\n-        json.has(\"entityId\").isEmptyStringOrNull();\n-        json.has(\"origin\").isEmptyStringOrNull();\n-        json.has(\"numberOfReplies\").isEquals(3);\n-        json.has(\"lastReplyDate\").isEquals(replies.get(replies.size() - 1).getCreationDate().toString());\n-    }\n-\n-    @Test\n-    public void shouldWriteCorrectInfoWhenNoFetcherAndCommentIsEntityWithoutReplies() throws IOException {\n-        Comment lastReply = replies.get(replies.size() - 1);\n-        lastReply.setModificationDate(Instant.now());\n-\n-        RenderingContext ctx = RenderingContext.CtxBuilder.session(session).get();\n-        JsonAssert json = jsonAssert(lastReply, ctx);\n-        assertCommentProperties(json);\n-\n-        json.has(\"id\").isEquals(lastReply.getId());\n-        json.has(\"parentId\").isEquals(lastReply.getParentId());\n-        json.has(\"ancestorIds\").length(2);\n-        json.has(\"author\").isEquals(lastReply.getAuthor());\n-        json.has(\"text\").isEquals(lastReply.getText());\n-        json.has(\"creationDate\").isEquals(lastReply.getCreationDate().toString());\n-        json.has(\"modificationDate\").isEquals(lastReply.getModificationDate().toString());\n-        json.has(\"entity\").isEquals(((CommentImpl) lastReply).getEntity());\n-        json.has(\"entityId\").isEquals(((CommentImpl) lastReply).getEntityId());\n-        json.has(\"origin\").isEquals(((CommentImpl) lastReply).getOrigin());\n-        json.hasNot(\"numberOfReplies\");\n-        json.hasNot(\"lastReplyDate\");\n-    }\n-\n-    protected void assertCommentProperties(JsonAssert json) throws IOException {\n-        json.isObject();\n-        assertThat(json.getNode().size(), greaterThanOrEqualTo(11));\n-        json.has(\"entity-type\").isEquals(\"comment\");\n-        json.has(\"id\").isText();\n-        json.has(\"parentId\").isText();\n-        json.has(\"ancestorIds\").isArray();\n-        json.has(\"author\").isText();\n-        json.has(\"text\").isText();\n-        json.has(\"creationDate\").isText();\n-        json.has(\"modificationDate\");\n-        json.has(\"entity\");\n-        json.has(\"entityId\");\n-        json.has(\"origin\");\n-        json.has(\"permissions\").isArray();\n-    }\n-\n-    protected void assertRepliesSummary(JsonAssert json, boolean isLastReplyAvailable) throws IOException {\n-        json.has(\"numberOfReplies\").isInt();\n-        if (isLastReplyAvailable) {\n-            json.has(\"lastReplyDate\").isText();\n-        } else {\n-            json.hasNot(\"lasReplyDate\");\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"oid": "886e9fbcf58a75010b635b3ec569f5e1f429d625", "url": "https://github.com/nuxeo/nuxeo/commit/886e9fbcf58a75010b635b3ec569f5e1f429d625", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-10T13:26:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MjIwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377062201", "body": "Cherry pick issue I think, the feature is only available on master.", "bodyText": "Cherry pick issue I think, the feature is only available on master.", "bodyHTML": "<p dir=\"auto\">Cherry pick issue I think, the feature is only available on master.</p>", "author": "kevinleturc", "createdAt": "2020-02-10T13:30:38Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -72,12 +79,34 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     */\n+    public static final String AUTOSUBSCRIBE_CONFIG_KEY = \"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\";\n+\n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + ECM_ANCESTORID + \" = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+\n+    /** @since 11.1 **/\n+    public static final String COMMENT_RELATED_TEXT_ID = \"commentRelatedTextId_%s\";", "originalCommit": "886e9fbcf58a75010b635b3ec569f5e1f429d625", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NzE3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377067178", "bodyText": "Yes this is related to full text search. I'll remove it.", "author": "NourNuxeo", "createdAt": "2020-02-10T13:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MjIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex cdd7496c137..ddb0b64ce3d 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -104,9 +104,6 @@ public class TreeCommentManager extends AbstractCommentManager {\n     protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR = //\n             QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n \n-    /** @since 11.1 **/\n-    public static final String COMMENT_RELATED_TEXT_ID = \"commentRelatedTextId_%s\";\n-\n     @Override\n     public List<DocumentModel> getComments(CoreSession s, DocumentModel docModel) {\n         // Check permissions\n", "next_change": {"commit": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex ddb0b64ce3d..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -105,48 +106,24 @@ public class TreeCommentManager extends AbstractCommentManager {\n             QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n \n     @Override\n-    public List<DocumentModel> getComments(CoreSession s, DocumentModel docModel) {\n-        // Check permissions\n-        checkReadCommentPermissions(s, docModel.getRef());\n-        return CoreInstance.doPrivileged(s, session -> {\n-            PageProvider<DocumentModel> pageProvider = getCommentsPageProvider(session, docModel, null, null, true);\n-\n-            return pageProvider.getCurrentPage();\n-        });\n+    public List<DocumentModel> getComments(CoreSession session, DocumentModel doc) {\n+        return getCommentDocuments(session, doc.getId(), null, null, true);\n     }\n \n     @Override\n-    public Comment getComment(CoreSession s, String commentId) {\n-        checkReadCommentPermissions(s, new IdRef(commentId));\n-        return CoreInstance.doPrivileged(s, session -> {\n-            DocumentModel commentModel = getCommentDocumentModel(s, new IdRef(commentId));\n-            return Comments.newComment(commentModel);\n-        });\n+    public Comment getComment(CoreSession session, String commentId) {\n+        DocumentModel commentDoc = getCommentDocumentModel(session, commentId);\n+        return commentDoc.getAdapter(Comment.class);\n     }\n \n     @Override\n-    public PartialList<Comment> getComments(CoreSession s, String documentId, Long pageSize, Long currentPageIndex,\n-            boolean sortAscending) {\n-        IdRef docRef = new IdRef(documentId);\n-        boolean exists = CoreInstance.doPrivileged(s, session -> {\n-            return session.exists(docRef);\n-        });\n-        if (!exists) {\n-            return new PartialList<>(Collections.emptyList(), 0);\n-        }\n-        // Check permissions\n-        checkReadCommentPermissions(s, new IdRef(documentId));\n-        DocumentModel documentModel = s.getDocument(docRef);\n-        return CoreInstance.doPrivileged(s, session -> {\n-            PageProvider<DocumentModel> pageProvider = getCommentsPageProvider(session, documentModel, pageSize,\n-                    currentPageIndex, sortAscending);\n-\n-            List<DocumentModel> commentList = pageProvider.getCurrentPage();\n-            return commentList.stream()\n-                              .map(Comments::newComment)\n-                              .collect(collectingAndThen(toList(),\n-                                      list -> new PartialList<>(list, pageProvider.getResultsCount())));\n-        });\n+    public PartialList<Comment> getComments(CoreSession session, String documentId, Long pageSize,\n+            Long currentPageIndex, boolean sortAscending) {\n+        PartialList<DocumentModel> result = getCommentDocuments(session, documentId, pageSize, currentPageIndex,\n+                sortAscending);\n+        return result.stream()\n+                     .map(doc -> doc.getAdapter(Comment.class))\n+                     .collect(collectingAndThen(toList(), list -> new PartialList<>(list, result.totalSize())));\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"oid": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "url": "https://github.com/nuxeo/nuxeo/commit/1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-10T13:50:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3OTA4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376479085", "body": "```suggestion\r\n            log.debug(\"Principal not found for: {}, author);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Principal not found: \" + principal);\n          \n          \n            \n                        log.debug(\"Principal not found for: {}, author);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Principal not found<span class=\"x x-first\">: </span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> principal</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Principal not found<span class=\"x x-first x-last\"> for: {}, author</span>);</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-02-07T16:18:32Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -134,9 +138,22 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        }\n+        if (StringUtils.isBlank(author)) {\n+            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n+            author = contributors[0];\n+        }\n+\n+        NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n+        // If principal doesn't exist anymore\n+        if (principal == null) {\n+            log.debug(\"Principal not found: \" + principal);", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MzQ3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r378153470", "bodyText": "Ok author instead of principal but this is the old Log interface so it doesn't have the args substitution method.\nhere I need to log.debug(\"Principal not found: \" + author);\nBut I'll do this on master", "author": "NourNuxeo", "createdAt": "2020-02-12T10:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3OTA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\nindex 27ef951c21c..287bf91a33c 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n", "chunk": "@@ -151,7 +151,7 @@ public abstract class AbstractCommentManager implements CommentManager {\n         NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n         // If principal doesn't exist anymore\n         if (principal == null) {\n-            log.debug(\"Principal not found: \" + principal);\n+            log.debug(\"Principal not found: \" + author);\n         }\n         return principal;\n     }\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\nindex 287bf91a33c..bfe7cff6cc4 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n", "chunk": "@@ -151,7 +193,7 @@ public abstract class AbstractCommentManager implements CommentManager {\n         NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n         // If principal doesn't exist anymore\n         if (principal == null) {\n-            log.debug(\"Principal not found: \" + author);\n+            log.debug(\"Principal not found: \" + principal);\n         }\n         return principal;\n     }\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\nindex bfe7cff6cc4..039fe90b4b1 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java\n", "chunk": "@@ -193,7 +193,7 @@ public abstract class AbstractCommentManager implements CommentManager {\n         NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n         // If principal doesn't exist anymore\n         if (principal == null) {\n-            log.debug(\"Principal not found: \" + principal);\n+            log.debug(\"Principal not found: \" + author);\n         }\n         return principal;\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDI1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376480256", "body": "```suggestion\r\n    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel comment) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n          \n          \n            \n                protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel comment) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">void</span> handleNotificationAutoSubscriptions(<span class=\"pl-smi\">CoreSession</span> session, <span class=\"pl-smi\">DocumentModel</span> <span class=\"x x-first x-last\">commentModelToCreate</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">void</span> handleNotificationAutoSubscriptions(<span class=\"pl-smi\">CoreSession</span> session, <span class=\"pl-smi\">DocumentModel</span> <span class=\"x x-first x-last\">comment</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-02-07T16:20:42Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -187,11 +217,26 @@ public DocumentModel createComment(DocumentModel documentModel, DocumentModel co\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n+            handleNotificationAutoSubscriptions(session, commentModelToCreate);\n             notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n+    /**\n+     * Resolves top level document and calls\n+     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n+     *\n+     * @param session the core session\n+     * @param commentModelToCreate the comment being added\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NjQwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r378186400", "bodyText": "In fact it should be:\nprotected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDoc) {\nAs comment variable name is \"reserved\" for the Comment objects type.", "author": "kevinleturc", "createdAt": "2020-02-12T11:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0df0a5c788546bee17d3391f78721ace3b535766", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..cdd7496c137 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -223,20 +223,6 @@ public class TreeCommentManager extends AbstractCommentManager {\n         });\n     }\n \n-    /**\n-     * Resolves top level document and calls\n-     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n-     *\n-     * @param session the core session\n-     * @param commentModelToCreate the comment being added\n-     * @since 11.1\n-     */\n-    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n-        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));\n-        DocumentModel topLevelDocument = session.getDocument(topLevelDocRef);\n-        handleNotificationAutoSubscriptions(session, topLevelDocument, commentModelToCreate);\n-    }\n-\n     @Override\n     public DocumentModel createLocatedComment(DocumentModel docModel, DocumentModel comment, String path) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n", "next_change": {"commit": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex cdd7496c137..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -157,139 +131,137 @@ public class TreeCommentManager extends AbstractCommentManager {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n+    @Override\n+    public DocumentModel getThreadForComment(DocumentModel comment) {\n+        throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n+    }\n+\n     @Override\n     public Comment getExternalComment(CoreSession session, String entityId) {\n-        // Get the external comment\n-        DocumentModel commentModel = getExternalCommentModel(session, entityId);\n-        // Check the read permissions using the given session\n-        checkReadCommentPermissions(session, commentModel.getRef());\n-        return Framework.doPrivileged(() -> Comments.newComment(commentModel));\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        return commentDoc.getAdapter(Comment.class);\n     }\n \n     @Override\n-    public Comment createComment(CoreSession s, Comment comment) {\n-        checkReadCommentPermissions(s, new IdRef(comment.getParentId()));\n+    public Comment createComment(CoreSession session, Comment comment) {\n+        DocumentRef parentRef = new IdRef(comment.getParentId());\n+        checkCreateCommentPermissions(session, parentRef);\n \n         // Initiate Creation Date if it is not done yet\n         if (comment.getCreationDate() == null) {\n             comment.setCreationDate(Instant.now());\n         }\n \n-        return CoreInstance.doPrivileged(s, session -> {\n-            DocumentModel documentModel = getCommentDocumentModel(session, new IdRef(comment.getParentId()));\n-            // Get the location where to comment will be stored\n-            String path = getLocationOfCommentCreation(session, documentModel);\n+        return CoreInstance.doPrivileged(session, s -> {\n+            DocumentModel commentedDoc = s.getDocument(parentRef);\n+            // Get the location where comment will be stored\n+            String path = getLocationOfCommentCreation(s, commentedDoc);\n \n-            DocumentModel commentDocModel = session.createDocumentModel(path, COMMENT_NAME, COMMENT_DOC_TYPE);\n-            Comments.commentToDocumentModel(comment, commentDocModel);\n+            DocumentModel commentDoc = s.createDocumentModel(path, COMMENT_NAME, comment.getDocument().getType());\n+            if (comment.getDocument().hasFacet(EXTERNAL_ENTITY_FACET)) {\n+                commentDoc.addFacet(EXTERNAL_ENTITY_FACET);\n+            }\n+            applyDirtyPropertyValues(comment.getDocument(), commentDoc);\n \n-            commentDocModel.setPropertyValue(COMMENT_ANCESTOR_IDS,\n-                    (Serializable) computeAncestorIds(session, comment.getParentId()));\n+            commentDoc.setPropertyValue(COMMENT_ANCESTOR_IDS, computeAncestorIds(session, comment.getParentId()));\n \n-            if (comment instanceof ExternalEntity) {\n-                commentDocModel.addFacet(EXTERNAL_ENTITY_FACET);\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocModel);\n-            }\n+            // Create the comment document model\n+            commentDoc = s.createDocument(commentDoc);\n+            handleNotificationAutoSubscriptions(session, commentDoc);\n+            notifyEvent(s, CommentEvents.COMMENT_ADDED, commentedDoc, commentDoc);\n \n-            commentDocModel = session.createDocument(commentDocModel);\n-            handleNotificationAutoSubscriptions(session, commentDocModel);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentDocModel);\n-            return Comments.newComment(commentDocModel);\n+            return commentDoc.getAdapter(Comment.class);\n         });\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel documentModel, DocumentModel commentDocModel) {\n+    public DocumentModel createComment(DocumentModel commentedDoc, DocumentModel commentDoc) {\n         // Check the right permissions on document that we want to comment\n-        checkCreateCommentPermissions(commentDocModel.getCoreSession(), documentModel.getRef());\n+        checkCreateCommentPermissions(commentDoc.getCoreSession(), commentedDoc.getRef());\n \n-        return CoreInstance.doPrivileged(commentDocModel.getCoreSession(), session -> {\n+        return CoreInstance.doPrivileged(commentDoc.getCoreSession(), session -> {\n             // Get the location to store the comment\n-            String path = getLocationOfCommentCreation(session, documentModel);\n+            String path = getLocationOfCommentCreation(session, commentedDoc);\n \n-            DocumentModel commentModelToCreate = session.createDocumentModel(path, COMMENT_NAME,\n-                    commentDocModel.getType());\n-            commentModelToCreate.copyContent(commentDocModel);\n+            DocumentModel commentModelToCreate = session.createDocumentModel(path, COMMENT_NAME, commentDoc.getType());\n+            commentModelToCreate.copyContent(commentDoc);\n \n             // Should compute ancestors and set comment:parentId for backward compatibility\n+            commentModelToCreate.setPropertyValue(COMMENT_PARENT_ID, commentedDoc.getId());\n             commentModelToCreate.setPropertyValue(COMMENT_ANCESTOR_IDS,\n-                    (Serializable) computeAncestorIds(session, documentModel.getId()));\n+                    computeAncestorIds(session, commentedDoc.getId()));\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n             handleNotificationAutoSubscriptions(session, commentModelToCreate);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n+            notifyEvent(session, CommentEvents.COMMENT_ADDED, commentedDoc, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n     @Override\n-    public DocumentModel createLocatedComment(DocumentModel docModel, DocumentModel comment, String path) {\n+    public DocumentModel createLocatedComment(DocumentModel doc, DocumentModel comment, String path) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, String text) {\n+    public DocumentModel createComment(DocumentModel doc, String text) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, String text, String author) {\n+    public DocumentModel createComment(DocumentModel doc, String text, String author) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, DocumentModel parent, DocumentModel child) {\n+    public DocumentModel createComment(DocumentModel doc, DocumentModel parent, DocumentModel child) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public Comment updateComment(CoreSession s, String commentId, Comment comment) {\n-        // Check the permissions\n-        checkUpdateCommentPermissions(s, comment);\n-\n-        return CoreInstance.doPrivileged(s, session -> {\n-            // Get the comment doc model\n-            DocumentModel commentDocumentModel = getCommentDocumentModel(session, new IdRef(commentId));\n-            // Initiate Modification Date if it is not done yet\n-            if (comment.getModificationDate() == null) {\n-                comment.setModificationDate(Instant.now());\n-            }\n-\n-            Comments.commentToDocumentModel(comment, commentDocumentModel);\n-            if (comment instanceof ExternalEntity) {\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocumentModel);\n-            }\n-            session.saveDocument(commentDocumentModel);\n-            notifyEvent(session, CommentEvents.COMMENT_UPDATED, commentDocumentModel);\n-            return Comments.newComment(commentDocumentModel);\n-        });\n+    public Comment updateComment(CoreSession session, String commentId, Comment comment) {\n+        // Get the comment doc model\n+        DocumentModel commentDoc = getCommentDocumentModel(session, commentId);\n+        return update(session, comment, commentDoc);\n     }\n \n     @Override\n-    public Comment updateExternalComment(CoreSession s, String entityId, Comment comment) {\n-        // Check the permissions\n-        checkUpdateCommentPermissions(s, comment);\n-\n-        return CoreInstance.doPrivileged(s, session -> {\n-            // Get the external comment doc model\n-            DocumentModel commentDocModel = getExternalCommentModel(session, entityId);\n-            Comments.commentToDocumentModel(comment, commentDocModel);\n-            if (comment instanceof ExternalEntity) {\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocModel);\n+    public Comment updateExternalComment(CoreSession session, String entityId, Comment comment) {\n+        // Get the external comment doc model\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        return update(session, comment, commentDoc);\n+    }\n+\n+    /**\n+     * @param session the user session, in order to check permissions\n+     * @param comment the comment holding new data\n+     * @param commentDoc the {@link DocumentModel} just retrieved from DB\n+     */\n+    protected Comment update(CoreSession session, Comment comment, DocumentModel commentDoc) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !commentDoc.getPropertyValue(COMMENT_AUTHOR).equals(principal.getName())) {\n+            throw new CommentSecurityException(String.format(\"The user %s cannot edit comments of document %s\",\n+                    principal.getName(), comment.getParentId()));\n+        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            if (comment.getModificationDate() == null) {\n+                comment.setModificationDate(Instant.now());\n+            }\n+            if (comment.getDocument().hasFacet(EXTERNAL_ENTITY_FACET)) {\n+                commentDoc.addFacet(EXTERNAL_ENTITY_FACET);\n             }\n-            session.saveDocument(commentDocModel);\n-            notifyEvent(session, CommentEvents.COMMENT_UPDATED, commentDocModel);\n-            return Comments.newComment(commentDocModel);\n+            applyDirtyPropertyValues(comment.getDocument(), commentDoc);\n+            DocumentModel updatedDoc = s.saveDocument(commentDoc);\n+            notifyEvent(session, CommentEvents.COMMENT_UPDATED, updatedDoc);\n+            return updatedDoc.getAdapter(Comment.class);\n         });\n     }\n \n     @Override\n-    public void deleteExternalComment(CoreSession s, String entityId) {\n-        DocumentModel commentDocModel = CoreInstance.doPrivileged(s, session -> {\n-            return getExternalCommentModel(session, entityId);\n-        });\n-        removeComment(s, commentDocModel.getRef());\n+    public void deleteExternalComment(CoreSession session, String entityId) {\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        removeComment(session, commentDoc.getRef());\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDk0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376480949", "body": "```suggestion\r\n        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, comment.getRef());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));\n          \n          \n            \n                    DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, comment.getRef());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DocumentRef</span> topLevelDocRef <span class=\"pl-k\">=</span> getTopLevelCommentAncestor(session, <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">IdRef</span><span class=\"x\">(commentModelToCreate</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getId()</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">DocumentRef</span> topLevelDocRef <span class=\"pl-k\">=</span> getTopLevelCommentAncestor(session, <span class=\"x x-first\">comment</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getRef(</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-02-07T16:21:47Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -187,11 +217,26 @@ public DocumentModel createComment(DocumentModel documentModel, DocumentModel co\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n+            handleNotificationAutoSubscriptions(session, commentModelToCreate);\n             notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n+    /**\n+     * Resolves top level document and calls\n+     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n+     *\n+     * @param session the core session\n+     * @param commentModelToCreate the comment being added\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n+        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0df0a5c788546bee17d3391f78721ace3b535766", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..cdd7496c137 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -223,20 +223,6 @@ public class TreeCommentManager extends AbstractCommentManager {\n         });\n     }\n \n-    /**\n-     * Resolves top level document and calls\n-     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n-     *\n-     * @param session the core session\n-     * @param commentModelToCreate the comment being added\n-     * @since 11.1\n-     */\n-    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n-        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));\n-        DocumentModel topLevelDocument = session.getDocument(topLevelDocRef);\n-        handleNotificationAutoSubscriptions(session, topLevelDocument, commentModelToCreate);\n-    }\n-\n     @Override\n     public DocumentModel createLocatedComment(DocumentModel docModel, DocumentModel comment, String path) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n", "next_change": {"commit": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex cdd7496c137..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -157,139 +131,137 @@ public class TreeCommentManager extends AbstractCommentManager {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n+    @Override\n+    public DocumentModel getThreadForComment(DocumentModel comment) {\n+        throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n+    }\n+\n     @Override\n     public Comment getExternalComment(CoreSession session, String entityId) {\n-        // Get the external comment\n-        DocumentModel commentModel = getExternalCommentModel(session, entityId);\n-        // Check the read permissions using the given session\n-        checkReadCommentPermissions(session, commentModel.getRef());\n-        return Framework.doPrivileged(() -> Comments.newComment(commentModel));\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        return commentDoc.getAdapter(Comment.class);\n     }\n \n     @Override\n-    public Comment createComment(CoreSession s, Comment comment) {\n-        checkReadCommentPermissions(s, new IdRef(comment.getParentId()));\n+    public Comment createComment(CoreSession session, Comment comment) {\n+        DocumentRef parentRef = new IdRef(comment.getParentId());\n+        checkCreateCommentPermissions(session, parentRef);\n \n         // Initiate Creation Date if it is not done yet\n         if (comment.getCreationDate() == null) {\n             comment.setCreationDate(Instant.now());\n         }\n \n-        return CoreInstance.doPrivileged(s, session -> {\n-            DocumentModel documentModel = getCommentDocumentModel(session, new IdRef(comment.getParentId()));\n-            // Get the location where to comment will be stored\n-            String path = getLocationOfCommentCreation(session, documentModel);\n+        return CoreInstance.doPrivileged(session, s -> {\n+            DocumentModel commentedDoc = s.getDocument(parentRef);\n+            // Get the location where comment will be stored\n+            String path = getLocationOfCommentCreation(s, commentedDoc);\n \n-            DocumentModel commentDocModel = session.createDocumentModel(path, COMMENT_NAME, COMMENT_DOC_TYPE);\n-            Comments.commentToDocumentModel(comment, commentDocModel);\n+            DocumentModel commentDoc = s.createDocumentModel(path, COMMENT_NAME, comment.getDocument().getType());\n+            if (comment.getDocument().hasFacet(EXTERNAL_ENTITY_FACET)) {\n+                commentDoc.addFacet(EXTERNAL_ENTITY_FACET);\n+            }\n+            applyDirtyPropertyValues(comment.getDocument(), commentDoc);\n \n-            commentDocModel.setPropertyValue(COMMENT_ANCESTOR_IDS,\n-                    (Serializable) computeAncestorIds(session, comment.getParentId()));\n+            commentDoc.setPropertyValue(COMMENT_ANCESTOR_IDS, computeAncestorIds(session, comment.getParentId()));\n \n-            if (comment instanceof ExternalEntity) {\n-                commentDocModel.addFacet(EXTERNAL_ENTITY_FACET);\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocModel);\n-            }\n+            // Create the comment document model\n+            commentDoc = s.createDocument(commentDoc);\n+            handleNotificationAutoSubscriptions(session, commentDoc);\n+            notifyEvent(s, CommentEvents.COMMENT_ADDED, commentedDoc, commentDoc);\n \n-            commentDocModel = session.createDocument(commentDocModel);\n-            handleNotificationAutoSubscriptions(session, commentDocModel);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentDocModel);\n-            return Comments.newComment(commentDocModel);\n+            return commentDoc.getAdapter(Comment.class);\n         });\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel documentModel, DocumentModel commentDocModel) {\n+    public DocumentModel createComment(DocumentModel commentedDoc, DocumentModel commentDoc) {\n         // Check the right permissions on document that we want to comment\n-        checkCreateCommentPermissions(commentDocModel.getCoreSession(), documentModel.getRef());\n+        checkCreateCommentPermissions(commentDoc.getCoreSession(), commentedDoc.getRef());\n \n-        return CoreInstance.doPrivileged(commentDocModel.getCoreSession(), session -> {\n+        return CoreInstance.doPrivileged(commentDoc.getCoreSession(), session -> {\n             // Get the location to store the comment\n-            String path = getLocationOfCommentCreation(session, documentModel);\n+            String path = getLocationOfCommentCreation(session, commentedDoc);\n \n-            DocumentModel commentModelToCreate = session.createDocumentModel(path, COMMENT_NAME,\n-                    commentDocModel.getType());\n-            commentModelToCreate.copyContent(commentDocModel);\n+            DocumentModel commentModelToCreate = session.createDocumentModel(path, COMMENT_NAME, commentDoc.getType());\n+            commentModelToCreate.copyContent(commentDoc);\n \n             // Should compute ancestors and set comment:parentId for backward compatibility\n+            commentModelToCreate.setPropertyValue(COMMENT_PARENT_ID, commentedDoc.getId());\n             commentModelToCreate.setPropertyValue(COMMENT_ANCESTOR_IDS,\n-                    (Serializable) computeAncestorIds(session, documentModel.getId()));\n+                    computeAncestorIds(session, commentedDoc.getId()));\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n             handleNotificationAutoSubscriptions(session, commentModelToCreate);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n+            notifyEvent(session, CommentEvents.COMMENT_ADDED, commentedDoc, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n     @Override\n-    public DocumentModel createLocatedComment(DocumentModel docModel, DocumentModel comment, String path) {\n+    public DocumentModel createLocatedComment(DocumentModel doc, DocumentModel comment, String path) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, String text) {\n+    public DocumentModel createComment(DocumentModel doc, String text) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, String text, String author) {\n+    public DocumentModel createComment(DocumentModel doc, String text, String author) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public DocumentModel createComment(DocumentModel docModel, DocumentModel parent, DocumentModel child) {\n+    public DocumentModel createComment(DocumentModel doc, DocumentModel parent, DocumentModel child) {\n         throw new UnsupportedOperationException(SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE);\n     }\n \n     @Override\n-    public Comment updateComment(CoreSession s, String commentId, Comment comment) {\n-        // Check the permissions\n-        checkUpdateCommentPermissions(s, comment);\n-\n-        return CoreInstance.doPrivileged(s, session -> {\n-            // Get the comment doc model\n-            DocumentModel commentDocumentModel = getCommentDocumentModel(session, new IdRef(commentId));\n-            // Initiate Modification Date if it is not done yet\n-            if (comment.getModificationDate() == null) {\n-                comment.setModificationDate(Instant.now());\n-            }\n-\n-            Comments.commentToDocumentModel(comment, commentDocumentModel);\n-            if (comment instanceof ExternalEntity) {\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocumentModel);\n-            }\n-            session.saveDocument(commentDocumentModel);\n-            notifyEvent(session, CommentEvents.COMMENT_UPDATED, commentDocumentModel);\n-            return Comments.newComment(commentDocumentModel);\n-        });\n+    public Comment updateComment(CoreSession session, String commentId, Comment comment) {\n+        // Get the comment doc model\n+        DocumentModel commentDoc = getCommentDocumentModel(session, commentId);\n+        return update(session, comment, commentDoc);\n     }\n \n     @Override\n-    public Comment updateExternalComment(CoreSession s, String entityId, Comment comment) {\n-        // Check the permissions\n-        checkUpdateCommentPermissions(s, comment);\n-\n-        return CoreInstance.doPrivileged(s, session -> {\n-            // Get the external comment doc model\n-            DocumentModel commentDocModel = getExternalCommentModel(session, entityId);\n-            Comments.commentToDocumentModel(comment, commentDocModel);\n-            if (comment instanceof ExternalEntity) {\n-                Comments.externalEntityToDocumentModel((ExternalEntity) comment, commentDocModel);\n+    public Comment updateExternalComment(CoreSession session, String entityId, Comment comment) {\n+        // Get the external comment doc model\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        return update(session, comment, commentDoc);\n+    }\n+\n+    /**\n+     * @param session the user session, in order to check permissions\n+     * @param comment the comment holding new data\n+     * @param commentDoc the {@link DocumentModel} just retrieved from DB\n+     */\n+    protected Comment update(CoreSession session, Comment comment, DocumentModel commentDoc) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !commentDoc.getPropertyValue(COMMENT_AUTHOR).equals(principal.getName())) {\n+            throw new CommentSecurityException(String.format(\"The user %s cannot edit comments of document %s\",\n+                    principal.getName(), comment.getParentId()));\n+        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            if (comment.getModificationDate() == null) {\n+                comment.setModificationDate(Instant.now());\n+            }\n+            if (comment.getDocument().hasFacet(EXTERNAL_ENTITY_FACET)) {\n+                commentDoc.addFacet(EXTERNAL_ENTITY_FACET);\n             }\n-            session.saveDocument(commentDocModel);\n-            notifyEvent(session, CommentEvents.COMMENT_UPDATED, commentDocModel);\n-            return Comments.newComment(commentDocModel);\n+            applyDirtyPropertyValues(comment.getDocument(), commentDoc);\n+            DocumentModel updatedDoc = s.saveDocument(commentDoc);\n+            notifyEvent(session, CommentEvents.COMMENT_UPDATED, updatedDoc);\n+            return updatedDoc.getAdapter(Comment.class);\n         });\n     }\n \n     @Override\n-    public void deleteExternalComment(CoreSession s, String entityId) {\n-        DocumentModel commentDocModel = CoreInstance.doPrivileged(s, session -> {\n-            return getExternalCommentModel(session, entityId);\n-        });\n-        removeComment(s, commentDocModel.getRef());\n+    public void deleteExternalComment(CoreSession session, String entityId) {\n+        DocumentModel commentDoc = getExternalCommentModel(session, entityId);\n+        removeComment(session, commentDoc.getRef());\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzgwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376483801", "body": "I would simplify the Javadoc here...\r\n```\r\nReturns {@code true} if the document has comments.\r\n```", "bodyText": "I would simplify the Javadoc here...\nReturns {@code true} if the document has comments.", "bodyHTML": "<p dir=\"auto\">I would simplify the Javadoc here...</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Returns {@code true} if the document has comments.\"><pre><code>Returns {@code true} if the document has comments.\n</code></pre></div>", "author": "troger", "createdAt": "2020-02-07T16:27:07Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..7e3636c38ab 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -533,11 +516,8 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     /**\n-     * Checks if a document has comments.\n+     * Returns {@code true} if the document has comments.\n      *\n-     * @param session the core session\n-     * @param document the document model who's comments are being counted\n-     * @return {@code true} if comments were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document) {\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 7e3636c38ab..4d6c37caeb1 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -435,89 +344,99 @@ public class TreeCommentManager extends AbstractCommentManager {\n     /**\n      * Remove the comment of the given {@code documentRef}\n      *\n-     * @param s the core session\n+     * @param session the user session, in order to check permissions\n      * @param documentRef the documentRef of the comment document model to delete\n      */\n-    protected void removeComment(CoreSession s, DocumentRef documentRef) {\n-        NuxeoPrincipal principal = s.getPrincipal();\n-        CoreInstance.doPrivileged(s, session -> {\n-            DocumentRef ancestorRef = getTopLevelCommentAncestor(session, documentRef);\n-            DocumentModel commentDocModel = session.getDocument(documentRef);\n-            Serializable author = commentDocModel.getPropertyValue(COMMENT_AUTHOR);\n+    protected void removeComment(CoreSession session, DocumentRef documentRef) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        CoreInstance.doPrivileged(session, s -> {\n+            DocumentRef ancestorRef = getTopLevelDocumentRef(s, documentRef);\n+            DocumentModel commentDoc = s.getDocument(documentRef);\n+            Serializable author = commentDoc.getPropertyValue(COMMENT_AUTHOR);\n             if (!(principal.isAdministrator() //\n                     || author.equals(principal.getName()) //\n-                    || session.hasPermission(principal, ancestorRef, EVERYTHING))) {\n-                throw new CommentSecurityException(String.format(\"The user %s cannot delete comment of the document %s\",\n-                        principal.getName(), ancestorRef));\n+                    || s.hasPermission(principal, ancestorRef, EVERYTHING))) {\n+                throw new CommentSecurityException(String.format(\n+                        \"The user %s cannot delete comments of the document %s\", principal.getName(), ancestorRef));\n             }\n-            DocumentModel parent = session.getDocument(commentDocModel.getParentRef());\n-            commentDocModel.detach(true);\n-            session.removeDocument(documentRef);\n-            notifyEvent(session, CommentEvents.COMMENT_REMOVED, commentDocModel);\n+            // fetch parents before deleting document\n+            DocumentModel topLevelDoc = getTopLevelDocument(s, commentDoc);\n+            DocumentModel commentedDoc = getCommentedDocument(s, commentDoc);\n+            // finally delete document\n+            s.removeDocument(documentRef);\n+            notifyEvent(s, CommentEvents.COMMENT_REMOVED, topLevelDoc, commentedDoc, commentDoc);\n         });\n-\n     }\n \n     /**\n+     * @param session the user session, in order to implicitly check permissions\n      * @return the comment document model of the given {@code documentRef} if it exists, otherwise throws a\n      *         {@link CommentNotFoundException}\n      * @throws CommentNotFoundException\n      */\n-    public DocumentModel getCommentDocumentModel(CoreSession session, DocumentRef documentRef) {\n+    protected DocumentModel getCommentDocumentModel(CoreSession session, String id) {\n         try {\n-            return session.getDocument(documentRef);\n-        } catch (DocumentNotFoundException dnf) {\n-            throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", documentRef));\n+            return session.getDocument(new IdRef(id));\n+        } catch (DocumentNotFoundException dnfe) {\n+            throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", id), dnfe);\n+        } catch (DocumentSecurityException dse) {\n+            throw new CommentSecurityException(String.format(\"The user %s does not have access to the comment %s\",\n+                    session.getPrincipal().getName(), id), dse);\n         }\n     }\n \n     /**\n-     * @return the page provider that hold the comments documents model\n+     * @return the page provider current page\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected PageProvider<DocumentModel> getCommentsPageProvider(CoreSession session, DocumentModel documentModel,\n-            Long pageSize, Long currentPageIndex, boolean sortAscending) {\n-\n-        PageProviderService ppService = Framework.getService(PageProviderService.class);\n+    protected PartialList<DocumentModel> getCommentDocuments(CoreSession session, String documentId, Long pageSize,\n+            Long currentPageIndex, boolean sortAscending) {\n+        try {\n+            DocumentModel doc = session.getDocument(new IdRef(documentId));\n+            // Depending on the case, the `doc` can be a comment or the top level document\n+            // if it's the top level document, then we should retrieve all comments under `Comments` folder\n+            // if it's a comment, then get all comments under it\n+            if (!doc.hasSchema(COMMENT_SCHEMA) && session.hasChild(doc.getRef(), COMMENTS_DIRECTORY_NAME)) {\n+                DocumentModel commentsFolder = session.getChild(doc.getRef(), COMMENTS_DIRECTORY_NAME);\n+                documentId = commentsFolder.getId();\n+            }\n \n-        Map<String, Serializable> props = Collections.singletonMap(CORE_SESSION_PROPERTY, (Serializable) session);\n-        List<SortInfo> sortInfos = singletonList(new SortInfo(COMMENT_CREATION_DATE, sortAscending));\n-\n-        // Depending on the case, the `documentModel` can be a comment or not\n-        // if it's a not comment, then we should retrieve all comments under `Comments` folder\n-        // otherwise, it's a comment, then get all comments under it\n-        String documentId = documentModel.getId();\n-        if (!documentModel.hasSchema(COMMENT_SCHEMA)\n-                && session.hasChild(documentModel.getRef(), COMMENTS_DIRECTORY_NAME)) {\n-            DocumentModel commentsFolder = session.getChild(documentModel.getRef(), COMMENTS_DIRECTORY_NAME);\n-            documentId = commentsFolder.getId();\n+            PageProviderService ppService = Framework.getService(PageProviderService.class);\n+\n+            Map<String, Serializable> props = Collections.singletonMap(CORE_SESSION_PROPERTY, (Serializable) session);\n+            List<SortInfo> sortInfos = singletonList(new SortInfo(COMMENT_CREATION_DATE, sortAscending));\n+            PageProvider<DocumentModel> pageProvider = (PageProvider<DocumentModel>) ppService.getPageProvider(\n+                    GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME, sortInfos, pageSize, currentPageIndex, props,\n+                    documentId);\n+            return new PartialList<>(pageProvider.getCurrentPage(), pageProvider.getResultsCount());\n+        } catch (DocumentNotFoundException dnfe) {\n+            return new PartialList<>(emptyList(), 0);\n+        } catch (DocumentSecurityException dse) {\n+            throw new CommentSecurityException(\n+                    String.format(\"The user %s does not have access to the comments of document %s\",\n+                            session.getPrincipal().getName(), documentId),\n+                    dse);\n         }\n-\n-        return (PageProvider<DocumentModel>) ppService.getPageProvider(GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME,\n-                sortInfos, pageSize, currentPageIndex, props, documentId);\n     }\n \n     @Override\n-    public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel commentDocumentModel) {\n-        // Case when commentDocumentModel is already the document being commented\n-        DocumentModel commentedDocModel = commentDocumentModel;\n-\n-        // Case when commentDocumentModel is a comment (can be the first comment or any reply)\n-        if (commentDocumentModel.hasSchema(COMMENT_SCHEMA)) {\n-            commentedDocModel = session.getDocument(commentDocumentModel.getParentRef());\n-        }\n+    protected DocumentModel getCommentedDocument(CoreSession session, DocumentModel commentDoc) {\n+        // if comment is a reply then its direct parent is the commented document\n+        DocumentModel commentedDoc = session.getParentDocument(commentDoc.getRef());\n \n-        // Case when commentDocumentModel is the folder that contains the comments\n-        if (COMMENTS_DIRECTORY_TYPE.equals(commentedDocModel.getType())) {\n-            commentedDocModel = session.getDocument(commentedDocModel.getParentRef());\n+        // if direct parent is the Comments folder then the commented document is Comments parent\n+        if (COMMENTS_DIRECTORY_TYPE.equals(commentedDoc.getType())) {\n+            commentedDoc = session.getDocument(commentedDoc.getParentRef());\n         }\n-\n-        return commentedDocModel.getRef();\n+        return commentedDoc;\n     }\n \n     /**\n-     * Returns {@code true} if the document has comments.\n+     * Checks if a document has comments.\n      *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document) {\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 4d6c37caeb1..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -432,11 +432,8 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     /**\n-     * Checks if a document has comments.\n+     * Returns {@code true} if the document has comments.\n      *\n-     * @param session the core session\n-     * @param document the document model who's comments are being counted\n-     * @return {@code true} if comments were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NDA0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376484041", "body": "Same here\r\n```\r\nReturns {@code true} if the documents has comments from the given user.\r\n```", "bodyText": "Same here\nReturns {@code true} if the documents has comments from the given user.", "bodyHTML": "<p dir=\"auto\">Same here</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Returns {@code true} if the documents has comments from the given user.\"><pre><code>Returns {@code true} if the documents has comments from the given user.\n</code></pre></div>", "author": "troger", "createdAt": "2020-02-07T16:27:33Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..7e3636c38ab 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -547,12 +527,8 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     /**\n-     * Checks if a document has comments from a particular user.\n+     * Returns {@code true} if the documents has comments from the given user.\n      *\n-     * @param session the core session\n-     * @param document the document model who's comments are being counted\n-     * @param user the name of the user who's comments are being counted\n-     * @return {@code true} if comments by user were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 7e3636c38ab..4d6c37caeb1 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -527,8 +446,12 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     /**\n-     * Returns {@code true} if the documents has comments from the given user.\n+     * Checks if a document has comments from a particular user.\n      *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 4d6c37caeb1..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -446,12 +443,8 @@ public class TreeCommentManager extends AbstractCommentManager {\n     }\n \n     /**\n-     * Checks if a document has comments from a particular user.\n+     * Returns {@code true} if the documents has comments from the given user.\n      *\n-     * @param session the core session\n-     * @param document the document model who's comments are being counted\n-     * @param user the name of the user who's comments are being counted\n-     * @return {@code true} if comments by user were found\n      * @since 11.1\n      */\n     protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NTUyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376485524", "body": "Not sure it's needed... the method signature/arguments are rather straightforward.", "bodyText": "Not sure it's needed... the method signature/arguments are rather straightforward.", "bodyHTML": "<p dir=\"auto\">Not sure it's needed... the method signature/arguments are rather straightforward.</p>", "author": "troger", "createdAt": "2020-02-07T16:30:10Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR, document.getId(), user);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel topLevelDocument,\n+            DocumentModel commentDocModel) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(topLevelDocument);\n+        if (!hasComments(session, topLevelDocument)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNotifications(topLevelDocument, topLevelDocumentAuthor);\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor != null && topLevelDocumentAuthor.equals(commentAuthor)) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (commentAuthor != null && !hasComments(session, topLevelDocument, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNotifications(topLevelDocument, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to notifications", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 00d02a9a293..7e3636c38ab 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -589,8 +577,6 @@ public class TreeCommentManager extends AbstractCommentManager {\n     /**\n      * Subscribes a user to notifications on the document.\n      *\n-     * @param document the document being commented\n-     * @param user the user to subscribe to notifications\n      * @since 11.1\n      */\n     protected void subscribeToNotifications(DocumentModel document, NuxeoPrincipal user) {\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 7e3636c38ab..4d6c37caeb1 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -577,6 +502,8 @@ public class TreeCommentManager extends AbstractCommentManager {\n     /**\n      * Subscribes a user to notifications on the document.\n      *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to notifications\n      * @since 11.1\n      */\n     protected void subscribeToNotifications(DocumentModel document, NuxeoPrincipal user) {\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\nindex 4d6c37caeb1..43a1214e875 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java\n", "chunk": "@@ -502,8 +493,6 @@ public class TreeCommentManager extends AbstractCommentManager {\n     /**\n      * Subscribes a user to notifications on the document.\n      *\n-     * @param document the document being commented\n-     * @param user the user to subscribe to notifications\n      * @since 11.1\n      */\n     protected void subscribeToNotifications(DocumentModel document, NuxeoPrincipal user) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODMxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376488319", "body": "```suggestion\r\n            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n          \n          \n            \n                        Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Annotation</span> annotation <span class=\"pl-k\">=</span> createAnnotationAndAddSubscription(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">CommentAdded</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Annotation</span> annotation <span class=\"pl-k\">=</span> createAnnotationAndAddSubscription(<span class=\"pl-c1 x x-first x-last\">COMMENT_ADDED_NOTIFICATION</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-02-07T16:35:35Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex 3c761c567fd..c1961d367e2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n-            transactionalFeature.nextTransaction();\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODY2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376488667", "body": "I would have put it after the `createAnnotationAndAddSubscription` call.", "bodyText": "I would have put it after the createAnnotationAndAddSubscription call.", "bodyHTML": "<p dir=\"auto\">I would have put it after the <code>createAnnotationAndAddSubscription</code> call.</p>", "author": "troger", "createdAt": "2020-02-07T16:36:19Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex 3c761c567fd..c1961d367e2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n-            transactionalFeature.nextTransaction();\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -97,11 +97,11 @@ public abstract class AbstractTestAnnotationNotification {\n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n-            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4OTIyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376489221", "body": "Put it after `updateAnnotation`.", "bodyText": "Put it after updateAnnotation.", "bodyHTML": "<p dir=\"auto\">Put it after <code>updateAnnotation</code>.</p>", "author": "troger", "createdAt": "2020-02-07T16:37:23Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateAnnotation() {\n-        // We subscribe to the update document to check that we will not be notified about the annotation updated as\n-        // document (see CommentModificationVeto), only the annotation updated.\n-        Annotation annotation = createAnnotationAndAddSubscription(\"CommentUpdated\", \"Modification\");\n-\n-        captureAndVerifyAnnotationEventNotification(() -> {\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n-            return session.getDocument(new IdRef(annotation.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "originalCommit": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -117,10 +117,10 @@ public abstract class AbstractTestAnnotationNotification {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex 3c761c567fd..c1961d367e2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -117,10 +117,10 @@ public abstract class AbstractTestAnnotationNotification {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n-            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\nindex c1961d367e2..3c761c567fd 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java\n", "chunk": "@@ -117,10 +117,10 @@ public abstract class AbstractTestAnnotationNotification {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n+            transactionalFeature.nextTransaction();\n             DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n             DocumentModel annotationParentDocumentModel = session.getDocument(\n                     new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NDUxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377764514", "body": "Missing `@since`?", "bodyText": "Missing @since?", "bodyHTML": "<p dir=\"auto\">Missing <code>@since</code>?</p>", "author": "troger", "createdAt": "2020-02-11T16:53:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -72,12 +79,31 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     */", "originalCommit": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NjczNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r378166734", "bodyText": "the whole class is @SInCE 11.1", "author": "NourNuxeo", "createdAt": "2020-02-12T10:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NDUxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2Nzg5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377767892", "body": "You should not need to `detach` it... \ud83e\udd14 \r\nFetch the `commentDocModel` after the `nextTransaction` call.\r\n\r\nSame for all other places where you detach a document.", "bodyText": "You should not need to detach it... \ud83e\udd14\nFetch the commentDocModel after the nextTransaction call.\nSame for all other places where you detach a document.", "bodyHTML": "<p dir=\"auto\">You should not need to <code>detach</code> it... <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji><br>\nFetch the <code>commentDocModel</code> after the <code>nextTransaction</code> call.</p>\n<p dir=\"auto\">Same for all other places where you detach a document.</p>", "author": "troger", "createdAt": "2020-02-11T16:58:55Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java", "diffHunk": "@@ -38,4 +50,71 @@ protected CommentManager getCommentManager() {\n     protected Class<? extends CommentManager> getType() {\n         return BridgeCommentManager.class;\n     }\n+\n+    @Test\n+    @Override\n+    public void shouldNotifyEventWhenUpdateComment() {\n+        // We subscribe to the update document to check that we will not be notified about the comment updated as\n+        // document (see CommentModificationVeto), only the comment updated.\n+        Comment comment = createComment(commentedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n+            comment.setText(\"I update the comment\");\n+            commentManager.updateComment(session, comment.getId(), comment);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void shouldNotifyEventWhenRemoveComment() {\n+        Comment comment = createComment(commentedDocumentModel);\n+        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n+        commentDocModel.detach(true);", "originalCommit": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTE5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r378181198", "bodyText": "The detach was done because info was retrieved after deletion.\nI swapped things and retrieved the info before then it went fine \ud83d\udc4d", "author": "NourNuxeo", "createdAt": "2020-02-12T11:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2Nzg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\nindex e50bab9700d..5a4fbc6e823 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n", "chunk": "@@ -76,14 +76,13 @@ public class TestBridgeCommentNotificationFromPropertyToTree extends AbstractTes\n     @Override\n     public void shouldNotifyEventWhenRemoveComment() {\n         Comment comment = createComment(commentedDocumentModel);\n-        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n-        commentDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n+            DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n             commentManager.deleteComment(session, comment.getId());\n+            transactionalFeature.nextTransaction();\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\nindex 5a4fbc6e823..e50bab9700d 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n", "chunk": "@@ -76,13 +76,14 @@ public class TestBridgeCommentNotificationFromPropertyToTree extends AbstractTes\n     @Override\n     public void shouldNotifyEventWhenRemoveComment() {\n         Comment comment = createComment(commentedDocumentModel);\n+        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n+        commentDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n-            DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n             commentManager.deleteComment(session, comment.getId());\n-            transactionalFeature.nextTransaction();\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\nindex e50bab9700d..5a4fbc6e823 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java\n", "chunk": "@@ -76,14 +76,13 @@ public class TestBridgeCommentNotificationFromPropertyToTree extends AbstractTes\n     @Override\n     public void shouldNotifyEventWhenRemoveComment() {\n         Comment comment = createComment(commentedDocumentModel);\n-        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n-        commentDocModel.detach(true);\n         transactionalFeature.nextTransaction();\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n+            DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n             commentManager.deleteComment(session, comment.getId());\n+            transactionalFeature.nextTransaction();\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2ODg1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377768856", "body": "Generally, put the `transactionalFeature.nextTransaction();` just after the code triggering async stuff, and then fetch new documents with the new session.\r\n\r\nSame for all tests in all files in this PR.", "bodyText": "Generally, put the transactionalFeature.nextTransaction(); just after the code triggering async stuff, and then fetch new documents with the new session.\nSame for all tests in all files in this PR.", "bodyHTML": "<p dir=\"auto\">Generally, put the <code>transactionalFeature.nextTransaction();</code> just after the code triggering async stuff, and then fetch new documents with the new session.</p>\n<p dir=\"auto\">Same for all tests in all files in this PR.</p>", "author": "troger", "createdAt": "2020-02-11T17:00:29Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -97,56 +97,84 @@ protected CommentManager getCommentManager() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateComment() {\n-        // We subscribe to the creation document to check that we will not be notified about the comment creation as\n-        // document (see CommentCreationVeto), only the comment added, and the 'File' document creation\n-        captureAndVerifyCommentEventNotification(() -> {\n-            Comment createdComment = createCommentAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Comment comment = createComment(commentedDocumentModel);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "originalCommit": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "935f1d14d60a740d198b43576412575dead0271c", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\nindex 39aa1884934..27ad7db14f2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n", "chunk": "@@ -99,10 +99,10 @@ public abstract class AbstractTestCommentNotification {\n     public void shouldNotifyEventWhenCreateComment() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n             Comment comment = createComment(commentedDocumentModel);\n+            transactionalFeature.nextTransaction();\n             DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\nindex 27ad7db14f2..39aa1884934 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n", "chunk": "@@ -99,10 +99,10 @@ public abstract class AbstractTestCommentNotification {\n     public void shouldNotifyEventWhenCreateComment() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n             Comment comment = createComment(commentedDocumentModel);\n-            transactionalFeature.nextTransaction();\n             DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": {"commit": "279bd24f8081a9faac94a424489563c614d73640", "changed_code": [{"header": "diff --git a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\nindex 39aa1884934..27ad7db14f2 100644\n--- a/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n+++ b/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java\n", "chunk": "@@ -99,10 +99,10 @@ public abstract class AbstractTestCommentNotification {\n     public void shouldNotifyEventWhenCreateComment() {\n         try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n             Comment comment = createComment(commentedDocumentModel);\n+            transactionalFeature.nextTransaction();\n             DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n             DocumentModel commentParentDocumentModel = session.getDocument(\n                     new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n-            transactionalFeature.nextTransaction();\n \n             Event expectedEvent = listener.streamCapturedEvents()\n                                           .findFirst()\n", "next_change": null}]}}]}}]}}, {"oid": "935f1d14d60a740d198b43576412575dead0271c", "url": "https://github.com/nuxeo/nuxeo/commit/935f1d14d60a740d198b43576412575dead0271c", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-12T11:20:11Z", "type": "forcePushed"}, {"oid": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "url": "https://github.com/nuxeo/nuxeo/commit/d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T18:53:10Z", "type": "forcePushed"}, {"oid": "946548fee13c9af1928e76787724b7561f2bb14e", "url": "https://github.com/nuxeo/nuxeo/commit/946548fee13c9af1928e76787724b7561f2bb14e", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T19:01:03Z", "type": "forcePushed"}, {"oid": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "url": "https://github.com/nuxeo/nuxeo/commit/cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-21T19:13:42Z", "type": "commit"}, {"oid": "279bd24f8081a9faac94a424489563c614d73640", "url": "https://github.com/nuxeo/nuxeo/commit/279bd24f8081a9faac94a424489563c614d73640", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T19:13:51Z", "type": "commit"}, {"oid": "279bd24f8081a9faac94a424489563c614d73640", "url": "https://github.com/nuxeo/nuxeo/commit/279bd24f8081a9faac94a424489563c614d73640", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T19:13:51Z", "type": "forcePushed"}]}