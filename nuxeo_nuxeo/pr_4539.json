{"pr_number": 4539, "pr_title": "NXP-29580: Runtime Descriptors Migrations", "pr_author": "atchertchian", "pr_createdAt": "2020-12-11T11:34:58Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4539", "merge_commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "timeline": [{"oid": "5239119119f6e2dbed163bcf7c01ab0bf6734cb6", "url": "https://github.com/nuxeo/nuxeo/commit/5239119119f6e2dbed163bcf7c01ab0bf6734cb6", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-11T13:09:32Z", "type": "forcePushed"}, {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf", "url": "https://github.com/nuxeo/nuxeo/commit/5de211459d8d4bd652d52ab911f93c171e155adf", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-11T18:17:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMjk3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541012974", "body": "I think `xpathy` in the Javadoc `value()` was a typo, and `xpath` is what's meant.\r\nNot very important.\r\n(Same typo in `XContent`)", "bodyText": "I think xpathy in the Javadoc value() was a typo, and xpath is what's meant.\nNot very important.\n(Same typo in XContent)", "bodyHTML": "<p dir=\"auto\">I think <code>xpathy</code> in the Javadoc <code>value()</code> was a typo, and <code>xpath</code> is what's meant.<br>\nNot very important.<br>\n(Same typo in <code>XContent</code>)</p>", "author": "efge", "createdAt": "2020-12-11T15:07:31Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java", "diffHunk": "@@ -41,6 +41,39 @@\n      */\n     String value() default \"\";\n \n+    /**\n+     * Marker for fallback to be ignored.\n+     *\n+     * @since 11.5\n+     */\n+    public static final String NO_FALLBACK_MARKER = \"__NO_FALLBACK_MARKER__\";\n+\n+    /**\n+     * An xpathy expression specifying the fallback XML node to bind to.", "originalCommit": "ae19d77d99ebc4f4eeeb058ed6bb2a3299ce1888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzNTIzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542235232", "bodyText": "I'm actually not sure as the expression is not \"real\" xpath, hence \"xpath-like\" or \"xpathy\", i can rephrase in all cases.", "author": "atchertchian", "createdAt": "2020-12-14T09:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMjk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc2MDkyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546760920", "bodyText": "Not very important, let's keep as is.", "author": "efge", "createdAt": "2020-12-21T15:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMjk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\nindex 69de1cc3620..65224b7c707 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\n", "chunk": "@@ -41,39 +41,6 @@ public @interface XNode {\n      */\n     String value() default \"\";\n \n-    /**\n-     * Marker for fallback to be ignored.\n-     *\n-     * @since 11.5\n-     */\n-    public static final String NO_FALLBACK_MARKER = \"__NO_FALLBACK_MARKER__\";\n-\n-    /**\n-     * An xpathy expression specifying the fallback XML node to bind to.\n-     * <p>\n-     * Useful for XML format evolutions: provides compatibility on previous format.\n-     *\n-     * @since 11.5\n-     */\n-    String fallback() default NO_DEFAULT_ASSIGNMENT_MARKER;\n-\n-    /**\n-     * Marker for default assignment to be ignored.\n-     *\n-     * @since 11.5\n-     */\n-    public static final String NO_DEFAULT_ASSIGNMENT_MARKER = \"__NO_DEFAULT_ASSIGNMENT_MARKER__\";\n-\n-    /**\n-     * String representation of the default assignment for the retrieved value for this node.\n-     * <p>\n-     * The corresponding value will be converted, and will be used as a default value in case the node path and its\n-     * fallback are not present on the XML representation.\n-     *\n-     * @since 11.5\n-     */\n-    String defaultAssignment() default NO_DEFAULT_ASSIGNMENT_MARKER;\n-\n     /**\n      * Whether to trim text content for element nodes.\n      * <p>\n", "next_change": {"commit": "24b81f4f2b875054d22132d29a30678314089fc4", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\nindex 65224b7c707..69de1cc3620 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java\n", "chunk": "@@ -41,6 +41,39 @@ public @interface XNode {\n      */\n     String value() default \"\";\n \n+    /**\n+     * Marker for fallback to be ignored.\n+     *\n+     * @since 11.5\n+     */\n+    public static final String NO_FALLBACK_MARKER = \"__NO_FALLBACK_MARKER__\";\n+\n+    /**\n+     * An xpathy expression specifying the fallback XML node to bind to.\n+     * <p>\n+     * Useful for XML format evolutions: provides compatibility on previous format.\n+     *\n+     * @since 11.5\n+     */\n+    String fallback() default NO_DEFAULT_ASSIGNMENT_MARKER;\n+\n+    /**\n+     * Marker for default assignment to be ignored.\n+     *\n+     * @since 11.5\n+     */\n+    public static final String NO_DEFAULT_ASSIGNMENT_MARKER = \"__NO_DEFAULT_ASSIGNMENT_MARKER__\";\n+\n+    /**\n+     * String representation of the default assignment for the retrieved value for this node.\n+     * <p>\n+     * The corresponding value will be converted, and will be used as a default value in case the node path and its\n+     * fallback are not present on the XML representation.\n+     *\n+     * @since 11.5\n+     */\n+    String defaultAssignment() default NO_DEFAULT_ASSIGNMENT_MARKER;\n+\n     /**\n      * Whether to trim text content for element nodes.\n      * <p>\n", "next_change": null}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTk2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541019960", "body": "`logics` -> `logic` (several instances)", "bodyText": "logics -> logic (several instances)", "bodyHTML": "<p dir=\"auto\"><code>logics</code> -&gt; <code>logic</code> (several instances)</p>", "author": "efge", "createdAt": "2020-12-11T15:17:17Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java", "diffHunk": "@@ -117,13 +117,36 @@ public void toXML(Object instance, Element parent) {\n     }\n \n     public void process(Context ctx, Element element) {\n-        Object value = getValue(ctx, element);\n-        if (value != null) {\n-            setValue(ctx.getObject(), value);\n+        process(ctx, element, null);\n+    }\n+\n+    /**\n+     * Sets the resolved value on the given object, potentially applying merge logics with given existing object.", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\nindex 3672e4898d0..00d4327464c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n", "chunk": "@@ -121,7 +121,7 @@ public class XAnnotatedMember {\n     }\n \n     /**\n-     * Sets the resolved value on the given object, potentially applying merge logics with given existing object.\n+     * Sets the resolved value on the given object, potentially applying merge logic with given existing object.\n      *\n      * @since 11.5\n      */\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\nindex 00d4327464c..d1fe4c200a2 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n", "chunk": "@@ -117,36 +102,13 @@ public class XAnnotatedMember {\n     }\n \n     public void process(Context ctx, Element element) {\n-        process(ctx, element, null);\n-    }\n-\n-    /**\n-     * Sets the resolved value on the given object, potentially applying merge logic with given existing object.\n-     *\n-     * @since 11.5\n-     */\n-    public void process(Context ctx, Element element, Object existing) {\n-        if (existing == null || hasValue(ctx, element)) {\n-            Object value = getValue(ctx, element);\n-            if (value != null) {\n-                setValue(ctx.getObject(), value);\n-            }\n-        }\n-    }\n-\n-    protected boolean hasValue(Context ctx, Element element) {\n-        if (type == Element.class) {\n-            return element != null;\n+        Object value = getValue(ctx, element);\n+        if (value != null) {\n+            setValue(ctx.getObject(), value);\n         }\n-        return DOMHelper.hasNode(element, path) || (fallbackPath != null && DOMHelper.hasNode(element, fallbackPath));\n     }\n \n-    /**\n-     * Returns the resolved value for given element.\n-     *\n-     * @since 11.5\n-     */\n-    public Object getValue(Context ctx, Element base) {\n+    protected Object getValue(Context ctx, Element base) {\n         if (xao != null) {\n             Element el = (Element) DOMHelper.getElementNode(base, path);\n             if (el == null) {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\nindex d1fe4c200a2..8b24d686677 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n", "chunk": "@@ -102,13 +117,41 @@ public class XAnnotatedMember {\n     }\n \n     public void process(Context ctx, Element element) {\n-        Object value = getValue(ctx, element);\n-        if (value != null) {\n-            setValue(ctx.getObject(), value);\n+        process(ctx, element, null);\n+    }\n+\n+    /**\n+     * Sets the resolved value on the given object, potentially applying merge logic with given existing object.\n+     *\n+     * @since 11.5\n+     */\n+    public void process(Context ctx, Element element, Object existing) {\n+        if (existing == null || hasValue(ctx, element)) {\n+            Object value = getValue(ctx, element);\n+            if (value != null) {\n+                setValue(ctx.getObject(), value);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns true if there is a specified value in given element.\n+     *\n+     * @since 11.5\n+     */\n+    public boolean hasValue(Context ctx, Element element) {\n+        if (type == Element.class) {\n+            return element != null;\n         }\n+        return DOMHelper.hasNode(element, path) || (fallbackPath != null && DOMHelper.hasNode(element, fallbackPath));\n     }\n \n-    protected Object getValue(Context ctx, Element base) {\n+    /**\n+     * Returns the resolved value for given element.\n+     *\n+     * @since 11.5\n+     */\n+    public Object getValue(Context ctx, Element base) {\n         if (xao != null) {\n             Element el = (Element) DOMHelper.getElementNode(base, path);\n             if (el == null) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\nindex 3672e4898d0..8b24d686677 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java\n", "chunk": "@@ -121,7 +121,7 @@ public class XAnnotatedMember {\n     }\n \n     /**\n-     * Sets the resolved value on the given object, potentially applying merge logics with given existing object.\n+     * Sets the resolved value on the given object, potentially applying merge logic with given existing object.\n      *\n      * @since 11.5\n      */\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTgyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541021823", "body": "Could be merged while this is being refactored. Even `InvocationTargetException` could be dealt with the same way by just rethrowing instead of extracting the cause (unless this is needed by some specific caller). This means we can just catch `ReflectiveOperationException`.", "bodyText": "Could be merged while this is being refactored. Even InvocationTargetException could be dealt with the same way by just rethrowing instead of extracting the cause (unless this is needed by some specific caller). This means we can just catch ReflectiveOperationException.", "bodyHTML": "<p dir=\"auto\">Could be merged while this is being refactored. Even <code>InvocationTargetException</code> could be dealt with the same way by just rethrowing instead of extracting the cause (unless this is needed by some specific caller). This means we can just catch <code>ReflectiveOperationException</code>.</p>", "author": "efge", "createdAt": "2020-12-11T15:19:56Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java", "diffHunk": "@@ -78,21 +93,38 @@ public Path getPath() {\n         return path;\n     }\n \n+    public Class<?> getKlass() {\n+        return klass;\n+    }\n+\n     public Object newInstance(Context ctx, Element element) {\n-        Object ob;\n-        try {\n-            ob = ctor.newInstance();\n-        } catch (InstantiationException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (IllegalAccessException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (InvocationTargetException e) {\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n+        return newInstance(ctx, element, null);\n+    }\n+\n+    /**\n+     * Returns a new instance for given element, and given existing object, potentially applying merge logics.\n+     *\n+     * @since 11.5\n+     */\n+    public Object newInstance(Context ctx, Element element, Object existing) {\n+        if (existing == null) {\n+            Object ob;\n+            try {\n+                ob = constructor.newInstance();\n+            } catch (InstantiationException e) {\n+                throw new IllegalArgumentException(e);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalArgumentException(e);", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5Njk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546796961", "bodyText": "I did not see any need of extracting the cause in runtime unit tests so i changed this in a separate commit, to see how it goes with all other tests.", "author": "atchertchian", "createdAt": "2020-12-21T16:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\nindex 9e42fb46b05..eaf7a634612 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n", "chunk": "@@ -93,38 +78,21 @@ public class XAnnotatedObject {\n         return path;\n     }\n \n-    public Class<?> getKlass() {\n-        return klass;\n-    }\n-\n     public Object newInstance(Context ctx, Element element) {\n-        return newInstance(ctx, element, null);\n-    }\n-\n-    /**\n-     * Returns a new instance for given element, and given existing object, potentially applying merge logics.\n-     *\n-     * @since 11.5\n-     */\n-    public Object newInstance(Context ctx, Element element, Object existing) {\n-        if (existing == null) {\n-            Object ob;\n-            try {\n-                ob = constructor.newInstance();\n-            } catch (InstantiationException e) {\n-                throw new IllegalArgumentException(e);\n-            } catch (IllegalAccessException e) {\n-                throw new IllegalArgumentException(e);\n-            } catch (InvocationTargetException e) {\n-                if (e.getCause() instanceof RuntimeException) {\n-                    throw (RuntimeException) e.getCause();\n-                }\n-                throw new IllegalArgumentException(e);\n+        Object ob;\n+        try {\n+            ob = ctor.newInstance();\n+        } catch (InstantiationException e) {\n+            throw new IllegalArgumentException(e);\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalArgumentException(e);\n+        } catch (InvocationTargetException e) {\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n             }\n-            ctx.push(ob);\n-        } else {\n-            ctx.push(existing);\n+            throw new IllegalArgumentException(e);\n         }\n+        ctx.push(ob);\n \n         if (sorter != null) {\n             Collections.sort(members, sorter);\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\nindex eaf7a634612..61bf8e8cb85 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n", "chunk": "@@ -78,21 +92,31 @@ public class XAnnotatedObject {\n         return path;\n     }\n \n+    public Class<?> getKlass() {\n+        return klass;\n+    }\n+\n     public Object newInstance(Context ctx, Element element) {\n-        Object ob;\n-        try {\n-            ob = ctor.newInstance();\n-        } catch (InstantiationException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (IllegalAccessException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (InvocationTargetException e) {\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n+        return newInstance(ctx, element, null);\n+    }\n+\n+    /**\n+     * Returns a new instance for given element, and given existing object, potentially applying merge logic.\n+     *\n+     * @since 11.5\n+     */\n+    public Object newInstance(Context ctx, Element element, Object existing) {\n+        if (existing == null) {\n+            Object ob;\n+            try {\n+                ob = constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                throw new IllegalArgumentException(e);\n             }\n-            throw new IllegalArgumentException(e);\n+            ctx.push(ob);\n+        } else {\n+            ctx.push(existing);\n         }\n-        ctx.push(ob);\n \n         if (sorter != null) {\n             Collections.sort(members, sorter);\n", "next_change": null}, {"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\nindex eaf7a634612..61bf8e8cb85 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n", "chunk": "@@ -101,11 +125,102 @@ public class XAnnotatedObject {\n \n         // set annotated members\n         for (XAnnotatedMember member : members) {\n-            member.process(ctx, element);\n+            member.process(ctx, element, existing);\n         }\n \n         return ctx.pop();\n     }\n+\n+    /**\n+     * Returns true if a {@link XRegistry} annotation was resolved on this object.\n+     *\n+     * @since 11.5\n+     */\n+    public boolean hasRegistry() {\n+        return hasRegistry;\n+    }\n+\n+    /**\n+     * Sets whether a {@link XRegistry} annotation was resolved on this object.\n+     *\n+     * @since 11.5\n+     */\n+    public void setHasRegistry(boolean hasRegistry) {\n+        this.hasRegistry = hasRegistry;\n+    }\n+\n+    /**\n+     * Returns the {@link XRegistryId} annotation that was resolved for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public XAnnotatedMember getRegistryId() {\n+        return registryId;\n+    }\n+\n+    /**\n+     * Sets the {@link XRegistryId} annotation for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public void setRegistryId(XAnnotatedMember registryId) {\n+        this.registryId = registryId;\n+    }\n+\n+    /**\n+     * Returns the {@link XMerge} annotation that was resolved for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public XAnnotatedMember getMerge() {\n+        return merge;\n+    }\n+\n+    /**\n+     * Sets the {@link XMerge} annotation for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public void setMerge(XAnnotatedMember merge) {\n+        this.merge = merge;\n+    }\n+\n+    /**\n+     * Returns the {@link XRemove} annotation that was resolved for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public XAnnotatedMember getRemove() {\n+        return remove;\n+    }\n+\n+    /**\n+     * Sets the {@link XRemove} annotation for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public void setRemove(XAnnotatedMember remove) {\n+        this.remove = remove;\n+    }\n+\n+    /**\n+     * Returns the {@link XEnable} annotation that was resolved for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public XAnnotatedMember getEnable() {\n+        return enable;\n+    }\n+\n+    /**\n+     * Sets the {@link XEnable} annotation for this object.\n+     *\n+     * @since 11.5\n+     */\n+    public void setEnable(XAnnotatedMember enable) {\n+        this.enable = enable;\n+    }\n+\n }\n \n class Sorter implements Comparator<XAnnotatedMember>, Serializable {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\nindex 9e42fb46b05..61bf8e8cb85 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java\n", "chunk": "@@ -111,14 +110,7 @@ public class XAnnotatedObject {\n             Object ob;\n             try {\n                 ob = constructor.newInstance();\n-            } catch (InstantiationException e) {\n-                throw new IllegalArgumentException(e);\n-            } catch (IllegalAccessException e) {\n-                throw new IllegalArgumentException(e);\n-            } catch (InvocationTargetException e) {\n-                if (e.getCause() instanceof RuntimeException) {\n-                    throw (RuntimeException) e.getCause();\n-                }\n+            } catch (ReflectiveOperationException e) {\n                 throw new IllegalArgumentException(e);\n             }\n             ctx.push(ob);\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNjM5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541026392", "body": "Remove ` = false`", "bodyText": "Remove  = false", "bodyHTML": "<p dir=\"auto\">Remove <code> = false</code></p>", "author": "efge", "createdAt": "2020-12-11T15:26:16Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de211459d8d4bd652d52ab911f93c171e155adf", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..f3214cdf436 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -35,6 +37,8 @@ public abstract class AbstractRegistry implements Registry {\n \n     protected boolean initialized = false;\n \n+    protected Set<String> markers = new HashSet<>();\n+\n     protected List<RegistryContribution> registrations = new ArrayList<>();\n \n     public AbstractRegistry() {\n", "next_change": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex f3214cdf436..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -29,15 +28,15 @@ import org.nuxeo.common.xmap.XAnnotatedObject;\n import org.w3c.dom.Element;\n \n /**\n- * Abstract class for {@link Registry} common logics.\n+ * Abstract class for {@link Registry} common logic.\n  *\n  * @since 11.5\n  */\n public abstract class AbstractRegistry implements Registry {\n \n-    protected boolean initialized = false;\n+    protected boolean initialized;\n \n-    protected Set<String> markers = new HashSet<>();\n+    protected Set<String> tags = new HashSet<>();\n \n     protected List<RegistryContribution> registrations = new ArrayList<>();\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 02727d5972c..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,101 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected boolean initialized;\n-\n-    protected Set<String> tags = new HashSet<>();\n-\n-    protected List<RegistryContribution> registrations = new ArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        return initialized;\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n-        setInitialized(true);\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -18,24 +18,28 @@\n  */\n package org.nuxeo.common.xmap.registry;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.nuxeo.common.xmap.Context;\n import org.nuxeo.common.xmap.XAnnotatedObject;\n import org.w3c.dom.Element;\n \n /**\n- * Abstract class for {@link Registry} common logics.\n+ * Abstract class for {@link Registry} common logic.\n  *\n  * @since 11.5\n  */\n public abstract class AbstractRegistry implements Registry {\n \n-    protected boolean initialized = false;\n+    // volatile for double-checked locking\n+    protected volatile boolean initialized;\n \n-    protected List<RegistryContribution> registrations = new ArrayList<>();\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n \n     public AbstractRegistry() {\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541028584", "body": "This is ok if we don't expect multi-threaded usage. Otherwise more synchronization is needed.", "bodyText": "This is ok if we don't expect multi-threaded usage. Otherwise more synchronization is needed.", "bodyHTML": "<p dir=\"auto\">This is ok if we don't expect multi-threaded usage. Otherwise more synchronization is needed.</p>", "author": "efge", "createdAt": "2020-12-11T15:29:20Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;\n+\n+    protected List<RegistryContribution> registrations = new ArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        this.initialized = initialized;\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2MjA1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542362053", "bodyText": "Not sure indeed, to be checked", "author": "atchertchian", "createdAt": "2020-12-14T12:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MzI0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546773245", "bodyText": "The registration part seems safe as it's called by the startup thread. However other getContribution* calls are potentially done after startup.\nSo let's play it safe: make the initialized flag volatile and use double-checked locking to change it (and also setting it in setInitialized should also have a synchronization).\nAlso the datastructures in the registries (tags, registrations in the abstract class and other ones in the concrete classes) should all be thread-safe (\u2014> new ConcurentHashMap, ConcurrentHashMap.newKeySet(), new CopyOnWriteArrayList, and read/write the enabled flag in a synchronized block too)", "author": "efge", "createdAt": "2020-12-21T15:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NjMzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546796333", "bodyText": "Pushed in a separate commit for now, please let me know if that matches the need.", "author": "atchertchian", "createdAt": "2020-12-21T16:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -60,29 +63,36 @@ public abstract class AbstractRegistry implements Registry {\n         initialize();\n     }\n \n-    protected void initialize() {\n+    @Override\n+    public void initialize() {\n         registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n         setInitialized(true);\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n-        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n-    public void unregister(String marker) {\n-        if (marker == null) {\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n-        Iterator<RegistryContribution> it = registrations.iterator();\n-        while (it.hasNext()) {\n-            RegistryContribution reg = it.next();\n-            if (marker.equals(reg.getMarker())) {\n-                it.remove();\n-            }\n-        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n", "next_change": {"commit": "a3bb25104c04e9293e42861ad54eda732adb0bd2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 9f4abf82b48..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,105 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected boolean initialized;\n-\n-    protected Set<String> tags = new HashSet<>();\n-\n-    protected List<RegistryContribution> registrations = new ArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        return initialized;\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(this::register);\n-        setInitialized(true);\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -46,46 +50,65 @@ public abstract class AbstractRegistry implements Registry {\n     }\n \n     protected boolean isInitialized() {\n-        return initialized;\n+        synchronized (this) {\n+            return initialized;\n+        }\n     }\n \n     protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n     }\n \n     protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n+        if (!initialized) {\n+            synchronized (this) {\n+                if (!initialized) {\n+                    initialize();\n+                    initialized = true;\n+                }\n+            }\n         }\n-        initialize();\n     }\n \n-    protected void initialize() {\n-        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n         setInitialized(true);\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n-        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n-    public void unregister(String marker) {\n-        if (marker == null) {\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n-        Iterator<RegistryContribution> it = registrations.iterator();\n-        while (it.hasNext()) {\n-            RegistryContribution reg = it.next();\n-            if (marker.equals(reg.getMarker())) {\n-                it.remove();\n-            }\n-        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTgzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541029837", "body": "`registrations.removeIf(reg -> marker.equals(reg.getMarker()))`", "bodyText": "registrations.removeIf(reg -> marker.equals(reg.getMarker()))", "bodyHTML": "<p dir=\"auto\"><code>registrations.removeIf(reg -&gt; marker.equals(reg.getMarker()))</code></p>", "author": "efge", "createdAt": "2020-12-11T15:31:07Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;\n+\n+    protected List<RegistryContribution> registrations = new ArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        this.initialized = initialized;\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    protected void initialize() {\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n+        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String marker) {\n+        if (marker == null) {\n+            return;\n+        }\n+        Iterator<RegistryContribution> it = registrations.iterator();\n+        while (it.hasNext()) {\n+            RegistryContribution reg = it.next();\n+            if (marker.equals(reg.getMarker())) {\n+                it.remove();\n+            }\n+        }", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de211459d8d4bd652d52ab911f93c171e155adf", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..f3214cdf436 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void mark(String id) {\n+        markers.add(id);\n+    }\n+\n+    @Override\n+    public boolean isMarked(String id) {\n+        return markers.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n+        markers.add(marker);\n         registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String marker) {\n-        if (marker == null) {\n+        if (marker == null || !isMarked(marker)) {\n             return;\n         }\n+        markers.remove(marker);\n         Iterator<RegistryContribution> it = registrations.iterator();\n         while (it.hasNext()) {\n             RegistryContribution reg = it.next();\n", "next_change": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex f3214cdf436..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -64,41 +63,36 @@ public abstract class AbstractRegistry implements Registry {\n         initialize();\n     }\n \n-    protected void initialize() {\n+    @Override\n+    public void initialize() {\n         registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n         setInitialized(true);\n     }\n \n     @Override\n-    public void mark(String id) {\n-        markers.add(id);\n+    public void tag(String id) {\n+        tags.add(id);\n     }\n \n     @Override\n-    public boolean isMarked(String id) {\n-        return markers.contains(id);\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n-        markers.add(marker);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n-    public void unregister(String marker) {\n-        if (marker == null || !isMarked(marker)) {\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n-        markers.remove(marker);\n-        Iterator<RegistryContribution> it = registrations.iterator();\n-        while (it.hasNext()) {\n-            RegistryContribution reg = it.next();\n-            if (marker.equals(reg.getMarker())) {\n-                it.remove();\n-            }\n-        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n", "next_change": {"commit": "a3bb25104c04e9293e42861ad54eda732adb0bd2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 9f4abf82b48..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,105 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected boolean initialized;\n-\n-    protected Set<String> tags = new HashSet<>();\n-\n-    protected List<RegistryContribution> registrations = new ArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        return initialized;\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(this::register);\n-        setInitialized(true);\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 93fe80a7dc6..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -46,46 +50,65 @@ public abstract class AbstractRegistry implements Registry {\n     }\n \n     protected boolean isInitialized() {\n-        return initialized;\n+        synchronized (this) {\n+            return initialized;\n+        }\n     }\n \n     protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n     }\n \n     protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n+        if (!initialized) {\n+            synchronized (this) {\n+                if (!initialized) {\n+                    initialize();\n+                    initialized = true;\n+                }\n+            }\n         }\n-        initialize();\n     }\n \n-    protected void initialize() {\n-        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n         setInitialized(true);\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n-        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n-    public void unregister(String marker) {\n-        if (marker == null) {\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n-        Iterator<RegistryContribution> it = registrations.iterator();\n-        while (it.hasNext()) {\n-            RegistryContribution reg = it.next();\n-            if (marker.equals(reg.getMarker())) {\n-                it.remove();\n-            }\n-        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMDc5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541030793", "body": "I don't think this is needed, it's automatically done by Java.", "bodyText": "I don't think this is needed, it's automatically done by Java.", "bodyHTML": "<p dir=\"auto\">I don't think this is needed, it's automatically done by Java.</p>", "author": "efge", "createdAt": "2020-12-11T15:32:23Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..a2081ae8d2b 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -42,12 +42,8 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n \n     protected Set<String> disabled = new HashSet<>();\n \n-    public MapRegistry() {\n-        super();\n-    }\n-\n     @Override\n-    protected void initialize() {\n+    public void initialize() {\n         contributions.clear();\n         disabled.clear();\n         super.initialize();\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\ndeleted file mode 100644\nindex a2081ae8d2b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,108 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedMember;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Registry for multiple contributions identified by a unique id.\n- *\n- * @since 11.5\n- */\n-public class MapRegistry extends AbstractRegistry implements Registry {\n-\n-    protected Map<String, Object> contributions = new LinkedHashMap<>();\n-\n-    protected Set<String> disabled = new HashSet<>();\n-\n-    @Override\n-    public void initialize() {\n-        contributions.clear();\n-        disabled.clear();\n-        super.initialize();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Map<String, T> getContributions() {\n-        checkInitialized();\n-        return (Map<String, T>) contributions.entrySet()\n-                                             .stream()\n-                                             .filter(x -> !disabled.contains(x.getKey()))\n-                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n-                                                     (v1, v2) -> v2, LinkedHashMap::new));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> List<T> getContributionValues() {\n-        checkInitialized();\n-        return (List<T>) contributions.entrySet()\n-                                      .stream()\n-                                      .filter(x -> !disabled.contains(x.getKey()))\n-                                      .map(Map.Entry::getValue)\n-                                      .collect(Collectors.toList());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Optional<T> getContribution(String id) {\n-        checkInitialized();\n-        if (disabled.contains(id)) {\n-            return Optional.empty();\n-        }\n-        return Optional.ofNullable((T) contributions.get(id));\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        XAnnotatedMember remove = xObject.getRemove();\n-        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n-            contributions.remove(id);\n-            return;\n-        }\n-        Object contrib;\n-        XAnnotatedMember merge = xObject.getMerge();\n-        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n-            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n-        } else {\n-            contrib = xObject.newInstance(ctx, element);\n-        }\n-        contributions.put(id, contrib);\n-        XAnnotatedMember enable = xObject.getEnable();\n-        if (enable != null) {\n-            Object enabled = enable.getValue(ctx, element);\n-            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n-                disabled.add(id);\n-            } else {\n-                disabled.remove(id);\n-            }\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nnew file mode 100644\nindex 00000000000..fca25d643b3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = Collections.synchronizedMap(new LinkedHashMap<>());\n+\n+    protected Set<String> disabled = ConcurrentHashMap.newKeySet();\n+\n+    @Override\n+    public void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (v1, v2) -> v2, LinkedHashMap::new));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> List<T> getContributionValues() {\n+        checkInitialized();\n+        return (List<T>) contributions.entrySet()\n+                                      .stream()\n+                                      .filter(x -> !disabled.contains(x.getKey()))\n+                                      .map(Map.Entry::getValue)\n+                                      .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<T> getContribution(String id) {\n+        checkInitialized();\n+        if (disabled.contains(id)) {\n+            return Optional.empty();\n+        }\n+        return Optional.ofNullable((T) contributions.get(id));\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        Object contrib;\n+        XAnnotatedMember merge = xObject.getMerge();\n+        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n+            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n+        } else {\n+            contrib = xObject.newInstance(ctx, element);\n+        }\n+        contributions.put(id, contrib);\n+        XAnnotatedMember enable = xObject.getEnable();\n+        if (enable != null) {\n+            Object enabled = enable.getValue(ctx, element);\n+            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n+                disabled.add(id);\n+            } else {\n+                disabled.remove(id);\n+            }\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..0535c3df88f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -38,16 +39,12 @@ import org.w3c.dom.Element;\n  */\n public class MapRegistry extends AbstractRegistry implements Registry {\n \n-    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+    protected Map<String, Object> contributions = Collections.synchronizedMap(new LinkedHashMap<>());\n \n-    protected Set<String> disabled = new HashSet<>();\n-\n-    public MapRegistry() {\n-        super();\n-    }\n+    protected Set<String> disabled = ConcurrentHashMap.newKeySet();\n \n     @Override\n-    protected void initialize() {\n+    public void initialize() {\n         contributions.clear();\n         disabled.clear();\n         super.initialize();\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjAzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541032033", "body": "`.map(Map.Entry::getValue)`", "bodyText": ".map(Map.Entry::getValue)", "bodyHTML": "<p dir=\"auto\"><code>.map(Map.Entry::getValue)</code></p>", "author": "efge", "createdAt": "2020-12-11T15:34:07Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }\n+\n+    @Override\n+    protected void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (e1, e2) -> e2, LinkedHashMap::new));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> List<T> getContributionValues() {\n+        checkInitialized();\n+        return (List<T>) contributions.entrySet()\n+                                      .stream()\n+                                      .filter(x -> !disabled.contains(x.getKey()))\n+                                      .map(x -> x.getValue())", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..a2081ae8d2b 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -69,7 +65,7 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n         return (List<T>) contributions.entrySet()\n                                       .stream()\n                                       .filter(x -> !disabled.contains(x.getKey()))\n-                                      .map(x -> x.getValue())\n+                                      .map(Map.Entry::getValue)\n                                       .collect(Collectors.toList());\n     }\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\ndeleted file mode 100644\nindex a2081ae8d2b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,108 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedMember;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Registry for multiple contributions identified by a unique id.\n- *\n- * @since 11.5\n- */\n-public class MapRegistry extends AbstractRegistry implements Registry {\n-\n-    protected Map<String, Object> contributions = new LinkedHashMap<>();\n-\n-    protected Set<String> disabled = new HashSet<>();\n-\n-    @Override\n-    public void initialize() {\n-        contributions.clear();\n-        disabled.clear();\n-        super.initialize();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Map<String, T> getContributions() {\n-        checkInitialized();\n-        return (Map<String, T>) contributions.entrySet()\n-                                             .stream()\n-                                             .filter(x -> !disabled.contains(x.getKey()))\n-                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n-                                                     (v1, v2) -> v2, LinkedHashMap::new));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> List<T> getContributionValues() {\n-        checkInitialized();\n-        return (List<T>) contributions.entrySet()\n-                                      .stream()\n-                                      .filter(x -> !disabled.contains(x.getKey()))\n-                                      .map(Map.Entry::getValue)\n-                                      .collect(Collectors.toList());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Optional<T> getContribution(String id) {\n-        checkInitialized();\n-        if (disabled.contains(id)) {\n-            return Optional.empty();\n-        }\n-        return Optional.ofNullable((T) contributions.get(id));\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        XAnnotatedMember remove = xObject.getRemove();\n-        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n-            contributions.remove(id);\n-            return;\n-        }\n-        Object contrib;\n-        XAnnotatedMember merge = xObject.getMerge();\n-        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n-            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n-        } else {\n-            contrib = xObject.newInstance(ctx, element);\n-        }\n-        contributions.put(id, contrib);\n-        XAnnotatedMember enable = xObject.getEnable();\n-        if (enable != null) {\n-            Object enabled = enable.getValue(ctx, element);\n-            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n-                disabled.add(id);\n-            } else {\n-                disabled.remove(id);\n-            }\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nnew file mode 100644\nindex 00000000000..fca25d643b3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = Collections.synchronizedMap(new LinkedHashMap<>());\n+\n+    protected Set<String> disabled = ConcurrentHashMap.newKeySet();\n+\n+    @Override\n+    public void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (v1, v2) -> v2, LinkedHashMap::new));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> List<T> getContributionValues() {\n+        checkInitialized();\n+        return (List<T>) contributions.entrySet()\n+                                      .stream()\n+                                      .filter(x -> !disabled.contains(x.getKey()))\n+                                      .map(Map.Entry::getValue)\n+                                      .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<T> getContribution(String id) {\n+        checkInitialized();\n+        if (disabled.contains(id)) {\n+            return Optional.empty();\n+        }\n+        return Optional.ofNullable((T) contributions.get(id));\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        Object contrib;\n+        XAnnotatedMember merge = xObject.getMerge();\n+        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n+            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n+        } else {\n+            contrib = xObject.newInstance(ctx, element);\n+        }\n+        contributions.put(id, contrib);\n+        XAnnotatedMember enable = xObject.getEnable();\n+        if (enable != null) {\n+            Object enabled = enable.getValue(ctx, element);\n+            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n+                disabled.add(id);\n+            } else {\n+                disabled.remove(id);\n+            }\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..0535c3df88f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -69,7 +66,7 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n         return (List<T>) contributions.entrySet()\n                                       .stream()\n                                       .filter(x -> !disabled.contains(x.getKey()))\n-                                      .map(x -> x.getValue())\n+                                      .map(Map.Entry::getValue)\n                                       .collect(Collectors.toList());\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMzU0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541033549", "body": "`(v1, v2) -> v2` maybe, as this merge function is about values?", "bodyText": "(v1, v2) -> v2 maybe, as this merge function is about values?", "bodyHTML": "<p dir=\"auto\"><code>(v1, v2) -&gt; v2</code> maybe, as this merge function is about values?</p>", "author": "efge", "createdAt": "2020-12-11T15:36:06Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }\n+\n+    @Override\n+    protected void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (e1, e2) -> e2, LinkedHashMap::new));", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..a2081ae8d2b 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -60,7 +56,7 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n                                              .stream()\n                                              .filter(x -> !disabled.contains(x.getKey()))\n                                              .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n-                                                     (e1, e2) -> e2, LinkedHashMap::new));\n+                                                     (v1, v2) -> v2, LinkedHashMap::new));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\ndeleted file mode 100644\nindex a2081ae8d2b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,108 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedMember;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Registry for multiple contributions identified by a unique id.\n- *\n- * @since 11.5\n- */\n-public class MapRegistry extends AbstractRegistry implements Registry {\n-\n-    protected Map<String, Object> contributions = new LinkedHashMap<>();\n-\n-    protected Set<String> disabled = new HashSet<>();\n-\n-    @Override\n-    public void initialize() {\n-        contributions.clear();\n-        disabled.clear();\n-        super.initialize();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Map<String, T> getContributions() {\n-        checkInitialized();\n-        return (Map<String, T>) contributions.entrySet()\n-                                             .stream()\n-                                             .filter(x -> !disabled.contains(x.getKey()))\n-                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n-                                                     (v1, v2) -> v2, LinkedHashMap::new));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> List<T> getContributionValues() {\n-        checkInitialized();\n-        return (List<T>) contributions.entrySet()\n-                                      .stream()\n-                                      .filter(x -> !disabled.contains(x.getKey()))\n-                                      .map(Map.Entry::getValue)\n-                                      .collect(Collectors.toList());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> Optional<T> getContribution(String id) {\n-        checkInitialized();\n-        if (disabled.contains(id)) {\n-            return Optional.empty();\n-        }\n-        return Optional.ofNullable((T) contributions.get(id));\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        XAnnotatedMember remove = xObject.getRemove();\n-        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n-            contributions.remove(id);\n-            return;\n-        }\n-        Object contrib;\n-        XAnnotatedMember merge = xObject.getMerge();\n-        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n-            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n-        } else {\n-            contrib = xObject.newInstance(ctx, element);\n-        }\n-        contributions.put(id, contrib);\n-        XAnnotatedMember enable = xObject.getEnable();\n-        if (enable != null) {\n-            Object enabled = enable.getValue(ctx, element);\n-            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n-                disabled.add(id);\n-            } else {\n-                disabled.remove(id);\n-            }\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nnew file mode 100644\nindex 00000000000..fca25d643b3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = Collections.synchronizedMap(new LinkedHashMap<>());\n+\n+    protected Set<String> disabled = ConcurrentHashMap.newKeySet();\n+\n+    @Override\n+    public void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (v1, v2) -> v2, LinkedHashMap::new));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> List<T> getContributionValues() {\n+        checkInitialized();\n+        return (List<T>) contributions.entrySet()\n+                                      .stream()\n+                                      .filter(x -> !disabled.contains(x.getKey()))\n+                                      .map(Map.Entry::getValue)\n+                                      .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<T> getContribution(String id) {\n+        checkInitialized();\n+        if (disabled.contains(id)) {\n+            return Optional.empty();\n+        }\n+        return Optional.ofNullable((T) contributions.get(id));\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        Object contrib;\n+        XAnnotatedMember merge = xObject.getMerge();\n+        if (merge != null && Boolean.TRUE.equals(merge.getValue(ctx, element))) {\n+            contrib = xObject.newInstance(ctx, element, contributions.get(id));\n+        } else {\n+            contrib = xObject.newInstance(ctx, element);\n+        }\n+        contributions.put(id, contrib);\n+        XAnnotatedMember enable = xObject.getEnable();\n+        if (enable != null) {\n+            Object enabled = enable.getValue(ctx, element);\n+            if (enabled != null && Boolean.FALSE.equals(enabled)) {\n+                disabled.add(id);\n+            } else {\n+                disabled.remove(id);\n+            }\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 3616a9405a6..0535c3df88f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -60,7 +57,7 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n                                              .stream()\n                                              .filter(x -> !disabled.contains(x.getKey()))\n                                              .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n-                                                     (e1, e2) -> e2, LinkedHashMap::new));\n+                                                     (v1, v2) -> v2, LinkedHashMap::new));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNjE0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541036141", "body": "Not needed", "bodyText": "Not needed", "bodyHTML": "<p dir=\"auto\">Not needed</p>", "author": "efge", "createdAt": "2020-12-11T15:39:31Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    public NullRegistry() {\n+    }", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -31,9 +31,6 @@ import org.w3c.dom.Element;\n  */\n public class NullRegistry extends AbstractRegistry implements Registry {\n \n-    public NullRegistry() {\n-    }\n-\n     @Override\n     public boolean isNull() {\n         return true;\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\ndeleted file mode 100644\nindex 097b7487e62..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,44 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Null registry for backward compatibility management.\n- * <p>\n- * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n- *\n- * @since 11.5\n- */\n-public class NullRegistry extends AbstractRegistry implements Registry {\n-\n-    @Override\n-    public boolean isNull() {\n-        return true;\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nnew file mode 100644\nindex 00000000000..097b7487e62\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -31,9 +31,6 @@ import org.w3c.dom.Element;\n  */\n public class NullRegistry extends AbstractRegistry implements Registry {\n \n-    public NullRegistry() {\n-    }\n-\n     @Override\n     public boolean isNull() {\n         return true;\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNjU2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541036566", "body": "Maybe `throw UnsupportedOperationException()` if it would be a mistake to call this in the null registry?", "bodyText": "Maybe throw UnsupportedOperationException() if it would be a mistake to call this in the null registry?", "bodyHTML": "<p dir=\"auto\">Maybe <code>throw UnsupportedOperationException()</code> if it would be a mistake to call this in the null registry?</p>", "author": "efge", "createdAt": "2020-12-11T15:40:10Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    public NullRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        // NOOP", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -31,9 +31,6 @@ import org.w3c.dom.Element;\n  */\n public class NullRegistry extends AbstractRegistry implements Registry {\n \n-    public NullRegistry() {\n-    }\n-\n     @Override\n     public boolean isNull() {\n         return true;\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\ndeleted file mode 100644\nindex 097b7487e62..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,44 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Null registry for backward compatibility management.\n- * <p>\n- * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n- *\n- * @since 11.5\n- */\n-public class NullRegistry extends AbstractRegistry implements Registry {\n-\n-    @Override\n-    public boolean isNull() {\n-        return true;\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nnew file mode 100644\nindex 00000000000..097b7487e62\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n", "next_change": null}]}}]}}, {"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -41,7 +38,7 @@ public class NullRegistry extends AbstractRegistry implements Registry {\n \n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        // NOOP\n+        throw new UnsupportedOperationException();\n     }\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\ndeleted file mode 100644\nindex 097b7487e62..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,44 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Null registry for backward compatibility management.\n- * <p>\n- * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n- *\n- * @since 11.5\n- */\n-public class NullRegistry extends AbstractRegistry implements Registry {\n-\n-    @Override\n-    public boolean isNull() {\n-        return true;\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nnew file mode 100644\nindex 00000000000..097b7487e62\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -31,9 +31,6 @@ import org.w3c.dom.Element;\n  */\n public class NullRegistry extends AbstractRegistry implements Registry {\n \n-    public NullRegistry() {\n-    }\n-\n     @Override\n     public boolean isNull() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\nindex 818409f36b6..097b7487e62 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java\n", "chunk": "@@ -41,7 +38,7 @@ public class NullRegistry extends AbstractRegistry implements Registry {\n \n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        // NOOP\n+        throw new UnsupportedOperationException();\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541040525", "body": "`public final` not needed (implicit).\r\n(Also in other `@interface` annotation classes)", "bodyText": "public final not needed (implicit).\n(Also in other @interface annotation classes)", "bodyHTML": "<p dir=\"auto\"><code>public final</code> not needed (implicit).<br>\n(Also in other <code>@interface</code> annotation classes)</p>", "author": "efge", "createdAt": "2020-12-11T15:45:30Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Annotation representing the id to be retrieved for registry identification.\n+ * <p>\n+ * If annotation is placed on a field annotated by {@link XNode}, this field will be considered as the id for the\n+ * containing {@link XObject}. This annotation value will be ignored and taken on the corresponding XNode instead.\n+ *\n+ * @since 11.5\n+ */\n+@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface XRegistryId {\n+\n+    public final String ID = \"@id\";", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\nindex 4b2b955850d..76ac0746966 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n", "chunk": "@@ -38,16 +39,18 @@ import org.nuxeo.common.xmap.annotation.XObject;\n @Retention(RetentionPolicy.RUNTIME)\n public @interface XRegistryId {\n \n-    public final String ID = \"@id\";\n+    String ID = \"@id\";\n \n-    public final String NAME = \"@name\";\n+    String NAME = \"@name\";\n \n     /**\n      * The xpathy expression to retrieve the identifier.\n      * <p>\n+     * Multiple values can be used for aggregation.\n+     * <p>\n      * Only processed when placed on a type annotated by {@link XObject}.\n      */\n-    String value() default ID;\n+    String[] value() default ID;\n \n     /**\n      * The xpathy fallback expression to retrieve the identifier.\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\ndeleted file mode 100644\nindex 76ac0746966..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import org.nuxeo.common.xmap.annotation.XNode;\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.nuxeo.common.xmap.annotation.XObject;\n-\n-/**\n- * Annotation representing the id to be retrieved for registry identification.\n- * <p>\n- * If annotation is placed on a field annotated by {@link XNode}, this field will be considered as the id for the\n- * containing {@link XObject}. This annotation value will be ignored and taken on the corresponding XNode instead.\n- *\n- * @since 11.5\n- */\n-@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface XRegistryId {\n-\n-    String ID = \"@id\";\n-\n-    String NAME = \"@name\";\n-\n-    /**\n-     * The xpathy expression to retrieve the identifier.\n-     * <p>\n-     * Multiple values can be used for aggregation.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject}.\n-     */\n-    String[] value() default ID;\n-\n-    /**\n-     * The xpathy fallback expression to retrieve the identifier.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject}.\n-     *\n-     * @see XNode#fallback()\n-     */\n-    String fallback() default NAME;\n-\n-    /**\n-     * The default value for this identifier.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject}.\n-     *\n-     * @see XNodes#defaultAssignment()\n-     */\n-    String defaultAssignment() default XNode.NO_DEFAULT_ASSIGNMENT_MARKER;\n-\n-    /**\n-     * The default value for this identifier.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject} and when multiple values are defined for\n-     * aggregation.\n-     *\n-     * @see XNodes#separator()\n-     */\n-    String separator() default \":\";\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\nnew file mode 100644\nindex 00000000000..76ac0746966\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n", "chunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Annotation representing the id to be retrieved for registry identification.\n+ * <p>\n+ * If annotation is placed on a field annotated by {@link XNode}, this field will be considered as the id for the\n+ * containing {@link XObject}. This annotation value will be ignored and taken on the corresponding XNode instead.\n+ *\n+ * @since 11.5\n+ */\n+@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface XRegistryId {\n+\n+    String ID = \"@id\";\n+\n+    String NAME = \"@name\";\n+\n+    /**\n+     * The xpathy expression to retrieve the identifier.\n+     * <p>\n+     * Multiple values can be used for aggregation.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject}.\n+     */\n+    String[] value() default ID;\n+\n+    /**\n+     * The xpathy fallback expression to retrieve the identifier.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject}.\n+     *\n+     * @see XNode#fallback()\n+     */\n+    String fallback() default NAME;\n+\n+    /**\n+     * The default value for this identifier.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject}.\n+     *\n+     * @see XNodes#defaultAssignment()\n+     */\n+    String defaultAssignment() default XNode.NO_DEFAULT_ASSIGNMENT_MARKER;\n+\n+    /**\n+     * The default value for this identifier.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject} and when multiple values are defined for\n+     * aggregation.\n+     *\n+     * @see XNodes#separator()\n+     */\n+    String separator() default \":\";\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\nindex 76ac0746966..4e4e841f082 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n", "chunk": "@@ -61,23 +58,4 @@ public @interface XRegistryId {\n      */\n     String fallback() default NAME;\n \n-    /**\n-     * The default value for this identifier.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject}.\n-     *\n-     * @see XNodes#defaultAssignment()\n-     */\n-    String defaultAssignment() default XNode.NO_DEFAULT_ASSIGNMENT_MARKER;\n-\n-    /**\n-     * The default value for this identifier.\n-     * <p>\n-     * Only processed when placed on a type annotated by {@link XObject} and when multiple values are defined for\n-     * aggregation.\n-     *\n-     * @see XNodes#separator()\n-     */\n-    String separator() default \":\";\n-\n }\n", "next_change": {"commit": "e675d86e060cff30eb806aae757cd3acc775c2fb", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\nindex 4e4e841f082..76ac0746966 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n", "chunk": "@@ -58,4 +61,23 @@ public @interface XRegistryId {\n      */\n     String fallback() default NAME;\n \n+    /**\n+     * The default value for this identifier.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject}.\n+     *\n+     * @see XNodes#defaultAssignment()\n+     */\n+    String defaultAssignment() default XNode.NO_DEFAULT_ASSIGNMENT_MARKER;\n+\n+    /**\n+     * The default value for this identifier.\n+     * <p>\n+     * Only processed when placed on a type annotated by {@link XObject} and when multiple values are defined for\n+     * aggregation.\n+     *\n+     * @see XNodes#separator()\n+     */\n+    String separator() default \":\";\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\nindex 4b2b955850d..76ac0746966 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java\n", "chunk": "@@ -38,16 +39,18 @@ import org.nuxeo.common.xmap.annotation.XObject;\n @Retention(RetentionPolicy.RUNTIME)\n public @interface XRegistryId {\n \n-    public final String ID = \"@id\";\n+    String ID = \"@id\";\n \n-    public final String NAME = \"@name\";\n+    String NAME = \"@name\";\n \n     /**\n      * The xpathy expression to retrieve the identifier.\n      * <p>\n+     * Multiple values can be used for aggregation.\n+     * <p>\n      * Only processed when placed on a type annotated by {@link XObject}.\n      */\n-    String value() default ID;\n+    String[] value() default ID;\n \n     /**\n      * The xpathy fallback expression to retrieve the identifier.\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MjI2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541042263", "body": "It's probably not the style for previous test descriptors, but please let's make all the fields `public` in test classes.", "bodyText": "It's probably not the style for previous test descriptors, but please let's make all the fields public in test classes.", "bodyHTML": "<p dir=\"auto\">It's probably not the style for previous test descriptors, but please let's make all the fields <code>public</code> in test classes.</p>", "author": "efge", "createdAt": "2020-12-11T15:47:58Z", "path": "modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodeList;\n+import org.nuxeo.common.xmap.annotation.XNodeMap;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Sample descriptor with default expected registry annotations and list/map various cases.\n+ *\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+@XRegistry\n+@XRegistryId(value = \"@name\")\n+public class SampleDescriptor {\n+\n+    @XNode(\"@name\")\n+    String name;", "originalCommit": "453fcc85cb63d57c55c6666edfbc2e7bc6903009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\nindex 6870134d4dd..58a0ae39ff9 100644\n--- a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n+++ b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n", "chunk": "@@ -39,29 +39,29 @@ import org.nuxeo.common.xmap.annotation.XObject;\n public class SampleDescriptor {\n \n     @XNode(\"@name\")\n-    String name;\n+    public String name;\n \n     @XNode(value = \"value\", defaultAssignment = \"Sample\")\n-    String value;\n+    public String value;\n \n     @XNode(value = \"bool\", defaultAssignment = \"true\")\n-    boolean bool;\n+    public boolean bool;\n \n     @XNodeList(value = \"stringList/item\", type = ArrayList.class, componentType = String.class)\n-    List<String> stringList;\n+    public List<String> stringList;\n \n     @XNodeList(value = \"stringListAnnotated/item\", type = ArrayList.class, componentType = String.class, nullByDefault = true)\n     @XMerge(value = \"stringListAnnotated@append\", fallback = \"stringListAnnotated\"\n             + XMerge.MERGE, defaultAssignment = true)\n     @XRemove(\"stringListAnnotated@remove\")\n-    List<String> stringListAnnotated;\n+    public List<String> stringListAnnotated;\n \n     @XNodeMap(value = \"stringMap/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n-    Map<String, String> stringMap;\n+    public Map<String, String> stringMap;\n \n     @XNodeMap(value = \"stringMapAnnotated/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n     @XMerge(value = \"stringMapAnnotated\" + XMerge.MERGE, defaultAssignment = false)\n     @XRemove(\"stringMapAnnotated@empty\")\n-    Map<String, String> stringMapAnnotated;\n+    public Map<String, String> stringMapAnnotated;\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\ndeleted file mode 100644\nindex 58a0ae39ff9..00000000000\n--- a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.nuxeo.common.xmap.annotation.XNode;\n-import org.nuxeo.common.xmap.annotation.XNodeList;\n-import org.nuxeo.common.xmap.annotation.XNodeMap;\n-import org.nuxeo.common.xmap.annotation.XObject;\n-\n-/**\n- * Sample descriptor with default expected registry annotations and list/map various cases.\n- *\n- * @since 11.5\n- */\n-@XObject(\"descriptor\")\n-@XRegistry\n-@XRegistryId(value = \"@name\")\n-public class SampleDescriptor {\n-\n-    @XNode(\"@name\")\n-    public String name;\n-\n-    @XNode(value = \"value\", defaultAssignment = \"Sample\")\n-    public String value;\n-\n-    @XNode(value = \"bool\", defaultAssignment = \"true\")\n-    public boolean bool;\n-\n-    @XNodeList(value = \"stringList/item\", type = ArrayList.class, componentType = String.class)\n-    public List<String> stringList;\n-\n-    @XNodeList(value = \"stringListAnnotated/item\", type = ArrayList.class, componentType = String.class, nullByDefault = true)\n-    @XMerge(value = \"stringListAnnotated@append\", fallback = \"stringListAnnotated\"\n-            + XMerge.MERGE, defaultAssignment = true)\n-    @XRemove(\"stringListAnnotated@remove\")\n-    public List<String> stringListAnnotated;\n-\n-    @XNodeMap(value = \"stringMap/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n-    public Map<String, String> stringMap;\n-\n-    @XNodeMap(value = \"stringMapAnnotated/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n-    @XMerge(value = \"stringMapAnnotated\" + XMerge.MERGE, defaultAssignment = false)\n-    @XRemove(\"stringMapAnnotated@empty\")\n-    public Map<String, String> stringMapAnnotated;\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\nnew file mode 100644\nindex 00000000000..58a0ae39ff9\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n", "chunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodeList;\n+import org.nuxeo.common.xmap.annotation.XNodeMap;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Sample descriptor with default expected registry annotations and list/map various cases.\n+ *\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+@XRegistry\n+@XRegistryId(value = \"@name\")\n+public class SampleDescriptor {\n+\n+    @XNode(\"@name\")\n+    public String name;\n+\n+    @XNode(value = \"value\", defaultAssignment = \"Sample\")\n+    public String value;\n+\n+    @XNode(value = \"bool\", defaultAssignment = \"true\")\n+    public boolean bool;\n+\n+    @XNodeList(value = \"stringList/item\", type = ArrayList.class, componentType = String.class)\n+    public List<String> stringList;\n+\n+    @XNodeList(value = \"stringListAnnotated/item\", type = ArrayList.class, componentType = String.class, nullByDefault = true)\n+    @XMerge(value = \"stringListAnnotated@append\", fallback = \"stringListAnnotated\"\n+            + XMerge.MERGE, defaultAssignment = true)\n+    @XRemove(\"stringListAnnotated@remove\")\n+    public List<String> stringListAnnotated;\n+\n+    @XNodeMap(value = \"stringMap/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n+    public Map<String, String> stringMap;\n+\n+    @XNodeMap(value = \"stringMapAnnotated/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n+    @XMerge(value = \"stringMapAnnotated\" + XMerge.MERGE, defaultAssignment = false)\n+    @XRemove(\"stringMapAnnotated@empty\")\n+    public Map<String, String> stringMapAnnotated;\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\nindex 6870134d4dd..58a0ae39ff9 100644\n--- a/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n+++ b/modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java\n", "chunk": "@@ -39,29 +39,29 @@ import org.nuxeo.common.xmap.annotation.XObject;\n public class SampleDescriptor {\n \n     @XNode(\"@name\")\n-    String name;\n+    public String name;\n \n     @XNode(value = \"value\", defaultAssignment = \"Sample\")\n-    String value;\n+    public String value;\n \n     @XNode(value = \"bool\", defaultAssignment = \"true\")\n-    boolean bool;\n+    public boolean bool;\n \n     @XNodeList(value = \"stringList/item\", type = ArrayList.class, componentType = String.class)\n-    List<String> stringList;\n+    public List<String> stringList;\n \n     @XNodeList(value = \"stringListAnnotated/item\", type = ArrayList.class, componentType = String.class, nullByDefault = true)\n     @XMerge(value = \"stringListAnnotated@append\", fallback = \"stringListAnnotated\"\n             + XMerge.MERGE, defaultAssignment = true)\n     @XRemove(\"stringListAnnotated@remove\")\n-    List<String> stringListAnnotated;\n+    public List<String> stringListAnnotated;\n \n     @XNodeMap(value = \"stringMap/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n-    Map<String, String> stringMap;\n+    public Map<String, String> stringMap;\n \n     @XNodeMap(value = \"stringMapAnnotated/item\", key = \"@id\", type = HashMap.class, componentType = String.class)\n     @XMerge(value = \"stringMapAnnotated\" + XMerge.MERGE, defaultAssignment = false)\n     @XRemove(\"stringMapAnnotated@empty\")\n-    Map<String, String> stringMapAnnotated;\n+    public Map<String, String> stringMapAnnotated;\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDA5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044094", "body": "Remove ` = false`", "bodyText": "Remove  = false", "bodyHTML": "<p dir=\"auto\">Remove <code> = false</code></p>", "author": "efge", "createdAt": "2020-12-11T15:50:34Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_POINT = \"single\";\n+\n+    public static final String MAP_POINT = \"map\";\n+\n+    public static final String CUSTOM_POINT = \"custom\";\n+\n+    public static final String LEGACY_POINT = \"legacy\";\n+\n+    protected boolean registryContributionRegistered = false;", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nindex 7c217cd2383..1c6982d7ed6 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -32,39 +32,39 @@ import org.nuxeo.runtime.model.DefaultComponent;\n  */\n public class SampleComponent extends DefaultComponent {\n \n-    public static final String SINGLE_POINT = \"single\";\n+    public static final String SINGLE_XP = \"single\";\n \n-    public static final String MAP_POINT = \"map\";\n+    public static final String MAP_XP = \"map\";\n \n-    public static final String CUSTOM_POINT = \"custom\";\n+    public static final String CUSTOM_XP = \"custom\";\n \n-    public static final String LEGACY_POINT = \"legacy\";\n+    public static final String LEGACY_XP = \"legacy\";\n \n-    protected boolean registryContributionRegistered = false;\n+    protected boolean registryContributionRegistered;\n \n-    protected boolean registryContributionUnregistered = false;\n+    protected boolean registryContributionUnregistered;\n \n     protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n \n     public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_POINT);\n+        return getExtensionPointRegistry(SINGLE_XP);\n     }\n \n     public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_POINT);\n+        return getExtensionPointRegistry(MAP_XP);\n     }\n \n     public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_POINT);\n+        return getExtensionPointRegistry(CUSTOM_XP);\n     }\n \n     public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_POINT);\n+        return getExtensionPointRegistry(LEGACY_XP);\n     }\n \n     @Override\n     public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_POINT.equals(xp)) {\n+        if (LEGACY_XP.equals(xp)) {\n             SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n             legacyRegistry.put(desc.name, desc);\n         } else {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\ndeleted file mode 100644\nindex 1c6982d7ed6..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ /dev/null\n", "chunk": "@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime.registry;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.common.xmap.registry.SingleRegistry;\n-import org.nuxeo.runtime.model.ComponentInstance;\n-import org.nuxeo.runtime.model.DefaultComponent;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleComponent extends DefaultComponent {\n-\n-    public static final String SINGLE_XP = \"single\";\n-\n-    public static final String MAP_XP = \"map\";\n-\n-    public static final String CUSTOM_XP = \"custom\";\n-\n-    public static final String LEGACY_XP = \"legacy\";\n-\n-    protected boolean registryContributionRegistered;\n-\n-    protected boolean registryContributionUnregistered;\n-\n-    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n-\n-    public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_XP);\n-    }\n-\n-    public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_XP);\n-    }\n-\n-    public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_XP);\n-    }\n-\n-    public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_XP);\n-    }\n-\n-    @Override\n-    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.put(desc.name, desc);\n-        } else {\n-            registryContributionRegistered = true;\n-        }\n-    }\n-\n-    // not called in tests anyway\n-    @Override\n-    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.remove(desc.name);\n-        } else {\n-            registryContributionUnregistered = true;\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nnew file mode 100644\nindex 00000000000..1c6982d7ed6\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_XP = \"single\";\n+\n+    public static final String MAP_XP = \"map\";\n+\n+    public static final String CUSTOM_XP = \"custom\";\n+\n+    public static final String LEGACY_XP = \"legacy\";\n+\n+    protected boolean registryContributionRegistered;\n+\n+    protected boolean registryContributionUnregistered;\n+\n+    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n+\n+    public SingleRegistry getSingleRegistry() {\n+        return getExtensionPointRegistry(SINGLE_XP);\n+    }\n+\n+    public MapRegistry getMapRegistry() {\n+        return getExtensionPointRegistry(MAP_XP);\n+    }\n+\n+    public SampleRegistry getCustomRegistry() {\n+        return getExtensionPointRegistry(CUSTOM_XP);\n+    }\n+\n+    public MapRegistry getLegacyRegistry() {\n+        return getExtensionPointRegistry(LEGACY_XP);\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.put(desc.name, desc);\n+        } else {\n+            registryContributionRegistered = true;\n+        }\n+    }\n+\n+    // not called in tests anyway\n+    @Override\n+    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.remove(desc.name);\n+        } else {\n+            registryContributionUnregistered = true;\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\ndeleted file mode 100644\nindex 1c6982d7ed6..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ /dev/null\n", "chunk": "@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime.registry;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.common.xmap.registry.SingleRegistry;\n-import org.nuxeo.runtime.model.ComponentInstance;\n-import org.nuxeo.runtime.model.DefaultComponent;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleComponent extends DefaultComponent {\n-\n-    public static final String SINGLE_XP = \"single\";\n-\n-    public static final String MAP_XP = \"map\";\n-\n-    public static final String CUSTOM_XP = \"custom\";\n-\n-    public static final String LEGACY_XP = \"legacy\";\n-\n-    protected boolean registryContributionRegistered;\n-\n-    protected boolean registryContributionUnregistered;\n-\n-    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n-\n-    public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_XP);\n-    }\n-\n-    public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_XP);\n-    }\n-\n-    public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_XP);\n-    }\n-\n-    public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_XP);\n-    }\n-\n-    @Override\n-    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.put(desc.name, desc);\n-        } else {\n-            registryContributionRegistered = true;\n-        }\n-    }\n-\n-    // not called in tests anyway\n-    @Override\n-    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.remove(desc.name);\n-        } else {\n-            registryContributionUnregistered = true;\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nnew file mode 100644\nindex 00000000000..1c6982d7ed6\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_XP = \"single\";\n+\n+    public static final String MAP_XP = \"map\";\n+\n+    public static final String CUSTOM_XP = \"custom\";\n+\n+    public static final String LEGACY_XP = \"legacy\";\n+\n+    protected boolean registryContributionRegistered;\n+\n+    protected boolean registryContributionUnregistered;\n+\n+    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n+\n+    public SingleRegistry getSingleRegistry() {\n+        return getExtensionPointRegistry(SINGLE_XP);\n+    }\n+\n+    public MapRegistry getMapRegistry() {\n+        return getExtensionPointRegistry(MAP_XP);\n+    }\n+\n+    public SampleRegistry getCustomRegistry() {\n+        return getExtensionPointRegistry(CUSTOM_XP);\n+    }\n+\n+    public MapRegistry getLegacyRegistry() {\n+        return getExtensionPointRegistry(LEGACY_XP);\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.put(desc.name, desc);\n+        } else {\n+            registryContributionRegistered = true;\n+        }\n+    }\n+\n+    // not called in tests anyway\n+    @Override\n+    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.remove(desc.name);\n+        } else {\n+            registryContributionUnregistered = true;\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nindex 7c217cd2383..1c6982d7ed6 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -32,39 +32,39 @@ import org.nuxeo.runtime.model.DefaultComponent;\n  */\n public class SampleComponent extends DefaultComponent {\n \n-    public static final String SINGLE_POINT = \"single\";\n+    public static final String SINGLE_XP = \"single\";\n \n-    public static final String MAP_POINT = \"map\";\n+    public static final String MAP_XP = \"map\";\n \n-    public static final String CUSTOM_POINT = \"custom\";\n+    public static final String CUSTOM_XP = \"custom\";\n \n-    public static final String LEGACY_POINT = \"legacy\";\n+    public static final String LEGACY_XP = \"legacy\";\n \n-    protected boolean registryContributionRegistered = false;\n+    protected boolean registryContributionRegistered;\n \n-    protected boolean registryContributionUnregistered = false;\n+    protected boolean registryContributionUnregistered;\n \n     protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n \n     public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_POINT);\n+        return getExtensionPointRegistry(SINGLE_XP);\n     }\n \n     public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_POINT);\n+        return getExtensionPointRegistry(MAP_XP);\n     }\n \n     public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_POINT);\n+        return getExtensionPointRegistry(CUSTOM_XP);\n     }\n \n     public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_POINT);\n+        return getExtensionPointRegistry(LEGACY_XP);\n     }\n \n     @Override\n     public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_POINT.equals(xp)) {\n+        if (LEGACY_XP.equals(xp)) {\n             SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n             legacyRegistry.put(desc.name, desc);\n         } else {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDUzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044536", "body": "Add newline", "bodyText": "Add newline", "bodyHTML": "<p dir=\"auto\">Add newline</p>", "author": "efge", "createdAt": "2020-12-11T15:51:15Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+public class SampleLegacyDescriptor extends SampleDescriptor {\n+\n+}", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\nindex f7265eec9d5..b02e95189c9 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n", "chunk": "@@ -26,4 +26,4 @@ import org.nuxeo.common.xmap.annotation.XObject;\n @XObject(\"descriptor\")\n public class SampleLegacyDescriptor extends SampleDescriptor {\n \n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\ndeleted file mode 100644\nindex b02e95189c9..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n+++ /dev/null\n", "chunk": "@@ -1,29 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.registry;\n-\n-import org.nuxeo.common.xmap.annotation.XObject;\n-\n-/**\n- * @since 11.5\n- */\n-@XObject(\"descriptor\")\n-public class SampleLegacyDescriptor extends SampleDescriptor {\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\nnew file mode 100644\nindex 00000000000..b02e95189c9\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n", "chunk": "@@ -0,0 +1,29 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+public class SampleLegacyDescriptor extends SampleDescriptor {\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\ndeleted file mode 100644\nindex b02e95189c9..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n+++ /dev/null\n", "chunk": "@@ -1,29 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.registry;\n-\n-import org.nuxeo.common.xmap.annotation.XObject;\n-\n-/**\n- * @since 11.5\n- */\n-@XObject(\"descriptor\")\n-public class SampleLegacyDescriptor extends SampleDescriptor {\n-\n-}\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\nnew file mode 100644\nindex 00000000000..b02e95189c9\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n", "chunk": "@@ -0,0 +1,29 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+public class SampleLegacyDescriptor extends SampleDescriptor {\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\nindex f7265eec9d5..b02e95189c9 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java\n", "chunk": "@@ -26,4 +26,4 @@ import org.nuxeo.common.xmap.annotation.XObject;\n @XObject(\"descriptor\")\n public class SampleLegacyDescriptor extends SampleDescriptor {\n \n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDc3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044772", "body": "Not needed I think", "bodyText": "Not needed I think", "bodyHTML": "<p dir=\"auto\">Not needed I think</p>", "author": "efge", "createdAt": "2020-12-11T15:51:35Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleRegistry extends MapRegistry {\n+\n+    public SampleRegistry() {\n+        super();\n+    }", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\nindex 8302ba8ff88..fb2fd3fe82e 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n", "chunk": "@@ -25,8 +25,4 @@ import org.nuxeo.common.xmap.registry.MapRegistry;\n  */\n public class SampleRegistry extends MapRegistry {\n \n-    public SampleRegistry() {\n-        super();\n-    }\n-\n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\ndeleted file mode 100644\nindex fb2fd3fe82e..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,28 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.registry;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleRegistry extends MapRegistry {\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\nnew file mode 100644\nindex 00000000000..fb2fd3fe82e\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n", "chunk": "@@ -0,0 +1,28 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleRegistry extends MapRegistry {\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\ndeleted file mode 100644\nindex fb2fd3fe82e..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,28 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.registry;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleRegistry extends MapRegistry {\n-\n-}\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\nnew file mode 100644\nindex 00000000000..fb2fd3fe82e\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n", "chunk": "@@ -0,0 +1,28 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleRegistry extends MapRegistry {\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\nindex 8302ba8ff88..fb2fd3fe82e 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java\n", "chunk": "@@ -25,8 +25,4 @@ import org.nuxeo.common.xmap.registry.MapRegistry;\n  */\n public class SampleRegistry extends MapRegistry {\n \n-    public SampleRegistry() {\n-        super();\n-    }\n-\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Njg1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541046858", "body": "Possible alternative: `%s--%s` as this is what's used in explorer URLs? Up to you.", "bodyText": "Possible alternative: %s--%s as this is what's used in explorer URLs? Up to you.", "bodyHTML": "<p dir=\"auto\">Possible alternative: <code>%s--%s</code> as this is what's used in explorer URLs? Up to you.</p>", "author": "efge", "createdAt": "2020-12-11T15:54:39Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -182,4 +185,18 @@ protected boolean unregister(String xp, Descriptor descriptor) {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n+    /**\n+     * Returns the registry for given extension point of this component.\n+     *\n+     * @since 11.5\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n+        return (T) Framework.getRuntime()\n+                            .getComponentManager()\n+                            .getExtensionPointRegistry(name, point)\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    String.format(\"Unknown registry for extension point '%s:%s'\", name, point)));", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de211459d8d4bd652d52ab911f93c171e155adf", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 9a7875efdc7..3edb52592c6 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -199,4 +215,40 @@ public class DefaultComponent implements Component, Adaptable {\n                                     String.format(\"Unknown registry for extension point '%s:%s'\", name, point)));\n     }\n \n+    /**\n+     * Returns a single contribution from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link SingleRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point) {\n+        SingleRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution();\n+    }\n+\n+    /**\n+     * Returns a single contribution with given id from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution(id);\n+    }\n+\n+    /**\n+     * Returns a list of contributions from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> List<T> getRegistryContributions(String point) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContributionValues();\n+    }\n+\n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 3edb52592c6..dbebfbca8a9 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -155,100 +149,37 @@ public class DefaultComponent implements Component, Adaptable {\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getRegistry(String, Class)\n      */\n-    @Deprecated\n     protected DescriptorRegistry getRegistry() {\n         return registry;\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n-    @Deprecated\n     protected boolean register(String xp, Descriptor descriptor) {\n         return getRegistry().register(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n-    @Deprecated\n     protected boolean unregister(String xp, Descriptor descriptor) {\n         return getRegistry().unregister(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getContribution(String, String, Class)\n      */\n-    @Deprecated\n     protected <T extends Descriptor> T getDescriptor(String xp, String id) {\n         return getRegistry().getDescriptor(name, xp, id);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getContributions(String, Class)\n      */\n-    @Deprecated\n     protected <T extends Descriptor> List<T> getDescriptors(String xp) {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n-    /**\n-     * Returns the registry for given extension point of this component.\n-     *\n-     * @since 11.5\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n-        return (T) Framework.getRuntime()\n-                            .getComponentManager()\n-                            .getExtensionPointRegistry(name, point)\n-                            .orElseThrow(() -> new IllegalArgumentException(\n-                                    String.format(\"Unknown registry for extension point '%s:%s'\", name, point)));\n-    }\n-\n-    /**\n-     * Returns a single contribution from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link SingleRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> Optional<T> getRegistryContribution(String point) {\n-        SingleRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContribution();\n-    }\n-\n-    /**\n-     * Returns a single contribution with given id from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link MapRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n-        MapRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContribution(id);\n-    }\n-\n-    /**\n-     * Returns a list of contributions from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link MapRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> List<T> getRegistryContributions(String point) {\n-        MapRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContributionValues();\n-    }\n-\n }\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex dbebfbca8a9..cffd71b2524 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -149,37 +153,100 @@ public class DefaultComponent implements Component, Adaptable {\n \n     /**\n      * @since 10.3\n+     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+     * @see #getExtensionPointRegistry(String)\n      */\n+    @Deprecated\n     protected DescriptorRegistry getRegistry() {\n         return registry;\n     }\n \n     /**\n      * @since 10.3\n+     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n+    @Deprecated\n     protected boolean register(String xp, Descriptor descriptor) {\n         return getRegistry().register(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n+     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n+    @Deprecated\n     protected boolean unregister(String xp, Descriptor descriptor) {\n         return getRegistry().unregister(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n+     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+     * @see #getRegistryContribution(String, String)\n      */\n+    @Deprecated\n     protected <T extends Descriptor> T getDescriptor(String xp, String id) {\n         return getRegistry().getDescriptor(name, xp, id);\n     }\n \n     /**\n      * @since 10.3\n+     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+     * @see #getRegistryContributions(String)\n      */\n+    @Deprecated\n     protected <T extends Descriptor> List<T> getDescriptors(String xp) {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n+    /**\n+     * Returns the registry for given extension point of this component.\n+     *\n+     * @since 11.5\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n+        return (T) Framework.getRuntime()\n+                            .getComponentManager()\n+                            .getExtensionPointRegistry(name, point)\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    String.format(\"Unknown registry for extension point '%s--%s'\", name, point)));\n+    }\n+\n+    /**\n+     * Returns a single contribution from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link SingleRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point) {\n+        SingleRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution();\n+    }\n+\n+    /**\n+     * Returns a single contribution with given id from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution(id);\n+    }\n+\n+    /**\n+     * Returns a list of contributions from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> List<T> getRegistryContributions(String point) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContributionValues();\n+    }\n+\n }\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex cffd71b2524..dbebfbca8a9 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -153,100 +149,37 @@ public class DefaultComponent implements Component, Adaptable {\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getExtensionPointRegistry(String)\n      */\n-    @Deprecated\n     protected DescriptorRegistry getRegistry() {\n         return registry;\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n-    @Deprecated\n     protected boolean register(String xp, Descriptor descriptor) {\n         return getRegistry().register(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n      */\n-    @Deprecated\n     protected boolean unregister(String xp, Descriptor descriptor) {\n         return getRegistry().unregister(name, xp, descriptor);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getRegistryContribution(String, String)\n      */\n-    @Deprecated\n     protected <T extends Descriptor> T getDescriptor(String xp, String id) {\n         return getRegistry().getDescriptor(name, xp, id);\n     }\n \n     /**\n      * @since 10.3\n-     * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n-     * @see #getRegistryContributions(String)\n      */\n-    @Deprecated\n     protected <T extends Descriptor> List<T> getDescriptors(String xp) {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n-    /**\n-     * Returns the registry for given extension point of this component.\n-     *\n-     * @since 11.5\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n-        return (T) Framework.getRuntime()\n-                            .getComponentManager()\n-                            .getExtensionPointRegistry(name, point)\n-                            .orElseThrow(() -> new IllegalArgumentException(\n-                                    String.format(\"Unknown registry for extension point '%s--%s'\", name, point)));\n-    }\n-\n-    /**\n-     * Returns a single contribution from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link SingleRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> Optional<T> getRegistryContribution(String point) {\n-        SingleRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContribution();\n-    }\n-\n-    /**\n-     * Returns a single contribution with given id from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link MapRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n-        MapRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContribution(id);\n-    }\n-\n-    /**\n-     * Returns a list of contributions from given target extension point.\n-     * <p>\n-     * Assumes the registry implements {@link MapRegistry}.\n-     *\n-     * @since 11.5\n-     */\n-    protected <T> List<T> getRegistryContributions(String point) {\n-        MapRegistry registry = getExtensionPointRegistry(point);\n-        return registry.getContributionValues();\n-    }\n-\n }\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex dbebfbca8a9..8aba99237be 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -182,4 +183,18 @@ public class DefaultComponent implements Component, Adaptable {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n+    /**\n+     * Returns the registry for given extension point of this component.\n+     *\n+     * @since 11.5\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n+        return (T) Framework.getRuntime()\n+                            .getComponentManager()\n+                            .getExtensionPointRegistry(name, point)\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    String.format(\"Unknown registry for extension point '%s--%s'\", name, point)));\n+    }\n+\n }\n", "next_change": {"commit": "c00abda03ed44b14c561624bb91f6c3d6fc22f47", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 8aba99237be..cffd71b2524 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -197,4 +213,40 @@ public class DefaultComponent implements Component, Adaptable {\n                                     String.format(\"Unknown registry for extension point '%s--%s'\", name, point)));\n     }\n \n+    /**\n+     * Returns a single contribution from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link SingleRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point) {\n+        SingleRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution();\n+    }\n+\n+    /**\n+     * Returns a single contribution with given id from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution(id);\n+    }\n+\n+    /**\n+     * Returns a list of contributions from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> List<T> getRegistryContributions(String point) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContributionValues();\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\nindex 9a7875efdc7..cffd71b2524 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java\n", "chunk": "@@ -196,7 +210,43 @@ public class DefaultComponent implements Component, Adaptable {\n                             .getComponentManager()\n                             .getExtensionPointRegistry(name, point)\n                             .orElseThrow(() -> new IllegalArgumentException(\n-                                    String.format(\"Unknown registry for extension point '%s:%s'\", name, point)));\n+                                    String.format(\"Unknown registry for extension point '%s--%s'\", name, point)));\n+    }\n+\n+    /**\n+     * Returns a single contribution from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link SingleRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point) {\n+        SingleRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution();\n+    }\n+\n+    /**\n+     * Returns a single contribution with given id from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> Optional<T> getRegistryContribution(String point, String id) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContribution(id);\n+    }\n+\n+    /**\n+     * Returns a list of contributions from given target extension point.\n+     * <p>\n+     * Assumes the registry implements {@link MapRegistry}.\n+     *\n+     * @since 11.5\n+     */\n+    protected <T> List<T> getRegistryContributions(String point) {\n+        MapRegistry registry = getExtensionPointRegistry(point);\n+        return registry.getContributionValues();\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NzUyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541047526", "body": "Could this be made an `Optional<String>`?", "bodyText": "Could this be made an Optional<String>?", "bodyHTML": "<p dir=\"auto\">Could this be made an <code>Optional&lt;String&gt;</code>?</p>", "author": "efge", "createdAt": "2020-12-11T15:55:35Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java", "diffHunk": "@@ -65,4 +68,18 @@\n      */\n     String getSuperComponent();\n \n+    /**\n+     * Returns the potential custom registry class for this extension point.\n+     *\n+     * @since 11.5\n+     */\n+    String getRegistryClass();", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI3Nzk0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542277946", "bodyText": "This depends if we'd like to keep ExtensionPointImpl as a simple POJO.\nAlso using Optional might interfere with existing serialization logic.", "author": "atchertchian", "createdAt": "2020-12-14T10:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NzUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc2MTkwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546761904", "bodyText": "Ok let's keeps is simple and old-style.", "author": "efge", "createdAt": "2020-12-21T15:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NzUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\nindex 3f1881a3d9b..8374d1e3484 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n", "chunk": "@@ -68,18 +65,4 @@ public interface ExtensionPoint {\n      */\n     String getSuperComponent();\n \n-    /**\n-     * Returns the potential custom registry class for this extension point.\n-     *\n-     * @since 11.5\n-     */\n-    String getRegistryClass();\n-\n-    /**\n-     * Returns the XMap object that matches {@link #getContributions()} classes.\n-     *\n-     * @since 11.5\n-     */\n-    XMap getXMap();\n-\n }\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\nindex 8374d1e3484..cc13a23395f 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n", "chunk": "@@ -57,12 +60,26 @@ public interface ExtensionPoint {\n     /**\n      * Get the component owning the base extension which this one extends.\n      * <p>\n-     * If this method returns null, it means the current extension point is extending another extension point and should\n-     * forward any contribution to the base extension. The base extension has the same name as this one but it is\n-     * declared in another component.\n+     * If this method does not return null, it means the current extension point is extending another extension point\n+     * and should forward any contribution to the base extension. The base extension has the same name as this one but\n+     * it is declared in another component.\n      *\n      * @return the base extension point if this extension point is extending another extension point, or null if none\n      */\n     String getSuperComponent();\n \n+    /**\n+     * Returns the potential custom registry class for this extension point.\n+     *\n+     * @since 11.5\n+     */\n+    String getRegistryClass();\n+\n+    /**\n+     * Returns the XMap object that matches {@link #getContributions()} classes.\n+     *\n+     * @since 11.5\n+     */\n+    XMap getXMap();\n+\n }\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\nindex cc13a23395f..8374d1e3484 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n", "chunk": "@@ -60,26 +57,12 @@ public interface ExtensionPoint {\n     /**\n      * Get the component owning the base extension which this one extends.\n      * <p>\n-     * If this method does not return null, it means the current extension point is extending another extension point\n-     * and should forward any contribution to the base extension. The base extension has the same name as this one but\n-     * it is declared in another component.\n+     * If this method returns null, it means the current extension point is extending another extension point and should\n+     * forward any contribution to the base extension. The base extension has the same name as this one but it is\n+     * declared in another component.\n      *\n      * @return the base extension point if this extension point is extending another extension point, or null if none\n      */\n     String getSuperComponent();\n \n-    /**\n-     * Returns the potential custom registry class for this extension point.\n-     *\n-     * @since 11.5\n-     */\n-    String getRegistryClass();\n-\n-    /**\n-     * Returns the XMap object that matches {@link #getContributions()} classes.\n-     *\n-     * @since 11.5\n-     */\n-    XMap getXMap();\n-\n }\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\nindex 8374d1e3484..3f1881a3d9b 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java\n", "chunk": "@@ -65,4 +68,18 @@ public interface ExtensionPoint {\n      */\n     String getSuperComponent();\n \n+    /**\n+     * Returns the potential custom registry class for this extension point.\n+     *\n+     * @since 11.5\n+     */\n+    String getRegistryClass();\n+\n+    /**\n+     * Returns the XMap object that matches {@link #getContributions()} classes.\n+     *\n+     * @since 11.5\n+     */\n+    XMap getXMap();\n+\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODgzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541048837", "body": "`fill up` -> `fill`", "bodyText": "fill up -> fill", "bodyHTML": "<p dir=\"auto\"><code>fill up</code> -&gt; <code>fill</code></p>", "author": "efge", "createdAt": "2020-12-11T15:57:18Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de211459d8d4bd652d52ab911f93c171e155adf", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..48bb69772dc 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -491,14 +491,18 @@ public class ComponentManagerImpl implements ComponentManager {\n                     if (contributions != null) {\n                         Context xctx = new XMapContext(xt.getContext());\n                         Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String marker = xt.getId();\n                         if (registry.isNull()) {\n                             // backward compatibility\n                             if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n                                 xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n                             }\n-                        } else {\n+                        } else if (!registry.isMarked(marker)) {\n+                            registry.mark(marker);\n                             // fill up registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), marker);\n                         }\n                     }\n                 } catch (XMapException e) {\n", "next_change": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 48bb69772dc..e76f0495b79 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -499,10 +499,10 @@ public class ComponentManagerImpl implements ComponentManager {\n                                 // be recomputed\n                                 xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n                             }\n-                        } else if (!registry.isMarked(marker)) {\n-                            registry.mark(marker);\n-                            // fill up registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), marker);\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n                         }\n                     }\n                 } catch (XMapException e) {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex e76f0495b79..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -474,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,24 +473,133 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String tag = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n+        }\n+    }\n+\n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -473,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,26 +473,131 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n         }\n     }\n \n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n+    }\n+\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -491,14 +490,18 @@ public class ComponentManagerImpl implements ComponentManager {\n                     if (contributions != null) {\n                         Context xctx = new XMapContext(xt.getContext());\n                         Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String tag = xt.getId();\n                         if (registry.isNull()) {\n                             // backward compatibility\n                             if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n                                 xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n                             }\n-                        } else {\n-                            // fill up registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n                         }\n                     }\n                 } catch (XMapException e) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0OTU4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541049580", "body": "`ConcurrentMap` -> `Map`", "bodyText": "ConcurrentMap -> Map", "bodyHTML": "<p dir=\"auto\"><code>ConcurrentMap</code> -&gt; <code>Map</code></p>", "author": "efge", "createdAt": "2020-12-11T15:58:25Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..e76f0495b79 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -534,7 +538,7 @@ public class ComponentManagerImpl implements ComponentManager {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        ConcurrentMap<String, Registry> target = registries.get(component);\n+        Map<String, Registry> target = registries.get(component);\n         if (target != null && target.containsKey(point)) {\n             Registry registry = target.get(point);\n             if (!registry.isNull()) {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex e76f0495b79..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -474,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,24 +473,133 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String tag = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n+        }\n+    }\n+\n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -473,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,26 +473,131 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n         }\n     }\n \n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n+    }\n+\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -534,7 +537,7 @@ public class ComponentManagerImpl implements ComponentManager {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        ConcurrentMap<String, Registry> target = registries.get(component);\n+        Map<String, Registry> target = registries.get(component);\n         if (target != null && target.containsKey(point)) {\n             Registry registry = target.get(point);\n             if (!registry.isNull()) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0OTk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541049961", "body": "`ConcurrentMap` -> `Map`", "bodyText": "ConcurrentMap -> Map", "bodyHTML": "<p dir=\"auto\"><code>ConcurrentMap</code> -&gt; <code>Map</code></p>", "author": "efge", "createdAt": "2020-12-11T15:58:55Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -128,6 +138,15 @@\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n+    /**\n+     * Target Component > Extension Point > Registry\n+     *\n+     * @since 11.5\n+     */\n+    protected final ConcurrentMap<String, ConcurrentMap<String, Registry>> registries;", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..e76f0495b79 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -143,7 +143,7 @@ public class ComponentManagerImpl implements ComponentManager {\n      *\n      * @since 11.5\n      */\n-    protected final ConcurrentMap<String, ConcurrentMap<String, Registry>> registries;\n+    protected final Map<String, Map<String, Registry>> registries;\n \n     protected static final Registry NULL_REGISTRY = new NullRegistry();\n \n", "next_change": {"commit": "e2d8c0404ce13081856d8a561db6380672fecada", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex e76f0495b79..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -139,7 +138,7 @@ public class ComponentManagerImpl implements ComponentManager {\n     protected volatile DescriptorRegistry descriptors;\n \n     /**\n-     * Target Component > Extension Point > Registry\n+     * Target Component &gt; Extension Point &gt; Registry\n      *\n      * @since 11.5\n      */\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -137,15 +128,6 @@ public class ComponentManagerImpl implements ComponentManager {\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n-    /**\n-     * Target Component &gt; Extension Point &gt; Registry\n-     *\n-     * @since 11.5\n-     */\n-    protected final Map<String, Map<String, Registry>> registries;\n-\n-    protected static final Registry NULL_REGISTRY = new NullRegistry();\n-\n     /**\n      * @since 9.2\n      */\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -128,6 +137,15 @@ public class ComponentManagerImpl implements ComponentManager {\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n+    /**\n+     * Target Component &gt; Extension Point &gt; Registry\n+     *\n+     * @since 11.5\n+     */\n+    protected final Map<String, Map<String, Registry>> registries;\n+\n+    protected static final Registry NULL_REGISTRY = new NullRegistry();\n+\n     /**\n      * @since 9.2\n      */\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -137,15 +128,6 @@ public class ComponentManagerImpl implements ComponentManager {\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n-    /**\n-     * Target Component &gt; Extension Point &gt; Registry\n-     *\n-     * @since 11.5\n-     */\n-    protected final Map<String, Map<String, Registry>> registries;\n-\n-    protected static final Registry NULL_REGISTRY = new NullRegistry();\n-\n     /**\n      * @since 9.2\n      */\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -128,6 +137,15 @@ public class ComponentManagerImpl implements ComponentManager {\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n+    /**\n+     * Target Component &gt; Extension Point &gt; Registry\n+     *\n+     * @since 11.5\n+     */\n+    protected final Map<String, Map<String, Registry>> registries;\n+\n+    protected static final Registry NULL_REGISTRY = new NullRegistry();\n+\n     /**\n      * @since 9.2\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -139,11 +138,11 @@ public class ComponentManagerImpl implements ComponentManager {\n     protected volatile DescriptorRegistry descriptors;\n \n     /**\n-     * Target Component > Extension Point > Registry\n+     * Target Component &gt; Extension Point &gt; Registry\n      *\n      * @since 11.5\n      */\n-    protected final ConcurrentMap<String, ConcurrentMap<String, Registry>> registries;\n+    protected final Map<String, Map<String, Registry>> registries;\n \n     protected static final Registry NULL_REGISTRY = new NullRegistry();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNTA2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541335065", "body": "You could set it to `NULL_REGISTRY` directly when the variable is declared, and have `.orElse(NULL_REGISTRY)`. Or even declare the variable just `Registry registry;` and have \r\n\r\n    if (contributions.length == 0) {\r\n        registry = NULL_REGISTRY;\r\n    } else {\r\n        ...\r\n\r\nThis style of single-assignment is sometimes easier to reason about.\r\n", "bodyText": "You could set it to NULL_REGISTRY directly when the variable is declared, and have .orElse(NULL_REGISTRY). Or even declare the variable just Registry registry; and have\nif (contributions.length == 0) {\n    registry = NULL_REGISTRY;\n} else {\n    ...\n\nThis style of single-assignment is sometimes easier to reason about.", "bodyHTML": "<p dir=\"auto\">You could set it to <code>NULL_REGISTRY</code> directly when the variable is declared, and have <code>.orElse(NULL_REGISTRY)</code>. Or even declare the variable just <code>Registry registry;</code> and have</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (contributions.length == 0) {\n    registry = NULL_REGISTRY;\n} else {\n    ...\"><pre><code>if (contributions.length == 0) {\n    registry = NULL_REGISTRY;\n} else {\n    ...\n</code></pre></div>\n<p dir=\"auto\">This style of single-assignment is sometimes easier to reason about.</p>", "author": "efge", "createdAt": "2020-12-11T21:55:06Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isEmpty()) {\n+            Registry registry = null;\n+            String point = xp.getName();\n+            String registryClass = xp.getRegistryClass();\n+            if (registryClass != null) {\n+                try {\n+                    Class<?> clazz = Class.forName(registryClass);\n+                    Constructor<?> constructor = clazz.getConstructor();\n+                    registry = (Registry) constructor.newInstance();\n+                } catch (ReflectiveOperationException e) {\n+                    String msg = String.format(\n+                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                            component, point, registryClass, e.toString());\n+                    throw new RuntimeException(msg, e);\n+                }\n+            } else {\n+                Class<?>[] contributions = xp.getContributions();\n+                if (contributions.length != 0) {\n+                    // compute registry from annotations, taking first registry\n+                    XMap xmap = xp.getXMap();\n+                    registry = Arrays.stream(contributions)\n+                                     .map(xmap::getObject)\n+                                     .filter(Objects::nonNull)\n+                                     .map(xmap::getRegistry)\n+                                     .filter(Objects::nonNull)\n+                                     .findFirst()\n+                                     .orElse(null);\n+                }\n+            }\n+            if (registry == null) {\n+                registry = NULL_REGISTRY;", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MjQ3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542292479", "bodyText": "I changed it, please tell if still not that-readable", "author": "atchertchian", "createdAt": "2020-12-14T10:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNTA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..e76f0495b79 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -546,42 +550,39 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n         Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (stored.isEmpty()) {\n-            Registry registry = null;\n-            String point = xp.getName();\n-            String registryClass = xp.getRegistryClass();\n-            if (registryClass != null) {\n-                try {\n-                    Class<?> clazz = Class.forName(registryClass);\n-                    Constructor<?> constructor = clazz.getConstructor();\n-                    registry = (Registry) constructor.newInstance();\n-                } catch (ReflectiveOperationException e) {\n-                    String msg = String.format(\n-                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                            component, point, registryClass, e.toString());\n-                    throw new RuntimeException(msg, e);\n-                }\n-            } else {\n-                Class<?>[] contributions = xp.getContributions();\n-                if (contributions.length != 0) {\n-                    // compute registry from annotations, taking first registry\n-                    XMap xmap = xp.getXMap();\n-                    registry = Arrays.stream(contributions)\n-                                     .map(xmap::getObject)\n-                                     .filter(Objects::nonNull)\n-                                     .map(xmap::getRegistry)\n-                                     .filter(Objects::nonNull)\n-                                     .findFirst()\n-                                     .orElse(null);\n-                }\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n             }\n-            if (registry == null) {\n-                registry = NULL_REGISTRY;\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n             }\n-            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-            return registry;\n         }\n-        return stored.get();\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n     }\n \n     protected void createRegistries(RegistrationInfo ri) {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex e76f0495b79..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -474,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,24 +473,133 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String tag = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n+        }\n+    }\n+\n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -473,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,26 +473,131 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n         }\n     }\n \n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n+    }\n+\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -546,42 +549,39 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n         Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (stored.isEmpty()) {\n-            Registry registry = null;\n-            String point = xp.getName();\n-            String registryClass = xp.getRegistryClass();\n-            if (registryClass != null) {\n-                try {\n-                    Class<?> clazz = Class.forName(registryClass);\n-                    Constructor<?> constructor = clazz.getConstructor();\n-                    registry = (Registry) constructor.newInstance();\n-                } catch (ReflectiveOperationException e) {\n-                    String msg = String.format(\n-                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                            component, point, registryClass, e.toString());\n-                    throw new RuntimeException(msg, e);\n-                }\n-            } else {\n-                Class<?>[] contributions = xp.getContributions();\n-                if (contributions.length != 0) {\n-                    // compute registry from annotations, taking first registry\n-                    XMap xmap = xp.getXMap();\n-                    registry = Arrays.stream(contributions)\n-                                     .map(xmap::getObject)\n-                                     .filter(Objects::nonNull)\n-                                     .map(xmap::getRegistry)\n-                                     .filter(Objects::nonNull)\n-                                     .findFirst()\n-                                     .orElse(null);\n-                }\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n             }\n-            if (registry == null) {\n-                registry = NULL_REGISTRY;\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n             }\n-            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-            return registry;\n         }\n-        return stored.get();\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n     }\n \n     protected void createRegistries(RegistrationInfo ri) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzOTIzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541339237", "body": "Maybe start with\r\n\r\n    if (!stored.isEmpty()) {\r\n        return stored.get();\r\n    }\r\n\r\nand deindent all the rest", "bodyText": "Maybe start with\nif (!stored.isEmpty()) {\n    return stored.get();\n}\n\nand deindent all the rest", "bodyHTML": "<p dir=\"auto\">Maybe start with</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!stored.isEmpty()) {\n    return stored.get();\n}\"><pre><code>if (!stored.isEmpty()) {\n    return stored.get();\n}\n</code></pre></div>\n<p dir=\"auto\">and deindent all the rest</p>", "author": "efge", "createdAt": "2020-12-11T21:59:35Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isEmpty()) {\n+            Registry registry = null;\n+            String point = xp.getName();\n+            String registryClass = xp.getRegistryClass();\n+            if (registryClass != null) {\n+                try {\n+                    Class<?> clazz = Class.forName(registryClass);\n+                    Constructor<?> constructor = clazz.getConstructor();\n+                    registry = (Registry) constructor.newInstance();\n+                } catch (ReflectiveOperationException e) {\n+                    String msg = String.format(\n+                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                            component, point, registryClass, e.toString());\n+                    throw new RuntimeException(msg, e);\n+                }\n+            } else {\n+                Class<?>[] contributions = xp.getContributions();\n+                if (contributions.length != 0) {\n+                    // compute registry from annotations, taking first registry\n+                    XMap xmap = xp.getXMap();\n+                    registry = Arrays.stream(contributions)\n+                                     .map(xmap::getObject)\n+                                     .filter(Objects::nonNull)\n+                                     .map(xmap::getRegistry)\n+                                     .filter(Objects::nonNull)\n+                                     .findFirst()\n+                                     .orElse(null);\n+                }\n+            }\n+            if (registry == null) {\n+                registry = NULL_REGISTRY;\n+            }\n+            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+            return registry;\n+        }\n+        return stored.get();", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..e76f0495b79 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -546,42 +550,39 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n         Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (stored.isEmpty()) {\n-            Registry registry = null;\n-            String point = xp.getName();\n-            String registryClass = xp.getRegistryClass();\n-            if (registryClass != null) {\n-                try {\n-                    Class<?> clazz = Class.forName(registryClass);\n-                    Constructor<?> constructor = clazz.getConstructor();\n-                    registry = (Registry) constructor.newInstance();\n-                } catch (ReflectiveOperationException e) {\n-                    String msg = String.format(\n-                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                            component, point, registryClass, e.toString());\n-                    throw new RuntimeException(msg, e);\n-                }\n-            } else {\n-                Class<?>[] contributions = xp.getContributions();\n-                if (contributions.length != 0) {\n-                    // compute registry from annotations, taking first registry\n-                    XMap xmap = xp.getXMap();\n-                    registry = Arrays.stream(contributions)\n-                                     .map(xmap::getObject)\n-                                     .filter(Objects::nonNull)\n-                                     .map(xmap::getRegistry)\n-                                     .filter(Objects::nonNull)\n-                                     .findFirst()\n-                                     .orElse(null);\n-                }\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n             }\n-            if (registry == null) {\n-                registry = NULL_REGISTRY;\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n             }\n-            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-            return registry;\n         }\n-        return stored.get();\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n     }\n \n     protected void createRegistries(RegistrationInfo ri) {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex e76f0495b79..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -474,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..c90733d598c 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,24 +473,133 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String tag = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                // overload use case: loaded contributions should use the old descriptor so should not\n+                                // be recomputed\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else if (!registry.isTagged(tag)) {\n+                            registry.tag(tag);\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n+        }\n+    }\n+\n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex c90733d598c..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -473,133 +453,24 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        String tag = xt.getId();\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                // overload use case: loaded contributions should use the old descriptor so should not\n-                                // be recomputed\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else if (!registry.isTagged(tag)) {\n-                            registry.tag(tag);\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), tag);\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n-        }\n-    }\n-\n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n     }\n \n     public synchronized void registerServices(RegistrationInfo ri) {\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,26 +473,131 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n         }\n     }\n \n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n+    }\n+\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 36ebed3a05a..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -546,42 +549,39 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n         Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (stored.isEmpty()) {\n-            Registry registry = null;\n-            String point = xp.getName();\n-            String registryClass = xp.getRegistryClass();\n-            if (registryClass != null) {\n-                try {\n-                    Class<?> clazz = Class.forName(registryClass);\n-                    Constructor<?> constructor = clazz.getConstructor();\n-                    registry = (Registry) constructor.newInstance();\n-                } catch (ReflectiveOperationException e) {\n-                    String msg = String.format(\n-                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                            component, point, registryClass, e.toString());\n-                    throw new RuntimeException(msg, e);\n-                }\n-            } else {\n-                Class<?>[] contributions = xp.getContributions();\n-                if (contributions.length != 0) {\n-                    // compute registry from annotations, taking first registry\n-                    XMap xmap = xp.getXMap();\n-                    registry = Arrays.stream(contributions)\n-                                     .map(xmap::getObject)\n-                                     .filter(Objects::nonNull)\n-                                     .map(xmap::getRegistry)\n-                                     .filter(Objects::nonNull)\n-                                     .findFirst()\n-                                     .orElse(null);\n-                }\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n             }\n-            if (registry == null) {\n-                registry = NULL_REGISTRY;\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n             }\n-            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-            return registry;\n         }\n-        return stored.get();\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n     }\n \n     protected void createRegistries(RegistrationInfo ri) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0MTM0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541341341", "body": "You don't need `i`, so use `for (Class<?> contrib : contributions) {` ", "bodyText": "You don't need i, so use for (Class<?> contrib : contributions) {", "bodyHTML": "<p dir=\"auto\">You don't need <code>i</code>, so use <code>for (Class&lt;?&gt; contrib : contributions) {</code></p>", "author": "efge", "createdAt": "2020-12-11T22:01:54Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java", "diffHunk": "@@ -76,39 +81,24 @@ public String getSuperComponent() {\n         return superComponent;\n     }\n \n-    public Extension createExtension(Element element) {\n-        return null;\n+    @Override\n+    public String getRegistryClass() {\n+        return registryKlass;\n     }\n \n-    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n-        Object[] contribs = extension.getContributions();\n-        if (contribs != null) {\n-            // contributions already computed - this should e an overloaded (extended) extension point\n-            return contribs;\n-        }\n-        // should compute now the contributions\n-        if (contributions != null) {\n-            if (xmap == null) {\n-                xmap = new XMap();\n-                for (Class<?> contrib : contributions) {\n-                    if (contrib != null) {\n-                        xmap.register(contrib);\n-                    } else {\n-                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n-                                + owner.getComponent().getName());\n-                    }\n-                }\n-            }\n-            try {\n-                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n-            } catch (XMapException e) {\n+    @Override\n+    public XMap getXMap() {\n+        XMap xmap = new XMap();\n+        for (int i = 0; i < contributions.length; i++) {\n+            Class<?> contrib = contributions[i];", "originalCommit": "28facc7ba6cdcdbc1e99612d09a532c666316475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex b72bfc05f53..433d2e83321 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -89,8 +89,7 @@ public class ExtensionPointImpl implements ExtensionPoint {\n     @Override\n     public XMap getXMap() {\n         XMap xmap = new XMap();\n-        for (int i = 0; i < contributions.length; i++) {\n-            Class<?> contrib = contributions[i];\n+        for (Class<?> contrib : contributions) {\n             if (contrib != null) {\n                 xmap.register(contrib);\n             } else {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex 433d2e83321..75576a767bf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -81,23 +76,39 @@ public class ExtensionPointImpl implements ExtensionPoint {\n         return superComponent;\n     }\n \n-    @Override\n-    public String getRegistryClass() {\n-        return registryKlass;\n+    public Extension createExtension(Element element) {\n+        return null;\n     }\n \n-    @Override\n-    public XMap getXMap() {\n-        XMap xmap = new XMap();\n-        for (Class<?> contrib : contributions) {\n-            if (contrib != null) {\n-                xmap.register(contrib);\n-            } else {\n+    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n+        Object[] contribs = extension.getContributions();\n+        if (contribs != null) {\n+            // contributions already computed - this should e an overloaded (extended) extension point\n+            return contribs;\n+        }\n+        // should compute now the contributions\n+        if (contributions != null) {\n+            if (xmap == null) {\n+                xmap = new XMap();\n+                for (Class<?> contrib : contributions) {\n+                    if (contrib != null) {\n+                        xmap.register(contrib);\n+                    } else {\n+                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n+                                + owner.getComponent().getName());\n+                    }\n+                }\n+            }\n+            try {\n+                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n+            } catch (XMapException e) {\n                 throw new RuntimeException(\n-                        \"Unknown implementation class when contributing to \" + ri.getComponent().getName());\n+                        e.getMessage() + \" while processing component: \" + extension.getComponent().getName().getName(),\n+                        e);\n             }\n+            extension.setContributions(contribs);\n         }\n-        return xmap;\n+        return contribs;\n     }\n \n }\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex 75576a767bf..433d2e83321 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -76,39 +81,23 @@ public class ExtensionPointImpl implements ExtensionPoint {\n         return superComponent;\n     }\n \n-    public Extension createExtension(Element element) {\n-        return null;\n+    @Override\n+    public String getRegistryClass() {\n+        return registryKlass;\n     }\n \n-    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n-        Object[] contribs = extension.getContributions();\n-        if (contribs != null) {\n-            // contributions already computed - this should e an overloaded (extended) extension point\n-            return contribs;\n-        }\n-        // should compute now the contributions\n-        if (contributions != null) {\n-            if (xmap == null) {\n-                xmap = new XMap();\n-                for (Class<?> contrib : contributions) {\n-                    if (contrib != null) {\n-                        xmap.register(contrib);\n-                    } else {\n-                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n-                                + owner.getComponent().getName());\n-                    }\n-                }\n-            }\n-            try {\n-                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n-            } catch (XMapException e) {\n+    @Override\n+    public XMap getXMap() {\n+        XMap xmap = new XMap();\n+        for (Class<?> contrib : contributions) {\n+            if (contrib != null) {\n+                xmap.register(contrib);\n+            } else {\n                 throw new RuntimeException(\n-                        e.getMessage() + \" while processing component: \" + extension.getComponent().getName().getName(),\n-                        e);\n+                        \"Unknown implementation class when contributing to \" + ri.getComponent().getName());\n             }\n-            extension.setContributions(contribs);\n         }\n-        return contribs;\n+        return xmap;\n     }\n \n }\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex 433d2e83321..75576a767bf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -81,23 +76,39 @@ public class ExtensionPointImpl implements ExtensionPoint {\n         return superComponent;\n     }\n \n-    @Override\n-    public String getRegistryClass() {\n-        return registryKlass;\n+    public Extension createExtension(Element element) {\n+        return null;\n     }\n \n-    @Override\n-    public XMap getXMap() {\n-        XMap xmap = new XMap();\n-        for (Class<?> contrib : contributions) {\n-            if (contrib != null) {\n-                xmap.register(contrib);\n-            } else {\n+    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n+        Object[] contribs = extension.getContributions();\n+        if (contribs != null) {\n+            // contributions already computed - this should e an overloaded (extended) extension point\n+            return contribs;\n+        }\n+        // should compute now the contributions\n+        if (contributions != null) {\n+            if (xmap == null) {\n+                xmap = new XMap();\n+                for (Class<?> contrib : contributions) {\n+                    if (contrib != null) {\n+                        xmap.register(contrib);\n+                    } else {\n+                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n+                                + owner.getComponent().getName());\n+                    }\n+                }\n+            }\n+            try {\n+                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n+            } catch (XMapException e) {\n                 throw new RuntimeException(\n-                        \"Unknown implementation class when contributing to \" + ri.getComponent().getName());\n+                        e.getMessage() + \" while processing component: \" + extension.getComponent().getName().getName(),\n+                        e);\n             }\n+            extension.setContributions(contribs);\n         }\n-        return xmap;\n+        return contribs;\n     }\n \n }\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex 75576a767bf..433d2e83321 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -76,39 +81,23 @@ public class ExtensionPointImpl implements ExtensionPoint {\n         return superComponent;\n     }\n \n-    public Extension createExtension(Element element) {\n-        return null;\n+    @Override\n+    public String getRegistryClass() {\n+        return registryKlass;\n     }\n \n-    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n-        Object[] contribs = extension.getContributions();\n-        if (contribs != null) {\n-            // contributions already computed - this should e an overloaded (extended) extension point\n-            return contribs;\n-        }\n-        // should compute now the contributions\n-        if (contributions != null) {\n-            if (xmap == null) {\n-                xmap = new XMap();\n-                for (Class<?> contrib : contributions) {\n-                    if (contrib != null) {\n-                        xmap.register(contrib);\n-                    } else {\n-                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n-                                + owner.getComponent().getName());\n-                    }\n-                }\n-            }\n-            try {\n-                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n-            } catch (XMapException e) {\n+    @Override\n+    public XMap getXMap() {\n+        XMap xmap = new XMap();\n+        for (Class<?> contrib : contributions) {\n+            if (contrib != null) {\n+                xmap.register(contrib);\n+            } else {\n                 throw new RuntimeException(\n-                        e.getMessage() + \" while processing component: \" + extension.getComponent().getName().getName(),\n-                        e);\n+                        \"Unknown implementation class when contributing to \" + ri.getComponent().getName());\n             }\n-            extension.setContributions(contribs);\n         }\n-        return contribs;\n+        return xmap;\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\nindex b72bfc05f53..433d2e83321 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java\n", "chunk": "@@ -89,8 +89,7 @@ public class ExtensionPointImpl implements ExtensionPoint {\n     @Override\n     public XMap getXMap() {\n         XMap xmap = new XMap();\n-        for (int i = 0; i < contributions.length; i++) {\n-            Class<?> contrib = contributions[i];\n+        for (Class<?> contrib : contributions) {\n             if (contrib != null) {\n                 xmap.register(contrib);\n             } else {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0NDMzMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541344333", "body": "Naming suggestion: `tag` or `label` instead of `mark`.", "bodyText": "Naming suggestion: tag or label instead of mark.", "bodyHTML": "<p dir=\"auto\">Naming suggestion: <code>tag</code> or <code>label</code> instead of <code>mark</code>.</p>", "author": "efge", "createdAt": "2020-12-11T22:05:14Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java", "diffHunk": "@@ -32,6 +32,21 @@\n      */\n     boolean isNull();\n \n+    /**\n+     * Marks the registry with given identifier.\n+     */\n+    void mark(String id);", "originalCommit": "ca3746a526776e7a81dea331446d3276f677a139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1Mzc4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542353781", "bodyText": "Used \"tag\" instead", "author": "atchertchian", "createdAt": "2020-12-14T12:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0NDMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nindex d74419d287a..113acd6c14f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -33,28 +33,40 @@ public interface Registry {\n     boolean isNull();\n \n     /**\n-     * Marks the registry with given identifier.\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n+     */\n+    void initialize();\n+\n+    /**\n+     * Tags the registry with given identifier.\n+     * <p>\n+     * Several registrations can still be done with the same tag.\n      */\n-    void mark(String id);\n+    void tag(String id);\n \n     /**\n-     * Returns true if registry has been marked with given id.\n+     * Returns true if registry has been tagged with given id.\n      * <p>\n-     * After {@link #mark(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with\n-     * given marker, this method should return true.\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n      * <p>\n-     * After {@link #unregister(String)} is called with given marker, this method should return false.\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n      */\n-    boolean isMarked(String id);\n+    boolean isTagged(String id);\n \n     /**\n-     * Registers given element with given marker identifier.\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n      */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String marker);\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n \n     /**\n-     * Unregisters all elements previously registered with given marker identifier.\n+     * Unregisters all elements previously registered with given tag identifier.\n      */\n-    void unregister(String marker);\n+    void unregister(String tag);\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\ndeleted file mode 100644\nindex 113acd6c14f..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ /dev/null\n", "chunk": "@@ -1,72 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * @since 11.5\n- */\n-public interface Registry {\n-\n-    /**\n-     * Returns true if registry is just a placeholder and should not be used for registrations.\n-     */\n-    boolean isNull();\n-\n-    /**\n-     * Initialized the registry.\n-     * <p>\n-     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n-     * triggering unnecessary merge logics while the registry content is being modified.\n-     */\n-    void initialize();\n-\n-    /**\n-     * Tags the registry with given identifier.\n-     * <p>\n-     * Several registrations can still be done with the same tag.\n-     */\n-    void tag(String id);\n-\n-    /**\n-     * Returns true if registry has been tagged with given id.\n-     * <p>\n-     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n-     * tag, this method should return true.\n-     * <p>\n-     * After {@link #unregister(String)} is called with given tag, this method should return false.\n-     */\n-    boolean isTagged(String id);\n-\n-    /**\n-     * Registers given element with given tag identifier.\n-     * <p>\n-     * Several registrations can be done with the same tag.\n-     */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n-\n-    /**\n-     * Unregisters all elements previously registered with given tag identifier.\n-     */\n-    void unregister(String tag);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nnew file mode 100644\nindex 00000000000..dcb229b577e\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Interface for XML contributions management.\n+ *\n+ * @since 11.5\n+ */\n+public interface Registry {\n+\n+    /**\n+     * Returns true if registry is just a placeholder and should not be used for registrations.\n+     */\n+    boolean isNull();\n+\n+    /**\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n+     */\n+    void initialize();\n+\n+    /**\n+     * Tags the registry with given identifier.\n+     * <p>\n+     * Several registrations can still be done with the same tag.\n+     */\n+    void tag(String id);\n+\n+    /**\n+     * Returns true if registry has been tagged with given id.\n+     * <p>\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n+     * <p>\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n+     */\n+    boolean isTagged(String id);\n+\n+    /**\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n+     */\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n+\n+    /**\n+     * Unregisters all elements previously registered with given tag identifier.\n+     */\n+    void unregister(String tag);\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nindex d74419d287a..dcb229b577e 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -33,28 +35,40 @@ public interface Registry {\n     boolean isNull();\n \n     /**\n-     * Marks the registry with given identifier.\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n      */\n-    void mark(String id);\n+    void initialize();\n \n     /**\n-     * Returns true if registry has been marked with given id.\n+     * Tags the registry with given identifier.\n      * <p>\n-     * After {@link #mark(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with\n-     * given marker, this method should return true.\n+     * Several registrations can still be done with the same tag.\n+     */\n+    void tag(String id);\n+\n+    /**\n+     * Returns true if registry has been tagged with given id.\n+     * <p>\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n      * <p>\n-     * After {@link #unregister(String)} is called with given marker, this method should return false.\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n      */\n-    boolean isMarked(String id);\n+    boolean isTagged(String id);\n \n     /**\n-     * Registers given element with given marker identifier.\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n      */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String marker);\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n \n     /**\n-     * Unregisters all elements previously registered with given marker identifier.\n+     * Unregisters all elements previously registered with given tag identifier.\n      */\n-    void unregister(String marker);\n+    void unregister(String tag);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0NTM5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541345393", "body": "You should mention that a registry can have not just zero or one but also more than one.", "bodyText": "You should mention that a registry can have not just zero or one but also more than one.", "bodyHTML": "<p dir=\"auto\">You should mention that a registry can have not just zero or one but also more than one.</p>", "author": "efge", "createdAt": "2020-12-11T22:06:31Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java", "diffHunk": "@@ -32,6 +32,21 @@\n      */\n     boolean isNull();\n \n+    /**\n+     * Marks the registry with given identifier.", "originalCommit": "ca3746a526776e7a81dea331446d3276f677a139", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nindex d74419d287a..113acd6c14f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -33,28 +33,40 @@ public interface Registry {\n     boolean isNull();\n \n     /**\n-     * Marks the registry with given identifier.\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n+     */\n+    void initialize();\n+\n+    /**\n+     * Tags the registry with given identifier.\n+     * <p>\n+     * Several registrations can still be done with the same tag.\n      */\n-    void mark(String id);\n+    void tag(String id);\n \n     /**\n-     * Returns true if registry has been marked with given id.\n+     * Returns true if registry has been tagged with given id.\n      * <p>\n-     * After {@link #mark(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with\n-     * given marker, this method should return true.\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n      * <p>\n-     * After {@link #unregister(String)} is called with given marker, this method should return false.\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n      */\n-    boolean isMarked(String id);\n+    boolean isTagged(String id);\n \n     /**\n-     * Registers given element with given marker identifier.\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n      */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String marker);\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n \n     /**\n-     * Unregisters all elements previously registered with given marker identifier.\n+     * Unregisters all elements previously registered with given tag identifier.\n      */\n-    void unregister(String marker);\n+    void unregister(String tag);\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\ndeleted file mode 100644\nindex 113acd6c14f..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ /dev/null\n", "chunk": "@@ -1,72 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * @since 11.5\n- */\n-public interface Registry {\n-\n-    /**\n-     * Returns true if registry is just a placeholder and should not be used for registrations.\n-     */\n-    boolean isNull();\n-\n-    /**\n-     * Initialized the registry.\n-     * <p>\n-     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n-     * triggering unnecessary merge logics while the registry content is being modified.\n-     */\n-    void initialize();\n-\n-    /**\n-     * Tags the registry with given identifier.\n-     * <p>\n-     * Several registrations can still be done with the same tag.\n-     */\n-    void tag(String id);\n-\n-    /**\n-     * Returns true if registry has been tagged with given id.\n-     * <p>\n-     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n-     * tag, this method should return true.\n-     * <p>\n-     * After {@link #unregister(String)} is called with given tag, this method should return false.\n-     */\n-    boolean isTagged(String id);\n-\n-    /**\n-     * Registers given element with given tag identifier.\n-     * <p>\n-     * Several registrations can be done with the same tag.\n-     */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n-\n-    /**\n-     * Unregisters all elements previously registered with given tag identifier.\n-     */\n-    void unregister(String tag);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nnew file mode 100644\nindex 00000000000..dcb229b577e\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Interface for XML contributions management.\n+ *\n+ * @since 11.5\n+ */\n+public interface Registry {\n+\n+    /**\n+     * Returns true if registry is just a placeholder and should not be used for registrations.\n+     */\n+    boolean isNull();\n+\n+    /**\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n+     */\n+    void initialize();\n+\n+    /**\n+     * Tags the registry with given identifier.\n+     * <p>\n+     * Several registrations can still be done with the same tag.\n+     */\n+    void tag(String id);\n+\n+    /**\n+     * Returns true if registry has been tagged with given id.\n+     * <p>\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n+     * <p>\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n+     */\n+    boolean isTagged(String id);\n+\n+    /**\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n+     */\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n+\n+    /**\n+     * Unregisters all elements previously registered with given tag identifier.\n+     */\n+    void unregister(String tag);\n+\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\nindex d74419d287a..dcb229b577e 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java\n", "chunk": "@@ -33,28 +35,40 @@ public interface Registry {\n     boolean isNull();\n \n     /**\n-     * Marks the registry with given identifier.\n+     * Initialized the registry.\n+     * <p>\n+     * Initialization can be performed when all registrations/unregistrations have been performed. This avoids\n+     * triggering unnecessary merge logics while the registry content is being modified.\n      */\n-    void mark(String id);\n+    void initialize();\n \n     /**\n-     * Returns true if registry has been marked with given id.\n+     * Tags the registry with given identifier.\n      * <p>\n-     * After {@link #mark(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with\n-     * given marker, this method should return true.\n+     * Several registrations can still be done with the same tag.\n+     */\n+    void tag(String id);\n+\n+    /**\n+     * Returns true if registry has been tagged with given id.\n+     * <p>\n+     * After {@link #tag(String)} or {@link #register(Context, XAnnotatedObject, Element, String)} are called with given\n+     * tag, this method should return true.\n      * <p>\n-     * After {@link #unregister(String)} is called with given marker, this method should return false.\n+     * After {@link #unregister(String)} is called with given tag, this method should return false.\n      */\n-    boolean isMarked(String id);\n+    boolean isTagged(String id);\n \n     /**\n-     * Registers given element with given marker identifier.\n+     * Registers given element with given tag identifier.\n+     * <p>\n+     * Several registrations can be done with the same tag.\n      */\n-    void register(Context ctx, XAnnotatedObject xObject, Element element, String marker);\n+    void register(Context ctx, XAnnotatedObject xObject, Element element, String tag);\n \n     /**\n-     * Unregisters all elements previously registered with given marker identifier.\n+     * Unregisters all elements previously registered with given tag identifier.\n      */\n-    void unregister(String marker);\n+    void unregister(String tag);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0ODk1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541348955", "body": "`flag` -> `mark` (or whatever new name is chosen)", "bodyText": "flag -> mark (or whatever new name is chosen)", "bodyHTML": "<p dir=\"auto\"><code>flag</code> -&gt; <code>mark</code> (or whatever new name is chosen)</p>", "author": "efge", "createdAt": "2020-12-11T22:10:51Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String flag) {", "originalCommit": "f42028f6ef22060dfb5a91208821ebc38668e26c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nindex 61d2d8e736e..ef1a1a5ce53 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -39,9 +39,9 @@ public class DummyRegistry extends AbstractRegistry {\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String flag) {\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n         getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, flag);\n+            reg.register(ctx, xObject, element, tag);\n         }, () -> new RuntimeException());\n     }\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\ndeleted file mode 100644\nindex ef1a1a5ce53..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,60 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.Optional;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.nuxeo.common.xmap.registry.AbstractRegistry;\n-import org.nuxeo.common.xmap.registry.Registry;\n-import org.nuxeo.runtime.api.Framework;\n-import org.w3c.dom.Element;\n-\n-/**\n- * @since 11.5\n- */\n-public class DummyRegistry extends AbstractRegistry {\n-\n-    public Optional<Registry> getTargetRegistry() {\n-        return Framework.getRuntime()\n-                        .getComponentManager()\n-                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        // NOOP\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.unregister(tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nnew file mode 100644\nindex 00000000000..ef1a1a5ce53\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.register(ctx, xObject, element, tag);\n+        }, () -> new RuntimeException());\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        // NOOP\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.unregister(tag);\n+        }, () -> new RuntimeException());\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\ndeleted file mode 100644\nindex ef1a1a5ce53..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,60 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.Optional;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.nuxeo.common.xmap.registry.AbstractRegistry;\n-import org.nuxeo.common.xmap.registry.Registry;\n-import org.nuxeo.runtime.api.Framework;\n-import org.w3c.dom.Element;\n-\n-/**\n- * @since 11.5\n- */\n-public class DummyRegistry extends AbstractRegistry {\n-\n-    public Optional<Registry> getTargetRegistry() {\n-        return Framework.getRuntime()\n-                        .getComponentManager()\n-                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        // NOOP\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.unregister(tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-}\n", "next_change": {"commit": "701fd9b467b4ad744800deec70bd40eb650bfe98", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nnew file mode 100644\nindex 00000000000..06690ba83d4\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        Optional<Registry> optReg = getTargetRegistry();\n+        if (optReg.isPresent()) {\n+            optReg.get().register(ctx, xObject, element, tag);\n+        } else {\n+            throw new RuntimeException(\"Target registry unknown\");\n+        }\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        // NOOP\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.unregister(tag);\n+        }, () -> new RuntimeException());\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nindex 61d2d8e736e..06690ba83d4 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -39,10 +39,13 @@ public class DummyRegistry extends AbstractRegistry {\n     }\n \n     @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String flag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, flag);\n-        }, () -> new RuntimeException());\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        Optional<Registry> optReg = getTargetRegistry();\n+        if (optReg.isPresent()) {\n+            optReg.get().register(ctx, xObject, element, tag);\n+        } else {\n+            throw new RuntimeException(\"Target registry unknown\");\n+        }\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MjgwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541352801", "body": "    XAnnotatedMember[] members = Arrays.stream(values)\r\n                                       .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\r\n                                       .toArray(XAnnotatedMember[]::new);", "bodyText": "XAnnotatedMember[] members = Arrays.stream(values)\n                                   .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n                                   .toArray(XAnnotatedMember[]::new);", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"XAnnotatedMember[] members = Arrays.stream(values)\n                                   .map(value -&gt; new XAnnotatedReference(xmap, String.class, value, null, null))\n                                   .toArray(XAnnotatedMember[]::new);\"><pre><code>XAnnotatedMember[] members = Arrays.stream(values)\n                                   .map(value -&gt; new XAnnotatedReference(xmap, String.class, value, null, null))\n                                   .toArray(XAnnotatedMember[]::new);\n</code></pre></div>", "author": "efge", "createdAt": "2020-12-11T22:15:10Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }", "originalCommit": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..6d2477d10a3 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -48,10 +48,9 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n \n     public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n         super(xmap, setter);\n-        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n-        for (int i = 0; i < values.length; i++) {\n-            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n-        }\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n         init(xmap, setter, members, separator, defaultValue);\n     }\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 6d2477d10a3..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    protected boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..23f9e238829\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    public boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 23f9e238829..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    public boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "e675d86e060cff30eb806aae757cd3acc775c2fb", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..6d2477d10a3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..23f9e238829 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -48,10 +48,9 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n \n     public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n         super(xmap, setter);\n-        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n-        for (int i = 0; i < values.length; i++) {\n-            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n-        }\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n         init(xmap, setter, members, separator, defaultValue);\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1NDE5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541354193", "body": "    return Arrrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));", "bodyText": "return Arrrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return Arrrays.stream(members).anyMatch(member -&gt; member.hasValue(ctx, element));\"><pre><code>return Arrrays.stream(members).anyMatch(member -&gt; member.hasValue(ctx, element));\n</code></pre></div>", "author": "efge", "createdAt": "2020-12-11T22:16:45Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;", "originalCommit": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..6d2477d10a3 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -71,12 +70,7 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n \n     @Override\n     protected boolean hasValue(Context ctx, Element element) {\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, element)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n     }\n \n     @Override\n", "next_change": {"commit": "c902a619464c40b9ebaf46e176844d85bee8aa30", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 6d2477d10a3..23f9e238829 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -69,7 +69,7 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n     }\n \n     @Override\n-    protected boolean hasValue(Context ctx, Element element) {\n+    public boolean hasValue(Context ctx, Element element) {\n         return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n     }\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 23f9e238829..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    public boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..23f9e238829\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    public boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 23f9e238829..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    public boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "e675d86e060cff30eb806aae757cd3acc775c2fb", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..6d2477d10a3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..23f9e238829 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -70,13 +69,8 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n     }\n \n     @Override\n-    protected boolean hasValue(Context ctx, Element element) {\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, element)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+    public boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1NjExMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541356110", "body": "`return String.join(separator, values);`", "bodyText": "return String.join(separator, values);", "bodyHTML": "<p dir=\"auto\"><code>return String.join(separator, values);</code></p>", "author": "efge", "createdAt": "2020-12-11T22:19:02Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return StringUtils.join(values, separator);", "originalCommit": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..6d2477d10a3 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -91,14 +85,12 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n         if (values.isEmpty()) {\n             return getDefaultValue(ctx);\n         }\n-        return StringUtils.join(values, separator);\n+        return String.join(separator, values);\n     }\n \n     @Override\n     public void toXML(Object instance, Element parent) {\n-        for (XAnnotatedMember member : members) {\n-            member.toXML(instance, parent);\n-        }\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n     }\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 6d2477d10a3..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    protected boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..23f9e238829\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    public boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 23f9e238829..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    public boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "e675d86e060cff30eb806aae757cd3acc775c2fb", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..6d2477d10a3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..23f9e238829 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -91,14 +85,12 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n         if (values.isEmpty()) {\n             return getDefaultValue(ctx);\n         }\n-        return StringUtils.join(values, separator);\n+        return String.join(separator, values);\n     }\n \n     @Override\n     public void toXML(Object instance, Element parent) {\n-        for (XAnnotatedMember member : members) {\n-            member.toXML(instance, parent);\n-        }\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1ODI3NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541358275", "body": "`Arrays.asList(members).forEach(member -> member.toXML(instance, parent))`", "bodyText": "Arrays.asList(members).forEach(member -> member.toXML(instance, parent))", "bodyHTML": "<p dir=\"auto\"><code>Arrays.asList(members).forEach(member -&gt; member.toXML(instance, parent))</code></p>", "author": "efge", "createdAt": "2020-12-11T22:21:27Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return StringUtils.join(values, separator);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        for (XAnnotatedMember member : members) {\n+            member.toXML(instance, parent);\n+        }", "originalCommit": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..6d2477d10a3 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -91,14 +85,12 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n         if (values.isEmpty()) {\n             return getDefaultValue(ctx);\n         }\n-        return StringUtils.join(values, separator);\n+        return String.join(separator, values);\n     }\n \n     @Override\n     public void toXML(Object instance, Element parent) {\n-        for (XAnnotatedMember member : members) {\n-            member.toXML(instance, parent);\n-        }\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n     }\n \n }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 6d2477d10a3..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    protected boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..23f9e238829\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    public boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\ndeleted file mode 100644\nindex 23f9e238829..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.nuxeo.common.xmap.annotation.XNodes;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Handles multiple annotations.\n- *\n- * @since 11.5\n- */\n-public class XAnnotatedMembers extends XAnnotatedMember {\n-\n-    protected XAnnotatedMember[] members;\n-\n-    protected String separator;\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        super(xmap, setter);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n-        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n-    }\n-\n-    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n-        super(xmap, setter);\n-        XAnnotatedMember[] members = Arrays.stream(values)\n-                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n-                                           .toArray(XAnnotatedMember[]::new);\n-        init(xmap, setter, members, separator, defaultValue);\n-    }\n-\n-    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n-            String defaultValue) {\n-        this.members = members;\n-        this.separator = separator;\n-        this.defaultValue = defaultValue;\n-        if (setter != null) {\n-            type = setter.getType();\n-        } else {\n-            type = String.class;\n-        }\n-        valueFactory = xmap.getValueFactory(type);\n-        xao = xmap.register(type);\n-    }\n-\n-    @Override\n-    public boolean hasValue(Context ctx, Element element) {\n-        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n-    }\n-\n-    @Override\n-    public Object getValue(Context ctx, Element base) {\n-        List<String> values = new ArrayList<>();\n-        for (XAnnotatedMember member : members) {\n-            if (member.hasValue(ctx, base)) {\n-                Object mvalue = member.getValue(ctx, base);\n-                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n-            }\n-        }\n-        if (values.isEmpty()) {\n-            return getDefaultValue(ctx);\n-        }\n-        return String.join(separator, values);\n-    }\n-\n-    @Override\n-    public void toXML(Object instance, Element parent) {\n-        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n-    }\n-\n-}\n", "next_change": {"commit": "e675d86e060cff30eb806aae757cd3acc775c2fb", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nnew file mode 100644\nindex 00000000000..6d2477d10a3\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = Arrays.stream(values)\n+                                           .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n+                                           .toArray(XAnnotatedMember[]::new);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        return Arrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return String.join(separator, values);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\nindex 8d49d43abc5..23f9e238829 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java\n", "chunk": "@@ -91,14 +85,12 @@ public class XAnnotatedMembers extends XAnnotatedMember {\n         if (values.isEmpty()) {\n             return getDefaultValue(ctx);\n         }\n-        return StringUtils.join(values, separator);\n+        return String.join(separator, values);\n     }\n \n     @Override\n     public void toXML(Object instance, Element parent) {\n-        for (XAnnotatedMember member : members) {\n-            member.toXML(instance, parent);\n-        }\n+        Arrays.asList(members).forEach(member -> member.toXML(instance, parent));\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1OTUxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541359514", "body": "`xregistryId.value()` can be put in a local variable", "bodyText": "xregistryId.value() can be put in a local variable", "bodyHTML": "<p dir=\"auto\"><code>xregistryId.value()</code> can be put in a local variable</p>", "author": "efge", "createdAt": "2020-12-11T22:22:46Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java", "diffHunk": "@@ -270,8 +271,13 @@ private void scanObjectRegistryAnnotations(XAnnotatedObject xob, Class<?> klass)\n         xob.setHasRegistry(xreg != null);\n         XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n         if (xregistryId != null) {\n-            xob.setRegistryId(\n-                    new XAnnotatedReference(this, String.class, xregistryId.value(), xregistryId.fallback(), null));\n+            if (xregistryId.value().length == 1) {\n+                xob.setRegistryId(new XAnnotatedReference(this, String.class, xregistryId.value()[0],\n+                        xregistryId.fallback(), xregistryId.defaultAssignment()));\n+            } else {\n+                xob.setRegistryId(new XAnnotatedMembers(this, null, xregistryId.value(), xregistryId.separator(),\n+                        xregistryId.defaultAssignment()));\n+            }", "originalCommit": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\nindex c33ee00d904..0535114d061 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n", "chunk": "@@ -271,11 +271,12 @@ public class XMap {\n         xob.setHasRegistry(xreg != null);\n         XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n         if (xregistryId != null) {\n-            if (xregistryId.value().length == 1) {\n-                xob.setRegistryId(new XAnnotatedReference(this, String.class, xregistryId.value()[0],\n-                        xregistryId.fallback(), xregistryId.defaultAssignment()));\n+            String[] idValue = xregistryId.value();\n+            if (idValue.length == 1) {\n+                xob.setRegistryId(new XAnnotatedReference(this, String.class, idValue[0], xregistryId.fallback(),\n+                        xregistryId.defaultAssignment()));\n             } else {\n-                xob.setRegistryId(new XAnnotatedMembers(this, null, xregistryId.value(), xregistryId.separator(),\n+                xob.setRegistryId(new XAnnotatedMembers(this, null, idValue, xregistryId.separator(),\n                         xregistryId.defaultAssignment()));\n             }\n         }\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\nindex 0535114d061..5042843d01d 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n", "chunk": "@@ -251,77 +206,14 @@ public class XMap {\n             }\n             Annotation anno = checkMemberAnnotation(method);\n             if (anno != null) {\n-                XAccessor setter = new XMethodAccessor(method, klass);\n-                XAnnotatedMember xm = createMember(anno, setter);\n-                xob.addMember(xm);\n-                if (anno instanceof XNode) {\n-                    scanMemberRegistryAnnotations(xob, (XNode) anno, method);\n-                }\n+                XAnnotatedMember member = createMethodMember(method, anno, aClass);\n+                xob.addMember(member);\n             }\n         }\n \n         // scan superClass annotations\n-        if (klass.getSuperclass() != null) {\n-            scanClass(xob, klass.getSuperclass());\n-        }\n-    }\n-\n-    private void scanObjectRegistryAnnotations(XAnnotatedObject xob, Class<?> klass) {\n-        XRegistry xreg = klass.getAnnotation(XRegistry.class);\n-        xob.setHasRegistry(xreg != null);\n-        XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n-        if (xregistryId != null) {\n-            String[] idValue = xregistryId.value();\n-            if (idValue.length == 1) {\n-                xob.setRegistryId(new XAnnotatedReference(this, String.class, idValue[0], xregistryId.fallback(),\n-                        xregistryId.defaultAssignment()));\n-            } else {\n-                xob.setRegistryId(new XAnnotatedMembers(this, null, idValue, xregistryId.separator(),\n-                        xregistryId.defaultAssignment()));\n-            }\n-        }\n-        if (xreg != null) {\n-            if (xreg.merge()) {\n-                xob.setMerge(new XAnnotatedReference(this, XMerge.MERGE, null, true));\n-            }\n-            if (xreg.enable()) {\n-                xob.setEnable(new XAnnotatedReference(this, XEnable.ENABLE, null, true));\n-            }\n-            if (xreg.remove()) {\n-                xob.setRemove(new XAnnotatedReference(this, XRemove.REMOVE, null, false));\n-            }\n-        }\n-    }\n-\n-    private void scanMemberRegistryAnnotations(XAnnotatedObject xob, XNode annotation, AnnotatedElement ae) {\n-        if (xob.getRegistryId() == null && ae.isAnnotationPresent(XRegistryId.class)) {\n-            xob.setRegistryId(new XAnnotatedReference(this, String.class, annotation.value(), annotation.fallback(),\n-                    annotation.defaultAssignment()));\n-        }\n-        if (xob.getMerge() == null && ae.isAnnotationPresent(XMerge.class)) {\n-            XMerge merge = ae.getAnnotation(XMerge.class);\n-            xob.setMerge(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n-                    merge.defaultAssignment()));\n-        }\n-        if (xob.getEnable() == null && ae.isAnnotationPresent(XEnable.class)) {\n-            xob.setEnable(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n-                    ae.getAnnotation(XEnable.class).defaultAssignment()));\n-        }\n-        if (xob.getRemove() == null && ae.isAnnotationPresent(XRemove.class)) {\n-            xob.setRemove(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n-                    ae.getAnnotation(XRemove.class).defaultAssignment()));\n-        }\n-    }\n-\n-    private void scanMergeAnnotations(XAnnotatedObject xob, AnnotatedElement ae, XAnnotatedList member) {\n-        if (ae.isAnnotationPresent(XMerge.class)) {\n-            XMerge merge = ae.getAnnotation(XMerge.class);\n-            member.setMerge(new XAnnotatedReference(this, merge.value(), merge.fallback(), merge.defaultAssignment()));\n-        }\n-        if (ae.isAnnotationPresent(XRemove.class)) {\n-            XRemove remove = ae.getAnnotation(XRemove.class);\n-            member.setRemove(\n-                    new XAnnotatedReference(this, remove.value(), remove.fallback(), remove.defaultAssignment()));\n+        if (aClass.getSuperclass() != null) {\n+            scanClass(xob, aClass.getSuperclass());\n         }\n     }\n \n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\nindex 5042843d01d..844f5557cc8 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n", "chunk": "@@ -206,14 +253,77 @@ public class XMap {\n             }\n             Annotation anno = checkMemberAnnotation(method);\n             if (anno != null) {\n-                XAnnotatedMember member = createMethodMember(method, anno, aClass);\n-                xob.addMember(member);\n+                XAccessor setter = new XMethodAccessor(method, klass);\n+                XAnnotatedMember xm = createMember(anno, setter);\n+                xob.addMember(xm);\n+                if (anno instanceof XNode) {\n+                    scanMemberRegistryAnnotations(xob, (XNode) anno, method);\n+                }\n             }\n         }\n \n         // scan superClass annotations\n-        if (aClass.getSuperclass() != null) {\n-            scanClass(xob, aClass.getSuperclass());\n+        if (klass.getSuperclass() != null) {\n+            scanClass(xob, klass.getSuperclass());\n+        }\n+    }\n+\n+    private void scanObjectRegistryAnnotations(XAnnotatedObject xob, Class<?> klass) {\n+        XRegistry xreg = klass.getAnnotation(XRegistry.class);\n+        xob.setHasRegistry(xreg != null);\n+        XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n+        if (xregistryId != null) {\n+            String[] idValue = xregistryId.value();\n+            if (idValue.length == 1) {\n+                xob.setRegistryId(new XAnnotatedReference(this, String.class, idValue[0], xregistryId.fallback(),\n+                        xregistryId.defaultAssignment()));\n+            } else {\n+                xob.setRegistryId(new XAnnotatedMembers(this, null, idValue, xregistryId.separator(),\n+                        xregistryId.defaultAssignment()));\n+            }\n+        }\n+        if (xreg != null) {\n+            if (xreg.merge()) {\n+                xob.setMerge(new XAnnotatedReference(this, XMerge.MERGE, null, true));\n+            }\n+            if (xreg.enable()) {\n+                xob.setEnable(new XAnnotatedReference(this, XEnable.ENABLE, null, true));\n+            }\n+            if (xreg.remove()) {\n+                xob.setRemove(new XAnnotatedReference(this, XRemove.REMOVE, null, false));\n+            }\n+        }\n+    }\n+\n+    private void scanMemberRegistryAnnotations(XAnnotatedObject xob, XNode annotation, AnnotatedElement ae) {\n+        if (xob.getRegistryId() == null && ae.isAnnotationPresent(XRegistryId.class)) {\n+            xob.setRegistryId(new XAnnotatedReference(this, String.class, annotation.value(), annotation.fallback(),\n+                    annotation.defaultAssignment()));\n+        }\n+        if (xob.getMerge() == null && ae.isAnnotationPresent(XMerge.class)) {\n+            XMerge merge = ae.getAnnotation(XMerge.class);\n+            xob.setMerge(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n+                    merge.defaultAssignment()));\n+        }\n+        if (xob.getEnable() == null && ae.isAnnotationPresent(XEnable.class)) {\n+            xob.setEnable(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n+                    ae.getAnnotation(XEnable.class).defaultAssignment()));\n+        }\n+        if (xob.getRemove() == null && ae.isAnnotationPresent(XRemove.class)) {\n+            xob.setRemove(new XAnnotatedReference(this, annotation.value(), annotation.fallback(),\n+                    ae.getAnnotation(XRemove.class).defaultAssignment()));\n+        }\n+    }\n+\n+    private void scanMergeAnnotations(XAnnotatedObject xob, AnnotatedElement ae, XAnnotatedList member) {\n+        if (ae.isAnnotationPresent(XMerge.class)) {\n+            XMerge merge = ae.getAnnotation(XMerge.class);\n+            member.setMerge(new XAnnotatedReference(this, merge.value(), merge.fallback(), merge.defaultAssignment()));\n+        }\n+        if (ae.isAnnotationPresent(XRemove.class)) {\n+            XRemove remove = ae.getAnnotation(XRemove.class);\n+            member.setRemove(\n+                    new XAnnotatedReference(this, remove.value(), remove.fallback(), remove.defaultAssignment()));\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\nindex c33ee00d904..844f5557cc8 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java\n", "chunk": "@@ -271,11 +273,12 @@ public class XMap {\n         xob.setHasRegistry(xreg != null);\n         XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n         if (xregistryId != null) {\n-            if (xregistryId.value().length == 1) {\n-                xob.setRegistryId(new XAnnotatedReference(this, String.class, xregistryId.value()[0],\n-                        xregistryId.fallback(), xregistryId.defaultAssignment()));\n+            String[] idValue = xregistryId.value();\n+            if (idValue.length == 1) {\n+                xob.setRegistryId(new XAnnotatedReference(this, String.class, idValue[0], xregistryId.fallback(),\n+                        xregistryId.defaultAssignment()));\n             } else {\n-                xob.setRegistryId(new XAnnotatedMembers(this, null, xregistryId.value(), xregistryId.separator(),\n+                xob.setRegistryId(new XAnnotatedMembers(this, null, idValue, xregistryId.separator(),\n                         xregistryId.defaultAssignment()));\n             }\n         }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2MzI0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541363245", "body": "`**/` -> `*/`", "bodyText": "**/ -> */", "bodyHTML": "<p dir=\"auto\"><code>**/</code> -&gt; <code>*/</code></p>", "author": "efge", "createdAt": "2020-12-11T22:26:32Z", "path": "modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java", "diffHunk": "@@ -24,9 +24,14 @@\n import java.util.List;\n \n import org.junit.Test;\n+import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n+/**\n+ * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+ **/", "originalCommit": "acaebc5fb220d0586a97bfe890546a98c7f6ac50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex 8fbf3a6ccc4..4dde13a517b 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -30,7 +30,7 @@ import org.nuxeo.runtime.model.DescriptorRegistry;\n \n /**\n  * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n- **/\n+ */\n @Deprecated\n public class TestDescriptorRegistry {\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex 4dde13a517b..e8257ce15ee 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -24,14 +24,9 @@ import static org.junit.Assert.assertNull;\n import java.util.List;\n \n import org.junit.Test;\n-import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n-/**\n- * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n- */\n-@Deprecated\n public class TestDescriptorRegistry {\n \n     public static class TestDescriptor implements Descriptor {\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex e8257ce15ee..4dde13a517b 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -24,9 +24,14 @@ import static org.junit.Assert.assertNull;\n import java.util.List;\n \n import org.junit.Test;\n+import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n+/**\n+ * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+ */\n+@Deprecated\n public class TestDescriptorRegistry {\n \n     public static class TestDescriptor implements Descriptor {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex 4dde13a517b..e8257ce15ee 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -24,14 +24,9 @@ import static org.junit.Assert.assertNull;\n import java.util.List;\n \n import org.junit.Test;\n-import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n-/**\n- * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n- */\n-@Deprecated\n public class TestDescriptorRegistry {\n \n     public static class TestDescriptor implements Descriptor {\n", "next_change": {"commit": "68660d55bbe75dfc6738d40a36ec78282da6ce51", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex e8257ce15ee..4dde13a517b 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -24,9 +24,14 @@ import static org.junit.Assert.assertNull;\n import java.util.List;\n \n import org.junit.Test;\n+import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n+/**\n+ * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+ */\n+@Deprecated\n public class TestDescriptorRegistry {\n \n     public static class TestDescriptor implements Descriptor {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\nindex 8fbf3a6ccc4..4dde13a517b 100644\n--- a/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java\n", "chunk": "@@ -30,7 +30,7 @@ import org.nuxeo.runtime.model.DescriptorRegistry;\n \n /**\n  * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n- **/\n+ */\n @Deprecated\n public class TestDescriptorRegistry {\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzY5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541367699", "body": "Is the cast needed?", "bodyText": "Is the cast needed?", "bodyHTML": "<p dir=\"auto\">Is the cast needed?</p>", "author": "efge", "createdAt": "2020-12-11T22:31:39Z", "path": "modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java", "diffHunk": "@@ -67,7 +66,7 @@ public int getApplicationStartedOrder() {\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n+        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);", "originalCommit": "c7408cfdffce48e757a5f04ddb28f08d50a7c100", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NzE4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542357185", "bodyText": "Yes: \"Type mismatch: cannot convert from Object to ClusterNodeDescriptor\"", "author": "atchertchian", "createdAt": "2020-12-14T12:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\nindex 49916c78b3b..249e7175730 100644\n--- a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n", "chunk": "@@ -66,7 +72,7 @@ public class ClusterServiceImpl extends DefaultComponent implements ClusterServi\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);\n+        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n \n         // enabled\n         Boolean enabledProp = descr == null ? null : descr.getEnabled();\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\nindex 249e7175730..16d2e92cdbf 100644\n--- a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n", "chunk": "@@ -72,7 +71,7 @@ public class ClusterServiceImpl extends DefaultComponent implements ClusterServi\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n+        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);\n \n         // enabled\n         Boolean enabledProp = descr == null ? null : descr.getEnabled();\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\nindex 16d2e92cdbf..249e7175730 100644\n--- a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n", "chunk": "@@ -71,7 +72,7 @@ public class ClusterServiceImpl extends DefaultComponent implements ClusterServi\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);\n+        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n \n         // enabled\n         Boolean enabledProp = descr == null ? null : descr.getEnabled();\n", "next_change": {"commit": "1d3344698fd23c1f1bd570d97195c59b77dd75ba", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\nindex 249e7175730..16d2e92cdbf 100644\n--- a/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java\n", "chunk": "@@ -72,7 +71,7 @@ public class ClusterServiceImpl extends DefaultComponent implements ClusterServi\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n+        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);\n \n         // enabled\n         Boolean enabledProp = descr == null ? null : descr.getEnabled();\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2OTI0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541369244", "body": "Cast needed?", "bodyText": "Cast needed?", "bodyHTML": "<p dir=\"auto\">Cast needed?</p>", "author": "efge", "createdAt": "2020-12-11T22:33:46Z", "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -194,7 +193,11 @@ protected static KeyValueStore getKeyValueStore() {\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getDescriptors(XP_CONFIG);\n+        return getRegistryContributions(XP_CONFIG);\n+    }\n+\n+    protected MigrationDescriptor getMigrationDescriptor(String id) {\n+        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);", "originalCommit": "0204118e1b9eaf8bc8d4af5a31a0cd4f5c3cdc24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NzQ1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542357450", "bodyText": "Same: orElse brings ambiguity hence the cast", "author": "atchertchian", "createdAt": "2020-12-14T12:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2OTI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 1efb22746ee..5ac0a361b5d 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n", "chunk": "@@ -193,11 +194,7 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getRegistryContributions(XP_CONFIG);\n-    }\n-\n-    protected MigrationDescriptor getMigrationDescriptor(String id) {\n-        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);\n+        return getDescriptors(XP_CONFIG);\n     }\n \n     @Override\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 5ac0a361b5d..1efb22746ee 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n", "chunk": "@@ -194,7 +193,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getDescriptors(XP_CONFIG);\n+        return getRegistryContributions(XP_CONFIG);\n+    }\n+\n+    protected MigrationDescriptor getMigrationDescriptor(String id) {\n+        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);\n     }\n \n     @Override\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 1efb22746ee..5ac0a361b5d 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n", "chunk": "@@ -193,11 +194,7 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getRegistryContributions(XP_CONFIG);\n-    }\n-\n-    protected MigrationDescriptor getMigrationDescriptor(String id) {\n-        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);\n+        return getDescriptors(XP_CONFIG);\n     }\n \n     @Override\n", "next_change": {"commit": "123fd0893355d6279546b187399da6829fa927d6", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\nindex 5ac0a361b5d..1efb22746ee 100644\n--- a/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java\n", "chunk": "@@ -194,7 +193,11 @@ public class MigrationServiceImpl extends DefaultComponent implements MigrationS\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getDescriptors(XP_CONFIG);\n+        return getRegistryContributions(XP_CONFIG);\n+    }\n+\n+    protected MigrationDescriptor getMigrationDescriptor(String id) {\n+        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MTk4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541371982", "body": "Do you want to keep this comment?", "bodyText": "Do you want to keep this comment?", "bodyHTML": "<p dir=\"auto\">Do you want to keep this comment?</p>", "author": "efge", "createdAt": "2020-12-11T22:36:51Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java", "diffHunk": "@@ -120,6 +120,7 @@ public void testCompatWarn() throws Exception {\n         assertEquals(0, Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).size());\n \n         List<String> caughtEvents = logCaptureResult.getCaughtEventMessages();\n+        // FIXME", "originalCommit": "5de211459d8d4bd652d52ab911f93c171e155adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1Nzc1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542357755", "bodyText": "no :)", "author": "atchertchian", "createdAt": "2020-12-14T12:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MTk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\nindex 4ad640c7f90..8df64563372 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\n", "chunk": "@@ -120,7 +120,6 @@ public class TestConfigurationService {\n         assertEquals(0, Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).size());\n \n         List<String> caughtEvents = logCaptureResult.getCaughtEventMessages();\n-        // FIXME\n         assertEquals(1, caughtEvents.size());\n         String message = \"Since version 7.4: Property 'nuxeo.test.dummyStringProperty' should now be contributed to \"\n                 + \"extension point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\nindex 4ad640c7f90..8df64563372 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java\n", "chunk": "@@ -120,7 +120,6 @@ public class TestConfigurationService {\n         assertEquals(0, Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).size());\n \n         List<String> caughtEvents = logCaptureResult.getCaughtEventMessages();\n-        // FIXME\n         assertEquals(1, caughtEvents.size());\n         String message = \"Since version 7.4: Property 'nuxeo.test.dummyStringProperty' should now be contributed to \"\n                 + \"extension point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MzI2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541373262", "body": "This seems weird. Isn't this simpler?\r\n\r\n    desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);", "bodyText": "This seems weird. Isn't this simpler?\ndesc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);", "bodyHTML": "<p dir=\"auto\">This seems weird. Isn't this simpler?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"desc.map(value -&gt; value.getValue()).filter(StringUtils::isNotBlank);\"><pre><code>desc.map(value -&gt; value.getValue()).filter(StringUtils::isNotBlank);\n</code></pre></div>", "author": "efge", "createdAt": "2020-12-11T22:38:23Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java", "diffHunk": "@@ -191,9 +148,8 @@ protected static boolean startsWithNamespace(String string, String namespace) {\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        return Optional.ofNullable(getDescriptors().get(key))\n-                       .map(ConfigurationPropertyDescriptor::getValue)\n-                       .filter(StringUtils::isNotBlank);\n+        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n+        return Optional.ofNullable(desc.map((value) -> value.getValue()).filter(StringUtils::isNotBlank).orElse(null));", "originalCommit": "5de211459d8d4bd652d52ab911f93c171e155adf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex 1375503934e..fd6eb9fedca 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -149,7 +133,7 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n     @Override\n     public Optional<String> getString(String key) {\n         Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n-        return Optional.ofNullable(desc.map((value) -> value.getValue()).filter(StringUtils::isNotBlank).orElse(null));\n+        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex fd6eb9fedca..f989236badf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -132,8 +191,9 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n-        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n+        return Optional.ofNullable(getDescriptors().get(key))\n+                       .map(ConfigurationPropertyDescriptor::getValue)\n+                       .filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex f989236badf..fd6eb9fedca 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -191,9 +132,8 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        return Optional.ofNullable(getDescriptors().get(key))\n-                       .map(ConfigurationPropertyDescriptor::getValue)\n-                       .filter(StringUtils::isNotBlank);\n+        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n+        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex fd6eb9fedca..f989236badf 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -132,8 +191,9 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n-        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n+        return Optional.ofNullable(getDescriptors().get(key))\n+                       .map(ConfigurationPropertyDescriptor::getValue)\n+                       .filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": {"commit": "8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex f989236badf..fd6eb9fedca 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -191,9 +132,8 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        return Optional.ofNullable(getDescriptors().get(key))\n-                       .map(ConfigurationPropertyDescriptor::getValue)\n-                       .filter(StringUtils::isNotBlank);\n+        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n+        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\nindex 1375503934e..fd6eb9fedca 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java\n", "chunk": "@@ -149,7 +133,7 @@ public class ConfigurationServiceImpl extends DefaultComponent implements Config\n     @Override\n     public Optional<String> getString(String key) {\n         Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n-        return Optional.ofNullable(desc.map((value) -> value.getValue()).filter(StringUtils::isNotBlank).orElse(null));\n+        return desc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NzM1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541377350", "body": "`@since 11.5`", "bodyText": "@since 11.5", "bodyHTML": "<p dir=\"auto\"><code>@since 11.5</code></p>", "author": "efge", "createdAt": "2020-12-11T22:43:07Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.services.config;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logics.\n+ *\n+ * @since TODO", "originalCommit": "5de211459d8d4bd652d52ab911f93c171e155adf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\nindex 2c0190a0d8f..cebaeb38b4b 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n", "chunk": "@@ -22,12 +22,14 @@ import org.nuxeo.common.xmap.Context;\n import org.nuxeo.common.xmap.XAnnotatedMember;\n import org.nuxeo.common.xmap.XAnnotatedObject;\n import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.logging.DeprecationLogger;\n import org.w3c.dom.Element;\n \n /**\n- * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logics.\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n  *\n- * @since TODO\n+ * @since 11.5\n  */\n public class ConfigurationServiceRegistry extends MapRegistry {\n \n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\ndeleted file mode 100644\nindex cebaeb38b4b..00000000000\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,59 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.services.config;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedMember;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.logging.DeprecationLogger;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n- *\n- * @since 11.5\n- */\n-public class ConfigurationServiceRegistry extends MapRegistry {\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        XAnnotatedMember remove = xObject.getRemove();\n-        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n-            contributions.remove(id);\n-            return;\n-        }\n-        ConfigurationPropertyDescriptor contrib = (ConfigurationPropertyDescriptor) xObject.newInstance(ctx, element);\n-        if (Framework.getProperties().containsKey(id)) {\n-            String message = \"Property '\" + id + \"' should now be contributed to extension \"\n-                    + \"point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n-            DeprecationLogger.log(message, \"7.4\");\n-        }\n-        ConfigurationPropertyDescriptor existing = (ConfigurationPropertyDescriptor) contributions.get(id);\n-        if (existing != null) {\n-            ConfigurationPropertyDescriptor merged = existing.merge(contrib);\n-            contributions.put(id, merged);\n-        } else {\n-            contributions.put(id, contrib);\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\nnew file mode 100644\nindex 00000000000..cebaeb38b4b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n", "chunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.services.config;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.logging.DeprecationLogger;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n+ *\n+ * @since 11.5\n+ */\n+public class ConfigurationServiceRegistry extends MapRegistry {\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        ConfigurationPropertyDescriptor contrib = (ConfigurationPropertyDescriptor) xObject.newInstance(ctx, element);\n+        if (Framework.getProperties().containsKey(id)) {\n+            String message = \"Property '\" + id + \"' should now be contributed to extension \"\n+                    + \"point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n+            DeprecationLogger.log(message, \"7.4\");\n+        }\n+        ConfigurationPropertyDescriptor existing = (ConfigurationPropertyDescriptor) contributions.get(id);\n+        if (existing != null) {\n+            ConfigurationPropertyDescriptor merged = existing.merge(contrib);\n+            contributions.put(id, merged);\n+        } else {\n+            contributions.put(id, contrib);\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\ndeleted file mode 100644\nindex cebaeb38b4b..00000000000\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,59 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime.services.config;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedMember;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.runtime.api.Framework;\n-import org.nuxeo.runtime.logging.DeprecationLogger;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n- *\n- * @since 11.5\n- */\n-public class ConfigurationServiceRegistry extends MapRegistry {\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        XAnnotatedMember remove = xObject.getRemove();\n-        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n-            contributions.remove(id);\n-            return;\n-        }\n-        ConfigurationPropertyDescriptor contrib = (ConfigurationPropertyDescriptor) xObject.newInstance(ctx, element);\n-        if (Framework.getProperties().containsKey(id)) {\n-            String message = \"Property '\" + id + \"' should now be contributed to extension \"\n-                    + \"point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n-            DeprecationLogger.log(message, \"7.4\");\n-        }\n-        ConfigurationPropertyDescriptor existing = (ConfigurationPropertyDescriptor) contributions.get(id);\n-        if (existing != null) {\n-            ConfigurationPropertyDescriptor merged = existing.merge(contrib);\n-            contributions.put(id, merged);\n-        } else {\n-            contributions.put(id, contrib);\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\nnew file mode 100644\nindex 00000000000..cebaeb38b4b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n", "chunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.services.config;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.logging.DeprecationLogger;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n+ *\n+ * @since 11.5\n+ */\n+public class ConfigurationServiceRegistry extends MapRegistry {\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        ConfigurationPropertyDescriptor contrib = (ConfigurationPropertyDescriptor) xObject.newInstance(ctx, element);\n+        if (Framework.getProperties().containsKey(id)) {\n+            String message = \"Property '\" + id + \"' should now be contributed to extension \"\n+                    + \"point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n+            DeprecationLogger.log(message, \"7.4\");\n+        }\n+        ConfigurationPropertyDescriptor existing = (ConfigurationPropertyDescriptor) contributions.get(id);\n+        if (existing != null) {\n+            ConfigurationPropertyDescriptor merged = existing.merge(contrib);\n+            contributions.put(id, merged);\n+        } else {\n+            contributions.put(id, contrib);\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\nindex 2c0190a0d8f..cebaeb38b4b 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java\n", "chunk": "@@ -22,12 +22,14 @@ import org.nuxeo.common.xmap.Context;\n import org.nuxeo.common.xmap.XAnnotatedMember;\n import org.nuxeo.common.xmap.XAnnotatedObject;\n import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.logging.DeprecationLogger;\n import org.w3c.dom.Element;\n \n /**\n- * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logics.\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n  *\n- * @since TODO\n+ * @since 11.5\n  */\n public class ConfigurationServiceRegistry extends MapRegistry {\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3OTYxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541379619", "body": "To follow other usage I would have named these `SINGLE_XP` etc.", "bodyText": "To follow other usage I would have named these SINGLE_XP etc.", "bodyHTML": "<p dir=\"auto\">To follow other usage I would have named these <code>SINGLE_XP</code> etc.</p>", "author": "efge", "createdAt": "2020-12-11T22:45:41Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_POINT = \"single\";", "originalCommit": "5de211459d8d4bd652d52ab911f93c171e155adf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f6e67739894b056390d0495d221e022f3997fd0", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nindex 7c217cd2383..1c6982d7ed6 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -32,39 +32,39 @@ import org.nuxeo.runtime.model.DefaultComponent;\n  */\n public class SampleComponent extends DefaultComponent {\n \n-    public static final String SINGLE_POINT = \"single\";\n+    public static final String SINGLE_XP = \"single\";\n \n-    public static final String MAP_POINT = \"map\";\n+    public static final String MAP_XP = \"map\";\n \n-    public static final String CUSTOM_POINT = \"custom\";\n+    public static final String CUSTOM_XP = \"custom\";\n \n-    public static final String LEGACY_POINT = \"legacy\";\n+    public static final String LEGACY_XP = \"legacy\";\n \n-    protected boolean registryContributionRegistered = false;\n+    protected boolean registryContributionRegistered;\n \n-    protected boolean registryContributionUnregistered = false;\n+    protected boolean registryContributionUnregistered;\n \n     protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n \n     public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_POINT);\n+        return getExtensionPointRegistry(SINGLE_XP);\n     }\n \n     public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_POINT);\n+        return getExtensionPointRegistry(MAP_XP);\n     }\n \n     public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_POINT);\n+        return getExtensionPointRegistry(CUSTOM_XP);\n     }\n \n     public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_POINT);\n+        return getExtensionPointRegistry(LEGACY_XP);\n     }\n \n     @Override\n     public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_POINT.equals(xp)) {\n+        if (LEGACY_XP.equals(xp)) {\n             SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n             legacyRegistry.put(desc.name, desc);\n         } else {\n", "next_change": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\ndeleted file mode 100644\nindex 1c6982d7ed6..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ /dev/null\n", "chunk": "@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime.registry;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.common.xmap.registry.SingleRegistry;\n-import org.nuxeo.runtime.model.ComponentInstance;\n-import org.nuxeo.runtime.model.DefaultComponent;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleComponent extends DefaultComponent {\n-\n-    public static final String SINGLE_XP = \"single\";\n-\n-    public static final String MAP_XP = \"map\";\n-\n-    public static final String CUSTOM_XP = \"custom\";\n-\n-    public static final String LEGACY_XP = \"legacy\";\n-\n-    protected boolean registryContributionRegistered;\n-\n-    protected boolean registryContributionUnregistered;\n-\n-    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n-\n-    public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_XP);\n-    }\n-\n-    public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_XP);\n-    }\n-\n-    public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_XP);\n-    }\n-\n-    public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_XP);\n-    }\n-\n-    @Override\n-    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.put(desc.name, desc);\n-        } else {\n-            registryContributionRegistered = true;\n-        }\n-    }\n-\n-    // not called in tests anyway\n-    @Override\n-    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.remove(desc.name);\n-        } else {\n-            registryContributionUnregistered = true;\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nnew file mode 100644\nindex 00000000000..1c6982d7ed6\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_XP = \"single\";\n+\n+    public static final String MAP_XP = \"map\";\n+\n+    public static final String CUSTOM_XP = \"custom\";\n+\n+    public static final String LEGACY_XP = \"legacy\";\n+\n+    protected boolean registryContributionRegistered;\n+\n+    protected boolean registryContributionUnregistered;\n+\n+    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n+\n+    public SingleRegistry getSingleRegistry() {\n+        return getExtensionPointRegistry(SINGLE_XP);\n+    }\n+\n+    public MapRegistry getMapRegistry() {\n+        return getExtensionPointRegistry(MAP_XP);\n+    }\n+\n+    public SampleRegistry getCustomRegistry() {\n+        return getExtensionPointRegistry(CUSTOM_XP);\n+    }\n+\n+    public MapRegistry getLegacyRegistry() {\n+        return getExtensionPointRegistry(LEGACY_XP);\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.put(desc.name, desc);\n+        } else {\n+            registryContributionRegistered = true;\n+        }\n+    }\n+\n+    // not called in tests anyway\n+    @Override\n+    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.remove(desc.name);\n+        } else {\n+            registryContributionUnregistered = true;\n+        }\n+    }\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\ndeleted file mode 100644\nindex 1c6982d7ed6..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ /dev/null\n", "chunk": "@@ -1,86 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-\n-package org.nuxeo.runtime.registry;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.nuxeo.common.xmap.registry.MapRegistry;\n-import org.nuxeo.common.xmap.registry.SingleRegistry;\n-import org.nuxeo.runtime.model.ComponentInstance;\n-import org.nuxeo.runtime.model.DefaultComponent;\n-\n-/**\n- * @since 11.5\n- */\n-public class SampleComponent extends DefaultComponent {\n-\n-    public static final String SINGLE_XP = \"single\";\n-\n-    public static final String MAP_XP = \"map\";\n-\n-    public static final String CUSTOM_XP = \"custom\";\n-\n-    public static final String LEGACY_XP = \"legacy\";\n-\n-    protected boolean registryContributionRegistered;\n-\n-    protected boolean registryContributionUnregistered;\n-\n-    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n-\n-    public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_XP);\n-    }\n-\n-    public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_XP);\n-    }\n-\n-    public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_XP);\n-    }\n-\n-    public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_XP);\n-    }\n-\n-    @Override\n-    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.put(desc.name, desc);\n-        } else {\n-            registryContributionRegistered = true;\n-        }\n-    }\n-\n-    // not called in tests anyway\n-    @Override\n-    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_XP.equals(xp)) {\n-            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n-            legacyRegistry.remove(desc.name);\n-        } else {\n-            registryContributionUnregistered = true;\n-        }\n-    }\n-\n-}\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nnew file mode 100644\nindex 00000000000..1c6982d7ed6\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_XP = \"single\";\n+\n+    public static final String MAP_XP = \"map\";\n+\n+    public static final String CUSTOM_XP = \"custom\";\n+\n+    public static final String LEGACY_XP = \"legacy\";\n+\n+    protected boolean registryContributionRegistered;\n+\n+    protected boolean registryContributionUnregistered;\n+\n+    protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n+\n+    public SingleRegistry getSingleRegistry() {\n+        return getExtensionPointRegistry(SINGLE_XP);\n+    }\n+\n+    public MapRegistry getMapRegistry() {\n+        return getExtensionPointRegistry(MAP_XP);\n+    }\n+\n+    public SampleRegistry getCustomRegistry() {\n+        return getExtensionPointRegistry(CUSTOM_XP);\n+    }\n+\n+    public MapRegistry getLegacyRegistry() {\n+        return getExtensionPointRegistry(LEGACY_XP);\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.put(desc.name, desc);\n+        } else {\n+            registryContributionRegistered = true;\n+        }\n+    }\n+\n+    // not called in tests anyway\n+    @Override\n+    public void unregisterContribution(Object contribution, String xp, ComponentInstance component) {\n+        if (LEGACY_XP.equals(xp)) {\n+            SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n+            legacyRegistry.remove(desc.name);\n+        } else {\n+            registryContributionUnregistered = true;\n+        }\n+    }\n+\n+}\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\nindex 7c217cd2383..1c6982d7ed6 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java\n", "chunk": "@@ -32,39 +32,39 @@ import org.nuxeo.runtime.model.DefaultComponent;\n  */\n public class SampleComponent extends DefaultComponent {\n \n-    public static final String SINGLE_POINT = \"single\";\n+    public static final String SINGLE_XP = \"single\";\n \n-    public static final String MAP_POINT = \"map\";\n+    public static final String MAP_XP = \"map\";\n \n-    public static final String CUSTOM_POINT = \"custom\";\n+    public static final String CUSTOM_XP = \"custom\";\n \n-    public static final String LEGACY_POINT = \"legacy\";\n+    public static final String LEGACY_XP = \"legacy\";\n \n-    protected boolean registryContributionRegistered = false;\n+    protected boolean registryContributionRegistered;\n \n-    protected boolean registryContributionUnregistered = false;\n+    protected boolean registryContributionUnregistered;\n \n     protected Map<String, SampleLegacyDescriptor> legacyRegistry = new HashMap<>();\n \n     public SingleRegistry getSingleRegistry() {\n-        return getExtensionPointRegistry(SINGLE_POINT);\n+        return getExtensionPointRegistry(SINGLE_XP);\n     }\n \n     public MapRegistry getMapRegistry() {\n-        return getExtensionPointRegistry(MAP_POINT);\n+        return getExtensionPointRegistry(MAP_XP);\n     }\n \n     public SampleRegistry getCustomRegistry() {\n-        return getExtensionPointRegistry(CUSTOM_POINT);\n+        return getExtensionPointRegistry(CUSTOM_XP);\n     }\n \n     public MapRegistry getLegacyRegistry() {\n-        return getExtensionPointRegistry(LEGACY_POINT);\n+        return getExtensionPointRegistry(LEGACY_XP);\n     }\n \n     @Override\n     public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n-        if (LEGACY_POINT.equals(xp)) {\n+        if (LEGACY_XP.equals(xp)) {\n             SampleLegacyDescriptor desc = (SampleLegacyDescriptor) contribution;\n             legacyRegistry.put(desc.name, desc);\n         } else {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"oid": "4f6e67739894b056390d0495d221e022f3997fd0", "url": "https://github.com/nuxeo/nuxeo/commit/4f6e67739894b056390d0495d221e022f3997fd0", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-14T12:56:00Z", "type": "forcePushed"}, {"oid": "c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "url": "https://github.com/nuxeo/nuxeo/commit/c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-14T13:39:46Z", "type": "forcePushed"}, {"oid": "b94569e2b5d3b483e17a890e134a26618fdcaa7f", "url": "https://github.com/nuxeo/nuxeo/commit/b94569e2b5d3b483e17a890e134a26618fdcaa7f", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-14T14:30:04Z", "type": "forcePushed"}, {"oid": "f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "url": "https://github.com/nuxeo/nuxeo/commit/f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry", "committedDate": "2020-12-15T08:09:56Z", "type": "forcePushed"}, {"oid": "796e1be065bb5177fd4e711e23ffdeb244b983c7", "url": "https://github.com/nuxeo/nuxeo/commit/796e1be065bb5177fd4e711e23ffdeb244b983c7", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry", "committedDate": "2020-12-15T09:30:52Z", "type": "forcePushed"}, {"oid": "aca71a3c17de636376617cd00f0407b1cbed5a41", "url": "https://github.com/nuxeo/nuxeo/commit/aca71a3c17de636376617cd00f0407b1cbed5a41", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry", "committedDate": "2020-12-15T09:31:06Z", "type": "forcePushed"}, {"oid": "c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "url": "https://github.com/nuxeo/nuxeo/commit/c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry", "committedDate": "2020-12-15T13:17:27Z", "type": "forcePushed"}, {"oid": "8f532bd6646f41966bae0285af888a10cea80160", "url": "https://github.com/nuxeo/nuxeo/commit/8f532bd6646f41966bae0285af888a10cea80160", "message": "NXP-29580: cleanup/format", "committedDate": "2020-12-15T16:22:12Z", "type": "forcePushed"}, {"oid": "f733cf5f987a183a732a9f73f41986ab75de9059", "url": "https://github.com/nuxeo/nuxeo/commit/f733cf5f987a183a732a9f73f41986ab75de9059", "message": "NXP-29580: migrate core-io descriptors to use runtime annotation registry", "committedDate": "2020-12-15T17:17:51Z", "type": "forcePushed"}, {"oid": "c902a619464c40b9ebaf46e176844d85bee8aa30", "url": "https://github.com/nuxeo/nuxeo/commit/c902a619464c40b9ebaf46e176844d85bee8aa30", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry", "committedDate": "2020-12-16T09:15:46Z", "type": "forcePushed"}, {"oid": "a3bb25104c04e9293e42861ad54eda732adb0bd2", "url": "https://github.com/nuxeo/nuxeo/commit/a3bb25104c04e9293e42861ad54eda732adb0bd2", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry", "committedDate": "2020-12-16T10:36:29Z", "type": "forcePushed"}, {"oid": "a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "url": "https://github.com/nuxeo/nuxeo/commit/a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry", "committedDate": "2020-12-17T08:32:34Z", "type": "forcePushed"}, {"oid": "e2d8c0404ce13081856d8a561db6380672fecada", "url": "https://github.com/nuxeo/nuxeo/commit/e2d8c0404ce13081856d8a561db6380672fecada", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry", "committedDate": "2020-12-17T14:18:28Z", "type": "forcePushed"}, {"oid": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "url": "https://github.com/nuxeo/nuxeo/commit/354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "message": "NXP-29580: cleanup tests ouput", "committedDate": "2020-12-21T16:47:33Z", "type": "commit"}, {"oid": "8647e7c0a71f94b90e3e4ee2829fc90628d4f2e4", "url": "https://github.com/nuxeo/nuxeo/commit/8647e7c0a71f94b90e3e4ee2829fc90628d4f2e4", "message": "NXP-29580: fix context sharing in xmap unused method", "committedDate": "2020-12-21T16:47:33Z", "type": "commit"}, {"oid": "24b81f4f2b875054d22132d29a30678314089fc4", "url": "https://github.com/nuxeo/nuxeo/commit/24b81f4f2b875054d22132d29a30678314089fc4", "message": "NXP-29580: add fallback path and default value on xmap node annotations", "committedDate": "2020-12-21T16:47:34Z", "type": "commit"}, {"oid": "91a07c6729d414c1cc81d85545e988189ea3ba4b", "url": "https://github.com/nuxeo/nuxeo/commit/91a07c6729d414c1cc81d85545e988189ea3ba4b", "message": "NXP-29580: rename runtime test for clarity", "committedDate": "2020-12-21T16:47:34Z", "type": "commit"}, {"oid": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "url": "https://github.com/nuxeo/nuxeo/commit/a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance", "committedDate": "2020-12-21T16:47:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NzQzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546797431", "body": "Here you don't need to synchronize, it's the responsibility of the `setInitialized` method to set the value correctly.", "bodyText": "Here you don't need to synchronize, it's the responsibility of the setInitialized method to set the value correctly.", "bodyHTML": "<p dir=\"auto\">Here you don't need to synchronize, it's the responsibility of the <code>setInitialized</code> method to set the value correctly.</p>", "author": "efge", "createdAt": "2020-12-21T16:18:01Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -66,7 +70,9 @@ protected void checkInitialized() {\n     @Override\n     public void initialize() {\n         registrations.forEach(this::register);\n-        setInitialized(true);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }", "originalCommit": "d5b5766451c5f595c3e505b037bf672cb070536b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 0520c50f62b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,111 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected volatile boolean initialized;\n-\n-    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n-\n-    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        synchronized (this) {\n-            return initialized;\n-        }\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        synchronized (this) {\n-            this.initialized = initialized;\n-        }\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -61,18 +62,20 @@ public abstract class AbstractRegistry implements Registry {\n     }\n \n     protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n+        if (!initialized) {\n+            synchronized (this) {\n+                if (!initialized) {\n+                    initialize();\n+                    initialized = true;\n+                }\n+            }\n         }\n-        initialize();\n     }\n \n     @Override\n     public void initialize() {\n         registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n+        setInitialized(true);\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5OTA4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546799080", "body": "This method must now be:\r\n\r\n        if (!initialized) {\r\n            synchronized(this) {\r\n                if (!initialized) {\r\n                    initialize();\r\n                    initialized = true;\r\n                }\r\n            }\r\n        }\r\n\r\nBut actually I don't get the use case for this method. Isn't the runtime already guaranteeing that `initialize()` will have been called for all registries?", "bodyText": "This method must now be:\n    if (!initialized) {\n        synchronized(this) {\n            if (!initialized) {\n                initialize();\n                initialized = true;\n            }\n        }\n    }\n\nBut actually I don't get the use case for this method. Isn't the runtime already guaranteeing that initialize() will have been called for all registries?", "bodyHTML": "<p dir=\"auto\">This method must now be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    if (!initialized) {\n        synchronized(this) {\n            if (!initialized) {\n                initialize();\n                initialized = true;\n            }\n        }\n    }\"><pre><code>    if (!initialized) {\n        synchronized(this) {\n            if (!initialized) {\n                initialize();\n                initialized = true;\n            }\n        }\n    }\n</code></pre></div>\n<p dir=\"auto\">But actually I don't get the use case for this method. Isn't the runtime already guaranteeing that <code>initialize()</code> will have been called for all registries?</p>", "author": "efge", "createdAt": "2020-12-21T16:21:06Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -49,11 +49,15 @@ public boolean isNull() {\n     }\n \n     protected boolean isInitialized() {\n-        return initialized;\n+        synchronized (this) {\n+            return initialized;\n+        }\n     }\n \n     protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n     }\n \n     protected void checkInitialized() {", "originalCommit": "d5b5766451c5f595c3e505b037bf672cb070536b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzMTc1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547131756", "bodyText": "Yes but i see no reason of preventing contributions retrieval (so registry initialization) before the framework triggers it when starting.", "author": "atchertchian", "createdAt": "2020-12-22T08:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5OTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzMzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547213337", "bodyText": "Lazy init (on-demand) is always more complex, as we see. But that should be ok with the changes you have.", "author": "efge", "createdAt": "2020-12-22T11:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5OTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 0520c50f62b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,111 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected volatile boolean initialized;\n-\n-    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n-\n-    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        synchronized (this) {\n-            return initialized;\n-        }\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        synchronized (this) {\n-            this.initialized = initialized;\n-        }\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -61,18 +62,20 @@ public abstract class AbstractRegistry implements Registry {\n     }\n \n     protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n+        if (!initialized) {\n+            synchronized (this) {\n+                if (!initialized) {\n+                    initialize();\n+                    initialized = true;\n+                }\n+            }\n         }\n-        initialize();\n     }\n \n     @Override\n     public void initialize() {\n         registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n+        setInitialized(true);\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwMDQwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546800407", "body": "Add a comment `// volatile for double-checked locking`", "bodyText": "Add a comment // volatile for double-checked locking", "bodyHTML": "<p dir=\"auto\">Add a comment <code>// volatile for double-checked locking</code></p>", "author": "efge", "createdAt": "2020-12-21T16:23:37Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -34,11 +34,11 @@\n  */\n public abstract class AbstractRegistry implements Registry {\n \n-    protected boolean initialized;\n+    protected volatile boolean initialized;", "originalCommit": "d5b5766451c5f595c3e505b037bf672cb070536b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\ndeleted file mode 100644\nindex 0520c50f62b..00000000000\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,111 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.common.xmap.registry;\n-\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Abstract class for {@link Registry} common logic.\n- *\n- * @since 11.5\n- */\n-public abstract class AbstractRegistry implements Registry {\n-\n-    protected volatile boolean initialized;\n-\n-    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n-\n-    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n-\n-    public AbstractRegistry() {\n-    }\n-\n-    @Override\n-    public boolean isNull() {\n-        return false;\n-    }\n-\n-    protected boolean isInitialized() {\n-        synchronized (this) {\n-            return initialized;\n-        }\n-    }\n-\n-    protected void setInitialized(boolean initialized) {\n-        synchronized (this) {\n-            this.initialized = initialized;\n-        }\n-    }\n-\n-    protected void checkInitialized() {\n-        if (isInitialized()) {\n-            return;\n-        }\n-        initialize();\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n-        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n-        setInitialized(false);\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n-            return;\n-        }\n-        tags.remove(tag);\n-        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n-        setInitialized(false);\n-    }\n-\n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n-    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n-\n-}\n", "next_change": {"commit": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nnew file mode 100644\nindex 00000000000..0520c50f62b\n--- /dev/null\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logic.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected volatile boolean initialized;\n+\n+    protected Set<String> tags = ConcurrentHashMap.newKeySet();\n+\n+    protected List<RegistryContribution> registrations = new CopyOnWriteArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        synchronized (this) {\n+            return initialized;\n+        }\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        registrations.forEach(this::register);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }\n+    }\n+\n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n+        registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        if (tag == null || !isTagged(tag)) {\n+            return;\n+        }\n+        tags.remove(tag);\n+        registrations.removeIf(reg -> tag.equals(reg.getTag()));\n+        setInitialized(false);\n+    }\n+\n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n+    protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n+\n+}\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..483e14ae005 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -69,43 +61,25 @@ public abstract class AbstractRegistry implements Registry {\n \n     @Override\n     public void initialize() {\n-        registrations.forEach(this::register);\n-        synchronized (this) {\n-            setInitialized(true);\n-        }\n-    }\n-\n-    @Override\n-    public void tag(String id) {\n-        tags.add(id);\n-    }\n-\n-    @Override\n-    public boolean isTagged(String id) {\n-        return tags.contains(id);\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n     }\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null || !isTagged(tag)) {\n+        if (tag == null) {\n             return;\n         }\n-        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n \n-    protected void register(RegistryContribution rc) {\n-        register(rc.getContext(), rc.getObject(), rc.getElement());\n-    }\n-\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": {"commit": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 483e14ae005..02727d5972c 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -65,17 +69,29 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(true);\n     }\n \n+    @Override\n+    public void tag(String id) {\n+        tags.add(id);\n+    }\n+\n+    @Override\n+    public boolean isTagged(String id) {\n+        return tags.contains(id);\n+    }\n+\n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        tag(tag);\n         registrations.add(new RegistryContribution(ctx, xObject, element, tag));\n         setInitialized(false);\n     }\n \n     @Override\n     public void unregister(String tag) {\n-        if (tag == null) {\n+        if (tag == null || !isTagged(tag)) {\n             return;\n         }\n+        tags.remove(tag);\n         registrations.removeIf(reg -> tag.equals(reg.getTag()));\n         setInitialized(false);\n     }\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 02727d5972c..9f4abf82b48 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -96,6 +96,10 @@ public abstract class AbstractRegistry implements Registry {\n         setInitialized(false);\n     }\n \n+    protected void register(RegistryContribution rc) {\n+        register(rc.getContext(), rc.getObject(), rc.getElement());\n+    }\n+\n     protected abstract void register(Context ctx, XAnnotatedObject xObject, Element element);\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\nindex 0520c50f62b..99a04c8ce21 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java\n", "chunk": "@@ -34,6 +34,7 @@ import org.w3c.dom.Element;\n  */\n public abstract class AbstractRegistry implements Registry {\n \n+    // volatile for double-checked locking\n     protected volatile boolean initialized;\n \n     protected Set<String> tags = ConcurrentHashMap.newKeySet();\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyMDAyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546820028", "body": "As you've made `enabled` a `volatile` field and it's a direct cheap assignment, there's no need for synchronization.", "bodyText": "As you've made enabled a volatile field and it's a direct cheap assignment, there's no need for synchronization.", "bodyHTML": "<p dir=\"auto\">As you've made <code>enabled</code> a <code>volatile</code> field and it's a direct cheap assignment, there's no need for synchronization.</p>", "author": "efge", "createdAt": "2020-12-21T16:59:54Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java", "diffHunk": "@@ -69,7 +69,9 @@ public void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         if (enable != null) {\n             Object enabled = enable.getValue(ctx, element);\n             if (enabled != null) {\n-                this.enabled = Boolean.TRUE.equals(enabled);\n+                synchronized (this) {\n+                    this.enabled = Boolean.TRUE.equals(enabled);\n+                }", "originalCommit": "96b18f023dfcd8dfda7e7d0cd42e4f91383f3203", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex b00fc1490cd..d41c5a2aff4 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -69,9 +71,7 @@ public class SingleRegistry extends AbstractRegistry implements Registry {\n         if (enable != null) {\n             Object enabled = enable.getValue(ctx, element);\n             if (enabled != null) {\n-                synchronized (this) {\n-                    this.enabled = Boolean.TRUE.equals(enabled);\n-                }\n+                this.enabled = Boolean.TRUE.equals(enabled);\n             }\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex b00fc1490cd..d41c5a2aff4 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -69,9 +71,7 @@ public class SingleRegistry extends AbstractRegistry implements Registry {\n         if (enable != null) {\n             Object enabled = enable.getValue(ctx, element);\n             if (enabled != null) {\n-                synchronized (this) {\n-                    this.enabled = Boolean.TRUE.equals(enabled);\n-                }\n+                this.enabled = Boolean.TRUE.equals(enabled);\n             }\n         }\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyMDI0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546820241", "body": "`contribution` must be volatile too, as it's read by `getContribution()` which is potentially called from different threads.", "bodyText": "contribution must be volatile too, as it's read by getContribution() which is potentially called from different threads.", "bodyHTML": "<p dir=\"auto\"><code>contribution</code> must be volatile too, as it's read by <code>getContribution()</code> which is potentially called from different threads.</p>", "author": "efge", "createdAt": "2020-12-21T17:00:18Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     protected Object contribution;", "originalCommit": "96b18f023dfcd8dfda7e7d0cd42e4f91383f3203", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex b00fc1490cd..d41c5a2aff4 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -32,8 +32,10 @@ import org.w3c.dom.Element;\n  */\n public class SingleRegistry extends AbstractRegistry implements Registry {\n \n-    protected Object contribution;\n+    // volatile for double-checked locking\n+    protected volatile Object contribution;\n \n+    // volatile for double-checked locking\n     protected volatile boolean enabled = true;\n \n     public SingleRegistry() {\n", "next_change": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex d41c5a2aff4..17294c21e1e 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -32,11 +32,9 @@ import org.w3c.dom.Element;\n  */\n public class SingleRegistry extends AbstractRegistry implements Registry {\n \n-    // volatile for double-checked locking\n-    protected volatile Object contribution;\n+    protected Object contribution;\n \n-    // volatile for double-checked locking\n-    protected volatile boolean enabled = true;\n+    protected boolean enabled = true;\n \n     public SingleRegistry() {\n         super();\n", "next_change": {"commit": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex 17294c21e1e..d41c5a2aff4 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -32,9 +32,11 @@ import org.w3c.dom.Element;\n  */\n public class SingleRegistry extends AbstractRegistry implements Registry {\n \n-    protected Object contribution;\n+    // volatile for double-checked locking\n+    protected volatile Object contribution;\n \n-    protected boolean enabled = true;\n+    // volatile for double-checked locking\n+    protected volatile boolean enabled = true;\n \n     public SingleRegistry() {\n         super();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\nindex b00fc1490cd..d41c5a2aff4 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java\n", "chunk": "@@ -32,8 +32,10 @@ import org.w3c.dom.Element;\n  */\n public class SingleRegistry extends AbstractRegistry implements Registry {\n \n-    protected Object contribution;\n+    // volatile for double-checked locking\n+    protected volatile Object contribution;\n \n+    // volatile for double-checked locking\n     protected volatile boolean enabled = true;\n \n     public SingleRegistry() {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"oid": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "url": "https://github.com/nuxeo/nuxeo/commit/6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance", "committedDate": "2020-12-22T08:15:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDI2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547214269", "body": "Ah good point, the concurrent maps disallow null keys...", "bodyText": "Ah good point, the concurrent maps disallow null keys...", "bodyHTML": "<p dir=\"auto\">Ah good point, the concurrent maps disallow null keys...</p>", "author": "efge", "createdAt": "2020-12-22T11:05:04Z", "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -81,6 +82,10 @@ public void initialize() {\n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        if (id == null) {\n+            // prevent NPE on map key\n+            id = \"null\";", "originalCommit": "6ff5f64bb010e2175cf017cd274f0785d4fdf8fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNjEwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547216103", "bodyText": "This was visible in tests (core bulk config declares a logConfig without id, maybe this should be changed)", "author": "atchertchian", "createdAt": "2020-12-22T11:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex 0535c3df88f..a2081ae8d2b 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -82,10 +81,6 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         String id = (String) xObject.getRegistryId().getValue(ctx, element);\n-        if (id == null) {\n-            // prevent NPE on map key\n-            id = \"null\";\n-        }\n         XAnnotatedMember remove = xObject.getRemove();\n         if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n             contributions.remove(id);\n", "next_change": {"commit": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\nindex a2081ae8d2b..0535c3df88f 100644\n--- a/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n+++ b/modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java\n", "chunk": "@@ -81,6 +82,10 @@ public class MapRegistry extends AbstractRegistry implements Registry {\n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        if (id == null) {\n+            // prevent NPE on map key\n+            id = \"null\";\n+        }\n         XAnnotatedMember remove = xObject.getRemove();\n         if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n             contributions.remove(id);\n", "next_change": null}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"oid": "9d925c5df766abe063631a2bd662c2bc5abdeb23", "url": "https://github.com/nuxeo/nuxeo/commit/9d925c5df766abe063631a2bd662c2bc5abdeb23", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance", "committedDate": "2020-12-22T13:56:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4ODgyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547288820", "body": "Could be:\r\n```java\r\n        if (stored.isPresent()) {\r\n```", "bodyText": "Could be:\n        if (stored.isPresent()) {", "bodyHTML": "<p dir=\"auto\">Could be:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (stored.isPresent()) {\"><pre>        <span class=\"pl-k\">if</span> (stored<span class=\"pl-k\">.</span>isPresent()) {</pre></div>", "author": "kevinleturc", "createdAt": "2020-12-22T13:51:54Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +473,131 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {", "originalCommit": "2a45b69a14519440e8bb0fb2c0bbbbfbce79accd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 2a7ac0b08e1..248832c5779 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -473,131 +453,26 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    /**\n-     * Registers the given extension on target extension point held by given registration info.\n-     *\n-     * @since 11.5\n-     */\n-    public void register(RegistrationInfo ri, Extension xt) {\n+    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    // should compute now the contributions\n-                    Class<?>[] contributions = xp.getContributions();\n-                    if (contributions != null) {\n-                        Context xctx = new XMapContext(xt.getContext());\n-                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n-                        if (registry.isNull()) {\n-                            // backward compatibility\n-                            if (xt.getContributions() == null) {\n-                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n-                            }\n-                        } else {\n-                            // fill registry\n-                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n-                        }\n-                    }\n-                } catch (XMapException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-\n-    }\n-\n-    protected void unregister(RegistrationInfo ri, Extension xt) {\n-        if (ri.useFormerLifecycleManagement()) {\n-            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n-                try {\n-                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n-                    if (registry.isPresent() && !registry.get().isNull()) {\n-                        try {\n-                            xp.getXMap().unregister(registry.get(), xt.getId());\n-                        } catch (XMapException e) {\n-                            log.error(e.getMessage() + \" while unprocessing component: \"\n-                                    + xt.getComponent().getName().getName(), e);\n-                        }\n-                    }\n-                } catch (RuntimeException e) {\n-                    ComponentName compName = xt.getComponent().getName();\n-                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n-                }\n-            });\n-        }\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n-        Map<String, Registry> target = registries.get(component);\n-        if (target != null && target.containsKey(point)) {\n-            Registry registry = target.get(point);\n-            if (!registry.isNull()) {\n-                return Optional.of((T) registry);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n-        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n-            return stored.get();\n-        }\n-        Registry registry = NULL_REGISTRY;\n-        String point = xp.getName();\n-        String registryClass = xp.getRegistryClass();\n-        if (registryClass != null) {\n-            try {\n-                Class<?> clazz = Class.forName(registryClass);\n-                Constructor<?> constructor = clazz.getConstructor();\n-                registry = (Registry) constructor.newInstance();\n-            } catch (ReflectiveOperationException e) {\n-                String msg = String.format(\n-                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n-                        component, point, registryClass, e.toString());\n-                throw new RuntimeException(msg, e);\n-            }\n-        } else {\n-            Class<?>[] contributions = xp.getContributions();\n-            if (contributions.length != 0) {\n-                // compute registry from annotations, taking first registry\n-                XMap xmap = xp.getXMap();\n-                registry = Arrays.stream(contributions)\n-                                 .map(xmap::getObject)\n-                                 .filter(Objects::nonNull)\n-                                 .map(xmap::getRegistry)\n-                                 .filter(Objects::nonNull)\n-                                 .findFirst()\n-                                 .orElse(NULL_REGISTRY);\n-            }\n-        }\n-        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n-        return registry;\n-    }\n-\n-    protected void createRegistries(RegistrationInfo ri) {\n-        // instantiate extension point registries if any\n-        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n-            getOrCreateRegistry(ri.getName().getName(), xp);\n-        });\n-    }\n-\n-    protected void initializeRegistries(RegistrationInfo ri) {\n-        String name = ri.getName().getName();\n-        if (registries.containsKey(name)) {\n-            registries.get(name).values().forEach(Registry::initialize);\n+            ri.getExtensionPoint(xt.getExtensionPoint())\n+              .filter(xp -> xp.getContributions() != null)\n+              .map(ExtensionPointImpl.class::cast)\n+              .ifPresent(xp -> {\n+                  try {\n+                      Object[] contribs = xp.loadContributions(ri, xt);\n+                      xt.setContributions(contribs);\n+                  } catch (RuntimeException e) {\n+                      ComponentName compName = xt.getComponent().getName();\n+                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n+                  }\n+              });\n         }\n     }\n \n-    protected void resetRegistries(RegistrationInfo ri) {\n-        registries.remove(ri.getName().getName());\n-    }\n-\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": {"commit": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 248832c5779..6e87a0e3ae1 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -453,26 +473,131 @@ public class ComponentManagerImpl implements ComponentManager {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isPresent()) {\n+            return stored.get();\n+        }\n+        Registry registry = NULL_REGISTRY;\n+        String point = xp.getName();\n+        String registryClass = xp.getRegistryClass();\n+        if (registryClass != null) {\n+            try {\n+                Class<?> clazz = Class.forName(registryClass);\n+                Constructor<?> constructor = clazz.getConstructor();\n+                registry = (Registry) constructor.newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                        component, point, registryClass, e.toString());\n+                throw new RuntimeException(msg, e);\n+            }\n+        } else {\n+            Class<?>[] contributions = xp.getContributions();\n+            if (contributions.length != 0) {\n+                // compute registry from annotations, taking first registry\n+                XMap xmap = xp.getXMap();\n+                registry = Arrays.stream(contributions)\n+                                 .map(xmap::getObject)\n+                                 .filter(Objects::nonNull)\n+                                 .map(xmap::getRegistry)\n+                                 .filter(Objects::nonNull)\n+                                 .findFirst()\n+                                 .orElse(NULL_REGISTRY);\n+            }\n+        }\n+        registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+        return registry;\n+    }\n+\n+    protected void createRegistries(RegistrationInfo ri) {\n+        // instantiate extension point registries if any\n+        Stream.of(ri.getExtensionPoints()).filter(xp -> xp.getContributions() != null).forEach(xp -> {\n+            getOrCreateRegistry(ri.getName().getName(), xp);\n+        });\n+    }\n+\n+    protected void initializeRegistries(RegistrationInfo ri) {\n+        String name = ri.getName().getName();\n+        if (registries.containsKey(name)) {\n+            registries.get(name).values().forEach(Registry::initialize);\n         }\n     }\n \n+    protected void resetRegistries(RegistrationInfo ri) {\n+        registries.remove(ri.getName().getName());\n+    }\n+\n     public synchronized void registerServices(RegistrationInfo ri) {\n         String[] serviceNames = ri.getProvidedServiceNames();\n         if (serviceNames == null) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\nindex 2a7ac0b08e1..86d02a4aa30 100644\n--- a/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n+++ b/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java\n", "chunk": "@@ -545,7 +549,7 @@ public class ComponentManagerImpl implements ComponentManager {\n \n     protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n         Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n-        if (!stored.isEmpty()) {\n+        if (stored.isPresent()) {\n             return stored.get();\n         }\n         Registry registry = NULL_REGISTRY;\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NDIzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547294234", "body": "Blank line.", "bodyText": "Blank line.", "bodyHTML": "<p dir=\"auto\">Blank line.</p>", "author": "kevinleturc", "createdAt": "2020-12-22T14:02:09Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+import org.nuxeo.common.xmap.registry.XRegistry;\n+import org.nuxeo.common.xmap.registry.XRegistryId;\n+\n+/**\n+ * @since 11.5\n+ */\n+", "originalCommit": "9af95e0f47f299e229bac9b2e8149ee211519bf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\ndeleted file mode 100644\nindex 363cbecbfad..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,48 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import org.nuxeo.common.xmap.annotation.XNode;\n-import org.nuxeo.common.xmap.annotation.XObject;\n-import org.nuxeo.common.xmap.registry.XRegistry;\n-import org.nuxeo.common.xmap.registry.XRegistryId;\n-\n-/**\n- * @since 11.5\n- */\n-\n-@XObject(\"printer\")\n-@XRegistry\n-public class DummyContributionWithRegistry extends DummyContribution {\n-\n-    @XNode(\"message\")\n-    @XRegistryId\n-    public String message;\n-\n-    @XNode(\"@class\")\n-    public Class<?> klass;\n-\n-    public DummyContributionWithRegistry() {\n-    }\n-\n-    public DummyContributionWithRegistry(String message) {\n-        this.message = message;\n-    }\n-\n-}\n", "next_change": {"commit": "701fd9b467b4ad744800deec70bd40eb650bfe98", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\nnew file mode 100644\nindex 00000000000..25bff233c59\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\n", "chunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+import org.nuxeo.common.xmap.registry.XRegistry;\n+import org.nuxeo.common.xmap.registry.XRegistryId;\n+\n+/**\n+ * @since 11.5\n+ */\n+@XObject(\"printer\")\n+@XRegistry\n+public class DummyContributionWithRegistry extends DummyContribution {\n+\n+    @XNode(\"message\")\n+    @XRegistryId\n+    public String message;\n+\n+    @XNode(\"@class\")\n+    public Class<?> klass;\n+\n+    public DummyContributionWithRegistry() {\n+    }\n+\n+    public DummyContributionWithRegistry(String message) {\n+        this.message = message;\n+    }\n+\n+}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\nindex 363cbecbfad..25bff233c59 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java\n", "chunk": "@@ -26,7 +26,6 @@ import org.nuxeo.common.xmap.registry.XRegistryId;\n /**\n  * @since 11.5\n  */\n-\n @XObject(\"printer\")\n @XRegistry\n public class DummyContributionWithRegistry extends DummyContribution {\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNzIxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547307213", "body": "Do you want to throw an exception if it is not present? Because this code won't, it will just instantiate the RuntimeException.", "bodyText": "Do you want to throw an exception if it is not present? Because this code won't, it will just instantiate the RuntimeException.", "bodyHTML": "<p dir=\"auto\">Do you want to throw an exception if it is not present? Because this code won't, it will just instantiate the RuntimeException.</p>", "author": "kevinleturc", "createdAt": "2020-12-22T14:26:56Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.register(ctx, xObject, element, tag);\n+        }, () -> new RuntimeException());", "originalCommit": "9af95e0f47f299e229bac9b2e8149ee211519bf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\ndeleted file mode 100644\nindex ef1a1a5ce53..00000000000\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ /dev/null\n", "chunk": "@@ -1,60 +0,0 @@\n-/*\n- * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- * Contributors:\n- *     Anahide Tchertchian\n- */\n-package org.nuxeo.runtime;\n-\n-import java.util.Optional;\n-\n-import org.nuxeo.common.xmap.Context;\n-import org.nuxeo.common.xmap.XAnnotatedObject;\n-import org.nuxeo.common.xmap.registry.AbstractRegistry;\n-import org.nuxeo.common.xmap.registry.Registry;\n-import org.nuxeo.runtime.api.Framework;\n-import org.w3c.dom.Element;\n-\n-/**\n- * @since 11.5\n- */\n-public class DummyRegistry extends AbstractRegistry {\n-\n-    public Optional<Registry> getTargetRegistry() {\n-        return Framework.getRuntime()\n-                        .getComponentManager()\n-                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n-    }\n-\n-    @Override\n-    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-    @Override\n-    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n-        // NOOP\n-    }\n-\n-    @Override\n-    public void unregister(String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.unregister(tag);\n-        }, () -> new RuntimeException());\n-    }\n-\n-}\n", "next_change": {"commit": "701fd9b467b4ad744800deec70bd40eb650bfe98", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nnew file mode 100644\nindex 00000000000..06690ba83d4\n--- /dev/null\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        Optional<Registry> optReg = getTargetRegistry();\n+        if (optReg.isPresent()) {\n+            optReg.get().register(ctx, xObject, element, tag);\n+        } else {\n+            throw new RuntimeException(\"Target registry unknown\");\n+        }\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        // NOOP\n+    }\n+\n+    @Override\n+    public void unregister(String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.unregister(tag);\n+        }, () -> new RuntimeException());\n+    }\n+\n+}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\nindex ef1a1a5ce53..06690ba83d4 100644\n--- a/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n+++ b/modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java\n", "chunk": "@@ -40,9 +40,12 @@ public class DummyRegistry extends AbstractRegistry {\n \n     @Override\n     public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n-        getTargetRegistry().ifPresentOrElse(reg -> {\n-            reg.register(ctx, xObject, element, tag);\n-        }, () -> new RuntimeException());\n+        Optional<Registry> optReg = getTargetRegistry();\n+        if (optReg.isPresent()) {\n+            optReg.get().register(ctx, xObject, element, tag);\n+        } else {\n+            throw new RuntimeException(\"Target registry unknown\");\n+        }\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDE1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547350159", "body": "It could be:\r\n```java\r\n        return this.<SerializerDescriptor> getRegistryContribution(EXTENSION_POINT_NAME, id)\r\n                   .or(() -> getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME))\r\n                   .map(SerializerDescriptor::newInstance)\r\n                   .orElseThrow(() -> new NuxeoException(\"UnknownSerializer named \" + id));\r\n```", "bodyText": "It could be:\n        return this.<SerializerDescriptor> getRegistryContribution(EXTENSION_POINT_NAME, id)\n                   .or(() -> getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME))\n                   .map(SerializerDescriptor::newInstance)\n                   .orElseThrow(() -> new NuxeoException(\"UnknownSerializer named \" + id));", "bodyHTML": "<p dir=\"auto\">It could be:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        return this.&lt;SerializerDescriptor&gt; getRegistryContribution(EXTENSION_POINT_NAME, id)\n                   .or(() -&gt; getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME))\n                   .map(SerializerDescriptor::newInstance)\n                   .orElseThrow(() -&gt; new NuxeoException(&quot;UnknownSerializer named &quot; + id));\"><pre>        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">SerializerDescriptor</span><span class=\"pl-k\">&gt;</span> getRegistryContribution(<span class=\"pl-c1\">EXTENSION_POINT_NAME</span>, id)\n                   .or(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> getRegistryContribution(<span class=\"pl-c1\">EXTENSION_POINT_NAME</span>, <span class=\"pl-c1\">DEFAULT_SERIALIZER_NAME</span>))\n                   .map(<span class=\"pl-smi\">SerializerDescriptor</span><span class=\"pl-k\">::</span>newInstance)\n                   .orElseThrow(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">NuxeoException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>UnknownSerializer named <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> id));</pre></div>", "author": "kevinleturc", "createdAt": "2020-12-22T15:43:53Z", "path": "modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java", "diffHunk": "@@ -41,16 +43,14 @@\n \n     @Override\n     public TemplateSerializer getSerializer(String id) {\n-        SerializerDescriptor contrib = getDescriptor(EXTENSION_POINT_NAME, id);\n-\n-        if (contrib == null) {\n-            contrib = getDescriptor(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n-            if (contrib == null) {\n+        Optional<SerializerDescriptor> optContrib = getRegistryContribution(EXTENSION_POINT_NAME, id);\n+        if (optContrib.isEmpty()) {\n+            optContrib = getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n+            if (optContrib.isEmpty()) {\n                 throw new NuxeoException(\"UnknownSerializer named \" + id);\n             }\n         }\n-\n-        return contrib.newInstance();\n+        return optContrib.get().newInstance();", "originalCommit": "f762351315410c7abaf1653356e4a3c61f0ff5f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMTY0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r552031643", "bodyText": "Done with #4575", "author": "atchertchian", "createdAt": "2021-01-05T16:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\nindex 199cd274995..3750164a042 100644\n--- a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n+++ b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n", "chunk": "@@ -43,14 +41,16 @@ public class TemplateSerializerServiceImpl extends DefaultComponent implements T\n \n     @Override\n     public TemplateSerializer getSerializer(String id) {\n-        Optional<SerializerDescriptor> optContrib = getRegistryContribution(EXTENSION_POINT_NAME, id);\n-        if (optContrib.isEmpty()) {\n-            optContrib = getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n-            if (optContrib.isEmpty()) {\n+        SerializerDescriptor contrib = getDescriptor(EXTENSION_POINT_NAME, id);\n+\n+        if (contrib == null) {\n+            contrib = getDescriptor(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n+            if (contrib == null) {\n                 throw new NuxeoException(\"UnknownSerializer named \" + id);\n             }\n         }\n-        return optContrib.get().newInstance();\n+\n+        return contrib.newInstance();\n     }\n \n }\n", "next_change": {"commit": "6a04f39b01b8abedf0e790ce7075987cca05d707", "changed_code": [{"header": "diff --git a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\nindex 3750164a042..199cd274995 100644\n--- a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n+++ b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n", "chunk": "@@ -41,16 +43,14 @@ public class TemplateSerializerServiceImpl extends DefaultComponent implements T\n \n     @Override\n     public TemplateSerializer getSerializer(String id) {\n-        SerializerDescriptor contrib = getDescriptor(EXTENSION_POINT_NAME, id);\n-\n-        if (contrib == null) {\n-            contrib = getDescriptor(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n-            if (contrib == null) {\n+        Optional<SerializerDescriptor> optContrib = getRegistryContribution(EXTENSION_POINT_NAME, id);\n+        if (optContrib.isEmpty()) {\n+            optContrib = getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n+            if (optContrib.isEmpty()) {\n                 throw new NuxeoException(\"UnknownSerializer named \" + id);\n             }\n         }\n-\n-        return contrib.newInstance();\n+        return optContrib.get().newInstance();\n     }\n \n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4c42c5a10fa60a63897b733e218b6a01437554b2", "changed_code": [{"header": "diff --git a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\nindex 199cd274995..69cf0d329f1 100644\n--- a/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n+++ b/modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java\n", "chunk": "@@ -43,6 +43,9 @@ public class TemplateSerializerServiceImpl extends DefaultComponent implements T\n \n     @Override\n     public TemplateSerializer getSerializer(String id) {\n+        if (id == null) {\n+            id = DEFAULT_SERIALIZER_NAME;\n+        }\n         Optional<SerializerDescriptor> optContrib = getRegistryContribution(EXTENSION_POINT_NAME, id);\n         if (optContrib.isEmpty()) {\n             optContrib = getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n", "next_change": null}]}, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MjIzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547352237", "body": "Could be:\r\n```java\r\nthis.<TransientStoreConfig>getRegistryContributions(EP_STORE).forEach(desc -> getStore(desc.getId()));\r\n```", "bodyText": "Could be:\nthis.<TransientStoreConfig>getRegistryContributions(EP_STORE).forEach(desc -> getStore(desc.getId()));", "bodyHTML": "<p dir=\"auto\">Could be:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"this.&lt;TransientStoreConfig&gt;getRegistryContributions(EP_STORE).forEach(desc -&gt; getStore(desc.getId()));\"><pre><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">TransientStoreConfig</span><span class=\"pl-k\">&gt;</span>getRegistryContributions(<span class=\"pl-c1\">EP_STORE</span>)<span class=\"pl-k\">.</span>forEach(desc <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> getStore(desc<span class=\"pl-k\">.</span>getId()));</pre></div>", "author": "kevinleturc", "createdAt": "2020-12-22T15:47:36Z", "path": "modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java", "diffHunk": "@@ -81,41 +85,30 @@ public synchronized TransientStore getStore(String name) {\n     }\n \n     protected TransientStoreConfig getDefaultDescriptor() {\n-        TransientStoreConfig descriptor = getDescriptor(EP_STORE, DEFAULT_STORE_NAME);\n-        if (descriptor == null) {\n+        Optional<TransientStoreConfig> descriptor = getRegistryContribution(EP_STORE, DEFAULT_STORE_NAME);\n+        if (descriptor.isEmpty()) {\n             // TODO make this a hard error\n             String message = \"Missing configuration for default transient store, using in-memory\";\n             log.warn(message);\n             addRuntimeMessage(Level.WARNING, message);\n             // use in-memory store\n-            descriptor = new TransientStoreConfig(DEFAULT_STORE_NAME);\n+            return new TransientStoreConfig(DEFAULT_STORE_NAME);\n         }\n-        return descriptor;\n+        return descriptor.get();\n     }\n \n     @Override\n     public void doGC() {\n         stores.values().forEach(TransientStoreProvider::doGC);\n     }\n \n-    @Override\n-    protected boolean unregister(String xp, Descriptor descriptor) {\n-        boolean removed = super.unregister(xp, descriptor);\n-        if (removed) {\n-            TransientStoreProvider store = stores.remove(descriptor.getId());\n-            if (store != null) {\n-                store.shutdown();\n-            }\n-        }\n-        return removed;\n-    }\n-\n     @Override\n     public void start(ComponentContext context) {\n         // make sure we have a default store\n         getStore(DEFAULT_STORE_NAME);\n         // instantiate all registered stores\n-        getDescriptors(EP_STORE).forEach(desc -> getStore(desc.getId()));\n+        List<TransientStoreConfig> stores = getRegistryContributions(EP_STORE);\n+        stores.forEach(desc -> getStore(desc.getId()));", "originalCommit": "ecb366b1efd544f930d6ded353222661cd14907d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMTc3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r552031774", "bodyText": "Done with #4575", "author": "atchertchian", "createdAt": "2021-01-05T16:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MjIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java b/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\nindex de47c4fc7d6..769e497ffea 100644\n--- a/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\n+++ b/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\n", "chunk": "@@ -102,13 +98,24 @@ public class TransientStorageComponent extends DefaultComponent implements Trans\n         stores.values().forEach(TransientStoreProvider::doGC);\n     }\n \n+    @Override\n+    protected boolean unregister(String xp, Descriptor descriptor) {\n+        boolean removed = super.unregister(xp, descriptor);\n+        if (removed) {\n+            TransientStoreProvider store = stores.remove(descriptor.getId());\n+            if (store != null) {\n+                store.shutdown();\n+            }\n+        }\n+        return removed;\n+    }\n+\n     @Override\n     public void start(ComponentContext context) {\n         // make sure we have a default store\n         getStore(DEFAULT_STORE_NAME);\n         // instantiate all registered stores\n-        List<TransientStoreConfig> stores = getRegistryContributions(EP_STORE);\n-        stores.forEach(desc -> getStore(desc.getId()));\n+        getDescriptors(EP_STORE).forEach(desc -> getStore(desc.getId()));\n     }\n \n     @Override\n", "next_change": {"commit": "1a7f31fa31722cf63d14188c748dd9a1cebe5869", "changed_code": [{"header": "diff --git a/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java b/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\nindex 769e497ffea..de47c4fc7d6 100644\n--- a/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\n+++ b/modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java\n", "chunk": "@@ -98,24 +102,13 @@ public class TransientStorageComponent extends DefaultComponent implements Trans\n         stores.values().forEach(TransientStoreProvider::doGC);\n     }\n \n-    @Override\n-    protected boolean unregister(String xp, Descriptor descriptor) {\n-        boolean removed = super.unregister(xp, descriptor);\n-        if (removed) {\n-            TransientStoreProvider store = stores.remove(descriptor.getId());\n-            if (store != null) {\n-                store.shutdown();\n-            }\n-        }\n-        return removed;\n-    }\n-\n     @Override\n     public void start(ComponentContext context) {\n         // make sure we have a default store\n         getStore(DEFAULT_STORE_NAME);\n         // instantiate all registered stores\n-        getDescriptors(EP_STORE).forEach(desc -> getStore(desc.getId()));\n+        List<TransientStoreConfig> stores = getRegistryContributions(EP_STORE);\n+        stores.forEach(desc -> getStore(desc.getId()));\n     }\n \n     @Override\n", "next_change": null}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NzE5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547357196", "body": "It could be:\r\n```java\r\nthis.<MarshallerRegistry> getExtensionPointRegistry(XP_MARSHALLER).getContributionValues().forEach(m -> {\r\n            writers.addAll(m.writers);\r\n            readers.addAll(m.readers);\r\n        });\r\n```", "bodyText": "It could be:\nthis.<MarshallerRegistry> getExtensionPointRegistry(XP_MARSHALLER).getContributionValues().forEach(m -> {\n            writers.addAll(m.writers);\n            readers.addAll(m.readers);\n        });", "bodyHTML": "<p dir=\"auto\">It could be:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"this.&lt;MarshallerRegistry&gt; getExtensionPointRegistry(XP_MARSHALLER).getContributionValues().forEach(m -&gt; {\n            writers.addAll(m.writers);\n            readers.addAll(m.readers);\n        });\"><pre><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">MarshallerRegistry</span><span class=\"pl-k\">&gt;</span> getExtensionPointRegistry(<span class=\"pl-c1\">XP_MARSHALLER</span>)<span class=\"pl-k\">.</span>getContributionValues()<span class=\"pl-k\">.</span>forEach(m <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n            writers<span class=\"pl-k\">.</span>addAll(m<span class=\"pl-k\">.</span>writers);\n            readers<span class=\"pl-k\">.</span>addAll(m<span class=\"pl-k\">.</span>readers);\n        });</pre></div>", "author": "kevinleturc", "createdAt": "2020-12-22T15:56:30Z", "path": "modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java", "diffHunk": "@@ -55,7 +55,8 @@\n     @Override\n     public void start(ComponentContext context) {\n         super.start(context);\n-        List<MarshallerDescriptor> marshallers = getDescriptors(XP_MARSHALLER);\n+        List<MarshallerDescriptor> marshallers = ((MarshallerRegistry) getExtensionPointRegistry(\n+                XP_MARSHALLER)).getContributionValues();\n         marshallers.forEach(m -> {\n             writers.addAll(m.writers);\n             readers.addAll(m.readers);", "originalCommit": "ee127e0ee667a968ded24ab5f0f1905f7e9634e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMTY5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r552031694", "bodyText": "Done with #4575", "author": "atchertchian", "createdAt": "2021-01-05T16:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "changed_code": [{"header": "diff --git a/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java b/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\nindex 78af898f99d..16b86e1ca9e 100644\n--- a/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\n+++ b/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\n", "chunk": "@@ -55,8 +55,7 @@ public class AutomationServerComponent extends DefaultComponent implements Autom\n     @Override\n     public void start(ComponentContext context) {\n         super.start(context);\n-        List<MarshallerDescriptor> marshallers = ((MarshallerRegistry) getExtensionPointRegistry(\n-                XP_MARSHALLER)).getContributionValues();\n+        List<MarshallerDescriptor> marshallers = getDescriptors(XP_MARSHALLER);\n         marshallers.forEach(m -> {\n             writers.addAll(m.writers);\n             readers.addAll(m.readers);\n", "next_change": {"commit": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "changed_code": [{"header": "diff --git a/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java b/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\nindex 16b86e1ca9e..78af898f99d 100644\n--- a/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\n+++ b/modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java\n", "chunk": "@@ -55,7 +55,8 @@ public class AutomationServerComponent extends DefaultComponent implements Autom\n     @Override\n     public void start(ComponentContext context) {\n         super.start(context);\n-        List<MarshallerDescriptor> marshallers = getDescriptors(XP_MARSHALLER);\n+        List<MarshallerDescriptor> marshallers = ((MarshallerRegistry) getExtensionPointRegistry(\n+                XP_MARSHALLER)).getContributionValues();\n         marshallers.forEach(m -> {\n             writers.addAll(m.writers);\n             readers.addAll(m.readers);\n", "next_change": null}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2", "message": "Merge commit", "committedDate": null}]}, {"oid": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "url": "https://github.com/nuxeo/nuxeo/commit/c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "message": "NXP-29580: add xmap registry annotations", "committedDate": "2020-12-22T17:27:09Z", "type": "commit"}, {"oid": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "url": "https://github.com/nuxeo/nuxeo/commit/59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "message": "NXP-29580: plug runtime usage of xmap registries", "committedDate": "2020-12-22T17:27:10Z", "type": "commit"}, {"oid": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "url": "https://github.com/nuxeo/nuxeo/commit/2e1d4b751ae1c6a6a524b25c280c781207325c11", "message": "NXP-29580: add tag API on registry: avoids dupe registrations and speeds up unregistration", "committedDate": "2020-12-22T17:27:10Z", "type": "commit"}, {"oid": "701fd9b467b4ad744800deec70bd40eb650bfe98", "url": "https://github.com/nuxeo/nuxeo/commit/701fd9b467b4ad744800deec70bd40eb650bfe98", "message": "NXP-29580: adapt and test extension point override use case", "committedDate": "2020-12-22T17:27:11Z", "type": "commit"}, {"oid": "e675d86e060cff30eb806aae757cd3acc775c2fb", "url": "https://github.com/nuxeo/nuxeo/commit/e675d86e060cff30eb806aae757cd3acc775c2fb", "message": "NXP-29580: add xmap annotation to combine elements, for some registry id use cases", "committedDate": "2020-12-22T17:27:12Z", "type": "commit"}, {"oid": "68660d55bbe75dfc6738d40a36ec78282da6ce51", "url": "https://github.com/nuxeo/nuxeo/commit/68660d55bbe75dfc6738d40a36ec78282da6ce51", "message": "NXP-29580: deprecate Descriptor mechanism", "committedDate": "2020-12-22T17:27:12Z", "type": "commit"}, {"oid": "c00abda03ed44b14c561624bb91f6c3d6fc22f47", "url": "https://github.com/nuxeo/nuxeo/commit/c00abda03ed44b14c561624bb91f6c3d6fc22f47", "message": "NXP-29580: add helper methods to retrieve contributions from runtime annotation registries", "committedDate": "2020-12-22T17:27:12Z", "type": "commit"}, {"oid": "0760459cbdcc750832049a80538a818d5435b818", "url": "https://github.com/nuxeo/nuxeo/commit/0760459cbdcc750832049a80538a818d5435b818", "message": "NXP-29580: migrate LoginAsDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:13Z", "type": "commit"}, {"oid": "b47d3b9ec533bd80826c0921d33f0eb290c63694", "url": "https://github.com/nuxeo/nuxeo/commit/b47d3b9ec533bd80826c0921d33f0eb290c63694", "message": "NXP-29580: migrate AWSConfigurationDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:13Z", "type": "commit"}, {"oid": "292af1b010bebd79c8596c2bddc7b555a0101182", "url": "https://github.com/nuxeo/nuxeo/commit/292af1b010bebd79c8596c2bddc7b555a0101182", "message": "NXP-29580: migrate KeyValueStoreDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:13Z", "type": "commit"}, {"oid": "1d3344698fd23c1f1bd570d97195c59b77dd75ba", "url": "https://github.com/nuxeo/nuxeo/commit/1d3344698fd23c1f1bd570d97195c59b77dd75ba", "message": "NXP-29580: migrate ClusterNodeDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:14Z", "type": "commit"}, {"oid": "ed777499f7a3a4a197ed4431407450730fca25f4", "url": "https://github.com/nuxeo/nuxeo/commit/ed777499f7a3a4a197ed4431407450730fca25f4", "message": "NXP-29580: migrate MetricsConfigurationDescriptor and MetricsReporterDescriptor  to use runtime annotation registry", "committedDate": "2020-12-22T17:27:14Z", "type": "commit"}, {"oid": "123fd0893355d6279546b187399da6829fa927d6", "url": "https://github.com/nuxeo/nuxeo/commit/123fd0893355d6279546b187399da6829fa927d6", "message": "NXP-29580: migrate MigrationDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:15Z", "type": "commit"}, {"oid": "c16e7fbd5568ff2462d89ba5a296dbcbfee4d3b7", "url": "https://github.com/nuxeo/nuxeo/commit/c16e7fbd5568ff2462d89ba5a296dbcbfee4d3b7", "message": "NXP-29580: migrate CodecDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:15Z", "type": "commit"}, {"oid": "7daa64dd04179cae827a5604fc466040a8a4a8a4", "url": "https://github.com/nuxeo/nuxeo/commit/7daa64dd04179cae827a5604fc466040a8a4a8a4", "message": "NXP-29580: migrate MongoDBConnectionConfig to use runtime annotation registry", "committedDate": "2020-12-22T17:27:16Z", "type": "commit"}, {"oid": "a3359625444fceff4ffd313e846a2bc44185ebf8", "url": "https://github.com/nuxeo/nuxeo/commit/a3359625444fceff4ffd313e846a2bc44185ebf8", "message": "NXP-29580: migrate BulkActionDescriptor and ScrollDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:16Z", "type": "commit"}, {"oid": "8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "url": "https://github.com/nuxeo/nuxeo/commit/8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:16Z", "type": "commit"}, {"oid": "501e1ce2b47678acc53c323f9c153cb4f384e187", "url": "https://github.com/nuxeo/nuxeo/commit/501e1ce2b47678acc53c323f9c153cb4f384e187", "message": "NXP-29580: migrate BatchHandlerDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:17Z", "type": "commit"}, {"oid": "3f06c0ac8eb726f765cd0d55432e0a85fd4c32b7", "url": "https://github.com/nuxeo/nuxeo/commit/3f06c0ac8eb726f765cd0d55432e0a85fd4c32b7", "message": "NXP-29580: migrate PubSubProviderDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:17Z", "type": "commit"}, {"oid": "6a04f39b01b8abedf0e790ce7075987cca05d707", "url": "https://github.com/nuxeo/nuxeo/commit/6a04f39b01b8abedf0e790ce7075987cca05d707", "message": "NXP-29580: migrate SerializerDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:17Z", "type": "commit"}, {"oid": "fac0ab2ebc9129b9a82df1a01ac921dd1edeb3a7", "url": "https://github.com/nuxeo/nuxeo/commit/fac0ab2ebc9129b9a82df1a01ac921dd1edeb3a7", "message": "NXP-29580: migrate RedisPoolDescriptor and RedisSentinelDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:18Z", "type": "commit"}, {"oid": "1a7f31fa31722cf63d14188c748dd9a1cebe5869", "url": "https://github.com/nuxeo/nuxeo/commit/1a7f31fa31722cf63d14188c748dd9a1cebe5869", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry", "committedDate": "2020-12-22T17:27:18Z", "type": "commit"}, {"oid": "18382d6adbf1a5b6862cdb31622dab6d8d2b4258", "url": "https://github.com/nuxeo/nuxeo/commit/18382d6adbf1a5b6862cdb31622dab6d8d2b4258", "message": "NXP-29580: migrate runtime stream descriptors to use runtime annotation registry", "committedDate": "2020-12-22T17:27:19Z", "type": "commit"}, {"oid": "a4007398ad5cdaebb5caf4db9d769aa857a9972c", "url": "https://github.com/nuxeo/nuxeo/commit/a4007398ad5cdaebb5caf4db9d769aa857a9972c", "message": "NXP-29580: migrate OpenIDConnectProviderDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:19Z", "type": "commit"}, {"oid": "73e7075851faac14507710a884dc1905c0a5deb1", "url": "https://github.com/nuxeo/nuxeo/commit/73e7075851faac14507710a884dc1905c0a5deb1", "message": "NXP-29580: migrate ESHintQueryBuilderDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:20Z", "type": "commit"}, {"oid": "10dd375af8e6810fcafddb9f174deecb45d93bb0", "url": "https://github.com/nuxeo/nuxeo/commit/10dd375af8e6810fcafddb9f174deecb45d93bb0", "message": "NXP-29580: cleanup/format", "committedDate": "2020-12-22T17:27:20Z", "type": "commit"}, {"oid": "276844d5bf0833ad1423f196d80ecd5f36303a3c", "url": "https://github.com/nuxeo/nuxeo/commit/276844d5bf0833ad1423f196d80ecd5f36303a3c", "message": "NXP-29580: migrate core-io descriptors to use runtime annotation registry", "committedDate": "2020-12-22T17:27:20Z", "type": "commit"}, {"oid": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "url": "https://github.com/nuxeo/nuxeo/commit/cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry", "committedDate": "2020-12-22T17:27:21Z", "type": "commit"}, {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "url": "https://github.com/nuxeo/nuxeo/commit/44f80d67ebcfea5a692b5502bc77f9dad10eab56", "message": "NXP-29580: review multi-threading on registries", "committedDate": "2020-12-22T17:27:21Z", "type": "commit"}, {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "url": "https://github.com/nuxeo/nuxeo/commit/44f80d67ebcfea5a692b5502bc77f9dad10eab56", "message": "NXP-29580: review multi-threading on registries", "committedDate": "2020-12-22T17:27:21Z", "type": "forcePushed"}]}