{"pr_number": 3965, "pr_title": "Improve blob dispatcher (10.10)", "pr_author": "efge", "pr_createdAt": "2020-04-23T18:15:17Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3965", "timeline": [{"oid": "e7dc34fdc25bdd0eff04c752b0cd5a1837e37ec2", "url": "https://github.com/nuxeo/nuxeo/commit/e7dc34fdc25bdd0eff04c752b0cd5a1837e37ec2", "message": "NXP-28227: allow blob dispatch on doc's ecm:path", "committedDate": "2020-04-23T18:02:52Z", "type": "commit"}, {"oid": "e7121a8db9c19267bc4e929a30b6d7d9e7f63528", "url": "https://github.com/nuxeo/nuxeo/commit/e7121a8db9c19267bc4e929a30b6d7d9e7f63528", "message": "NXP-28267: allow full regexp-based value match for blob dispatch", "committedDate": "2020-04-23T18:02:52Z", "type": "commit"}, {"oid": "f32b10e6baaa21c579a9551d50212a2d574cc529", "url": "https://github.com/nuxeo/nuxeo/commit/f32b10e6baaa21c579a9551d50212a2d574cc529", "message": "NXP-28975: fix default blob dispatcher != operator", "committedDate": "2020-04-23T18:02:52Z", "type": "commit"}, {"oid": "b2d97d2e429cc82fec97304219f1e900c5586c78", "url": "https://github.com/nuxeo/nuxeo/commit/b2d97d2e429cc82fec97304219f1e900c5586c78", "message": "NXP-28986: allow >= and <= operators in default blob dispatcher", "committedDate": "2020-04-23T18:02:52Z", "type": "commit"}, {"oid": "ac4c4a17c7007523629ebe0fb8c7a50408cc0ca2", "url": "https://github.com/nuxeo/nuxeo/commit/ac4c4a17c7007523629ebe0fb8c7a50408cc0ca2", "message": "NXP-28987: allow float values in default blob dispatcher", "committedDate": "2020-04-23T18:02:52Z", "type": "commit"}, {"oid": "33c897257ae054e9b9e371c4d814d2df638c0005", "url": "https://github.com/nuxeo/nuxeo/commit/33c897257ae054e9b9e371c4d814d2df638c0005", "message": "NXP-28987: allow date values in default blob dispatcher", "committedDate": "2020-04-23T18:04:15Z", "type": "commit"}, {"oid": "d01a39ae4792386e8f55d7ce3a10e7b21cc377bb", "url": "https://github.com/nuxeo/nuxeo/commit/d01a39ae4792386e8f55d7ce3a10e7b21cc377bb", "message": "NXP-28989: make default blob dispatcher easier to subclass", "committedDate": "2020-04-23T21:04:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczOTQ5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3965#discussion_r415739493", "body": "```suggestion\r\n            throw new AssertionError(\"not reached\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new AssertionError(\"notreached\");\n          \n          \n            \n                        throw new AssertionError(\"not reached\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"361\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">notreached</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"361\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">not reached</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-04-27T11:40:07Z", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DefaultBlobDispatcher.java", "diffHunk": "@@ -244,87 +277,146 @@ protected String getProviderId(Document doc, Blob blob, String blobXPath) {\n         if (useRepositoryName) {\n             return doc.getRepositoryName();\n         }\n+        NEXT_RULE: //\n         for (Rule rule : rules) {\n-            boolean allClausesMatch = true;\n             for (Clause clause : rule.clauses) {\n-                String xpath = clause.xpath;\n                 Object value;\n-                if (xpath.equals(REPOSITORY_NAME)) {\n-                    value = doc.getRepositoryName();\n-                } else if (xpath.equals(IS_RECORD)) {\n-                    value = Boolean.valueOf(doc.isRecord());\n-                } else if (xpath.startsWith(BLOB_PREFIX)) {\n-                    switch (xpath.substring(BLOB_PREFIX.length())) {\n-                    case BLOB_NAME:\n-                        value = blob.getFilename();\n-                        break;\n-                    case BLOB_MIME_TYPE:\n-                        value = blob.getMimeType();\n-                        break;\n-                    case BLOB_ENCODING:\n-                        value = blob.getEncoding();\n-                        break;\n-                    case BLOB_DIGEST:\n-                        value = blob.getDigest();\n-                        break;\n-                    case BLOB_LENGTH:\n-                        value = Long.valueOf(blob.getLength());\n-                        break;\n-                    case BLOB_XPATH:\n-                        value = blobXPath;\n-                        break;\n-                    default:\n-                        log.error(\"Invalid dispatcher configuration property name: \" + xpath);\n-                        continue;\n-                    }\n-                } else {\n+                try {\n+                    value = getValue(doc, blob, blobXPath, clause);\n+                } catch (PropertyNotFoundException e) {\n+                    continue NEXT_RULE;\n+                }\n+                value = convert(value);\n+                if (!match(value, clause)) {\n+                    continue NEXT_RULE;\n+                }\n+            }\n+            return rule.providerId;\n+        }\n+        return defaultProviderId;\n+    }\n+\n+    protected Object getValue(Document doc, Blob blob, String blobXPath, Clause clause) {\n+        String xpath = clause.xpath;\n+        if (xpath.equals(REPOSITORY_NAME)) {\n+            return doc.getRepositoryName();\n+        }\n+        if (xpath.equals(PATH)) {\n+            return doc.getPath();\n+        }\n+        if (xpath.equals(IS_RECORD)) {\n+            return doc.isRecord();\n+        }\n+        if (xpath.startsWith(BLOB_PREFIX)) {\n+            switch (xpath.substring(BLOB_PREFIX.length())) {\n+            case BLOB_NAME:\n+                return blob.getFilename();\n+            case BLOB_MIME_TYPE:\n+                return blob.getMimeType();\n+            case BLOB_ENCODING:\n+                return blob.getEncoding();\n+            case BLOB_DIGEST:\n+                return blob.getDigest();\n+            case BLOB_LENGTH:\n+                return blob.getLength();\n+            case BLOB_XPATH:\n+                return blobXPath;\n+            default:\n+                log.error(\"Invalid dispatcher configuration property name: \" + xpath);\n+                throw new PropertyNotFoundException(xpath);\n+            }\n+        }\n+        try {\n+            return doc.getValue(xpath);\n+        } catch (PropertyNotFoundException e) {\n+            return doc.getPropertyValue(xpath); // may still throw PropertyNotFoundException\n+        }\n+    }\n+\n+    protected Object convert(Object value) {\n+        if (value instanceof Calendar) {\n+            value = ((Calendar) value).toInstant();\n+        }\n+        return value;\n+    }\n+\n+    protected boolean match(Object value, Clause clause) {\n+        switch (clause.op) {\n+        case EQ:\n+            return compare(value, clause, true, cmp -> cmp == 0);\n+        case NEQ:\n+            return compare(value, clause, true, cmp -> cmp != 0);\n+        case LT:\n+            return compare(value, clause, false, cmp -> cmp < 0);\n+        case LTE:\n+            return compare(value, clause, false, cmp -> cmp <= 0);\n+        case GT:\n+            return compare(value, clause, false, cmp -> cmp > 0);\n+        case GTE:\n+            return compare(value, clause, false, cmp -> cmp >= 0);\n+        case GLOB:\n+        case RE:\n+            return ((Pattern) clause.value).matcher(String.valueOf(value)).matches();\n+        default:\n+            throw new AssertionError(\"notreached\");", "originalCommit": "d01a39ae4792386e8f55d7ce3a10e7b21cc377bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}