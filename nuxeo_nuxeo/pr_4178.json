{"pr_number": 4178, "pr_title": "NXP-29203: Manage distributions from the webengine UI", "pr_author": "atchertchian", "pr_createdAt": "2020-06-24T07:21:48Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4178", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzM1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444707355", "body": "I would have said that document adapter is immutable regarding their doc.\r\n\r\nFrom what I understand this is used in a sub class, therefore we could make it protected to only allow this usage, wdyt?", "bodyText": "I would have said that document adapter is immutable regarding their doc.\nFrom what I understand this is used in a sub class, therefore we could make it protected to only allow this usage, wdyt?", "bodyHTML": "<p dir=\"auto\">I would have said that document adapter is immutable regarding their doc.</p>\n<p dir=\"auto\">From what I understand this is used in a sub class, therefore we could make it protected to only allow this usage, wdyt?</p>", "author": "kevinleturc", "createdAt": "2020-06-24T07:47:24Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "diffHunk": "@@ -88,6 +88,15 @@ public DocumentModel getDoc() {\n         return doc;\n     }\n \n+    /**\n+     * Updates the document behind this adapter.\n+     *\n+     * @since 11.2\n+     */\n+    public void setDoc(DocumentModel doc) {\n+        this.doc = doc;\n+    }", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMTgwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444721808", "bodyText": "This update might not be needed anyway, i'll check", "author": "atchertchian", "createdAt": "2020-06-24T08:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444708012", "body": "Don't you want to test the get/safeGet of this property?", "bodyText": "Don't you want to test the get/safeGet of this property?", "bodyHTML": "<p dir=\"auto\">Don't you want to test the get/safeGet of this property?</p>", "author": "kevinleturc", "createdAt": "2020-06-24T07:48:35Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMTU2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444721560", "bodyText": "You mean adding unit tests? Why not indeed", "author": "atchertchian", "createdAt": "2020-06-24T08:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNTQyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444725427", "bodyText": "No, I meant that you're testing is TITLE_PROPERTY_PATH which shouldn't be the case as it's a constant.", "author": "kevinleturc", "createdAt": "2020-06-24T08:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMjk2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444732965", "bodyText": "Ah thanks indeed", "author": "atchertchian", "createdAt": "2020-06-24T08:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDMyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444710320", "body": "Could these two props be given to the first Stream?", "bodyText": "Could these two props be given to the first Stream?", "bodyHTML": "<p dir=\"auto\">Could these two props be given to the first Stream?</p>", "author": "kevinleturc", "createdAt": "2020-06-24T07:53:06Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMTQwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444711408", "body": "This should work:\r\n```suggestion\r\n                  .filter(updateProperties::containsKey)\r\n```", "bodyText": "This should work:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              .filter(entry -> updateProperties.containsKey(entry))\n          \n          \n            \n                              .filter(updateProperties::containsKey)", "bodyHTML": "<p dir=\"auto\">This should work:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                  .filter(<span class=\"x x-first\">entry </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>updateProperties<span class=\"pl-k x x-first x-last\">.</span>containsKey<span class=\"x x-first x-last\">(entry)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .filter(updateProperties<span class=\"pl-k x x-first x-last\">::</span>containsKey)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-06-24T07:54:57Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712069", "body": "Shouldn't we use the UTC ZoneId?", "bodyText": "Shouldn't we use the UTC ZoneId?", "bodyHTML": "<p dir=\"auto\">Shouldn't we use the UTC ZoneId?</p>", "author": "kevinleturc", "createdAt": "2020-06-24T07:56:00Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMjg5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444722895", "bodyText": "I took that logic from https://github.com/nuxeo/nuxeo/blob/master/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java#L320 and we only display the day, so maybe it would be overkill (?)", "author": "atchertchian", "createdAt": "2020-06-24T08:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTY2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444731660", "bodyText": "It's an issue to save a date/datetime in the DB in another timezone than UTC. ES would make this assumption leading to weird behavior on search.\nThis may not be needed in this case, furthermore, data may have already been persisted with this approach and we need to keep it for backward.", "author": "kevinleturc", "createdAt": "2020-06-24T08:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNjk5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444736990", "bodyText": "Changed it anyway, backward compat is not needed for this i think", "author": "atchertchian", "createdAt": "2020-06-24T08:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjQyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712421", "body": "`java.util.Date` is imported by the class, the full qualified name shouldn't be needed.", "bodyText": "java.util.Date is imported by the class, the full qualified name shouldn't be needed.", "bodyHTML": "<p dir=\"auto\"><code>java.util.Date</code> is imported by the class, the full qualified name shouldn't be needed.</p>", "author": "kevinleturc", "createdAt": "2020-06-24T07:56:35Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+                    doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, java.util.Date.from(instant));", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzM1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444713358", "body": "```suggestion\r\n                                      .forEach(distribs::add);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  .forEach(snap -> distribs.add(snap));\n          \n          \n            \n                                                  .forEach(distribs::add);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                      .forEach(<span class=\"x x-first\">snap </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>distribs<span class=\"pl-k x x-first x-last\">.</span>add<span class=\"x x-first x-last\">(snap)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                      .forEach(distribs<span class=\"pl-k x x-first x-last\">::</span>add);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-06-24T07:58:08Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -177,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(snap -> distribs.add(snap));", "originalCommit": "11da8504be3503664902777c1f64f5b770c7fbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4dc4ebf24576d9333773aeb2ca0da23c4343f08b", "url": "https://github.com/nuxeo/nuxeo/commit/4dc4ebf24576d9333773aeb2ca0da23c4343f08b", "message": "NXP-29203: add link to admin view from home", "committedDate": "2020-06-24T08:30:41Z", "type": "commit"}, {"oid": "79157c8b4790c4ea637f7f8c4eb08dd90139490f", "url": "https://github.com/nuxeo/nuxeo/commit/79157c8b4790c4ea637f7f8c4eb08dd90139490f", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages", "committedDate": "2020-06-24T08:32:02Z", "type": "forcePushed"}, {"oid": "b922ef3eade1773ca85724f0bca02138a84342b8", "url": "https://github.com/nuxeo/nuxeo/commit/b922ef3eade1773ca85724f0bca02138a84342b8", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages", "committedDate": "2020-06-24T08:39:32Z", "type": "forcePushed"}, {"oid": "92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "url": "https://github.com/nuxeo/nuxeo/commit/92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages", "committedDate": "2020-06-24T15:39:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTY1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444989651", "body": "double ; at the end", "bodyText": "double ; at the end", "bodyHTML": "<p dir=\"auto\">double ; at the end</p>", "author": "NourNuxeo", "createdAt": "2020-06-24T15:40:55Z", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/pages/DistribAdminPage.java", "diffHunk": "@@ -42,12 +43,18 @@\n  */\n public class DistribAdminPage extends AbstractExplorerPage {\n \n-    public static final String URL = \"/site/distribution/_admin\";\n+    public static final String URL = String.format(\"%s%s/\", ExplorerHomePage.URL, Distribution.VIEW_ADMIN);\n+\n+    /** @since 11.2 */\n+    public static final String UPDATE_URL = String.format(\"%supdate/\", ExplorerHomePage.URL);;", "originalCommit": "147d1f5d077691d7f72c5c4da0542ae9d038272f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da4584cd791d6013c8cbad006b940ebce58dc6a1", "url": "https://github.com/nuxeo/nuxeo/commit/da4584cd791d6013c8cbad006b940ebce58dc6a1", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages", "committedDate": "2020-06-25T06:51:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MzY0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r445443647", "body": "```suggestion\r\n        List<DistributionSnapshotDesc> distribs = RepositoryDistributionSnapshot.readPersistentSnapshots(session)\r\n                                      .stream()\r\n                                      .filter(snap -> !snap.isHidden())\r\n                                      .collect(Collectors.toList());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n          \n          \n            \n                    RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .forEach(distribs::add);\n          \n          \n            \n                    List<DistributionSnapshotDesc> distribs = RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .collect(Collectors.toList());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">DistributionSnapshotDesc</span>&gt;</span> distribs <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">RepositoryDistributionSnapshot</span><span class=\"pl-k\">.</span>readPersistentSnapshots(session)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                      .stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                      .filter(snap <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">!</span>snap<span class=\"pl-k\">.</span>isHidden())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                      .forEach(distribs<span class=\"pl-k\">::</span>add);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">DistributionSnapshotDesc</span>&gt;</span> distribs <span class=\"pl-k\">=</span> <span class=\"pl-smi\">RepositoryDistributionSnapshot</span><span class=\"pl-k\">.</span>readPersistentSnapshots(session)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                      .stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                      .filter(snap <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">!</span>snap<span class=\"pl-k\">.</span>isHidden())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                      .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "NourNuxeo", "createdAt": "2020-06-25T09:55:07Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -174,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(distribs::add);", "originalCommit": "fe69dc6445bab786eac57d91f553906ce771555f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e7551d6c985881f304a49033bf867e90ed10b74", "url": "https://github.com/nuxeo/nuxeo/commit/7e7551d6c985881f304a49033bf867e90ed10b74", "message": "NXP-28995: remove old documentation remnant", "committedDate": "2020-06-25T13:15:02Z", "type": "forcePushed"}, {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "url": "https://github.com/nuxeo/nuxeo/commit/9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "message": "NXP-28995: remove old documentation remnant", "committedDate": "2020-06-25T13:34:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446049613", "body": "why separating the old operation in 2 parts ?\r\nif you want to do so i suggest:\r\n```suggestion\r\n                            .filter(StringUtils::isNotBlank)\r\n                            .map(alias -> {\r\n                                validateKeyOrAlias(alias, reservedKeys);\r\n                                return alias;\r\n                            })\r\n                            .collect(Collectors.toList());\r\n```\r\nwould avoid streaming twice ?\r\nYou could also peek but I know other devs don't recommend it https://rules.sonarsource.com/java/tag/java8/RSPEC-3864\r\nbut here you are only validating, not modifying and you do have a terminal operation so why not:\r\n```suggestion\r\n                            .filter(StringUtils::isNotBlank)\r\n                            .peek(alias -> validateKeyOrAlias(alias, reservedKeys))\r\n                            .collect(Collectors.toList());\r\n```", "bodyText": "why separating the old operation in 2 parts ?\nif you want to do so i suggest:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .map(alias -> {\n          \n          \n            \n                                            validateKeyOrAlias(alias, reservedKeys);\n          \n          \n            \n                                            return alias;\n          \n          \n            \n                                        })\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n      \n    \n    \n  \n\nwould avoid streaming twice ?\nYou could also peek but I know other devs don't recommend it https://rules.sonarsource.com/java/tag/java8/RSPEC-3864\nbut here you are only validating, not modifying and you do have a terminal operation so why not:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .peek(alias -> validateKeyOrAlias(alias, reservedKeys))\n          \n          \n            \n                                        .collect(Collectors.toList());", "bodyHTML": "<p dir=\"auto\">why separating the old operation in 2 parts ?<br>\nif you want to do so i suggest:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .filter(<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">::</span>isNotBlank)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            aliases<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>forEach(alias <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> validateKeyOrAlias(alias, reservedKeys));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            .filter(<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">::</span>isNotBlank)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            .map(alias <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                validateKeyOrAlias(alias, reservedKeys);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">return</span> alias;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            })</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">would avoid streaming twice ?<br>\nYou could also peek but I know other devs don't recommend it <a href=\"https://rules.sonarsource.com/java/tag/java8/RSPEC-3864\" rel=\"nofollow\">https://rules.sonarsource.com/java/tag/java8/RSPEC-3864</a><br>\nbut here you are only validating, not modifying and you do have a terminal operation so why not:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .filter(<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">::</span>isNotBlank)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            .<span class=\"x x-first\">collect(</span><span class=\"pl-smi x\">Collectors</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toList());</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first\">aliases</span><span class=\"pl-k x\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">forEach(alias </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> validateKeyOrAlias(alias, reservedKeys</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            .filter(<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">::</span>isNotBlank)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            .<span class=\"x x-first\">peek(alias </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> validateKeyOrAlias(alias, reservedKeys))</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"x x-first\">                .collect(</span><span class=\"pl-smi x\">Collectors</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toList(</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "NourNuxeo", "createdAt": "2020-06-26T08:40:42Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -495,16 +497,29 @@ public DistributionSnapshot readJson(InputStream in) {\n      *\n      * @since 11.2\n      */\n-    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n-            throws DocumentValidationException {\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n         final DocumentModel doc = getDoc();\n         if (updateProperties == null) {\n             return doc;\n         }\n+        // validations\n         if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n-                  .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n             throw new DocumentValidationException(\"Please fill all required fields.\");\n         }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "originalCommit": "991f3e5c326d17900bef72f427869e8fdbf9ab69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MDYwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446080607", "bodyText": "As discussed:\n\nthe first filtering on blank values is done in a separate step just before to adjust the validation message (and blank aliases are already filtered upstream when processing the text value and splitting it)\nthe validation on aliases could indeed be done in the same stream, let's see if peek usage would be considered as a good practice by others maybe (?)", "author": "atchertchian", "createdAt": "2020-06-26T09:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTY0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446149648", "bodyText": "I've been confirmed that peek usage is considered as a bad practice except for logging when debugging -> resolving as is (and the stream in question should contain 2 or 3 items, usually, so impact of processing it twice should be low)", "author": "atchertchian", "createdAt": "2020-06-26T12:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODk0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446178949", "body": "`StringUtils.isBlank(TITLE_PROPERTY_PATH)` is always false", "bodyText": "StringUtils.isBlank(TITLE_PROPERTY_PATH) is always false", "bodyHTML": "<p dir=\"auto\"><code>StringUtils.isBlank(TITLE_PROPERTY_PATH)</code> is always false</p>", "author": "efge", "createdAt": "2020-06-26T13:20:10Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3OTY0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446179649", "body": "`props.put(PROP_RELEASED, releaseDate == null ? null : new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate))`", "bodyText": "props.put(PROP_RELEASED, releaseDate == null ? null : new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate))", "bodyHTML": "<p dir=\"auto\"><code>props.put(PROP_RELEASED, releaseDate == null ? null : new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate))</code></p>", "author": "efge", "createdAt": "2020-06-26T13:21:29Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MTQxNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446181414", "body": "proprties -> properties", "bodyText": "proprties -> properties", "bodyHTML": "<p dir=\"auto\">proprties -&gt; properties</p>", "author": "efge", "createdAt": "2020-06-26T13:24:28Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Mjc2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446182760", "body": "`aliases.forEach(...)`, no need for `.stream()`", "bodyText": "aliases.forEach(...), no need for .stream()", "bodyHTML": "<p dir=\"auto\"><code>aliases.forEach(...)</code>, no need for <code>.stream()</code></p>", "author": "efge", "createdAt": "2020-06-26T13:26:40Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MzU0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446183549", "body": "For basic loops without filtering/mapping we should prefer `List.of(...).forEach()` to avoid building a stream.\r\nThere are several in this method and the following ones.", "bodyText": "For basic loops without filtering/mapping we should prefer List.of(...).forEach() to avoid building a stream.\nThere are several in this method and the following ones.", "bodyHTML": "<p dir=\"auto\">For basic loops without filtering/mapping we should prefer <code>List.of(...).forEach()</code> to avoid building a stream.<br>\nThere are several in this method and the following ones.</p>", "author": "efge", "createdAt": "2020-06-26T13:28:03Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODk3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446188971", "body": "Why not simply `if (forbidden.contains(keyOrAlias))`?", "bodyText": "Why not simply if (forbidden.contains(keyOrAlias))?", "bodyHTML": "<p dir=\"auto\">Why not simply <code>if (forbidden.contains(keyOrAlias))</code>?</p>", "author": "efge", "createdAt": "2020-06-26T13:37:40Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n+        }\n+        // updates\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .filter(updateProperties::containsKey)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        if (updateProperties.containsKey(PROP_RELEASED)) {\n+            doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, convertDate(updateProperties.get(PROP_RELEASED)));\n+        }\n+        if (aliases != null) {\n+            doc.setPropertyValue(PROP_ALIASES, (Serializable) aliases);\n+        }\n+        if (!StringUtils.isBlank(comment)) {\n+            doc.putContextData(\"comment\", comment);\n+        }\n+        doc.putContextData(ThumbnailConstants.DISABLE_THUMBNAIL_COMPUTATION, true);\n+        DocumentModel updatedDoc = session.saveDocument(doc);\n+        session.save();\n+        return updatedDoc;\n+    }\n+\n+    protected void validateKeyOrAlias(String keyOrAlias, List<String> reservedKeys) throws DocumentValidationException {\n+        var forbidden = new ArrayList<>(List.of(\n+                // reserved for live distrib\n+                SnapshotManager.DISTRIBUTION_ALIAS_CURRENT, SnapshotManager.DISTRIBUTION_ALIAS_ADM,\n+                // added automatically\n+                SnapshotManager.DISTRIBUTION_ALIAS_LATEST_FT, SnapshotManager.DISTRIBUTION_ALIAS_LATEST_LTS));\n+        if (reservedKeys != null) {\n+            forbidden.addAll(reservedKeys);\n+        }\n+        Optional<String> match = forbidden.stream().filter(keyOrAlias::equals).findFirst();\n+        if (match.isPresent()) {\n+            throw new DocumentValidationException(\n+                    String.format(\"Distribution key or alias is reserved: '%s'\", match.get()));\n+        }", "originalCommit": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMTM5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446211391", "bodyText": "Indeed, maybe i contracted some kind of lambda-related fever... \ud83d\udc4d", "author": "atchertchian", "createdAt": "2020-06-26T14:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODk3MQ=="}], "type": "inlineReview"}, {"oid": "22eef97cd2e554e2c265774393bd5d0446ca7005", "url": "https://github.com/nuxeo/nuxeo/commit/22eef97cd2e554e2c265774393bd5d0446ca7005", "message": "NXP-29203: add update views for explorer distributions metadata", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "309e408e6b8990720139e4583072113c8f395720", "url": "https://github.com/nuxeo/nuxeo/commit/309e408e6b8990720139e4583072113c8f395720", "message": "NXP-29203: validate distribution key and aliases", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "e1486cd04cebd926b697690144298d4207c1ad9d", "url": "https://github.com/nuxeo/nuxeo/commit/e1486cd04cebd926b697690144298d4207c1ad9d", "message": "NXP-29203/NXP-24965: review retrieval of persisted explorer distribs", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "f9b361017134a66ae8e1540c9919760754415f62", "url": "https://github.com/nuxeo/nuxeo/commit/f9b361017134a66ae8e1540c9919760754415f62", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "a234abb46b29bb24c984f2636ed3a926a8ce6a30", "url": "https://github.com/nuxeo/nuxeo/commit/a234abb46b29bb24c984f2636ed3a926a8ce6a30", "message": "NXP-28837: update copyright on classes significantly changed so far", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "1d59ca7f712d8596ca75206531a43abeff2fa697", "url": "https://github.com/nuxeo/nuxeo/commit/1d59ca7f712d8596ca75206531a43abeff2fa697", "message": "NXP-28995: remove old documentation remnant", "committedDate": "2020-06-26T14:23:11Z", "type": "commit"}, {"oid": "1d59ca7f712d8596ca75206531a43abeff2fa697", "url": "https://github.com/nuxeo/nuxeo/commit/1d59ca7f712d8596ca75206531a43abeff2fa697", "message": "NXP-28995: remove old documentation remnant", "committedDate": "2020-06-26T14:23:11Z", "type": "forcePushed"}]}