{"pr_number": 3723, "pr_title": "fix-NXP-28408-check-underlying-file-cache-entry-presence", "pr_author": "nuxeojenkins", "pr_createdAt": "2020-02-04T22:49:48Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3723", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NjQwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r375096400", "body": "Already done by the unique caller `getFromCache` so not appropriate here, no?", "bodyText": "Already done by the unique caller getFromCache so not appropriate here, no?", "bodyHTML": "<p dir=\"auto\">Already done by the unique caller <code>getFromCache</code> so not appropriate here, no?</p>", "author": "ataillefer", "createdAt": "2020-02-05T07:34:32Z", "path": "nuxeo-core/nuxeo-core-convert/src/main/java/org/nuxeo/ecm/core/convert/cache/ConversionCacheHolder.java", "diffHunk": "@@ -178,7 +183,12 @@ protected static BlobHolder doGetFromCache(String key) {\n                 // skip all negative values\n                 CACHE_HITS.addAndGet(Long.MIN_VALUE); // back to 0\n             }\n-            return cacheEntry.restore();\n+            BlobHolder restored = cacheEntry.restore();\n+            if (restored.getBlob().getFile().exists()) {\n+                return restored;\n+            } else {\n+                removeFromCache(key);", "originalCommit": "e1a8f094930468560560e6590f76a723500afe04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MTI2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376481268", "bodyText": "Yes first wrote it here then \"moved\" it but forgot to erase the first one !", "author": "NourNuxeo", "createdAt": "2020-02-07T16:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NjQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r375100156", "body": "This test is nice, but it might be better/simpler to have a real unit test of the impacted `ConversionCacheHolder` API:\r\n- In the same Maven module: `nuxeo-core-convert` instead of `nuxeo-platform-convert`, so the test and the code are in the same layer.\r\n- Testing directly `#getFromCache`, as it's static it should be easy.\r\n- Not bothering with the ConversionService.\r\n\r\nYou should be able to add a `BlobHolder` to the cache, verify you can get it, delete its underlying file, get it again and verify the result is null and the cache entry has been removed.", "bodyText": "This test is nice, but it might be better/simpler to have a real unit test of the impacted ConversionCacheHolder API:\n\nIn the same Maven module: nuxeo-core-convert instead of nuxeo-platform-convert, so the test and the code are in the same layer.\nTesting directly #getFromCache, as it's static it should be easy.\nNot bothering with the ConversionService.\n\nYou should be able to add a BlobHolder to the cache, verify you can get it, delete its underlying file, get it again and verify the result is null and the cache entry has been removed.", "bodyHTML": "<p dir=\"auto\">This test is nice, but it might be better/simpler to have a real unit test of the impacted <code>ConversionCacheHolder</code> API:</p>\n<ul dir=\"auto\">\n<li>In the same Maven module: <code>nuxeo-core-convert</code> instead of <code>nuxeo-platform-convert</code>, so the test and the code are in the same layer.</li>\n<li>Testing directly <code>#getFromCache</code>, as it's static it should be easy.</li>\n<li>Not bothering with the ConversionService.</li>\n</ul>\n<p dir=\"auto\">You should be able to add a <code>BlobHolder</code> to the cache, verify you can get it, delete its underlying file, get it again and verify the result is null and the cache entry has been removed.</p>", "author": "ataillefer", "createdAt": "2020-02-05T07:46:20Z", "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.platform.convert.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.convert.cache.CacheKeyGenerator;\n+import org.nuxeo.ecm.core.convert.cache.ConversionCacheHolder;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestCacheConversion extends BaseConverterTest {\n+\n+    @Test\n+    public void shouldRegenNullFileCacheEntries() throws IOException {\n+        String srcMT = \"text/html\";\n+        String fileName = \"hello.html\";\n+        String converterName = cs.getConverterName(srcMT, \"application/pdf\");\n+        assertEquals(\"any2pdf\", converterName);\n+\n+        checkConverterAvailability(converterName);\n+        checkCommandAvailability(\"soffice\");\n+\n+        BlobHolder hg = getBlobFromPath(\"test-docs/\" + fileName, srcMT);\n+        Map<String, Serializable> parameters = new HashMap<>();\n+\n+        // first conversion\n+        BlobHolder result = cs.convert(converterName, hg, parameters);\n+        assertNotNull(result);\n+\n+        // retrieve the temp file\n+        String cacheKey = CacheKeyGenerator.computeKey(converterName, hg, parameters);\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String firstTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+\n+        // replay conversion\n+        cs.convert(converterName, hg, parameters);\n+        blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String secondTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // missing temp file has been regenerated. So it has a different name\n+        assertNotEquals(firstTempFileName, secondTempFileName);\n+    }\n+\n+}", "originalCommit": "e1a8f094930468560560e6590f76a723500afe04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjMwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376556308", "bodyText": "I changed the way of the test then because the identity converter doesn't work like any2pdf: The name of the temp file is always the cache key with a constant prefix so it doesn't change between 2 generations.\nThe workaround i found is to check after getting a null file cache entry, the cache clears the key rather than keeping it.", "author": "NourNuxeo", "createdAt": "2020-02-07T19:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwODY3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376908673", "bodyText": "Still don't understand we you need to go through the conversion service for this unit test...", "author": "ataillefer", "createdAt": "2020-02-10T07:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0OTQ3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376949473", "bodyText": "No more conversionService, all the calls are direct to ConversionCacheHolder static methods", "author": "NourNuxeo", "createdAt": "2020-02-10T09:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}], "type": "inlineReview"}, {"oid": "10a83a29a0b2d27d06232a22ff20d79622076c08", "url": "https://github.com/nuxeo/nuxeo/commit/10a83a29a0b2d27d06232a22ff20d79622076c08", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-07T19:03:38Z", "type": "forcePushed"}, {"oid": "cbec6bf65b0ad532e065278b34bd029c9adc60e0", "url": "https://github.com/nuxeo/nuxeo/commit/cbec6bf65b0ad532e065278b34bd029c9adc60e0", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-07T19:05:04Z", "type": "forcePushed"}, {"oid": "01e09b584c3aa36cd02d69b38f3d728992293e43", "url": "https://github.com/nuxeo/nuxeo/commit/01e09b584c3aa36cd02d69b38f3d728992293e43", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-07T19:10:02Z", "type": "forcePushed"}, {"oid": "fdc9a87070cbdf314e7a1fe1937c95338de73f8d", "url": "https://github.com/nuxeo/nuxeo/commit/fdc9a87070cbdf314e7a1fe1937c95338de73f8d", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-07T19:11:17Z", "type": "forcePushed"}, {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395", "url": "https://github.com/nuxeo/nuxeo/commit/f5f62f174eb212ff60d045014f4dcf1c38668395", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-10T09:33:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NjUxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377456510", "body": "I know these 2 lines are in the existing test, but I wouldn't keep them as they're asserting on a static test resource from the repository.", "bodyText": "I know these 2 lines are in the existing test, but I wouldn't keep them as they're asserting on a static test resource from the repository.", "bodyHTML": "<p dir=\"auto\">I know these 2 lines are in the existing test, but I wouldn't keep them as they're asserting on a static test resource from the repository.</p>", "author": "ataillefer", "createdAt": "2020-02-11T06:01:17Z", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);", "originalCommit": "f5f62f174eb212ff60d045014f4dcf1c38668395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MTk0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377461945", "bodyText": "Yes taken off !", "author": "NourNuxeo", "createdAt": "2020-02-11T06:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1ODYwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377458605", "body": "You can probably simplify to the one-parameter constructor, the other ones shouldn't be needed.", "bodyText": "You can probably simplify to the one-parameter constructor, the other ones shouldn't be needed.", "bodyHTML": "<p dir=\"auto\">You can probably simplify to the one-parameter constructor, the other ones shouldn't be needed.</p>", "author": "ataillefer", "createdAt": "2020-02-11T06:12:45Z", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");", "originalCommit": "f5f62f174eb212ff60d045014f4dcf1c38668395", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDAzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377460030", "body": "```suggestion\r\n        // retrieve the cache entry\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // retrieve the temp file\n          \n          \n            \n                    // retrieve the cache entry", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> retrieve the <span class=\"x x-first x-last\">temp file</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> retrieve the <span class=\"x x-first x-last\">cache entry</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ataillefer", "createdAt": "2020-02-11T06:20:15Z", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");\n+        BlobHolder bh = new SimpleCachableBlobHolder(blob);\n+        String cacheKey = CacheKeyGenerator.computeKey(\"identity\", bh, null);\n+        ConversionCacheHolder.addToCache(cacheKey, bh);\n+\n+        // check new cache entry was created\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+\n+        // retrieve the temp file", "originalCommit": "f5f62f174eb212ff60d045014f4dcf1c38668395", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDQ2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377460466", "body": "```suggestion\r\n        // requesting null file cache entry returns null after clearing the outdated key\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // requesting null file cache entries returns null after clearing the outdated key\n          \n          \n            \n                    // requesting null file cache entry returns null after clearing the outdated key", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> requesting null file cache <span class=\"x x-first x-last\">entries</span> returns null after clearing the outdated key</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> requesting null file cache <span class=\"x x-first x-last\">entry</span> returns null after clearing the outdated key</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ataillefer", "createdAt": "2020-02-11T06:22:42Z", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");\n+        BlobHolder bh = new SimpleCachableBlobHolder(blob);\n+        String cacheKey = CacheKeyGenerator.computeKey(\"identity\", bh, null);\n+        ConversionCacheHolder.addToCache(cacheKey, bh);\n+\n+        // check new cache entry was created\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+\n+        // retrieve the temp file\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+        // check the cache is outdated\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+        assertTrue(ConversionCacheHolder.getCacheKeys().contains(cacheKey));\n+\n+        // requesting null file cache entries returns null after clearing the outdated key", "originalCommit": "f5f62f174eb212ff60d045014f4dcf1c38668395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjMyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377462323", "bodyText": "added also an \"A\" then\nrequested A null...", "author": "NourNuxeo", "createdAt": "2020-02-11T06:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDQ2Ng=="}], "type": "inlineReview"}, {"oid": "cfef8581b23ba8dcbd0c1e82d4d0eafb6e2093a6", "url": "https://github.com/nuxeo/nuxeo/commit/cfef8581b23ba8dcbd0c1e82d4d0eafb6e2093a6", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-11T06:26:49Z", "type": "forcePushed"}, {"oid": "f6c8aebdc98ae98f5c1f1b97a6c8d71f64d19308", "url": "https://github.com/nuxeo/nuxeo/commit/f6c8aebdc98ae98f5c1f1b97a6c8d71f64d19308", "message": "NXP-28408: check cached temp file exist", "committedDate": "2020-02-11T06:31:39Z", "type": "forcePushed"}, {"oid": "54249b75b2c193d5f3fb309259a9bc6c95e141d8", "url": "https://github.com/nuxeo/nuxeo/commit/54249b75b2c193d5f3fb309259a9bc6c95e141d8", "message": "NXP-28408: fix check cached temp file exist", "committedDate": "2020-02-11T13:04:31Z", "type": "commit"}, {"oid": "54249b75b2c193d5f3fb309259a9bc6c95e141d8", "url": "https://github.com/nuxeo/nuxeo/commit/54249b75b2c193d5f3fb309259a9bc6c95e141d8", "message": "NXP-28408: fix check cached temp file exist", "committedDate": "2020-02-11T13:04:31Z", "type": "forcePushed"}]}