{"pr_number": 4439, "pr_title": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will \u2026", "pr_author": "charlesboidot", "pr_createdAt": "2020-11-04T16:56:19Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4439", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0MDUyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518040522", "body": "`newVersionFolder `never used, calling `checkIn` without reading the result is enough for this test", "bodyText": "newVersionFolder never used, calling checkIn without reading the result is enough for this test", "bodyHTML": "<p dir=\"auto\"><code>newVersionFolder </code>never used, calling <code>checkIn</code> without reading the result is enough for this test</p>", "author": "tmartins", "createdAt": "2020-11-05T13:14:25Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class})\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 11;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER,\n+                \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        //Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES,collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        DocumentModel newVersionFolder = session.getDocument(session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\"));", "originalCommit": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NTQyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518055421", "body": "remove this line", "bodyText": "remove this line", "bodyHTML": "<p dir=\"auto\">remove this line</p>", "author": "tmartins", "createdAt": "2020-11-05T13:37:15Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class})\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+", "originalCommit": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836", "url": "https://github.com/nuxeo/nuxeo/commit/85f65a36f6c00077d41d983bba8a7107afa2c836", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T14:08:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5OTk2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518099966", "body": "Can you add protected keyword to fields not having visibility?", "bodyText": "Can you add protected keyword to fields not having visibility?", "bodyHTML": "<p dir=\"auto\">Can you add protected keyword to fields not having visibility?</p>", "author": "kevinleturc", "createdAt": "2020-11-05T14:38:40Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;", "originalCommit": "85f65a36f6c00077d41d983bba8a7107afa2c836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMDI2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518100268", "body": "Static fields should be first, everything should be protected.", "bodyText": "Static fields should be first, everything should be protected.", "bodyHTML": "<p dir=\"auto\">Static fields should be first, everything should be protected.</p>", "author": "kevinleturc", "createdAt": "2020-11-05T14:39:04Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;", "originalCommit": "85f65a36f6c00077d41d983bba8a7107afa2c836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMTY5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518101697", "body": "You should use the equals method, `=` in java checks references.\r\n```suggestion\r\n            if (child.getId().equals(collectionInFolder.getId())) {\r\n```", "bodyText": "You should use the equals method, = in java checks references.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (child.getId() != collectionInFolder.getId()) {\n          \n          \n            \n                        if (child.getId().equals(collectionInFolder.getId())) {", "bodyHTML": "<p dir=\"auto\">You should use the equals method, <code>=</code> in java checks references.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (child<span class=\"pl-k\">.</span>getId()<span class=\"x x-first\"> </span><span class=\"pl-k x\">!=</span><span class=\"x x-last\"> </span>collectionInFolder<span class=\"pl-k\">.</span>getId()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (child<span class=\"pl-k\">.</span>getId()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">equals(</span>collectionInFolder<span class=\"pl-k\">.</span>getId(<span class=\"x x-first x-last\">)</span>)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-11-05T14:40:55Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n+        int size = 0;\n+        while (it.hasNext()) {\n+            DocumentModel child = it.next();\n+            if (child.getId() != collectionInFolder.getId()) {", "originalCommit": "85f65a36f6c00077d41d983bba8a7107afa2c836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "efc3c12cec67aeded0c807594fcdd3316086e6be", "url": "https://github.com/nuxeo/nuxeo/commit/efc3c12cec67aeded0c807594fcdd3316086e6be", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T14:49:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0NDcxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518144711", "body": "Could it be simplified to:\r\n```suggestion\r\n        List<DocumentModel>children = session.getChildren(folder.getRef());\r\n        int size = 0;\r\n        for (DocumentModel child : children) {\r\n            if (!child.getId().equals(collectionInFolder.getId())) {\r\n                    assertTrue(collectionManager.isCollected(child));\r\n                    size++;\r\n            }\r\n        }\r\n```\r\n?", "bodyText": "Could it be simplified to:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n          \n          \n            \n                    int size = 0;\n          \n          \n            \n                    while (it.hasNext()) {\n          \n          \n            \n                        DocumentModel child = it.next();\n          \n          \n            \n                        if (child.getId().equals(collectionInFolder.getId())) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        assertTrue(collectionManager.isCollected(child));\n          \n          \n            \n                        size++;\n          \n          \n            \n                    }\n          \n          \n            \n                    List<DocumentModel>children = session.getChildren(folder.getRef());\n          \n          \n            \n                    int size = 0;\n          \n          \n            \n                    for (DocumentModel child : children) {\n          \n          \n            \n                        if (!child.getId().equals(collectionInFolder.getId())) {\n          \n          \n            \n                                assertTrue(collectionManager.isCollected(child));\n          \n          \n            \n                                size++;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\n?", "bodyHTML": "<p dir=\"auto\">Could it be simplified to:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"99\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">DocumentModelIterator</span> it <span class=\"pl-k\">=</span> session<span class=\"pl-k\">.</span>getChildrenIterator(folder<span class=\"pl-k\">.</span>getRef());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">int</span> size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"101\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">while</span> (it<span class=\"pl-k\">.</span>hasNext()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"102\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">DocumentModel</span> child <span class=\"pl-k\">=</span> it<span class=\"pl-k\">.</span>next();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"103\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (child<span class=\"pl-k\">.</span>getId()<span class=\"pl-k\">.</span>equals(collectionInFolder<span class=\"pl-k\">.</span>getId())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">continue</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            assertTrue(collectionManager<span class=\"pl-k\">.</span>isCollected(child));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"107\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            size<span class=\"pl-k\">++</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"99\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">DocumentModel</span>&gt;</span>children <span class=\"pl-k\">=</span> session<span class=\"pl-k\">.</span>getChildren(folder<span class=\"pl-k\">.</span>getRef());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">int</span> size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"101\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">DocumentModel</span> child <span class=\"pl-k\">:</span> children) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"102\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>child<span class=\"pl-k\">.</span>getId()<span class=\"pl-k\">.</span>equals(collectionInFolder<span class=\"pl-k\">.</span>getId())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"103\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    assertTrue(collectionManager<span class=\"pl-k\">.</span>isCollected(child));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    size<span class=\"pl-k\">++</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">?</p>", "author": "troger", "createdAt": "2020-11-05T15:35:59Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n+        int size = 0;\n+        while (it.hasNext()) {\n+            DocumentModel child = it.next();\n+            if (child.getId().equals(collectionInFolder.getId())) {\n+                continue;\n+            }\n+            assertTrue(collectionManager.isCollected(child));\n+            size++;\n+        }", "originalCommit": "efc3c12cec67aeded0c807594fcdd3316086e6be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b89a215ebec82c188bf45f993922f8bb70bfcc33", "url": "https://github.com/nuxeo/nuxeo/commit/b89a215ebec82c188bf45f993922f8bb70bfcc33", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T15:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzYwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518153608", "body": "Could you format the code?", "bodyText": "Could you format the code?", "bodyHTML": "<p dir=\"auto\">Could you format the code?</p>", "author": "kevinleturc", "createdAt": "2020-11-05T15:46:01Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        List<DocumentModel>children = session.getChildren(folder.getRef());\n+        int size = 0;\n+        for (DocumentModel child : children) {\n+            if (!child.getId().equals(collectionInFolder.getId())) {\n+                    assertTrue(collectionManager.isCollected(child));\n+                    size++;\n+            }\n+        }\n+        assertEquals(NB_TEST_FILES, size);", "originalCommit": "b89a215ebec82c188bf45f993922f8bb70bfcc33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NTU1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518155551", "bodyText": "Yes of course sorry", "author": "charlesboidot", "createdAt": "2020-11-05T15:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzYwOA=="}], "type": "inlineReview"}, {"oid": "c6c57e3ac2db29bd84d63d0c86804051f551f10b", "url": "https://github.com/nuxeo/nuxeo/commit/c6c57e3ac2db29bd84d63d0c86804051f551f10b", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T15:47:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1ODc4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518158782", "body": "Missed format, as it is a new class you can run the formatter on the full file.", "bodyText": "Missed format, as it is a new class you can run the formatter on the full file.", "bodyHTML": "<p dir=\"auto\">Missed format, as it is a new class you can run the formatter on the full file.</p>", "author": "kevinleturc", "createdAt": "2020-11-05T15:52:49Z", "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        List<DocumentModel>children = session.getChildren(folder.getRef());", "originalCommit": "c6c57e3ac2db29bd84d63d0c86804051f551f10b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "url": "https://github.com/nuxeo/nuxeo/commit/40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T15:54:42Z", "type": "forcePushed"}, {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3", "url": "https://github.com/nuxeo/nuxeo/commit/053eff98f5b65b9516443e955bab8e12703fa7e3", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T16:53:48Z", "type": "commit"}, {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3", "url": "https://github.com/nuxeo/nuxeo/commit/053eff98f5b65b9516443e955bab8e12703fa7e3", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents", "committedDate": "2020-11-05T16:53:48Z", "type": "forcePushed"}]}