{"pr_number": 4540, "pr_title": "10.10-HF/fix-NXP-25485-take-into-account-local-configuration-subtypes", "pr_author": "nuxeojenkins", "pr_createdAt": "2020-12-11T14:40:59Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4540", "timeline": [{"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "url": "https://github.com/nuxeo/nuxeo/commit/af6bd2624af6feb56528cf83e4631a5da2402ae4", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-14T09:35:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNzAxMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544907011", "body": "```suggestion\r\n * @since 11.5\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.4\n          \n          \n            \n             * @since 11.5", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@since</span> <span class=\"pl-c1\">11.<span class=\"x x-first x-last\">4</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@since</span> <span class=\"pl-c1\">11.<span class=\"x x-first x-last\">5</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "troger", "createdAt": "2020-12-17T08:41:25Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyMTkwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544921901", "body": "What about extracting this logic in a dedicated `protected` method? So that people can easily extend this enricher without having to copy/paste the whole code.", "bodyText": "What about extracting this logic in a dedicated protected method? So that people can easily extend this enricher without having to copy/paste the whole code.", "bodyHTML": "<p dir=\"auto\">What about extracting this logic in a dedicated <code>protected</code> method? So that people can easily extend this enricher without having to copy/paste the whole code.</p>", "author": "troger", "createdAt": "2020-12-17T09:04:20Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        Collection<String> subtypes = new HashSet<String>();\n+\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+            if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+                String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+                String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+\n+                List<String> allowedTypes = new ArrayList<>();\n+                List<String> deniedTypes = new ArrayList<>();\n+                if (allowedTypesProperty != null) {\n+                    allowedTypes = Arrays.asList(allowedTypesProperty);\n+                }\n+                if (deniedTypesProperty != null) {\n+                    deniedTypes = Arrays.asList(deniedTypesProperty);\n+                }\n+                if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                    for (String subtype : defaultSubtypes) {\n+                        if (!deniedTypes.contains(subtype)\n+                                && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                            subtypes.add(subtype);\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            subtypes.addAll(defaultSubtypes);\n+        }", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDM3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930371", "body": "Remove blank line.", "bodyText": "Remove blank line.", "bodyHTML": "<p dir=\"auto\">Remove blank line.</p>", "author": "troger", "createdAt": "2020-12-17T09:17:22Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -59,10 +67,15 @@ public void setup() {\n \n     }\n \n+    /**\n+     * @since 11.5\n+     */\n+", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDcyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930724", "body": "Remove blank line.", "bodyText": "Remove blank line.", "bodyHTML": "<p dir=\"auto\">Remove blank line.</p>", "author": "troger", "createdAt": "2020-12-17T09:17:56Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {\n+", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMjMyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544932323", "body": "Worth adding more tests to validate the whole enricher:\r\n- denyAllTypes\r\n- allowedTypes\r\n- deniedTypes\r\n- mix of properties", "bodyText": "Worth adding more tests to validate the whole enricher:\n\ndenyAllTypes\nallowedTypes\ndeniedTypes\nmix of properties", "bodyHTML": "<p dir=\"auto\">Worth adding more tests to validate the whole enricher:</p>\n<ul dir=\"auto\">\n<li>denyAllTypes</li>\n<li>allowedTypes</li>\n<li>deniedTypes</li>\n<li>mix of properties</li>\n</ul>", "author": "troger", "createdAt": "2020-12-17T09:20:19Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {", "originalCommit": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "url": "https://github.com/nuxeo/nuxeo/commit/82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-17T10:32:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMTUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545221519", "body": "You can use `Set` directly instead of Collection, furthermore, there's no need to declare the type in the HashSet implementation, this line would be:\r\n```suggestion\r\n        Set<String> subtypes = new HashSet<>();\r\n```", "bodyText": "You can use Set directly instead of Collection, furthermore, there's no need to declare the type in the HashSet implementation, this line would be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<String> subtypes = new HashSet<String>();\n          \n          \n            \n                    Set<String> subtypes = new HashSet<>();", "bodyHTML": "<p dir=\"auto\">You can use <code>Set</code> directly instead of Collection, furthermore, there's no need to declare the type in the HashSet implementation, this line would be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\"><span class=\"x x-first x-last\">Collection</span>&lt;<span class=\"pl-smi\">String</span>&gt;</span> subtypes <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;<span class=\"pl-smi x x-first x-last\">String</span>&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\"><span class=\"x x-first x-last\">Set</span>&lt;<span class=\"pl-smi\">String</span>&gt;</span> subtypes <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kevinleturc", "createdAt": "2020-12-17T16:23:45Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyOTk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545229961", "body": "You could use a ternary expression such as below:\r\n```java\r\nList<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\r\n```", "bodyText": "You could use a ternary expression such as below:\nList<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);", "bodyHTML": "<p dir=\"auto\">You could use a ternary expression such as below:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"List&lt;String&gt; allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\"><pre><span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> allowedTypes <span class=\"pl-k\">=</span> allowedTypesProperty <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptyList() <span class=\"pl-k\">:</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(allowedTypesProperty);</pre></div>", "author": "kevinleturc", "createdAt": "2020-12-17T16:35:00Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjI2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236266", "body": "`allowedTypes.isEmpty()` in the second if is always false, you can remove it.\r\n\r\nWe could use the Stream API there, with something such as below:\r\n```java\r\nimport static java.util.stream.Collectors.toSet;\r\n\r\nreturn defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(allowedTypes::contains).collect(toSet());\r\n```\r\n\r\nThe proposed return will make the `subtypes` useless, you can replace the last return with a `Collections.emptySet()`.", "bodyText": "allowedTypes.isEmpty() in the second if is always false, you can remove it.\nWe could use the Stream API there, with something such as below:\nimport static java.util.stream.Collectors.toSet;\n\nreturn defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(allowedTypes::contains).collect(toSet());\nThe proposed return will make the subtypes useless, you can replace the last return with a Collections.emptySet().", "bodyHTML": "<p dir=\"auto\"><code>allowedTypes.isEmpty()</code> in the second if is always false, you can remove it.</p>\n<p dir=\"auto\">We could use the Stream API there, with something such as below:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import static java.util.stream.Collectors.toSet;\n\nreturn defaultSubtypes.stream().filter(s -&gt; !deniedTypes.contains(s)).filter(allowedTypes::contains).collect(toSet());\n\"><pre><span class=\"pl-k\">import static</span> <span class=\"pl-smi\">java.util.stream.Collectors.toSet</span>;\n\n<span class=\"pl-k\">return</span> defaultSubtypes<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>filter(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">!</span>deniedTypes<span class=\"pl-k\">.</span>contains(s))<span class=\"pl-k\">.</span>filter(allowedTypes<span class=\"pl-k\">::</span>contains)<span class=\"pl-k\">.</span>collect(toSet());</pre></div>\n<p dir=\"auto\">The proposed return will make the <code>subtypes</code> useless, you can replace the last return with a <code>Collections.emptySet()</code>.</p>", "author": "kevinleturc", "createdAt": "2020-12-17T16:43:10Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }\n+            if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                for (String subtype : defaultSubtypes) {\n+                    if (!deniedTypes.contains(subtype) && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                        subtypes.add(subtype);\n+                    }\n+                }\n+            }", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1NzIxNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545757215", "bodyText": "allowedTypes.isEmpty() could be true if we only put deniedTypes so this case has to be considered. In the case where allowedTypes is empty we need to consider all the subtypes defined by the document type.", "author": "charlesboidot", "createdAt": "2020-12-18T10:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjY5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236691", "body": "Could you put fields before the constructor?", "bodyText": "Could you put fields before the constructor?", "bodyHTML": "<p dir=\"auto\">Could you put fields before the constructor?</p>", "author": "kevinleturc", "createdAt": "2020-12-17T16:43:45Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2016 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Gabriel Barata <gbarata@nuxeo.com>\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+/**\n+ * @since 8.4\n+ */\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.core.io:OSGI-INF/doc-type-contrib.xml\")\n+public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<DocumentModelJsonWriter, DocumentModel> {\n+\n+    public SubtypesJsonEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;", "originalCommit": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "url": "https://github.com/nuxeo/nuxeo/commit/37603cc31c53f87a078d0130f2d4f10e2c8f8090", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T10:48:50Z", "type": "forcePushed"}, {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "url": "https://github.com/nuxeo/nuxeo/commit/0611dd0928203d419f00b0172b3ce59f9b4f7a78", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T10:56:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMzc0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545813745", "body": "Could you format/indent the class?", "bodyText": "Could you format/indent the class?", "bodyHTML": "<p dir=\"auto\">Could you format/indent the class?</p>", "author": "kevinleturc", "createdAt": "2020-12-18T12:56:23Z", "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\n+            List<String> deniedTypes = deniedTypesProperty == null ? Collections.emptyList() : Arrays.asList(deniedTypesProperty);\n+            return defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(s -> allowedTypes.contains(s) || allowedTypes.isEmpty()).collect(toSet());\n+        }\n+        return Collections.emptySet();\n+    }", "originalCommit": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T12:58:09Z", "type": "commit"}, {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "message": "NXP-25485: take into account the local configuration defined in JSF UI", "committedDate": "2020-12-18T12:58:09Z", "type": "forcePushed"}]}