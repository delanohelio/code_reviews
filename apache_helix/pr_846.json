{"pr_number": 846, "pr_title": "Make ZKHelixAdmin and ZKHelixManager Realm-aware", "pr_author": "huizhilu", "pr_createdAt": "2020-03-03T01:40:03Z", "pr_url": "https://github.com/apache/helix/pull/846", "timeline": [{"oid": "feee54df993660b704835897d4a5c819290ab269", "url": "https://github.com/apache/helix/commit/feee54df993660b704835897d4a5c819290ab269", "message": "Make ZKHelixAdmin realm-aware", "committedDate": "2020-03-03T07:22:59Z", "type": "forcePushed"}, {"oid": "d747bc31d5188a28f25630f20a80bd0b7cdc501d", "url": "https://github.com/apache/helix/commit/d747bc31d5188a28f25630f20a80bd0b7cdc501d", "message": "Make ZKHelixAdmin realm-aware", "committedDate": "2020-03-03T17:51:26Z", "type": "forcePushed"}, {"oid": "e8d0c033d80ebcbfa14a4fc4b1f821e90bc1d027", "url": "https://github.com/apache/helix/commit/e8d0c033d80ebcbfa14a4fc4b1f821e90bc1d027", "message": "Make ZKHelixAdmin realm-aware", "committedDate": "2020-03-03T17:53:49Z", "type": "forcePushed"}, {"oid": "75ce6e168c44a6cea1cc90e153a80541c8088a27", "url": "https://github.com/apache/helix/commit/75ce6e168c44a6cea1cc90e153a80541c8088a27", "message": "Make ZKHelixAdmin realm-aware", "committedDate": "2020-03-03T17:55:54Z", "type": "forcePushed"}, {"oid": "08e9b7d61bc0e5856b720db82d9e65fb6d87daf9", "url": "https://github.com/apache/helix/commit/08e9b7d61bc0e5856b720db82d9e65fb6d87daf9", "message": "Make ZKHelixAdmin realm-aware", "committedDate": "2020-03-03T18:17:30Z", "type": "forcePushed"}, {"oid": "fd0282158b519a7514559d8bafd8cfc2598ba490", "url": "https://github.com/apache/helix/commit/fd0282158b519a7514559d8bafd8cfc2598ba490", "message": "Make ZKHelixAdmin and ZKHelixManager realm-aware", "committedDate": "2020-03-04T04:10:02Z", "type": "forcePushed"}, {"oid": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "url": "https://github.com/apache/helix/commit/039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "message": "Make ZKHelixAdmin and ZKHelixManager realm-aware", "committedDate": "2020-03-04T06:13:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MzU0Mw==", "url": "https://github.com/apache/helix/pull/846#discussion_r387493543", "body": "The new ConfigAccessor should be created with a Builder. I'm going to assume that this is just a placeholder? :)", "bodyText": "The new ConfigAccessor should be created with a Builder. I'm going to assume that this is just a placeholder? :)", "bodyHTML": "<p dir=\"auto\">The new ConfigAccessor should be created with a Builder. I'm going to assume that this is just a placeholder? :)</p>", "author": "narendly", "createdAt": "2020-03-04T07:43:21Z", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -118,6 +118,11 @@ public ConfigAccessor(HelixZkClient zkClient) {\n     _usesExternalZkClient = true;\n   }\n \n+  public ConfigAccessor(RealmAwareZkClient zkClient) {\n+    _zkClient = zkClient;\n+    _usesExternalZkClient = true;\n+  }", "originalCommit": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5Njc0Ng==", "url": "https://github.com/apache/helix/pull/846#discussion_r387496746", "bodyText": "On a second thought, I forgot to add this constructor. I'll go ahead and work on that as well.", "author": "narendly", "createdAt": "2020-03-04T07:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MzU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NDgzOA==", "url": "https://github.com/apache/helix/pull/846#discussion_r387494838", "body": "We should use a Builder pattern for HelixAdmin here. This is because we need to allow users to provide connection and client configs. \r\n\r\nFor example, users should be able to set operationRetry time. If we just provide a constructor that doesn't take in any parameters, it won't be very flexible.\r\n\r\nhttps://github.com/apache/helix/pull/819 for a reference.", "bodyText": "We should use a Builder pattern for HelixAdmin here. This is because we need to allow users to provide connection and client configs.\nFor example, users should be able to set operationRetry time. If we just provide a constructor that doesn't take in any parameters, it won't be very flexible.\n#819 for a reference.", "bodyHTML": "<p dir=\"auto\">We should use a Builder pattern for HelixAdmin here. This is because we need to allow users to provide connection and client configs.</p>\n<p dir=\"auto\">For example, users should be able to set operationRetry time. If we just provide a constructor that doesn't take in any parameters, it won't be very flexible.</p>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"571737764\" data-permission-text=\"Title is private\" data-url=\"https://github.com/apache/helix/issues/819\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/apache/helix/pull/819/hovercard\" href=\"https://github.com/apache/helix/pull/819\">#819</a> for a reference.</p>", "author": "narendly", "createdAt": "2020-03-04T07:46:58Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -89,33 +91,55 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   private final ConfigAccessor _configAccessor;\n   // true if ZKHelixAdmin was instantiated with a HelixZkClient, false otherwise\n   // This is used for close() to determine how ZKHelixAdmin should close the underlying ZkClient\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n \n-  @Deprecated\n-  public ZKHelixAdmin(HelixZkClient zkClient) {\n+  public ZKHelixAdmin() {\n+    _zkClient = new FederatedZkClient();\n+    _configAccessor = new ConfigAccessor(_zkClient);\n+    _usesExternalZkClient = false;", "originalCommit": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjQ5OQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r387496499", "body": "I just realized I forgot to add this logic for ConfigAccessor. Let me open another PR :)", "bodyText": "I just realized I forgot to add this logic for ConfigAccessor. Let me open another PR :)", "bodyHTML": "<p dir=\"auto\">I just realized I forgot to add this logic for ConfigAccessor. Let me open another PR :)</p>", "author": "narendly", "createdAt": "2020-03-04T07:51:25Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -89,33 +91,55 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   private final ConfigAccessor _configAccessor;\n   // true if ZKHelixAdmin was instantiated with a HelixZkClient, false otherwise\n   // This is used for close() to determine how ZKHelixAdmin should close the underlying ZkClient\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n \n-  @Deprecated\n-  public ZKHelixAdmin(HelixZkClient zkClient) {\n+  public ZKHelixAdmin() {\n+    _zkClient = new FederatedZkClient();\n+    _configAccessor = new ConfigAccessor(_zkClient);\n+    _usesExternalZkClient = false;\n+  }\n+\n+  public ZKHelixAdmin(RealmAwareZkClient zkClient) {\n     _zkClient = zkClient;\n     _configAccessor = new ConfigAccessor(zkClient);\n     _usesExternalZkClient = true;\n   }\n \n   public ZKHelixAdmin(String zkAddress) {\n     int timeOutInSec = Integer.parseInt(System.getProperty(CONNECTION_TIMEOUT, \"30\"));\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(new ZNRecordSerializer())\n-        .setConnectInitTimeout(timeOutInSec * 1000);\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    _zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =", "originalCommit": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5ODMyNA==", "url": "https://github.com/apache/helix/pull/846#discussion_r387498324", "body": "Do you think we could refactor these two methods to reduce duplicate logic? You could take in the factory in the parameter and switch back and forth between dedicated and shared that way.", "bodyText": "Do you think we could refactor these two methods to reduce duplicate logic? You could take in the factory in the parameter and switch back and forth between dedicated and shared that way.", "bodyHTML": "<p dir=\"auto\">Do you think we could refactor these two methods to reduce duplicate logic? You could take in the factory in the parameter and switch back and forth between dedicated and shared that way.</p>", "author": "narendly", "createdAt": "2020-03-04T07:56:18Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1264,87 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    RealmAwareZkClient newClient;\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      newClient = buildSharedZkClient(connectionConfig, clientConfig);\n+    } else {\n+      newClient = buildDedicatedZkClient(connectionConfig, clientConfig);\n+    }\n+\n+    return newClient;\n+  }\n+\n+  private RealmAwareZkClient buildSharedZkClient(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    RealmAwareZkClient zkClient;\n+    // TODO: change exception type\n+    try {\n+      zkClient =\n+          SharedZkClientFactory.getInstance().buildZkClient(connectionConfig, clientConfig);\n+    } catch (IllegalArgumentException e) {\n+      LOG.warn(\"Not able to build realm-aware shared ZK client for sharding key: {}, caused by: {}\"\n+              + \" Fallback to HelixZkClient.\", connectionConfig.getZkRealmShardingKey(),\n+          e.getMessage());\n+\n+      // Fallback to HelixZkClient\n+      HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+          new HelixZkClient.ZkConnectionConfig(_zkAddress);\n+      helixZkConnectionConfig.setSessionTimeout(connectionConfig.getSessionTimeout());\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(helixZkConnectionConfig, clientConfig.createHelixZkClientConfig());\n+    }\n+\n+    return zkClient;\n+  }\n+\n+  private RealmAwareZkClient buildDedicatedZkClient(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    RealmAwareZkClient zkClient;\n+    // TODO: change exception type\n+    try {\n+      zkClient =\n+          DedicatedZkClientFactory.getInstance().buildZkClient(connectionConfig, clientConfig);\n+    } catch (IllegalArgumentException e) {\n+      LOG.warn(\"Not able to build realm-aware Dedicated ZK client for sharding key: {}, caused by: {}\"\n+              + \" Fallback to HelixZkClient.\", connectionConfig.getZkRealmShardingKey(),\n+          e.getMessage());\n+\n+      // Fallback to HelixZkClient\n+      HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+          new HelixZkClient.ZkConnectionConfig(_zkAddress);\n+      helixZkConnectionConfig.setSessionTimeout(connectionConfig.getSessionTimeout());\n+      zkClient = DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(helixZkConnectionConfig, clientConfig.createHelixZkClientConfig());\n+    }", "originalCommit": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMDM1Mg==", "url": "https://github.com/apache/helix/pull/846#discussion_r388500352", "bodyText": "I tried. We have 2 options:\n\n\nAs you said, we can pass in the factory as a parameter. But we have to make HelixZkClientFactory public. Shall we do this?\npublic abstract class HelixZkClientFactory implements RealmAwareZkClientFactory\n\n\nIt is the implemented as I do. KeepHelixZkClientFactory as it is. I prefer this considering that we don't want HelixZkClientFactory public.", "author": "huizhilu", "createdAt": "2020-03-05T19:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5ODMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5OTQ2Nw==", "url": "https://github.com/apache/helix/pull/846#discussion_r387499467", "body": "FederatedZkClient should take in connectionConfig and clientConfig. I'll just assume this is a placeholder.", "bodyText": "FederatedZkClient should take in connectionConfig and clientConfig. I'll just assume this is a placeholder.", "bodyHTML": "<p dir=\"auto\">FederatedZkClient should take in connectionConfig and clientConfig. I'll just assume this is a placeholder.</p>", "author": "narendly", "createdAt": "2020-03-04T07:59:14Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -79,7 +83,31 @@\n   private volatile boolean _isClosed;\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n+  public FederatedZkClient() {\n+    this(new RealmAwareZkClient.RealmAwareZkClientConfig()\n+        .setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    try {", "originalCommit": "039f735ce85ffc5f3e0af10a3a9109547f7cbfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29386bf1c066a36b47fa50ad75cf8e31f907e9a2", "url": "https://github.com/apache/helix/commit/29386bf1c066a36b47fa50ad75cf8e31f907e9a2", "message": "Make ZKHelixAdmin and ZKHelixManager Realm-aware", "committedDate": "2020-03-04T22:44:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMTE5MQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388031191", "body": "Is it possible to combine `buildSharedZkClient` and `buildDedicatedZkClient` to reduce duplication? Both instances of the factories extend `HelixZkClientFactory`.", "bodyText": "Is it possible to combine buildSharedZkClient and buildDedicatedZkClient to reduce duplication? Both instances of the factories extend HelixZkClientFactory.", "bodyHTML": "<p dir=\"auto\">Is it possible to combine <code>buildSharedZkClient</code> and <code>buildDedicatedZkClient</code> to reduce duplication? Both instances of the factories extend <code>HelixZkClientFactory</code>.</p>", "author": "NealSun96", "createdAt": "2020-03-05T01:27:16Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,85 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    RealmAwareZkClient newClient;\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      newClient = buildSharedZkClient(connectionConfig, clientConfig);\n+    } else {\n+      newClient = buildDedicatedZkClient(connectionConfig, clientConfig);\n+    }\n+\n+    return newClient;\n+  }\n+\n+  private RealmAwareZkClient buildSharedZkClient(", "originalCommit": "29386bf1c066a36b47fa50ad75cf8e31f907e9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMDQwNQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388500405", "bodyText": "I tried. We have 2 options:\n\n\nAs you said, we can pass in the factory as a parameter. But we have to make HelixZkClientFactory public. Shall we do this?\npublic abstract class HelixZkClientFactory implements RealmAwareZkClientFactory\n\n\nIt is the implemented as I do. KeepHelixZkClientFactory as it is. I prefer this considering that we don't want HelixZkClientFactory public.", "author": "huizhilu", "createdAt": "2020-03-05T19:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMTE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzMTQ1OQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388031459", "body": "Nit: not much point declaring `SLASH` if it's character counter-part is a local variable. ", "bodyText": "Nit: not much point declaring SLASH if it's character counter-part is a local variable.", "bodyHTML": "<p dir=\"auto\">Nit: not much point declaring <code>SLASH</code> if it's character counter-part is a local variable.</p>", "author": "NealSun96", "createdAt": "2020-03-05T01:28:15Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,85 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    RealmAwareZkClient newClient;\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      newClient = buildSharedZkClient(connectionConfig, clientConfig);\n+    } else {\n+      newClient = buildDedicatedZkClient(connectionConfig, clientConfig);\n+    }\n+\n+    return newClient;\n+  }\n+\n+  private RealmAwareZkClient buildSharedZkClient(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient =\n+          SharedZkClientFactory.getInstance().buildZkClient(connectionConfig, clientConfig);\n+    } catch (IllegalArgumentException | IOException | InvalidRoutingDataException e) {\n+      LOG.warn(\"Not able to build realm-aware shared ZK client for sharding key: {}, caused by: {}\"\n+              + \" Fallback to HelixZkClient.\", connectionConfig.getZkRealmShardingKey(),\n+          e.getMessage());\n+\n+      // Fallback to HelixZkClient\n+      HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+          new HelixZkClient.ZkConnectionConfig(_zkAddress);\n+      helixZkConnectionConfig.setSessionTimeout(connectionConfig.getSessionTimeout());\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(helixZkConnectionConfig, clientConfig.createHelixZkClientConfig());\n+    }\n+\n+    return zkClient;\n+  }\n+\n+  private RealmAwareZkClient buildDedicatedZkClient(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient =\n+          DedicatedZkClientFactory.getInstance().buildZkClient(connectionConfig, clientConfig);\n+    } catch (IllegalArgumentException | IOException | InvalidRoutingDataException e) {\n+      LOG.warn(\"Not able to build realm-aware Dedicated ZK client for sharding key: {}, caused by: {}\"\n+              + \" Fall back to HelixZkClient.\", connectionConfig.getZkRealmShardingKey(),\n+          e.getMessage());\n+\n+      // Fallback to HelixZkClient\n+      HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+          new HelixZkClient.ZkConnectionConfig(_zkAddress);\n+      helixZkConnectionConfig.setSessionTimeout(connectionConfig.getSessionTimeout());\n+      zkClient = DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(helixZkConnectionConfig, clientConfig.createHelixZkClientConfig());\n+    }\n+\n+    return zkClient;\n+  }\n+\n+  private String buildShardingKey() {\n+    return _clusterName.charAt(0) == '/' ? _clusterName : SLASH + _clusterName;", "originalCommit": "29386bf1c066a36b47fa50ad75cf8e31f907e9a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca0e0cba1b7bbc223053d333c3e3033b50d3a703", "url": "https://github.com/apache/helix/commit/ca0e0cba1b7bbc223053d333c3e3033b50d3a703", "message": "Make ZKHelixAdmin and ZKHelixManager Realm-aware", "committedDate": "2020-03-05T18:47:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzY1NQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388513655", "body": "Why is the constructor throwing all sorts of exceptions? As we discussed, this is where we catch checked exceptions. ", "bodyText": "Why is the constructor throwing all sorts of exceptions? As we discussed, this is where we catch checked exceptions.", "bodyHTML": "<p dir=\"auto\">Why is the constructor throwing all sorts of exceptions? As we discussed, this is where we catch checked exceptions.</p>", "author": "narendly", "createdAt": "2020-03-05T19:28:38Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -89,33 +91,77 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   private final ConfigAccessor _configAccessor;\n-  // true if ZKHelixAdmin was instantiated with a HelixZkClient, false otherwise\n+  // true if ZKHelixAdmin was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZKHelixAdmin should close the underlying ZkClient\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n \n+  /**\n+   * @deprecated it is recommended to use the other constructors instead to avoid having to manually\n+   * create and maintain a RealmAwareZkClient outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZKHelixAdmin(HelixZkClient zkClient) {\n+  public ZKHelixAdmin(RealmAwareZkClient zkClient) {\n     _zkClient = zkClient;\n     _configAccessor = new ConfigAccessor(zkClient);\n     _usesExternalZkClient = true;\n   }\n \n   public ZKHelixAdmin(String zkAddress) {\n     int timeOutInSec = Integer.parseInt(System.getProperty(CONNECTION_TIMEOUT, \"30\"));\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(new ZNRecordSerializer())\n-        .setConnectInitTimeout(timeOutInSec * 1000);\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    _zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig()\n+            .setConnectInitTimeout(timeOutInSec * 1000L)\n+            .setZkSerializer(new ZNRecordSerializer());\n+\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IOException | InvalidRoutingDataException e) {\n+      LOG.info(\"Not able to connect on multi-realm mode. \"\n+          + \"Connecting on single-realm mode to ZK: {}\", zkAddress);\n+\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              clientConfig.createHelixZkClientConfig());\n+      zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    }\n+\n+    _zkClient = zkClient;\n+    _configAccessor = new ConfigAccessor(_zkClient);\n+    _usesExternalZkClient = false;\n+  }\n+\n+  private ZKHelixAdmin(Builder builder) throws IOException, InvalidRoutingDataException {", "originalCommit": "ca0e0cba1b7bbc223053d333c3e3033b50d3a703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NDY3Ng==", "url": "https://github.com/apache/helix/pull/846#discussion_r388554676", "bodyText": "I followed ConfigAccessor to make it consistent. If ConfigAccessor  is not a special case, we may also need to change it?\n  private ConfigAccessor(Builder builder) throws IOException, InvalidRoutingDataException {", "author": "huizhilu", "createdAt": "2020-03-05T20:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzgwNQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388513805", "body": "This should be a try-catch.", "bodyText": "This should be a try-catch.", "bodyHTML": "<p dir=\"auto\">This should be a try-catch.</p>", "author": "narendly", "createdAt": "2020-03-05T19:28:54Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -89,33 +91,77 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   private final ConfigAccessor _configAccessor;\n-  // true if ZKHelixAdmin was instantiated with a HelixZkClient, false otherwise\n+  // true if ZKHelixAdmin was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZKHelixAdmin should close the underlying ZkClient\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n \n+  /**\n+   * @deprecated it is recommended to use the other constructors instead to avoid having to manually\n+   * create and maintain a RealmAwareZkClient outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZKHelixAdmin(HelixZkClient zkClient) {\n+  public ZKHelixAdmin(RealmAwareZkClient zkClient) {\n     _zkClient = zkClient;\n     _configAccessor = new ConfigAccessor(zkClient);\n     _usesExternalZkClient = true;\n   }\n \n   public ZKHelixAdmin(String zkAddress) {\n     int timeOutInSec = Integer.parseInt(System.getProperty(CONNECTION_TIMEOUT, \"30\"));\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(new ZNRecordSerializer())\n-        .setConnectInitTimeout(timeOutInSec * 1000);\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    _zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig()\n+            .setConnectInitTimeout(timeOutInSec * 1000L)\n+            .setZkSerializer(new ZNRecordSerializer());\n+\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IOException | InvalidRoutingDataException e) {\n+      LOG.info(\"Not able to connect on multi-realm mode. \"\n+          + \"Connecting on single-realm mode to ZK: {}\", zkAddress);\n+\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              clientConfig.createHelixZkClientConfig());\n+      zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    }\n+\n+    _zkClient = zkClient;\n+    _configAccessor = new ConfigAccessor(_zkClient);\n+    _usesExternalZkClient = false;\n+  }\n+\n+  private ZKHelixAdmin(Builder builder) throws IOException, InvalidRoutingDataException {\n+    switch (builder.realmMode) {\n+      case MULTI_REALM:\n+        _zkClient = new FederatedZkClient(builder.realmAwareZkConnectionConfig,\n+            builder.realmAwareZkClientConfig);", "originalCommit": "ca0e0cba1b7bbc223053d333c3e3033b50d3a703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDIxOQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388514219", "bodyText": "Example: https://github.com/apache/helix/pull/863/files#diff-259ce65919d1337b08cb736839d755feR178-R192\nWhat are your thoughts?", "author": "narendly", "createdAt": "2020-03-05T19:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4NDg1NA==", "url": "https://github.com/apache/helix/pull/846#discussion_r388684854", "bodyText": "Above reply.", "author": "huizhilu", "createdAt": "2020-03-06T02:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDg4MA==", "url": "https://github.com/apache/helix/pull/846#discussion_r388514880", "body": "This could actually be simplified to \r\n\r\n```\r\n      // Resolve RealmAwareZkClientConfig\r\n      if (_realmAwareZkClientConfig == null) {\r\n        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\r\n      }\r\n```", "bodyText": "This could actually be simplified to\n      // Resolve RealmAwareZkClientConfig\n      if (_realmAwareZkClientConfig == null) {\n        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n      }", "bodyHTML": "<p dir=\"auto\">This could actually be simplified to</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"      // Resolve RealmAwareZkClientConfig\n      if (_realmAwareZkClientConfig == null) {\n        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n      }\n\"><pre><code>      // Resolve RealmAwareZkClientConfig\n      if (_realmAwareZkClientConfig == null) {\n        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n      }\n</code></pre></div>", "author": "narendly", "createdAt": "2020-03-05T19:30:58Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1799,4 +1845,71 @@ private boolean validateWeightForResourceConfig(ClusterConfig clusterConfig,\n             clusterConfig));\n     return true;\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZKHelixAdmin.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin build() throws Exception {\n+      validate();\n+      return new ZKHelixAdmin(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"ConfigAccessor: RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+      }\n+      if (realmMode == null) {\n+        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+      }\n+\n+      // Resolve RealmAwareZkClientConfig\n+      boolean isZkClientConfigSet = realmAwareZkClientConfig != null;\n+      // Resolve which clientConfig to use\n+      realmAwareZkClientConfig =\n+          isZkClientConfigSet ? realmAwareZkClientConfig.createHelixZkClientConfig()\n+              : new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer());", "originalCommit": "ca0e0cba1b7bbc223053d333c3e3033b50d3a703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MzU0Mw==", "url": "https://github.com/apache/helix/pull/846#discussion_r388683543", "bodyText": "Done. We may want to make ConfigAccessor consistent with this?", "author": "huizhilu", "createdAt": "2020-03-06T02:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDg4MA=="}], "type": "inlineReview"}, {"oid": "f76e522b5252eb0aba5a5367ec5427cfd4e5039a", "url": "https://github.com/apache/helix/commit/f76e522b5252eb0aba5a5367ec5427cfd4e5039a", "message": "Catch exception for HelixAdmin.", "committedDate": "2020-03-06T02:41:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1NDE1MQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388754151", "body": "ConfigAccessor -> ZkHelixAdmin?", "bodyText": "ConfigAccessor -> ZkHelixAdmin?", "bodyHTML": "<p dir=\"auto\">ConfigAccessor -&gt; ZkHelixAdmin?</p>", "author": "narendly", "createdAt": "2020-03-06T07:46:58Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1799,4 +1856,69 @@ private boolean validateWeightForResourceConfig(ClusterConfig clusterConfig,\n             clusterConfig));\n     return true;\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZKHelixAdmin.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin build() throws Exception {\n+      validate();\n+      return new ZKHelixAdmin(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.", "originalCommit": "f76e522b5252eb0aba5a5367ec5427cfd4e5039a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1NDY5OQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r388754699", "body": "Nit: remove extra line", "bodyText": "Nit: remove extra line", "bodyHTML": "<p dir=\"auto\">Nit: remove extra line</p>", "author": "narendly", "createdAt": "2020-03-06T07:48:42Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,62 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    RealmAwareZkClient newClient;\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      newClient = buildHelixZkClient(SharedZkClientFactory.getInstance(), connectionConfig,\n+          clientConfig);\n+    } else {\n+      newClient = buildHelixZkClient(DedicatedZkClientFactory.getInstance(), connectionConfig,\n+          clientConfig);\n+    }\n+\n+    return newClient;\n+  }\n+\n+  private RealmAwareZkClient buildHelixZkClient(HelixZkClientFactory zkClientFactory,\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    try {\n+      return zkClientFactory.buildZkClient(connectionConfig, clientConfig);\n+    } catch (IllegalArgumentException | IOException | InvalidRoutingDataException e) {\n+      LOG.info(\"Not able to connect on realm-aware mode for sharding key: {}, caused by: {} .\"\n+              + \"Trying to connect to ZK: {}.\", connectionConfig.getZkRealmShardingKey(),\n+          e.getMessage(), _zkAddress);\n+    }\n+\n+    // Fall back to HelixZkClient\n+    HelixZkClient.ZkClientConfig helixZkClientConfig = clientConfig.createHelixZkClientConfig();\n+    HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+        new HelixZkClient.ZkConnectionConfig(_zkAddress)\n+            .setSessionTimeout(connectionConfig.getSessionTimeout());\n+\n+    return zkClientFactory.buildZkClient(helixZkConnectionConfig, helixZkClientConfig);\n+  }\n+", "originalCommit": "f76e522b5252eb0aba5a5367ec5427cfd4e5039a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTQzMQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r389205431", "body": "@pkuwm \r\nPlease throw a HelixException here and propagate the exception. \r\nAlso note that per our offline discussion, there will no longer be a fallback to single realm mode. If multi-realm fails, we fail the creation.", "bodyText": "@pkuwm\nPlease throw a HelixException here and propagate the exception.\nAlso note that per our offline discussion, there will no longer be a fallback to single realm mode. If multi-realm fails, we fail the creation.", "bodyHTML": "<p dir=\"auto\">@pkuwm<br>\nPlease throw a HelixException here and propagate the exception.<br>\nAlso note that per our offline discussion, there will no longer be a fallback to single realm mode. If multi-realm fails, we fail the creation.</p>", "author": "narendly", "createdAt": "2020-03-07T00:33:50Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -89,33 +91,88 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   private final ConfigAccessor _configAccessor;\n-  // true if ZKHelixAdmin was instantiated with a HelixZkClient, false otherwise\n+  // true if ZKHelixAdmin was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZKHelixAdmin should close the underlying ZkClient\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n \n+  /**\n+   * @deprecated it is recommended to use the other constructors instead to avoid having to manually\n+   * create and maintain a RealmAwareZkClient outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZKHelixAdmin(HelixZkClient zkClient) {\n+  public ZKHelixAdmin(RealmAwareZkClient zkClient) {\n     _zkClient = zkClient;\n     _configAccessor = new ConfigAccessor(zkClient);\n     _usesExternalZkClient = true;\n   }\n \n   public ZKHelixAdmin(String zkAddress) {\n     int timeOutInSec = Integer.parseInt(System.getProperty(CONNECTION_TIMEOUT, \"30\"));\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(new ZNRecordSerializer())\n-        .setConnectInitTimeout(timeOutInSec * 1000);\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    _zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig()\n+            .setConnectInitTimeout(timeOutInSec * 1000L)\n+            .setZkSerializer(new ZNRecordSerializer());\n+\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IOException | InvalidRoutingDataException e) {\n+      LOG.info(\"Not able to connect on multi-realm mode. \"\n+          + \"Connecting on single-realm mode to ZK: {}\", zkAddress);\n+\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              clientConfig.createHelixZkClientConfig());\n+      zkClient.waitUntilConnected(timeOutInSec, TimeUnit.SECONDS);\n+    }\n+\n+    _zkClient = zkClient;\n+    _configAccessor = new ConfigAccessor(_zkClient);\n+    _usesExternalZkClient = false;\n+  }\n+\n+  private ZKHelixAdmin(Builder builder) {\n+    RealmAwareZkClient zkClient;\n+    switch (builder.realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          zkClient = new FederatedZkClient(builder.realmAwareZkConnectionConfig,\n+              builder.realmAwareZkClientConfig);\n+          break;\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+          if (builder.zkAddress == null || builder.zkAddress.isEmpty()) {\n+            throw new IllegalStateException(\"Not able to connect on multi-realm mode.\", e);\n+          }\n+          LOG.info(\"Not able to connect on multi-realm mode. \"\n+              + \"Connecting on single-realm mode to ZK: {}\", builder.zkAddress);\n+          builder.setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM);", "originalCommit": "c989ccc20408c6a7bd47613bc266568d37a4a145", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxOTY2Mw==", "url": "https://github.com/apache/helix/pull/846#discussion_r389319663", "bodyText": "Done.", "author": "huizhilu", "createdAt": "2020-03-07T23:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMTQzNw==", "url": "https://github.com/apache/helix/pull/846#discussion_r389321437", "body": "This is not configAccessor... lets fix the log? :)", "bodyText": "This is not configAccessor... lets fix the log? :)", "bodyHTML": "<p dir=\"auto\">This is not configAccessor... lets fix the log? :)</p>", "author": "narendly", "createdAt": "2020-03-07T23:55:29Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1799,4 +1851,69 @@ private boolean validateWeightForResourceConfig(ClusterConfig clusterConfig,\n             clusterConfig));\n     return true;\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZKHelixAdmin.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin build() throws Exception {\n+      validate();\n+      return new ZKHelixAdmin(this);\n+    }\n+\n+    /*\n+     * Validates the given parameters before creating an instance of ZKHelixAdmin.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"ConfigAccessor: RealmMode cannot be single-realm without a valid ZkAddress set!\");", "originalCommit": "58e0214a73af8924c45857f49ac4231fb399ce2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMTU2OQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r389321569", "body": "Also we need to throw exception when zkaddr is set on multi-realm mode.", "bodyText": "Also we need to throw exception when zkaddr is set on multi-realm mode.", "bodyHTML": "<p dir=\"auto\">Also we need to throw exception when zkaddr is set on multi-realm mode.</p>", "author": "narendly", "createdAt": "2020-03-07T23:57:00Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1799,4 +1851,69 @@ private boolean validateWeightForResourceConfig(ClusterConfig clusterConfig,\n             clusterConfig));\n     return true;\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZKHelixAdmin.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZKHelixAdmin build() throws Exception {\n+      validate();\n+      return new ZKHelixAdmin(this);\n+    }\n+\n+    /*\n+     * Validates the given parameters before creating an instance of ZKHelixAdmin.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {", "originalCommit": "58e0214a73af8924c45857f49ac4231fb399ce2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMTg5Nw==", "url": "https://github.com/apache/helix/pull/846#discussion_r389321897", "bodyText": "Fixed.", "author": "huizhilu", "createdAt": "2020-03-08T00:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMTU2OQ=="}], "type": "inlineReview"}, {"oid": "cbb0fa29a60b9bd8fafd665c677434d1ad6716c5", "url": "https://github.com/apache/helix/commit/cbb0fa29a60b9bd8fafd665c677434d1ad6716c5", "message": "Check zkAddress", "committedDate": "2020-03-07T23:59:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MjUzMw==", "url": "https://github.com/apache/helix/pull/846#discussion_r390792533", "body": "These method names are very confusing. You're creating HelixZkClient in buildRealmAwareZkClient() and creating RealmAwareZkClient in buildHelixZkClient()? Could we try to improve the naming for these methods so that it's easier to read? I think this could be refactored for readability. Thoughts?", "bodyText": "These method names are very confusing. You're creating HelixZkClient in buildRealmAwareZkClient() and creating RealmAwareZkClient in buildHelixZkClient()? Could we try to improve the naming for these methods so that it's easier to read? I think this could be refactored for readability. Thoughts?", "bodyHTML": "<p dir=\"auto\">These method names are very confusing. You're creating HelixZkClient in buildRealmAwareZkClient() and creating RealmAwareZkClient in buildHelixZkClient()? Could we try to improve the naming for these methods so that it's easier to read? I think this could be refactored for readability. Thoughts?</p>", "author": "narendly", "createdAt": "2020-03-11T07:50:00Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,63 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    RealmAwareZkClient newClient;\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      newClient = buildHelixZkClient(SharedZkClientFactory.getInstance(), connectionConfig,\n+          clientConfig);\n+    } else {\n+      newClient = buildHelixZkClient(DedicatedZkClientFactory.getInstance(), connectionConfig,\n+          clientConfig);\n+    }\n+\n+    return newClient;\n+  }\n+\n+  private RealmAwareZkClient buildHelixZkClient(HelixZkClientFactory zkClientFactory,\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {\n+    if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)) {\n+      try {\n+        // Create realm-aware ZkClient.\n+        return zkClientFactory.buildZkClient(connectionConfig, clientConfig);\n+      } catch (IllegalArgumentException | IOException | InvalidRoutingDataException e) {\n+        throw new HelixException(\"Not able to connect on realm-aware mode for sharding key: \"\n+            + connectionConfig.getZkRealmShardingKey(), e);\n+      }\n+    }\n+\n+    // If multi-zk mode is not enabled, create HelixZkClient with the provided zk address.\n+    HelixZkClient.ZkClientConfig helixZkClientConfig = clientConfig.createHelixZkClientConfig();\n+    HelixZkClient.ZkConnectionConfig helixZkConnectionConfig =\n+        new HelixZkClient.ZkConnectionConfig(_zkAddress)\n+            .setSessionTimeout(connectionConfig.getSessionTimeout());\n+\n+    return zkClientFactory.buildZkClient(helixZkConnectionConfig, helixZkClientConfig);\n+  }", "originalCommit": "8aa70c05552bd344c705c47a2d0adc87a7109f49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NTMxNA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391395314", "bodyText": "I also had the same thought. Based on the original name and the current code structure, I could not find good names. Updated with my new idea. If you have better ideas, please suggest.", "author": "huizhilu", "createdAt": "2020-03-12T04:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MjgxOA==", "url": "https://github.com/apache/helix/pull/846#discussion_r390792818", "body": "Shouldn't this be deprecated?", "bodyText": "Shouldn't this be deprecated?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be deprecated?</p>", "author": "narendly", "createdAt": "2020-03-11T07:50:44Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,14 +103,13 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n+  private final RealmAwareZkClient _zkClient;\n   // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n-  @Deprecated\n-  public ZkBaseDataAccessor(HelixZkClient zkClient) {\n+  public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {", "originalCommit": "8aa70c05552bd344c705c47a2d0adc87a7109f49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNDg5MA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391034890", "bodyText": "Good catch. It should be. When I started working on it, I was not sure and thought we would keep the new RealmAwareZkClient  and deprecate HelixZkClient  instead. I already deprecated in the ZkBaseDataAccessor PR.\nUpdated to deprecate it.", "author": "huizhilu", "createdAt": "2020-03-11T14:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNDY0OA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391314648", "body": "Add TODO here. We need to refactor all the builders before merging to the master.", "bodyText": "Add TODO here. We need to refactor all the builders before merging to the master.", "bodyHTML": "<p dir=\"auto\">Add TODO here. We need to refactor all the builders before merging to the master.</p>", "author": "junkaixue", "createdAt": "2020-03-11T22:51:24Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1799,4 +1867,73 @@ private boolean validateWeightForResourceConfig(ClusterConfig clusterConfig,\n             clusterConfig));\n     return true;\n   }\n+\n+  public static class Builder {", "originalCommit": "294015f5607962e2659cdc1d92f04533f933cc51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NDk1Nw==", "url": "https://github.com/apache/helix/pull/846#discussion_r391394957", "bodyText": "Added.", "author": "huizhilu", "createdAt": "2020-03-12T04:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNDY0OA=="}], "type": "inlineReview"}, {"oid": "c9b78230b38f525a0baab121bb817ec0f810e448", "url": "https://github.com/apache/helix/commit/c9b78230b38f525a0baab121bb817ec0f810e448", "message": "Make ZKHelixAdmin and ZKHelixManager Realm-aware", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "47ffd730677d4a23b8a5e3f41abddaffeb150a74", "url": "https://github.com/apache/helix/commit/47ffd730677d4a23b8a5e3f41abddaffeb150a74", "message": "Catch exception for HelixAdmin.", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "4694e5fdd53a4f38534fd94417c5cc2da721bab2", "url": "https://github.com/apache/helix/commit/4694e5fdd53a4f38534fd94417c5cc2da721bab2", "message": "Address comments", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "81215a063bbcf701935a6dd979ed49fa3d8bcc0a", "url": "https://github.com/apache/helix/commit/81215a063bbcf701935a6dd979ed49fa3d8bcc0a", "message": "Throw HelixException", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "4acef6ff897dc64662ef5132bfeca911a7d1a6db", "url": "https://github.com/apache/helix/commit/4acef6ff897dc64662ef5132bfeca911a7d1a6db", "message": "Check zkAddress", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "4fa156c1bd462747ae90288fe4f2ce3f8543114a", "url": "https://github.com/apache/helix/commit/4fa156c1bd462747ae90288fe4f2ce3f8543114a", "message": "Remove fallback", "committedDate": "2020-03-12T04:03:38Z", "type": "commit"}, {"oid": "7308a6d011e51aac461a6179f37eee96e0ae14a1", "url": "https://github.com/apache/helix/commit/7308a6d011e51aac461a6179f37eee96e0ae14a1", "message": "Uname methods", "committedDate": "2020-03-12T04:22:26Z", "type": "commit"}, {"oid": "7308a6d011e51aac461a6179f37eee96e0ae14a1", "url": "https://github.com/apache/helix/commit/7308a6d011e51aac461a6179f37eee96e0ae14a1", "message": "Uname methods", "committedDate": "2020-03-12T04:22:26Z", "type": "forcePushed"}, {"oid": "d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "url": "https://github.com/apache/helix/commit/d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "message": "Add TODO", "committedDate": "2020-03-12T04:25:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5OTQwNA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391399404", "body": "Nit: one empty line would suffice?", "bodyText": "Nit: one empty line would suffice?", "bodyHTML": "<p dir=\"auto\">Nit: one empty line would suffice?</p>", "author": "narendly", "createdAt": "2020-03-12T04:47:46Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -90,33 +92,98 @@\n \n \n public class ZKHelixAdmin implements HelixAdmin {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+\n+", "originalCommit": "d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjQ0Nw==", "url": "https://github.com/apache/helix/pull/846#discussion_r391402447", "bodyText": "How could 2 empty lines be added...\nAddressed.", "author": "huizhilu", "createdAt": "2020-03-12T05:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5OTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDczMA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391400730", "body": "Nit: I know we don't have to change this, but initializing to null is redundant.", "bodyText": "Nit: I know we don't have to change this, but initializing to null is redundant.", "bodyHTML": "<p dir=\"auto\">Nit: I know we don't have to change this, but initializing to null is redundant.</p>", "author": "narendly", "createdAt": "2020-03-12T04:53:38Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -117,7 +121,7 @@\n   private final String _version;\n   private int _reportLatency;\n \n-  protected HelixZkClient _zkclient = null;\n+  protected RealmAwareZkClient _zkclient = null;", "originalCommit": "d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjA1NA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391402054", "body": "My suggestion is\r\n\r\n- JavaDoc:\r\n\r\nResolves what type of ZkClient this HelixManager should use based on whether MULTI_ZK_ENABLED System config is set or not. Two types of ZkClients are available: 1) If MULTI_ZK_ENABLED is set to true, we create a dedicated RealmAwareZkClient that provides full ZkClient functionalities and connects to the correct ZK by querying MetadataStoreDirectoryService. 2) Otherwise, we create a dedicated HelixZkClient which plainly connects to the ZK address given.\r\n\r\n- Rename the method to `resolveZkClient()`\r\n\r\nI think this will make our intention more clear.", "bodyText": "My suggestion is\n\nJavaDoc:\n\nResolves what type of ZkClient this HelixManager should use based on whether MULTI_ZK_ENABLED System config is set or not. Two types of ZkClients are available: 1) If MULTI_ZK_ENABLED is set to true, we create a dedicated RealmAwareZkClient that provides full ZkClient functionalities and connects to the correct ZK by querying MetadataStoreDirectoryService. 2) Otherwise, we create a dedicated HelixZkClient which plainly connects to the ZK address given.\n\nRename the method to resolveZkClient()\n\nI think this will make our intention more clear.", "bodyHTML": "<p dir=\"auto\">My suggestion is</p>\n<ul dir=\"auto\">\n<li>JavaDoc:</li>\n</ul>\n<p dir=\"auto\">Resolves what type of ZkClient this HelixManager should use based on whether MULTI_ZK_ENABLED System config is set or not. Two types of ZkClients are available: 1) If MULTI_ZK_ENABLED is set to true, we create a dedicated RealmAwareZkClient that provides full ZkClient functionalities and connects to the correct ZK by querying MetadataStoreDirectoryService. 2) Otherwise, we create a dedicated HelixZkClient which plainly connects to the ZK address given.</p>\n<ul dir=\"auto\">\n<li>Rename the method to <code>resolveZkClient()</code></li>\n</ul>\n<p dir=\"auto\">I think this will make our intention more clear.</p>", "author": "narendly", "createdAt": "2020-03-12T05:00:05Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,60 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient createSingleRealmZkClient() {\n+    final String shardingKey = buildShardingKey();\n+    PathBasedZkSerializer zkSerializer =\n+        ChainedPathZkSerializer.builder(new ZNRecordSerializer()).build();\n+\n+    RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+        new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkRealmShardingKey(shardingKey)\n+            .setSessionTimeout(_sessionTimeout).build();\n+\n+    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+        new RealmAwareZkClient.RealmAwareZkClientConfig();\n+\n+    clientConfig.setZkSerializer(zkSerializer)\n+        .setConnectInitTimeout(_connectionInitTimeout)\n+        .setMonitorType(_instanceType.name())\n+        .setMonitorKey(_clusterName)\n+        .setMonitorInstanceName(_instanceName)\n+        .setMonitorRootPathOnly(isMonitorRootPathOnly());\n+\n+    if (_instanceType == InstanceType.ADMINISTRATOR) {\n+      return buildSelectiveZkClient(SharedZkClientFactory.getInstance(), connectionConfig,\n+          clientConfig);\n+    }\n+\n+    return buildSelectiveZkClient(DedicatedZkClientFactory.getInstance(), connectionConfig,\n+        clientConfig);\n+  }\n+\n+  private RealmAwareZkClient buildSelectiveZkClient(HelixZkClientFactory zkClientFactory,", "originalCommit": "d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMzQ4NQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r391403485", "bodyText": "Added. Thx.", "author": "huizhilu", "createdAt": "2020-03-12T05:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjg5NQ==", "url": "https://github.com/apache/helix/pull/846#discussion_r391402895", "body": "- Rename the method to `prepareAndGetZkClient()`\r\n\r\n- Javadoc:\r\n\r\nPrepares connection config and client config based on the internal parameters given to HelixManager in order to create a ZkClient instance to use. Note that a shared ZkClient instance will be created if connecting as an ADMINISTRATOR to minimize the cost of creating ZkConnections.", "bodyText": "Rename the method to prepareAndGetZkClient()\n\n\nJavadoc:\n\n\nPrepares connection config and client config based on the internal parameters given to HelixManager in order to create a ZkClient instance to use. Note that a shared ZkClient instance will be created if connecting as an ADMINISTRATOR to minimize the cost of creating ZkConnections.", "bodyHTML": "<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Rename the method to <code>prepareAndGetZkClient()</code></p>\n</li>\n<li>\n<p dir=\"auto\">Javadoc:</p>\n</li>\n</ul>\n<p dir=\"auto\">Prepares connection config and client config based on the internal parameters given to HelixManager in order to create a ZkClient instance to use. Note that a shared ZkClient instance will be created if connecting as an ADMINISTRATOR to minimize the cost of creating ZkConnections.</p>", "author": "narendly", "createdAt": "2020-03-12T05:04:06Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1285,4 +1266,60 @@ public void handleSessionEstablishmentError(Throwable error) throws Exception {\n   public Long getSessionStartTime() {\n     return _sessionStartTime;\n   }\n+\n+  private RealmAwareZkClient createSingleRealmZkClient() {", "originalCommit": "d55153ff1318afc1aeedf7b237cd5f406bb0c3b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjAyNA==", "url": "https://github.com/apache/helix/pull/846#discussion_r391406024", "bodyText": "prepareAndGet sounds like a method does 2 things. I prefer to name a method which does one thing. get is better than prepareAndGet as there is no need to care about \"prepare\" since the final purpose is \"get\". There is already one method createClient() so I prefer to keep the name.\nIt is a private method and the logic is pretty straightforward. That's why I didn't consider adding comments. Anyway, since you suggested here, added.", "author": "huizhilu", "createdAt": "2020-03-12T05:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjg5NQ=="}], "type": "inlineReview"}, {"oid": "e10ff6e5e13f1c0ccd2c33416ce5833c1b46651d", "url": "https://github.com/apache/helix/commit/e10ff6e5e13f1c0ccd2c33416ce5833c1b46651d", "message": "Address comments", "committedDate": "2020-03-12T05:06:15Z", "type": "commit"}, {"oid": "e10ff6e5e13f1c0ccd2c33416ce5833c1b46651d", "url": "https://github.com/apache/helix/commit/e10ff6e5e13f1c0ccd2c33416ce5833c1b46651d", "message": "Address comments", "committedDate": "2020-03-12T05:06:15Z", "type": "forcePushed"}, {"oid": "dc7efd9d89656f5049f697c0a29edf1a6711ebbb", "url": "https://github.com/apache/helix/commit/dc7efd9d89656f5049f697c0a29edf1a6711ebbb", "message": "Add comments", "committedDate": "2020-03-12T05:18:53Z", "type": "commit"}]}