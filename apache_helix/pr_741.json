{"pr_number": 741, "pr_title": "Fix ConcurrentModification exception in Workflow Garbage Collection", "pr_author": "alirezazamani", "pr_createdAt": "2020-02-10T21:47:09Z", "pr_url": "https://github.com/apache/helix/pull/741", "timeline": [{"oid": "0848259a68fc77dbd23b88442e8daee1819dc522", "url": "https://github.com/apache/helix/commit/0848259a68fc77dbd23b88442e8daee1819dc522", "message": "Fix the possibile ConcurrentMod exception in Workflow Garbage Collection\n\nIn workflow Garbage collection, there is possbility that we see ConcurrentMod exception\nwhile looping through the context. This commit fixes this issue.", "committedDate": "2020-02-10T22:04:57Z", "type": "commit"}, {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522", "url": "https://github.com/apache/helix/commit/0848259a68fc77dbd23b88442e8daee1819dc522", "message": "Fix the possibile ConcurrentMod exception in Workflow Garbage Collection\n\nIn workflow Garbage collection, there is possbility that we see ConcurrentMod exception\nwhile looping through the context. This commit fixes this issue.", "committedDate": "2020-02-10T22:04:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MDY1Nw==", "url": "https://github.com/apache/helix/pull/741#discussion_r377350657", "body": "Can you merge these two if's?", "bodyText": "Can you merge these two if's?", "bodyHTML": "<p dir=\"auto\">Can you merge these two if's?</p>", "author": "narendly", "createdAt": "2020-02-10T22:18:40Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {", "originalCommit": "0848259a68fc77dbd23b88442e8daee1819dc522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxODE5NA==", "url": "https://github.com/apache/helix/pull/741#discussion_r377418194", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-11T02:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MDY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex f4405c9de..5ede4eaff 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1056,17 +1056,15 @@ public class TaskUtil {\n         if (entry != null) {\n           WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n           WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-            if (cfg == null) {\n-              toBeDeletedWorkflows.add(entry);\n-            }\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+            toBeDeletedWorkflows.add(entry);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      LOG.warn(String.format(\n-          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),\n-          e.getMessage());\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": {"commit": "de0f8fb4506a2891b326542657b1e72576e97d31", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 5ede4eaff..145ee23bb 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1047,24 +1049,25 @@ public class TaskUtil {\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n-    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n-    // should be deleted.\n-    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    Set<String> existingWorkflowContexts;\n     try {\n-      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n-      for (String entry : existingWorkflowContexts) {\n-        if (entry != null) {\n-          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n-          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n-            toBeDeletedWorkflows.add(entry);\n-          }\n-        }\n-      }\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n           \"Exception occurred while creating a list of all existing contexts with missing config!\",\n           e);\n+      return;\n+    }\n+\n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n+    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    for (String entry : existingWorkflowContexts) {\n+      WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+      WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+      if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+        toBeDeletedWorkflows.add(entry);\n+      }\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTE0MQ==", "url": "https://github.com/apache/helix/pull/741#discussion_r377351141", "body": "1. Use {}\r\n2. You can input the exception as the second parameter. You don't have to do e.getMessage().", "bodyText": "Use {}\nYou can input the exception as the second parameter. You don't have to do e.getMessage().", "bodyHTML": "<ol dir=\"auto\">\n<li>Use {}</li>\n<li>You can input the exception as the second parameter. You don't have to do e.getMessage().</li>\n</ol>", "author": "narendly", "createdAt": "2020-02-10T22:19:41Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {\n+              toBeDeletedWorkflows.add(entry);\n+            }\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(String.format(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),", "originalCommit": "0848259a68fc77dbd23b88442e8daee1819dc522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxODI2Mw==", "url": "https://github.com/apache/helix/pull/741#discussion_r377418263", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-11T02:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex f4405c9de..5ede4eaff 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1056,17 +1056,15 @@ public class TaskUtil {\n         if (entry != null) {\n           WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n           WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-            if (cfg == null) {\n-              toBeDeletedWorkflows.add(entry);\n-            }\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+            toBeDeletedWorkflows.add(entry);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      LOG.warn(String.format(\n-          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),\n-          e.getMessage());\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": {"commit": "de0f8fb4506a2891b326542657b1e72576e97d31", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 5ede4eaff..145ee23bb 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1047,24 +1049,25 @@ public class TaskUtil {\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n-    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n-    // should be deleted.\n-    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    Set<String> existingWorkflowContexts;\n     try {\n-      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n-      for (String entry : existingWorkflowContexts) {\n-        if (entry != null) {\n-          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n-          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n-            toBeDeletedWorkflows.add(entry);\n-          }\n-        }\n-      }\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n           \"Exception occurred while creating a list of all existing contexts with missing config!\",\n           e);\n+      return;\n+    }\n+\n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n+    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    for (String entry : existingWorkflowContexts) {\n+      WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+      WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+      if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+        toBeDeletedWorkflows.add(entry);\n+      }\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTgzNw==", "url": "https://github.com/apache/helix/pull/741#discussion_r377351837", "body": "Use one \"!'.", "bodyText": "Use one \"!'.", "bodyHTML": "<p dir=\"auto\">Use one \"!'.</p>", "author": "narendly", "createdAt": "2020-02-10T22:21:13Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {\n+              toBeDeletedWorkflows.add(entry);\n+            }\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(String.format(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),", "originalCommit": "0848259a68fc77dbd23b88442e8daee1819dc522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxODIzNw==", "url": "https://github.com/apache/helix/pull/741#discussion_r377418237", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-11T02:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex f4405c9de..5ede4eaff 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1056,17 +1056,15 @@ public class TaskUtil {\n         if (entry != null) {\n           WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n           WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-            if (cfg == null) {\n-              toBeDeletedWorkflows.add(entry);\n-            }\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+            toBeDeletedWorkflows.add(entry);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      LOG.warn(String.format(\n-          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),\n-          e.getMessage());\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": {"commit": "de0f8fb4506a2891b326542657b1e72576e97d31", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 5ede4eaff..145ee23bb 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1047,24 +1049,25 @@ public class TaskUtil {\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n-    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n-    // should be deleted.\n-    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    Set<String> existingWorkflowContexts;\n     try {\n-      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n-      for (String entry : existingWorkflowContexts) {\n-        if (entry != null) {\n-          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n-          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n-            toBeDeletedWorkflows.add(entry);\n-          }\n-        }\n-      }\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n           \"Exception occurred while creating a list of all existing contexts with missing config!\",\n           e);\n+      return;\n+    }\n+\n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n+    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    for (String entry : existingWorkflowContexts) {\n+      WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+      WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+      if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+        toBeDeletedWorkflows.add(entry);\n+      }\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": null}]}}]}}, {"oid": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "url": "https://github.com/apache/helix/commit/9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "message": "fix comments", "committedDate": "2020-02-11T02:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA==", "url": "https://github.com/apache/helix/pull/741#discussion_r377423574", "body": "Do you clearly understand why and where ConcurrentModificationException is happening? This looks like we're just masking it with a try-catch. I don't think that's a fix. Could we identify why and where clearly first and could you please update the description with your findings? Then this try-catch shouldn't be necessary.", "bodyText": "Do you clearly understand why and where ConcurrentModificationException is happening? This looks like we're just masking it with a try-catch. I don't think that's a fix. Could we identify why and where clearly first and could you please update the description with your findings? Then this try-catch shouldn't be necessary.", "bodyHTML": "<p dir=\"auto\">Do you clearly understand why and where ConcurrentModificationException is happening? This looks like we're just masking it with a try-catch. I don't think that's a fix. Could we identify why and where clearly first and could you please update the description with your findings? Then this try-catch shouldn't be necessary.</p>", "author": "narendly", "createdAt": "2020-02-11T02:33:02Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,33 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+            toBeDeletedWorkflows.add(entry);\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);\n     }", "originalCommit": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzMzAyNg==", "url": "https://github.com/apache/helix/pull/741#discussion_r377433026", "bodyText": "Yes. I tried several scenarios and for each scenario I used Jiajun's scripts which runs the test for 50 time. The most effective solution is the one that I proposed in this PR. Please have a look at this line:\n\nSet existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n\nIn some minor cases (about 2 out of 50 runs) above line is the only line that can generate concurrent modification exception which I eliminated it with try-catch. The reason behind this is because while we want to get all of the existing contexts, the contextMap can be modified in the cache by other threads. As a result we will get concurrentMod exception. Please note that this part of the code runs asynchronously.\n@narendly I don't have strong preference about this method and using try-catch and I would be happy if you can propose new way to get all of the context without hitting concurrent modification exception.", "author": "alirezazamani", "createdAt": "2020-02-11T03:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzNDM5MA==", "url": "https://github.com/apache/helix/pull/741#discussion_r377434390", "bodyText": "If you make a deep copy of the set, you shouldn't need to wrap it with a try-catch since your async thread would be the only thread iterating over the data structure, correct? What I'm not understanding is why we need the try-catch.", "author": "narendly", "createdAt": "2020-02-11T03:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzNjcyNQ==", "url": "https://github.com/apache/helix/pull/741#discussion_r377436725", "bodyText": "I don't believe deep copy by itself helps. The code generate concurrent modification in this function: map.keySet(). We cannot avoid this. How you are proposing to get the keys in the map in this scenario? We need to get the keys no matter what (even for doing deep copy). Even the implementation of deep copying involves to loop over the elements and copy them one by one to the new map. A deep copy is merely done by iterating through the elements (keys and values) and cloning those too. Right? In this case if original map has been changed while copy operation is happening, we might still get concurrent modification exception.", "author": "alirezazamani", "createdAt": "2020-02-11T03:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MzcwMQ==", "url": "https://github.com/apache/helix/pull/741#discussion_r377793701", "bodyText": "@alirezazamani  thanks for the explanation :) Now that makes a lot more sense.\nOne structural improvement I'd suggest:\n\nPlease only wrap the copy constructor with a the try-catch to make your intentions clear.\nIt would be good to explain this in the code as a javadoc comment (as to why it needs to be wrapped with a try-catch).\nYour catch should return the function early.", "author": "narendly", "createdAt": "2020-02-11T17:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MDgyMg==", "url": "https://github.com/apache/helix/pull/741#discussion_r377880822", "bodyText": "Done. Thanks @narendly for the comments.", "author": "alirezazamani", "createdAt": "2020-02-11T20:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "de0f8fb4506a2891b326542657b1e72576e97d31", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 5ede4eaff..145ee23bb 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1047,24 +1049,25 @@ public class TaskUtil {\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n-    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n-    // should be deleted.\n-    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    Set<String> existingWorkflowContexts;\n     try {\n-      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n-      for (String entry : existingWorkflowContexts) {\n-        if (entry != null) {\n-          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n-          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n-          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n-            toBeDeletedWorkflows.add(entry);\n-          }\n-        }\n-      }\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n           \"Exception occurred while creating a list of all existing contexts with missing config!\",\n           e);\n+      return;\n+    }\n+\n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n+    Set<String> toBeDeletedWorkflows = new HashSet<>();\n+    for (String entry : existingWorkflowContexts) {\n+      WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+      WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+      if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+        toBeDeletedWorkflows.add(entry);\n+      }\n     }\n \n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n", "next_change": null}]}}, {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31", "url": "https://github.com/apache/helix/commit/de0f8fb4506a2891b326542657b1e72576e97d31", "message": "fix reviewer comments", "committedDate": "2020-02-11T18:10:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDE0Mw==", "url": "https://github.com/apache/helix/pull/741#discussion_r377954143", "body": "1. move this to where try-catch is?\r\n2. Explain why Map.keySet() throws CME w regards to copy constructor?", "bodyText": "move this to where try-catch is?\nExplain why Map.keySet() throws CME w regards to copy constructor?", "bodyHTML": "<ol dir=\"auto\">\n<li>move this to where try-catch is?</li>\n<li>Explain why Map.keySet() throws CME w regards to copy constructor?</li>\n</ol>", "author": "narendly", "createdAt": "2020-02-11T23:08:45Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1040,26 +1040,39 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n   /**\n    * The function that loops through the all existing workflow contexts and removes IdealState and\n    * workflow context of the workflow whose workflow config does not exist.\n+   * Try-catch has been used to avoid concurrent modification exception while doing deep copy. Since\n+   * Map.keySet() can produce concurrent modification exception.", "originalCommit": "de0f8fb4506a2891b326542657b1e72576e97d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjMxOA==", "url": "https://github.com/apache/helix/pull/741#discussion_r377986318", "bodyText": "Done. Please let me know if it is still not clear.", "author": "alirezazamani", "createdAt": "2020-02-12T00:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 145ee23bb..3c3c7cb7a 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1040,8 +1040,6 @@ public class TaskUtil {\n   /**\n    * The function that loops through the all existing workflow contexts and removes IdealState and\n    * workflow context of the workflow whose workflow config does not exist.\n-   * Try-catch has been used to avoid concurrent modification exception while doing deep copy. Since\n-   * Map.keySet() can produce concurrent modification exception.\n    * @param dataProvider\n    * @param manager\n    */\n", "next_change": {"commit": "0c4f575e376e509e57e0d1bc617500449e5be047", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 3c3c7cb7a..072785fef 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1047,7 +1047,7 @@ public class TaskUtil {\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n-    Set<String> existingWorkflowContexts;\n+    Set<String> existingContexts;\n     /*\n      * Here try-catch is used to avoid concurrent modification exception while doing deep copy.\n      * Map.keySet() can produce concurrent modification exception.\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDMxMA==", "url": "https://github.com/apache/helix/pull/741#discussion_r377954310", "body": "\"workflow context names\"", "bodyText": "\"workflow context names\"", "bodyHTML": "<p dir=\"auto\">\"workflow context names\"</p>", "author": "narendly", "createdAt": "2020-02-11T23:09:10Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1040,26 +1040,39 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n   /**\n    * The function that loops through the all existing workflow contexts and removes IdealState and\n    * workflow context of the workflow whose workflow config does not exist.\n+   * Try-catch has been used to avoid concurrent modification exception while doing deep copy. Since\n+   * Map.keySet() can produce concurrent modification exception.\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    Set<String> existingWorkflowContexts;\n+    try {\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+    } catch (Exception e) {\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);", "originalCommit": "de0f8fb4506a2891b326542657b1e72576e97d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjM2MQ==", "url": "https://github.com/apache/helix/pull/741#discussion_r377986361", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-12T00:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 145ee23bb..3c3c7cb7a 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1050,11 +1048,17 @@ public class TaskUtil {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n \n     Set<String> existingWorkflowContexts;\n+    /*\n+     * Here try-catch is used to avoid concurrent modification exception while doing deep copy.\n+     * Map.keySet() can produce concurrent modification exception.\n+     * Reason: If the map is modified while an iteration over the set is in progress, concurrent\n+     * modification exception will be thrown.\n+     */\n     try {\n       existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n-          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          \"Exception occurred while creating a list of all workflow context names!\",\n           e);\n       return;\n     }\n", "next_change": {"commit": "0c4f575e376e509e57e0d1bc617500449e5be047", "changed_code": [{"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 3c3c7cb7a..072785fef 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1055,10 +1055,10 @@ public class TaskUtil {\n      * modification exception will be thrown.\n      */\n     try {\n-      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      existingContexts = new HashSet<>(dataProvider.getContexts().keySet());\n     } catch (Exception e) {\n       LOG.warn(\n-          \"Exception occurred while creating a list of all workflow context names!\",\n+          \"Exception occurred while creating a list of all workflow/job context names!\",\n           e);\n       return;\n     }\n", "next_change": null}, {"header": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\nindex 3c3c7cb7a..072785fef 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n", "chunk": "@@ -1066,7 +1066,7 @@ public class TaskUtil {\n     // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n     // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (String entry : existingWorkflowContexts) {\n+    for (String entry : existingContexts) {\n       WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n       WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n       if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n", "next_change": null}]}}]}}, {"oid": "db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "url": "https://github.com/apache/helix/commit/db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "message": "Comment fixes", "committedDate": "2020-02-12T00:54:14Z", "type": "forcePushed"}, {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047", "url": "https://github.com/apache/helix/commit/0c4f575e376e509e57e0d1bc617500449e5be047", "message": "Comment fixes", "committedDate": "2020-02-12T00:56:42Z", "type": "commit"}, {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047", "url": "https://github.com/apache/helix/commit/0c4f575e376e509e57e0d1bc617500449e5be047", "message": "Comment fixes", "committedDate": "2020-02-12T00:56:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTM4Mg==", "url": "https://github.com/apache/helix/pull/741#discussion_r383095382", "body": "@alirezazamani Is there a specific reason why we don't change the contexts map below to a concurrent hash map and make it thread safe? \r\n```\r\n  private Map<String, ZNRecord> _contextMap = new HashMap<>();\r\n``` \r\nWhat I can only see is performance concern when contexts modification is blocked by this copying. If performance is not that bad, I believe changing the contextMap to a concurrent hash map is the right fix.", "bodyText": "@alirezazamani Is there a specific reason why we don't change the contexts map below to a concurrent hash map and make it thread safe?\n  private Map<String, ZNRecord> _contextMap = new HashMap<>();\n\nWhat I can only see is performance concern when contexts modification is blocked by this copying. If performance is not that bad, I believe changing the contextMap to a concurrent hash map is the right fix.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/alirezazamani/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alirezazamani\">@alirezazamani</a> Is there a specific reason why we don't change the contexts map below to a concurrent hash map and make it thread safe?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  private Map&lt;String, ZNRecord&gt; _contextMap = new HashMap&lt;&gt;();\n\"><pre><code>  private Map&lt;String, ZNRecord&gt; _contextMap = new HashMap&lt;&gt;();\n</code></pre></div>\n<p dir=\"auto\">What I can only see is performance concern when contexts modification is blocked by this copying. If performance is not that bad, I believe changing the contextMap to a concurrent hash map is the right fix.</p>", "author": "huizhilu", "createdAt": "2020-02-24T06:00:42Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,40 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    Set<String> existingContexts;\n+    /*\n+     * Here try-catch is used to avoid concurrent modification exception while doing deep copy.\n+     * Map.keySet() can produce concurrent modification exception.\n+     * Reason: If the map is modified while an iteration over the set is in progress, concurrent\n+     * modification exception will be thrown.\n+     */\n+    try {\n+      existingContexts = new HashSet<>(dataProvider.getContexts().keySet());", "originalCommit": "0c4f575e376e509e57e0d1bc617500449e5be047", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NzQ1OA==", "url": "https://github.com/apache/helix/pull/741#discussion_r383097458", "bodyText": "dataProvider.getContexts() is outside the scope of this class and perhaps there are performance concerns regarding this. Maybe we can consider this in next design of TF.", "author": "alirezazamani", "createdAt": "2020-02-24T06:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTM4Mg=="}], "type": "inlineReview", "revised_code": null}]}