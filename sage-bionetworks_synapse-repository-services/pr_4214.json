{"pr_number": 4214, "pr_title": "PLFM-6445: Added support for MD5 checksums while copying", "pr_author": "marcomarasca", "pr_createdAt": "2020-10-08T01:14:40Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4214", "timeline": [{"oid": "e37055361505598af2bcf9c1b3c2fbe58402cc17", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e37055361505598af2bcf9c1b3c2fbe58402cc17", "message": "PLFM-6445: use map in place of tuplearraymap", "committedDate": "2020-10-06T17:28:30Z", "type": "commit"}, {"oid": "ae6b5f955bab26cd97697de334cf3ad21b2b716b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ae6b5f955bab26cd97697de334cf3ad21b2b716b", "message": "PLFM-6445: Added part size validation", "committedDate": "2020-10-06T20:50:24Z", "type": "commit"}, {"oid": "2d4622a8e5078bf71d3ede46df371a533acd2aa1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/2d4622a8e5078bf71d3ede46df371a533acd2aa1", "message": "PLFM-6445: If the buckets are the same avoid resolving the region", "committedDate": "2020-10-06T20:58:02Z", "type": "commit"}, {"oid": "c2ebe265535885267dbfbc22fe5686a681cbdd96", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c2ebe265535885267dbfbc22fe5686a681cbdd96", "message": "PLFM-6445: Extract bytes range calculation utility", "committedDate": "2020-10-07T03:22:38Z", "type": "commit"}, {"oid": "ecc9ce3e8b0c7cdd869f79d60985865fb86519e6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ecc9ce3e8b0c7cdd869f79d60985865fb86519e6", "message": "PLFM-6445: Better error message when the user does not own the storage location", "committedDate": "2020-10-07T15:35:26Z", "type": "commit"}, {"oid": "c8214dd48bf9436f3a9271a2813c0c92dbfb2f96", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c8214dd48bf9436f3a9271a2813c0c92dbfb2f96", "message": "PLFM-6445: Request type enum NOT NULL", "committedDate": "2020-10-07T19:24:37Z", "type": "commit"}, {"oid": "4b18ede4d52f18551cea0c42beaca547696dd14a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4b18ede4d52f18551cea0c42beaca547696dd14a", "message": "PLFM-6445: Added support for MD5 checksums", "committedDate": "2020-10-08T00:50:12Z", "type": "commit"}, {"oid": "cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "message": "PLFM-6445: Documentation clarifications", "committedDate": "2020-10-08T00:56:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzMDgwNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4214#discussion_r501930806", "body": "use literal numbers for the test cases", "bodyText": "use literal numbers for the test cases", "bodyHTML": "<p dir=\"auto\">use literal numbers for the test cases</p>", "author": "zimingd", "createdAt": "2020-10-08T18:32:43Z", "path": "lib/lib-shared-models/src/test/java/org/sagebionetworks/repo/model/file/PartUtilsTest.java", "diffHunk": "@@ -1,149 +1,260 @@\n package org.sagebionetworks.repo.model.file;\r\n \r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertTrue;\r\n-import static org.junit.Assert.fail;\r\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertThrows;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.MAX_FILE_SIZE_BYTES;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.MAX_NUMBER_OF_PARTS;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.MIN_PART_SIZE_BYTES;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.calculateNumberOfParts;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.choosePartSize;\r\n import static org.sagebionetworks.repo.model.file.PartUtils.validateFileSize;\r\n \r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n public class PartUtilsTest {\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testCalculateNumberOfPartsSmall(){\r\n+\tpublic void testCalculateNumberOfPartsSmall() {\r\n \t\tlong fileSize = 1;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n+\t\t// call under test\r\n \t\tint numberOfParts = calculateNumberOfParts(fileSize, partSize);\r\n \t\tassertEquals(1, numberOfParts);\r\n \t}\r\n \r\n \t@Test\r\n-\tpublic void testCalculateNumberOfPartsNoRemainder(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*2;\r\n+\tpublic void testCalculateNumberOfPartsNoRemainder() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * 2;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n+\t\t// call under test\r\n \t\tint numberOfParts = calculateNumberOfParts(fileSize, partSize);\r\n \t\tassertEquals(2, numberOfParts);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testCalculateNumberOfPartsWithRemainder(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*2+1;\r\n+\tpublic void testCalculateNumberOfPartsWithRemainder() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * 2 + 1;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n+\t\t// call under test\r\n \t\tint numberOfParts = calculateNumberOfParts(fileSize, partSize);\r\n \t\tassertEquals(3, numberOfParts);\r\n \t}\r\n-\t\r\n-\t@Test (expected=IllegalArgumentException.class)\r\n-\tpublic void testCalculateNumberOfLessThanOne(){\r\n+\r\n+\t@Test\r\n+\tpublic void testCalculateNumberOfLessThanOne() {\r\n \t\tlong fileSize = 0;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n-\t\tcalculateNumberOfParts(fileSize, partSize);\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n+\t\t\tcalculateNumberOfParts(fileSize, partSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"File size must be at least one byte\", errorMessage);\r\n \t}\r\n-\t\r\n-\t@Test (expected=IllegalArgumentException.class)\r\n-\tpublic void testCalculateNumberOfPartTooSmall(){\r\n+\r\n+\t@Test\r\n+\tpublic void testCalculateNumberOfPartTooSmall() {\r\n \t\tlong fileSize = 1;\r\n-\t\tlong partSize = MIN_PART_SIZE_BYTES-1;\r\n-\t\t//call under test\r\n-\t\tcalculateNumberOfParts(fileSize, partSize);\r\n+\t\tlong partSize = MIN_PART_SIZE_BYTES - 1;\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n+\t\t\tcalculateNumberOfParts(fileSize, partSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"The part size must be at least 5242880 bytes.\", errorMessage);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testCalculateNumberOfPartAtMax(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*MAX_NUMBER_OF_PARTS;\r\n+\tpublic void testCalculateNumberOfPartAtMax() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * MAX_NUMBER_OF_PARTS;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n+\t\t// call under test\r\n \t\tint numberOfParts = calculateNumberOfParts(fileSize, partSize);\r\n \t\tassertEquals(MAX_NUMBER_OF_PARTS, numberOfParts);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testCalculateNumberOfPartOverMax(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*MAX_NUMBER_OF_PARTS+1;\r\n+\tpublic void testCalculateNumberOfPartOverMax() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * MAX_NUMBER_OF_PARTS + 1;\r\n \t\tlong partSize = MIN_PART_SIZE_BYTES;\r\n-\t\t//call under test\r\n-\t\ttry {\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n \t\t\tcalculateNumberOfParts(fileSize, partSize);\r\n-\t\t\tfail(\"Should have thrown an exception\");\r\n-\t\t} catch (IllegalArgumentException e) {\r\n-\t\t\tassertTrue(e.getMessage().contains(\"10001\"));\r\n-\t\t}\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\r\n+\t\t\t\t\"File Upload would require 10001 parts, which exceeds the maximum number of allowed parts of: 10000. Please choose a larger part size.\",\r\n+\t\t\t\terrorMessage);\r\n \t}\r\n-\t\r\n-\t@Test (expected=IllegalArgumentException.class)\r\n-\tpublic void testChoosePartSizeFileSizeLessThanOne(){\r\n+\r\n+\t@Test\r\n+\tpublic void testChoosePartSizeFileSizeLessThanOne() {\r\n \t\tlong fileSize = 0;\r\n-\t\t// call under test\r\n-\t\tchoosePartSize(fileSize);\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n+\t\t\tchoosePartSize(fileSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"File size must be at least one byte\", errorMessage);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testChoosePartSizeFileSizeOne(){\r\n+\tpublic void testChoosePartSizeFileSizeOne() {\r\n \t\tlong fileSize = 1;\r\n \t\t// call under test\r\n \t\tlong partSize = choosePartSize(fileSize);\r\n \t\tassertEquals(MIN_PART_SIZE_BYTES, partSize);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testChoosePartSizeFileSizeMin(){\r\n+\tpublic void testChoosePartSizeFileSizeMin() {\r\n \t\tlong fileSize = MIN_PART_SIZE_BYTES;\r\n \t\t// call under test\r\n \t\tlong partSize = choosePartSize(fileSize);\r\n \t\tassertEquals(MIN_PART_SIZE_BYTES, partSize);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testChoosePartSizeFileSize50GB(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*MAX_NUMBER_OF_PARTS;\r\n+\tpublic void testChoosePartSizeFileSize50GB() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * MAX_NUMBER_OF_PARTS;\r\n \t\t// call under test\r\n \t\tlong partSize = choosePartSize(fileSize);\r\n \t\tassertEquals(MIN_PART_SIZE_BYTES, partSize);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testChoosePartSizeFileSizeOver50GB(){\r\n-\t\tlong fileSize = MIN_PART_SIZE_BYTES*MAX_NUMBER_OF_PARTS+1;\r\n+\tpublic void testChoosePartSizeFileSizeOver50GB() {\r\n+\t\tlong fileSize = MIN_PART_SIZE_BYTES * MAX_NUMBER_OF_PARTS + 1;\r\n \t\t// call under test\r\n \t\tlong partSize = choosePartSize(fileSize);\r\n \t\tassertTrue(partSize > MIN_PART_SIZE_BYTES);\r\n \t}\r\n-\t\r\n-\t@Test (expected=IllegalArgumentException.class)\r\n-\tpublic void testValidateFileSizeUnder(){\r\n+\r\n+\t@Test\r\n+\tpublic void testValidateFileSizeUnder() {\r\n \t\tlong fileSize = 0L;\r\n-\t\t// call under test\r\n-\t\tvalidateFileSize(fileSize);\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n+\t\t\tvalidateFileSize(fileSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"File size must be at least one byte\", errorMessage);\r\n \t}\r\n-\t\r\n-\t@Test (expected=IllegalArgumentException.class)\r\n-\tpublic void testValidateFileSizeOver(){\r\n-\t\tlong fileSize = MAX_FILE_SIZE_BYTES+1L;\r\n-\t\t// call under test\r\n-\t\tvalidateFileSize(fileSize);\r\n+\r\n+\t@Test\r\n+\tpublic void testValidateFileSizeOver() {\r\n+\t\tlong fileSize = MAX_FILE_SIZE_BYTES + 1L;\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\t// call under test\r\n+\t\t\tvalidateFileSize(fileSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"The maximum file size is 5 TB\", errorMessage);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testValidateFileSizeAtSize(){\r\n+\tpublic void testValidateFileSizeAtSize() {\r\n \t\tlong fileSize = MAX_FILE_SIZE_BYTES;\r\n \t\t// call under test\r\n \t\tvalidateFileSize(fileSize);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testValidateFileSizeOne(){\r\n+\tpublic void testValidateFileSizeOne() {\r\n \t\tlong fileSize = 1;\r\n \t\t// call under test\r\n \t\tvalidateFileSize(fileSize);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testValidatePartSize() {\r\n+\t\tlong partSize = PartUtils.MIN_PART_SIZE_BYTES;\r\n+\r\n+\t\tPartUtils.validatePartSize(partSize);\r\n+\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testValidatePartSizeLessThanMin() {\r\n+\t\tlong partSize = PartUtils.MIN_PART_SIZE_BYTES - 1;\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\tPartUtils.validatePartSize(partSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"The part size must be at least 5242880 bytes.\", errorMessage);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testValidatePartSizeNegative() {\r\n+\t\tlong partSize = -1;\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\tPartUtils.validatePartSize(partSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"The part size must be at least 5242880 bytes.\", errorMessage);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testValidatePartSizeLargerThanMax() {\r\n+\t\tlong partSize = PartUtils.MAX_PART_SIZE_BYTES + 1;\r\n+\r\n+\t\tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\r\n+\t\t\tPartUtils.validatePartSize(partSize);\r\n+\t\t}).getMessage();\r\n+\r\n+\t\tassertEquals(\"The part size must not exceed 5368709120 bytes.\", errorMessage);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testGetPartRange() {\r\n+\t\tfinal long partNumber = 1;\r\n+\t\tfinal long partSizeBytes = PartUtils.MIN_PART_SIZE_BYTES;\r\n+\t\tfinal long fileSizeBytes = PartUtils.MAX_PART_SIZE_BYTES;\r\n+\r\n+\t\tlong[] expected = new long[] { 0, partSizeBytes - 1 };\r\n+\r\n+\t\tassertArrayEquals(expected, PartUtils.getPartRange(partNumber, partSizeBytes, fileSizeBytes));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testGetPartRangeLastPart() {\r\n+\t\tfinal long partNumber = 2;\r\n+\t\tfinal long partSizeBytes = PartUtils.MIN_PART_SIZE_BYTES;\r\n+\t\t// Make the file 2 parts, with the second being half a part size\r\n+\t\tfinal long fileSizeBytes = partSizeBytes + partSizeBytes / 2;\r\n+\r\n+\t\tlong[] expected = new long[] { partSizeBytes, (partSizeBytes + partSizeBytes / 2 - 1) };\r", "originalCommit": "cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MzEyMQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4214#discussion_r501943121", "body": "verify etag == md5", "bodyText": "verify etag == md5", "bodyHTML": "<p dir=\"auto\">verify etag == md5</p>", "author": "zimingd", "createdAt": "2020-10-08T18:54:17Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/file/MultipartManagerV2ImplAutowireTest.java", "diffHunk": "@@ -304,6 +325,41 @@ public void testMultipartUploadCopy() throws Exception {\n \t\tassertEquals(sourceFileHandle.getFileName(), copyFileHandle.getFileName());\r\n \t\tassertEquals(sourceFileHandle.getContentMd5(), copyFileHandle.getContentMd5());\r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testMultipartUploadCopyWithPartMd5Check() throws Exception {\r\n+\t\tFileHandleAssociation association = new FileHandleAssociation();\r\n+\t\t\r\n+\t\tassociation.setAssociateObjectType(FileHandleAssociateType.FileEntity);\r\n+\t\tassociation.setAssociateObjectId(sourceEntity.getId());\r\n+\t\tassociation.setFileHandleId(sourceFileHandle.getId());\r\n+\t\t\r\n+\t\t// Since we transfer in one part, the part MD5 is the whole file MD5\r\n+\t\tString fileMD5Hex = sourceFileHandle.getContentMd5();\r\n+\t\t\r\n+\t\t// Starts the multipart copy\r\n+\t\tMultipartUploadStatus status = startUploadCopy(association, destination.getStorageLocationId());\r\n+\t\t\r\n+\t\t// Fetch the part pre-signed url\r\n+\t\tPartPresignedUrl preSignedUrl = getPresignedURLForPart(status.getUploadId(), null, fileMD5Hex);\r\n+\t\t\r\n+\t\t// Make the request to S3\r\n+\t\tString eTag = emptyPUT(preSignedUrl.getUploadPresignedUrl(), preSignedUrl.getSignedHeaders());\r\n+\t\t\r", "originalCommit": "cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0ODgxMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4214#discussion_r501948810", "body": "```suggestion\r\n * useful when a copy is performed on a file that might change while the copy operation has not completed.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * useful when a copy is performed from a file whose content might change during the copy.\n          \n          \n            \n             * useful when a copy is performed on a file that might change while the copy operation has not completed.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> useful when a copy is performed <span class=\"x x-first x-last\">from</span> a file <span class=\"x x-first x-last\">whose content </span>might change <span class=\"x x-first x-last\">during</span> the copy.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> useful when a copy is performed <span class=\"x x-first x-last\">on</span> a file <span class=\"x x-first x-last\">that </span>might change <span class=\"pl-k x x-first x-last\">while</span> the copy<span class=\"x x-first x-last\"> operation has not completed</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zimingd", "createdAt": "2020-10-08T19:04:04Z", "path": "services/repository/src/main/java/org/sagebionetworks/file/controller/UploadController.java", "diffHunk": "@@ -168,6 +171,16 @@\n  * </ol>\n  * </p>\n  * <p>\n+ * Note about the copy integrity: The resulting file handle will have the same content MD5 of the source file handle, but synapse\n+ * does not try to re-compute or verify this value. Instead, the integrity is performed by the cloud provider (currently only S3)\n+ * during the copy request for the part (the request sent to the pre-signed URL). When requesting a batch of pre-signed URLs using the \n+ * <a\n+ * href=\"${POST.file.multipart.uploadId.presigned.url.batch}\">POST\n+ * /file/multipart/{uploadId}/presigned/url/batch</a> service it is possible to specify a list of MD5 checksums for each requested part,\n+ * the pre-signed URL returned will be signed to include a special header that is checked by the underlying cloud provider. This might be\n+ * useful when a copy is performed from a file whose content might change during the copy.", "originalCommit": "cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTE4MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4214#discussion_r501949181", "body": "```suggestion\r\n\t * Each pre-signed URL will expire 15 minute after issued. If a URL has expired, the client will need to request a new URL for that part.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Each per-signed URL will expire 15 minute after issued. If a URL has expired, the client will need to request a new URL for that part.\n          \n          \n            \n            \t * Each pre-signed URL will expire 15 minute after issued. If a URL has expired, the client will need to request a new URL for that part.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Each</span> <span class=\"x x-first x-last\">per</span><span class=\"pl-k\">-</span>signed <span class=\"pl-c1\">URL</span> will expire <span class=\"pl-c1\">15</span> minute after issued. <span class=\"pl-smi\">If</span> a <span class=\"pl-c1\">URL</span> has expired, the client will need to request a <span class=\"pl-k\">new</span> URL for that part.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Each</span> <span class=\"x x-first x-last\">pre</span><span class=\"pl-k\">-</span>signed <span class=\"pl-c1\">URL</span> will expire <span class=\"pl-c1\">15</span> minute after issued. <span class=\"pl-smi\">If</span> a <span class=\"pl-c1\">URL</span> has expired, the client will need to request a <span class=\"pl-k\">new</span> URL for that part.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zimingd", "createdAt": "2020-10-08T19:04:43Z", "path": "services/repository/src/main/java/org/sagebionetworks/file/controller/UploadController.java", "diffHunk": "@@ -865,12 +878,18 @@ public void fileRedirectURLForAffiliate(\n \t}\n \n \t/**\n-\t * Get a batch of pre-signed URLS that should be used to upload file parts.\n-\t * Each part will require a unique pre-signed URL. The client is expected to\n-\t * PUT the contents of each part to the corresponding pre-signed URL. Each\n-\t * per-signed URL will expire 15 minute after issued. If a URL has expired,\n-\t * the client will need to request a new URL for that part.\n-\t * \n+\t * <p>\n+\t * Get a batch of pre-signed URLS that should be used to upload or copy file parts.\n+\t * Each part will require a unique pre-signed URL. For an upload the client is expected to\n+\t * PUT the contents of each part to the corresponding pre-signed URL, while for a copy the request body should be empty. \n+\t * </p>\n+\t * <p>\n+\t * The response will include for each part a pre-signed URL together with a map of signed headers. All the signed headers\n+\t * will need to be sent along with the PUT request.\n+\t * </p>\n+\t * <p>\n+\t * Each per-signed URL will expire 15 minute after issued. If a URL has expired, the client will need to request a new URL for that part.", "originalCommit": "cd89fd26e62f00f468d5ae6cf45d0b272a5f349c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d50631143b3c2f8e8e782b72081acb15c02fd75b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d50631143b3c2f8e8e782b72081acb15c02fd75b", "message": "Doc fix\n\nCo-authored-by: Ziming Dong <zimingd@users.noreply.github.com>", "committedDate": "2020-10-08T19:10:05Z", "type": "commit"}, {"oid": "d50631143b3c2f8e8e782b72081acb15c02fd75b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d50631143b3c2f8e8e782b72081acb15c02fd75b", "message": "Doc fix\n\nCo-authored-by: Ziming Dong <zimingd@users.noreply.github.com>", "committedDate": "2020-10-08T19:10:05Z", "type": "forcePushed"}]}