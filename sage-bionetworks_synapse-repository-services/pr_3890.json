{"pr_number": 3890, "pr_title": "suggest list type columns for annotations with multiple values (PLFM-6013)", "pr_createdAt": "2020-01-14T01:36:56Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890", "merge_commit": "945c2faefd7c99a3e9d96efc122c977ae33bf955", "timeline": [{"oid": "11197923869863d23e78af910d4f428a18515367", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/11197923869863d23e78af910d4f428a18515367", "message": "suggest list type columns for annotations with multiple values", "committedDate": "2020-01-14T01:26:27Z", "type": "commit"}, {"oid": "97f5b51cce59926e85b55c67151f180e0ba9f27c", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/97f5b51cce59926e85b55c67151f180e0ba9f27c", "message": "regenerated hashCode(), equals() and toString() for ColumnAggregation", "committedDate": "2020-01-14T01:39:16Z", "type": "commit"}, {"oid": "e259094809a45fa367568fe95142fa5c27e69d8b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e259094809a45fa367568fe95142fa5c27e69d8b", "message": "fix tests", "committedDate": "2020-01-14T02:06:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NjUwMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367646503", "body": "optional might work better than illegal arg for getListType();", "bodyText": "optional might work better than illegal arg for getListType();", "bodyHTML": "<p dir=\"auto\">optional might work better than illegal arg for getListType();</p>", "author": "john-hill", "createdAt": "2020-01-16T20:59:01Z", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -885,9 +886,19 @@ public ColumnAggregation mapRow(ResultSet rs, int rowNum)\n \t\t\t\tColumnModel model = new ColumnModel();\r\n \t\t\t\tmodel.setName(aggregation.getColumnName());\r\n \t\t\t\tColumnType type = AnnotationType.valueOf(typeString).getColumnType();\r\n+\r\n+\t\t\t\t//check if a LIST columnType needs to be used\r\n+\t\t\t\tif(aggregation.getListSize() > 1){\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\ttype = ColumnTypeListMappings.forNonListType(type).getListType();\r", "originalCommit": "e259094809a45fa367568fe95142fa5c27e69d8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2NjgzNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367666837", "bodyText": "Other parts of code is relying on it throwing an exception being thrown if unexpected usage of  conversion to list type occurs", "author": "zimingd", "createdAt": "2020-01-16T21:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NjUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex bedd2f7871..a493eddbba 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -888,9 +888,9 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\tColumnType type = AnnotationType.valueOf(typeString).getColumnType();\n \n \t\t\t\t//check if a LIST columnType needs to be used\n-\t\t\t\tif(aggregation.getListSize() > 1){\n+\t\t\t\tif(aggregation.getMaxListSize() > 1){\n \t\t\t\t\ttry {\n-\t\t\t\t\t\ttype = ColumnTypeListMappings.forNonListType(type).getListType();\n+\t\t\t\t\t\ttype = ColumnTypeListMappings.listType(type);\n \t\t\t\t\t} catch (IllegalArgumentException e){\n \t\t\t\t\t\t//do nothing because a list type mapping does not exist\n \t\t\t\t\t}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0OTI0Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367649242", "body": "max(json_lenght())\r\nNeed  a test that would show this returns the wrong value.", "bodyText": "max(json_lenght())\nNeed  a test that would show this returns the wrong value.", "bodyHTML": "<p dir=\"auto\">max(json_lenght())<br>\nNeed  a test that would show this returns the wrong value.</p>", "author": "john-hill", "createdAt": "2020-01-16T21:05:33Z", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/table/TableConstants.java", "diffHunk": "@@ -289,10 +292,12 @@ public static Long getReservedColumnId(String columnName) {\n \r\n \tpublic static final String P_LIMIT = \"pLimit\";\r\n \t\r\n-\tpublic static final String SELECT_DISTINCT_ANNOTATION_COLUMNS_TEMPLATE = \"SELECT A.\"\r\n-\t\t\t+ ANNOTATION_REPLICATION_COL_KEY + \", GROUP_CONCAT(DISTINCT A.\"\r\n-\t\t\t+ ANNOTATION_REPLICATION_COL_TYPE + \"), MAX(LENGTH(A.\"\r\n-\t\t\t+ ANNOTATION_REPLICATION_COL_STRING_VALUE + \"))\" + \" FROM \"\r\n+\tpublic static final String SELECT_DISTINCT_ANNOTATION_COLUMNS_TEMPLATE = \"SELECT \"\r\n+\t\t\t+\"A.\" + ANNOTATION_REPLICATION_COL_KEY\r\n+\t\t\t+\", GROUP_CONCAT(DISTINCT A.\" + ANNOTATION_REPLICATION_COL_TYPE + \")\"\r\n+\t\t\t+\", MAX(\"+ANNOTATION_REPLICATION_COL_MAX_STRING_LENGTH+\")\"\r\n+\t\t\t+\", JSON_LENGTH(\"+ANNOTATION_REPLICATION_COL_STRING_LIST_VALUE+\")\"\r", "originalCommit": "e259094809a45fa367568fe95142fa5c27e69d8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "changed_code": [{"header": "diff --git a/lib/models/src/main/java/org/sagebionetworks/repo/model/table/TableConstants.java b/lib/models/src/main/java/org/sagebionetworks/repo/model/table/TableConstants.java\nindex 39ec604797..1802372bcd 100644\n--- a/lib/models/src/main/java/org/sagebionetworks/repo/model/table/TableConstants.java\n+++ b/lib/models/src/main/java/org/sagebionetworks/repo/model/table/TableConstants.java\n", "chunk": "@@ -296,7 +296,7 @@ public class TableConstants {\n \t\t\t+\"A.\" + ANNOTATION_REPLICATION_COL_KEY\n \t\t\t+\", GROUP_CONCAT(DISTINCT A.\" + ANNOTATION_REPLICATION_COL_TYPE + \")\"\n \t\t\t+\", MAX(\"+ANNOTATION_REPLICATION_COL_MAX_STRING_LENGTH+\")\"\n-\t\t\t+\", JSON_LENGTH(\"+ANNOTATION_REPLICATION_COL_STRING_LIST_VALUE+\")\"\n+\t\t\t+\", MAX(JSON_LENGTH(\"+ANNOTATION_REPLICATION_COL_STRING_LIST_VALUE+\"))\"\n \t\t\t+ \" FROM \"\n \t\t\t+ ENTITY_REPLICATION_TABLE + \" AS E\" + \" INNER JOIN \"\n \t\t\t+ ANNOTATION_REPLICATION_TABLE + \" AS A\" + \" ON E.\"\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1MDIwNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367650204", "body": "maxListSize", "bodyText": "maxListSize", "bodyHTML": "<p dir=\"auto\">maxListSize</p>", "author": "john-hill", "createdAt": "2020-01-16T21:07:52Z", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -885,9 +886,19 @@ public ColumnAggregation mapRow(ResultSet rs, int rowNum)\n \t\t\t\tColumnModel model = new ColumnModel();\r\n \t\t\t\tmodel.setName(aggregation.getColumnName());\r\n \t\t\t\tColumnType type = AnnotationType.valueOf(typeString).getColumnType();\r\n+\r\n+\t\t\t\t//check if a LIST columnType needs to be used\r\n+\t\t\t\tif(aggregation.getListSize() > 1){\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\ttype = ColumnTypeListMappings.forNonListType(type).getListType();\r\n+\t\t\t\t\t} catch (IllegalArgumentException e){\r\n+\t\t\t\t\t\t//do nothing because a list type mapping does not exist\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\r\n \t\t\t\tmodel.setColumnType(type);\r\n-\t\t\t\tif(ColumnType.STRING == type) {\r\n-\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxSize());\r\n+\t\t\t\tif(ColumnType.STRING == type || ColumnType.STRING_LIST==type) {\r\n+\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\r", "originalCommit": "e259094809a45fa367568fe95142fa5c27e69d8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex bedd2f7871..a493eddbba 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -888,9 +888,9 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\tColumnType type = AnnotationType.valueOf(typeString).getColumnType();\n \n \t\t\t\t//check if a LIST columnType needs to be used\n-\t\t\t\tif(aggregation.getListSize() > 1){\n+\t\t\t\tif(aggregation.getMaxListSize() > 1){\n \t\t\t\t\ttry {\n-\t\t\t\t\t\ttype = ColumnTypeListMappings.forNonListType(type).getListType();\n+\t\t\t\t\t\ttype = ColumnTypeListMappings.listType(type);\n \t\t\t\t\t} catch (IllegalArgumentException e){\n \t\t\t\t\t\t//do nothing because a list type mapping does not exist\n \t\t\t\t\t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "945c2faefd7c99a3e9d96efc122c977ae33bf955", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex bedd2f7871..48d5b02355 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -888,9 +926,9 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\tColumnType type = AnnotationType.valueOf(typeString).getColumnType();\n \n \t\t\t\t//check if a LIST columnType needs to be used\n-\t\t\t\tif(aggregation.getListSize() > 1){\n+\t\t\t\tif(aggregation.getMaxListSize() > 1){\n \t\t\t\t\ttry {\n-\t\t\t\t\t\ttype = ColumnTypeListMappings.forNonListType(type).getListType();\n+\t\t\t\t\t\ttype = ColumnTypeListMappings.listType(type);\n \t\t\t\t\t} catch (IllegalArgumentException e){\n \t\t\t\t\t\t//do nothing because a list type mapping does not exist\n \t\t\t\t\t}\n", "next_change": {"commit": "706b99c206fc2b1e82c9c63a6a0f1d1881894094", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 48d5b02355..6e3a7529a8 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -929,6 +1008,7 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\tif(aggregation.getMaxListSize() > 1){\n \t\t\t\t\ttry {\n \t\t\t\t\t\ttype = ColumnTypeListMappings.listType(type);\n+\t\t\t\t\t\tmodel.setMaximumListLength(aggregation.getMaxListSize());\n \t\t\t\t\t} catch (IllegalArgumentException e){\n \t\t\t\t\t\t//do nothing because a list type mapping does not exist\n \t\t\t\t\t}\n", "next_change": {"commit": "ce57ee93fb81b759e21858d7c399221f8938ae6c", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 6e3a7529a8..087c75e09e 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1015,8 +1185,12 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\t}\n \n \t\t\t\tmodel.setColumnType(type);\n-\t\t\t\tif(ColumnType.STRING == type || ColumnType.STRING_LIST==type) {\n-\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n+\t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n+\t\t\t\t\tif (aggregation.getMaxStringElementSize() == 0) {\n+\t\t\t\t\t\tmodel.setMaximumSize(DEFAULT_MAX_STRING_SIZE);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tresults.add(model);\n \t\t\t}\n", "next_change": {"commit": "4284892e2a69e5ecffa2450b941f461a424be219", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 087c75e09e..c0eca85f12 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1186,8 +1184,9 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \n \t\t\t\tmodel.setColumnType(type);\n \t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n-\t\t\t\t\tif (aggregation.getMaxStringElementSize() == 0) {\n-\t\t\t\t\t\tmodel.setMaximumSize(DEFAULT_MAX_STRING_SIZE);\n+\t\t\t\t\tif (aggregation.getMaxStringElementSize() == 0L || \n+\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == null) {\n+\t\t\t\t\t\tmodel.setMaximumSize(ColumnConstants.DEFAULT_STRING_SIZE);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n \t\t\t\t\t}\n", "next_change": {"commit": "fc08ef19d4236fa481950b09d63f1d64f39e05f1", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex c0eca85f12..57c486a7c5 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1184,8 +1184,8 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \n \t\t\t\tmodel.setColumnType(type);\n \t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n-\t\t\t\t\tif (aggregation.getMaxStringElementSize() == 0L || \n-\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == null) {\n+\t\t\t\t\tif (aggregation.getMaxStringElementSize() == null || \n+\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == 0) {\n \t\t\t\t\t\tmodel.setMaximumSize(ColumnConstants.DEFAULT_STRING_SIZE);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n", "next_change": {"commit": "289f9d8620e76c99407b83a4a9940664c1214625", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 57c486a7c5..a07df340df 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1185,7 +1185,7 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\tmodel.setColumnType(type);\n \t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n \t\t\t\t\tif (aggregation.getMaxStringElementSize() == null || \n-\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == 0) {\n+\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == 0L) {\n \t\t\t\t\t\tmodel.setMaximumSize(ColumnConstants.DEFAULT_STRING_SIZE);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n", "next_change": {"commit": "9e82b8daec8ae91a4546de2146e797ff06e4797f", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex a07df340df..6436e136bf 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1183,13 +1194,8 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\t}\n \n \t\t\t\tmodel.setColumnType(type);\n-\t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n-\t\t\t\t\tif (aggregation.getMaxStringElementSize() == null || \n-\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == 0L) {\n-\t\t\t\t\t\tmodel.setMaximumSize(ColumnConstants.DEFAULT_STRING_SIZE);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n-\t\t\t\t\t}\n+\t\t\t\tif(ColumnType.STRING == type || ColumnType.STRING_LIST==type) {\n+\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n \t\t\t\t}\n \t\t\t\tresults.add(model);\n \t\t\t}\n", "next_change": {"commit": "878b84dda757c4bda309d2808733c064d99f52fc", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 6436e136bf..87cdbcbf38 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1194,8 +1194,13 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t\t\t\t}\n \n \t\t\t\tmodel.setColumnType(type);\n-\t\t\t\tif(ColumnType.STRING == type || ColumnType.STRING_LIST==type) {\n-\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n+\t\t\t\tif (ColumnType.STRING == type || ColumnType.STRING_LIST == type) {\n+\t\t\t\t\tif (aggregation.getMaxStringElementSize() == null || \n+\t\t\t\t\t\t\taggregation.getMaxStringElementSize() == 0L) {\n+\t\t\t\t\t\tmodel.setMaximumSize(ColumnConstants.DEFAULT_STRING_SIZE);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tmodel.setMaximumSize(aggregation.getMaxStringElementSize());\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tresults.add(model);\n \t\t\t}\n", "next_change": {"commit": "d2fc3185473ad57494bd2f529ff27afa96b01d54", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\nindex 87cdbcbf38..1339d60437 100644\n--- a/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n+++ b/lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java\n", "chunk": "@@ -1209,15 +1197,15 @@ public class TableIndexDAOImpl implements TableIndexDAO {\n \t}\n \t\n \t@Override\n-\tpublic Map<Long, Long> getSumOfChildCRCsForEachParent(ViewObjectType objectType, List<Long> parentIds) {\n-\t\tValidateArgument.required(objectType, \"objectType\");\n+\tpublic Map<Long, Long> getSumOfChildCRCsForEachParent(MainType mainType, List<Long> parentIds) {\n+\t\tValidateArgument.required(mainType, \"mainType\");\n \t\tValidateArgument.required(parentIds, \"parentIds\");\n \t\tfinal Map<Long, Long> results = new HashMap<>();\n \t\tif(parentIds.isEmpty()){\n \t\t\treturn results;\n \t\t}\n \t\tMapSqlParameterSource param = new MapSqlParameterSource();\n-\t\tparam.addValue(OBJECT_TYPE_PARAM_NAME, objectType.name());\n+\t\tparam.addValue(OBJECT_TYPE_PARAM_NAME, mainType.name());\n \t\tparam.addValue(PARENT_ID_PARAM_NAME, parentIds);\n \t\tnamedTemplate.query(SELECT_OBJECT_CHILD_CRC, param, (ResultSet rs) -> {\n \t\t\tLong parentId = rs.getLong(OBJECT_REPLICATION_COL_PARENT_ID);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "945c2faefd7c99a3e9d96efc122c977ae33bf955", "message": "Merge commit", "committedDate": null}, {"oid": "2303aef8009bc116f43ebdc54629c0f810cafc07", "committedDate": "2020-01-16 19:00:42 -0800", "message": "most of the code review changes"}, {"oid": "275763f51781649aaa0c63c7e56b22fb8b9633a7", "committedDate": "2020-01-24 16:22:17 -0800", "message": "Fixed Numeric Type Attributes Issue"}, {"oid": "75ba97c69b5e2299a07ce5ba22913643e432278c", "committedDate": "2020-01-24 16:22:17 -0800", "message": "Removed size of TINYINT"}, {"oid": "5b1bc6f0e967f2c1459b3df71125cf7366b16bce", "committedDate": "2020-01-24 16:22:17 -0800", "message": "Changed to set size when column type has size"}, {"oid": "d1b6a7522500a88266926b91ea133534363b3367", "committedDate": "2020-01-30 18:01:36 -0800", "message": "add method to delete from a list column index table to TableIndexDao"}, {"oid": "e2917db650b20a85155d29697dc768e2dfd49ce0", "committedDate": "2020-02-05 18:03:28 -0800", "message": "low level changes for list column schema change"}, {"oid": "674fa49601db896f5b706f500d0b3a3349b32ad1", "committedDate": "2020-02-06 21:45:18 -0800", "message": "code for diffing required changes with existing list column indexes"}, {"oid": "16ffc4fafd4e864087fcc2bf662fba52f20db1a3", "committedDate": "2020-02-07 18:49:51 -0800", "message": "alter table"}, {"oid": "26dd2658f6f4bf7be6790d48544a52ee11317c77", "committedDate": "2020-02-10 19:34:36 -0800", "message": "finished altering index table"}, {"oid": "519562e507bd63efd8c475922d5ee98a0aa25c24", "committedDate": "2020-02-11 21:16:54 -0800", "message": "can't easily do type conversions"}, {"oid": "a68424c337ba24e81ce1e711bf2ffe1e4918111d", "committedDate": "2020-02-12 18:43:27 -0800", "message": "undo altertemp for index tables. addd some tests"}, {"oid": "f5e0ac04169efc8d7e29bbac15a064d83e0cdea9", "committedDate": "2020-02-13 18:18:08 -0800", "message": "cleanup and tests"}, {"oid": "7786999142246341a9641ff2d004ad35ebcf11ff", "committedDate": "2020-02-17 12:58:38 -0800", "message": "expose both file MD5 and file size as default columns of a view"}, {"oid": "ee8c633bfce683fd6827c8affd8a5e5121482153", "committedDate": "2020-02-17 15:22:57 -0800", "message": "use varchar"}, {"oid": "77343c35cb3a4554a39539eacdc5e82ce59e4502", "committedDate": "2020-04-13 14:04:57 -0700", "message": "PLFM-6158: Added OBJECT_TYPE to replication index"}, {"oid": "7eb7d5252ad1d316277729371e1861b8b1f03fd9", "committedDate": "2020-04-13 14:04:57 -0700", "message": "PLFM-6158: File size storage refactoring"}, {"oid": "3ac68ccba8dab267caf2a26d41ffe1a8b4d9518a", "committedDate": "2020-04-13 14:04:58 -0700", "message": "PLFM-6158: Refactor object data index CRUD"}, {"oid": "8c20f608666217165b66723ac3965874c6462b7c", "committedDate": "2020-04-13 16:52:39 -0700", "message": "PLFM-6158: Additional refactoring of TableIndexDAO OBJECT_TYPE ops"}, {"oid": "73b5c657d9a6747dcbb86596c082f07f1941f4ab", "committedDate": "2020-04-14 19:38:13 -0700", "message": "altertemp for multivalue column dao functions"}, {"oid": "c3c71482811e8a9209a2f0ac0518148f490c491f", "committedDate": "2020-04-14 22:07:06 -0700", "message": "fix sql for update and finsihed test"}, {"oid": "a69ed47d5e17f009bbb54991051f1d21920d5643", "committedDate": "2020-04-15 14:27:00 -0700", "message": "PLFM-6158: Swap object_type and object_id primary and foreign keys"}, {"oid": "20b989f9983bb72dd3f3cc88252d9536fe835c06", "committedDate": "2020-04-15 18:16:34 -0700", "message": "PLFM-6158: Fix for index/table delta query to filter by object type"}, {"oid": "26cad81b6c87d74217f0a9119469e06fb5958f65", "committedDate": "2020-04-15 20:31:26 -0700", "message": "cleanup"}, {"oid": "2f356350572cf6e77e7224ecb1b6de981bf021b3", "committedDate": "2020-04-16 16:40:42 -0700", "message": "Merge pull request #4001 from zimingd/PLFM-6190"}, {"oid": "6314ea261b347230311449cad9db331b76ee8c50", "committedDate": "2020-04-16 16:49:05 -0700", "message": "extract variable for alterTemp=false"}, {"oid": "2601bfb62f72d03be621debd0d23c69b814017e3", "committedDate": "2020-04-17 10:54:40 -0700", "message": "Merge pull request #4003 from marcomarasca/PLFM-6158"}, {"oid": "e93d421277793cd401b507b8c2e6960fe1785544", "committedDate": "2020-04-27 15:30:38 -0700", "message": "PLFM-6158: Initial approach to get rid of EntityField"}, {"oid": "8704ce34eb931fceae3b712bbaec877decdd36c9", "committedDate": "2020-04-29 15:24:00 -0700", "message": "PLFM-6158: Rename of Entity related DTOs"}, {"oid": "706b99c206fc2b1e82c9c63a6a0f1d1881894094", "committedDate": "2020-04-29 20:03:22 -0700", "message": "enforce maximumListLength on entity views"}, {"oid": "711f65c90be2ca85287330e1d94569795c24e347", "committedDate": "2020-04-29 20:10:30 -0700", "message": "Merge branch 'develop' of github.com:Sage-Bionetworks/Synapse-Repository-Services into PLFM-6168"}, {"oid": "3c787570508b453e72e0204282d75ccc245e9b1d", "committedDate": "2020-04-30 20:02:37 -0700", "message": "change list max length sql and push validation down to DAO level"}, {"oid": "f167f447e146c4148050f9aaa2ad2cde60f98486", "committedDate": "2020-05-05 15:18:23 -0700", "message": "PLFM-6158: Dynamic columnType mapping for object fields"}, {"oid": "12abad419cb4205d24388c7ccc53f774202cfb37", "committedDate": "2020-05-05 15:18:23 -0700", "message": "PLFM-6158: Added initial abstractions for metadata index providers"}, {"oid": "82aab5c95d99509baa4c226c6677ffe6891ffc9d", "committedDate": "2020-05-06 21:04:04 -0700", "message": "PLFM-6158: Move providers at the manager level"}, {"oid": "2b84b127afce50ba8646b4f234bd2273448df422", "committedDate": "2020-05-06 21:53:07 -0700", "message": "PLFM-6158: Store view subtype as varchar"}, {"oid": "25b4c8a3156f1050cfbcf2e3d3dbf614355568d8", "committedDate": "2020-05-06 22:38:02 -0700", "message": "PLFM-6158: Remove complexity in scope filter -> SQL"}, {"oid": "d23dc0751d44f995f8a95b92375719b66d2aeee4", "committedDate": "2020-05-07 18:51:00 -0700", "message": "PLFM-6158: Introduce a dedicated enum for supported view object types"}, {"oid": "03acbc62205b1f9d7fffa931fceba5c06e9d18e2", "committedDate": "2020-05-07 19:00:11 -0700", "message": "PLFM-6158: Change the object subtype from a generic enum to string"}, {"oid": "f1ad6154dd34bb04e28e50ee4816206994837ea3", "committedDate": "2020-05-08 16:50:18 -0700", "message": "validate maximum list length on schema change for tables"}, {"oid": "3d29075cb9fc0255fac5ad9d0df5197540c79ec8", "committedDate": "2020-05-08 17:59:31 -0700", "message": "Merge pull request #4039 from Sage-Bionetworks/release-309"}, {"oid": "aaff1f1db50d7f605a8d925a6d57287dc96d1a78", "committedDate": "2020-05-13 12:05:33 -0700", "message": "PLFM-6158: Table index manager refactored"}, {"oid": "48e163e7452b4c1e03e49e9ecdc5e2da7a79f073", "committedDate": "2020-05-13 12:05:34 -0700", "message": "PLFM-6158: Push annotation get/set to metadata index provider"}, {"oid": "36bcd82636fe856711b237227b17ac7a85d758af", "committedDate": "2020-05-13 16:06:19 -0700", "message": "PLFM-6158: Use a bind variable for subtype filtering"}, {"oid": "b0baa59a34af6c828a7e41223282ea4933128482", "committedDate": "2020-06-02 17:56:52 -0700", "message": "PLFM-6262: Exclude from suggested model the custom fields"}, {"oid": "ce919f6e6430adab2eb95efe22baa589dcee0436", "committedDate": "2020-06-03 17:44:19 -0700", "message": "Move determineCauseOfReplicationFailure logic to the manager layer"}, {"oid": "b50ecf5ef15eeef669bc434c15f562cc50fa1667", "committedDate": "2020-06-25 16:43:05 -0700", "message": "PLFM-6306: Fix for race condition on replication"}, {"oid": "8a6899068cf8f541e72910750d4a0d2fdd683a67", "committedDate": "2020-06-25 16:43:05 -0700", "message": "PLFM-6306: Dedup data before replication"}, {"oid": "e7700e909f15dc898c285d9019f10afa28e6add1", "committedDate": "2020-08-18 16:38:57 -0700", "message": "test and fix to update benefactors on snapshots"}, {"oid": "b9e69da8ef34ae73e11b73f835d7af1feb9690a0", "committedDate": "2020-08-19 18:50:25 -0700", "message": "changed the integration test better match the original issue and ensure the view snapshot data is not lost.  Added the remaining unit tests"}, {"oid": "ce57ee93fb81b759e21858d7c399221f8938ae6c", "committedDate": "2021-07-09 00:25:31 -0700", "message": "PLFM-6344"}, {"oid": "4284892e2a69e5ecffa2450b941f461a424be219", "committedDate": "2021-07-09 12:26:15 -0700", "message": "PLFM-6344: Code Review Changes"}, {"oid": "fc08ef19d4236fa481950b09d63f1d64f39e05f1", "committedDate": "2021-07-09 16:03:07 -0700", "message": "PLFM-6344: Handle and test null case, refactor unit tests"}, {"oid": "289f9d8620e76c99407b83a4a9940664c1214625", "committedDate": "2021-07-09 17:22:11 -0700", "message": "PLFM-6344: Put an L"}, {"oid": "9e82b8daec8ae91a4546de2146e797ff06e4797f", "committedDate": "2021-07-19 13:51:14 -0700", "message": "PLFM-6247"}, {"oid": "878b84dda757c4bda309d2808733c064d99f52fc", "committedDate": "2021-07-19 13:51:21 -0700", "message": "Merge remote-tracking branch 'upstream/develop' into PLFM-6247"}, {"oid": "b10dc0b7ddbe426e7dabfdd3baa24ed31aca7c5a", "committedDate": "2021-07-20 22:11:30 -0700", "message": "Some code review changes"}, {"oid": "26661990014c60ca8b3af187aa2de949435be7c5", "committedDate": "2021-07-22 17:33:38 -0700", "message": "Code changes part 2"}, {"oid": "d2fc3185473ad57494bd2f529ff27afa96b01d54", "committedDate": "2021-08-20 12:51:46 -0700", "message": "MainType replaces viewtype with dataset query integration test"}, {"oid": "ffac7a65f742b69cd84bb90f8d06681d22471643", "committedDate": "2021-08-23 18:14:35 -0700", "message": "adding version to both object and annotations, moved ddls to files"}, {"oid": "faefc5eb237d88e65ee2142765f3d0ccc4bac43e", "committedDate": "2021-08-25 18:04:32 -0700", "message": "major view refactor to support versions"}, {"oid": "28253d41c539283135bba002b348c476295c74b5", "committedDate": "2021-08-26 12:23:53 -0700", "message": "TableIndexDAOTest tests now pass"}, {"oid": "54fe4973d0d01cd7f318da08317c551f6ce4e2f8", "committedDate": "2021-08-26 13:23:26 -0700", "message": "tableIndexDao.getObjectData() now uses versions"}, {"oid": "73a3785daef231cd8aaa581233ab77cb71f4ffa5", "committedDate": "2021-08-26 18:35:42 -0700", "message": "dao level tests complile and pass"}, {"oid": "85be358edb068f6719f7852f715a7abe7ce957f5", "committedDate": "2021-08-27 17:01:05 -0700", "message": "still does not compile :("}, {"oid": "17e84ecaf26d4652d6dfca6a2f2d45ab5d5d10ea", "committedDate": "2021-08-30 14:38:06 -0700", "message": "compiles for the first time in a long time"}, {"oid": "c3678a8662056ff066d1e7bc5bd250bf98eda68a", "committedDate": "2021-09-01 13:59:58 -0700", "message": "test commit"}, {"oid": "f8c161fc2377b6d078eb4e868c4b4a2e4134e77f", "committedDate": "2021-09-21 17:38:33 -0700", "message": "moved filters to models"}, {"oid": "c7d07502ca355e65e51214d18c28773b637ca327", "committedDate": "2021-09-23 19:10:46 -0700", "message": "add support to index dao"}, {"oid": "8b746eb1e543aabfb4bc72f5551e23797f8f5131", "committedDate": "2021-09-24 14:20:19 -0700", "message": "code review changes"}, {"oid": "4519c94b0798e6f4d982c5acd0bccde947cecd67", "committedDate": "2021-09-28 11:34:00 -0700", "message": "PLFM-6924: Initial support for building SEARCH change types"}, {"oid": "c2991d9ade275250812e3b83a31df1bf2008a5c9", "committedDate": "2021-09-28 12:07:03 -0700", "message": "tests for synch locks"}, {"oid": "24da3a94cd52445f918725c84451f7c854fef38d", "committedDate": "2021-09-28 13:17:44 -0700", "message": "PLFM-6924: Join search update and schema in same transaction"}, {"oid": "d42b5267245eb30d0817f94941f03b5a011b3a8f", "committedDate": "2021-09-29 16:43:06 -0700", "message": "code review changes"}, {"oid": "919f6b90db2530aacaddc6cfe1c307a591d6246b", "committedDate": "2021-09-29 16:54:23 -0700", "message": "Merge branch 'develop' into PLFM-6924"}, {"oid": "fbeea95ceb0f8fb0eddf2c46d3d25ff0298aa500", "committedDate": "2021-09-30 14:05:24 -0700", "message": "Merge branch 'develop' into PLFM-6924"}, {"oid": "92cf418825a60123e65a4736dfdb0f3ce49cc53e", "committedDate": "2021-10-01 10:14:53 -0700", "message": "PLFM-6926: Add the search status to the current status table"}, {"oid": "dc7f42ee1d3e3ab9c549aa99292d280d9d77b407", "committedDate": "2021-10-02 22:35:35 -0700", "message": "Move from DDLUtils to DBUserHelper"}, {"oid": "cecdb701ea3cf9cc6d189a190d9ba228c32f3cef", "committedDate": "2021-10-05 18:48:54 -0700", "message": "PLFM-6926: Support updating the search index for a set of rows"}, {"oid": "de1703f303d261b943f08e8ce1377f13d9091f98", "committedDate": "2021-10-11 13:29:28 -0700", "message": "Merge branch 'develop' into dev-plfm-5958-3-lib-dbutils"}, {"oid": "cba8f19c6cbd14f4bacf617ca7062c65b98f55a3", "committedDate": "2021-10-26 16:03:27 -0700", "message": "PLFM-6927: Split fetching data from index update"}, {"oid": "b034e48f2f004d57cf3df3ef20bfa50a437ac6bb", "committedDate": "2021-10-26 16:39:33 -0700", "message": "PLFM-6927: Allows to fetch a single page of table data"}, {"oid": "8ec2ee9a2fd00bcad8f5ce0c97e415269465f039", "committedDate": "2021-10-27 18:13:26 -0700", "message": "PLFM-6927: Table re-indexing on certain schema changes"}, {"oid": "a101aedade6c2de4b87c30c847947838cd00c258", "committedDate": "2021-10-27 22:41:25 -0700", "message": "PLFM-6927: Simplifies search data processing"}, {"oid": "9d47abdd5f1766a7063b64969171e9ce60b3c81d", "committedDate": "2021-11-08 18:39:44 -0800", "message": "PLFM-7024: Unconditionally drop the search index on search changes"}, {"oid": "b5000ae9aabe461f106f20eff2b7360d2d69711c", "committedDate": "2021-11-12 16:50:25 -0800", "message": "QueryManager still needs to throw EmptyException for tables with no schemas."}, {"oid": "507a4b847e3beee8ea13a86b182983015ce65fc5", "committedDate": "2021-11-15 13:00:42 -0800", "message": "Merge pull request #4532 from john-hill/PLFM-6964.2"}, {"oid": "beeb5de888db1ab6fa2dfa4d18e074f27eb52a62", "committedDate": "2021-11-23 11:41:14 -0800", "message": "PLFM-7025: Support datasets for computing sum of file sizes"}, {"oid": "e534ec89e75f2b389597b5981f5b8ed1d4956a7c", "committedDate": "2022-01-18 18:39:40 -0800", "message": "added IndexDescription for defining tables/views and materialized views"}, {"oid": "1ae688ba8149709a01c97a8141f8bf4f0577a5df", "committedDate": "2022-01-22 17:56:21 -0800", "message": "first materialized view works"}, {"oid": "0af9cfc5e0f754b22b161685e9e88103c4f6ba52", "committedDate": "2022-07-07 11:19:24 -0700", "message": "PLFM-7367: Persists derived annotation information in replication index"}, {"oid": "9f802cce0435fcb5d82238bef7b9506a98e58f3c", "committedDate": "2022-07-11 09:46:13 -0700", "message": "PLFM-7367: Fix for failing test due to race condition"}, {"oid": "d85de3f7727d2cb4021be1faf917023b69dc2869", "committedDate": "2022-07-28 11:48:36 -0400", "message": "PLFM-7417 - Contextually update error message for undefined view scope"}, {"oid": "17bf2cf8631a22334416bb2f9e13ba6b06469785", "committedDate": "2022-08-11 16:05:06 -0700", "message": "PLFM-7209: Search index for views (and snapshots)"}, {"oid": "36bb4c626499d41b1e20a5f49d5e24943c860a29", "committedDate": "2022-08-11 21:31:22 -0700", "message": "PLFM-7209: Move check on search flag to index state"}, {"oid": "f98ea37da7b1f15bbad2676e293267b10146c60e", "committedDate": "2022-08-12 00:08:00 -0700", "message": "PLFM-7209: Add search column to all table types by default"}, {"oid": "cdc6611792c21d0e1025fc4413ac118d47f20a30", "committedDate": "2022-08-16 11:12:25 -0700", "message": "PLFM-7209: Move search index update to table index manager"}, {"oid": "5ff058732c712b6369ef4a65a1fa46f625b06084", "committedDate": "2022-08-24 15:54:39 -0700", "message": "PLFM-7441: Snapshots are now created from the table index"}, {"oid": "4a76342bac8e011f1095b7b629a95c5bf919e7cb", "committedDate": "2022-08-30 21:47:55 -0700", "message": "PLFM-7295: Adds file type, bucket and key to replication"}, {"oid": "387dc64db76285ebc8c9b215e128cab2211871e7", "committedDate": "2022-09-09 14:47:47 -0700", "message": "TableIndexManager is now a bean, to enable profiling, plus setIndexSchema() will now do nothing if the schema hash already matches the index hash"}, {"oid": "e177c829d93e28d7ad71250126faae94135adc81", "committedDate": "2022-09-15 17:59:23 -0700", "message": "switch to optional MD5 hex"}, {"oid": "9c8556624ed556071d06415da071427a2b6c679e", "committedDate": "2022-09-15 21:55:43 -0700", "message": "PLFM-7471: Account for empty tables with no count"}, {"oid": "025e090c41d0543c9eaef7a7a3e4744ad8113193", "committedDate": "2022-09-16 17:26:26 -0700", "message": "PLFM-7476: Search index updates within transaction"}, {"oid": "3bf4a532cd9897fb0143b0858347400cfd4f261e", "committedDate": "2022-09-16 18:04:21 -0700", "message": "PLFM-7471: Uses MAX(constant) to compute cardinality on non-indexeable columns"}, {"oid": "900d00f006cebf0b372ba4940f677da011ddd8ae", "committedDate": "2022-09-16 19:38:22 -0700", "message": "Merge pull request #4737 from marcomarasca/PLFM-7471"}, {"oid": "1fa3e3ee48fdbe72f5e1479abc5fe73587ebeb92", "committedDate": "2022-09-16 21:45:58 -0700", "message": "Merge pull request #4740 from marcomarasca/PLFM-7476"}, {"oid": "13af634610353349a6b690c325c839a7ce096360", "committedDate": "2022-10-06 13:25:41 -0700", "message": "refactor a new TableType instead of the EntityType"}, {"oid": "69e4a5b6f33998df3c2c8edf8efbd9778ce73afd", "committedDate": "2022-10-06 13:50:29 -0700", "message": "PLFM-7486: Adds description field to object replication"}, {"oid": "aa3fbe248d5fcbbefd192f3270e451aa4f7fab6f", "committedDate": "2022-10-06 17:25:09 -0700", "message": "Fix slow building of view snapshots"}, {"oid": "288db6cbc18ce945bb0ba0a94428f1fc9abf20a6", "committedDate": "2022-10-07 20:27:55 -0700", "message": "Merge pull request #4751 from john-hill/PLFM-7482"}, {"oid": "5923bb9ec47765e24215368b2bfd6a8d305859d5", "committedDate": "2022-10-14 16:38:56 -0700", "message": "Adding checksum amd size to object replication table"}, {"oid": "14823c5aff31aeaef70e25ff55b9e83c4e9307fa", "committedDate": "2022-10-18 15:26:13 -0700", "message": "set item count null"}, {"oid": "74b149e66124e99607a7975bdf00cdb0ce64d099", "committedDate": "2022-10-21 13:39:57 -0700", "message": "changing data type of itemCount to long"}, {"oid": "84f28d490efd3738bb0360a7b40b47ca2c48c5ee", "committedDate": "2022-12-01 07:32:56 -0800", "message": "PLFM-7551: Use tableIndex for stream/restore"}, {"oid": "2640fe980b0d54b832bbe8656c77ea71737099e6", "committedDate": "2022-12-01 12:24:29 -0800", "message": "PLFM-7551: Refactor index manager to expose reset of index and indexing"}, {"oid": "0878f72b65859080ffec91b8129e69768c48c664", "committedDate": "2022-12-01 17:48:22 -0800", "message": "PLFM-7551: Remove dead code"}, {"oid": "36e3222c9dee18a95dbe741fc4ba69e0eedfe5c1", "committedDate": "2022-12-01 18:55:38 -0800", "message": "code review changes"}, {"oid": "0a48b203c847e7e58331a16be7c3576cd51db0ff", "committedDate": "2022-12-02 15:09:53 -0800", "message": "fixed merge conflicts"}, {"oid": "1dc38d169b18b5ec97bba83de53ebb707ec8f2bb", "committedDate": "2022-12-07 08:32:57 -0800", "message": "PLFM-7622: Fix table data export to S3"}, {"oid": "788e61b8ee1b7dbc68851b111d23cc4519a16643", "committedDate": "2022-12-07 13:02:25 -0800", "message": "PLFM-7622: Extract utility to fetch select headers"}, {"oid": "9e5583f430309e4ae2027b8ce45201e3c75cc9de", "committedDate": "2022-12-14 10:51:53 -0800", "message": "PLFM-7616: Add validation on schema change to MEDIUMTEXT"}, {"oid": "6917c8077631613d50c6264edce9241df29cdbca", "committedDate": "2022-12-14 12:03:50 -0800", "message": "PLFM-7616: Includes the row id when data exceeds limit"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1MDY2Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367650667", "body": "all 3s?", "bodyText": "all 3s?", "bodyHTML": "<p dir=\"auto\">all 3s?</p>", "author": "john-hill", "createdAt": "2020-01-16T21:08:53Z", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java", "diffHunk": "@@ -2625,6 +2628,8 @@ public void testWriteAnnotationDtoToPreparedStatementLongList() throws SQLExcept\n \t\tverify(mockPreparedStatement).setString(9, \"[\\\"123\\\",\\\"456\\\",\\\"789\\\"]\");\r", "originalCommit": "e259094809a45fa367568fe95142fa5c27e69d8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java b/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java\nindex c91dfea1c1..6b56ca7a7e 100644\n--- a/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java\n+++ b/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java\n", "chunk": "@@ -2625,10 +2625,10 @@ public class SQLUtilsTest {\n \t\tverify(mockPreparedStatement).setNull(7, Types.VARCHAR);\n \t\tverify(mockPreparedStatement).setNull(8, Types.BOOLEAN);\n \n-\t\tverify(mockPreparedStatement).setString(9, \"[\\\"123\\\",\\\"456\\\",\\\"789\\\"]\");\n-\t\tverify(mockPreparedStatement).setString(10, \"[123,456,789]\");\n+\t\tverify(mockPreparedStatement).setString(9, \"[\\\"123\\\",\\\"4560\\\",\\\"789\\\"]\");\n+\t\tverify(mockPreparedStatement).setString(10, \"[123,4560,789]\");\n \t\tverify(mockPreparedStatement).setString(11, null);\n-\t\tverify(mockPreparedStatement).setLong(12, 3);\n+\t\tverify(mockPreparedStatement).setLong(12, 4);\n \n \t}\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1MTg5OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3890#discussion_r367651899", "body": "first annotation should not be a list.", "bodyText": "first annotation should not be a list.", "bodyHTML": "<p dir=\"auto\">first annotation should not be a list.</p>", "author": "john-hill", "createdAt": "2020-01-16T21:11:55Z", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -1839,28 +1866,84 @@ public void testCaseSensitiveAnnotationNamesPLFM_5449() {\n \t\t// call under test\r\n \t\ttableIndexDAO.addEntityData(Lists.newArrayList(file1));\r\n \t}\r\n+\r\n+\t//PLFM-6013\r\n+\t@Test\r\n+\tpublic void testGetPossibleAnnotationsForContainers_ListColumns(){\r\n+\t\t// delete all data\r\n+\t\ttableIndexDAO.deleteEntityData(Lists.newArrayList(2L,3L));\r\n+\r\n+\r\n+\t\tString annoKey = \"myAnnotation\";\r\n+\r\n+\t\t// setup some hierarchy.\r\n+\t\tEntityDTO file1 = createEntityDTO(2L, EntityType.file, 0);\r\n+\t\tfile1.setParentId(333L);\r\n+\r", "originalCommit": "e259094809a45fa367568fe95142fa5c27e69d8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "changed_code": [{"header": "diff --git a/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java b/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java\nindex 069ace91ab..439ae3bc9f 100644\n--- a/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java\n+++ b/lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java\n", "chunk": "@@ -1884,7 +1884,7 @@ public class TableIndexDAOImplTest {\n \t\tannotationDTO1.setKey(annoKey);\n \t\tannotationDTO1.setType(AnnotationType.STRING);\n \t\tannotationDTO1.setEntityId(2L);\n-\t\tannotationDTO1.setValue(Arrays.asList(\"123\", \"123456\"));\n+\t\tannotationDTO1.setValue(Arrays.asList(\"123\"));\n \t\tfile1.setAnnotations(Collections.singletonList(annotationDTO1));\n \n \t\tEntityDTO file2 = createEntityDTO(3L, EntityType.file, 0);\n", "next_change": null}]}}, {"oid": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "message": "fix bug in ColumnType suggestion and other code review changes", "committedDate": "2020-01-16T21:53:29Z", "type": "commit"}, {"oid": "e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e6b5f02e62e966cdc9edf3d4b626e5e11296a671", "message": "fix bug in ColumnType suggestion and other code review changes", "committedDate": "2020-01-16T21:53:29Z", "type": "forcePushed"}]}