{"pr_number": 1307, "pr_title": "added HttpClient java11 instrumentation for sync requests", "pr_author": "kananindzya", "pr_createdAt": "2020-07-22T17:57:15Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1307", "timeline": [{"oid": "0705d98bed4cce70b4dc678c663e4a0c464f2328", "url": "https://github.com/elastic/apm-agent-java/commit/0705d98bed4cce70b4dc678c663e4a0c464f2328", "message": "added HttpClient java11 instrumentation for sync requests", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "addb289ecc6c6fd21fa2f818107bb2d7db7a5acc", "url": "https://github.com/elastic/apm-agent-java/commit/addb289ecc6c6fd21fa2f818107bb2d7db7a5acc", "message": "added reassigning of HttpRequest argument.", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "29b53d7fabab09d493d32632da98b32324b6271b", "url": "https://github.com/elastic/apm-agent-java/commit/29b53d7fabab09d493d32632da98b32324b6271b", "message": "added test for async calls", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "6ede7dd3ec63aa6a719c0e366873e7fad8a240db", "url": "https://github.com/elastic/apm-agent-java/commit/6ede7dd3ec63aa6a719c0e366873e7fad8a240db", "message": "local", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "07ede6a9463fe290434a34618fb4be05906f5a30", "url": "https://github.com/elastic/apm-agent-java/commit/07ede6a9463fe290434a34618fb4be05906f5a30", "message": "deleted GlobalThreadLocal", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "url": "https://github.com/elastic/apm-agent-java/commit/b5ccdc5d53b7944c6193384dd42306c58d51df76", "message": "added HttpRequests#headers method instrumentation, instead of full cloning of HttpRequest", "committedDate": "2020-08-11T21:34:24Z", "type": "commit"}, {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "url": "https://github.com/elastic/apm-agent-java/commit/b5ccdc5d53b7944c6193384dd42306c58d51df76", "message": "added HttpRequests#headers method instrumentation, instead of full cloning of HttpRequest", "committedDate": "2020-08-11T21:34:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzY3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023679", "body": "don't depend on the exact internal name. instead, use `hasSuperType(named(\"java.net.http.HttpClient\"))` and add a pre matcher with `nameContains(\"HttpClient\")`", "bodyText": "don't depend on the exact internal name. instead, use hasSuperType(named(\"java.net.http.HttpClient\")) and add a pre matcher with nameContains(\"HttpClient\")", "bodyHTML": "<p dir=\"auto\">don't depend on the exact internal name. instead, use <code>hasSuperType(named(\"java.net.http.HttpClient\"))</code> and add a pre matcher with <code>nameContains(\"HttpClient\")</code></p>", "author": "felixbarny", "createdAt": "2020-08-12T06:03:39Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzE1Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469463153", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-08-12T18:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg2NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023864", "body": "rely on the `HttpRequest#header` instrumentation here as well instead of cloning the request", "bodyText": "rely on the HttpRequest#header instrumentation here as well instead of cloning the request", "bodyHTML": "<p dir=\"auto\">rely on the <code>HttpRequest#header</code> instrumentation here as well instead of cloning the request</p>", "author": "felixbarny", "createdAt": "2020-08-12T06:04:12Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NDUyNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469464524", "bodyText": "sorry, I should have deleted this instrumentation. Now I am working on it", "author": "kananindzya", "createdAt": "2020-08-12T18:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDA1Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024057", "body": "replace with `tracer.getActiveExitSpan()`", "bodyText": "replace with tracer.getActiveExitSpan()", "bodyHTML": "<p dir=\"auto\">replace with <code>tracer.getActiveExitSpan()</code></p>", "author": "felixbarny", "createdAt": "2020-08-12T06:04:43Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTEwOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541109", "bodyText": "replaced", "author": "kananindzya", "createdAt": "2020-08-12T20:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDU5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024592", "body": "check for null", "bodyText": "check for null", "bodyHTML": "<p dir=\"auto\">check for null</p>", "author": "felixbarny", "createdAt": "2020-08-12T06:06:08Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort())\n+                .activate();", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTE3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541172", "bodyText": "added check", "author": "kananindzya", "createdAt": "2020-08-12T20:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDcyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024726", "body": "Rename so the name doesn't clash with `co.elastic.apm.agent.http.client.HttpClientHelper`", "bodyText": "Rename so the name doesn't clash with co.elastic.apm.agent.http.client.HttpClientHelper", "bodyHTML": "<p dir=\"auto\">Rename so the name doesn't clash with <code>co.elastic.apm.agent.http.client.HttpClientHelper</code></p>", "author": "felixbarny", "createdAt": "2020-08-12T06:06:28Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice\n+public class HttpClientHelper {", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0Nzc2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471147767", "bodyText": "renamed", "author": "kananindzya", "createdAt": "2020-08-16T19:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTAyNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025025", "body": "When using indy plugins, this annotation is not needed. You can even make the class package-private if you want to.", "bodyText": "When using indy plugins, this annotation is not needed. You can even make the class package-private if you want to.", "bodyHTML": "<p dir=\"auto\">When using indy plugins, this annotation is not needed. You can even make the class package-private if you want to.</p>", "author": "felixbarny", "createdAt": "2020-08-12T06:07:17Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTk2NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541965", "bodyText": "deleted annotation", "author": "kananindzya", "createdAt": "2020-08-12T20:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTMwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025300", "body": "add pre-matcher to speed up matching `nameContains(\"HttpClient\")`", "bodyText": "add pre-matcher to speed up matching nameContains(\"HttpClient\")", "bodyHTML": "<p dir=\"auto\">add pre-matcher to speed up matching <code>nameContains(\"HttpClient\")</code></p>", "author": "felixbarny", "createdAt": "2020-08-12T06:08:07Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {\n+\n+        }\n+\n+        @Nonnull\n+        @AssignTo.Return\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static HttpHeaders onAfterExecute(@Advice.Return @Nonnull final HttpHeaders httpHeaders) {\n+            Span span = tracer.getActiveSpan();\n+            if (span == null) {\n+                return httpHeaders;\n+            }\n+            Map<String, List<String>> headersMap = new LinkedHashMap<>(httpHeaders.map());\n+            span.propagateTraceContext(headersMap, HttpClientRequestPropertyAccessor.instance());\n+            return HttpHeaders.of(headersMap, (x, y) -> true);\n+        }\n+    }\n+", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Mjg4Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469542886", "bodyText": "added pre matcher filter", "author": "kananindzya", "createdAt": "2020-08-12T20:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjc1MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026751", "body": "the return value is a `CompletableFuture`, not a `HttpResponse`.", "bodyText": "the return value is a CompletableFuture, not a HttpResponse.", "bodyHTML": "<p dir=\"auto\">the return value is a <code>CompletableFuture</code>, not a <code>HttpResponse</code>.</p>", "author": "felixbarny", "createdAt": "2020-08-12T06:12:12Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzE1Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543157", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-08-12T20:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjk2MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026961", "body": "You don't have to instrument the CompletableFuture. Just call future.whenComplete", "bodyText": "You don't have to instrument the CompletableFuture. Just call future.whenComplete", "bodyHTML": "<p dir=\"auto\">You don't have to instrument the CompletableFuture. Just call future.whenComplete</p>", "author": "felixbarny", "createdAt": "2020-08-12T06:12:51Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\").and(returns(named(\"java.util.concurrent.CompletableFuture\")));\n+    }\n+\n+    @Override\n+    public boolean indyPlugin() {\n+        return true;\n+    }\n+\n+    public abstract static class AbstractCompletableFutureInstrumentation extends HttpClientAsyncInstrumentation {", "originalCommit": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzMzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543331", "bodyText": "added calling future.whenComplete", "author": "kananindzya", "createdAt": "2020-08-12T20:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjk2MQ=="}], "type": "inlineReview"}, {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806", "url": "https://github.com/elastic/apm-agent-java/commit/2e21017f0a8ebe046322451ebecefbe64e8ca806", "message": "feature fixed HttpClientAsyncInstrumentation according to comments", "committedDate": "2020-08-12T20:54:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjA5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702090", "body": "These creator interfaces are not needed anymore with indy plugins :)\r\nJust directly implement the BiConsumer as a lambda. ", "bodyText": "These creator interfaces are not needed anymore with indy plugins :)\nJust directly implement the BiConsumer as a lambda.", "bodyHTML": "<p dir=\"auto\">These creator interfaces are not needed anymore with indy plugins :)<br>\nJust directly implement the BiConsumer as a lambda.</p>", "author": "felixbarny", "createdAt": "2020-08-13T05:18:27Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreator;\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreatorImpl;\n+import co.elastic.apm.agent.httpclient.helper.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            AsyncCallbackCreator callbackCreator = new AsyncCallbackCreatorImpl();", "originalCommit": "2e21017f0a8ebe046322451ebecefbe64e8ca806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNzM3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470237375", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-08-13T20:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702377", "body": "Doesn\u2019t that propagate the error and crash the agent? Or is it caught somewhere else?", "bodyText": "Doesn\u2019t that propagate the error and crash the agent? Or is it caught somewhere else?", "bodyHTML": "<p dir=\"auto\">Doesn\u2019t that propagate the error and crash the agent? Or is it caught somewhere else?</p>", "author": "felixbarny", "createdAt": "2020-08-13T05:19:38Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "originalCommit": "2e21017f0a8ebe046322451ebecefbe64e8ca806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwNTkwOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469705908", "bodyText": "No, it's not caught anywhere else. Here should I just catch and ignore it?", "author": "kananindzya", "createdAt": "2020-08-13T05:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc5NDMwMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469794302", "bodyText": "Maybe just log your msg on debug. But I'm not sure if that actually works out. Please also try the agent with an older Java version to verify that it doesn't crash.", "author": "felixbarny", "createdAt": "2020-08-13T08:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0Nzg2Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470247862", "bodyText": "I run on on Java 1.8.0_242 via javaagent and got exception\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - service_name: 'spring-hello-service' (source: elasticapm.properties)\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - disable_instrumentations: '' (source: elasticapm.properties)\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - application_packages: 'com.kananinja.apm.spring' (source: elasticapm.properties)\n2020-08-14 03:02:47,267 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - log_level: 'DEBUG' (source: elasticapm.properties)\n2020-08-14 03:02:47,267 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - enable_log_correlation: 'true' (source: elasticapm.properties)\n2020-08-14 03:02:47,268 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\nFailed to start agent\njava.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103)\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386)\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)\nCaused by: java.util.ServiceConfigurationError: unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:134)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:112)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:66)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:86)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136)\n\t... 12 more\nCaused by: java.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:348)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:118)\n\t... 18 more", "author": "kananindzya", "createdAt": "2020-08-13T21:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1MjM3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470252376", "bodyText": "log msg with error level\n2020-08-14 03:11:12,918 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - enable_log_correlation: 'true' (source: elasticapm.properties)\n2020-08-14 03:11:12,920 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\n2020-08-14 03:11:12,942 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:12,949 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:12,954 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:13,014 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpClientInstrumentation\n2020-08-14 03:11:13,022 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientInstrumentation\n2020-08-14 03:11:13,023 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.ag", "author": "kananindzya", "createdAt": "2020-08-13T21:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0OTgwMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470449802", "bodyText": "So it did work out to catch the error?\nI'd just log the message String.format(\"unable to instantiate '%s', unsupported class version error: %s\", implementation, e.getMessage()) on DEBUG log, not print the whole stack trace on ERROR. That's because this exception is expected when running the agent on an older JVM.", "author": "felixbarny", "createdAt": "2020-08-14T07:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMDAxMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471030012", "bodyText": "Yes, error catched and ignored:\n2020-08-16 02:12:33,350 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - log_level: 'DEBUG' (source: Java System Properties)\n2020-08-16 02:12:33,351 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\n2020-08-16 02:12:33,376 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,376 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,377 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,431 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpClientInstrumentation\n2020-08-16 02:12:33,439 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientInstrumentation\n2020-08-16 02:12:33,440 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientRedirectInstrumentati", "author": "kananindzya", "createdAt": "2020-08-15T20:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}], "type": "inlineReview"}, {"oid": "81fb50a42e697ebb5cd43beedb17bcaa05e67393", "url": "https://github.com/elastic/apm-agent-java/commit/81fb50a42e697ebb5cd43beedb17bcaa05e67393", "message": "delete AsyncCallbackCreator, replaced with lambda", "committedDate": "2020-08-13T20:44:32Z", "type": "commit"}, {"oid": "e52412d5bc13e9f19acf3d44feae4c845c217c38", "url": "https://github.com/elastic/apm-agent-java/commit/e52412d5bc13e9f19acf3d44feae4c845c217c38", "message": "added license info", "committedDate": "2020-08-13T21:06:53Z", "type": "commit"}, {"oid": "441883d92f1878400f482d30fde6df85542eaaf6", "url": "https://github.com/elastic/apm-agent-java/commit/441883d92f1878400f482d30fde6df85542eaaf6", "message": "added exception handling, instead of instance return null", "committedDate": "2020-08-13T21:12:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MjgzNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470452837", "body": "Why is this necessary? Doesn't this fail on circular redirects? If so, override the test method to just skip it.", "bodyText": "Why is this necessary? Doesn't this fail on circular redirects? If so, override the test method to just skip it.", "bodyHTML": "<p dir=\"auto\">Why is this necessary? Doesn't this fail on circular redirects? If so, override the test method to just skip it.</p>", "author": "felixbarny", "createdAt": "2020-08-14T07:18:57Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/test/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import org.junit.Before;\n+\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class HttpClientAsyncInstrumentationTest extends AbstractHttpClientInstrumentationTest {\n+    private HttpClient client;\n+\n+    @Before\n+    public void setUp() {\n+        client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NORMAL).build();\n+    }\n+\n+    @Override\n+    protected void performGet(String path) throws Exception {\n+        HttpRequest request = HttpRequest.newBuilder()\n+            .uri(URI.create(path))\n+            .build();\n+        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).get();\n+    }\n+\n+    @Override\n+    protected boolean isIpv6Supported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void assertCircularRedirect() {\n+        assertThat(reporter.getSpans().get(0).getContext().getHttp().getStatusCode()).isEqualTo(303);", "originalCommit": "441883d92f1878400f482d30fde6df85542eaaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzQxMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470717413", "bodyText": "Yes, this fail on circluar redirects.\nOk, I overrided this test method.", "author": "kananindzya", "createdAt": "2020-08-14T16:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MjgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MzQzNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453437", "body": "Can this be removed?", "bodyText": "Can this be removed?", "bodyHTML": "<p dir=\"auto\">Can this be removed?</p>", "author": "felixbarny", "createdAt": "2020-08-14T07:20:24Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {", "originalCommit": "441883d92f1878400f482d30fde6df85542eaaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzYyOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470717628", "bodyText": "Removed", "author": "kananindzya", "createdAt": "2020-08-14T16:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MzQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Mzc2NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453764", "body": "nit: better return here to reduce the level of nesting", "bodyText": "nit: better return here to reduce the level of nesting", "bodyHTML": "<p dir=\"auto\">nit: better return here to reduce the level of nesting</p>", "author": "felixbarny", "createdAt": "2020-08-14T07:21:13Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = tracer.getActiveExitSpan();\n+            if (span != null) {", "originalCommit": "441883d92f1878400f482d30fde6df85542eaaf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxODE0MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470718141", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-08-14T16:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Mzc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1NTkxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470455910", "body": "```suggestion\r\n            if (completableFuture != null) {\r\n                completableFuture.whenComplete((response, throwable) -> {\r\n                    try {\r\n                        if (response != null) {\r\n                            int statusCode = response.statusCode();\r\n                            activeSpan.getContext().getHttp().withStatusCode(statusCode);\r\n                        }\r\n                        activeSpan.captureException(throwable);\r\n                    } finally {\r\n                        activeSpan.end();\r\n                    }\r\n                });\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n          \n          \n            \n                            try {\n          \n          \n            \n                                if (response != null) {\n          \n          \n            \n                                    int statusCode = response.statusCode();\n          \n          \n            \n                                    activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                }\n          \n          \n            \n                                activeSpan.captureException(throwable);\n          \n          \n            \n                            } finally {\n          \n          \n            \n                                activeSpan.end();\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete(callback);\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete((response, throwable) -> {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    if (response != null) {\n          \n          \n            \n                                        int statusCode = response.statusCode();\n          \n          \n            \n                                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    activeSpan.captureException(throwable);\n          \n          \n            \n                                } finally {\n          \n          \n            \n                                    activeSpan.end();\n          \n          \n            \n                                }\n          \n          \n            \n                            });", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">BiConsumer&lt;<span class=\"pl-smi\">HttpResponse</span>, <span class=\"pl-smi\">Throwable</span>&gt;</span> callback <span class=\"pl-k\">=</span> (response, throwable) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">int</span> statusCode <span class=\"pl-k\">=</span> response<span class=\"pl-k\">.</span>statusCode();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        activeSpan<span class=\"pl-k\">.</span>getContext()<span class=\"pl-k\">.</span>getHttp()<span class=\"pl-k\">.</span>withStatusCode(statusCode);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    activeSpan<span class=\"pl-k\">.</span>captureException(throwable);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">finally</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    activeSpan<span class=\"pl-k\">.</span>end();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            };</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (completableFuture <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                completableFuture<span class=\"pl-k\">.</span>whenComplete(callback);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (completableFuture <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                completableFuture<span class=\"pl-k\">.</span>whenComplete((response, throwable) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-k\">int</span> statusCode <span class=\"pl-k\">=</span> response<span class=\"pl-k\">.</span>statusCode();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            activeSpan<span class=\"pl-k\">.</span>getContext()<span class=\"pl-k\">.</span>getHttp()<span class=\"pl-k\">.</span>withStatusCode(statusCode);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        activeSpan<span class=\"pl-k\">.</span>captureException(throwable);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } <span class=\"pl-k\">finally</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        activeSpan<span class=\"pl-k\">.</span>end();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                });</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-08-14T07:26:21Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    activeSpan.captureException(throwable);\n+                } finally {\n+                    activeSpan.end();\n+                }\n+            };\n+            if (completableFuture != null) {\n+                completableFuture.whenComplete(callback);", "originalCommit": "441883d92f1878400f482d30fde6df85542eaaf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a59904dc94ccef65959a82df560875edf1c361c8", "url": "https://github.com/elastic/apm-agent-java/commit/a59904dc94ccef65959a82df560875edf1c361c8", "message": "Update apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java\n\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>", "committedDate": "2020-08-14T16:08:39Z", "type": "commit"}, {"oid": "13bcd418bed3c7877b218502b01c0f6b9b7f42ab", "url": "https://github.com/elastic/apm-agent-java/commit/13bcd418bed3c7877b218502b01c0f6b9b7f42ab", "message": "fixes according to comments", "committedDate": "2020-08-14T16:09:04Z", "type": "commit"}, {"oid": "7bf0539afe2dabb01c1d7ba5380503e6c233978c", "url": "https://github.com/elastic/apm-agent-java/commit/7bf0539afe2dabb01c1d7ba5380503e6c233978c", "message": "Merge branch 'issue-1278-support-java-11-httpclient' of github.com:kananindzya/apm-agent-java into issue-1278-support-java-11-httpclient", "committedDate": "2020-08-14T16:09:14Z", "type": "commit"}, {"oid": "93999ec8b0a96f4db7eddde2712bd4b3b050c4bb", "url": "https://github.com/elastic/apm-agent-java/commit/93999ec8b0a96f4db7eddde2712bd4b3b050c4bb", "message": "fixed return arg", "committedDate": "2020-08-14T16:14:40Z", "type": "commit"}, {"oid": "07ddf8dbcd945e09064fb322bebfd53dda80dd43", "url": "https://github.com/elastic/apm-agent-java/commit/07ddf8dbcd945e09064fb322bebfd53dda80dd43", "message": "fixed logging without print stacktrace", "committedDate": "2020-08-14T16:37:13Z", "type": "commit"}, {"oid": "51f6d4ed7e5a25f7b29338318e855bcc90aa2df4", "url": "https://github.com/elastic/apm-agent-java/commit/51f6d4ed7e5a25f7b29338318e855bcc90aa2df4", "message": "added javadoc plugin", "committedDate": "2020-08-14T21:30:44Z", "type": "commit"}, {"oid": "a7dd77fb262431fa72fa1ac7dbab9f723cfeec4c", "url": "https://github.com/elastic/apm-agent-java/commit/a7dd77fb262431fa72fa1ac7dbab9f723cfeec4c", "message": "updated changelog, supported technologies", "committedDate": "2020-08-15T20:41:19Z", "type": "commit"}, {"oid": "4fefbce7f1a48a7dcafe6f8b0e4f36814ab0de2d", "url": "https://github.com/elastic/apm-agent-java/commit/4fefbce7f1a48a7dcafe6f8b0e4f36814ab0de2d", "message": "Delete hs_err_pid14762.log", "committedDate": "2020-08-16T19:10:13Z", "type": "commit"}, {"oid": "e2335e16ff4bc84b0194bd041268374e8933b2c7", "url": "https://github.com/elastic/apm-agent-java/commit/e2335e16ff4bc84b0194bd041268374e8933b2c7", "message": "rename HttpClientHelper", "committedDate": "2020-08-16T19:13:55Z", "type": "commit"}, {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "url": "https://github.com/elastic/apm-agent-java/commit/2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "message": "Merge branch 'issue-1278-support-java-11-httpclient' of github.com:kananindzya/apm-agent-java into issue-1278-support-java-11-httpclient", "committedDate": "2020-08-16T19:21:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDk4NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471354984", "body": "why is this necessary?", "bodyText": "why is this necessary?", "bodyHTML": "<p dir=\"auto\">why is this necessary?</p>", "author": "felixbarny", "createdAt": "2020-08-17T09:28:18Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClient11Helper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import javax.annotation.Nullable;\n+\n+public class HttpClient11Helper {\n+\n+    private HttpClient11Helper() {\n+    }\n+\n+    @Nullable\n+    protected static CharSequence computeHostName(@Nullable String originalHostName) {\n+        CharSequence hostName = originalHostName;\n+        if (originalHostName != null && originalHostName.contains(\":\") && !originalHostName.startsWith(\"[\")) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.setLength(0);\n+            sb.append(\"[\").append(originalHostName).append(\"]\");", "originalCommit": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjczNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r474426737", "bodyText": "deleted", "author": "kananindzya", "createdAt": "2020-08-21T06:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2MTQ4Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471361487", "body": "Would it be possible to use `co.elastic.apm.agent.http.client.HttpClientHelper#startHttpClientSpan(co.elastic.apm.agent.impl.transaction.AbstractSpan<?>, java.lang.String, java.net.URI, java.lang.CharSequence)` i.e. `HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri, null)`?\r\n\r\nOr are you using the other variant for a particular reason?", "bodyText": "Would it be possible to use co.elastic.apm.agent.http.client.HttpClientHelper#startHttpClientSpan(co.elastic.apm.agent.impl.transaction.AbstractSpan<?>, java.lang.String, java.net.URI, java.lang.CharSequence) i.e. HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri, null)?\nOr are you using the other variant for a particular reason?", "bodyHTML": "<p dir=\"auto\">Would it be possible to use <code>co.elastic.apm.agent.http.client.HttpClientHelper#startHttpClientSpan(co.elastic.apm.agent.impl.transaction.AbstractSpan&lt;?&gt;, java.lang.String, java.net.URI, java.lang.CharSequence)</code> i.e. <code>HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri, null)</code>?</p>\n<p dir=\"auto\">Or are you using the other variant for a particular reason?</p>", "author": "felixbarny", "createdAt": "2020-08-17T09:40:01Z", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.http.client.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),", "originalCommit": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjcxNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r474426715", "bodyText": "replaced", "author": "kananindzya", "createdAt": "2020-08-21T06:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2MTQ4Nw=="}], "type": "inlineReview"}, {"oid": "633f436c765130bd58507bb289094a317a526106", "url": "https://github.com/elastic/apm-agent-java/commit/633f436c765130bd58507bb289094a317a526106", "message": "deleted helper class, change method startHttpClientSpan with URI", "committedDate": "2020-08-21T06:05:16Z", "type": "commit"}, {"oid": "e23951893f614a7e431853c7ce23d394971b711b", "url": "https://github.com/elastic/apm-agent-java/commit/e23951893f614a7e431853c7ce23d394971b711b", "message": "Merge branch 'master' into issue-1278-support-java-11-httpclient", "committedDate": "2020-08-21T07:01:46Z", "type": "commit"}, {"oid": "95bd9f7b0be14a79b90525d49914bf72465552f3", "url": "https://github.com/elastic/apm-agent-java/commit/95bd9f7b0be14a79b90525d49914bf72465552f3", "message": "Merge branch 'master' into issue-1278-support-java-11-httpclient", "committedDate": "2020-08-21T16:02:55Z", "type": "commit"}, {"oid": "ae1dff05d987943f2ddebaff54b9ec16ba15f446", "url": "https://github.com/elastic/apm-agent-java/commit/ae1dff05d987943f2ddebaff54b9ec16ba15f446", "message": "cleanup pom.xml & bump to java 11 for tests", "committedDate": "2020-08-25T15:28:48Z", "type": "commit"}, {"oid": "68971e938a99ef98116ca987f5a025a34486d726", "url": "https://github.com/elastic/apm-agent-java/commit/68971e938a99ef98116ca987f5a025a34486d726", "message": "pom cleanup again", "committedDate": "2020-08-25T15:33:01Z", "type": "commit"}, {"oid": "917ce7fe2aba82142f114856a5e7dc33bb0c1b7e", "url": "https://github.com/elastic/apm-agent-java/commit/917ce7fe2aba82142f114856a5e7dc33bb0c1b7e", "message": "make test ignore consistent", "committedDate": "2020-08-25T15:36:05Z", "type": "commit"}, {"oid": "f31ad4d12aa21e02aea75f3a197560f7ed9d9cce", "url": "https://github.com/elastic/apm-agent-java/commit/f31ad4d12aa21e02aea75f3a197560f7ed9d9cce", "message": "avoid advice nesting & code cleanup", "committedDate": "2020-08-25T15:36:36Z", "type": "commit"}, {"oid": "7d6bea21372cc59b31551e29f3472b815a8de8c3", "url": "https://github.com/elastic/apm-agent-java/commit/7d6bea21372cc59b31551e29f3472b815a8de8c3", "message": "rename plugin to 'jdk-httpclient'", "committedDate": "2020-08-25T16:24:16Z", "type": "commit"}, {"oid": "b6db2256d712fe2c9cfdf119d5d33d3ec61321fa", "url": "https://github.com/elastic/apm-agent-java/commit/b6db2256d712fe2c9cfdf119d5d33d3ec61321fa", "message": "Merge pull request #7 from SylvainJuge/issue-1278-support-java-11-httpclient\n\nIssue 1278 support java 11 httpclient", "committedDate": "2020-08-25T17:53:44Z", "type": "commit"}, {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1", "url": "https://github.com/elastic/apm-agent-java/commit/bc562d109446d937021c0c5a59bbd0f64a5b25c1", "message": "added prefilter for async instrumentation", "committedDate": "2020-08-26T04:42:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTgyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r477075822", "body": "[very minor] potentially return the span here (as an Object) and add a parameter `@Nullable @Advice.Enter Object spanObj` on the exit advice. This can replace the `final Span span = tracer.getActiveExitSpan();` statement in the exit advice.\r\n\r\nThe same can be done in `HttpClientInstrumentation`", "bodyText": "[very minor] potentially return the span here (as an Object) and add a parameter @Nullable @Advice.Enter Object spanObj on the exit advice. This can replace the final Span span = tracer.getActiveExitSpan(); statement in the exit advice.\nThe same can be done in HttpClientInstrumentation", "bodyHTML": "<p dir=\"auto\">[very minor] potentially return the span here (as an Object) and add a parameter <code>@Nullable @Advice.Enter Object spanObj</code> on the exit advice. This can replace the <code>final Span span = tracer.getActiveExitSpan();</code> statement in the exit advice.</p>\n<p dir=\"auto\">The same can be done in <code>HttpClientInstrumentation</code></p>", "author": "felixbarny", "createdAt": "2020-08-26T06:57:51Z", "path": "apm-agent-plugins/apm-jdk-httpclient-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"HttpClient\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"java.net.http.HttpClient\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\")\n+            .and(returns(named(\"java.util.concurrent.CompletableFuture\")))\n+            .and(takesArguments(3));\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+        startSpan(httpRequest);", "originalCommit": "bc562d109446d937021c0c5a59bbd0f64a5b25c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwOTMxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r477109314", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-08-26T08:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTgyMg=="}], "type": "inlineReview"}, {"oid": "4345e2e2653de3382ad7441cfde456a0be1d1818", "url": "https://github.com/elastic/apm-agent-java/commit/4345e2e2653de3382ad7441cfde456a0be1d1818", "message": "return span on method enter, added Advice.Enter argument onMethodExit", "committedDate": "2020-08-26T08:00:05Z", "type": "commit"}, {"oid": "e988686691ee6477b18235afe52b85ed2dfa1fde", "url": "https://github.com/elastic/apm-agent-java/commit/e988686691ee6477b18235afe52b85ed2dfa1fde", "message": "fix javadoc again", "committedDate": "2020-08-26T11:33:10Z", "type": "commit"}]}