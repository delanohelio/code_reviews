{"pr_number": 1150, "pr_title": "Add span_min_duration flag", "pr_author": "felixbarny", "pr_createdAt": "2020-04-21T12:48:41Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1150", "merge_commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "timeline": [{"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999", "url": "https://github.com/elastic/apm-agent-java/commit/692592c41790cd3bfa2b205a37fcce9c897d0999", "message": "Add span_min_duration flag\n\ncloses #1094", "committedDate": "2020-04-21T12:47:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5Nzc0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412697743", "body": "```suggestion\r\n    public <C> void propagateTraceContext (C carrier, TextHeaderSetter<C> headerSetter) {\r\n```\r\n[minor] - Just a thought - not only the technical action of setting headers, but making it clear that this span is doing context propagation (hence the side effect of making the entire call stack non-discardable).", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n          \n          \n            \n                public <C> void propagateTraceContext (C carrier, TextHeaderSetter<C> headerSetter) {\n          \n      \n    \n    \n  \n\n[minor] - Just a thought - not only the technical action of setting headers, but making it clear that this span is doing context propagation (hence the side effect of making the entire call stack non-discardable).", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">C</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">setOutgoingTraceContextHeaders</span>(<span class=\"pl-smi\">C</span> carrier, <span class=\"pl-k\">TextHeaderSetter&lt;<span class=\"pl-smi\">C</span>&gt;</span> headerSetter) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">C</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">propagateTraceContext </span>(<span class=\"pl-smi\">C</span> carrier, <span class=\"pl-k\">TextHeaderSetter&lt;<span class=\"pl-smi\">C</span>&gt;</span> headerSetter) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">[minor] - Just a thought - not only the technical action of setting headers, but making it clear that this span is doing context propagation (hence the side effect of making the entire call stack non-discardable).</p>", "author": "eyalkoren", "createdAt": "2020-04-22T06:13:11Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -435,4 +460,31 @@ public void decrementReferences() {\n \n     protected abstract void recycle();\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex 61215e604..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -467,10 +514,10 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> extends TraceConte\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    public <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         // the context of this span is propagated downstream so we can't discard it even if it's faster than span_min_duration\n         setNonDiscardable();\n-        getTraceContext().setOutgoingTraceContextHeaders(carrier, headerSetter);\n+        getTraceContext().propagateTraceContext(carrier, headerSetter);\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex 61215e604..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -467,10 +514,10 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> extends TraceConte\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    public <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         // the context of this span is propagated downstream so we can't discard it even if it's faster than span_min_duration\n         setNonDiscardable();\n-        getTraceContext().setOutgoingTraceContextHeaders(carrier, headerSetter);\n+        getTraceContext().propagateTraceContext(carrier, headerSetter);\n     }\n \n     /**\n", "next_change": {"commit": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex c18605146..36ccb6af9 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -507,38 +696,21 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n \n     protected abstract void recycle();\n \n-    /**\n-     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the text headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - an HTTP request\n-     */\n+    @Override\n     public <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         // the context of this span is propagated downstream so we can't discard it even if it's faster than span_min_duration\n         setNonDiscardable();\n         getTraceContext().propagateTraceContext(carrier, headerSetter);\n     }\n \n-    /**\n-     * Sets Trace context binary headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the binary headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - a Kafka record\n-     * @return true if Trace Context headers were set; false otherwise\n-     */\n+    @Override\n     public <C> boolean propagateTraceContext(C carrier, BinaryHeaderSetter<C> headerSetter) {\n         // the context of this span is propagated downstream so we can't discard it even if it's faster than span_min_duration\n         setNonDiscardable();\n         return getTraceContext().propagateTraceContext(carrier, headerSetter);\n     }\n \n-    /**\n-     * Sets this context as non-discardable,\n-     * meaning that {@link AbstractSpan#isDiscarded()} will return {@code false},\n-     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n-     */\n+    @Override\n     public void setNonDiscardable() {\n         getTraceContext().setNonDiscardable();\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "025cf2a37e0e81d77c0075548aa8546e50bc6cd2", "committedDate": "2020-05-11 09:36:29 +0200", "message": "Fix currentTransaction() for async spans (#1174)"}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "da06dd51a271656ff43ae2a2af131ab16fb7ea75", "committedDate": "2020-11-10 18:25:58 +0200", "message": "Excluding Spring-JMS specific Runnable from the concurrent plugin (#1496)"}, {"oid": "b09988060dd60cc4956d02b317d73f13fd36b147", "committedDate": "2021-02-09 11:39:38 +0100", "message": "Implement outcome for transactions & spans (#1613)"}, {"oid": "60ca9ca841307706d86d3dd78d1bb8b143d3aab1", "committedDate": "2021-04-01 15:46:07 +0200", "message": "Cassandra instrumentation (#1712)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c249918b7befa6bd84a19614986fea5bab506890", "committedDate": "2021-08-26 20:10:06 +0200", "message": "Migrate Dubbo to indy plugin (#2087)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77", "committedDate": "2022-03-03 11:23:29 -0500", "message": "Added (initial) support for compressing spans (#2477)"}, {"oid": "664e4ff4ef9e61b090bad2e3c8e05cb36452b9cd", "committedDate": "2022-03-15 15:12:35 +0100", "message": "Implemented AWS lambda spec changes (#2424)"}, {"oid": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "committedDate": "2022-03-21 06:13:15 -0400", "message": "OpenTelemetry bridge (#1631)"}, {"oid": "72f88e9188dde6af9f70ddfe5a98bbcd478f4bdb", "committedDate": "2022-04-04 05:19:34 -0400", "message": "Implement default type fallback (#2525)"}, {"oid": "42a2a92913ba49ea6081fb423acda111bd474ce4", "committedDate": "2022-04-11 03:37:03 -0400", "message": "Avoid multiple HttpUrlConnection span ending on nested calls (#2530)"}, {"oid": "a1f1e1882fe52c662cb7e9e042963ab63cc4fdb2", "committedDate": "2022-05-06 02:55:12 -0400", "message": "AWS SDK instrumentation for S3 and DynamoDB (#2606)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "16194061a859e9d0569a29e9cc18f1b047de9228", "committedDate": "2022-07-28 08:59:03 -0400", "message": "Implement otel spanlinks api (#2685)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "9390fc5c6169e65ce8207fa539feef1ec0c78083", "committedDate": "2022-11-15 05:10:42 -0500", "message": "Prevent race-condition on the span name when unnamed spans are ended. (#2867)"}, {"oid": "30ae8d6a2553e26fed9c0b622ec658967be5e392", "committedDate": "2023-01-04 03:15:20 -0500", "message": "Reference counting for buffered spans (#2865)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}, {"oid": "2d9f8cd3510963a90bd12bc06a1ceac886bbf5fe", "committedDate": "2023-05-05 15:21:29 +0200", "message": "Capture S3 bucket+key as otel attributes (#3136)"}, {"oid": "a0d70c4773eb0f59939419e4cc42e4f0f3ca47d9", "committedDate": "2023-06-09 14:30:42 +0000", "message": "Capture 'sync' attribute on async spans (#3164)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412702008", "body": "[major] if possible, we should only expose this on `AbstractSpan` and make the `TraceContext` implementation package private (meaning - removing it from this interface). Now that we allow discarding spans, if there's anything that uses the `TraceContext` implementation directly, our traces will break once spans leading to them are discarded and it will be very difficult to debug.", "bodyText": "[major] if possible, we should only expose this on AbstractSpan and make the TraceContext implementation package private (meaning - removing it from this interface). Now that we allow discarding spans, if there's anything that uses the TraceContext implementation directly, our traces will break once spans leading to them are discarded and it will be very difficult to debug.", "bodyHTML": "<p dir=\"auto\">[major] if possible, we should only expose this on <code>AbstractSpan</code> and make the <code>TraceContext</code> implementation package private (meaning - removing it from this interface). Now that we allow discarding spans, if there's anything that uses the <code>TraceContext</code> implementation directly, our traces will break once spans leading to them are discarded and it will be very difficult to debug.</p>", "author": "eyalkoren", "createdAt": "2020-04-22T06:22:50Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MTY4MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412751680", "bodyText": "I've tried that but it doesn't seem feasible as we allow to activate a TraceContextHolder and we want to be able to do tracer.getActive().setOutgoingTraceContextHeaders. This is needed for the public API and the OpenTracing API bridge, currently.", "author": "felixbarny", "createdAt": "2020-04-22T07:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTgwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413551801", "bodyText": "Do you think it is problematic to allow that it OP and API only if trace.getActive is instanceof AbstractSpan?\nIf you don't want to introduce this restriction, I would at least add a very clear javadoc warning saying that implementations are not equal and the AbstractSpan overload should be preferred whenever possible.", "author": "eyalkoren", "createdAt": "2020-04-23T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTE5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413859190", "bodyText": "It required some refactoring but I've managed to remove TraceContextHolder. Now TraceContext#setOutgoingTraceContextHeaders is package private.", "author": "felixbarny", "createdAt": "2020-04-23T14:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a44c86fa42a158ffedd69d699e69029ea2c7ccc", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\nindex b6781e0af..ec4d57862 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n", "chunk": "@@ -164,25 +115,6 @@ public abstract class TraceContextHolder<T extends TraceContextHolder> implement\n         return getTraceContext().isDiscardable();\n     }\n \n-    /**\n-     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the text headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - an HTTP request\n-     */\n-    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);\n-\n-    /**\n-     * Sets Trace context binary headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the binary headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - a Kafka record\n-     * @return true if Trace Context headers were set; false otherwise\n-     */\n-    public abstract <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter);\n-\n     public void captureException(long epochMicros, Throwable t) {\n         tracer.captureAndReportException(epochMicros, t, this);\n     }\n", "next_change": {"commit": "75160feaf475a467ec347b32a98b24767d70cc52", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\ndeleted file mode 100644\nindex ec4d57862..000000000\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n+++ /dev/null\n", "chunk": "@@ -1,138 +0,0 @@\n-/*-\n- * #%L\n- * Elastic APM Java agent\n- * %%\n- * Copyright (C) 2018 - 2020 Elastic and contributors\n- * %%\n- * Licensed to Elasticsearch B.V. under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch B.V. licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- * #L%\n- */\n-package co.elastic.apm.agent.impl.transaction;\n-\n-import co.elastic.apm.agent.impl.ElasticApmTracer;\n-import co.elastic.apm.agent.objectpool.Recyclable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nullable;\n-\n-/**\n- * An abstraction of both {@link TraceContext} and {@link AbstractSpan}.\n- * Given an instance of this class,\n- * you can create child spans,\n- * capture exceptions and manage activations/scopes.\n- * <p>\n- * This abstraction reliefs clients from having to differ between the case\n- * when the current activation is a {@link TraceContext} vs an {@link AbstractSpan}.\n- * </p>\n- * <p>\n- * A {@link TraceContext} would be active when the current thread does not own the lifecycle of the parent span.\n- * Otherwise an {@link AbstractSpan} would be active.\n- * </p>\n- *\n- * @param <T> the type, used to enable fluent method chaining\n- */\n-public abstract class TraceContextHolder<T extends TraceContextHolder> implements Recyclable {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(TraceContextHolder.class);\n-\n-    protected final ElasticApmTracer tracer;\n-\n-    /**\n-     * Flag to mark a span as representing an exit event\n-     */\n-    private boolean isExit;\n-\n-    protected TraceContextHolder(ElasticApmTracer tracer) {\n-        this.tracer = tracer;\n-    }\n-\n-    public T asExit() {\n-        isExit = true;\n-        return (T) this;\n-    }\n-\n-    public abstract TraceContext getTraceContext();\n-\n-    public abstract Span createSpan();\n-\n-    public abstract Span createSpan(long epochMicros);\n-\n-    /**\n-     * Creates a child Span representing a remote call event, unless this TraceContextHolder already represents an exit event.\n-     * If current TraceContextHolder is representing an Exit- returns null\n-     *\n-     * @return an Exit span if this TraceContextHolder is not an exit span, null otherwise\n-     */\n-    @Nullable\n-    public Span createExitSpan() {\n-        if (isExit) {\n-            return null;\n-        }\n-        return (Span) createSpan().asExit();\n-    }\n-\n-    public abstract boolean isChildOf(TraceContextHolder other);\n-\n-    public boolean isSampled() {\n-        return getTraceContext().isSampled();\n-    }\n-\n-    public boolean isExit() {\n-        return isExit;\n-    }\n-\n-    /**\n-     * Sets this context as non-discardable,\n-     * meaning that {@link AbstractSpan#isDiscarded()} will return {@code false},\n-     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n-     */\n-    public void setNonDiscardable() {\n-        getTraceContext().setNonDiscardable();\n-    }\n-\n-    /**\n-     * Returns whether it's possible to discard this span.\n-     *\n-     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n-     */\n-    public boolean isDiscardable() {\n-        return getTraceContext().isDiscardable();\n-    }\n-\n-    public void captureException(long epochMicros, Throwable t) {\n-        tracer.captureAndReportException(epochMicros, t, this);\n-    }\n-\n-    public T captureException(@Nullable Throwable t) {\n-        if (t != null) {\n-            captureException(getTraceContext().getClock().getEpochMicros(), t);\n-        }\n-        return (T) this;\n-    }\n-\n-    @Nullable\n-    public String captureExceptionAndGetErrorId(@Nullable Throwable t) {\n-        return tracer.captureAndReportException(getTraceContext().getClock().getEpochMicros(), t, this);\n-    }\n-\n-    @Override\n-    public void resetState() {\n-        isExit = false;\n-    }\n-}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\ndeleted file mode 100644\nindex b6781e0af..000000000\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java\n+++ /dev/null\n", "chunk": "@@ -1,216 +0,0 @@\n-/*-\n- * #%L\n- * Elastic APM Java agent\n- * %%\n- * Copyright (C) 2018 - 2020 Elastic and contributors\n- * %%\n- * Licensed to Elasticsearch B.V. under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch B.V. licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- * #L%\n- */\n-package co.elastic.apm.agent.impl.transaction;\n-\n-import co.elastic.apm.agent.impl.ActivationListener;\n-import co.elastic.apm.agent.impl.ElasticApmTracer;\n-import co.elastic.apm.agent.impl.Scope;\n-import co.elastic.apm.agent.objectpool.Recyclable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nullable;\n-import java.util.List;\n-import java.util.concurrent.Callable;\n-\n-/**\n- * An abstraction of both {@link TraceContext} and {@link AbstractSpan}.\n- * Given an instance of this class,\n- * you can create child spans,\n- * capture exceptions and manage activations/scopes.\n- * <p>\n- * This abstraction reliefs clients from having to differ between the case\n- * when the current activation is a {@link TraceContext} vs an {@link AbstractSpan}.\n- * </p>\n- * <p>\n- * A {@link TraceContext} would be active when the current thread does not own the lifecycle of the parent span.\n- * Otherwise an {@link AbstractSpan} would be active.\n- * </p>\n- *\n- * @param <T> the type, used to enable fluent method chaining\n- */\n-public abstract class TraceContextHolder<T extends TraceContextHolder> implements Recyclable {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(TraceContextHolder.class);\n-\n-    protected final ElasticApmTracer tracer;\n-\n-    /**\n-     * Flag to mark a span as representing an exit event\n-     */\n-    private boolean isExit;\n-\n-    protected TraceContextHolder(ElasticApmTracer tracer) {\n-        this.tracer = tracer;\n-    }\n-\n-    public TraceContextHolder<T> asExit() {\n-        isExit = true;\n-        return this;\n-    }\n-\n-    public abstract TraceContext getTraceContext();\n-\n-    public abstract Span createSpan();\n-\n-    public abstract Span createSpan(long epochMicros);\n-\n-    /**\n-     * Creates a child Span representing a remote call event, unless this TraceContextHolder already represents an exit event.\n-     * If current TraceContextHolder is representing an Exit- returns null\n-     *\n-     * @return an Exit span if this TraceContextHolder is not an exit span, null otherwise\n-     */\n-    @Nullable\n-    public Span createExitSpan() {\n-        if (isExit) {\n-            return null;\n-        }\n-        return (Span) createSpan().asExit();\n-    }\n-\n-    public abstract boolean isChildOf(TraceContextHolder other);\n-\n-    public T activate() {\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n-        tracer.activate(this);\n-        return (T) this;\n-    }\n-\n-    public T deactivate() {\n-        tracer.deactivate(this);\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                activationListeners.get(i).afterDeactivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n-        return (T) this;\n-    }\n-\n-    public Scope activateInScope() {\n-        // already in scope\n-        if (tracer.getActive() == this) {\n-            return Scope.NoopScope.INSTANCE;\n-        }\n-        activate();\n-        return new Scope() {\n-            @Override\n-            public void close() {\n-                deactivate();\n-            }\n-        };\n-    }\n-\n-    public boolean isSampled() {\n-        return getTraceContext().isSampled();\n-    }\n-\n-    public boolean isExit() {\n-        return isExit;\n-    }\n-\n-    /**\n-     * Sets this context as non-discardable,\n-     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n-     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n-     */\n-    public void setNonDiscardable() {\n-        getTraceContext().setNonDiscardable();\n-    }\n-\n-    /**\n-     * Returns whether it's possible to discard this span.\n-     *\n-     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n-     */\n-    public boolean isDiscardable() {\n-        return getTraceContext().isDiscardable();\n-    }\n-\n-    /**\n-     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the text headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - an HTTP request\n-     */\n-    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);\n-\n-    /**\n-     * Sets Trace context binary headers, using this context as parent, on the provided carrier using the provided setter\n-     *\n-     * @param carrier      the binary headers carrier\n-     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n-     * @param <C>          the header carrier type, for example - a Kafka record\n-     * @return true if Trace Context headers were set; false otherwise\n-     */\n-    public abstract <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter);\n-\n-    public void captureException(long epochMicros, Throwable t) {\n-        tracer.captureAndReportException(epochMicros, t, this);\n-    }\n-\n-    public T captureException(@Nullable Throwable t) {\n-        if (t != null) {\n-            captureException(getTraceContext().getClock().getEpochMicros(), t);\n-        }\n-        return (T) this;\n-    }\n-\n-    @Nullable\n-    public String captureExceptionAndGetErrorId(@Nullable Throwable t) {\n-        return tracer.captureAndReportException(getTraceContext().getClock().getEpochMicros(), t, this);\n-    }\n-\n-    /**\n-     * Wraps the provided {@link Runnable} and makes this {@link TraceContextHolder} active in the {@link Runnable#run()} method.\n-     */\n-    public abstract Runnable withActive(Runnable runnable);\n-\n-    /**\n-     * Wraps the provided {@link Callable} and makes this {@link TraceContext} active in the {@link Callable#call()} method.\n-     */\n-    public abstract <V> Callable<V> withActive(Callable<V> callable);\n-\n-    @Override\n-    public void resetState() {\n-        isExit = false;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412721981", "body": "It will be great to get rid of this state, just make sure that the combination of `discardRequested`, `discardable`  and `sampled` provide the same meaning as `noop`.", "bodyText": "It will be great to get rid of this state, just make sure that the combination of discardRequested, discardable  and sampled provide the same meaning as noop.", "bodyHTML": "<p dir=\"auto\">It will be great to get rid of this state, just make sure that the combination of <code>discardRequested</code>, <code>discardable</code>  and <code>sampled</code> provide the same meaning as <code>noop</code>.</p>", "author": "eyalkoren", "createdAt": "2020-04-22T07:01:21Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java", "diffHunk": "@@ -79,11 +79,6 @@\n     @Nullable\n     private String result;\n \n-    /**\n-     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n-     */\n-    private boolean noop;", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDQ4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413860481", "bodyText": "It wasn't equivalent. I've reverted the removal of the noop flag. It's also something only needed for the OT API... So maybe remove in a dedicated PR but this one changes too much already.", "author": "felixbarny", "createdAt": "2020-04-23T14:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5d695f69cc9860ef429711ca7225d796cd973ca", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 51e1a4f99..6c07912ff 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -79,6 +80,11 @@ public class Transaction extends AbstractSpan<Transaction> {\n     @Nullable\n     private String result;\n \n+    /**\n+     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n+     */\n+    private boolean noop;\n+\n     /**\n      * Keyword of specific relevance in the service's domain (eg:  'request', 'backgroundjob')\n      * (Required)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 51e1a4f99..702b11951 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -79,6 +80,11 @@ public class Transaction extends AbstractSpan<Transaction> {\n     @Nullable\n     private String result;\n \n+    /**\n+     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n+     */\n+    private boolean noop;\n+\n     /**\n      * Keyword of specific relevance in the service's domain (eg:  'request', 'backgroundjob')\n      * (Required)\n", "next_change": {"commit": "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 702b11951..6f05dceeb 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -92,9 +92,19 @@ public class Transaction extends AbstractSpan<Transaction> {\n     @Nullable\n     private volatile String type;\n \n-\n     private int maxSpans;\n \n+    @Nullable\n+    private String frameworkName;\n+\n+    @Nullable\n+    private String frameworkVersion;\n+\n+    @Override\n+    public Transaction getTransaction() {\n+        return this;\n+    }\n+\n     public Transaction(ElasticApmTracer tracer) {\n         super(tracer);\n     }\n", "next_change": {"commit": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 6f05dceeb..e7c1b7758 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -109,17 +119,13 @@ public class Transaction extends AbstractSpan<Transaction> {\n         super(tracer);\n     }\n \n-    public <T> Transaction start(TraceContext.ChildContextCreator<T> childContextCreator, @Nullable T parent, long epochMicros,\n-                                 Sampler sampler, @Nullable ClassLoader initiatingClassLoader) {\n-        traceContext.setApplicationClassLoader(initiatingClassLoader);\n+    public <T> Transaction start(TraceContext.ChildContextCreator<T> childContextCreator, @Nullable T parent, long epochMicros, Sampler sampler) {\n         boolean startedAsChild = parent != null && childContextCreator.asChildOf(traceContext, parent);\n         onTransactionStart(startedAsChild, epochMicros, sampler);\n         return this;\n     }\n \n-    public <T, A> Transaction start(TraceContext.ChildContextCreatorTwoArg<T, A> childContextCreator, @Nullable T parent, A arg,\n-                                    long epochMicros, Sampler sampler, @Nullable ClassLoader initiatingClassLoader) {\n-        traceContext.setApplicationClassLoader(initiatingClassLoader);\n+    public <T, A> Transaction start(TraceContext.ChildContextCreatorTwoArg<T, A> childContextCreator, @Nullable T parent, A arg, long epochMicros, Sampler sampler) {\n         boolean startedAsChild = childContextCreator.asChildOf(traceContext, parent, arg);\n         onTransactionStart(startedAsChild, epochMicros, sampler);\n         return this;\n", "next_change": {"commit": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex e7c1b7758..44a59db6b 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -132,10 +130,10 @@ public class Transaction extends AbstractSpan<Transaction> {\n     }\n \n     private void onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler) {\n-        maxSpans = tracer.getConfig(CoreConfiguration.class).getTransactionMaxSpans();\n-        spanCompressionEnabled = tracer.getConfig(SpanConfiguration.class).isSpanCompressionEnabled();\n-        spanCompressionExactMatchMaxDurationUs = tracer.getConfig(SpanConfiguration.class).getSpanCompressionExactMatchMaxDuration().getMicros();\n-        spanCompressionSameKindMaxDurationUs = tracer.getConfig(SpanConfiguration.class).getSpanCompressionSameKindMaxDuration().getMicros();\n+        maxSpans = coreConfig.getTransactionMaxSpans();\n+        spanCompressionEnabled = spanConfig.isSpanCompressionEnabled();\n+        spanCompressionExactMatchMaxDurationUs = spanConfig.getSpanCompressionExactMatchMaxDuration().getMicros();\n+        spanCompressionSameKindMaxDurationUs = spanConfig.getSpanCompressionSameKindMaxDuration().getMicros();\n         if (!startedAsChild) {\n             traceContext.asRootSpan(sampler);\n         }\n", "next_change": {"commit": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\nindex 44a59db6b..b3e4e1333 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java\n", "chunk": "@@ -117,26 +120,44 @@ public class Transaction extends AbstractSpan<Transaction> {\n         spanConfig = tracer.getConfig(SpanConfiguration.class);\n     }\n \n-    public <T> Transaction start(TraceContext.ChildContextCreator<T> childContextCreator, @Nullable T parent, long epochMicros, Sampler sampler) {\n-        boolean startedAsChild = parent != null && childContextCreator.asChildOf(traceContext, parent);\n-        onTransactionStart(startedAsChild, epochMicros, sampler);\n+    public <T> Transaction startRoot(long epochMicros, Sampler sampler) {\n+        traceContext.asRootSpan(sampler);\n+        onTransactionStart(epochMicros);\n         return this;\n     }\n \n-    public <T, A> Transaction start(TraceContext.ChildContextCreatorTwoArg<T, A> childContextCreator, @Nullable T parent, A arg, long epochMicros, Sampler sampler) {\n-        boolean startedAsChild = childContextCreator.asChildOf(traceContext, parent, arg);\n-        onTransactionStart(startedAsChild, epochMicros, sampler);\n+    public <T, A extends HeaderGetter<?, T>> Transaction start(TraceContext.ChildContextCreatorTwoArg<T, A> childContextCreator, @Nullable T parent, A arg, long epochMicros, Sampler sampler) {\n+        if (parent == null) {\n+            return startRoot(epochMicros, sampler);\n+        }\n+        CoreConfiguration.TraceContinuationStrategy traceContinuationStrategy = coreConfig.getTraceContinuationStrategy();\n+        boolean restartTrace = false;\n+        if (traceContinuationStrategy.equals(RESTART)) {\n+            restartTrace = true;\n+        } else if (traceContinuationStrategy.equals(RESTART_EXTERNAL)) {\n+            restartTrace = !TraceState.includesElasticVendor(arg, parent);\n+        }\n+        if (restartTrace) {\n+            // need to add a span link\n+            addSpanLink(childContextCreator, arg, parent);\n+            traceContext.asRootSpan(sampler);\n+        } else {\n+            boolean valid = childContextCreator.asChildOf(traceContext, parent, arg);\n+            if (!valid) {\n+                traceContext.asRootSpan(sampler);\n+            }\n+        }\n+\n+        onTransactionStart(epochMicros);\n         return this;\n     }\n \n-    private void onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler) {\n+    private void onTransactionStart(long epochMicros) {\n         maxSpans = coreConfig.getTransactionMaxSpans();\n         spanCompressionEnabled = spanConfig.isSpanCompressionEnabled();\n         spanCompressionExactMatchMaxDurationUs = spanConfig.getSpanCompressionExactMatchMaxDuration().getMicros();\n         spanCompressionSameKindMaxDurationUs = spanConfig.getSpanCompressionSameKindMaxDuration().getMicros();\n-        if (!startedAsChild) {\n-            traceContext.asRootSpan(sampler);\n-        }\n+\n         if (epochMicros >= 0) {\n             setStartTimestamp(epochMicros);\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "025cf2a37e0e81d77c0075548aa8546e50bc6cd2", "committedDate": "2020-05-11 09:36:29 +0200", "message": "Fix currentTransaction() for async spans (#1174)"}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11", "committedDate": "2020-06-10 15:25:00 +0200", "message": "Set framework name and version (#1194)"}, {"oid": "b09988060dd60cc4956d02b317d73f13fd36b147", "committedDate": "2021-02-09 11:39:38 +0100", "message": "Implement outcome for transactions & spans (#1613)"}, {"oid": "125702d26805fc1dcd2ba2a59235bc74e85343b8", "committedDate": "2021-04-19 18:19:06 +0200", "message": "Added support for setting a user's domain (#1756)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "60042453353a4a21f6970082e6e4bb60f53c14bc", "committedDate": "2021-07-13 14:10:02 +0300", "message": "Added support for setting the framework using the public api (#1908) (#1909)"}, {"oid": "6d48460895845a86413680a561aca9f8aed991bb", "committedDate": "2021-10-18 09:37:33 -0400", "message": "Drop transaction metrics (#2194)"}, {"oid": "43b0e11917a4f6eddb38b02bfe7a5917985058d9", "committedDate": "2021-10-26 16:09:35 +0100", "message": "Track metrics for each service individually (#2204) (#2208)"}, {"oid": "72573b6667fc871f707216eb1d8ffcd52d081f25", "committedDate": "2021-12-01 14:53:40 +0200", "message": "Lambda instrumentation (#1951)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77", "committedDate": "2022-03-03 11:23:29 -0500", "message": "Added (initial) support for compressing spans (#2477)"}, {"oid": "e3135256bfbd07adbd1eb8aefca118683934b0ad", "committedDate": "2022-03-14 11:49:03 -0400", "message": "Added support for collecting statistics about dropped exit spans (#2505)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}, {"oid": "72f88e9188dde6af9f70ddfe5a98bbcd478f4bdb", "committedDate": "2022-04-04 05:19:34 -0400", "message": "Implement default type fallback (#2525)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "9390fc5c6169e65ce8207fa539feef1ec0c78083", "committedDate": "2022-11-15 05:10:42 -0500", "message": "Prevent race-condition on the span name when unnamed spans are ended. (#2867)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}, {"oid": "3e4005dff3c41326dd180bc181dd6821c3c3ff51", "committedDate": "2023-05-05 18:06:35 +0200", "message": "Implement partial transactions for AWS Lambda (#3134)"}, {"oid": "fd5e14cb2395fd340511970dc941ebbf4495d563", "committedDate": "2023-05-31 15:36:29 +0200", "message": "Prevent overhead from excessive span creation (#3151)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMzI1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412723254", "body": "Add tests for Errors and for non-sampled transactions", "bodyText": "Add tests for Errors and for non-sampled transactions", "bodyHTML": "<p dir=\"auto\">Add tests for Errors and for non-sampled transactions</p>", "author": "eyalkoren", "createdAt": "2020-04-22T07:03:36Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DiscardSpanTest {", "originalCommit": "692592c41790cd3bfa2b205a37fcce9c897d0999", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5d695f69cc9860ef429711ca7225d796cd973ca", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex e9115102d..f32edd0d3 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -35,6 +36,7 @@ import org.junit.jupiter.api.Test;\n import java.util.HashMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n \n public class DiscardSpanTest {\n     private ElasticApmTracer tracer;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex e9115102d..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -35,6 +36,7 @@ import org.junit.jupiter.api.Test;\n import java.util.HashMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n \n public class DiscardSpanTest {\n     private ElasticApmTracer tracer;\n", "next_change": {"commit": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 9af52dd32..13170ceeb 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -36,7 +30,7 @@ import org.junit.jupiter.api.Test;\n import java.util.HashMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.doReturn;\n \n public class DiscardSpanTest {\n     private ElasticApmTracer tracer;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}]}, {"oid": "f5d695f69cc9860ef429711ca7225d796cd973ca", "url": "https://github.com/elastic/apm-agent-java/commit/f5d695f69cc9860ef429711ca7225d796cd973ca", "message": "Track number of dropped fast spans\n\n- More testing\n- Fixes for interactions of transaction_max_spans and span_min_duration\n- Revert removing noop", "committedDate": "2020-04-22T17:15:06Z", "type": "commit"}, {"oid": "8a44c86fa42a158ffedd69d699e69029ea2c7ccc", "url": "https://github.com/elastic/apm-agent-java/commit/8a44c86fa42a158ffedd69d699e69029ea2c7ccc", "message": "Make only AbstractSpan de/activate-able\n\n- TraceContext can't be de/activated anymore, only AbstractSpans\n  - Removes lots of baggage in the internal API\n  - This was only used to reduce (but not avoid) allocations when using the OpenTracing API bridge\n  - Historically, activating a TraceContext was also needed when activating an ended span.\n    Nowadays, we use reference counting to determine whether it's safe to recycle a span rather than recycling after it's ended and serialized.\n- Avoids context propagation directly via TraceContext which would not mark the span as non-discardable\n- Makes Spans used in OT API bridge non-recyclable\n  - Previously, TraceContext has been used for finished spans\n  - Now, TraceContext can't be activated anymore,\n    thus spans are GC'd rather than recycled so that OT spans can be activated after they have been finished", "committedDate": "2020-04-23T09:18:51Z", "type": "commit"}, {"oid": "75160feaf475a467ec347b32a98b24767d70cc52", "url": "https://github.com/elastic/apm-agent-java/commit/75160feaf475a467ec347b32a98b24767d70cc52", "message": "Remove TraceContextHolder", "committedDate": "2020-04-23T14:15:03Z", "type": "commit"}, {"oid": "87bea92089c81fc2c3befdb9aeec1c0cf5e34707", "url": "https://github.com/elastic/apm-agent-java/commit/87bea92089c81fc2c3befdb9aeec1c0cf5e34707", "message": "Add docs for OT reference count handling", "committedDate": "2020-04-23T14:28:49Z", "type": "commit"}, {"oid": "2097ca46b793cb9ffa49a92e44b1c399a2223f2f", "url": "https://github.com/elastic/apm-agent-java/commit/2097ca46b793cb9ffa49a92e44b1c399a2223f2f", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-04-23T14:34:16Z", "type": "commit"}, {"oid": "b8970f4ef33df4e97283e98c49e6f9bf714fcce5", "url": "https://github.com/elastic/apm-agent-java/commit/b8970f4ef33df4e97283e98c49e6f9bf714fcce5", "message": "Fix JMS tests", "committedDate": "2020-04-23T15:01:56Z", "type": "commit"}, {"oid": "accc953bb3f819e1be35a48aff5bec702c67effa", "url": "https://github.com/elastic/apm-agent-java/commit/accc953bb3f819e1be35a48aff5bec702c67effa", "message": "Fix and test span_count", "committedDate": "2020-04-24T11:04:41Z", "type": "commit"}, {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "url": "https://github.com/elastic/apm-agent-java/commit/c5ca34851a16e99ef4497d2677fbbd77f153c66f", "message": "Fix tests", "committedDate": "2020-04-27T09:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415705434", "body": "If `traceMethodThresholdMicros > 0` - log info about using a deprecated configuration, suggesting the switch to the new one.\r\nIf `traceMethodThresholdMicros == 0` - check the `span_min_duration` config.\r\n\r\nThat is - if we decide to deprecate...", "bodyText": "If traceMethodThresholdMicros > 0 - log info about using a deprecated configuration, suggesting the switch to the new one.\nIf traceMethodThresholdMicros == 0 - check the span_min_duration config.\nThat is - if we decide to deprecate...", "bodyHTML": "<p dir=\"auto\">If <code>traceMethodThresholdMicros &gt; 0</code> - log info about using a deprecated configuration, suggesting the switch to the new one.<br>\nIf <code>traceMethodThresholdMicros == 0</code> - check the <code>span_min_duration</code> config.</p>\n<p dir=\"auto\">That is - if we decide to deprecate...</p>", "author": "eyalkoren", "createdAt": "2020-04-27T10:43:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTEzMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999133", "bodyText": "Removed the deprecated flag (see #1150 (comment)). The span_min_duration flag is checked in ElasticApmTracer#endSpan", "author": "felixbarny", "createdAt": "2020-04-30T13:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "33066205f232ef6e8fce10807f12be9cc1470757", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\nsimilarity index 69%\nrename from apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\nrename to apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\nindex e79f7362e..a4e8653b6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\n", "chunk": "@@ -50,66 +47,25 @@ import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n import static net.bytebuddy.matcher.ElementMatchers.isNative;\n import static net.bytebuddy.matcher.ElementMatchers.isSynthetic;\n import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n-import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n import static net.bytebuddy.matcher.ElementMatchers.not;\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n public class TraceMethodInstrumentation extends ElasticApmInstrumentation {\n \n-    public static long traceMethodThresholdMicros;\n-\n-    protected final MethodMatcher methodMatcher;\n+    private final MethodMatcher methodMatcher;\n+    private final CoreConfiguration config;\n \n     public TraceMethodInstrumentation(ElasticApmTracer tracer, MethodMatcher methodMatcher) {\n         this.methodMatcher = methodMatcher;\n-        traceMethodThresholdMicros = tracer.getConfig(CoreConfiguration.class).getTraceMethodsDurationThreshold().getMillis() * 1000;\n-    }\n-\n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void onMethodEnter(@Advice.Origin Class<?> clazz,\n-                                     @SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature,\n-                                     @Advice.Local(\"span\") AbstractSpan<?> span) {\n-        if (tracer != null) {\n-            final AbstractSpan<?> parent = tracer.getActive();\n-            if (parent == null) {\n-                span = tracer.startRootTransaction(clazz.getClassLoader());\n-                if (span != null) {\n-                    span.withName(signature).activate();\n-                }\n-            } else if (parent.isSampled()) {\n-                span = parent.createSpan()\n-                    .withName(signature)\n-                    .activate();\n-            }\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?> span,\n-                                    @Advice.Thrown @Nullable Throwable t) {\n-        if (span != null) {\n-            span.captureException(t);\n-            final long endTime = span.getTraceContext().getClock().getEpochMicros();\n-            if (span instanceof Span) {\n-                long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {\n-                    span.requestDiscarding();\n-                }\n-            }\n-            span.deactivate().end(endTime);\n-        }\n+        config = tracer.getConfig(CoreConfiguration.class);\n     }\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n         return matches(methodMatcher.getClassMatcher())\n+            .and(not(isProxy()))\n             .and(methodMatcher.getAnnotationMatcher())\n-            .and(not(nameContains(\"$JaxbAccessor\")))\n-            .and(not(nameContains(\"$$\")))\n-            .and(not(nameContains(\"CGLIB\")))\n-            .and(not(nameContains(\"EnhancerBy\")))\n-            .and(not(nameContains(\"$Proxy\")))\n             .and(declaresMethod(matches(methodMatcher.getMethodMatcher())));\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "b0dbda275335adf618d1e4c8fc94a53ce19f6764", "committedDate": "2020-07-02 15:42:55 +0200", "message": "Indy plugins (#1230)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "8d85a214239ed514d3c3d924d154cb22c9f4a898", "committedDate": "2020-08-17 16:41:30 +0200", "message": "Deprecate non-indy plugins (#1329)"}, {"oid": "0465d479430172c3e745afd2ef5b62a3da6b60aa", "committedDate": "2021-04-12 20:16:48 +0200", "message": "Do not instrument proxies (#1735) (#1738)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728732", "body": "[minor]\r\n```suggestion\r\n    void onActivate(ErrorCapture error) throws Throwable;\r\n```\r\nThere is no meaning for before and after in case of errors, as they are not added/removed to/from a stack, right?", "bodyText": "[minor]\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void beforeActivate(ErrorCapture error) throws Throwable;\n          \n          \n            \n                void onActivate(ErrorCapture error) throws Throwable;\n          \n      \n    \n    \n  \n\nThere is no meaning for before and after in case of errors, as they are not added/removed to/from a stack, right?", "bodyHTML": "<p dir=\"auto\">[minor]</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">beforeActivate</span>(<span class=\"pl-smi\">ErrorCapture</span> error) throws <span class=\"pl-smi\">Throwable</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">onActivate</span>(<span class=\"pl-smi\">ErrorCapture</span> error) throws <span class=\"pl-smi\">Throwable</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">There is no meaning for before and after in case of errors, as they are not added/removed to/from a stack, right?</p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:22:09Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTcyNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999727", "bodyText": "Yes, that's true. I chose this name to be consistent with spans, but I don't have a strong option about it.", "author": "felixbarny", "createdAt": "2020-04-30T13:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\nindex f37ba8f8b..4461a537e 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\n", "chunk": "@@ -43,14 +36,6 @@ public interface ActivationListener {\n      */\n     void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n-    /**\n-     * A callback for {@link ErrorCapture#activate()}\n-     *\n-     * @param error the {@link ErrorCapture} that is being activated\n-     * @throws Throwable if there was an error while calling this method\n-     */\n-    void beforeActivate(ErrorCapture error) throws Throwable;\n-\n     /**\n      * A callback for {@link AbstractSpan#deactivate()}\n      * <p>\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "36ff1f18db1c89ec9c2bb185035fa162ce6de9f9", "committedDate": "2021-05-28 09:32:13 +0200", "message": "add Spring Webflux server support (#1305)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODk2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728967", "body": "[minor]\r\n```suggestion\r\n    void onDeactivate(ErrorCapture deactivatedError) throws Throwable;\r\n```", "bodyText": "[minor]\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;\n          \n          \n            \n                void onDeactivate(ErrorCapture deactivatedError) throws Throwable;", "bodyHTML": "<p dir=\"auto\">[minor]</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"72\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">afterDeactivate</span>(<span class=\"pl-smi\">ErrorCapture</span> deactivatedError) throws <span class=\"pl-smi\">Throwable</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"72\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">onDeactivate</span>(<span class=\"pl-smi\">ErrorCapture</span> deactivatedError) throws <span class=\"pl-smi\">Throwable</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "eyalkoren", "createdAt": "2020-04-27T11:22:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;\n+\n+    /**\n+     * A callback for {@link AbstractSpan#deactivate()}\n      * <p>\n      * Note: the corresponding span may already be {@link AbstractSpan#end() ended} and {@link AbstractSpan#resetState() recycled}.\n-     * That's why there is no {@link TraceContextHolder} parameter.\n+     * That's why there is no {@link AbstractSpan} parameter.\n      * </p>\n      *\n-     * @param deactivatedContext the context which has just been deactivated\n+     * @param deactivatedSpan the context that has just been deactivated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void afterDeactivate(AbstractSpan<?> deactivatedSpan) throws Throwable;\n+\n+    /**\n+     * A callback for {@link ErrorCapture#deactivate()}\n+     *\n+     * @param deactivatedError the error that has just been deactivated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void afterDeactivate(TraceContextHolder<?> deactivatedContext) throws Throwable;\n+    void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\nindex f37ba8f8b..4461a537e 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java\n", "chunk": "@@ -62,12 +47,4 @@ public interface ActivationListener {\n      * @throws Throwable if there was an error while calling this method\n      */\n     void afterDeactivate(AbstractSpan<?> deactivatedSpan) throws Throwable;\n-\n-    /**\n-     * A callback for {@link ErrorCapture#deactivate()}\n-     *\n-     * @param deactivatedError the error that has just been deactivated\n-     * @throws Throwable if there was an error while calling this method\n-     */\n-    void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "36ff1f18db1c89ec9c2bb185035fa162ce6de9f9", "committedDate": "2021-05-28 09:32:13 +0200", "message": "add Spring Webflux server support (#1305)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMzgzOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415733838", "body": "[minor] same - moving the listeners iteration", "bodyText": "[minor] same - moving the listeners iteration", "bodyHTML": "<p dir=\"auto\">[minor] same - moving the listeners iteration</p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:30:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n+        for (int i = 0; i < activationListeners.size(); i++) {\n+            try {\n+                activationListeners.get(i).beforeActivate(this);\n+            } catch (Error e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n+            }\n+        }\n+        tracer.activate(this);\n+        return (T) this;\n     }\n \n-    @Override\n     public T deactivate() {\n         try {\n-            return super.deactivate();\n+            tracer.deactivate(this);\n+            List<ActivationListener> activationListeners = tracer.getActivationListeners();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n", "next_change": {"commit": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex c18605146..0ab3d9b9b 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -400,56 +480,50 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n         }\n     }\n \n+    /**\n+     * @return true if outcome has NOT been set, either by user or through instrumentation\n+     */\n+    protected boolean outcomeNotSet() {\n+        return userOutcome == null && outcome == null;\n+    }\n+\n+    /**\n+     * @return true if an exception has been captured\n+     */\n+    protected boolean hasCapturedExceptions() {\n+        return hasCapturedExceptions;\n+    }\n+\n     protected abstract void beforeEnd(long epochMicros);\n \n     protected abstract void afterEnd();\n \n+    public boolean isChildOf(AbstractSpan<?> parent) {\n+        return traceContext.isChildOf(parent.traceContext) || parent.hasChildId(traceContext.getId());\n+    }\n+\n+    private boolean hasChildId(Id spanId) {\n+        if (childIds != null) {\n+            return childIds.contains(spanId.readLong(0));\n+        }\n+        return false;\n+    }\n+\n+    @Override\n     public T activate() {\n         tracer.activate(this);\n         return (T) this;\n     }\n \n+    @Override\n     public T deactivate() {\n         tracer.deactivate(this);\n         return (T) this;\n     }\n \n+    @Override\n     public Scope activateInScope() {\n-        // already in scope\n-        if (tracer.getActive() == this) {\n-            return Scope.NoopScope.INSTANCE;\n-        }\n-        activate();\n-        return new Scope() {\n-            @Override\n-            public void close() {\n-                deactivate();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n-     *\n-     * <p>\n-     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n-     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n-     * </p>\n-     */\n-    public Runnable withActive(Runnable runnable) {\n-        return tracer.wrapRunnable(runnable, this);\n-    }\n-\n-    /**\n-     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n-     *\n-     * <p>\n-     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n-     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n-     * </p>\n-     */\n-    public <V> Callable<V> withActive(Callable<V> callable) {\n-        return tracer.wrapCallable(callable, this);\n+        return tracer.activateInScope(this);\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "025cf2a37e0e81d77c0075548aa8546e50bc6cd2", "committedDate": "2020-05-11 09:36:29 +0200", "message": "Fix currentTransaction() for async spans (#1174)"}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "da06dd51a271656ff43ae2a2af131ab16fb7ea75", "committedDate": "2020-11-10 18:25:58 +0200", "message": "Excluding Spring-JMS specific Runnable from the concurrent plugin (#1496)"}, {"oid": "b09988060dd60cc4956d02b317d73f13fd36b147", "committedDate": "2021-02-09 11:39:38 +0100", "message": "Implement outcome for transactions & spans (#1613)"}, {"oid": "60ca9ca841307706d86d3dd78d1bb8b143d3aab1", "committedDate": "2021-04-01 15:46:07 +0200", "message": "Cassandra instrumentation (#1712)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c249918b7befa6bd84a19614986fea5bab506890", "committedDate": "2021-08-26 20:10:06 +0200", "message": "Migrate Dubbo to indy plugin (#2087)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77", "committedDate": "2022-03-03 11:23:29 -0500", "message": "Added (initial) support for compressing spans (#2477)"}, {"oid": "664e4ff4ef9e61b090bad2e3c8e05cb36452b9cd", "committedDate": "2022-03-15 15:12:35 +0100", "message": "Implemented AWS lambda spec changes (#2424)"}, {"oid": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "committedDate": "2022-03-21 06:13:15 -0400", "message": "OpenTelemetry bridge (#1631)"}, {"oid": "72f88e9188dde6af9f70ddfe5a98bbcd478f4bdb", "committedDate": "2022-04-04 05:19:34 -0400", "message": "Implement default type fallback (#2525)"}, {"oid": "42a2a92913ba49ea6081fb423acda111bd474ce4", "committedDate": "2022-04-11 03:37:03 -0400", "message": "Avoid multiple HttpUrlConnection span ending on nested calls (#2530)"}, {"oid": "a1f1e1882fe52c662cb7e9e042963ab63cc4fdb2", "committedDate": "2022-05-06 02:55:12 -0400", "message": "AWS SDK instrumentation for S3 and DynamoDB (#2606)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "16194061a859e9d0569a29e9cc18f1b047de9228", "committedDate": "2022-07-28 08:59:03 -0400", "message": "Implement otel spanlinks api (#2685)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "9390fc5c6169e65ce8207fa539feef1ec0c78083", "committedDate": "2022-11-15 05:10:42 -0500", "message": "Prevent race-condition on the span name when unnamed spans are ended. (#2867)"}, {"oid": "30ae8d6a2553e26fed9c0b622ec658967be5e392", "committedDate": "2023-01-04 03:15:20 -0500", "message": "Reference counting for buffered spans (#2865)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}, {"oid": "2d9f8cd3510963a90bd12bc06a1ceac886bbf5fe", "committedDate": "2023-05-05 15:21:29 +0200", "message": "Capture S3 bucket+key as otel attributes (#3136)"}, {"oid": "a0d70c4773eb0f59939419e4cc42e4f0f3ca47d9", "committedDate": "2023-06-09 14:30:42 +0000", "message": "Capture 'sync' attribute on async spans (#3164)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415734419", "body": "[minor] Wouldn't this iteration over listeners make more sense if done at the beginning of `ElasticApmTracer#activate`?", "bodyText": "[minor] Wouldn't this iteration over listeners make more sense if done at the beginning of ElasticApmTracer#activate?", "bodyHTML": "<p dir=\"auto\">[minor] Wouldn't this iteration over listeners make more sense if done at the beginning of <code>ElasticApmTracer#activate</code>?</p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:31:31Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDU1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000555", "bodyText": "Yes, this way there's no chance to skip activation listeners by directly calling ElasticApmTracer#endSpan", "author": "felixbarny", "createdAt": "2020-04-30T13:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex f1b8a7489..c18605146 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -407,39 +405,13 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n     protected abstract void afterEnd();\n \n     public T activate() {\n-        incrementReferences();\n-        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-        for (int i = 0; i < activationListeners.size(); i++) {\n-            try {\n-                activationListeners.get(i).beforeActivate(this);\n-            } catch (Error e) {\n-                throw e;\n-            } catch (Throwable t) {\n-                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-            }\n-        }\n         tracer.activate(this);\n         return (T) this;\n     }\n \n     public T deactivate() {\n-        try {\n-            tracer.deactivate(this);\n-            List<ActivationListener> activationListeners = tracer.getActivationListeners();\n-            for (int i = 0; i < activationListeners.size(); i++) {\n-                try {\n-                    // `this` is guaranteed to not be recycled yet as the reference count is only decremented after this method has executed\n-                    activationListeners.get(i).afterDeactivate(this);\n-                } catch (Error e) {\n-                    throw e;\n-                } catch (Throwable t) {\n-                    logger.warn(\"Exception while calling {}#afterDeactivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n-                }\n-            }\n-            return (T) this;\n-        } finally {\n-            decrementReferences();\n-        }\n+        tracer.deactivate(this);\n+        return (T) this;\n     }\n \n     public Scope activateInScope() {\n", "next_change": {"commit": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\nindex c18605146..0ab3d9b9b 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java\n", "chunk": "@@ -400,56 +480,50 @@ public abstract class AbstractSpan<T extends AbstractSpan<T>> implements Recycla\n         }\n     }\n \n+    /**\n+     * @return true if outcome has NOT been set, either by user or through instrumentation\n+     */\n+    protected boolean outcomeNotSet() {\n+        return userOutcome == null && outcome == null;\n+    }\n+\n+    /**\n+     * @return true if an exception has been captured\n+     */\n+    protected boolean hasCapturedExceptions() {\n+        return hasCapturedExceptions;\n+    }\n+\n     protected abstract void beforeEnd(long epochMicros);\n \n     protected abstract void afterEnd();\n \n+    public boolean isChildOf(AbstractSpan<?> parent) {\n+        return traceContext.isChildOf(parent.traceContext) || parent.hasChildId(traceContext.getId());\n+    }\n+\n+    private boolean hasChildId(Id spanId) {\n+        if (childIds != null) {\n+            return childIds.contains(spanId.readLong(0));\n+        }\n+        return false;\n+    }\n+\n+    @Override\n     public T activate() {\n         tracer.activate(this);\n         return (T) this;\n     }\n \n+    @Override\n     public T deactivate() {\n         tracer.deactivate(this);\n         return (T) this;\n     }\n \n+    @Override\n     public Scope activateInScope() {\n-        // already in scope\n-        if (tracer.getActive() == this) {\n-            return Scope.NoopScope.INSTANCE;\n-        }\n-        activate();\n-        return new Scope() {\n-            @Override\n-            public void close() {\n-                deactivate();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n-     *\n-     * <p>\n-     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n-     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n-     * </p>\n-     */\n-    public Runnable withActive(Runnable runnable) {\n-        return tracer.wrapRunnable(runnable, this);\n-    }\n-\n-    /**\n-     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n-     *\n-     * <p>\n-     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n-     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n-     * </p>\n-     */\n-    public <V> Callable<V> withActive(Callable<V> callable) {\n-        return tracer.wrapCallable(callable, this);\n+        return tracer.activateInScope(this);\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "025cf2a37e0e81d77c0075548aa8546e50bc6cd2", "committedDate": "2020-05-11 09:36:29 +0200", "message": "Fix currentTransaction() for async spans (#1174)"}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "da06dd51a271656ff43ae2a2af131ab16fb7ea75", "committedDate": "2020-11-10 18:25:58 +0200", "message": "Excluding Spring-JMS specific Runnable from the concurrent plugin (#1496)"}, {"oid": "b09988060dd60cc4956d02b317d73f13fd36b147", "committedDate": "2021-02-09 11:39:38 +0100", "message": "Implement outcome for transactions & spans (#1613)"}, {"oid": "60ca9ca841307706d86d3dd78d1bb8b143d3aab1", "committedDate": "2021-04-01 15:46:07 +0200", "message": "Cassandra instrumentation (#1712)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c249918b7befa6bd84a19614986fea5bab506890", "committedDate": "2021-08-26 20:10:06 +0200", "message": "Migrate Dubbo to indy plugin (#2087)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77", "committedDate": "2022-03-03 11:23:29 -0500", "message": "Added (initial) support for compressing spans (#2477)"}, {"oid": "664e4ff4ef9e61b090bad2e3c8e05cb36452b9cd", "committedDate": "2022-03-15 15:12:35 +0100", "message": "Implemented AWS lambda spec changes (#2424)"}, {"oid": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "committedDate": "2022-03-21 06:13:15 -0400", "message": "OpenTelemetry bridge (#1631)"}, {"oid": "72f88e9188dde6af9f70ddfe5a98bbcd478f4bdb", "committedDate": "2022-04-04 05:19:34 -0400", "message": "Implement default type fallback (#2525)"}, {"oid": "42a2a92913ba49ea6081fb423acda111bd474ce4", "committedDate": "2022-04-11 03:37:03 -0400", "message": "Avoid multiple HttpUrlConnection span ending on nested calls (#2530)"}, {"oid": "a1f1e1882fe52c662cb7e9e042963ab63cc4fdb2", "committedDate": "2022-05-06 02:55:12 -0400", "message": "AWS SDK instrumentation for S3 and DynamoDB (#2606)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "16194061a859e9d0569a29e9cc18f1b047de9228", "committedDate": "2022-07-28 08:59:03 -0400", "message": "Implement otel spanlinks api (#2685)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "9390fc5c6169e65ce8207fa539feef1ec0c78083", "committedDate": "2022-11-15 05:10:42 -0500", "message": "Prevent race-condition on the span name when unnamed spans are ended. (#2867)"}, {"oid": "30ae8d6a2553e26fed9c0b622ec658967be5e392", "committedDate": "2023-01-04 03:15:20 -0500", "message": "Reference counting for buffered spans (#2865)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}, {"oid": "2d9f8cd3510963a90bd12bc06a1ceac886bbf5fe", "committedDate": "2023-05-05 15:21:29 +0200", "message": "Capture S3 bucket+key as otel attributes (#3136)"}, {"oid": "a0d70c4773eb0f59939419e4cc42e4f0f3ca47d9", "committedDate": "2023-06-09 14:30:42 +0000", "message": "Capture 'sync' attribute on async spans (#3164)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjM4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736381", "body": "\ud83d\udc4d \ud83d\ude47\u200d\u2642\ufe0f ", "bodyText": "\ud83d\udc4d \ud83d\ude47\u200d\u2642\ufe0f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji> <g-emoji class=\"g-emoji\" alias=\"bowing_man\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f647-2642.png\">\ud83d\ude47\u200d\u2642\ufe0f</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:35:00Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -516,7 +527,7 @@ String getIncomingTraceParentHeader() {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -527,7 +527,7 @@ public class TraceContext implements Recyclable {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n         if (coreConfiguration.isElasticTraceparentHeaderEnabled()) {\n             headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -527,7 +527,7 @@ public class TraceContext implements Recyclable {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n         headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n         if (coreConfiguration.isElasticTraceparentHeaderEnabled()) {\n             headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n", "next_change": {"commit": "2259495d153766fe36aa2833a0455394b2fadbb8", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex f182c67db..d97d151b5 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -528,16 +557,18 @@ public class TraceContext implements Recyclable {\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n     <C> void propagateTraceContext(C carrier, TextHeaderSetter<C> headerSetter) {\n-        headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n+        String outgoingTraceParent = getOutgoingTraceParentTextHeader().toString();\n+\n+        headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, outgoingTraceParent, carrier);\n         if (coreConfiguration.isElasticTraceparentHeaderEnabled()) {\n-            headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n+            headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, outgoingTraceParent, carrier);\n         }\n-        if (tracestate.size() == 1) {\n-            headerSetter.setHeader(TRACESTATE_HEADER_NAME, tracestate.get(0), carrier);\n-        } else if (!tracestate.isEmpty()) {\n-            String tracestateHeaderValue = TextTracestateAppender.instance().join(tracestate, coreConfiguration.getTracestateSizeLimit());\n-            headerSetter.setHeader(TRACESTATE_HEADER_NAME, tracestateHeaderValue, carrier);\n+\n+        String outgoingTraceState = traceState.toTextHeader();\n+        if (outgoingTraceState != null) {\n+            headerSetter.setHeader(TRACESTATE_HEADER_NAME, outgoingTraceState, carrier);\n         }\n+        logger.trace(\"Trace context headers added to {}\", carrier);\n     }\n \n     /**\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11", "committedDate": "2020-06-10 15:25:00 +0200", "message": "Set framework name and version (#1194)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243", "committedDate": "2020-07-17 12:04:32 +0200", "message": "First step towards enabling external plugins (#1271)"}, {"oid": "f8420e622c99ca6bdca94b24f1c2ca6e885f100f", "committedDate": "2020-10-06 11:40:58 +0300", "message": "Adding trace-level log info to HTTP spans (#1425)"}, {"oid": "2259495d153766fe36aa2833a0455394b2fadbb8", "committedDate": "2020-10-07 12:32:16 +0200", "message": "sampling weight & tracestate propagation (#1384)"}, {"oid": "1cbed060b6fcd2bdd3f77f93264f7123b012085f", "committedDate": "2020-11-24 20:19:19 +0100", "message": "remove useless allocation in TraceState.copyOf() (#1508)"}, {"oid": "ea2b539b7ca3d9061ab76cd7412eabe055a1cf83", "committedDate": "2021-05-26 10:39:02 +0300", "message": "Give precedence to w3c traceparent header (#1821)"}, {"oid": "15cd941f15abac76348d39b27337e4dfa7082413", "committedDate": "2021-06-21 10:23:51 +0200", "message": "Minor refactors + enable_experimental_instrumentations config (#1863)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c852d0a2c1992332bba2a28b013c6042e3bdab7b", "committedDate": "2021-10-01 10:38:26 +0200", "message": "Cached weak map keys (#2137)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "2a60d89e8d981c34b41cf4fd417eb938662c8873", "committedDate": "2022-01-25 11:02:02 +0000", "message": "Neutral naming: main (#2401)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "d48e1d6bacbc3a46efeb36608992ab3486b81d92", "committedDate": "2022-02-16 09:19:00 +0200", "message": "Added support for setting service name and version for a transaction via the public api (#2451)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "e6e77491def25327d5fdd79ac9ac08451eb5599d", "committedDate": "2022-09-12 08:10:08 -0400", "message": "Make traceparent header creation thread-safe (#2747)"}, {"oid": "e30c77ddd6ca119602bd236ea27777f9274dd239", "committedDate": "2023-02-01 11:27:44 +0200", "message": "Adding the ability to disable TraceContext header injection (#2996)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjc2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736763", "body": "\ud83d\ude4f ", "bodyText": "\ud83d\ude4f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"pray\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png\">\ud83d\ude4f</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:35:41Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -537,7 +548,7 @@ String getIncomingTraceParentHeader() {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    public <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -548,7 +548,7 @@ public class TraceContext implements Recyclable {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean propagateTraceContext(C carrier, BinaryHeaderSetter<C> headerSetter) {\n         byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n         if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n             logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex 5f259a743..f182c67db 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -548,7 +548,7 @@ public class TraceContext implements Recyclable {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean propagateTraceContext(C carrier, BinaryHeaderSetter<C> headerSetter) {\n         byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n         if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n             logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",\n", "next_change": {"commit": "e30c77ddd6ca119602bd236ea27777f9274dd239", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex f182c67db..bfd849a4e 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -549,6 +573,10 @@ public class TraceContext implements Recyclable {\n      * @return true if Trace Context headers were set; false otherwise\n      */\n     <C> boolean propagateTraceContext(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+        if (coreConfiguration.isOutgoingTraceContextHeadersInjectionDisabled()) {\n+            logger.debug(\"Outgoing TraceContext header injection is disabled\");\n+            return false;\n+        }\n         byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n         if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n             logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",\n", "next_change": {"commit": "01b7db060f521b07264e16b8d8424b87f9839062", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex bfd849a4e..89b2acea6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -577,7 +588,7 @@ public class TraceContext implements Recyclable {\n             logger.debug(\"Outgoing TraceContext header injection is disabled\");\n             return false;\n         }\n-        byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n+        byte[] buffer = headerSetter.getFixedLengthByteArray(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n         if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n             logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",\n                 headerSetter.getClass().getName());\n", "next_change": null}, {"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\nindex bfd849a4e..89b2acea6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java\n", "chunk": "@@ -585,7 +596,7 @@ public class TraceContext implements Recyclable {\n         }\n         boolean headerBufferFilled = fillOutgoingTraceParentBinaryHeader(buffer);\n         if (headerBufferFilled) {\n-            headerSetter.setHeader(TRACE_PARENT_BINARY_HEADER_NAME, buffer, carrier);\n+            headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, buffer, carrier);\n         }\n         return headerBufferFilled;\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11", "committedDate": "2020-06-10 15:25:00 +0200", "message": "Set framework name and version (#1194)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243", "committedDate": "2020-07-17 12:04:32 +0200", "message": "First step towards enabling external plugins (#1271)"}, {"oid": "f8420e622c99ca6bdca94b24f1c2ca6e885f100f", "committedDate": "2020-10-06 11:40:58 +0300", "message": "Adding trace-level log info to HTTP spans (#1425)"}, {"oid": "2259495d153766fe36aa2833a0455394b2fadbb8", "committedDate": "2020-10-07 12:32:16 +0200", "message": "sampling weight & tracestate propagation (#1384)"}, {"oid": "1cbed060b6fcd2bdd3f77f93264f7123b012085f", "committedDate": "2020-11-24 20:19:19 +0100", "message": "remove useless allocation in TraceState.copyOf() (#1508)"}, {"oid": "ea2b539b7ca3d9061ab76cd7412eabe055a1cf83", "committedDate": "2021-05-26 10:39:02 +0300", "message": "Give precedence to w3c traceparent header (#1821)"}, {"oid": "15cd941f15abac76348d39b27337e4dfa7082413", "committedDate": "2021-06-21 10:23:51 +0200", "message": "Minor refactors + enable_experimental_instrumentations config (#1863)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "c852d0a2c1992332bba2a28b013c6042e3bdab7b", "committedDate": "2021-10-01 10:38:26 +0200", "message": "Cached weak map keys (#2137)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "2a60d89e8d981c34b41cf4fd417eb938662c8873", "committedDate": "2022-01-25 11:02:02 +0000", "message": "Neutral naming: main (#2401)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "d48e1d6bacbc3a46efeb36608992ab3486b81d92", "committedDate": "2022-02-16 09:19:00 +0200", "message": "Added support for setting service name and version for a transaction via the public api (#2451)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "ccaa484afa03d5fa42736dd28891989bf2608b51", "committedDate": "2022-09-07 09:13:09 -0400", "message": "Improve generics for Transaction::start and AbstractSpan::addSpanLink (#2771)"}, {"oid": "e6e77491def25327d5fdd79ac9ac08451eb5599d", "committedDate": "2022-09-12 08:10:08 -0400", "message": "Make traceparent header creation thread-safe (#2747)"}, {"oid": "e30c77ddd6ca119602bd236ea27777f9274dd239", "committedDate": "2023-02-01 11:27:44 +0200", "message": "Adding the ability to disable TraceContext header injection (#2996)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415744567", "body": "?", "bodyText": "?", "bodyHTML": "<p dir=\"auto\">?</p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:48:43Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDcyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000721", "bodyText": "!", "author": "felixbarny", "createdAt": "2020-04-30T13:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -77,7 +77,6 @@ public class DiscardSpanTest {\n \n     @Test\n     void testErrorCapturingMakesSpansNonDiscardable() {\n-        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -77,7 +77,6 @@ public class DiscardSpanTest {\n \n     @Test\n     void testErrorCapturingMakesSpansNonDiscardable() {\n-        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODU1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748558", "body": "```suggestion\r\n            Span span = transaction.createSpan().requestDiscarding();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span span = transaction.createSpan();\n          \n          \n            \n                        Span span = transaction.createSpan().requestDiscarding();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Span</span> span <span class=\"pl-k\">=</span> transaction<span class=\"pl-k\">.</span>createSpan();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Span</span> span <span class=\"pl-k\">=</span> transaction<span class=\"pl-k\">.</span>createSpan()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">requestDiscarding()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "eyalkoren", "createdAt": "2020-04-27T11:54:54Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -59,9 +59,9 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span span = transaction.createSpan();\n+            Span span = transaction.createSpan().requestDiscarding();\n             try {\n-                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                span.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                 assertThat(span.isDiscardable()).isFalse();\n             } finally {\n                 span.end();\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODk5NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748995", "body": "```suggestion\r\n            Span parentSpan = transaction.createSpan().requestDiscarding();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span parentSpan = transaction.createSpan();\n          \n          \n            \n                        Span parentSpan = transaction.createSpan().requestDiscarding();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Span</span> parentSpan <span class=\"pl-k\">=</span> transaction<span class=\"pl-k\">.</span>createSpan();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Span</span> parentSpan <span class=\"pl-k\">=</span> transaction<span class=\"pl-k\">.</span>createSpan()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">requestDiscarding()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "eyalkoren", "createdAt": "2020-04-27T11:55:40Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -103,11 +102,11 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span parentSpan = transaction.createSpan();\n+            Span parentSpan = transaction.createSpan().requestDiscarding();\n             try {\n                 Span contextPropagatingSpan = parentSpan.createSpan();\n                 try {\n-                    contextPropagatingSpan.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                    contextPropagatingSpan.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                     assertThat(contextPropagatingSpan.isDiscardable()).isFalse();\n                     assertThat(parentSpan.isDiscardable()).isFalse();\n                 } finally {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..9af52dd32 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -103,11 +102,11 @@ public class DiscardSpanTest {\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n-            Span parentSpan = transaction.createSpan();\n+            Span parentSpan = transaction.createSpan().requestDiscarding();\n             try {\n                 Span contextPropagatingSpan = parentSpan.createSpan();\n                 try {\n-                    contextPropagatingSpan.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                    contextPropagatingSpan.propagateTraceContext(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n                     assertThat(contextPropagatingSpan.isDiscardable()).isFalse();\n                     assertThat(parentSpan.isDiscardable()).isFalse();\n                 } finally {\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MDcyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415750720", "body": "\ud83d\udc4f ", "bodyText": "\ud83d\udc4f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"clap\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png\">\ud83d\udc4f</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-04-27T11:58:21Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();\n+            try {\n+                Span contextPropagatingSpan = parentSpan.createSpan();\n+                try {\n+                    contextPropagatingSpan.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                    assertThat(contextPropagatingSpan.isDiscardable()).isFalse();\n+                    assertThat(parentSpan.isDiscardable()).isFalse();\n+                } finally {\n+                    contextPropagatingSpan.end();\n+                }\n+            } finally {\n+                parentSpan.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimit() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            transaction.createSpan().appendToName(\"1st\").end();\n+            transaction.createSpan().appendToName(\"discarded\").requestDiscarding().end();\n+            transaction.createSpan().appendToName(\"2nd\").end();\n+            transaction.createSpan().appendToName(\"exceeds limit\").end();\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"1st\", \"2nd\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(4);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span first = transaction.createSpan().appendToName(\"1st\");\n+            try {\n+                Span second = first.createSpan().appendToName(\"2nd\");\n+                try {\n+                    second.createSpan().appendToName(\"exceeds limit\").end();\n+                } finally {\n+                    second.end();\n+                }\n+            } finally {\n+                first.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"2nd\", \"1st\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(3);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting2() {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\nindex 729a3eeff..13170ceeb 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java\n", "chunk": "@@ -172,7 +165,7 @@ public class DiscardSpanTest {\n \n     @Test\n     void testDiscardSpanLimitNesting2() {\n-        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        doReturn(2).when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class)).getTransactionMaxSpans();\n         Transaction transaction = tracer.startRootTransaction(null);\n         assertThat(transaction).isNotNull();\n         try {\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MjE5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415752192", "body": "This leftover is what fails the test now..", "bodyText": "This leftover is what fails the test now..", "bodyHTML": "<p dir=\"auto\">This leftover is what fails the test now..</p>", "author": "eyalkoren", "createdAt": "2020-04-27T12:00:47Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java", "diffHunk": "@@ -286,8 +286,10 @@ void testEnableDropSpans() {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped().get()).isEqualTo(1);\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getStarted().get()).isEqualTo(1);\n+        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\nindex 0e71a2669..488c2a61a 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n", "chunk": "@@ -286,7 +286,6 @@ class ElasticApmTracerTest {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getReported()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getTotal()).hasValue(2);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\nindex 0e71a2669..488c2a61a 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n", "chunk": "@@ -286,7 +286,6 @@ class ElasticApmTracerTest {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getReported()).hasValue(1);\n         assertThat(reporter.getFirstTransaction().getSpanCount().getTotal()).hasValue(2);\n", "next_change": {"commit": "0eac0af814b8686772c6d4e2212f4231524fa8ce", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\nindex 488c2a61a..c17f3f2de 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java\n", "chunk": "@@ -292,15 +337,60 @@ class ElasticApmTracerTest {\n         assertThat(reporter.getSpans()).hasSize(1);\n     }\n \n+    @Test\n+    void testActivationStackOverflow() {\n+        when(tracerImpl.getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = startTestRootTransaction();\n+        assertThat(tracerImpl.getActive()).isNull();\n+        try (Scope scope = transaction.activateInScope()) {\n+            assertThat(tracerImpl.getActive()).isEqualTo(transaction);\n+            Span child1 = transaction.createSpan();\n+            try (Scope childScope = child1.activateInScope()) {\n+                assertThat(tracerImpl.getActive()).isEqualTo(child1);\n+                Span grandchild1 = child1.createSpan();\n+                try (Scope grandchildScope = grandchild1.activateInScope()) {\n+                    // latter activation should not be applied due to activation stack overflow\n+                    assertThat(tracerImpl.getActive()).isEqualTo(child1);\n+                    Span ggc = grandchild1.createSpan();\n+                    try (Scope ggcScope = ggc.activateInScope()) {\n+                        assertThat(tracerImpl.getActive()).isEqualTo(child1);\n+                        ggc.end();\n+                    }\n+                    grandchild1.end();\n+                }\n+                assertThat(tracerImpl.getActive()).isEqualTo(child1);\n+                child1.end();\n+            }\n+            assertThat(tracerImpl.getActive()).isEqualTo(transaction);\n+            Span child2 = transaction.createSpan();\n+            try (Scope childScope = child2.activateInScope()) {\n+                assertThat(tracerImpl.getActive()).isEqualTo(child2);\n+                Span grandchild2 = child2.createSpan();\n+                try (Scope grandchildScope = grandchild2.activateInScope()) {\n+                    // latter activation should not be applied due to activation stack overflow\n+                    assertThat(tracerImpl.getActive()).isEqualTo(child2);\n+                    grandchild2.end();\n+                }\n+                assertThat(tracerImpl.getActive()).isEqualTo(child2);\n+                child2.end();\n+            }\n+            assertThat(tracerImpl.getActive()).isEqualTo(transaction);\n+            transaction.end();\n+        }\n+        assertThat(tracerImpl.getActive()).isNull();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(2);\n+    }\n+\n     @Test\n     void testPause() {\n         tracerImpl.pause();\n-        assertThat(tracerImpl.startRootTransaction(getClass().getClassLoader())).isNull();\n+        assertThat(startTestRootTransaction()).isNull();\n     }\n \n     @Test\n     void testPauseMidTransaction() {\n-        Transaction transaction = tracerImpl.startRootTransaction(getClass().getClassLoader());\n+        Transaction transaction = startTestRootTransaction();\n         try (Scope scope = transaction.activateInScope()) {\n             assertThat(tracerImpl.currentTransaction()).isSameAs(transaction);\n             tracerImpl.pause();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "60279c71a6486b948f8ed8635a84d822608021ff", "committedDate": "2020-06-16 11:35:19 +0300", "message": "Delay default SSLSocketFactory initialization (#1209)"}, {"oid": "d4ad209cfabc3e99a0cf8031b09a4a6723ed1b1b", "committedDate": "2020-06-25 11:16:22 +0200", "message": "Add enabled config (#1245)"}, {"oid": "140f1a26d9a6671b7b82ead4ad792fd3ab9b3f7c", "committedDate": "2020-08-05 07:23:24 +0300", "message": "Fixing default service name configuration (#1324)"}, {"oid": "b09988060dd60cc4956d02b317d73f13fd36b147", "committedDate": "2021-02-09 11:39:38 +0100", "message": "Implement outcome for transactions & spans (#1613)"}, {"oid": "125702d26805fc1dcd2ba2a59235bc74e85343b8", "committedDate": "2021-04-19 18:19:06 +0200", "message": "Added support for setting a user's domain (#1756)"}, {"oid": "49d0db54eb66684451407d5a231ae03912a51a15", "committedDate": "2021-05-04 16:48:15 +0300", "message": "Add ECS-reformatting OVERRIDE (#1793)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "e708fee8553c5d9e17d527d7dccac33419a13822", "committedDate": "2021-11-08 13:40:33 +0200", "message": "Add the (current) transaction name to the error object (#2235)"}, {"oid": "efe97c9bf02dfcca62a94ff655b517326398d296", "committedDate": "2021-11-09 10:15:32 +0000", "message": "renamed span_frames_min_duration to span_stack_trace_min_duration. Ch\u2026 (#2220)"}, {"oid": "1c0f1c6e7d44a7e41b9f883b2ce53e22236cadfc", "committedDate": "2021-11-30 09:28:40 +0100", "message": "Improve runtime attach configuration (#2283)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "0a61bca5212db049fb55b2a1040ae131a0751106", "committedDate": "2022-01-26 13:02:28 -0500", "message": "Use Implementation-Version as default service version if it is available (#1922)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "e9525aadcfee43faaf575a46c857341602513d73", "committedDate": "2022-02-02 04:23:27 -0500", "message": "Service name discovery based on webapp manifest (#2434)"}, {"oid": "d48e1d6bacbc3a46efeb36608992ab3486b81d92", "committedDate": "2022-02-16 09:19:00 +0200", "message": "Added support for setting service name and version for a transaction via the public api (#2451)"}, {"oid": "247295a2288261d688581a5c9ac3cd3a355946b1", "committedDate": "2022-03-30 04:51:36 -0400", "message": "Fix/refactor unsampled tests (#2553)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "0eac0af814b8686772c6d4e2212f4231524fa8ce", "committedDate": "2022-09-15 03:58:28 -0400", "message": "Limit activation stack depth (#2783)"}, {"oid": "9390fc5c6169e65ce8207fa539feef1ec0c78083", "committedDate": "2022-11-15 05:10:42 -0500", "message": "Prevent race-condition on the span name when unnamed spans are ended. (#2867)"}, {"oid": "f8c7c18b7f979d5b06585b1aa6bf022354f45359", "committedDate": "2022-11-16 16:24:35 +0100", "message": "get rid of mockito flakyness (#2860)"}, {"oid": "965c6567186b91c179314570270ebff62a46f130", "committedDate": "2022-11-23 13:12:02 -0500", "message": "Fix security manager issues (#2871)"}, {"oid": "150aac8530df1e5667ecb1e4b0f50c7602ea738f", "committedDate": "2022-12-06 08:31:51 +0100", "message": "Fix mockito race conditions by memoizing transaction_max_spans. (#2900)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "3e4005dff3c41326dd180bc181dd6821c3c3ff51", "committedDate": "2023-05-05 18:06:35 +0200", "message": "Implement partial transactions for AWS Lambda (#3134)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1Njc5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415756791", "body": "\ud83d\udc4d ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-04-27T12:08:31Z", "path": "apm-agent-plugins/apm-opentracing-plugin/src/main/java/co/elastic/apm/agent/opentracing/impl/ApmSpanBuilderInstrumentation.java", "diffHunk": "@@ -82,22 +82,34 @@ public static void createSpan(@Advice.Argument(value = 0, typing = Assigner.Typi\n \n         @Nullable\n         @VisibleForAdvice\n-        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable TraceContext parentContext,\n+        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable AbstractSpan<?> parentContext,\n                                                                 Map<String, Object> tags,\n                                                                 String operationName, long microseconds,\n                                                                 @Nullable Iterable<Map.Entry<String, String>> baggage, ClassLoader applicationClassLoader) {\n+            AbstractSpan<?> result = null;\n             if (tracer != null) {\n                 if (parentContext == null) {\n-                    return createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n+                    result = createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n                 } else {\n                     if (microseconds >= 0) {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n                     } else {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext);\n                     }\n                 }\n             }\n-            return null;\n+            if (result != null) {\n+                // This reference count never gets decremented, which means it will be handled by GC rather than being recycled.\n+                // The OpenTracing API allows interactions with the span, such as span.getTraceContext even after the span has finished\n+                // This makes it hard to recycle the span as the life cycle is unclear.\n+                // See also https://github.com/opentracing/opentracing-java/issues/312\n+                // Previously, we kept a permanent copy of the trace context around and recycled the span on finish.\n+                // But that meant lots of complexity in the internal API,\n+                // as it had to deal with the fact that a TraceContext might be returned by ElasticApmTracer.getActive.\n+                // The complexity doesn't seem worth the OT specific optimization that a bit less memory gets allocated.", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11", "committedDate": "2020-06-10 15:25:00 +0200", "message": "Set framework name and version (#1194)"}, {"oid": "b0dbda275335adf618d1e4c8fc94a53ce19f6764", "committedDate": "2020-07-02 15:42:55 +0200", "message": "Indy plugins (#1230)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243", "committedDate": "2020-07-17 12:04:32 +0200", "message": "First step towards enabling external plugins (#1271)"}, {"oid": "a67d352da9d251e35f25473be4c3df520da29128", "committedDate": "2021-04-14 11:39:29 +0200", "message": "Migrate opentracing plugin to indy (#1410)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2MTA3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415761075", "body": "\ud83d\udc4d ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-04-27T12:15:32Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -543,28 +531,6 @@ public void recycle(SpanInScopeCallableWrapper<?> wrapper) {\n         callableSpanWrapperObjectPool.recycle(wrapper);\n     }\n \n-    public Runnable wrapRunnable(Runnable delegate, TraceContext traceContext) {", "originalCommit": "c5ca34851a16e99ef4497d2677fbbd77f153c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex dad035db6..479ab7806 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n", "chunk": "@@ -509,28 +471,6 @@ public class ElasticApmTracer {\n         errorPool.recycle(error);\n     }\n \n-    public Runnable wrapRunnable(Runnable delegate, AbstractSpan<?> span) {\n-        if (delegate instanceof SpanInScopeRunnableWrapper) {\n-            return delegate;\n-        }\n-        return runnableSpanWrapperObjectPool.createInstance().wrap(delegate, span);\n-    }\n-\n-    public void recycle(SpanInScopeRunnableWrapper wrapper) {\n-        runnableSpanWrapperObjectPool.recycle(wrapper);\n-    }\n-\n-    public <V> Callable<V> wrapCallable(Callable<V> delegate, AbstractSpan<?> span) {\n-        if (delegate instanceof SpanInScopeCallableWrapper) {\n-            return delegate;\n-        }\n-        return ((SpanInScopeCallableWrapper<V>) callableSpanWrapperObjectPool.createInstance()).wrap(delegate, span);\n-    }\n-\n-    public void recycle(SpanInScopeCallableWrapper<?> wrapper) {\n-        callableSpanWrapperObjectPool.recycle(wrapper);\n-    }\n-\n     /**\n      * Called when the container shuts down.\n      * Cleans up thread pools and other resources.\n", "next_change": {"commit": "dd3e45ff28f5969024ad99240c8954483306e7c3", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 479ab7806..68f49cd2d 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n", "chunk": "@@ -471,10 +410,6 @@ public class ElasticApmTracer {\n         errorPool.recycle(error);\n     }\n \n-    /**\n-     * Called when the container shuts down.\n-     * Cleans up thread pools and other resources.\n-     */\n     public synchronized void stop() {\n         tracerState = TracerState.STOPPED;\n         logger.info(\"Tracer switched to STOPPED state\");\n", "next_change": {"commit": "a7e1c25af8813c81f0593b196dcf96eb54a6cfe8", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\nindex 68f49cd2d..04be61281 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n", "chunk": "@@ -411,15 +420,10 @@ public class ElasticApmTracer implements Tracer {\n     }\n \n     public synchronized void stop() {\n-        tracerState = TracerState.STOPPED;\n-        logger.info(\"Tracer switched to STOPPED state\");\n-        try {\n-            configurationRegistry.close();\n-            reporter.close();\n-        } catch (Exception e) {\n-            logger.warn(\"Suppressed exception while calling stop()\", e);\n+        if (tracerState == TracerState.STOPPED) {\n+            // may happen if explicitly stopped in a unit test and executed again within a shutdown hook\n+            return;\n         }\n-\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             try {\n                 lifecycleListener.stop();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "025cf2a37e0e81d77c0075548aa8546e50bc6cd2", "committedDate": "2020-05-11 09:36:29 +0200", "message": "Fix currentTransaction() for async spans (#1174)"}, {"oid": "46b8626b2e0c6d3ac971eee85fc7cabc61a81ae8", "committedDate": "2020-05-15 17:49:05 +0200", "message": "Use log4j2 for logging (#1169)"}, {"oid": "4067420042466fd20ef704f82d6535c85fd09caa", "committedDate": "2020-05-31 11:19:31 +0300", "message": "Jul deadlock workaround (#1203)"}, {"oid": "60279c71a6486b948f8ed8635a84d822608021ff", "committedDate": "2020-06-16 11:35:19 +0300", "message": "Delay default SSLSocketFactory initialization (#1209)"}, {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52", "committedDate": "2020-06-17 16:45:55 +0200", "message": "Instrument Runnables/Callables instead of wrapping them (#1206)"}, {"oid": "e9119905941075f3c9543a35e134e7e55015f7e2", "committedDate": "2020-06-25 09:28:58 +0200", "message": "Only capture errors if recording (#1252)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "9d9820bf7d8f5b7a41dd39c395c43352df23e5fd", "committedDate": "2020-07-07 09:33:37 +0300", "message": "Delay init by default in Tomcat and JBoss, only once (#1262)"}, {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243", "committedDate": "2020-07-17 12:04:32 +0200", "message": "First step towards enabling external plugins (#1271)"}, {"oid": "140f1a26d9a6671b7b82ead4ad792fd3ab9b3f7c", "committedDate": "2020-08-05 07:23:24 +0300", "message": "Fixing default service name configuration (#1324)"}, {"oid": "1e26d7dac9e3b9f0640ed7d58b59f333c593b58b", "committedDate": "2020-08-10 17:37:49 +0200", "message": "Add micrometer support (#1303)"}, {"oid": "8068c1ff86420c7f296f680f6e5281d796f0313e", "committedDate": "2020-08-20 11:58:49 +0300", "message": "Fix only adding Java 7 to 8 (#1343)"}, {"oid": "d10db0ca04d31e1cd9891eb694b0c49c5b535028", "committedDate": "2020-10-19 12:26:17 +0300", "message": "Disable the agent when -XX:+UseG1GC is used on Java 7 (#1440)"}, {"oid": "7eeda8805e0296a40dc37dbbc5acf5980912a1e0", "committedDate": "2020-11-03 14:25:02 +0100", "message": "Fix spring app name startup exception (#1464)"}, {"oid": "b9e6d92e62b7e734826d076bc5aa527b2cdaec8a", "committedDate": "2021-01-26 17:44:34 +0200", "message": "Cloud metadata (#1599)"}, {"oid": "40773036faab70828c16aa0f8da3d39a3c56430a", "committedDate": "2021-01-26 19:13:21 +0200", "message": "Adding ability to delay agent initialization on startup (#1594)"}, {"oid": "a7e1c25af8813c81f0593b196dcf96eb54a6cfe8", "committedDate": "2021-02-15 14:28:24 +0100", "message": "Flush metrics on shutdown (#1658)"}, {"oid": "96f5115e12f25f6e852f2194924b2f66aaaf9f6b", "committedDate": "2021-03-24 09:56:40 +0100", "message": "Add bootstrap checks (#1593)"}, {"oid": "60ca9ca841307706d86d3dd78d1bb8b143d3aab1", "committedDate": "2021-04-01 15:46:07 +0200", "message": "Cassandra instrumentation (#1712)"}, {"oid": "694b1c776113fd8f895841e307bda79a414ea602", "committedDate": "2021-06-16 11:28:33 +0300", "message": "Adding stack trace to tracer stop invocation (#1852)"}, {"oid": "15cd941f15abac76348d39b27337e4dfa7082413", "committedDate": "2021-06-21 10:23:51 +0200", "message": "Minor refactors + enable_experimental_instrumentations config (#1863)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "845314c22812781bef92f1e5bc8a290f1e27ecf7", "committedDate": "2021-09-13 09:42:02 -0400", "message": "Adding debug messages to service name auto discovery (#1965)"}, {"oid": "c5fede1f741004c2feed99bcca730da7f94f3a0c", "committedDate": "2021-09-20 09:09:22 +0200", "message": "Isolated agent classloader (#2109)"}, {"oid": "c852d0a2c1992332bba2a28b013c6042e3bdab7b", "committedDate": "2021-10-01 10:38:26 +0200", "message": "Cached weak map keys (#2137)"}, {"oid": "a88764775664d39f68d24567781793f2a5d04e3e", "committedDate": "2021-10-24 13:00:00 +0300", "message": "Hostname discovery fix (#2205)"}, {"oid": "e708fee8553c5d9e17d527d7dccac33419a13822", "committedDate": "2021-11-08 13:40:33 +0200", "message": "Add the (current) transaction name to the error object (#2235)"}, {"oid": "080ff4181f29c6225491a9e62bc9316882aee353", "committedDate": "2021-11-08 13:18:35 +0100", "message": "Report the JVM/JMX metrics for each service name (#2233)"}, {"oid": "efe97c9bf02dfcca62a94ff655b517326398d296", "committedDate": "2021-11-09 10:15:32 +0000", "message": "renamed span_frames_min_duration to span_stack_trace_min_duration. Ch\u2026 (#2220)"}, {"oid": "72573b6667fc871f707216eb1d8ffcd52d081f25", "committedDate": "2021-12-01 14:53:40 +0200", "message": "Lambda instrumentation (#1951)"}, {"oid": "bdbf40144e23e60aa8640a608aaee29436aedaef", "committedDate": "2022-01-17 12:23:57 -0500", "message": "Drop unsampled transactions when connected to APM Server 8.0+ (#2329)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "e32985ae59cd1d8e471fdba5ead8c6368d27f667", "committedDate": "2022-01-19 09:41:24 -0500", "message": "Fix slf4j LinkageErrors for external plugins (#2376)"}, {"oid": "0a61bca5212db049fb55b2a1040ae131a0751106", "committedDate": "2022-01-26 13:02:28 -0500", "message": "Use Implementation-Version as default service version if it is available (#1922)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "8b16c340c1889d2a5e6785f4f05b6418688c34ec", "committedDate": "2022-01-28 17:44:13 +0100", "message": "Support for setting the service name on Log4j2's EcsLayout (#2296)"}, {"oid": "e9525aadcfee43faaf575a46c857341602513d73", "committedDate": "2022-02-02 04:23:27 -0500", "message": "Service name discovery based on webapp manifest (#2434)"}, {"oid": "743432b9d7d1d55ba64c6b408f836c32089115e3", "committedDate": "2022-02-08 14:06:36 +0200", "message": "Adds support for logging the used instrumentation groups (#2448)"}, {"oid": "d48e1d6bacbc3a46efeb36608992ab3486b81d92", "committedDate": "2022-02-16 09:19:00 +0200", "message": "Added support for setting service name and version for a transaction via the public api (#2451)"}, {"oid": "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77", "committedDate": "2022-03-03 11:23:29 -0500", "message": "Added (initial) support for compressing spans (#2477)"}, {"oid": "4f212f98be4a17774cf3fc4cc423c52abc3864fc", "committedDate": "2022-03-09 11:22:29 -0500", "message": "Added support for dropping fast exit spans (#2491)"}, {"oid": "e3135256bfbd07adbd1eb8aefca118683934b0ad", "committedDate": "2022-03-14 11:49:03 -0400", "message": "Added support for collecting statistics about dropped exit spans (#2505)"}, {"oid": "c8e7936b1a6a897aef609b820d20e254cd1440cc", "committedDate": "2022-03-15 12:46:25 -0400", "message": "Reimplementing log correlation (#2428)"}, {"oid": "ddb8c690c0eff5b1f4bf989560ffe5ef4c169d59", "committedDate": "2022-03-21 06:13:15 -0400", "message": "OpenTelemetry bridge (#1631)"}, {"oid": "72f88e9188dde6af9f70ddfe5a98bbcd478f4bdb", "committedDate": "2022-04-04 05:19:34 -0400", "message": "Implement default type fallback (#2525)"}, {"oid": "37e66e0465fb9220483e8fcde75d14a166f8be4f", "committedDate": "2022-06-06 09:34:13 -0400", "message": "Add span links to messaging system tracing (#2610)"}, {"oid": "32ee207ccafe347d3fe77a65172ef809307c29f2", "committedDate": "2022-07-04 13:26:34 +0300", "message": "Make the metric set limit configurable (#2147) (#2148)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "0eac0af814b8686772c6d4e2212f4231524fa8ce", "committedDate": "2022-09-15 03:58:28 -0400", "message": "Limit activation stack depth (#2783)"}, {"oid": "50bb1f1632da89c5d4f029e7d7b48a8d4d45c5ef", "committedDate": "2022-11-23 08:04:53 -0500", "message": "Added reporter health metrics (#2864)"}, {"oid": "150aac8530df1e5667ecb1e4b0f50c7602ea738f", "committedDate": "2022-12-06 08:31:51 +0100", "message": "Fix mockito race conditions by memoizing transaction_max_spans. (#2900)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "44ed8c2bec08da24283a645b5f76a81f6a035646", "committedDate": "2023-02-21 14:40:19 +0200", "message": "Unnest exceptions before filtering (#3025)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "1fd41bce7a2c02e3585be94345d4364d18052f38", "committedDate": "2023-03-28 13:26:46 +0200", "message": "Move global tracer and substitute agent-core types with API types where this is trivially possible. (#3054)"}, {"oid": "01b7db060f521b07264e16b8d8424b87f9839062", "committedDate": "2023-04-17 16:21:46 +0200", "message": "Avoid use of trace context static methods in favor of Tracer-defined behavior (#3082)"}, {"oid": "3e4005dff3c41326dd180bc181dd6821c3c3ff51", "committedDate": "2023-05-05 18:06:35 +0200", "message": "Implement partial transactions for AWS Lambda (#3134)"}, {"oid": "b336370f70cc7b3262eca5a18963cfceb2de522c", "committedDate": "2023-05-24 11:49:45 -0400", "message": "Extract configuration from core module to API (#3122)"}, {"oid": "ecec05d039e3fd6ff04e005e34438c1e50d5f818", "committedDate": "2023-06-05 04:41:36 -0400", "message": "Factor out reference counting to explicit API (#3081)"}, {"oid": "87b4c284bb4a6d5253e273ad55a8ac7c4acabaa6", "committedDate": "2023-06-07 12:47:57 +0000", "message": "Protect against stackoverflow when printing advice exceptions (#3159)"}]}, {"oid": "94c92159d99f57d67d6f2ca0aa16e373082f1684", "url": "https://github.com/elastic/apm-agent-java/commit/94c92159d99f57d67d6f2ca0aa16e373082f1684", "message": "Apply suggestions from review", "committedDate": "2020-04-28T09:40:34Z", "type": "commit"}, {"oid": "868e3849aec975f3d0a828699939262d8d690e14", "url": "https://github.com/elastic/apm-agent-java/commit/868e3849aec975f3d0a828699939262d8d690e14", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-04-28T09:40:51Z", "type": "commit"}, {"oid": "a0e2ab3c384074643cb886b80438b84554030d42", "url": "https://github.com/elastic/apm-agent-java/commit/a0e2ab3c384074643cb886b80438b84554030d42", "message": "Restore specific min duration flags", "committedDate": "2020-04-30T13:12:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMTk5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419221990", "body": "```suggestion\r\n            \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured, the higher of both thresholds will determine which spans will be discarded.\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n          \n          \n            \n                        \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured, the higher of both thresholds will determine which spans will be discarded.\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NOTE: <span class=\"x x-first x-last\">This </span>option <span class=\"x x-first x-last\">is deprecated in favor of </span>&lt;&lt;config-span-min-duration,`span_min_duration`&gt;&gt;.<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NOTE: <span class=\"x x-first x-last\">If this </span>option <span class=\"x x-first x-last\">and </span>&lt;&lt;config-span-min-duration,`span_min_duration`&gt;&gt;<span class=\"x x-first x-last\"> are both configured, the higher of both thresholds will determine which spans will be discarded</span>.<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "eyalkoren", "createdAt": "2020-05-04T05:44:10Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -448,7 +448,9 @@\n             \"This configuration affects only spans.\\n\" +\n             \"In order not to break span references,\\n\" +\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n-            \"regardless of their duration.\\n\")\n+            \"regardless of their duration.\\n\" +\n+            \"\\n\" +\n+            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\nindex d8237d1c5..3df0614a6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n", "chunk": "@@ -450,7 +450,8 @@ public class CoreConfiguration extends ConfigurationOptionProvider {\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n             \"regardless of their duration.\\n\" +\n             \"\\n\" +\n-            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n+            \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured,\\n\" +\n+            \"the higher of both thresholds will determine which spans will be discarded.\")\n         .buildWithDefault(TimeDuration.of(\"0ms\"));\n \n     private final ConfigurationOption<String> appendPackagesToBootDelagationProperty = ConfigurationOption.stringOption()\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\nindex d8237d1c5..3df0614a6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n", "chunk": "@@ -450,7 +450,8 @@ public class CoreConfiguration extends ConfigurationOptionProvider {\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n             \"regardless of their duration.\\n\" +\n             \"\\n\" +\n-            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n+            \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured,\\n\" +\n+            \"the higher of both thresholds will determine which spans will be discarded.\")\n         .buildWithDefault(TimeDuration.of(\"0ms\"));\n \n     private final ConfigurationOption<String> appendPackagesToBootDelagationProperty = ConfigurationOption.stringOption()\n", "next_change": {"commit": "967b0c624a72efa03fd8616da6d3cf5d94930c3e", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\nindex 3df0614a6..eba26f9e0 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n", "chunk": "@@ -454,7 +454,7 @@ public class CoreConfiguration extends ConfigurationOptionProvider {\n             \"the higher of both thresholds will determine which spans will be discarded.\")\n         .buildWithDefault(TimeDuration.of(\"0ms\"));\n \n-    private final ConfigurationOption<String> appendPackagesToBootDelagationProperty = ConfigurationOption.stringOption()\n+    private final ConfigurationOption<String> appendPackagesToBootDelegationProperty = ConfigurationOption.stringOption()\n         .key(\"boot_delegation_packages\")\n         .tags(\"added[1.7.0]\")\n         .configurationCategory(CORE_CATEGORY)\n", "next_change": {"commit": "e6737ac04fc97c7a56d8c9f998f04ad3c350ed23", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\nindex eba26f9e0..5942b2756 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java\n", "chunk": "@@ -454,34 +482,6 @@ public class CoreConfiguration extends ConfigurationOptionProvider {\n             \"the higher of both thresholds will determine which spans will be discarded.\")\n         .buildWithDefault(TimeDuration.of(\"0ms\"));\n \n-    private final ConfigurationOption<String> appendPackagesToBootDelegationProperty = ConfigurationOption.stringOption()\n-        .key(\"boot_delegation_packages\")\n-        .tags(\"added[1.7.0]\")\n-        .configurationCategory(CORE_CATEGORY)\n-        .description(\"A comma-separated list of packages to be appended to the boot delegation system property. \\n\" +\n-            \"If set with an empty string, nothing will be appended to the boot delegation system property.\\n\" +\n-            \"Values to set in known environments:\\n\\n\" +\n-            \"Nexus:\\n\\n\" +\n-            \"----\\n\" +\n-            \"boot_delegation_packages=com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, sun.*,\" +\n-            \"co.elastic.apm.agent.*\\n\" +\n-            \"----\\n\\n\" +\n-            \"Pentaho and RedHat JBoss Fuse:\\n\\n\" +\n-            \"----\\n\" +\n-            \"boot_delegation_packages=org.apache.karaf.jaas.boot, org.apache.karaf.jaas.boot.principal, org.apache.karaf.management.boot, \" +\n-            \"sun.*, com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, org.apache.xerces.jaxp.datatype, \" +\n-            \"org.apache.xerces.stax, org.apache.xerces.parsers, org.apache.xerces.jaxp, org.apache.xerces.jaxp.validation, \" +\n-            \"org.apache.xerces.dom, co.elastic.apm.agent.*\\n\" +\n-            \"----\\n\")\n-        .buildWithDefault(\"co.elastic.apm.agent.*\");\n-\n-    private final ConfigurationOption<Boolean> atlassianNewBootDelegation = ConfigurationOption.booleanOption()\n-        .key(\"use_atlassian_new_boot_delegation\")\n-        .configurationCategory(CORE_CATEGORY)\n-        .tags(\"internal\")\n-        .description(\"In new Atlassian OSGi there is a config to append to boot delegation packages instead of overriding the default.\")\n-        .buildWithDefault(false);\n-\n     private final ConfigurationOption<Boolean> centralConfig = ConfigurationOption.booleanOption()\n         .key(\"central_config\")\n         .tags(\"added[1.8.0]\")\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "967b0c624a72efa03fd8616da6d3cf5d94930c3e", "committedDate": "2020-05-07 16:31:22 +0300", "message": "Adding support for new Atlassian OSGi config (#1168)"}, {"oid": "f7ab87dc5251a4f47bfd57992c2ff0527a053ccb", "committedDate": "2020-05-19 13:52:53 +0300", "message": "Adding class exclusion from instrumentation config (#1187)"}, {"oid": "60279c71a6486b948f8ed8635a84d822608021ff", "committedDate": "2020-06-16 11:35:19 +0300", "message": "Delay default SSLSocketFactory initialization (#1209)"}, {"oid": "d4ad209cfabc3e99a0cf8031b09a4a6723ed1b1b", "committedDate": "2020-06-25 11:16:22 +0200", "message": "Add enabled config (#1245)"}, {"oid": "e6737ac04fc97c7a56d8c9f998f04ad3c350ed23", "committedDate": "2020-07-01 10:37:38 +0200", "message": "Universal bootdelegation (#1259)"}, {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243", "committedDate": "2020-07-17 12:04:32 +0200", "message": "First step towards enabling external plugins (#1271)"}, {"oid": "2259495d153766fe36aa2833a0455394b2fadbb8", "committedDate": "2020-10-07 12:32:16 +0200", "message": "sampling weight & tracestate propagation (#1384)"}, {"oid": "505e00b734c2c602a0b0c0648c00cd12ebb01187", "committedDate": "2020-10-26 18:16:47 +0200", "message": "Adding config option to dump instrumented classes bytecode (#1442)"}, {"oid": "3bc87a0c47afd3f0c1f8b16e599f6efe57083cee", "committedDate": "2020-10-30 14:25:11 +0100", "message": "Properly disable agent on startup (#1463)"}, {"oid": "51af1499f72c5565d29f327fe085129792086903", "committedDate": "2020-11-25 14:29:19 +0200", "message": "Fix formatting for trace_methods_duration_threshold (#1538)"}, {"oid": "b9e6d92e62b7e734826d076bc5aa527b2cdaec8a", "committedDate": "2021-01-26 17:44:34 +0200", "message": "Cloud metadata (#1599)"}, {"oid": "40773036faab70828c16aa0f8da3d39a3c56430a", "committedDate": "2021-01-26 19:13:21 +0200", "message": "Adding ability to delay agent initialization on startup (#1594)"}, {"oid": "bd85fc411d88c2f1eb870baf06e60cdf78d79ef0", "committedDate": "2021-02-15 16:47:51 +0100", "message": "Fix sample less than precision (#1655)"}, {"oid": "1cce82a0033685a3134446d0ef4f892e92a66c5d", "committedDate": "2021-02-18 16:29:14 +0200", "message": "External plugin loading fix (#1660)"}, {"oid": "88359ba67a5af0b26bbba8f74dd1d443a9743701", "committedDate": "2021-03-09 11:54:28 +0200", "message": "Adding documentation about using agent only for metrics (#1691)"}, {"oid": "6bcc51bdfe772080fc98405c8d403682539de60a", "committedDate": "2021-06-08 11:41:55 +0300", "message": "Support for inheriting public api annotations (#1773) (#1805)"}, {"oid": "1c15205fa9ec785fd50ac96b19a45ace15cb7342", "committedDate": "2021-06-17 09:25:20 +0300", "message": "[DOC] Details about the body capture maximum size. (#1868)"}, {"oid": "15cd941f15abac76348d39b27337e4dfa7082413", "committedDate": "2021-06-21 10:23:51 +0200", "message": "Minor refactors + enable_experimental_instrumentations config (#1863)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}, {"oid": "d943484772f2a01bf273b475e894d5384d7fb888", "committedDate": "2021-10-18 09:36:39 +0200", "message": "Implement user-agent spec (#2177)"}, {"oid": "a88764775664d39f68d24567781793f2a5d04e3e", "committedDate": "2021-10-24 13:00:00 +0300", "message": "Hostname discovery fix (#2205)"}, {"oid": "58ae2285e64a824f2997d80d6880cb937e4771ba", "committedDate": "2021-11-08 07:29:29 +0200", "message": "[CI] Stabilize flaky tests (#2242)"}, {"oid": "efe97c9bf02dfcca62a94ff655b517326398d296", "committedDate": "2021-11-09 10:15:32 +0000", "message": "renamed span_frames_min_duration to span_stack_trace_min_duration. Ch\u2026 (#2220)"}, {"oid": "1c0f1c6e7d44a7e41b9f883b2ce53e22236cadfc", "committedDate": "2021-11-30 09:28:40 +0100", "message": "Improve runtime attach configuration (#2283)"}, {"oid": "cc0c9295fcb0676db9d0438d4c6ac7f6d37b21f5", "committedDate": "2021-12-02 11:13:22 +0000", "message": "Support tomcat10 (#2299)"}, {"oid": "7434123a31cdf208f57f8f7584b099fa049d66c7", "committedDate": "2021-12-09 09:42:34 +0100", "message": "Support to selectively enable instrumentations (#2292)"}, {"oid": "46e81e53670afb42c2e5ae57ae0849ab7d50b2ca", "committedDate": "2022-01-14 09:03:27 -0500", "message": "Use *auth* instead of authorization for sanitizing fields (#2326)"}, {"oid": "e4f3eaef369969bdae7a530abb058f2abc6b1a06", "committedDate": "2022-01-18 12:12:27 -0500", "message": "Adding instrumentation warmup (#2368)"}, {"oid": "9448cc7185747c4e2b25895936a162ae4beaa87e", "committedDate": "2022-01-23 15:46:31 -0800", "message": "docs: Link to APM Guide (#2408)"}, {"oid": "0a61bca5212db049fb55b2a1040ae131a0751106", "committedDate": "2022-01-26 13:02:28 -0500", "message": "Use Implementation-Version as default service version if it is available (#1922)"}, {"oid": "4c3721427904969922d37e0e07ac2825cc5e2df4", "committedDate": "2022-02-03 17:24:47 +0100", "message": "Service name auto discovery docs and polishing (#2440)"}, {"oid": "c076bb1278d36707e79c6c64b18f877ff1c4b2e4", "committedDate": "2022-07-07 05:45:39 -0400", "message": "Add transaction_name_groups config (#2676)"}, {"oid": "565c2e8074b89e3d06d17714e9d9982e3ab80f55", "committedDate": "2022-09-07 06:49:10 -0400", "message": "implementation for Trace Continuation Strategy (#2760)"}, {"oid": "d9370ea5957639b110fbaa11d63bc382938f419e", "committedDate": "2022-09-13 04:59:55 -0400", "message": "Fix OTel bridge behavior with multiple classloaders + improved activation (#2735)"}, {"oid": "43665f3589709945f206b35ca9a0d0eda9b62ea5", "committedDate": "2022-09-20 15:48:50 +0200", "message": "Ignore '*principal*' headers (#2798)"}, {"oid": "0c8173eb2921eaedeec357f73b478b31f5e7a28a", "committedDate": "2022-10-12 11:59:46 -0400", "message": "Ignore exclude of co.elastic.apm for instrumentation (#2843)"}, {"oid": "edce63f51124db777fdb1d7780bff6712155d570", "committedDate": "2022-10-25 04:46:16 +0300", "message": "Fixing config description (#2857)"}, {"oid": "6da304319315cfe4041a8ec5b50cc6f976965eab", "committedDate": "2022-11-02 04:01:41 -0400", "message": "Opt in for very old bytecode instrumentation (#2866)"}, {"oid": "529ffbcd4e4a58e235a898730fd2672cdea98a07", "committedDate": "2022-12-08 12:41:50 -0500", "message": "[docs] Update asciidoc syntax to fix list rendering (#2919)"}, {"oid": "917e1e1d2a7803b2a6c9061d11a2419ea1fa4539", "committedDate": "2023-01-19 17:17:52 +0000", "message": "clarify about dropped requests for sampling in documentation (#2957)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "e30c77ddd6ca119602bd236ea27777f9274dd239", "committedDate": "2023-02-01 11:27:44 +0200", "message": "Adding the ability to disable TraceContext header injection (#2996)"}, {"oid": "078da74c8109a3a58bcdba20f3d28f392da489ce", "committedDate": "2023-02-22 14:49:56 +0000", "message": "Add Activation method for telemetry on how the agent was started (#2926)"}, {"oid": "f7ad1e14374f40974f8d35b12903cdd3ae959aef", "committedDate": "2023-03-21 02:11:41 -0400", "message": "Implementing `long_field_max_length` according to spec (#3027)"}, {"oid": "b336370f70cc7b3262eca5a18963cfceb2de522c", "committedDate": "2023-05-24 11:49:45 -0400", "message": "Extract configuration from core module to API (#3122)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNDYxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419224610", "body": "We need to test also this config:\r\n- when the general one is not set\r\n- when the general one is set - the higher of both wins\r\n", "bodyText": "We need to test also this config:\n\nwhen the general one is not set\nwhen the general one is set - the higher of both wins", "bodyHTML": "<p dir=\"auto\">We need to test also this config:</p>\n<ul dir=\"auto\">\n<li>when the general one is not set</li>\n<li>when the general one is set - the higher of both wins</li>\n</ul>", "author": "eyalkoren", "createdAt": "2020-05-04T05:56:12Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -82,7 +84,7 @@ void setUp(TestInfo testInfo) {\n \n         Set<String> tags = testInfo.getTags();\n         if (!tags.isEmpty()) {\n-            when(coreConfiguration.getTraceMethodsDurationThreshold()).thenReturn(TimeDuration.of(tags.iterator().next()));", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\nindex f150dc860..98ddde930 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n", "chunk": "@@ -82,9 +82,14 @@ class TraceMethodInstrumentationTest {\n             WildcardMatcher.valueOf(\"*exclude*\"),\n             WildcardMatcher.valueOf(\"manuallyTraced\")));\n \n-        Set<String> tags = testInfo.getTags();\n-        if (!tags.isEmpty()) {\n-            when(coreConfiguration.getSpanMinDuration()).thenReturn(TimeDuration.of(tags.iterator().next()));\n+        for (String tag : testInfo.getTags()) {\n+            TimeDuration duration = TimeDuration.of(tag.split(\"=\")[1]);\n+            if (tag.startsWith(\"span_min_duration=\")) {\n+                doReturn(duration).when(coreConfiguration).getSpanMinDuration();\n+            }\n+            if (tag.startsWith(\"trace_methods_duration_threshold=\")) {\n+                doReturn(duration).when(coreConfiguration).getTraceMethodsDurationThreshold();\n+            }\n         }\n \n         tracer = mockInstrumentationSetup.getTracer();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\nindex f150dc860..98ddde930 100644\n--- a/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n+++ b/apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java\n", "chunk": "@@ -82,9 +82,14 @@ class TraceMethodInstrumentationTest {\n             WildcardMatcher.valueOf(\"*exclude*\"),\n             WildcardMatcher.valueOf(\"manuallyTraced\")));\n \n-        Set<String> tags = testInfo.getTags();\n-        if (!tags.isEmpty()) {\n-            when(coreConfiguration.getSpanMinDuration()).thenReturn(TimeDuration.of(tags.iterator().next()));\n+        for (String tag : testInfo.getTags()) {\n+            TimeDuration duration = TimeDuration.of(tag.split(\"=\")[1]);\n+            if (tag.startsWith(\"span_min_duration=\")) {\n+                doReturn(duration).when(coreConfiguration).getSpanMinDuration();\n+            }\n+            if (tag.startsWith(\"trace_methods_duration_threshold=\")) {\n+                doReturn(duration).when(coreConfiguration).getTraceMethodsDurationThreshold();\n+            }\n         }\n \n         tracer = mockInstrumentationSetup.getTracer();\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "827450d577ee41b43a6b426ed369e1fec9421f26", "committedDate": "2020-07-23 11:00:57 +0200", "message": "Validate that tests don't leaks tracers, scopes and pooled objects (#1275)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNTgwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419225801", "body": "Currently, this means that the higher of both thresholds (this one and `span_min_duration`) will determine what to discard. I think this makes sense.", "bodyText": "Currently, this means that the higher of both thresholds (this one and span_min_duration) will determine what to discard. I think this makes sense.", "bodyHTML": "<p dir=\"auto\">Currently, this means that the higher of both thresholds (this one and <code>span_min_duration</code>) will determine what to discard. I think this makes sense.</p>", "author": "eyalkoren", "createdAt": "2020-05-04T06:01:29Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "33066205f232ef6e8fce10807f12be9cc1470757", "changed_code": [{"header": "diff --git a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java b/apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\nsimilarity index 69%\nrename from apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\nrename to apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\nindex e79f7362e..a4e8653b6 100644\n--- a/apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java\n+++ b/apm-agent-core/src/main/java/co/elastic/apm/agent/tracemethods/TraceMethodInstrumentation.java\n", "chunk": "@@ -50,66 +47,25 @@ import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n import static net.bytebuddy.matcher.ElementMatchers.isNative;\n import static net.bytebuddy.matcher.ElementMatchers.isSynthetic;\n import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n-import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n import static net.bytebuddy.matcher.ElementMatchers.not;\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n public class TraceMethodInstrumentation extends ElasticApmInstrumentation {\n \n-    public static long traceMethodThresholdMicros;\n-\n-    protected final MethodMatcher methodMatcher;\n+    private final MethodMatcher methodMatcher;\n+    private final CoreConfiguration config;\n \n     public TraceMethodInstrumentation(ElasticApmTracer tracer, MethodMatcher methodMatcher) {\n         this.methodMatcher = methodMatcher;\n-        traceMethodThresholdMicros = tracer.getConfig(CoreConfiguration.class).getTraceMethodsDurationThreshold().getMillis() * 1000;\n-    }\n-\n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void onMethodEnter(@Advice.Origin Class<?> clazz,\n-                                     @SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature,\n-                                     @Advice.Local(\"span\") AbstractSpan<?> span) {\n-        if (tracer != null) {\n-            final AbstractSpan<?> parent = tracer.getActive();\n-            if (parent == null) {\n-                span = tracer.startRootTransaction(clazz.getClassLoader());\n-                if (span != null) {\n-                    span.withName(signature).activate();\n-                }\n-            } else if (parent.isSampled()) {\n-                span = parent.createSpan()\n-                    .withName(signature)\n-                    .activate();\n-            }\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?> span,\n-                                    @Advice.Thrown @Nullable Throwable t) {\n-        if (span != null) {\n-            span.captureException(t);\n-            final long endTime = span.getTraceContext().getClock().getEpochMicros();\n-            if (span instanceof Span) {\n-                long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {\n-                    span.requestDiscarding();\n-                }\n-            }\n-            span.deactivate().end(endTime);\n-        }\n+        config = tracer.getConfig(CoreConfiguration.class);\n     }\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n         return matches(methodMatcher.getClassMatcher())\n+            .and(not(isProxy()))\n             .and(methodMatcher.getAnnotationMatcher())\n-            .and(not(nameContains(\"$JaxbAccessor\")))\n-            .and(not(nameContains(\"$$\")))\n-            .and(not(nameContains(\"CGLIB\")))\n-            .and(not(nameContains(\"EnhancerBy\")))\n-            .and(not(nameContains(\"$Proxy\")))\n             .and(declaresMethod(matches(methodMatcher.getMethodMatcher())));\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "b0dbda275335adf618d1e4c8fc94a53ce19f6764", "committedDate": "2020-07-02 15:42:55 +0200", "message": "Indy plugins (#1230)"}, {"oid": "dd3e45ff28f5969024ad99240c8954483306e7c3", "committedDate": "2020-07-06 15:40:43 +0200", "message": "Add GlobalTracer"}, {"oid": "8d85a214239ed514d3c3d924d154cb22c9f4a898", "committedDate": "2020-08-17 16:41:30 +0200", "message": "Deprecate non-indy plugins (#1329)"}, {"oid": "0465d479430172c3e745afd2ef5b62a3da6b60aa", "committedDate": "2021-04-12 20:16:48 +0200", "message": "Do not instrument proxies (#1735) (#1738)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NTk0Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419265946", "body": "The greater between them?", "bodyText": "The greater between them?", "bodyHTML": "<p dir=\"auto\">The greater between them?</p>", "author": "eyalkoren", "createdAt": "2020-05-04T07:54:57Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "diffHunk": "@@ -733,7 +735,7 @@ private void stopProfiling(SamplingProfiler samplingProfiler) {\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.config.getInferredSpansMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);", "originalCommit": "a0e2ab3c384074643cb886b80438b84554030d42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex 24f6304a7..e1a3f0970 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n", "chunk": "@@ -735,7 +736,7 @@ public class SamplingProfiler extends AbstractLifecycleListener implements Runna\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.getInferredSpansMinDurationNs());\n                 int createdSpans = callTree.spanify();\n                 if (logger.isDebugEnabled()) {\n                     if (createdSpans > 0) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex 24f6304a7..e1a3f0970 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n", "chunk": "@@ -735,7 +736,7 @@ public class SamplingProfiler extends AbstractLifecycleListener implements Runna\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.getInferredSpansMinDurationNs());\n                 int createdSpans = callTree.spanify();\n                 if (logger.isDebugEnabled()) {\n                     if (createdSpans > 0) {\n", "next_change": {"commit": "1039db0c84f47493f2ce2b755909e4c4212c27fc", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex e1a3f0970..26ff642d6 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n", "chunk": "@@ -736,17 +880,19 @@ public class SamplingProfiler extends AbstractLifecycleListener implements Runna\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.getInferredSpansMinDurationNs());\n-                int createdSpans = callTree.spanify();\n-                if (logger.isDebugEnabled()) {\n-                    if (createdSpans > 0) {\n-                        logger.debug(\"Created spans ({}) for thread {}\", createdSpans, threadId);\n-                    } else {\n-                        logger.debug(\"Created no spans for thread {} (count={})\", threadId, callTree.getCount());\n+                try {\n+                    callTree.end(samplingProfiler.callTreePool, samplingProfiler.getInferredSpansMinDurationNs());\n+                    int createdSpans = callTree.spanify();\n+                    if (logger.isDebugEnabled()) {\n+                        if (createdSpans > 0) {\n+                            logger.debug(\"Created spans ({}) for thread {}\", createdSpans, threadId);\n+                        } else {\n+                            logger.debug(\"Created no spans for thread {} (count={})\", threadId, callTree.getCount());\n+                        }\n                     }\n+                } finally {\n+                     callTree.recycle(samplingProfiler.callTreePool, samplingProfiler.rootPool);\n                 }\n-                callTree.recycle(samplingProfiler.callTreePool);\n-                samplingProfiler.rootPool.recycle(callTree);\n             }\n         }\n \n", "next_change": {"commit": "a43c21b70c93a67275ef7275c1c291404956bde6", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\nindex 26ff642d6..d4543002f 100644\n--- a/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n+++ b/apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java\n", "chunk": "@@ -899,6 +913,7 @@ public class SamplingProfiler extends AbstractLifecycleListener implements Runna\n         public void serialize(ByteBuffer buf) {\n             buf.putLong(timestamp);\n             buf.putShort(getServiceNameIndex());\n+            buf.putShort(getServiceVersionIndex());\n             buf.put(traceContextBuffer);\n             buf.put(previousContextBuffer);\n             buf.put(rootContext ? (byte) 1 : (byte) 0);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "28e6f4524129e2abc485c375c7cb87c0f06b603f", "committedDate": "2020-05-12 12:25:34 +0200", "message": "Fix parent/child issues with inferred spans (#1117)"}, {"oid": "baa4a3bf46dddab97cc341dfd7c2d69464cef0c6", "committedDate": "2020-05-19 16:48:58 +0300", "message": "Upgrading async profiler version to 1.7.1 and adding safemode config (#1173)"}, {"oid": "a739286a2fac38678178ea78af97fb73e365fee5", "committedDate": "2020-05-25 14:27:40 +0200", "message": "Fix IndexOutOfBoundsException when handling deactivation events (#1200)"}, {"oid": "1e26d7dac9e3b9f0640ed7d58b59f333c593b58b", "committedDate": "2020-08-10 17:37:49 +0200", "message": "Add micrometer support (#1303)"}, {"oid": "951b5fff8863a7d1a0816c43b16ac920006e315c", "committedDate": "2020-08-20 17:20:21 +0300", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set (#1350)"}, {"oid": "59d97f085ac8e195a09df236234a462fea5cc825", "committedDate": "2020-09-01 10:27:37 +0200", "message": "Lazily create profiler temporary files (#1360)"}, {"oid": "b03881fb01e9e8cabdbdba55ac7b782970704fd7", "committedDate": "2020-09-07 16:36:28 +0300", "message": "Sampling profiler - fixing a file handle leak and adding analysis config (#1387)"}, {"oid": "1039db0c84f47493f2ce2b755909e4c4212c27fc", "committedDate": "2021-01-07 12:23:38 +0200", "message": "CallTree recycling (#1592)"}, {"oid": "a7e1c25af8813c81f0593b196dcf96eb54a6cfe8", "committedDate": "2021-02-15 14:28:24 +0100", "message": "Flush metrics on shutdown (#1658)"}, {"oid": "2688c452335ea2915a19a742b0c74b0145091cd4", "committedDate": "2021-05-03 17:22:55 +0200", "message": "Prevent profiler flaky test (#1799)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "f105513a7652c180db1dd13cd4727c919a261455", "committedDate": "2021-10-06 14:22:30 +0300", "message": "Introduce async profiler upgrade utility and upgrade to 1.8.7 (#2165)"}, {"oid": "864e4e2cbdd0177c6fcbd7eca38a2f0ba8167463", "committedDate": "2022-01-18 10:41:57 -0500", "message": "Logging custom facade (#2390)"}, {"oid": "a43c21b70c93a67275ef7275c1c291404956bde6", "committedDate": "2022-01-27 03:04:12 -0500", "message": "Added support for overwriting the service version per classloader (#1726)"}, {"oid": "73b62624cfa4e095b1a6241ac11bac046dc096f1", "committedDate": "2023-01-26 05:46:52 -0500", "message": "Add bootstrap check for disabling agent when required (#2951)"}, {"oid": "7637d933f3db37dba101fd3592d3bc1d529436c6", "committedDate": "2023-02-07 14:54:40 +0200", "message": "Add configuration to suppress Async Profiler logging (#3002)"}, {"oid": "05efbe97a7aa65ac5128c93b4ee64b4bdbfa5af0", "committedDate": "2023-03-10 13:05:28 +0000", "message": "Introduce tracer API within isolated module. (#3043)"}, {"oid": "b336370f70cc7b3262eca5a18963cfceb2de522c", "committedDate": "2023-05-24 11:49:45 -0400", "message": "Extract configuration from core module to API (#3122)"}]}, {"oid": "39c6379829da7553f2f5523dfced8cfbadeb0550", "url": "https://github.com/elastic/apm-agent-java/commit/39c6379829da7553f2f5523dfced8cfbadeb0550", "message": "Merge remote-tracking branch 'origin/master' into span-duration-threshold", "committedDate": "2020-05-04T11:24:40Z", "type": "commit"}, {"oid": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "url": "https://github.com/elastic/apm-agent-java/commit/b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "message": "Apply suggestions from review", "committedDate": "2020-05-04T16:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NDMyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420074320", "body": "\ud83d\ude0d ", "bodyText": "\ud83d\ude0d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"heart_eyes\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png\">\ud83d\ude0d</g-emoji></p>", "author": "eyalkoren", "createdAt": "2020-05-05T12:36:10Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -184,24 +189,50 @@ void testAgentPaused() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testDiscardMethods_DiscardAll() {\n         new TestDiscardableMethods(tracer).root(false);\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(0);\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")", "originalCommit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "827450d577ee41b43a6b426ed369e1fec9421f26", "committedDate": "2020-07-23 11:00:57 +0200", "message": "Validate that tests don't leaks tracers, scopes and pooled objects (#1275)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDY1MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420080651", "body": "I'd add another test with only `@Tag(\"trace_methods_duration_threshold=50ms\")`", "bodyText": "I'd add another test with only @Tag(\"trace_methods_duration_threshold=50ms\")", "bodyHTML": "<p dir=\"auto\">I'd add another test with only <code>@Tag(\"trace_methods_duration_threshold=50ms\")</code></p>", "author": "eyalkoren", "createdAt": "2020-05-05T12:46:38Z", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java", "diffHunk": "@@ -85,15 +90,24 @@ void testWithDefaultConfig() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testWithHighThreshold() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(2);\n     }\n \n     @Test\n-    @Tag(\"50ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")\n+    void testWithHigherSpecificThreshold() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(2);\n+    }\n+\n+    @Test\n+    @Tag(\"span_min_duration=50ms\")", "originalCommit": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\nindex 9ddfded6a..ed164c4b3 100644\n--- a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n", "chunk": "@@ -108,7 +108,15 @@ class AsyncTraceMethodInstrumentationTest {\n \n     @Test\n     @Tag(\"span_min_duration=50ms\")\n-    void testWithCrossedThreshold() {\n+    void testWithCrossedThreshold_Generic() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(4);\n+    }\n+\n+    @Test\n+    @Tag(\"trace_methods_duration_threshold=50ms\")\n+    void testWithCrossedThreshold_Specific() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(4);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "changed_code": [{"header": "diff --git a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\nindex 9ddfded6a..ed164c4b3 100644\n--- a/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n+++ b/apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java\n", "chunk": "@@ -108,7 +108,15 @@ class AsyncTraceMethodInstrumentationTest {\n \n     @Test\n     @Tag(\"span_min_duration=50ms\")\n-    void testWithCrossedThreshold() {\n+    void testWithCrossedThreshold_Generic() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(4);\n+    }\n+\n+    @Test\n+    @Tag(\"trace_methods_duration_threshold=50ms\")\n+    void testWithCrossedThreshold_Specific() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(4);\n", "next_change": null}]}, "commits_in_main": [{"oid": "ec2b16c6d5453f21de6478ab166443705eb84dc9", "message": "Merge commit", "committedDate": null}, {"oid": "b0dbda275335adf618d1e4c8fc94a53ce19f6764", "committedDate": "2020-07-02 15:42:55 +0200", "message": "Indy plugins (#1230)"}, {"oid": "827450d577ee41b43a6b426ed369e1fec9421f26", "committedDate": "2020-07-23 11:00:57 +0200", "message": "Validate that tests don't leaks tracers, scopes and pooled objects (#1275)"}, {"oid": "63707919b26d5dbc8ec4d9a37659213bfb8c8264", "committedDate": "2021-03-16 12:38:36 +0100", "message": "Add InteliJ debugger work-around (#1689)"}, {"oid": "f9267ff7fc7df619cb2272b8790fde618055c8f6", "committedDate": "2021-06-22 16:51:47 +0300", "message": "Remove license header template (#1874)"}, {"oid": "33066205f232ef6e8fce10807f12be9cc1470757", "committedDate": "2021-09-01 13:59:12 +0200", "message": "Migrate trace_methods to indy plugin (#2094)"}, {"oid": "b6ef7eb0edeffa34ee9c8ef5c605aa4375f580f6", "committedDate": "2022-04-06 08:52:51 +0300", "message": "[Flakey test] Trying to stablize AsyncTraceMethodInstrumentationTest (#2572)"}, {"oid": "b336370f70cc7b3262eca5a18963cfceb2de522c", "committedDate": "2023-05-24 11:49:45 -0400", "message": "Extract configuration from core module to API (#3122)"}]}, {"oid": "a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "url": "https://github.com/elastic/apm-agent-java/commit/a6ff8ad3837b2d127989df0a4522d0c957f0f87c", "message": "Apply suggestions from review", "committedDate": "2020-05-06T07:06:17Z", "type": "commit"}]}