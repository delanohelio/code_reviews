{"pr_number": 1362, "pr_title": "migrate to indy apm-error-logging-plugin", "pr_author": "kananindzya", "pr_createdAt": "2020-08-30T19:12:02Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1362", "timeline": [{"oid": "0e594515276ae9d95a3986a36616e26bb04e935a", "url": "https://github.com/elastic/apm-agent-java/commit/0e594515276ae9d95a3986a36616e26bb04e935a", "message": "migrate to indy apm-error-logging-plugin", "committedDate": "2020-08-30T19:10:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTc1OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480015759", "body": "Can be simplified with `co.elastic.apm.agent.sdk.state.CallDepth`. See `co.elastic.apm.agent.servlet.RequestStreamRecordingInstrumentation.GetInputStreamAdvice` as an example.\r\n\r\nWhen using it, make sure to add `onThrowable = Throwable.class` to `OnMethodExit`. See also the Javadocs of `co.elastic.apm.agent.sdk.state.CallDepth#decrement` for more details.", "bodyText": "Can be simplified with co.elastic.apm.agent.sdk.state.CallDepth. See co.elastic.apm.agent.servlet.RequestStreamRecordingInstrumentation.GetInputStreamAdvice as an example.\nWhen using it, make sure to add onThrowable = Throwable.class to OnMethodExit. See also the Javadocs of co.elastic.apm.agent.sdk.state.CallDepth#decrement for more details.", "bodyHTML": "<p dir=\"auto\">Can be simplified with <code>co.elastic.apm.agent.sdk.state.CallDepth</code>. See <code>co.elastic.apm.agent.servlet.RequestStreamRecordingInstrumentation.GetInputStreamAdvice</code> as an example.</p>\n<p dir=\"auto\">When using it, make sure to add <code>onThrowable = Throwable.class</code> to <code>OnMethodExit</code>. See also the Javadocs of <code>co.elastic.apm.agent.sdk.state.CallDepth#decrement</code> for more details.</p>", "author": "felixbarny", "createdAt": "2020-08-31T09:44:57Z", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,49 +42,39 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n+    public static final GlobalThreadLocal<Boolean> nestedThreadLocal = GlobalThreadLocal.get(AbstractLoggerErrorCapturingInstrumentation.class, \"nested\", Boolean.FALSE);", "originalCommit": "0e594515276ae9d95a3986a36616e26bb04e935a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NjQ5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480046492", "bodyText": "replaced with CallDepth", "author": "kananindzya", "createdAt": "2020-08-31T10:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTc1OQ=="}], "type": "inlineReview"}, {"oid": "d2463642e3cb7654276520822742ef64385b7481", "url": "https://github.com/elastic/apm-agent-java/commit/d2463642e3cb7654276520822742ef64385b7481", "message": "instead of GlobalThreadLocal added CallDepth", "committedDate": "2020-08-31T10:48:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDcyMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480064723", "body": "Can be simplified as there's already a `if (errorCaptureObj instanceof ErrorCapture)` check afterwards. That check is only true if the error object is not null.\r\n\r\n```suggestion\r\n            callDepth.decrement();\r\n```", "bodyText": "Can be simplified as there's already a if (errorCaptureObj instanceof ErrorCapture) check afterwards. That check is only true if the error object is not null.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (callDepth.isNestedCallAndDecrement()) {\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        callDepth.decrement();", "bodyHTML": "<p dir=\"auto\">Can be simplified as there's already a <code>if (errorCaptureObj instanceof ErrorCapture)</code> check afterwards. That check is only true if the error object is not null.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (callDepth<span class=\"pl-k\">.</span>isNestedCallAndDecrement()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            callDepth<span class=\"pl-k\">.</span>decrement();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-08-31T11:19:27Z", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,50 +42,37 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return LoggingAdvice.class;\n     }\n \n-    @Override\n-    public boolean indyPlugin() {\n-        return false;\n-    }\n-\n     public static class LoggingAdvice {\n \n-        @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void logEnter(@Advice.Argument(1) Throwable exception,\n-                                    @Advice.Local(\"nested\") boolean nested,\n-                                    @Advice.Origin Class<?> clazz,\n-                                    @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            nested = nestedThreadLocal.get();\n-            if (!nested) {\n-                error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n+        private static final CallDepth callDepth = CallDepth.get(LoggingAdvice.class);\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object logEnter(@Advice.Argument(1) Throwable exception,\n+                                        @Advice.Origin Class<?> clazz) {\n+            if (!callDepth.isNestedCallAndIncrement()) {\n+                ErrorCapture error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n                 if (error != null) {\n                     error.activate();\n                 }\n-                nestedThreadLocal.set(Boolean.TRUE);\n+                return error;\n             }\n+            return null;\n         }\n \n-        @Advice.OnMethodExit(suppress = Throwable.class)\n-        public static void logExit(@Advice.Local(\"nested\") boolean nested,\n-                                   @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            if (error != null) {\n-                error.deactivate().end();\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void logExit(@Advice.Enter @Nullable Object errorCaptureObj) {\n+            if (callDepth.isNestedCallAndDecrement()) {\n+                return;\n             }", "originalCommit": "d2463642e3cb7654276520822742ef64385b7481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3NDUzMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480074532", "bodyText": "simplified", "author": "kananindzya", "createdAt": "2020-08-31T11:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDcyMw=="}], "type": "inlineReview"}, {"oid": "ee4b1864ee1e69d413a712f37bb43f9314cf3b99", "url": "https://github.com/elastic/apm-agent-java/commit/ee4b1864ee1e69d413a712f37bb43f9314cf3b99", "message": "fix according to comments", "committedDate": "2020-08-31T11:42:39Z", "type": "commit"}]}