{"pr_number": 1050, "pr_title": "Issue 846 add errorid to mdc", "pr_author": "kananindzya", "pr_createdAt": "2020-02-24T06:14:30Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1050", "timeline": [{"oid": "d6b70452687ffcf76c5c48a57370b0232d44200c", "url": "https://github.com/elastic/apm-agent-java/commit/d6b70452687ffcf76c5c48a57370b0232d44200c", "message": "added preventing the shade plugin from relocating org.slf4j.Logger to *.shaded.slf4j.Logger in error logging instrumentation", "committedDate": "2020-03-10T03:28:36Z", "type": "commit"}, {"oid": "8c28fbc125b26bf204227146f717e187f8480109", "url": "https://github.com/elastic/apm-agent-java/commit/8c28fbc125b26bf204227146f717e187f8480109", "message": "local", "committedDate": "2020-03-10T03:28:36Z", "type": "commit"}, {"oid": "ef1691984ea49685d0a42f153a96b72fe81dbfcf", "url": "https://github.com/elastic/apm-agent-java/commit/ef1691984ea49685d0a42f153a96b72fe81dbfcf", "message": "ErrorCapture implement TraceContextHolder.", "committedDate": "2020-03-10T03:28:36Z", "type": "commit"}, {"oid": "940d8b0982a01a5db48f59ef7b9321982dd0892f", "url": "https://github.com/elastic/apm-agent-java/commit/940d8b0982a01a5db48f59ef7b9321982dd0892f", "message": "feature added error id to mdc", "committedDate": "2020-03-10T03:28:36Z", "type": "commit"}, {"oid": "76a09971f10c2175c252a9008db9f16c22739988", "url": "https://github.com/elastic/apm-agent-java/commit/76a09971f10c2175c252a9008db9f16c22739988", "message": "added IT for mdc actionvation listener for error id capture", "committedDate": "2020-03-10T04:34:28Z", "type": "commit"}, {"oid": "76a09971f10c2175c252a9008db9f16c22739988", "url": "https://github.com/elastic/apm-agent-java/commit/76a09971f10c2175c252a9008db9f16c22739988", "message": "added IT for mdc actionvation listener for error id capture", "committedDate": "2020-03-10T04:34:28Z", "type": "forcePushed"}, {"oid": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "url": "https://github.com/elastic/apm-agent-java/commit/93ab45d725148adeafb9b2ee37b359af0cfa444c", "message": "deleted jsf snapshot info", "committedDate": "2020-03-10T06:33:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODAyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390228022", "body": "Actually, the MDC should be empty here. Only within the `logger.error`, the MDC should be set. This is a bit tricky to test but you could mock the `org.slf4j.Logger` interface with Mockito:\r\n```\r\nLogger logger = mock(Logger.class);\r\n...\r\nwhen(logger.error(anyString(), any(Exception.class)).then(invocation -> assertMdcErrorIdIsNotBlank());\r\n```\r\n\r\nAs a return type is expected for the `Answer` lambda, change the return type form `private void assertMdcErrorIdIsEmpty()` to `Void` and return null from this method.", "bodyText": "Actually, the MDC should be empty here. Only within the logger.error, the MDC should be set. This is a bit tricky to test but you could mock the org.slf4j.Logger interface with Mockito:\nLogger logger = mock(Logger.class);\n...\nwhen(logger.error(anyString(), any(Exception.class)).then(invocation -> assertMdcErrorIdIsNotBlank());\n\nAs a return type is expected for the Answer lambda, change the return type form private void assertMdcErrorIdIsEmpty() to Void and return null from this method.", "bodyHTML": "<p dir=\"auto\">Actually, the MDC should be empty here. Only within the <code>logger.error</code>, the MDC should be set. This is a bit tricky to test but you could mock the <code>org.slf4j.Logger</code> interface with Mockito:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Logger logger = mock(Logger.class);\n...\nwhen(logger.error(anyString(), any(Exception.class)).then(invocation -&gt; assertMdcErrorIdIsNotBlank());\"><pre><code>Logger logger = mock(Logger.class);\n...\nwhen(logger.error(anyString(), any(Exception.class)).then(invocation -&gt; assertMdcErrorIdIsNotBlank());\n</code></pre></div>\n<p dir=\"auto\">As a return type is expected for the <code>Answer</code> lambda, change the return type form <code>private void assertMdcErrorIdIsEmpty()</code> to <code>Void</code> and return null from this method.</p>", "author": "felixbarny", "createdAt": "2020-03-10T10:43:42Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        log4jMdcWorking = true;\n+        assertMdcErrorIdIsEmpty();\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsNotBlank();", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNTc3MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390925770", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-03-11T12:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODI0Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390228247", "body": "```suggestion\r\n   void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n          \n          \n            \n               void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"x x-first\"> </span><span class=\"pl-k x\">public</span><span class=\"x x-last\"> </span><span class=\"pl-k\">void</span> testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">void</span> testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-10T10:44:07Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODMyNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390228325", "body": "```suggestion\r\n   void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\n          \n          \n            \n               void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"x x-first\"> </span><span class=\"pl-k x\">public</span><span class=\"x x-last\"> </span><span class=\"pl-k\">void</span> testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">void</span> testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-10T10:44:16Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        log4jMdcWorking = true;\n+        assertMdcErrorIdIsEmpty();\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsNotBlank();\n+        transaction.end();\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTE5Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390231193", "body": "```suggestion\r\n        Assumptions.assumeTrue(() -> {\r\n            org.apache.log4j.MDC.put(\"test\", true);\r\n            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\r\n        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log4jMdcWorking = true;\n          \n          \n            \n                    Assumptions.assumeTrue(() -> {\n          \n          \n            \n                        org.apache.log4j.MDC.put(\"test\", true);\n          \n          \n            \n                        return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n          \n          \n            \n                    }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">log4jMdcWorking </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">true</span><span class=\"x x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi x x-first\">Assumptions</span><span class=\"pl-k x\">.</span><span class=\"x\">assumeTrue(() </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">org.apache.log4j<span class=\"pl-k\">.</span>MDC</span><span class=\"pl-k\">.</span>put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">true</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">org.apache.log4j<span class=\"pl-k\">.</span>MDC</span><span class=\"pl-k\">.</span>get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">==</span> <span class=\"pl-smi\">Boolean</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TRUE</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-10T10:49:47Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        log4jMdcWorking = true;\n+        assertMdcErrorIdIsEmpty();\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsNotBlank();\n+        transaction.end();\n+    }\n+\n+    @Test\n+    public void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\n+        log4jMdcWorking = true;", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTY3OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390231678", "body": "Remove this. Use assumptions instead. See `testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j`.", "bodyText": "Remove this. Use assumptions instead. See testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j.", "bodyHTML": "<p dir=\"auto\">Remove this. Use assumptions instead. See <code>testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j</code>.</p>", "author": "felixbarny", "createdAt": "2020-03-10T10:50:38Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNTg3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390925879", "bodyText": "removed", "author": "kananindzya", "createdAt": "2020-03-11T12:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzcxOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390233718", "body": "As `ActivationListeners` are now called for `ErrorCapture`s, change `ProfilingActivationListener`:\r\n\r\n```java\r\n        if (!context.isSampled() || context instanceof ErrorCapture) {\r\n            return;\r\n        }\r\n```", "bodyText": "As ActivationListeners are now called for ErrorCaptures, change ProfilingActivationListener:\n        if (!context.isSampled() || context instanceof ErrorCapture) {\n            return;\n        }", "bodyHTML": "<p dir=\"auto\">As <code>ActivationListeners</code> are now called for <code>ErrorCapture</code>s, change <code>ProfilingActivationListener</code>:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (!context.isSampled() || context instanceof ErrorCapture) {\n            return;\n        }\"><pre>        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>context<span class=\"pl-k\">.</span>isSampled() <span class=\"pl-k\">||</span> context <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorCapture</span>) {\n            <span class=\"pl-k\">return</span>;\n        }</pre></div>", "author": "felixbarny", "createdAt": "2020-03-10T10:54:35Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/error/ErrorCapture.java", "diffHunk": "@@ -37,12 +37,13 @@\n \n import javax.annotation.Nullable;\n import java.util.Collection;\n+import java.util.concurrent.Callable;\n \n \n /**\n  * Data captured by an agent representing an event occurring in a monitored service\n  */\n-public class ErrorCapture implements Recyclable {\n+public class ErrorCapture extends TraceContextHolder<ErrorCapture> implements Recyclable {", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNjYyNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390926627", "bodyText": "added\nin afterDeactivate I added this condition, or Is it not necessary here?\n        if (!deactivatedContext.isSampled() || deactivatedContext instanceof ErrorCapture) {\n            return;\n        }", "author": "kananindzya", "createdAt": "2020-03-11T12:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzMDU5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390930591", "bodyText": "\ud83d\udc4d", "author": "felixbarny", "createdAt": "2020-03-11T12:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDg4NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390234885", "body": "`tracer` cannot be `null`. It's not annotated with `@Nullable` and it's a final field, initialized in the constructor from a constructed parameter which is not `@Nullable`.\r\n\r\n```suggestion\r\n                    if (context instanceof ErrorCapture) {\r\n```", "bodyText": "tracer cannot be null. It's not annotated with @Nullable and it's a final field, initialized in the constructor from a constructed parameter which is not @Nullable.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (tracer != null && context instanceof ErrorCapture) {\n          \n          \n            \n                                if (context instanceof ErrorCapture) {", "bodyHTML": "<p dir=\"auto\"><code>tracer</code> cannot be <code>null</code>. It's not annotated with <code>@Nullable</code> and it's a final field, initialized in the constructor from a constructed parameter which is not <code>@Nullable</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (<span class=\"x x-first\">tracer </span><span class=\"pl-k x\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span>context <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorCapture</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (context <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorCapture</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-10T10:56:37Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/main/java/co/elastic/apm/agent/mdc/MdcActivationListener.java", "diffHunk": "@@ -158,6 +159,9 @@ public void beforeActivate(TraceContextHolder<?> context) throws Throwable {\n                         put.invoke(TRACE_ID, traceContext.getTraceId().toString());\n                         put.invoke(TRANSACTION_ID, traceContext.getTransactionId().toString());\n                     }\n+                    if (tracer != null && context instanceof ErrorCapture) {", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNjc1Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390926753", "bodyText": "deleted", "author": "kananindzya", "createdAt": "2020-03-11T12:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNTUzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390235534", "body": "Also add a test for logging errors which are not within a transaction.", "bodyText": "Also add a test for logging errors which are not within a transaction.", "bodyHTML": "<p dir=\"auto\">Also add a test for logging errors which are not within a transaction.</p>", "author": "felixbarny", "createdAt": "2020-03-10T10:57:47Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MdcActivationListenerIT.class);\n+    private static final org.apache.logging.log4j.Logger apacheLogger = LogManager.getLogger(MdcActivationListenerIT.class);\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    private Boolean log4jMdcWorking;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxOTkyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391419922", "bodyText": "We can't test this, because AbstractLoggingInstrumentation#logEnter will exit with condition tracer.getActive() == null", "author": "kananindzya", "createdAt": "2020-03-12T06:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNTUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MDU0MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391440541", "bodyText": "Just remove that condition \ud83d\ude42\nIt's ok to provide if tracer.getActive() returns null. Just make the parameter @Nullable (see other suggestion in ElasticApmTracer).", "author": "felixbarny", "createdAt": "2020-03-12T07:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNTUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjcyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390236726", "body": "```suggestion\r\n        return getTraceContext().isChildOf(other);\r\n```\r\n\r\nThis can also be pulled up to `TraceContextHolder`", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new UnsupportedOperationException();\n          \n          \n            \n                    return getTraceContext().isChildOf(other);\n          \n      \n    \n    \n  \n\nThis can also be pulled up to TraceContextHolder", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">throw</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">UnsupportedOperationException</span><span class=\"x x-last\">(</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">return</span><span class=\"x\"> getTraceContext()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isChildOf(other</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This can also be pulled up to <code>TraceContextHolder</code></p>", "author": "felixbarny", "createdAt": "2020-03-10T10:59:59Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/error/ErrorCapture.java", "diffHunk": "@@ -146,6 +146,32 @@ public TraceContext getTraceContext() {\n         return traceContext;\n     }\n \n+    @Override\n+    public Span createSpan() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Span createSpan(long epochMicros) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isChildOf(TraceContextHolder other) {\n+        throw new UnsupportedOperationException();", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNjg4NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390926885", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-03-11T12:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzA1MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390237050", "body": "```suggestion\r\n        throw new UnsupportedOperationException(\"Creating a span as a child of an error is not possible\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new UnsupportedOperationException();\n          \n          \n            \n                    throw new UnsupportedOperationException(\"Creating a span as a child of an error is not possible\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">Creating a span as a child of an error is not possible</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-10T11:00:37Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/error/ErrorCapture.java", "diffHunk": "@@ -146,6 +146,32 @@ public TraceContext getTraceContext() {\n         return traceContext;\n     }\n \n+    @Override\n+    public Span createSpan() {\n+        throw new UnsupportedOperationException();", "originalCommit": "93ab45d725148adeafb9b2ee37b359af0cfa444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNjk0NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390926945", "bodyText": "added message", "author": "kananindzya", "createdAt": "2020-03-11T12:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzMDkzMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390930930", "bodyText": "Also, add similar messages to the other methods", "author": "felixbarny", "createdAt": "2020-03-11T12:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDUzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391410531", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-03-12T05:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzA1MA=="}], "type": "inlineReview"}, {"oid": "6a941e9b0ee22c0f5e65c20336888b748f0ef17b", "url": "https://github.com/elastic/apm-agent-java/commit/6a941e9b0ee22c0f5e65c20336888b748f0ef17b", "message": "Update apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>", "committedDate": "2020-03-11T09:04:21Z", "type": "commit"}, {"oid": "d09f441be0b050fb93a5448f1ac34f63fa24c1de", "url": "https://github.com/elastic/apm-agent-java/commit/d09f441be0b050fb93a5448f1ac34f63fa24c1de", "message": "Update apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>", "committedDate": "2020-03-11T09:04:35Z", "type": "commit"}, {"oid": "181126b0712f8ec528d728ad01a5da324f659ce8", "url": "https://github.com/elastic/apm-agent-java/commit/181126b0712f8ec528d728ad01a5da324f659ce8", "message": "Update apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>", "committedDate": "2020-03-11T09:04:51Z", "type": "commit"}, {"oid": "2ebcdcbe0905335592e3af7907b4908e2f00848f", "url": "https://github.com/elastic/apm-agent-java/commit/2ebcdcbe0905335592e3af7907b4908e2f00848f", "message": "fixed according to comments", "committedDate": "2020-03-11T12:06:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzMTY0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390931642", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-k x x-last\">@Test</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-11T12:20:16Z", "path": "apm-agent-plugins/apm-es-restclient-plugin/apm-es-restclient-plugin-5_6/src/test/java/co/elastic/apm/agent/es/restclient/v5_6/ElasticsearchRestClientInstrumentationIT.java", "diffHunk": "@@ -20,6 +20,7 @@\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n+    @Test", "originalCommit": "2ebcdcbe0905335592e3af7907b4908e2f00848f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDQ3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391410477", "bodyText": "deleted", "author": "kananindzya", "createdAt": "2020-03-12T05:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzMTY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNTMyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390935326", "body": "to remove the `error.id` after capturing the error\r\n```suggestion\r\n                    if (context instanceof ErrorCapture) {\r\n                        remove.invokeExact(ERROR_ID);\r\n                    } else if (tracer.getActive() == null) {\r\n                        remove.invokeExact(TRACE_ID);\r\n                        remove.invokeExact(TRANSACTION_ID);\r\n                    }\r\n```", "bodyText": "to remove the error.id after capturing the error\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (tracer.getActive() == null) {\n          \n          \n            \n                                    remove.invokeExact(TRACE_ID);\n          \n          \n            \n                                    remove.invokeExact(TRANSACTION_ID);\n          \n          \n            \n                                    remove.invokeExact(ERROR_ID);\n          \n          \n            \n                                }\n          \n          \n            \n                                if (context instanceof ErrorCapture) {\n          \n          \n            \n                                    remove.invokeExact(ERROR_ID);\n          \n          \n            \n                                } else if (tracer.getActive() == null) {\n          \n          \n            \n                                    remove.invokeExact(TRACE_ID);\n          \n          \n            \n                                    remove.invokeExact(TRANSACTION_ID);\n          \n          \n            \n                                }", "bodyHTML": "<p dir=\"auto\">to remove the <code>error.id</code> after capturing the error</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"181\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (tracer<span class=\"pl-k\">.</span>getActive() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"182\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">TRACE_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"183\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">TRANSACTION_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"184\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">ERROR_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"185\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"181\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (context <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorCapture</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"182\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">ERROR_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"183\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (tracer<span class=\"pl-k\">.</span>getActive() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"184\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">TRACE_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"185\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        remove<span class=\"pl-k\">.</span>invokeExact(<span class=\"pl-c1\">TRANSACTION_ID</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"186\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-11T12:27:54Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/main/java/co/elastic/apm/agent/mdc/MdcActivationListener.java", "diffHunk": "@@ -173,6 +177,7 @@ public void afterDeactivate(TraceContextHolder<?> deactivatedContext) throws Thr\n                     if (tracer.getActive() == null) {\n                         remove.invokeExact(TRACE_ID);\n                         remove.invokeExact(TRANSACTION_ID);\n+                        remove.invokeExact(ERROR_ID);\n                     }", "originalCommit": "2ebcdcbe0905335592e3af7907b4908e2f00848f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDU4Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391410583", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-03-12T05:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNjMwMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r390936301", "body": "to support errors that don't happen within a transaction:\r\n```java\r\n                    if (context instanceof ErrorCapture) {\r\n                        put.invoke(ERROR_ID, traceContext.getId().toString());\r\n                    } else if (tracer.getActive() == null) {\r\n                        TraceContext traceContext = context.getTraceContext();\r\n                        put.invoke(TRACE_ID, traceContext.getTraceId().toString());\r\n                        put.invoke(TRANSACTION_ID, traceContext.getTransactionId().toString());\r\n                    }\r\n```", "bodyText": "to support errors that don't happen within a transaction:\n                    if (context instanceof ErrorCapture) {\n                        put.invoke(ERROR_ID, traceContext.getId().toString());\n                    } else if (tracer.getActive() == null) {\n                        TraceContext traceContext = context.getTraceContext();\n                        put.invoke(TRACE_ID, traceContext.getTraceId().toString());\n                        put.invoke(TRANSACTION_ID, traceContext.getTransactionId().toString());\n                    }", "bodyHTML": "<p dir=\"auto\">to support errors that don't happen within a transaction:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"                    if (context instanceof ErrorCapture) {\n                        put.invoke(ERROR_ID, traceContext.getId().toString());\n                    } else if (tracer.getActive() == null) {\n                        TraceContext traceContext = context.getTraceContext();\n                        put.invoke(TRACE_ID, traceContext.getTraceId().toString());\n                        put.invoke(TRANSACTION_ID, traceContext.getTransactionId().toString());\n                    }\"><pre>                    <span class=\"pl-k\">if</span> (context <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorCapture</span>) {\n                        put<span class=\"pl-k\">.</span>invoke(<span class=\"pl-c1\">ERROR_ID</span>, traceContext<span class=\"pl-k\">.</span>getId()<span class=\"pl-k\">.</span>toString());\n                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (tracer<span class=\"pl-k\">.</span>getActive() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {\n                        <span class=\"pl-smi\">TraceContext</span> traceContext <span class=\"pl-k\">=</span> context<span class=\"pl-k\">.</span>getTraceContext();\n                        put<span class=\"pl-k\">.</span>invoke(<span class=\"pl-c1\">TRACE_ID</span>, traceContext<span class=\"pl-k\">.</span>getTraceId()<span class=\"pl-k\">.</span>toString());\n                        put<span class=\"pl-k\">.</span>invoke(<span class=\"pl-c1\">TRANSACTION_ID</span>, traceContext<span class=\"pl-k\">.</span>getTransactionId()<span class=\"pl-k\">.</span>toString());\n                    }</pre></div>", "author": "felixbarny", "createdAt": "2020-03-11T12:29:52Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/main/java/co/elastic/apm/agent/mdc/MdcActivationListener.java", "diffHunk": "@@ -158,6 +159,9 @@ public void beforeActivate(TraceContextHolder<?> context) throws Throwable {\n                         put.invoke(TRACE_ID, traceContext.getTraceId().toString());\n                         put.invoke(TRANSACTION_ID, traceContext.getTransactionId().toString());\n                     }\n+                    if (context instanceof ErrorCapture) {", "originalCommit": "2ebcdcbe0905335592e3af7907b4908e2f00848f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDcxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391410714", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-03-12T05:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNjMwMQ=="}], "type": "inlineReview"}, {"oid": "328277ff8209c9f47f0f826a6504c3081c6d662f", "url": "https://github.com/elastic/apm-agent-java/commit/328277ff8209c9f47f0f826a6504c3081c6d662f", "message": "fixed according to comments", "committedDate": "2020-03-12T05:37:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzOTY0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391439642", "body": "```suggestion\r\n    public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, TraceContextHolder<?> parent) {\n          \n          \n            \n                public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ErrorCapture</span> captureAndReportException(<span class=\"pl-k\">long</span> epochMicros, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Throwable</span> e, <span class=\"pl-k\">TraceContextHolder&lt;?&gt;</span> parent) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ErrorCapture</span> captureAndReportException(<span class=\"pl-k\">long</span> epochMicros, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Throwable</span> e, <span class=\"pl-k x x-first\">@Nullable</span><span class=\"x x-last\"> </span><span class=\"pl-k\">TraceContextHolder&lt;?&gt;</span> parent) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-12T07:26:09Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -419,13 +419,25 @@ private boolean isTransactionSpanLimitReached(Transaction transaction) {\n      * @param e                     the exception to capture\n      * @param initiatingClassLoader the class\n      */\n-    public void captureException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n-        captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+    public void captureAndReportException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n+        ErrorCapture errorCapture = captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);\n+        }\n     }\n \n     @Nullable\n-    public ErrorCapture captureException(long epochMicros, @Nullable Throwable e, TraceContextHolder<?> parent) {\n-        return captureException(epochMicros, e, parent, null);\n+    public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, TraceContextHolder<?> parent) {", "originalCommit": "328277ff8209c9f47f0f826a6504c3081c6d662f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NjkyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391466926", "bodyText": "added", "author": "kananindzya", "createdAt": "2020-03-12T08:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzOTY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MDY3MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391440671", "body": "```suggestion\r\n        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doAnswer(invocation -> assertMdcErrorIdIsEmpty()).when(logger).error(anyString(), any(Exception.class));\n          \n          \n            \n                    doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        doAnswer(invocation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">assertMdcErrorIdIsEmpty</span>())<span class=\"pl-k\">.</span>when(logger)<span class=\"pl-k\">.</span>error(anyString(), any(<span class=\"pl-smi\">Exception</span><span class=\"pl-k\">.</span>class));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        doAnswer(invocation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">assertMdcErrorIdIsNotEmpty</span>())<span class=\"pl-k\">.</span>when(logger)<span class=\"pl-k\">.</span>error(anyString(), any(<span class=\"pl-smi\">Exception</span><span class=\"pl-k\">.</span>class));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-12T07:29:10Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4jNotInTransaction() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some apache logger exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsEmpty();\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4jNotInTransaction() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsEmpty()).when(logger).error(anyString(), any(Exception.class));", "originalCommit": "328277ff8209c9f47f0f826a6504c3081c6d662f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NjYyOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391466629", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-03-12T08:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MDY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODczNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391468735", "bodyText": "removed condition", "author": "kananindzya", "createdAt": "2020-03-12T08:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MDY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MTExNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391441114", "body": "```suggestion\r\n        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doAnswer(invocation -> assertMdcErrorIdIsEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n          \n          \n            \n                    doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        doAnswer(invocation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">assertMdcErrorIdIsEmpty</span>())<span class=\"pl-k\">.</span>when(mockedLogger)<span class=\"pl-k\">.</span>error(anyString(), any(<span class=\"pl-smi\">Exception</span><span class=\"pl-k\">.</span>class));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        doAnswer(invocation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">assertMdcErrorIdIsNotEmpty</span>())<span class=\"pl-k\">.</span>when(mockedLogger)<span class=\"pl-k\">.</span>error(anyString(), any(<span class=\"pl-smi\">Exception</span><span class=\"pl-k\">.</span>class));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-12T07:30:32Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4jNotInTransaction() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));", "originalCommit": "328277ff8209c9f47f0f826a6504c3081c6d662f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODQ4MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391468480", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-03-12T08:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0MTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1OTQxNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391459414", "body": "```suggestion\r\n                                    @Advice.Origin Class<?> clazz,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                @Advice.This Object thiz,\n          \n          \n            \n                                                @Advice.Origin Class<?> clazz,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-k\">@Advice</span><span class=\"pl-k\">.</span><span class=\"pl-smi x x-first\">This</span><span class=\"x\"> </span><span class=\"pl-smi x\">Object</span><span class=\"x x-last\"> thiz</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    <span class=\"pl-k\">@Advice</span><span class=\"pl-k\">.</span><span class=\"pl-smi x x-first\">Origin</span><span class=\"x\"> </span><span class=\"pl-k x\">Class&lt;?&gt;</span><span class=\"x x-last\"> clazz</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-12T08:18:30Z", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/error/logging/AbstractLoggingInstrumentation.java", "diffHunk": "@@ -57,19 +59,26 @@ protected Boolean initialValue() {\n     public static class LoggingAdvice {\n \n         @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void logEnter(@Advice.Argument(1) Throwable exception, @Advice.Local(\"nested\") boolean nested) {\n+        public static void logEnter(@Advice.Argument(1) Throwable exception,\n+                                    @Advice.Local(\"nested\") boolean nested,\n+                                    @Advice.This Object thiz,", "originalCommit": "328277ff8209c9f47f0f826a6504c3081c6d662f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODMzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391468334", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-03-12T08:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1OTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1OTY0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391459642", "body": "```suggestion\r\n                error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader()).activate();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            error = tracer.captureException(exception, tracer.getActive(), thiz.getClass().getClassLoader()).activate();\n          \n          \n            \n                            error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader()).activate();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                error <span class=\"pl-k\">=</span> tracer<span class=\"pl-k\">.</span>captureException(exception, tracer<span class=\"pl-k\">.</span>getActive(), <span class=\"x x-first\">thiz</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getClass()</span><span class=\"pl-k\">.</span>getClassLoader())<span class=\"pl-k\">.</span>activate();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                error <span class=\"pl-k\">=</span> tracer<span class=\"pl-k\">.</span>captureException(exception, tracer<span class=\"pl-k\">.</span>getActive(), <span class=\"x x-first x-last\">clazz</span><span class=\"pl-k\">.</span>getClassLoader())<span class=\"pl-k\">.</span>activate();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "felixbarny", "createdAt": "2020-03-12T08:19:03Z", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/error/logging/AbstractLoggingInstrumentation.java", "diffHunk": "@@ -57,19 +59,26 @@ protected Boolean initialValue() {\n     public static class LoggingAdvice {\n \n         @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void logEnter(@Advice.Argument(1) Throwable exception, @Advice.Local(\"nested\") boolean nested) {\n+        public static void logEnter(@Advice.Argument(1) Throwable exception,\n+                                    @Advice.Local(\"nested\") boolean nested,\n+                                    @Advice.This Object thiz,\n+                                    @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n             if (tracer == null || tracer.getActive() == null) {\n                 return;\n             }\n             nested = nestedThreadLocal.get();\n             if (!nested) {\n-                tracer.getActive().captureException(exception);\n+                error = tracer.captureException(exception, tracer.getActive(), thiz.getClass().getClassLoader()).activate();", "originalCommit": "328277ff8209c9f47f0f826a6504c3081c6d662f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODI4NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391468285", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-03-12T08:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1OTY0Mg=="}], "type": "inlineReview"}, {"oid": "9b1ceff98d5664685baa12e2fa24d894ea4b5f25", "url": "https://github.com/elastic/apm-agent-java/commit/9b1ceff98d5664685baa12e2fa24d894ea4b5f25", "message": "fixed according to comments", "committedDate": "2020-03-12T08:34:15Z", "type": "commit"}, {"oid": "7f3271122e44a769e0100afed94776e0d1eb3cc6", "url": "https://github.com/elastic/apm-agent-java/commit/7f3271122e44a769e0100afed94776e0d1eb3cc6", "message": "fixed accordingto comments", "committedDate": "2020-03-12T08:37:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTAyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391541026", "body": "This if can be removed, as we're using assumptions in the test methods now. The way assumptions work is similar to assertions but instead of failing the test, they just skip the test.", "bodyText": "This if can be removed, as we're using assumptions in the test methods now. The way assumptions work is similar to assertions but instead of failing the test, they just skip the test.", "bodyHTML": "<p dir=\"auto\">This if can be removed, as we're using assumptions in the test methods now. The way assumptions work is similar to assertions but instead of failing the test, they just skip the test.</p>", "author": "felixbarny", "createdAt": "2020-03-12T10:53:41Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4jNotInTransaction() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some apache logger exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsEmpty();\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4jNotInTransaction() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        logger.error(\"Some apache logger exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    private void assertMdcErrorIdIsEmpty() {\n+        assertThat(MDC.get(\"error.id\")).isNull();\n+        if (org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE) {", "originalCommit": "7f3271122e44a769e0100afed94776e0d1eb3cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjA1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391552054", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-03-12T11:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTE1NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391541154", "body": "remove this, too", "bodyText": "remove this, too", "bodyHTML": "<p dir=\"auto\">remove this, too</p>", "author": "felixbarny", "createdAt": "2020-03-12T10:53:55Z", "path": "apm-agent-plugins/apm-log-correlation-plugin/src/test/java/co/elastic/apm/agent/mdc/MdcActivationListenerIT.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.mdc;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.error.logging.Log4jLoggingInstrumentation;\n+import co.elastic.apm.agent.error.logging.Slf4jLoggingInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class MdcActivationListenerIT {\n+\n+    protected static ElasticApmTracer tracer;\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    private LoggingConfiguration loggingConfiguration;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()\n+            .configurationRegistry(config)\n+            .reporter(reporter)\n+            .build();\n+        ElasticApmAgent.initInstrumentation(tracer, ByteBuddyAgent.install(), Arrays.asList(new Slf4jLoggingInstrumentation(), new Log4jLoggingInstrumentation()));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        ElasticApmAgent.reset();\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MDC.clear();\n+        org.apache.log4j.MDC.clear();\n+        ThreadContext.clearAll();\n+        loggingConfiguration = config.getConfig(LoggingConfiguration.class);\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4j() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithSlf4jNotInTransaction() {\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        Logger mockedLogger = mock(Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(mockedLogger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        mockedLogger.error(\"Some slf4j exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4j() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        Transaction transaction = tracer.startRootTransaction(getClass().getClassLoader()).withType(\"request\").withName(\"test\");\n+        transaction.activate();\n+        logger.error(\"Some apache logger exception\", new RuntimeException(\"Hello exception\"));\n+        assertMdcErrorIdIsEmpty();\n+        transaction.deactivate().end();\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    @Test\n+    void testVerifyThatWithEnabledCorrelationAndLoggedErrorMdcErrorIdIsNotBlankWithLog4jNotInTransaction() {\n+        Assumptions.assumeTrue(() -> {\n+            org.apache.log4j.MDC.put(\"test\", true);\n+            return org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE;\n+        }, \"Log4j MDC is not working, this happens with some versions of Java 10 where log4j thinks it's Java 1\");\n+        when(loggingConfiguration.isLogCorrelationEnabled()).thenReturn(true);\n+        org.apache.logging.log4j.Logger logger = mock(org.apache.logging.log4j.Logger.class);\n+        doAnswer(invocation -> assertMdcErrorIdIsNotEmpty()).when(logger).error(anyString(), any(Exception.class));\n+\n+        assertMdcErrorIdIsEmpty();\n+\n+        logger.error(\"Some apache logger exception\", new RuntimeException(\"Hello exception\"));\n+\n+        assertMdcErrorIdIsEmpty();\n+    }\n+\n+    private void assertMdcErrorIdIsEmpty() {\n+        assertThat(MDC.get(\"error.id\")).isNull();\n+        if (org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE) {\n+            assertThat(org.apache.log4j.MDC.get(\"error.id\")).isNull();\n+        }\n+    }\n+\n+    private Answer<Void> assertMdcErrorIdIsNotEmpty() {\n+        assertThat(MDC.get(\"error.id\")).isNotBlank();\n+        if (org.apache.log4j.MDC.get(\"test\") == Boolean.TRUE) {", "originalCommit": "7f3271122e44a769e0100afed94776e0d1eb3cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjA5MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391552091", "bodyText": "removed", "author": "kananindzya", "createdAt": "2020-03-12T11:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTc3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391541776", "body": "Do the ` || context instanceof ErrorCapture` check on `afterDeactivate` as well.", "bodyText": "Do the  || context instanceof ErrorCapture check on afterDeactivate as well.", "bodyHTML": "<p dir=\"auto\">Do the <code> || context instanceof ErrorCapture</code> check on <code>afterDeactivate</code> as well.</p>", "author": "felixbarny", "createdAt": "2020-03-12T10:55:06Z", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java", "diffHunk": "@@ -46,7 +47,7 @@ public ProfilingActivationListener(ElasticApmTracer tracer) {\n \n     @Override\n     public void beforeActivate(TraceContextHolder<?> context) throws Throwable {\n-        if (!context.isSampled()) {\n+        if (!context.isSampled() || context instanceof ErrorCapture) {", "originalCommit": "7f3271122e44a769e0100afed94776e0d1eb3cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjE0OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r391552149", "bodyText": "done", "author": "kananindzya", "createdAt": "2020-03-12T11:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0MTc3Ng=="}], "type": "inlineReview"}, {"oid": "a3a301a2c101ace712a6a04c87994940f0e72112", "url": "https://github.com/elastic/apm-agent-java/commit/a3a301a2c101ace712a6a04c87994940f0e72112", "message": "fixed according to comments", "committedDate": "2020-03-12T11:14:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MDI0NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r394390245", "body": "```suggestion\r\n            errorCapture.end();\r\n```\r\nLooks like complicating stuff, but there is a good reason for that: there is an implicit lifecycle effect here, where this object is going to be recycled when reported. It's easy to make lifecycle mistakes when it is managed implicitly, as indeed was the case here (see the comment below). \r\nIn general, calling `reporter.report(errorCapture)` should be done from a single location and this code should make it clear that we end the object.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        reporter.report(errorCapture);\n          \n          \n            \n                        errorCapture.end();\n          \n      \n    \n    \n  \n\nLooks like complicating stuff, but there is a good reason for that: there is an implicit lifecycle effect here, where this object is going to be recycled when reported. It's easy to make lifecycle mistakes when it is managed implicitly, as indeed was the case here (see the comment below).\nIn general, calling reporter.report(errorCapture) should be done from a single location and this code should make it clear that we end the object.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first\">reporter</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">report(errorCapture</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"x x-first\">errorCapture</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">end(</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Looks like complicating stuff, but there is a good reason for that: there is an implicit lifecycle effect here, where this object is going to be recycled when reported. It's easy to make lifecycle mistakes when it is managed implicitly, as indeed was the case here (see the comment below).<br>\nIn general, calling <code>reporter.report(errorCapture)</code> should be done from a single location and this code should make it clear that we end the object.</p>", "author": "eyalkoren", "createdAt": "2020-03-18T14:31:19Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -419,13 +419,25 @@ private boolean isTransactionSpanLimitReached(Transaction transaction) {\n      * @param e                     the exception to capture\n      * @param initiatingClassLoader the class\n      */\n-    public void captureException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n-        captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+    public void captureAndReportException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n+        ErrorCapture errorCapture = captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);", "originalCommit": "a3a301a2c101ace712a6a04c87994940f0e72112", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5ODE1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r394398152", "body": "This is a setup for race conditions- once you call `report` another thread may recycle the `ErrorCapture` object, so you return an object in an unknown state. There cannot be an API that reports an error AND returns it. You can do this instead:\r\n```\r\n    @Nullable\r\n    public String captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {\r\n        String id = null;\r\n        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\r\n        if (errorCapture != null) {\r\n            id = errorCapture.getTraceContext().getId().toString();\r\n            errorCapture.end();\r\n        }\r\n        return id;\r\n    }\r\n```\r\nI think that would do what you need from it.", "bodyText": "This is a setup for race conditions- once you call report another thread may recycle the ErrorCapture object, so you return an object in an unknown state. There cannot be an API that reports an error AND returns it. You can do this instead:\n    @Nullable\n    public String captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {\n        String id = null;\n        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\n        if (errorCapture != null) {\n            id = errorCapture.getTraceContext().getId().toString();\n            errorCapture.end();\n        }\n        return id;\n    }\n\nI think that would do what you need from it.", "bodyHTML": "<p dir=\"auto\">This is a setup for race conditions- once you call <code>report</code> another thread may recycle the <code>ErrorCapture</code> object, so you return an object in an unknown state. There cannot be an API that reports an error AND returns it. You can do this instead:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Nullable\n    public String captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder&lt;?&gt; parent) {\n        String id = null;\n        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\n        if (errorCapture != null) {\n            id = errorCapture.getTraceContext().getId().toString();\n            errorCapture.end();\n        }\n        return id;\n    }\"><pre><code>    @Nullable\n    public String captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder&lt;?&gt; parent) {\n        String id = null;\n        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\n        if (errorCapture != null) {\n            id = errorCapture.getTraceContext().getId().toString();\n            errorCapture.end();\n        }\n        return id;\n    }\n</code></pre></div>\n<p dir=\"auto\">I think that would do what you need from it.</p>", "author": "eyalkoren", "createdAt": "2020-03-18T14:41:34Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -419,13 +419,25 @@ private boolean isTransactionSpanLimitReached(Transaction transaction) {\n      * @param e                     the exception to capture\n      * @param initiatingClassLoader the class\n      */\n-    public void captureException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n-        captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+    public void captureAndReportException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n+        ErrorCapture errorCapture = captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);\n+        }\n     }\n \n     @Nullable\n-    public ErrorCapture captureException(long epochMicros, @Nullable Throwable e, TraceContextHolder<?> parent) {\n-        return captureException(epochMicros, e, parent, null);\n+    public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {\n+        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);\n+        }\n+        return errorCapture;", "originalCommit": "a3a301a2c101ace712a6a04c87994940f0e72112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyOTg0MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r400829840", "bodyText": "fixed", "author": "kananindzya", "createdAt": "2020-03-31T11:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5ODE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMDIyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r394400226", "body": "This one can be made `private`", "bodyText": "This one can be made private", "bodyHTML": "<p dir=\"auto\">This one can be made <code>private</code></p>", "author": "eyalkoren", "createdAt": "2020-03-18T14:44:14Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -419,13 +419,25 @@ private boolean isTransactionSpanLimitReached(Transaction transaction) {\n      * @param e                     the exception to capture\n      * @param initiatingClassLoader the class\n      */\n-    public void captureException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n-        captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+    public void captureAndReportException(@Nullable Throwable e, ClassLoader initiatingClassLoader) {\n+        ErrorCapture errorCapture = captureException(System.currentTimeMillis() * 1000, e, getActive(), initiatingClassLoader);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);\n+        }\n     }\n \n     @Nullable\n-    public ErrorCapture captureException(long epochMicros, @Nullable Throwable e, TraceContextHolder<?> parent) {\n-        return captureException(epochMicros, e, parent, null);\n+    public ErrorCapture captureAndReportException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent) {\n+        ErrorCapture errorCapture = captureException(epochMicros, e, parent, null);\n+        if (errorCapture != null) {\n+            reporter.report(errorCapture);\n+        }\n+        return errorCapture;\n+    }\n+\n+    @Nullable\n+    public ErrorCapture captureException(@Nullable Throwable e, @Nullable TraceContextHolder<?> parent, @Nullable ClassLoader initiatingClassLoader) {\n+        return captureException(System.currentTimeMillis() * 1000, e, parent, initiatingClassLoader);\n     }\n \n     @Nullable", "originalCommit": "a3a301a2c101ace712a6a04c87994940f0e72112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNzAwMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r400807003", "bodyText": "Method\n public ErrorCapture captureException(@Nullable Throwable e, @Nullable TraceContextHolder<?> parent, @Nullable ClassLoader initiatingClassLoader) {\n        return captureException(System.currentTimeMillis() * 1000, e, parent, initiatingClassLoader);\n    }\n\nused by AbstractLoggingInstrumentation$LoggingAdvice#logEnter .\nDou you mean made as private\nprivate ErrorCapture captureException(long epochMicros, @Nullable Throwable e, @Nullable TraceContextHolder<?> parent, @Nullable ClassLoader initiatingClassLoader)", "author": "kananindzya", "createdAt": "2020-03-31T10:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMDIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxODM4OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r400818389", "bodyText": "Yes.", "author": "eyalkoren", "createdAt": "2020-03-31T10:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMDIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMTA4Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r394401083", "body": "This is a race condition (see above). If you change the method as suggested, it would be safe.", "bodyText": "This is a race condition (see above). If you change the method as suggested, it would be safe.", "bodyHTML": "<p dir=\"auto\">This is a race condition (see above). If you change the method as suggested, it would be safe.</p>", "author": "eyalkoren", "createdAt": "2020-03-18T14:45:27Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -168,7 +168,7 @@ public T captureException(@Nullable Throwable t) {\n \n     @Nullable\n     public String captureExceptionAndGetErrorId(@Nullable Throwable t) {\n-        ErrorCapture errorCapture = tracer.captureException(getTraceContext().getClock().getEpochMicros(), t, this);\n+        ErrorCapture errorCapture = tracer.captureAndReportException(getTraceContext().getClock().getEpochMicros(), t, this);\n         return errorCapture != null ? errorCapture.getTraceContext().getId().toString() : null;", "originalCommit": "a3a301a2c101ace712a6a04c87994940f0e72112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMDM2Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1050#discussion_r400830363", "bodyText": "changed as suggested", "author": "kananindzya", "createdAt": "2020-03-31T11:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMTA4Mw=="}], "type": "inlineReview"}, {"oid": "a98cddfc3a5359ebcf5a85ca5b6d1d8f2ae08f8b", "url": "https://github.com/elastic/apm-agent-java/commit/a98cddfc3a5359ebcf5a85ca5b6d1d8f2ae08f8b", "message": "Update apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java\n\nCo-Authored-By: eyalkoren <41850454+eyalkoren@users.noreply.github.com>", "committedDate": "2020-03-31T10:25:51Z", "type": "commit"}, {"oid": "7e281a024ca8befa6c84281ce263c106fe1512b1", "url": "https://github.com/elastic/apm-agent-java/commit/7e281a024ca8befa6c84281ce263c106fe1512b1", "message": "fixed according to comments", "committedDate": "2020-03-31T11:13:07Z", "type": "commit"}, {"oid": "130a95896f4eac13b9980a2d06b01943cfcda217", "url": "https://github.com/elastic/apm-agent-java/commit/130a95896f4eac13b9980a2d06b01943cfcda217", "message": "Merge remote-tracking branch 'upstream/master' into issue-846-add-errorid-to-mdc", "committedDate": "2020-03-31T11:14:40Z", "type": "commit"}, {"oid": "5afcaad3bc2db7261d380ddd3c67f4d5d91f5476", "url": "https://github.com/elastic/apm-agent-java/commit/5afcaad3bc2db7261d380ddd3c67f4d5d91f5476", "message": "added info for asciidoc", "committedDate": "2020-03-31T11:45:15Z", "type": "commit"}, {"oid": "936ed1a7d4417513c8d0aa780c0504414c266067", "url": "https://github.com/elastic/apm-agent-java/commit/936ed1a7d4417513c8d0aa780c0504414c266067", "message": "Merge remote-tracking branch 'upstream/master' into issue-846-add-errorid-to-mdc", "committedDate": "2020-03-31T14:16:34Z", "type": "commit"}, {"oid": "9a599a45fe3ce1fe5ad3bfa2a6bc51c4d5c64cba", "url": "https://github.com/elastic/apm-agent-java/commit/9a599a45fe3ce1fe5ad3bfa2a6bc51c4d5c64cba", "message": "generated configration.asciidoc", "committedDate": "2020-03-31T16:16:30Z", "type": "commit"}, {"oid": "15d75c9383d7bc85247be38dd10f553518c37d0f", "url": "https://github.com/elastic/apm-agent-java/commit/15d75c9383d7bc85247be38dd10f553518c37d0f", "message": "Fixing docs", "committedDate": "2020-04-01T09:34:30Z", "type": "commit"}, {"oid": "fc70b91f589a1d6425a24745cf568b5bc56e86d5", "url": "https://github.com/elastic/apm-agent-java/commit/fc70b91f589a1d6425a24745cf568b5bc56e86d5", "message": "Merge pull request #4 from eyalkoren/docs-fixes\n\nFixing docs", "committedDate": "2020-04-01T10:00:30Z", "type": "commit"}]}