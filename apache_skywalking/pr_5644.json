{"pr_number": 5644, "pr_title": "Provide Thrift Plugin", "pr_author": "dmsolr", "pr_createdAt": "2020-10-10T10:58:36Z", "pr_url": "https://github.com/apache/skywalking/pull/5644", "timeline": [{"oid": "6476d5b9701a093871e16c0ec8869d8038150735", "url": "https://github.com/apache/skywalking/commit/6476d5b9701a093871e16c0ec8869d8038150735", "message": "Provide Thrift Plugin", "committedDate": "2020-10-10T06:13:08Z", "type": "commit"}, {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "url": "https://github.com/apache/skywalking/commit/ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "message": "Complete & Enable Plugin Test", "committedDate": "2020-10-10T08:54:42Z", "type": "commit"}, {"oid": "d191993be310274be4be49ddb004a23ba126a6a3", "url": "https://github.com/apache/skywalking/commit/d191993be310274be4be49ddb004a23ba126a6a3", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-10T10:59:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAyNA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782024", "body": "*Finally:*  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "bodyText": "Finally:  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "bodyHTML": "<p dir=\"auto\"><em>Finally:</em>  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.</p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:20Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to create EntrySpan.\", throwable);\n+            } finally {\n+                context = null;\n+                return readFieldBegin();", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAzMA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782030", "body": "*Finally:*  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "bodyText": "Finally:  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "bodyHTML": "<p dir=\"auto\"><em>Finally:</em>  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.</p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:21Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to create EntrySpan.\", throwable);\n+            } finally {\n+                context = null;\n+                return readFieldBegin();\n+            }\n+        }\n+        return field;\n+    }\n+\n+    private ContextCarrier createContextCarrier(Map<String, String> header) {\n+        ContextCarrier carrier = new ContextCarrier();\n+        if (Objects.nonNull(header)) {\n+            CarrierItem items = carrier.items();\n+            while (items.hasNext()) {\n+                items = items.next();\n+                items.setHeadValue(header.get(items.getHeadKey()));\n+            }\n+        }\n+        return carrier;\n+    }\n+\n+    @Override\n+    public TMessage readMessageBegin() throws TException {\n+        final TMessage message = super.readMessageBegin();\n+        try {\n+            context.setup(message.name);\n+        } finally {\n+            return message;", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAzOA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782038", "body": "*JdkObsolete:*  StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.", "bodyText": "JdkObsolete:  StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.", "bodyHTML": "<p dir=\"auto\"><em>JdkObsolete:</em>  StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.</p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:23Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientInterceptor.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ClientOutProtocolWrapper;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.TServiceClient;\n+import org.apache.thrift.protocol.TProtocol;\n+\n+/**\n+ * @see TServiceClient is synchronized client.\n+ */\n+public class TServiceClientInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        if (!(allArguments[1] instanceof ClientOutProtocolWrapper)) {\n+            TProtocol protocol = (TProtocol) allArguments[1];\n+            ReflectionUtils.setValue(\n+                TServiceClient.class,\n+                objInst,\n+                \"oprot_\",\n+                new ClientOutProtocolWrapper(protocol)\n+            );\n+            Object dynamicField = ((EnhancedInstance) protocol.getTransport()).getSkyWalkingDynamicField();\n+            objInst.setSkyWalkingDynamicField(Objects.isNull(dynamicField) ? \"UNKNOWN\" : dynamicField);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            objInst.getClass().getName() + \".\" + allArguments[0],\n+            (String) objInst.getSkyWalkingDynamicField()\n+        );\n+        SpanLayer.asRPCFramework(span);\n+        span.setComponent(ComponentsDefine.THRIFT_CLIENT);\n+        span.tag(TAG_ARGS, getArguments((String) allArguments[0], (TBase) allArguments[1]));\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst,\n+                              Method method,\n+                              Object[] allArguments,\n+                              Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst,\n+                                      Method method,\n+                                      Object[] allArguments,\n+                                      Class<?>[] argumentsTypes,\n+                                      Throwable t) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(t);\n+        }\n+    }\n+\n+    private String getArguments(String method, TBase base) {\n+        int idx = 0;\n+        StringBuffer buffer = new StringBuffer(method).append(\"(\");", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA0Nw==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782047", "body": "*MissingOverride:*  getArguments implements method in AbstractContext; expected @Override", "bodyText": "MissingOverride:  getArguments implements method in AbstractContext; expected @OverRide", "bodyHTML": "<p dir=\"auto\"><em>MissingOverride:</em>  getArguments implements method in AbstractContext; expected <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a></p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:37Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.AsyncProcessFunction;\n+\n+public class AsyncContext extends AbstractContext {\n+    private final Map<String, AsyncProcessFunction> processMapView;\n+\n+    public AsyncContext(Map<String, AsyncProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA0OA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782048", "body": "*MissingOverride:*  getOperatorName implements method in AbstractContext; expected @Override", "bodyText": "MissingOverride:  getOperatorName implements method in AbstractContext; expected @OverRide", "bodyHTML": "<p dir=\"auto\"><em>MissingOverride:</em>  getOperatorName implements method in AbstractContext; expected <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a></p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:39Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.AsyncProcessFunction;\n+\n+public class AsyncContext extends AbstractContext {\n+    private final Map<String, AsyncProcessFunction> processMapView;\n+\n+    public AsyncContext(Map<String, AsyncProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {\n+        return processMapView.get(methodName).getEmptyArgsInstance().toString();\n+    }\n+\n+    public String getOperatorName() {", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA1Mw==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782053", "body": "*MissingOverride:*  getArguments implements method in AbstractContext; expected @Override", "bodyText": "MissingOverride:  getArguments implements method in AbstractContext; expected @OverRide", "bodyHTML": "<p dir=\"auto\"><em>MissingOverride:</em>  getArguments implements method in AbstractContext; expected <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a></p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:40Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.ProcessFunction;\n+\n+public class Context extends AbstractContext {\n+    private final Map<String, ProcessFunction> processMapView;\n+\n+    public Context(Map<String, ProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA1Ng==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782056", "body": "*MissingOverride:*  getOperatorName implements method in AbstractContext; expected @Override", "bodyText": "MissingOverride:  getOperatorName implements method in AbstractContext; expected @OverRide", "bodyHTML": "<p dir=\"auto\"><em>MissingOverride:</em>  getOperatorName implements method in AbstractContext; expected <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a></p>", "author": "sonatype-lift", "createdAt": "2020-10-10T11:47:41Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.ProcessFunction;\n+\n+public class Context extends AbstractContext {\n+    private final Map<String, ProcessFunction> processMapView;\n+\n+    public Context(Map<String, ProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {\n+        return processMapView.get(methodName).getEmptyArgsInstance().toString();\n+    }\n+\n+    public String getOperatorName() {", "originalCommit": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzE0Mg==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783142", "body": "Should provide the full class name here. Also, I don't think only a `@see` is a reasonable comment.", "bodyText": "Should provide the full class name here. Also, I don't think only a @see is a reasonable comment.", "bodyHTML": "<p dir=\"auto\">Should provide the full class name here. Also, I don't think only a <code>@see</code> is a reasonable comment.</p>", "author": "wu-sheng", "createdAt": "2020-10-10T12:00:41Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseProcessorInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.Context;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ServerInProtocolWrapper;\n+import org.apache.thrift.ProcessFunction;\n+import org.apache.thrift.TBaseProcessor;\n+\n+/**\n+ * @see TBaseProcessor", "originalCommit": "d191993be310274be4be49ddb004a23ba126a6a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzIxMQ==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783211", "body": "See should be after the real comments, not before.", "bodyText": "See should be after the real comments, not before.", "bodyHTML": "<p dir=\"auto\">See should be after the real comments, not before.</p>", "author": "wu-sheng", "createdAt": "2020-10-10T12:01:19Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncClientInterceptor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ClientOutProtocolWrapper;\n+import org.apache.thrift.async.TAsyncClient;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+/**\n+ * @see TAsyncClient", "originalCommit": "d191993be310274be4be49ddb004a23ba126a6a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzIyOA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783228", "body": "What do you mean TODO?", "bodyText": "What do you mean TODO?", "bodyHTML": "<p dir=\"auto\">What do you mean TODO?</p>", "author": "wu-sheng", "createdAt": "2020-10-10T12:01:38Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * @see TAsyncMethodCall is asynchronized client.\n+ * @see TServiceClientInterceptor to know synchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);\n+                } finally {\n+                    callback.onError(exception);\n+                }\n+            }\n+        });\n+        if (allArguments[2] instanceof EnhancedInstance) {\n+            remotePeer = (String) ((EnhancedInstance) allArguments[2]).getSkyWalkingDynamicField();\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        // TODO: It is hard to get arguments of method. So, currently, we don't do that. If you have a good idea, please fix it.", "originalCommit": "d191993be310274be4be49ddb004a23ba126a6a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c542833f39944e935fac8a272fcb2287502363af", "url": "https://github.com/apache/skywalking/commit/c542833f39944e935fac8a272fcb2287502363af", "message": "fix thrift generated source directory", "committedDate": "2020-10-10T12:40:58Z", "type": "commit"}, {"oid": "f591157507c921cb676a1e3dc08365d1c73f5223", "url": "https://github.com/apache/skywalking/commit/f591157507c921cb676a1e3dc08365d1c73f5223", "message": "Merge branch 'plugin/thrift-1' of https://github.com/dmsolr/skywalking into plugin/thrift-1", "committedDate": "2020-10-10T12:41:54Z", "type": "commit"}, {"oid": "14b6688c0fae06135e706f5431512759a20306ea", "url": "https://github.com/apache/skywalking/commit/14b6688c0fae06135e706f5431512759a20306ea", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-11T08:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTIyMw==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502931223", "body": "This is not the only constructor signature of the two classes in line 39/40.\r\n\r\nFor example, `private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) {`, please recheck", "bodyText": "This is not the only constructor signature of the two classes in line 39/40.\nFor example, private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) {, please recheck", "bodyHTML": "<p dir=\"auto\">This is not the only constructor signature of the two classes in line 39/40.</p>\n<p dir=\"auto\">For example, <code>private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) {</code>, please recheck</p>", "author": "kezhenxu94", "createdAt": "2020-10-11T15:37:10Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/define/transport/TSocketInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.define.transport;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch;\n+\n+/**\n+ * @see org.apache.thrift.transport.TSocket\n+ * @see org.apache.thrift.transport.TNonblockingSocket\n+ */\n+public class TSocketInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return MultiClassNameMatch.byMultiClassMatch(\n+            \"org.apache.thrift.transport.TSocket\",\n+            \"org.apache.thrift.transport.TNonblockingSocket\"\n+        );\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return ElementMatchers.takesArguments(String.class, int.class, int.class);", "originalCommit": "14b6688c0fae06135e706f5431512759a20306ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5ODE3MQ==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503398171", "bodyText": "As far as I know, NonblockingSocket(SocketChannel socketChannel) works for TServer.", "author": "dmsolr", "createdAt": "2020-10-12T16:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjQyMA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502932420", "body": "```suggestion\r\n                Map<String, String> header = new HashMap<>(tMap.size);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map<String, String> header = new HashMap(tMap.size);\n          \n          \n            \n                            Map<String, String> header = new HashMap<>(tMap.size);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span> header <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>(tMap<span class=\"pl-k\">.</span>size);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span> header <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap<span class=\"x x-first x-last\">&lt;&gt;</span></span>(tMap<span class=\"pl-k\">.</span>size);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kezhenxu94", "createdAt": "2020-10-11T15:47:39Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);", "originalCommit": "14b6688c0fae06135e706f5431512759a20306ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMzc5NQ==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502933795", "body": "Should be `super.readMapEnd();`?", "bodyText": "Should be super.readMapEnd();?", "bodyHTML": "<p dir=\"auto\">Should be <code>super.readMapEnd();</code>?</p>", "author": "kezhenxu94", "createdAt": "2020-10-11T15:59:13Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();", "originalCommit": "14b6688c0fae06135e706f5431512759a20306ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNDA3Ng==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502934076", "body": "I think this should be in the `finally` block, otherwise, if it throws exception, there may be an infinite recursive call of `readFieldBegin`.", "bodyText": "I think this should be in the finally block, otherwise, if it throws exception, there may be an infinite recursive call of readFieldBegin.", "bodyHTML": "<p dir=\"auto\">I think this should be in the <code>finally</code> block, otherwise, if it throws exception, there may be an infinite recursive call of <code>readFieldBegin</code>.</p>", "author": "kezhenxu94", "createdAt": "2020-10-11T16:01:37Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();", "originalCommit": "14b6688c0fae06135e706f5431512759a20306ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTYzMA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502935630", "body": "`initialed` -> `initialized`", "bodyText": "initialed -> initialized", "bodyHTML": "<p dir=\"auto\"><code>initialed</code> -&gt; <code>initialized</code></p>", "author": "kezhenxu94", "createdAt": "2020-10-11T16:15:05Z", "path": "test/plugin/scenarios/thrift-scenario/thrift-client/src/main/java/org/apache/skywalking/apm/testcase/thrift/client/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.thrift.client.controller;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.AsyncClient;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.IClient;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.SyncClient;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.transport.TTransportException;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+    private IClient async;\n+    private IClient sync;\n+\n+    private IClient hasync;\n+\n+    private final AtomicInteger status = new AtomicInteger(0);\n+    private final CountDownLatch initialed = new CountDownLatch(1);", "originalCommit": "14b6688c0fae06135e706f5431512759a20306ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1edc7edf570dc2fe6e4eae6f8b0873eec225af45", "url": "https://github.com/apache/skywalking/commit/1edc7edf570dc2fe6e4eae6f8b0873eec225af45", "message": "following reviews", "committedDate": "2020-10-12T10:51:14Z", "type": "commit"}, {"oid": "59026d9998446b2e07779854612fe44066eefb6e", "url": "https://github.com/apache/skywalking/commit/59026d9998446b2e07779854612fe44066eefb6e", "message": "Merge branch 'plugin/thrift-1' of https://github.com/dmsolr/skywalking into plugin/thrift-1", "committedDate": "2020-10-12T10:52:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODY0Nw==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503278647", "body": "`log#throwable` has included `errorOccurred` already", "bodyText": "log#throwable has included errorOccurred already", "bodyHTML": "<p dir=\"auto\"><code>log#throwable</code> has included <code>errorOccurred</code> already</p>", "author": "wu-sheng", "createdAt": "2020-10-12T12:59:05Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * Here is asynchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback<Object> callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);", "originalCommit": "59026d9998446b2e07779854612fe44066eefb6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTQ3Mg==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279472", "body": "This check is unusual, could you explain why?", "bodyText": "This check is unusual, could you explain why?", "bodyHTML": "<p dir=\"auto\">This check is unusual, could you explain why?</p>", "author": "wu-sheng", "createdAt": "2020-10-12T13:00:27Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * Here is asynchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback<Object> callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);\n+                } finally {\n+                    callback.onError(exception);\n+                }\n+            }\n+        });\n+        if (allArguments[2] instanceof EnhancedInstance) {\n+            remotePeer = (String) ((EnhancedInstance) allArguments[2]).getSkyWalkingDynamicField();\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createExitSpan(objInst.getClass().getName(), remotePeer);\n+        span.setComponent(ComponentsDefine.THRIFT_CLIENT);\n+        SpanLayer.asRPCFramework(span);\n+\n+        AbstractSpan async = span.prepareForAsync();\n+        objInst.setSkyWalkingDynamicField(async);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst,\n+                              Method method,\n+                              Object[] allArguments,\n+                              Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {", "originalCommit": "59026d9998446b2e07779854612fe44066eefb6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTYzMw==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279633", "bodyText": "Same question for all ContextManager.isActive() check.", "author": "wu-sheng", "createdAt": "2020-10-12T13:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkzNg==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279936", "body": "```suggestion\r\n            ContextManager.activeSpan().log(throwable);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ContextManager.activeSpan().errorOccurred().log(throwable);\n          \n          \n            \n                        ContextManager.activeSpan().log(throwable);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">ContextManager</span><span class=\"pl-k\">.</span>activeSpan()<span class=\"pl-k\">.</span><span class=\"x x-first\">errorOccurred()</span><span class=\"pl-k x x-last\">.</span>log(throwable);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">ContextManager</span><span class=\"pl-k\">.</span>activeSpan()<span class=\"pl-k\">.</span>log(throwable);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wu-sheng", "createdAt": "2020-10-12T13:01:09Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.\n+ */\n+public class TServiceClientReceiveInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] objects,\n+                             final Class<?>[] classes,\n+                             final MethodInterceptResult ret) throws Throwable {\n+    }\n+\n+    @Override\n+    public Object afterMethod(final EnhancedInstance objInst,\n+                              final Method method,\n+                              final Object[] objects,\n+                              final Class<?>[] classes,\n+                              final Object ret) throws Throwable {\n+        if (ContextManager.isActive() && Objects.nonNull(objInst.getSkyWalkingDynamicField())) {\n+            ContextManager.stopSpan();\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(final EnhancedInstance enhancedInstance,\n+                                      final Method method,\n+                                      final Object[] objects,\n+                                      final Class<?>[] classes,\n+                                      final Throwable throwable) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(throwable);", "originalCommit": "59026d9998446b2e07779854612fe44066eefb6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MDk3OQ==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503280979", "body": "All catches are not necessary in the interceptor scope, as the core has try/catch-log already.", "bodyText": "All catches are not necessary in the interceptor scope, as the core has try/catch-log already.", "bodyHTML": "<p dir=\"auto\">All catches are not necessary in the interceptor scope, as the core has try/catch-log already.</p>", "author": "wu-sheng", "createdAt": "2020-10-12T13:02:56Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap<>(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to resolve header or create EntrySpan.\", throwable);", "originalCommit": "59026d9998446b2e07779854612fe44066eefb6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5NjQ3OQ==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503396479", "bodyText": "These wrapping objects are executed outside of interceptor.", "author": "dmsolr", "createdAt": "2020-10-12T16:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MDk3OQ=="}], "type": "inlineReview"}, {"oid": "43f9bafc9a3a8de8d04ec2f97fdc0d583cbce5b6", "url": "https://github.com/apache/skywalking/commit/43f9bafc9a3a8de8d04ec2f97fdc0d583cbce5b6", "message": "following reviews", "committedDate": "2020-10-12T16:17:40Z", "type": "commit"}, {"oid": "cd5274e59164705edbadcc76ca00da383cfb0954", "url": "https://github.com/apache/skywalking/commit/cd5274e59164705edbadcc76ca00da383cfb0954", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-13T00:20:59Z", "type": "commit"}, {"oid": "c1db6f4270ff3893476ede723ee60a9d721fe364", "url": "https://github.com/apache/skywalking/commit/c1db6f4270ff3893476ede723ee60a9d721fe364", "message": "fix thrift generated source directory", "committedDate": "2020-10-13T02:10:32Z", "type": "commit"}, {"oid": "0b384af0c31aa0848af684134bd3d98face57e50", "url": "https://github.com/apache/skywalking/commit/0b384af0c31aa0848af684134bd3d98face57e50", "message": "test", "committedDate": "2020-10-13T11:51:05Z", "type": "commit"}, {"oid": "25a8041d2c449a7fe8bcee6a068d642b34983b8f", "url": "https://github.com/apache/skywalking/commit/25a8041d2c449a7fe8bcee6a068d642b34983b8f", "message": "fix code style", "committedDate": "2020-10-13T12:02:17Z", "type": "commit"}, {"oid": "bd884fe012859b92bf332935c19cc30f465c7b3e", "url": "https://github.com/apache/skywalking/commit/bd884fe012859b92bf332935c19cc30f465c7b3e", "message": "fix", "committedDate": "2020-10-13T19:12:32Z", "type": "commit"}, {"oid": "429d4c146420e8b934d9032c733c8aeb2e86d73c", "url": "https://github.com/apache/skywalking/commit/429d4c146420e8b934d9032c733c8aeb2e86d73c", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-14T01:17:35Z", "type": "commit"}, {"oid": "cfd67e7535906312af522bc16fde83897f69b737", "url": "https://github.com/apache/skywalking/commit/cfd67e7535906312af522bc16fde83897f69b737", "message": "test", "committedDate": "2020-10-14T02:39:42Z", "type": "commit"}, {"oid": "a1c5c2434d4154ca7724ed1078ccc096a5db2bd4", "url": "https://github.com/apache/skywalking/commit/a1c5c2434d4154ca7724ed1078ccc096a5db2bd4", "message": "remove testcase version 0.9.x", "committedDate": "2020-10-14T03:10:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MzczMA==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r504373730", "body": "Same question, why need this?", "bodyText": "Same question, why need this?", "bodyHTML": "<p dir=\"auto\">Same question, why need this?</p>", "author": "wu-sheng", "createdAt": "2020-10-14T03:09:27Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.\n+ */\n+public class TServiceClientReceiveInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] objects,\n+                             final Class<?>[] classes,\n+                             final MethodInterceptResult ret) throws Throwable {\n+    }\n+\n+    @Override\n+    public Object afterMethod(final EnhancedInstance objInst,\n+                              final Method method,\n+                              final Object[] objects,\n+                              final Class<?>[] classes,\n+                              final Object ret) throws Throwable {\n+        if (ContextManager.isActive() && Objects.nonNull(objInst.getSkyWalkingDynamicField())) {", "originalCommit": "cfd67e7535906312af522bc16fde83897f69b737", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDI3Mg==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r504374272", "body": "```suggestion\r\n * TAsyncClient creates a TServiceClient for receiving the response. So splitting this method,\r\n * TAsyncClient#receiveBase(...), into here for more efficiency.\r\n```\r\n\r\nI am not sure what `So splitting this method, TAsyncClient#receiveBase(...), into here for more efficiency.` this sentence means.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n          \n          \n            \n             * TAsyncClient#receiveBase(...), into here for more efficiency.\n          \n          \n            \n             * TAsyncClient creates a TServiceClient for receiving the response. So splitting this method,\n          \n          \n            \n             * TAsyncClient#receiveBase(...), into here for more efficiency.\n          \n      \n    \n    \n  \n\nI am not sure what So splitting this method, TAsyncClient#receiveBase(...), into here for more efficiency. this sentence means.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"30\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">TAsyncClient</span> <span class=\"x x-first x-last\">will create </span>a <span class=\"pl-smi\">TServiceClient</span> <span class=\"pl-k\">for</span> receiving the response. <span class=\"pl-smi\">So</span> splitting<span class=\"x x-first x-last\"> the</span> <span class=\"pl-c1\">this</span> method,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">TAsyncClient</span>#receiveBase(<span class=\"pl-c1\">...</span>), into here <span class=\"pl-k\">for</span> more efficiency.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"30\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">TAsyncClient</span> <span class=\"x x-first x-last\">creates </span>a <span class=\"pl-smi\">TServiceClient</span> <span class=\"pl-k\">for</span> receiving the response. <span class=\"pl-smi\">So</span> splitting <span class=\"pl-c1\">this</span> method,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">TAsyncClient</span>#receiveBase(<span class=\"pl-c1\">...</span>), into here <span class=\"pl-k\">for</span> more efficiency.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">I am not sure what <code>So splitting this method, TAsyncClient#receiveBase(...), into here for more efficiency.</code> this sentence means.</p>", "author": "wu-sheng", "createdAt": "2020-10-14T03:11:29Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.", "originalCommit": "cfd67e7535906312af522bc16fde83897f69b737", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "821676602dc40fc21c62537d483db41e5c72ba04", "url": "https://github.com/apache/skywalking/commit/821676602dc40fc21c62537d483db41e5c72ba04", "message": "Update apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-10-14T04:03:13Z", "type": "commit"}, {"oid": "44732791d5a44afc067b9293806ad5c0990d5687", "url": "https://github.com/apache/skywalking/commit/44732791d5a44afc067b9293806ad5c0990d5687", "message": "comment", "committedDate": "2020-10-14T08:45:10Z", "type": "commit"}, {"oid": "1b7a99eb8a45750adffe8a13dfd86c42be58f086", "url": "https://github.com/apache/skywalking/commit/1b7a99eb8a45750adffe8a13dfd86c42be58f086", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-14T11:25:08Z", "type": "commit"}, {"oid": "59ad590850ef7bac07c2072d86f9360915eec78b", "url": "https://github.com/apache/skywalking/commit/59ad590850ef7bac07c2072d86f9360915eec78b", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-15T06:33:11Z", "type": "commit"}, {"oid": "08b6d7d3ba7634d70aa7fc07fa2dae2bea3bd20e", "url": "https://github.com/apache/skywalking/commit/08b6d7d3ba7634d70aa7fc07fa2dae2bea3bd20e", "message": "fix", "committedDate": "2020-10-15T12:55:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NTgyNg==", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r505555826", "body": "I guess `transparent` should be `transform` or `wrap`, `transparent` is an adjective, same as the other places where `transparent` appeared", "bodyText": "I guess transparent should be transform or wrap, transparent is an adjective, same as the other places where transparent appeared", "bodyHTML": "<p dir=\"auto\">I guess <code>transparent</code> should be <code>transform</code> or <code>wrap</code>, <code>transparent</code> is an adjective, same as the other places where <code>transparent</code> appeared</p>", "author": "kezhenxu94", "createdAt": "2020-10-15T13:47:08Z", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseAsyncProcessorInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.AsyncContext;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ServerInProtocolWrapper;\n+import org.apache.thrift.AsyncProcessFunction;\n+import org.apache.thrift.TBaseAsyncProcessor;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.server.AbstractNonblockingServer;\n+\n+/**\n+ * To transparent the AsyncProcessFunction for getting arguments of method.", "originalCommit": "08b6d7d3ba7634d70aa7fc07fa2dae2bea3bd20e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbbbd6c7d9b2c97a3ea1eefda41d5d1bf3706b51", "url": "https://github.com/apache/skywalking/commit/dbbbd6c7d9b2c97a3ea1eefda41d5d1bf3706b51", "message": "incorrect comment", "committedDate": "2020-10-16T03:35:44Z", "type": "commit"}, {"oid": "79336f0b1eaba6c25b12d4da3067726577241baf", "url": "https://github.com/apache/skywalking/commit/79336f0b1eaba6c25b12d4da3067726577241baf", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-16T03:53:53Z", "type": "commit"}, {"oid": "20d956e2eccb869f638f5f4a14007fe8ffe63cf5", "url": "https://github.com/apache/skywalking/commit/20d956e2eccb869f638f5f4a14007fe8ffe63cf5", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-16T06:20:51Z", "type": "commit"}, {"oid": "62ecceb8ef48d1e5e20baaa80e665c3ce4fbbb0b", "url": "https://github.com/apache/skywalking/commit/62ecceb8ef48d1e5e20baaa80e665c3ce4fbbb0b", "message": "Merge branch 'master' into plugin/thrift-1", "committedDate": "2020-10-16T06:56:55Z", "type": "commit"}]}