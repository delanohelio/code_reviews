{"pr_number": 5688, "pr_title": "Add agent config `PROPERTIES_REPORT_PERIOD_FACTOR `, Avoid the instanceTraffic record properties is null.", "pr_author": "zifeihan", "pr_createdAt": "2020-10-19T09:06:32Z", "pr_url": "https://github.com/apache/skywalking/pull/5688", "timeline": [{"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154", "url": "https://github.com/apache/skywalking/commit/327337b8b3c79ffb67eb3c72ec525e6ebfa56154", "message": "Add agent config `TIMES_SEND_PROPERTIES`, Avoid the instanceTraffic record properties is null.", "committedDate": "2020-10-19T08:51:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDE0Mw==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507620143", "body": "*FutureReturnValueIgnored:*  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "bodyText": "FutureReturnValueIgnored:  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "bodyHTML": "<p dir=\"auto\"><em>FutureReturnValueIgnored:</em>  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.</p>", "author": "sonatype-lift", "createdAt": "2020-10-19T09:55:24Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),", "originalCommit": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDE1OA==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507620158", "body": "*FutureReturnValueIgnored:*  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "bodyText": "FutureReturnValueIgnored:  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "bodyHTML": "<p dir=\"auto\"><em>FutureReturnValueIgnored:</em>  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.</p>", "author": "sonatype-lift", "createdAt": "2020-10-19T09:55:25Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "originalCommit": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507851171", "body": "Why do you move this `ping` into the `else` block? This should be as what it was.", "bodyText": "Why do you move this ping into the else block? This should be as what it was.", "bodyHTML": "<p dir=\"auto\">Why do you move this <code>ping</code> into the <code>else</code> block? This should be as what it was.</p>", "author": "kezhenxu94", "createdAt": "2020-10-19T15:35:53Z", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "originalCommit": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2ODEzMg==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508168132", "bodyText": "The KafkaServiceManagementServiceClient need sends the instance properties to the backend every collector.heartbeat_period * collector.times_send_properties seconds", "author": "zifeihan", "createdAt": "2020-10-20T02:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MjAyOA==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508172028", "bodyText": "@kezhenxu94 KafkaServiceManagementServiceClient also need to send the instance properties.", "author": "zifeihan", "createdAt": "2020-10-20T02:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NDEwNg==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508174106", "bodyText": "I think the question is, ping should be sent every time, no else. You should not change this part of the original codes.", "author": "wu-sheng", "createdAt": "2020-10-20T02:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}], "type": "inlineReview"}, {"oid": "9210c29e2e1ee4bc295d8d3583dda6016433d9a4", "url": "https://github.com/apache/skywalking/commit/9210c29e2e1ee4bc295d8d3583dda6016433d9a4", "message": "Polishing.", "committedDate": "2020-10-20T02:19:52Z", "type": "commit"}, {"oid": "2981322f03748382713c60d89a328eda0394d581", "url": "https://github.com/apache/skywalking/commit/2981322f03748382713c60d89a328eda0394d581", "message": "rename config `collector.times_send_properties` to `collector.properties_report_period_factor`", "committedDate": "2020-10-20T02:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NDA5NA==", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508174094", "body": "```suggestion\r\n         * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.properties_report_period_factor` seconds\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.times_send_properties` seconds\n          \n          \n            \n                     * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.properties_report_period_factor` seconds", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">         <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> agent sends the instance properties to the backend every `collector<span class=\"pl-k\">.</span>heartbeat_period <span class=\"pl-k\">*</span> collector<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">times_send_properties</span>` seconds</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> agent sends the instance properties to the backend every `collector<span class=\"pl-k\">.</span>heartbeat_period <span class=\"pl-k\">*</span> collector<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">properties_report_period_factor</span>` seconds</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kezhenxu94", "createdAt": "2020-10-20T02:41:09Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -142,6 +142,10 @@\n          * The period in which the agent report a heartbeat to the backend.\n          */\n         public static long HEARTBEAT_PERIOD = 30;\n+        /**\n+         * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.times_send_properties` seconds", "originalCommit": "2981322f03748382713c60d89a328eda0394d581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1e2b8e1c28311598d87f36782f6095f818d11ac", "url": "https://github.com/apache/skywalking/commit/b1e2b8e1c28311598d87f36782f6095f818d11ac", "message": "Merge remote-tracking branch 'origin/master' into hanfei", "committedDate": "2020-10-20T02:47:03Z", "type": "commit"}, {"oid": "94856f8d2ba3e14d3316ac0d14222ac60cb7ba29", "url": "https://github.com/apache/skywalking/commit/94856f8d2ba3e14d3316ac0d14222ac60cb7ba29", "message": "Fix JavaDoc", "committedDate": "2020-10-20T02:48:31Z", "type": "commit"}]}