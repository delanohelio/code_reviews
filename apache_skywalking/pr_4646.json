{"pr_number": 4646, "pr_title": "Nginx correlation e2e test", "pr_author": "mrproliu", "pr_createdAt": "2020-04-13T15:20:45Z", "pr_url": "https://github.com/apache/skywalking/pull/4646", "merge_commit": "171620bfa8e74bfc84e7d322c260f319943b7191", "timeline": [{"oid": "bc1138544cdfa2e18f5e30f964a8a99c7d54156f", "url": "https://github.com/apache/skywalking/commit/bc1138544cdfa2e18f5e30f964a8a99c7d54156f", "message": "adding lua agent correlation test", "committedDate": "2020-04-12T17:12:12Z", "type": "commit"}, {"oid": "1f41d8609dfa7542fc9edb289f98d48ca1da3eba", "url": "https://github.com/apache/skywalking/commit/1f41d8609dfa7542fc9edb289f98d48ca1da3eba", "message": "if we got illegal, then we should abandon this whole section", "committedDate": "2020-04-13T05:39:42Z", "type": "commit"}, {"oid": "0f62d95a3666488e03ce40df9f74ef45a6397adc", "url": "https://github.com/apache/skywalking/commit/0f62d95a3666488e03ce40df9f74ef45a6397adc", "message": "using new commit id", "committedDate": "2020-04-13T15:13:39Z", "type": "commit"}, {"oid": "33d9dfb148af3fabf3cb82792174f85cddff49ae", "url": "https://github.com/apache/skywalking/commit/33d9dfb148af3fabf3cb82792174f85cddff49ae", "message": "Merge branch 'master' into nginx_with_correlation", "committedDate": "2020-04-13T15:21:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTQzNQ==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407541435", "body": "> correlation can't be tested in the e2e from my perspective. \r\n\r\n@wu-sheng maybe here is how @mrproliu he made it possible to test correlation in the E2E, get the correlation context in a service and expose them in an endpoint that can be verified in the test codes?", "bodyText": "correlation can't be tested in the e2e from my perspective.\n\n@wu-sheng maybe here is how @mrproliu he made it possible to test correlation in the E2E, get the correlation context in a service and expose them in an endpoint that can be verified in the test codes?", "bodyHTML": "<blockquote>\n<p dir=\"auto\">correlation can't be tested in the e2e from my perspective.</p>\n</blockquote>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/wu-sheng/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wu-sheng\">@wu-sheng</a> maybe here is how <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mrproliu/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrproliu\">@mrproliu</a> he made it possible to test correlation in the E2E, get the correlation context in a service and expose them in an endpoint that can be verified in the test codes?</p>", "author": "kezhenxu94", "createdAt": "2020-04-13T15:33:49Z", "path": "test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/lua/LuaController.java", "diffHunk": "@@ -36,8 +37,15 @@\n     @PostMapping(\"/nginx/entry/info\")\n     private String nginxEntry(String backend) throws MalformedURLException, URISyntaxException {\n         final URL url = new URL(\"http://nginx:8080/nginx/info\");\n+        TraceContext.putCorrelation(\"entry\", \"entry_value\");\n         final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), null, String.class);\n         return response.getBody();\n     }\n \n+    @PostMapping(\"/nginx/end/info\")\n+    private String nginxEnd() throws MalformedURLException, URISyntaxException {\n+        return TraceContext.getCorrelation(\"entry\").orElse(\"\")\n+            + \"_\" + TraceContext.getCorrelation(\"nginx\").orElse(\"\");\n+    }", "originalCommit": "33d9dfb148af3fabf3cb82792174f85cddff49ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NDQzNA==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407554434", "bodyText": "Here my changed, java1 -> Nginx -> java2, java1 and Nginx to put the correlation data, then I get the all correlation data in java2 and return it. So, I make a JUnit to verify the java2 result.", "author": "mrproliu", "createdAt": "2020-04-13T15:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NjQ1NA==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407556454", "bodyText": "/nginx/end/info is the validated endpoint name, but the response entity wouldn't be tests. Please correct me if I am wrong.", "author": "wu-sheng", "createdAt": "2020-04-13T16:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTQzNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c95a9134925cbe8101dc72dbaca38269eb3dc3b1", "changed_code": [{"header": "diff --git a/test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/lua/LuaController.java b/test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/lua/LuaController.java\nindex 28cd19ffba..4e11cf320b 100644\n--- a/test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/lua/LuaController.java\n+++ b/test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/lua/LuaController.java\n", "chunk": "@@ -43,7 +44,9 @@ public class LuaController {\n     }\n \n     @PostMapping(\"/nginx/end/info\")\n-    private String nginxEnd() throws MalformedURLException, URISyntaxException {\n+    private String nginxEnd() throws InterruptedException {\n+        TimeUnit.SECONDS.sleep(1);\n+\n         return TraceContext.getCorrelation(\"entry\").orElse(\"\")\n             + \"_\" + TraceContext.getCorrelation(\"nginx\").orElse(\"\");\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "171620bfa8e74bfc84e7d322c260f319943b7191", "message": "Merge commit", "committedDate": null}, {"oid": "c95a9134925cbe8101dc72dbaca38269eb3dc3b1", "committedDate": "2020-10-29 14:38:49 +0800", "message": "Add percentile tests in e2e test. (#5737)"}, {"oid": "32f9ab01f22e5b786710109c48c018c85397af61", "committedDate": "2021-10-29 14:32:16 +0800", "message": "E2e immigrate to e2e-v2 finished,  remove old e2e. (#8037)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTcwMQ==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407541701", "body": "Let's remove the `public` modifier, Junit 5 doesn't require this", "bodyText": "Let's remove the public modifier, Junit 5 doesn't require this", "bodyHTML": "<p dir=\"auto\">Let's remove the <code>public</code> modifier, Junit 5 doesn't require this</p>", "author": "kezhenxu94", "createdAt": "2020-04-13T15:34:15Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java", "diffHunk": "@@ -92,14 +95,21 @@\n     public void setUp() throws Exception {\n         queryClient(swWebappHostPort);\n \n-        trafficController(entryProvider, \"/nginx/entry/info?backend=\" + nginxHostPort.host() + \":\" + nginxHostPort.port());\n+        trafficController(entryProvider, \"/nginx/entry/info\");\n     }\n \n     @AfterAll\n     public void tearDown() {\n         trafficController.stop();\n     }\n \n+    @RetryableTest\n+    public void correlation() throws Exception {", "originalCommit": "33d9dfb148af3fabf3cb82792174f85cddff49ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6264612e939b2754c125b2be54ac5fc3f8e6cf08", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -104,7 +100,7 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     }\n \n     @RetryableTest\n-    public void correlation() throws Exception {\n+    void correlation() throws Exception {\n         final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n         final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n         Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "171620bfa8e74bfc84e7d322c260f319943b7191", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -104,7 +100,7 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     }\n \n     @RetryableTest\n-    public void correlation() throws Exception {\n+    void correlation() throws Exception {\n         final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n         final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n         Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n", "next_change": {"commit": "32f9ab01f22e5b786710109c48c018c85397af61", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\ndeleted file mode 100644\nindex 48ebc1d712..0000000000\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ /dev/null\n", "chunk": "@@ -1,294 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.e2e;\n-\n-import java.net.URL;\n-import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n-import org.apache.skywalking.e2e.annotation.DockerCompose;\n-import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n-import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n-import org.apache.skywalking.e2e.common.HostAndPort;\n-import org.apache.skywalking.e2e.metrics.AtLeastOneOfMetricsMatcher;\n-import org.apache.skywalking.e2e.metrics.Metrics;\n-import org.apache.skywalking.e2e.metrics.MetricsQuery;\n-import org.apache.skywalking.e2e.metrics.MetricsValueMatcher;\n-import org.apache.skywalking.e2e.retryable.RetryableTest;\n-import org.apache.skywalking.e2e.service.Service;\n-import org.apache.skywalking.e2e.service.ServicesMatcher;\n-import org.apache.skywalking.e2e.service.ServicesQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n-import org.apache.skywalking.e2e.service.instance.Instance;\n-import org.apache.skywalking.e2e.service.instance.Instances;\n-import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n-import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n-import org.apache.skywalking.e2e.topo.Call;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopology;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyMatcher;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyQuery;\n-import org.apache.skywalking.e2e.topo.Topology;\n-import org.apache.skywalking.e2e.topo.TopoMatcher;\n-import org.apache.skywalking.e2e.topo.TopoQuery;\n-import org.apache.skywalking.e2e.trace.Trace;\n-import org.apache.skywalking.e2e.trace.TracesMatcher;\n-import org.apache.skywalking.e2e.trace.TracesQuery;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.springframework.http.ResponseEntity;\n-import org.testcontainers.containers.DockerComposeContainer;\n-\n-import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_ENDPOINT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_INSTANCE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.utils.Yamls.load;\n-import static org.apache.skywalking.e2e.utils.Times.now;\n-\n-@Slf4j\n-@SkyWalkingE2E\n-public class LuaE2E extends SkyWalkingTestAdapter {\n-    @SuppressWarnings(\"unused\")\n-    @DockerCompose(\"docker/lua/docker-compose.yml\")\n-    private DockerComposeContainer<?> justForSideEffects;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"ui\", port = 8080)\n-    private HostAndPort swWebappHostPort;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"provider-entry\", port = 9090)\n-    private HostAndPort entryProvider;\n-\n-    private final String nginxServiceName = \"User_Service_Name\";\n-    private final String entryServiceName = \"e2e-service-entry-provider\";\n-\n-    @BeforeAll\n-    public void setUp() throws Exception {\n-        queryClient(swWebappHostPort);\n-\n-        trafficController(entryProvider, \"/nginx/entry/info\");\n-    }\n-\n-    @AfterAll\n-    public void tearDown() {\n-        trafficController.stop();\n-    }\n-\n-    @RetryableTest\n-    void correlation() throws Exception {\n-        final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n-        final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n-        Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n-    }\n-\n-    @RetryableTest\n-    void services() throws Exception {\n-        final List<Service> services = graphql.services(new ServicesQuery().start(startTime).end(now()));\n-\n-        LOGGER.info(\"services: {}\", services);\n-\n-        load(\"expected/lua/services.yml\").as(ServicesMatcher.class).verify(services);\n-\n-        for (Service service : services) {\n-            LOGGER.info(\"verifying service instances: {}\", service);\n-\n-            verifyServiceMetrics(service);\n-\n-            final Instances instances = verifyServiceInstances(service);\n-\n-            verifyInstancesMetrics(instances);\n-\n-            final Endpoints endpoints = verifyServiceEndpoints(service);\n-\n-            verifyEndpointsMetrics(endpoints);\n-        }\n-    }\n-\n-    @RetryableTest\n-    void traces() throws Exception {\n-        final List<Trace> traces = graphql.traces(new TracesQuery().start(startTime).end(now()).orderByDuration());\n-\n-        LOGGER.info(\"traces: {}\", traces);\n-\n-        load(\"expected/lua/traces.yml\").as(TracesMatcher.class).verifyLoosely(traces);\n-    }\n-\n-    @RetryableTest\n-    void topology() throws Exception {\n-        final Topology topology = graphql.topo(new TopoQuery().stepByMinute().start(startTime.minusDays(1)).end(now()));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/topo.yml\").as(TopoMatcher.class).verify(topology);\n-\n-        verifyServiceRelationMetrics(topology.getCalls());\n-    }\n-\n-    @RetryableTest\n-    void serviceInstances() throws Exception {\n-        final ServiceInstanceTopology topology = graphql.serviceInstanceTopo(\n-            new ServiceInstanceTopologyQuery().stepByMinute()\n-                                              .start(startTime.minusDays(1))\n-                                              .end(now())\n-                                              .clientServiceId(\"ZTJlLXNlcnZpY2UtZW50cnktcHJvdmlkZXI=.1\")\n-                                              .serverServiceId(\"VXNlcl9TZXJ2aWNlX05hbWU=.1\"));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/serviceInstanceTopo.yml\").as(ServiceInstanceTopologyMatcher.class).verify(topology);\n-\n-        verifyServiceInstanceRelationMetrics(topology.getCalls());\n-    }\n-\n-    private Instances verifyServiceInstances(final Service service) throws Exception {\n-        final Instances instances = graphql.instances(\n-                new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now())\n-        );\n-\n-        LOGGER.info(\"instances: {}\", instances);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxInstances.yml\").as(InstancesMatcher.class).verify(instances);\n-        } else {\n-            load(\"expected/lua/instances.yml\").as(InstancesMatcher.class).verify(instances);\n-        }\n-\n-        return instances;\n-    }\n-\n-    private Endpoints verifyServiceEndpoints(final Service service) throws Exception {\n-        final Endpoints endpoints = graphql.endpoints(new EndpointQuery().serviceId(service.getKey()));\n-\n-        LOGGER.info(\"endpoints: {}\", endpoints);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxEndpoints.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else if (entryServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/endpoints-entry.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else {\n-            load(\"expected/lua/endpoints-end.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        }\n-\n-        return endpoints;\n-    }\n-\n-    private void verifyInstancesMetrics(Instances instances) throws Exception {\n-        for (Instance instance : instances.getInstances()) {\n-            for (String metricsName : ALL_INSTANCE_METRICS) {\n-                LOGGER.info(\"verifying service instance response time: {}\", instance);\n-                final Metrics instanceMetrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricsName).id(instance.getKey())\n-                );\n-\n-                LOGGER.info(\"instance metrics: {}\", instanceMetrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(instanceMetrics);\n-                LOGGER.info(\"{}: {}\", metricsName, instanceMetrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n-        for (Endpoint endpoint : endpoints.getEndpoints()) {\n-            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n-                continue;\n-            }\n-            for (final String metricName : ALL_ENDPOINT_METRICS) {\n-                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n-\n-                final Metrics metrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n-                );\n-\n-                LOGGER.info(\"metrics: {}\", metrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(metrics);\n-\n-                LOGGER.info(\"{}: {}\", metricName, metrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyServiceMetrics(final Service service) throws Exception {\n-        for (String metricName : ALL_SERVICE_METRICS) {\n-            LOGGER.info(\"verifying service {}, metrics: {}\", service, metricName);\n-            final Metrics serviceMetrics = graphql.metrics(\n-                new MetricsQuery().stepByMinute().metricsName(metricName).id(service.getKey())\n-            );\n-            LOGGER.info(\"serviceMetrics: {}\", serviceMetrics);\n-            final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-            final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-            greaterThanZero.setValue(\"gt 0\");\n-            instanceRespTimeMatcher.setValue(greaterThanZero);\n-            instanceRespTimeMatcher.verify(serviceMetrics);\n-            LOGGER.info(\"{}: {}\", metricName, serviceMetrics);\n-        }\n-    }\n-\n-    private void verifyServiceInstanceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(\n-            calls, ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS,\n-            ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS\n-        );\n-    }\n-\n-    private void verifyServiceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(calls, ALL_SERVICE_RELATION_CLIENT_METRICS, ALL_SERVICE_RELATION_SERVER_METRICS);\n-    }\n-\n-    private void verifyRelationMetrics(final List<Call> calls,\n-                                       final String[] relationClientMetrics,\n-                                       final String[] relationServerMetrics) throws Exception {\n-        for (Call call : calls) {\n-            for (String detectPoint : call.getDetectPoints()) {\n-                switch (detectPoint) {\n-                    case \"CLIENT\": {\n-                        for (String metricName : relationClientMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                    case \"SERVER\": {\n-                        for (String metricName : relationServerMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "171620bfa8e74bfc84e7d322c260f319943b7191", "message": "Merge commit", "committedDate": null}, {"oid": "c95a9134925cbe8101dc72dbaca38269eb3dc3b1", "committedDate": "2020-10-29 14:38:49 +0800", "message": "Add percentile tests in e2e test. (#5737)"}, {"oid": "32f9ab01f22e5b786710109c48c018c85397af61", "committedDate": "2021-10-29 14:32:16 +0800", "message": "E2e immigrate to e2e-v2 finished,  remove old e2e. (#8037)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0OTYzNA==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407549634", "body": "Remove the declaration of `nginxHostPort` (line#89) if you don't need it anymore", "bodyText": "Remove the declaration of nginxHostPort (line#89) if you don't need it anymore", "bodyHTML": "<p dir=\"auto\">Remove the declaration of <code>nginxHostPort</code> (line#89) if you don't need it anymore</p>", "author": "kezhenxu94", "createdAt": "2020-04-13T15:49:19Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java", "diffHunk": "@@ -92,14 +95,21 @@\n     public void setUp() throws Exception {\n         queryClient(swWebappHostPort);\n \n-        trafficController(entryProvider, \"/nginx/entry/info?backend=\" + nginxHostPort.host() + \":\" + nginxHostPort.port());", "originalCommit": "33d9dfb148af3fabf3cb82792174f85cddff49ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6264612e939b2754c125b2be54ac5fc3f8e6cf08", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -84,10 +84,6 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     @ContainerHostAndPort(name = \"provider-entry\", port = 9090)\n     private HostAndPort entryProvider;\n \n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"nginx\", port = 8080)\n-    private HostAndPort nginxHostPort;\n-\n     private final String nginxServiceName = \"User_Service_Name\";\n     private final String entryServiceName = \"e2e-service-entry-provider\";\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "171620bfa8e74bfc84e7d322c260f319943b7191", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -84,10 +84,6 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     @ContainerHostAndPort(name = \"provider-entry\", port = 9090)\n     private HostAndPort entryProvider;\n \n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"nginx\", port = 8080)\n-    private HostAndPort nginxHostPort;\n-\n     private final String nginxServiceName = \"User_Service_Name\";\n     private final String entryServiceName = \"e2e-service-entry-provider\";\n \n", "next_change": {"commit": "32f9ab01f22e5b786710109c48c018c85397af61", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\ndeleted file mode 100644\nindex 48ebc1d712..0000000000\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ /dev/null\n", "chunk": "@@ -1,294 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.e2e;\n-\n-import java.net.URL;\n-import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n-import org.apache.skywalking.e2e.annotation.DockerCompose;\n-import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n-import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n-import org.apache.skywalking.e2e.common.HostAndPort;\n-import org.apache.skywalking.e2e.metrics.AtLeastOneOfMetricsMatcher;\n-import org.apache.skywalking.e2e.metrics.Metrics;\n-import org.apache.skywalking.e2e.metrics.MetricsQuery;\n-import org.apache.skywalking.e2e.metrics.MetricsValueMatcher;\n-import org.apache.skywalking.e2e.retryable.RetryableTest;\n-import org.apache.skywalking.e2e.service.Service;\n-import org.apache.skywalking.e2e.service.ServicesMatcher;\n-import org.apache.skywalking.e2e.service.ServicesQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n-import org.apache.skywalking.e2e.service.instance.Instance;\n-import org.apache.skywalking.e2e.service.instance.Instances;\n-import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n-import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n-import org.apache.skywalking.e2e.topo.Call;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopology;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyMatcher;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyQuery;\n-import org.apache.skywalking.e2e.topo.Topology;\n-import org.apache.skywalking.e2e.topo.TopoMatcher;\n-import org.apache.skywalking.e2e.topo.TopoQuery;\n-import org.apache.skywalking.e2e.trace.Trace;\n-import org.apache.skywalking.e2e.trace.TracesMatcher;\n-import org.apache.skywalking.e2e.trace.TracesQuery;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.springframework.http.ResponseEntity;\n-import org.testcontainers.containers.DockerComposeContainer;\n-\n-import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_ENDPOINT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_INSTANCE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.utils.Yamls.load;\n-import static org.apache.skywalking.e2e.utils.Times.now;\n-\n-@Slf4j\n-@SkyWalkingE2E\n-public class LuaE2E extends SkyWalkingTestAdapter {\n-    @SuppressWarnings(\"unused\")\n-    @DockerCompose(\"docker/lua/docker-compose.yml\")\n-    private DockerComposeContainer<?> justForSideEffects;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"ui\", port = 8080)\n-    private HostAndPort swWebappHostPort;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"provider-entry\", port = 9090)\n-    private HostAndPort entryProvider;\n-\n-    private final String nginxServiceName = \"User_Service_Name\";\n-    private final String entryServiceName = \"e2e-service-entry-provider\";\n-\n-    @BeforeAll\n-    public void setUp() throws Exception {\n-        queryClient(swWebappHostPort);\n-\n-        trafficController(entryProvider, \"/nginx/entry/info\");\n-    }\n-\n-    @AfterAll\n-    public void tearDown() {\n-        trafficController.stop();\n-    }\n-\n-    @RetryableTest\n-    void correlation() throws Exception {\n-        final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n-        final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n-        Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n-    }\n-\n-    @RetryableTest\n-    void services() throws Exception {\n-        final List<Service> services = graphql.services(new ServicesQuery().start(startTime).end(now()));\n-\n-        LOGGER.info(\"services: {}\", services);\n-\n-        load(\"expected/lua/services.yml\").as(ServicesMatcher.class).verify(services);\n-\n-        for (Service service : services) {\n-            LOGGER.info(\"verifying service instances: {}\", service);\n-\n-            verifyServiceMetrics(service);\n-\n-            final Instances instances = verifyServiceInstances(service);\n-\n-            verifyInstancesMetrics(instances);\n-\n-            final Endpoints endpoints = verifyServiceEndpoints(service);\n-\n-            verifyEndpointsMetrics(endpoints);\n-        }\n-    }\n-\n-    @RetryableTest\n-    void traces() throws Exception {\n-        final List<Trace> traces = graphql.traces(new TracesQuery().start(startTime).end(now()).orderByDuration());\n-\n-        LOGGER.info(\"traces: {}\", traces);\n-\n-        load(\"expected/lua/traces.yml\").as(TracesMatcher.class).verifyLoosely(traces);\n-    }\n-\n-    @RetryableTest\n-    void topology() throws Exception {\n-        final Topology topology = graphql.topo(new TopoQuery().stepByMinute().start(startTime.minusDays(1)).end(now()));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/topo.yml\").as(TopoMatcher.class).verify(topology);\n-\n-        verifyServiceRelationMetrics(topology.getCalls());\n-    }\n-\n-    @RetryableTest\n-    void serviceInstances() throws Exception {\n-        final ServiceInstanceTopology topology = graphql.serviceInstanceTopo(\n-            new ServiceInstanceTopologyQuery().stepByMinute()\n-                                              .start(startTime.minusDays(1))\n-                                              .end(now())\n-                                              .clientServiceId(\"ZTJlLXNlcnZpY2UtZW50cnktcHJvdmlkZXI=.1\")\n-                                              .serverServiceId(\"VXNlcl9TZXJ2aWNlX05hbWU=.1\"));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/serviceInstanceTopo.yml\").as(ServiceInstanceTopologyMatcher.class).verify(topology);\n-\n-        verifyServiceInstanceRelationMetrics(topology.getCalls());\n-    }\n-\n-    private Instances verifyServiceInstances(final Service service) throws Exception {\n-        final Instances instances = graphql.instances(\n-                new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now())\n-        );\n-\n-        LOGGER.info(\"instances: {}\", instances);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxInstances.yml\").as(InstancesMatcher.class).verify(instances);\n-        } else {\n-            load(\"expected/lua/instances.yml\").as(InstancesMatcher.class).verify(instances);\n-        }\n-\n-        return instances;\n-    }\n-\n-    private Endpoints verifyServiceEndpoints(final Service service) throws Exception {\n-        final Endpoints endpoints = graphql.endpoints(new EndpointQuery().serviceId(service.getKey()));\n-\n-        LOGGER.info(\"endpoints: {}\", endpoints);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxEndpoints.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else if (entryServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/endpoints-entry.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else {\n-            load(\"expected/lua/endpoints-end.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        }\n-\n-        return endpoints;\n-    }\n-\n-    private void verifyInstancesMetrics(Instances instances) throws Exception {\n-        for (Instance instance : instances.getInstances()) {\n-            for (String metricsName : ALL_INSTANCE_METRICS) {\n-                LOGGER.info(\"verifying service instance response time: {}\", instance);\n-                final Metrics instanceMetrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricsName).id(instance.getKey())\n-                );\n-\n-                LOGGER.info(\"instance metrics: {}\", instanceMetrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(instanceMetrics);\n-                LOGGER.info(\"{}: {}\", metricsName, instanceMetrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n-        for (Endpoint endpoint : endpoints.getEndpoints()) {\n-            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n-                continue;\n-            }\n-            for (final String metricName : ALL_ENDPOINT_METRICS) {\n-                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n-\n-                final Metrics metrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n-                );\n-\n-                LOGGER.info(\"metrics: {}\", metrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(metrics);\n-\n-                LOGGER.info(\"{}: {}\", metricName, metrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyServiceMetrics(final Service service) throws Exception {\n-        for (String metricName : ALL_SERVICE_METRICS) {\n-            LOGGER.info(\"verifying service {}, metrics: {}\", service, metricName);\n-            final Metrics serviceMetrics = graphql.metrics(\n-                new MetricsQuery().stepByMinute().metricsName(metricName).id(service.getKey())\n-            );\n-            LOGGER.info(\"serviceMetrics: {}\", serviceMetrics);\n-            final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-            final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-            greaterThanZero.setValue(\"gt 0\");\n-            instanceRespTimeMatcher.setValue(greaterThanZero);\n-            instanceRespTimeMatcher.verify(serviceMetrics);\n-            LOGGER.info(\"{}: {}\", metricName, serviceMetrics);\n-        }\n-    }\n-\n-    private void verifyServiceInstanceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(\n-            calls, ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS,\n-            ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS\n-        );\n-    }\n-\n-    private void verifyServiceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(calls, ALL_SERVICE_RELATION_CLIENT_METRICS, ALL_SERVICE_RELATION_SERVER_METRICS);\n-    }\n-\n-    private void verifyRelationMetrics(final List<Call> calls,\n-                                       final String[] relationClientMetrics,\n-                                       final String[] relationServerMetrics) throws Exception {\n-        for (Call call : calls) {\n-            for (String detectPoint : call.getDetectPoints()) {\n-                switch (detectPoint) {\n-                    case \"CLIENT\": {\n-                        for (String metricName : relationClientMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                    case \"SERVER\": {\n-                        for (String metricName : relationServerMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "171620bfa8e74bfc84e7d322c260f319943b7191", "message": "Merge commit", "committedDate": null}, {"oid": "c95a9134925cbe8101dc72dbaca38269eb3dc3b1", "committedDate": "2020-10-29 14:38:49 +0800", "message": "Add percentile tests in e2e test. (#5737)"}, {"oid": "32f9ab01f22e5b786710109c48c018c85397af61", "committedDate": "2021-10-29 14:32:16 +0800", "message": "E2e immigrate to e2e-v2 finished,  remove old e2e. (#8037)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzQ4Mw==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407557483", "body": "@mrproliu Do you mean this check?", "bodyText": "@mrproliu Do you mean this check?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mrproliu/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrproliu\">@mrproliu</a> Do you mean this check?</p>", "author": "wu-sheng", "createdAt": "2020-04-13T16:03:35Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java", "diffHunk": "@@ -92,14 +95,21 @@\n     public void setUp() throws Exception {\n         queryClient(swWebappHostPort);\n \n-        trafficController(entryProvider, \"/nginx/entry/info?backend=\" + nginxHostPort.host() + \":\" + nginxHostPort.port());\n+        trafficController(entryProvider, \"/nginx/entry/info\");\n     }\n \n     @AfterAll\n     public void tearDown() {\n         trafficController.stop();\n     }\n \n+    @RetryableTest\n+    public void correlation() throws Exception {\n+        final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n+        final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n+        Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");", "originalCommit": "33d9dfb148af3fabf3cb82792174f85cddff49ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1OTA1OA==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407559058", "bodyText": "Yes, there will check all the correlation data from java2 response.", "author": "mrproliu", "createdAt": "2020-04-13T16:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTIwNA==", "url": "https://github.com/apache/skywalking/pull/4646#discussion_r407799204", "bodyText": "So, once the propagation fails, this e2e will fail directly. Got it.", "author": "wu-sheng", "createdAt": "2020-04-14T00:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6264612e939b2754c125b2be54ac5fc3f8e6cf08", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -104,7 +100,7 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     }\n \n     @RetryableTest\n-    public void correlation() throws Exception {\n+    void correlation() throws Exception {\n         final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n         final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n         Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "171620bfa8e74bfc84e7d322c260f319943b7191", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\nindex 439c6af95b..48ebc1d712 100644\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n", "chunk": "@@ -104,7 +100,7 @@ public class LuaE2E extends SkyWalkingTestAdapter {\n     }\n \n     @RetryableTest\n-    public void correlation() throws Exception {\n+    void correlation() throws Exception {\n         final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n         final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n         Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n", "next_change": {"commit": "32f9ab01f22e5b786710109c48c018c85397af61", "changed_code": [{"header": "diff --git a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java b/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\ndeleted file mode 100644\nindex 48ebc1d712..0000000000\n--- a/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java\n+++ /dev/null\n", "chunk": "@@ -1,294 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.e2e;\n-\n-import java.net.URL;\n-import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n-import org.apache.skywalking.e2e.annotation.DockerCompose;\n-import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n-import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n-import org.apache.skywalking.e2e.common.HostAndPort;\n-import org.apache.skywalking.e2e.metrics.AtLeastOneOfMetricsMatcher;\n-import org.apache.skywalking.e2e.metrics.Metrics;\n-import org.apache.skywalking.e2e.metrics.MetricsQuery;\n-import org.apache.skywalking.e2e.metrics.MetricsValueMatcher;\n-import org.apache.skywalking.e2e.retryable.RetryableTest;\n-import org.apache.skywalking.e2e.service.Service;\n-import org.apache.skywalking.e2e.service.ServicesMatcher;\n-import org.apache.skywalking.e2e.service.ServicesQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n-import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n-import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n-import org.apache.skywalking.e2e.service.instance.Instance;\n-import org.apache.skywalking.e2e.service.instance.Instances;\n-import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n-import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n-import org.apache.skywalking.e2e.topo.Call;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopology;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyMatcher;\n-import org.apache.skywalking.e2e.topo.ServiceInstanceTopologyQuery;\n-import org.apache.skywalking.e2e.topo.Topology;\n-import org.apache.skywalking.e2e.topo.TopoMatcher;\n-import org.apache.skywalking.e2e.topo.TopoQuery;\n-import org.apache.skywalking.e2e.trace.Trace;\n-import org.apache.skywalking.e2e.trace.TracesMatcher;\n-import org.apache.skywalking.e2e.trace.TracesQuery;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.springframework.http.ResponseEntity;\n-import org.testcontainers.containers.DockerComposeContainer;\n-\n-import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_ENDPOINT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_INSTANCE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_CLIENT_METRICS;\n-import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SERVICE_RELATION_SERVER_METRICS;\n-import static org.apache.skywalking.e2e.utils.Yamls.load;\n-import static org.apache.skywalking.e2e.utils.Times.now;\n-\n-@Slf4j\n-@SkyWalkingE2E\n-public class LuaE2E extends SkyWalkingTestAdapter {\n-    @SuppressWarnings(\"unused\")\n-    @DockerCompose(\"docker/lua/docker-compose.yml\")\n-    private DockerComposeContainer<?> justForSideEffects;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"ui\", port = 8080)\n-    private HostAndPort swWebappHostPort;\n-\n-    @SuppressWarnings(\"unused\")\n-    @ContainerHostAndPort(name = \"provider-entry\", port = 9090)\n-    private HostAndPort entryProvider;\n-\n-    private final String nginxServiceName = \"User_Service_Name\";\n-    private final String entryServiceName = \"e2e-service-entry-provider\";\n-\n-    @BeforeAll\n-    public void setUp() throws Exception {\n-        queryClient(swWebappHostPort);\n-\n-        trafficController(entryProvider, \"/nginx/entry/info\");\n-    }\n-\n-    @AfterAll\n-    public void tearDown() {\n-        trafficController.stop();\n-    }\n-\n-    @RetryableTest\n-    void correlation() throws Exception {\n-        final URL url = new URL(\"http\", entryProvider.host(), entryProvider.port(), \"/nginx/entry/info\");\n-        final ResponseEntity<String> response = restTemplate.postForEntity(url.toURI(), trafficData, String.class);\n-        Assert.assertEquals(response.getBody(), \"entry_value_nginx_value\");\n-    }\n-\n-    @RetryableTest\n-    void services() throws Exception {\n-        final List<Service> services = graphql.services(new ServicesQuery().start(startTime).end(now()));\n-\n-        LOGGER.info(\"services: {}\", services);\n-\n-        load(\"expected/lua/services.yml\").as(ServicesMatcher.class).verify(services);\n-\n-        for (Service service : services) {\n-            LOGGER.info(\"verifying service instances: {}\", service);\n-\n-            verifyServiceMetrics(service);\n-\n-            final Instances instances = verifyServiceInstances(service);\n-\n-            verifyInstancesMetrics(instances);\n-\n-            final Endpoints endpoints = verifyServiceEndpoints(service);\n-\n-            verifyEndpointsMetrics(endpoints);\n-        }\n-    }\n-\n-    @RetryableTest\n-    void traces() throws Exception {\n-        final List<Trace> traces = graphql.traces(new TracesQuery().start(startTime).end(now()).orderByDuration());\n-\n-        LOGGER.info(\"traces: {}\", traces);\n-\n-        load(\"expected/lua/traces.yml\").as(TracesMatcher.class).verifyLoosely(traces);\n-    }\n-\n-    @RetryableTest\n-    void topology() throws Exception {\n-        final Topology topology = graphql.topo(new TopoQuery().stepByMinute().start(startTime.minusDays(1)).end(now()));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/topo.yml\").as(TopoMatcher.class).verify(topology);\n-\n-        verifyServiceRelationMetrics(topology.getCalls());\n-    }\n-\n-    @RetryableTest\n-    void serviceInstances() throws Exception {\n-        final ServiceInstanceTopology topology = graphql.serviceInstanceTopo(\n-            new ServiceInstanceTopologyQuery().stepByMinute()\n-                                              .start(startTime.minusDays(1))\n-                                              .end(now())\n-                                              .clientServiceId(\"ZTJlLXNlcnZpY2UtZW50cnktcHJvdmlkZXI=.1\")\n-                                              .serverServiceId(\"VXNlcl9TZXJ2aWNlX05hbWU=.1\"));\n-\n-        LOGGER.info(\"topology: {}\", topology);\n-\n-        load(\"expected/lua/serviceInstanceTopo.yml\").as(ServiceInstanceTopologyMatcher.class).verify(topology);\n-\n-        verifyServiceInstanceRelationMetrics(topology.getCalls());\n-    }\n-\n-    private Instances verifyServiceInstances(final Service service) throws Exception {\n-        final Instances instances = graphql.instances(\n-                new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now())\n-        );\n-\n-        LOGGER.info(\"instances: {}\", instances);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxInstances.yml\").as(InstancesMatcher.class).verify(instances);\n-        } else {\n-            load(\"expected/lua/instances.yml\").as(InstancesMatcher.class).verify(instances);\n-        }\n-\n-        return instances;\n-    }\n-\n-    private Endpoints verifyServiceEndpoints(final Service service) throws Exception {\n-        final Endpoints endpoints = graphql.endpoints(new EndpointQuery().serviceId(service.getKey()));\n-\n-        LOGGER.info(\"endpoints: {}\", endpoints);\n-\n-        if (nginxServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/nginxEndpoints.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else if (entryServiceName.equals(service.getLabel())) {\n-            load(\"expected/lua/endpoints-entry.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        } else {\n-            load(\"expected/lua/endpoints-end.yml\").as(EndpointsMatcher.class).verify(endpoints);\n-        }\n-\n-        return endpoints;\n-    }\n-\n-    private void verifyInstancesMetrics(Instances instances) throws Exception {\n-        for (Instance instance : instances.getInstances()) {\n-            for (String metricsName : ALL_INSTANCE_METRICS) {\n-                LOGGER.info(\"verifying service instance response time: {}\", instance);\n-                final Metrics instanceMetrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricsName).id(instance.getKey())\n-                );\n-\n-                LOGGER.info(\"instance metrics: {}\", instanceMetrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(instanceMetrics);\n-                LOGGER.info(\"{}: {}\", metricsName, instanceMetrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n-        for (Endpoint endpoint : endpoints.getEndpoints()) {\n-            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n-                continue;\n-            }\n-            for (final String metricName : ALL_ENDPOINT_METRICS) {\n-                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n-\n-                final Metrics metrics = graphql.metrics(\n-                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n-                );\n-\n-                LOGGER.info(\"metrics: {}\", metrics);\n-\n-                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-                greaterThanZero.setValue(\"gt 0\");\n-                instanceRespTimeMatcher.setValue(greaterThanZero);\n-                instanceRespTimeMatcher.verify(metrics);\n-\n-                LOGGER.info(\"{}: {}\", metricName, metrics);\n-            }\n-        }\n-    }\n-\n-    private void verifyServiceMetrics(final Service service) throws Exception {\n-        for (String metricName : ALL_SERVICE_METRICS) {\n-            LOGGER.info(\"verifying service {}, metrics: {}\", service, metricName);\n-            final Metrics serviceMetrics = graphql.metrics(\n-                new MetricsQuery().stepByMinute().metricsName(metricName).id(service.getKey())\n-            );\n-            LOGGER.info(\"serviceMetrics: {}\", serviceMetrics);\n-            final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n-            final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n-            greaterThanZero.setValue(\"gt 0\");\n-            instanceRespTimeMatcher.setValue(greaterThanZero);\n-            instanceRespTimeMatcher.verify(serviceMetrics);\n-            LOGGER.info(\"{}: {}\", metricName, serviceMetrics);\n-        }\n-    }\n-\n-    private void verifyServiceInstanceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(\n-            calls, ALL_SERVICE_INSTANCE_RELATION_CLIENT_METRICS,\n-            ALL_SERVICE_INSTANCE_RELATION_SERVER_METRICS\n-        );\n-    }\n-\n-    private void verifyServiceRelationMetrics(final List<Call> calls) throws Exception {\n-        verifyRelationMetrics(calls, ALL_SERVICE_RELATION_CLIENT_METRICS, ALL_SERVICE_RELATION_SERVER_METRICS);\n-    }\n-\n-    private void verifyRelationMetrics(final List<Call> calls,\n-                                       final String[] relationClientMetrics,\n-                                       final String[] relationServerMetrics) throws Exception {\n-        for (Call call : calls) {\n-            for (String detectPoint : call.getDetectPoints()) {\n-                switch (detectPoint) {\n-                    case \"CLIENT\": {\n-                        for (String metricName : relationClientMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                    case \"SERVER\": {\n-                        for (String metricName : relationServerMetrics) {\n-                            verifyMetrics(graphql, metricName, call.getId(), startTime);\n-                        }\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "171620bfa8e74bfc84e7d322c260f319943b7191", "message": "Merge commit", "committedDate": null}, {"oid": "c95a9134925cbe8101dc72dbaca38269eb3dc3b1", "committedDate": "2020-10-29 14:38:49 +0800", "message": "Add percentile tests in e2e test. (#5737)"}, {"oid": "32f9ab01f22e5b786710109c48c018c85397af61", "committedDate": "2021-10-29 14:32:16 +0800", "message": "E2e immigrate to e2e-v2 finished,  remove old e2e. (#8037)"}]}, {"oid": "6264612e939b2754c125b2be54ac5fc3f8e6cf08", "url": "https://github.com/apache/skywalking/commit/6264612e939b2754c125b2be54ac5fc3f8e6cf08", "message": "resolve issues", "committedDate": "2020-04-13T16:24:10Z", "type": "commit"}]}