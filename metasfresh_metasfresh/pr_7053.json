{"pr_number": 7053, "pr_title": "- initial commit", "pr_author": "pvpurcarcosmin", "pr_createdAt": "2020-07-23T15:12:39Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/7053", "timeline": [{"oid": "64ab0df551151fb8a89da8311e1aac7672b816f4", "url": "https://github.com/metasfresh/metasfresh/commit/64ab0df551151fb8a89da8311e1aac7672b816f4", "message": "- initial commit\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-23T15:11:12Z", "type": "commit"}, {"oid": "6f7df332b065b225090a502de716f4193955cadf", "url": "https://github.com/metasfresh/metasfresh/commit/6f7df332b065b225090a502de716f4193955cadf", "message": "- de-comment\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-23T15:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2OTIxMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r459569212", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             * #%L\n          \n          \n            \n             * de.metas.swat.base\n          \n          \n            \n             * %%\n          \n          \n            \n             * Copyright (C) 2015 metas GmbH\n          \n          \n            \n             * %%\n          \n          \n            \n             * This program is free software: you can redistribute it and/or modify\n          \n          \n            \n             * it under the terms of the GNU General Public License as\n          \n          \n            \n             * published by the Free Software Foundation, either version 2 of the\n          \n          \n            \n             * License, or (at your option) any later version.\n          \n          \n            \n             *\n          \n          \n            \n             * This program is distributed in the hope that it will be useful,\n          \n          \n            \n             * but WITHOUT ANY WARRANTY; without even the implied warranty of\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n          \n          \n            \n             * GNU General Public License for more details.\n          \n          \n            \n             *\n          \n          \n            \n             * You should have received a copy of the GNU General Public\n          \n          \n            \n             * License along with this program. If not, see\n          \n          \n            \n             * <http://www.gnu.org/licenses/gpl-2.0.html>.\n          \n          \n            \n             * #L%\n          \n          \n            \n             */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-c\"><span class=\"pl-c\">/*</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> #<span class=\"pl-k\">%</span><span class=\"pl-smi\">L</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> de<span class=\"pl-k\">.</span>metas<span class=\"pl-k\">.</span>swat<span class=\"pl-k\">.</span>base</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">%%</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> (<span class=\"pl-smi\">C</span>) <span class=\"pl-c1\">2015</span> metas <span class=\"pl-smi\">GmbH</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">%%</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">This</span> program is free software<span class=\"pl-k\">:</span> you can redistribute it and<span class=\"pl-k\">/</span>or modify</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> it under the terms of the <span class=\"pl-c1\">GNU</span> <span class=\"pl-smi\">General</span> <span class=\"pl-smi\">Public</span> <span class=\"pl-smi\">License</span> as</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> published by the <span class=\"pl-smi\">Free</span> <span class=\"pl-smi\">Software</span> <span class=\"pl-smi\">Foundation</span>, either version <span class=\"pl-c1\">2</span> of the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">License</span>, or (at your option) any later version.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">This</span> program is distributed in the hope that it will be useful,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> but <span class=\"pl-c1\">WITHOUT</span> <span class=\"pl-c1\">ANY</span> <span class=\"pl-c1\">WARRANTY</span>; without even the implied warranty of</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">MERCHANTABILITY</span> or <span class=\"pl-c1\">FITNESS</span> <span class=\"pl-c1\">FOR</span> <span class=\"pl-smi\">A</span> <span class=\"pl-c1\">PARTICULAR</span> <span class=\"pl-c1\">PURPOSE</span>. <span class=\"pl-smi\">See</span> the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">GNU</span> <span class=\"pl-smi\">General</span> <span class=\"pl-smi\">Public</span> <span class=\"pl-smi\">License</span> <span class=\"pl-k\">for</span> more details.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">You</span> should have received a copy of the <span class=\"pl-c1\">GNU</span> <span class=\"pl-smi\">General</span> <span class=\"pl-smi\">Public</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">License</span> along with <span class=\"pl-c1\">this</span> program. <span class=\"pl-smi\">If</span> not, see</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>http<span class=\"pl-k\">:</span><span class=\"pl-c\"><span class=\"pl-c\">//</span>www.gnu.org/licenses/gpl-2.0.html&gt;.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> #<span class=\"pl-smi\">L</span><span class=\"pl-k\">%</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*/</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "metas-ts", "createdAt": "2020-07-23T16:17:01Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java", "diffHunk": "@@ -116,6 +44,102 @@\n import de.metas.util.Check;\n import de.metas.util.Services;\n import lombok.NonNull;\n+import org.adempiere.ad.dao.ICompositeQueryUpdater;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.AttributeSetInstanceId;\n+import org.adempiere.mm.attributes.api.ASICopy;\n+import org.adempiere.mm.attributes.api.AttributeConstants;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+import org.adempiere.mm.attributes.api.IAttributeSet;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceAware;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.model.PlainContextAware;\n+import org.adempiere.service.ClientId;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.util.lang.IAutoCloseable;\n+import org.adempiere.util.lang.NullAutoCloseable;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseDAO;\n+import org.compiere.model.I_C_BPartner;\n+import org.compiere.model.I_C_BPartner_Location;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_OrderLine;\n+import org.compiere.model.I_C_UOM;\n+import org.compiere.model.I_M_AttributeSetInstance;\n+import org.compiere.model.I_M_InOut;\n+import org.compiere.model.I_M_InOutLine;\n+import org.compiere.model.X_C_OrderLine;\n+import org.compiere.util.Env;\n+import org.compiere.util.TimeUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC.MDCCloseable;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.createOld;\n+import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n+import static org.adempiere.model.InterfaceWrapperHelper.save;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2015 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */", "originalCommit": "6f7df332b065b225090a502de716f4193955cadf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\nindex 6eb05cba78..8a67c47985 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n", "chunk": "@@ -97,27 +97,6 @@ import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n import static org.adempiere.model.InterfaceWrapperHelper.save;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n-/*\n- * #%L\n- * de.metas.swat.base\n- * %%\n- * Copyright (C) 2015 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n \n /*\n  * #%L\n", "next_change": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\nindex 8a67c47985..d6eb7b368c 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n", "chunk": "@@ -97,6 +96,27 @@ import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n import static org.adempiere.model.InterfaceWrapperHelper.save;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2015 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n \n /*\n  * #%L\n", "next_change": {"commit": "46145f0fb57d1d396997049317a242f897dbc224", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\nindex d6eb7b368c..9b8b53b5d0 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n", "chunk": "@@ -96,27 +96,6 @@ import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n import static org.adempiere.model.InterfaceWrapperHelper.save;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n-/*\n- * #%L\n- * de.metas.swat.base\n- * %%\n- * Copyright (C) 2015 metas GmbH\n- * %%\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as\n- * published by the Free Software Foundation, either version 2 of the\n- * License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public\n- * License along with this program. If not, see\n- * <http://www.gnu.org/licenses/gpl-2.0.html>.\n- * #L%\n- */\n \n /*\n  * #%L\n", "next_change": null}]}}]}}]}}, {"oid": "9d394f375964f7ca5d1a49e7cb53f78b0813326d", "url": "https://github.com/metasfresh/metasfresh/commit/9d394f375964f7ca5d1a49e7cb53f78b0813326d", "message": "- fixes and improvements\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-24T15:51:07Z", "type": "commit"}, {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "url": "https://github.com/metasfresh/metasfresh/commit/f4ed1ea62a1e4b285870c986d725682c09c9fe20", "message": "Update backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java\n\nCo-authored-by: Tobias Sch\u00f6neberg <metas-ts@users.noreply.github.com>", "committedDate": "2020-07-27T07:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzIzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460703237", "body": "use addInSubQueryFilter instead", "bodyText": "use addInSubQueryFilter instead", "bodyHTML": "<p dir=\"auto\">use addInSubQueryFilter instead</p>", "author": "teosarca", "createdAt": "2020-07-27T07:42:23Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java", "diffHunk": "@@ -1155,6 +1157,34 @@ public BPartnerLocationId retrieveBPartnerLocationId(@NonNull final BPartnerLoca\n \t\treturn createLocationIdOrNull(bpartnerId, ownToLocation);\n \t}\n \n+\tprivate void appendLocationChecks(@NonNull final BPartnerLocationQuery query, @NonNull final IQueryBuilder<I_C_BPartner_Location> bpLocationQueryBuilder)\n+\t{\n+\t\tfinal boolean skipLocationChecks = !query.applyLocationChecks();\n+\n+\t\tif (skipLocationChecks)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IQueryBuilder<I_C_Location> locationIQueryBuilder = queryBL.createQueryBuilder(I_C_Location.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_C_Location.COLUMNNAME_C_Country_ID, query.getCountryId());\n+\n+\t\tif (Check.isNotBlank(query.getCity()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_City, query.getCity());\n+\t\t}\n+\n+\t\tif (Check.isNotBlank(query.getPostalCode()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_Postal, query.getPostalCode());\n+\t\t}\n+\n+\t\tfinal List<Integer> ids = locationIQueryBuilder.create().listIds();\n+\n+\t\tbpLocationQueryBuilder.addInArrayFilter(I_C_BPartner_Location.COLUMNNAME_C_Location_ID, ids);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\nindex 27ce235d2a..353cc513c5 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java\n", "chunk": "@@ -1180,9 +1180,8 @@ public class BPartnerDAO implements IBPartnerDAO\n \t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_Postal, query.getPostalCode());\n \t\t}\n \n-\t\tfinal List<Integer> ids = locationIQueryBuilder.create().listIds();\n-\n-\t\tbpLocationQueryBuilder.addInArrayFilter(I_C_BPartner_Location.COLUMNNAME_C_Location_ID, ids);\n+\t\tbpLocationQueryBuilder.addInSubQueryFilter(I_C_BPartner_Location.COLUMN_C_Location_ID,\n+\t\t\t\tI_C_Location.COLUMN_C_Location_ID, locationIQueryBuilder.create());\n \t}\n \n \tprivate BPartnerLocationId createLocationIdOrNull(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNjE4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460706187", "body": "return JsonError. u can use JsonErrors utility class\r\n", "bodyText": "return JsonError. u can use JsonErrors utility class", "bodyHTML": "<p dir=\"auto\">return JsonError. u can use JsonErrors utility class</p>", "author": "teosarca", "createdAt": "2020-07-27T07:48:13Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\treturn ResponseEntity.badRequest().body(e.getMessage());", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\nindex 47534c28e7..8bc43ea26c 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n", "chunk": "@@ -67,7 +69,9 @@ public class ShipmentRestController\n \t\t}\n \t\tcatch (final Exception e)\n \t\t{\n-\t\t\treturn ResponseEntity.badRequest().body(e.getMessage());\n+\t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n+\t\t\treturn ResponseEntity.badRequest()\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n \t\t}\n \n \t\trequest.getCreateShipmentInfoList()\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\nindex 8bc43ea26c..f089ab8974 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n", "chunk": "@@ -65,38 +67,32 @@ public class ShipmentRestController\n \n \t\ttry\n \t\t{\n-\t\t\tshipmentService.validateRequest(request);\n+\t\t\tfinal InOutGenerateResult result = shipmentService.updateShipmentSchedulesAndGenerateShipments(request);\n+\n+\t\t\tfinal ImmutableList<JsonMetasfreshId> shipmentIds = extractShipmentIds(result);\n+\t\t\tfinal JsonCreateShipmentResponse jsonCreateShipmentResponse = JsonCreateShipmentResponse\n+\t\t\t\t\t.builder()\n+\t\t\t\t\t.createdShipmentIdList(shipmentIds)\n+\t\t\t\t\t.build();\n+\n+\t\t\tlog.debug(\"*** createShipments: Execution done! Created shipment ids: {}\", shipmentIds);\n+\n+\t\t\treturn ResponseEntity.ok(jsonCreateShipmentResponse);\n \t\t}\n-\t\tcatch (final Exception e)\n+\t\tcatch (final Exception ex)\n \t\t{\n \t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n \t\t\treturn ResponseEntity.badRequest()\n-\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(ex, adLanguage));\n \t\t}\n+\t}\n \n-\t\trequest.getCreateShipmentInfoList()\n-\t\t\t\t.stream()\n-\t\t\t\t.map(shipmentService::buildUpdateShipmentScheduleRequest)\n-\t\t\t\t.forEach(shipmentService::updateShipmentSchedule);\n-\n-\t\tfinal GenerateShipmentsRequest generateShipmentsRequest = shipmentService.buildGenerateShipmentsRequest(request);\n-\n-\t\tfinal InOutGenerateResult result = shipmentService.generateShipments(generateShipmentsRequest);\n-\n-\t\tfinal ImmutableList<JsonMetasfreshId> shipmentIds = result\n-\t\t\t\t.getInOuts()\n+\tprivate static ImmutableList<JsonMetasfreshId> extractShipmentIds(final InOutGenerateResult result)\n+\t{\n+\t\treturn result.getInOuts()\n \t\t\t\t.stream()\n \t\t\t\t.map(I_M_InOut::getM_InOut_ID)\n \t\t\t\t.map(JsonMetasfreshId::of)\n \t\t\t\t.collect(ImmutableList.toImmutableList());\n-\n-\t\tfinal JsonCreateShipmentResponse jsonCreateShipmentResponse = JsonCreateShipmentResponse\n-\t\t\t\t.builder()\n-\t\t\t\t.createdShipmentIdList(shipmentIds)\n-\t\t\t\t.build();\n-\n-\t\tlog.debug(\"*** createShipments: Execution done! Created shipment ids: {}\", shipmentIds);\n-\n-\t\treturn ResponseEntity.ok(jsonCreateShipmentResponse);\n \t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzMyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460707325", "body": "why not using with \"is\" ?\r\n", "bodyText": "why not using with \"is\" ?", "bodyHTML": "<p dir=\"auto\">why not using with \"is\" ?</p>", "author": "teosarca", "createdAt": "2020-07-27T07:50:21Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");\n+\t\t}\n+\n+\t\tthis.shipmentScheduleId = shipmentScheduleId;\n+\t\tthis.deliveryDate = deliveryDate;\n+\t\tthis.qtyToDeliver = qtyToDeliver;\n+\t\tthis.bPartnerLocation = bPartnerLocation;\n+\t\tthis.bPartnerCode = bPartnerCode;\n+\t\tthis.attributes = attributes;\n+\t\tthis.deliveryRuleCode = deliveryRuleCode;\n+\t}\n+\n+\tpublic boolean emptyRequest()", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nindex 300bea26dd..a250666296 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n", "chunk": "@@ -82,7 +82,7 @@ public class UpdateShipmentScheduleRequest\n \t\tthis.deliveryRuleCode = deliveryRuleCode;\n \t}\n \n-\tpublic boolean emptyRequest()\n+\tpublic boolean isEmptyRequest()\n \t{\n \t\treturn deliveryDate == null\n \t\t\t\t&& qtyToDeliver == null\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\nsimilarity index 70%\nrename from backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nrename to backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\nindex a250666296..5431e4a896 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\n", "chunk": "@@ -54,41 +57,42 @@ public class UpdateShipmentScheduleRequest\n \tString bPartnerCode;\n \n \t@Nullable\n-\tList<JsonAttributeInstance> attributes;\n+\tList<CreateAttributeInstanceReq> attributes;\n \n \t@Nullable\n-\tString deliveryRuleCode;\n+\tDeliveryRule deliveryRule;\n \n \t@Builder\n-\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\tpublic UpdateShipmentScheduleRequest(\n+\t\t\t@NonNull final ShipmentScheduleId shipmentScheduleId,\n \t\t\t@Nullable final ZonedDateTime deliveryDate,\n-\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final BigDecimal qtyToDeliverInStockingUOM,\n \t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n \t\t\t@Nullable final String bPartnerCode,\n-\t\t\t@Nullable final String deliveryRuleCode,\n-\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t\t\t@Nullable final DeliveryRule deliveryRule,\n+\t\t\t@Nullable final List<CreateAttributeInstanceReq> attributes)\n \t{\n \t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n \t\t{\n \t\t\tthrow new AdempiereException(\"Invalid request! The bPartenr cannot be changed without changing the location!\");\n \t\t}\n \n+\t\tif (deliveryDate == null\n+\t\t\t\t&& qtyToDeliverInStockingUOM == null\n+\t\t\t\t&& bPartnerLocation == null\n+\t\t\t\t&& Check.isBlank(bPartnerCode)\n+\t\t\t\t&& Check.isEmpty(attributes)\n+\t\t\t\t&& deliveryRule == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Empty request\");\n+\t\t}\n+\n \t\tthis.shipmentScheduleId = shipmentScheduleId;\n \t\tthis.deliveryDate = deliveryDate;\n-\t\tthis.qtyToDeliver = qtyToDeliver;\n+\t\tthis.qtyToDeliverInStockingUOM = qtyToDeliverInStockingUOM;\n \t\tthis.bPartnerLocation = bPartnerLocation;\n \t\tthis.bPartnerCode = bPartnerCode;\n \t\tthis.attributes = attributes;\n-\t\tthis.deliveryRuleCode = deliveryRuleCode;\n-\t}\n-\n-\tpublic boolean isEmptyRequest()\n-\t{\n-\t\treturn deliveryDate == null\n-\t\t\t\t&& qtyToDeliver == null\n-\t\t\t\t&& bPartnerLocation == null\n-\t\t\t\t&& Check.isBlank(bPartnerCode)\n-\t\t\t\t&& Check.isEmpty(attributes)\n-\t\t\t\t&& Check.isBlank(deliveryRuleCode);\n+\t\tthis.deliveryRule = deliveryRule;\n \t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODEzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708132", "body": "Please improve the error message. e.g. \"When bPartnerLocation shall be set when bpartnerCode is set\".\r\n", "bodyText": "Please improve the error message. e.g. \"When bPartnerLocation shall be set when bpartnerCode is set\".", "bodyHTML": "<p dir=\"auto\">Please improve the error message. e.g. \"When bPartnerLocation shall be set when bpartnerCode is set\".</p>", "author": "teosarca", "createdAt": "2020-07-27T07:51:51Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nindex 300bea26dd..a250666296 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n", "chunk": "@@ -70,7 +70,7 @@ public class UpdateShipmentScheduleRequest\n \t{\n \t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n \t\t{\n-\t\t\tthrow new AdempiereException(\"Invalid request!\");\n+\t\t\tthrow new AdempiereException(\"Invalid request! The bPartenr cannot be changed without changing the location!\");\n \t\t}\n \n \t\tthis.shipmentScheduleId = shipmentScheduleId;\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\nsimilarity index 70%\nrename from backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\nrename to backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\nindex a250666296..5431e4a896 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/UpdateShipmentScheduleRequest.java\n", "chunk": "@@ -54,41 +57,42 @@ public class UpdateShipmentScheduleRequest\n \tString bPartnerCode;\n \n \t@Nullable\n-\tList<JsonAttributeInstance> attributes;\n+\tList<CreateAttributeInstanceReq> attributes;\n \n \t@Nullable\n-\tString deliveryRuleCode;\n+\tDeliveryRule deliveryRule;\n \n \t@Builder\n-\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\tpublic UpdateShipmentScheduleRequest(\n+\t\t\t@NonNull final ShipmentScheduleId shipmentScheduleId,\n \t\t\t@Nullable final ZonedDateTime deliveryDate,\n-\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final BigDecimal qtyToDeliverInStockingUOM,\n \t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n \t\t\t@Nullable final String bPartnerCode,\n-\t\t\t@Nullable final String deliveryRuleCode,\n-\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t\t\t@Nullable final DeliveryRule deliveryRule,\n+\t\t\t@Nullable final List<CreateAttributeInstanceReq> attributes)\n \t{\n \t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n \t\t{\n \t\t\tthrow new AdempiereException(\"Invalid request! The bPartenr cannot be changed without changing the location!\");\n \t\t}\n \n+\t\tif (deliveryDate == null\n+\t\t\t\t&& qtyToDeliverInStockingUOM == null\n+\t\t\t\t&& bPartnerLocation == null\n+\t\t\t\t&& Check.isBlank(bPartnerCode)\n+\t\t\t\t&& Check.isEmpty(attributes)\n+\t\t\t\t&& deliveryRule == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Empty request\");\n+\t\t}\n+\n \t\tthis.shipmentScheduleId = shipmentScheduleId;\n \t\tthis.deliveryDate = deliveryDate;\n-\t\tthis.qtyToDeliver = qtyToDeliver;\n+\t\tthis.qtyToDeliverInStockingUOM = qtyToDeliverInStockingUOM;\n \t\tthis.bPartnerLocation = bPartnerLocation;\n \t\tthis.bPartnerCode = bPartnerCode;\n \t\tthis.attributes = attributes;\n-\t\tthis.deliveryRuleCode = deliveryRuleCode;\n-\t}\n-\n-\tpublic boolean isEmptyRequest()\n-\t{\n-\t\treturn deliveryDate == null\n-\t\t\t\t&& qtyToDeliver == null\n-\t\t\t\t&& bPartnerLocation == null\n-\t\t\t\t&& Check.isBlank(bPartnerCode)\n-\t\t\t\t&& Check.isEmpty(attributes)\n-\t\t\t\t&& Check.isBlank(deliveryRuleCode);\n+\t\tthis.deliveryRule = deliveryRule;\n \t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODY2Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708662", "body": "consider using Optional instead of returning `null`.\r\n", "bodyText": "consider using Optional instead of returning null.", "bodyHTML": "<p dir=\"auto\">consider using Optional instead of returning <code>null</code>.</p>", "author": "teosarca", "createdAt": "2020-07-27T07:52:48Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import com.google.common.base.Joiner;\n+import de.metas.common.shipment.JsonLocation;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Value\n+@Builder\n+public class LocationBasicInfo\n+{\n+\t@NonNull\n+\tString countryCode;\n+\n+\t@NonNull\n+\tString city;\n+\n+\t@NonNull\n+\tString postalCode;\n+\n+\t@Nullable\n+\tString streetAndNumber;\n+\n+\t@Nullable\n+\tpublic static LocationBasicInfo of(@NonNull final JsonLocation location)", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\nindex 59f613c608..08dead46bb 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\n", "chunk": "@@ -50,14 +51,14 @@ public class LocationBasicInfo\n \t@Nullable\n \tString streetAndNumber;\n \n-\t@Nullable\n-\tpublic static LocationBasicInfo of(@NonNull final JsonLocation location)\n+\t@NonNull\n+\tpublic static Optional<LocationBasicInfo> of(@NonNull final JsonLocation location)\n \t{\n \t\tif (Check.isBlank(location.getCountryCode())\n \t\t\t\t|| Check.isBlank(location.getCity())\n \t\t        || Check.isBlank(location.getZipCode()))\n \t\t{\n-\t\t\treturn null;\n+\t\t\treturn Optional.empty();\n \t\t}\n \n \t\tfinal List<String> streetAndHouseNoParts = Stream.of(location.getStreet(), location.getHouseNo())\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/LocationBasicInfo.java\nsimilarity index 72%\nrename from backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\nrename to backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/LocationBasicInfo.java\nindex 08dead46bb..b489e32b50 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/LocationBasicInfo.java\n", "chunk": "@@ -52,11 +56,21 @@ public class LocationBasicInfo\n \tString streetAndNumber;\n \n \t@NonNull\n-\tpublic static Optional<LocationBasicInfo> of(@NonNull final JsonLocation location)\n+\tpublic static Optional<LocationBasicInfo> ofNullable(\n+\t\t\t@Nullable final JsonLocation location,\n+\t\t\t@NonNull final ICountryCodeFactory countryCodeFactory)\n+\t{\n+\t\treturn location != null ? of(location, countryCodeFactory) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tpublic static Optional<LocationBasicInfo> of(\n+\t\t\t@NonNull final JsonLocation location,\n+\t\t\t@NonNull final ICountryCodeFactory countryCodeFactory)\n \t{\n \t\tif (Check.isBlank(location.getCountryCode())\n \t\t\t\t|| Check.isBlank(location.getCity())\n-\t\t        || Check.isBlank(location.getZipCode()))\n+\t\t\t\t|| Check.isBlank(location.getZipCode()))\n \t\t{\n \t\t\treturn Optional.empty();\n \t\t}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460710817", "body": "why not ZonedDateTime?\r\n", "bodyText": "why not ZonedDateTime?", "bodyHTML": "<p dir=\"auto\">why not ZonedDateTime?</p>", "author": "teosarca", "createdAt": "2020-07-27T07:56:56Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.InOutId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class AddTrackingCodesForInOutWithoutHUReq\n+{\n+\t@NonNull\n+\tInOutId inOutId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4OTgzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460889837", "bodyText": "mainly bc there is no timezone info coming from Siro, but I guess I could manually set Europe/Berlin as zone id when reading the date from the Siro xmls, in order to have ZonedDateTime in our api.", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\nindex b5598c2281..68763d90f7 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java\n", "chunk": "@@ -42,7 +42,7 @@ public class AddTrackingCodesForInOutWithoutHUReq\n \tShipperId shipperId;\n \n \t@NonNull\n-\tLocalDateTime shipDate;\n+\tZonedDateTime shipDate;\n \n \t@NonNull\n \tList<String> trackingCodes;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTE3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711179", "body": "consider using the builder()", "bodyText": "consider using the builder()", "bodyHTML": "<p dir=\"auto\">consider using the builder()</p>", "author": "teosarca", "createdAt": "2020-07-27T07:57:38Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.model.I_M_InOut;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class CreatePackagesForInOutRequest\n+{\n+\t@NonNull\n+\tI_M_InOut inOut;\n+\n+\tboolean processed;\n+\n+\t@Nullable\n+\tList<String> trackingNumbers;\n+\n+\tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n+\t{\n+\t\treturn new CreatePackagesForInOutRequest(inOut, false, null);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\nindex 6831c830fb..6e2cfc4427 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n", "chunk": "@@ -44,6 +44,10 @@ public class CreatePackagesForInOutRequest\n \n \tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n \t{\n-\t\treturn new CreatePackagesForInOutRequest(inOut, false, null);\n+\t\treturn CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.processed(false)\n+\t\t\t\t.trackingNumbers(null)\n+\t\t\t\t.inOut(inOut)\n+\t\t\t\t.build();\n \t}\n }\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\nindex 6e2cfc4427..44368d5744 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java\n", "chunk": "@@ -22,32 +22,53 @@\n \n package de.metas.handlingunits.impl;\n \n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import de.metas.inout.InOutId;\n import de.metas.inout.model.I_M_InOut;\n+import de.metas.shipping.model.ShipperTransportationId;\n+import lombok.AccessLevel;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.NonNull;\n import lombok.Value;\n \n-import javax.annotation.Nullable;\n-import java.util.List;\n-\n @Value\n @Builder\n public class CreatePackagesForInOutRequest\n {\n \t@NonNull\n-\tI_M_InOut inOut;\n+\t@Getter(AccessLevel.NONE)\n+\tI_M_InOut shipment;\n \n \tboolean processed;\n \n \t@Nullable\n \tList<String> trackingNumbers;\n \n-\tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n+\tpublic static CreatePackagesForInOutRequest ofShipment(@NonNull final I_M_InOut shipment)\n \t{\n \t\treturn CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.shipment(shipment)\n \t\t\t\t.processed(false)\n \t\t\t\t.trackingNumbers(null)\n-\t\t\t\t.inOut(inOut)\n \t\t\t\t.build();\n \t}\n+\n+\tpublic InOutId getShipmentId()\n+\t{\n+\t\treturn InOutId.ofRepoId(shipment.getM_InOut_ID());\n+\t}\n+\n+\tpublic ShipperTransportationId getShipperTransportationId()\n+\t{\n+\t\treturn ShipperTransportationId.ofRepoIdOrNull(shipment.getM_ShipperTransportation_ID());\n+\t}\n+\n+\tpublic void setShipperTransportationId(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\tshipment.setM_ShipperTransportation_ID(shipperTransportationId.getRepoId());\n+\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711426", "body": "why not ZonedDateTime?\r\n", "bodyText": "why not ZonedDateTime?", "bodyHTML": "<p dir=\"auto\">why not ZonedDateTime?</p>", "author": "teosarca", "createdAt": "2020-07-27T07:58:06Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MDg4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460890886", "bodyText": "same as above, will update", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n", "chunk": "@@ -42,8 +42,8 @@ public class CreateShipperTransportationRequest\n \tShipperId shipperId;\n \n \t@NonNull\n-\tBPartnerLocationId bPartnerLocationId;\n+\tBPartnerLocationId shipperBPartnerAndLocationId;\n \n \t@NonNull\n-\tLocalDateTime shipDate;\n+\tZonedDateTime shipDate;\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzQ4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713480", "body": "better call it `warehouseBPLocationId`", "bodyText": "better call it warehouseBPLocationId", "bodyHTML": "<p dir=\"auto\">better call it <code>warehouseBPLocationId</code></p>", "author": "teosarca", "createdAt": "2020-07-27T08:02:02Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 4d66c08e0b..4e01b3ad57 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -354,34 +358,37 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \t@NonNull\n \tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n \t{\n-\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n-\n-\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n-\n-\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n-\n-\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal I_M_InOut shipment = inOutDAO.getById(req.getInOutId());\n \n-\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n+\t\tfinal BPartnerLocationInfo shipFromBPLocation = getShipFromBPartnerAndLocation(shipment);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n-\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipperBPartnerAndLocationId(shipFromBPLocation.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(shipment.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n \t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n-\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.shipment(InterfaceWrapperHelper.create(shipment, de.metas.inout.model.I_M_InOut.class))\n \t\t\t\t.trackingNumbers(req.getTrackingCodes())\n-\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.processed(true)// mark the M_Package records as processed\n \t\t\t\t.build();\n \n \t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n \n \t\treturn shipperTransportationId;\n \t}\n+\n+\tprivate BPartnerLocationInfo getShipFromBPartnerAndLocation(final I_M_InOut shipment)\n+\t{\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(shipment.getM_Warehouse_ID());\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\t\tfinal BPartnerLocationId warehouseBPLocationId = BPartnerLocationId.ofRepoId(warehouse.getC_BPartner_ID(), warehouse.getC_BPartner_Location_ID());\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getByBPartnerLocationId(warehouseBPLocationId);\n+\t\treturn warehouseBPLocationInfo;\n+\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzYyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713628", "body": "better call it `warehouseBPLocationInfo`", "bodyText": "better call it warehouseBPLocationInfo", "bodyHTML": "<p dir=\"auto\">better call it <code>warehouseBPLocationInfo</code></p>", "author": "teosarca", "createdAt": "2020-07-27T08:02:18Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -362,19 +360,19 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n \n-\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n \n-\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n \t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n-\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n \t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 4d66c08e0b..4e01b3ad57 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -354,34 +358,37 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \t@NonNull\n \tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n \t{\n-\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n-\n-\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n-\n-\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n-\n-\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal I_M_InOut shipment = inOutDAO.getById(req.getInOutId());\n \n-\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n+\t\tfinal BPartnerLocationInfo shipFromBPLocation = getShipFromBPartnerAndLocation(shipment);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n-\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipperBPartnerAndLocationId(shipFromBPLocation.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(shipment.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n \t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n-\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.shipment(InterfaceWrapperHelper.create(shipment, de.metas.inout.model.I_M_InOut.class))\n \t\t\t\t.trackingNumbers(req.getTrackingCodes())\n-\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.processed(true)// mark the M_Package records as processed\n \t\t\t\t.build();\n \n \t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n \n \t\treturn shipperTransportationId;\n \t}\n+\n+\tprivate BPartnerLocationInfo getShipFromBPartnerAndLocation(final I_M_InOut shipment)\n+\t{\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(shipment.getM_Warehouse_ID());\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\t\tfinal BPartnerLocationId warehouseBPLocationId = BPartnerLocationId.ofRepoId(warehouse.getC_BPartner_ID(), warehouse.getC_BPartner_Location_ID());\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getByBPartnerLocationId(warehouseBPLocationId);\n+\t\treturn warehouseBPLocationInfo;\n+\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714402", "body": "introduce and use IShipperTransportationDAO.save(I_M_ShipperTransportation)", "bodyText": "introduce and use IShipperTransportationDAO.save(I_M_ShipperTransportation)", "bodyHTML": "<p dir=\"auto\">introduce and use IShipperTransportationDAO.save(I_M_ShipperTransportation)</p>", "author": "teosarca", "createdAt": "2020-07-27T08:03:47Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n+\n+\t\tsaveRecord(shipperTransportation);", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NDA4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460894082", "bodyText": "why not ShipperTransportationRepository spring component?", "author": "pvpurcarcosmin", "createdAt": "2020-07-27T13:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODA4OA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460898088", "bodyText": "even better :)", "author": "teosarca", "createdAt": "2020-07-27T13:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -386,19 +384,4 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\treturn shipperTransportationId;\n \t}\n-\n-\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n-\t{\n-\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n-\n-\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n-\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n-\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n-\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n-\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n-\n-\t\tsaveRecord(shipperTransportation);\n-\n-\t\treturn ShipperTransportationId.ofRepoId(shipperTransportation.getM_ShipperTransportation_ID());\n-\t}\n }\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 4d66c08e0b..4e01b3ad57 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -354,34 +358,37 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \t@NonNull\n \tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n \t{\n-\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n-\n-\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n-\n-\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n-\n-\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal I_M_InOut shipment = inOutDAO.getById(req.getInOutId());\n \n-\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n+\t\tfinal BPartnerLocationInfo shipFromBPLocation = getShipFromBPartnerAndLocation(shipment);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n-\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipperBPartnerAndLocationId(shipFromBPLocation.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(shipment.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n \t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n-\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.shipment(InterfaceWrapperHelper.create(shipment, de.metas.inout.model.I_M_InOut.class))\n \t\t\t\t.trackingNumbers(req.getTrackingCodes())\n-\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.processed(true)// mark the M_Package records as processed\n \t\t\t\t.build();\n \n \t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n \n \t\treturn shipperTransportationId;\n \t}\n+\n+\tprivate BPartnerLocationInfo getShipFromBPartnerAndLocation(final I_M_InOut shipment)\n+\t{\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(shipment.getM_Warehouse_ID());\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\t\tfinal BPartnerLocationId warehouseBPLocationId = BPartnerLocationId.ofRepoId(warehouse.getC_BPartner_ID(), warehouse.getC_BPartner_Location_ID());\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getByBPartnerLocationId(warehouseBPLocationId);\n+\t\treturn warehouseBPLocationInfo;\n+\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDY0MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714641", "body": "use `TimeUtil`", "bodyText": "use TimeUtil", "bodyHTML": "<p dir=\"auto\">use <code>TimeUtil</code></p>", "author": "teosarca", "createdAt": "2020-07-27T08:04:16Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 1120ba4a5a..4d66c08e0b 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -386,19 +384,4 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \n \t\treturn shipperTransportationId;\n \t}\n-\n-\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n-\t{\n-\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n-\n-\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n-\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n-\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n-\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n-\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n-\n-\t\tsaveRecord(shipperTransportation);\n-\n-\t\treturn ShipperTransportationId.ofRepoId(shipperTransportation.getM_ShipperTransportation_ID());\n-\t}\n }\n", "next_change": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\nindex 4d66c08e0b..4e01b3ad57 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java\n", "chunk": "@@ -354,34 +358,37 @@ public class HUShipperTransportationBL implements IHUShipperTransportationBL\n \t@NonNull\n \tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n \t{\n-\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n-\n-\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n-\n-\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n-\n-\t\tfinal int warehouseBPLocationId = warehouse.getC_BPartner_Location_ID();\n+\t\tfinal I_M_InOut shipment = inOutDAO.getById(req.getInOutId());\n \n-\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getById(warehouseBPLocationId);\n+\t\tfinal BPartnerLocationInfo shipFromBPLocation = getShipFromBPartnerAndLocation(shipment);\n \n \t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n \t\t\t\t.builder()\n \t\t\t\t.shipperId(req.getShipperId())\n-\t\t\t\t.shipperBPartnerAndLocationId(warehouseBPLocationInfo.getId())\n-\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipperBPartnerAndLocationId(shipFromBPLocation.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(shipment.getAD_Org_ID()))\n \t\t\t\t.shipDate(req.getShipDate())\n \t\t\t\t.build();\n \n \t\tfinal ShipperTransportationId shipperTransportationId = shipperTransportationRepository.create(createShipperTransportationRequest);\n \n \t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n-\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.shipment(InterfaceWrapperHelper.create(shipment, de.metas.inout.model.I_M_InOut.class))\n \t\t\t\t.trackingNumbers(req.getTrackingCodes())\n-\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.processed(true)// mark the M_Package records as processed\n \t\t\t\t.build();\n \n \t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n \n \t\treturn shipperTransportationId;\n \t}\n+\n+\tprivate BPartnerLocationInfo getShipFromBPartnerAndLocation(final I_M_InOut shipment)\n+\t{\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(shipment.getM_Warehouse_ID());\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\t\tfinal BPartnerLocationId warehouseBPLocationId = BPartnerLocationId.ofRepoId(warehouse.getC_BPartner_ID(), warehouse.getC_BPartner_Location_ID());\n+\t\tfinal BPartnerLocationInfo warehouseBPLocationInfo = bPartnerLocationInfoRepository.getByBPartnerLocationId(warehouseBPLocationId);\n+\t\treturn warehouseBPLocationInfo;\n+\t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTAyOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715029", "body": "better call it shipperBPartnerAndLocationId", "bodyText": "better call it shipperBPartnerAndLocationId", "bodyHTML": "<p dir=\"auto\">better call it shipperBPartnerAndLocationId</p>", "author": "teosarca", "createdAt": "2020-07-27T08:05:02Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n", "chunk": "@@ -42,8 +42,8 @@ public class CreateShipperTransportationRequest\n \tShipperId shipperId;\n \n \t@NonNull\n-\tBPartnerLocationId bPartnerLocationId;\n+\tBPartnerLocationId shipperBPartnerAndLocationId;\n \n \t@NonNull\n-\tLocalDateTime shipDate;\n+\tZonedDateTime shipDate;\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTM3Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715377", "body": "consider changing to package level access", "bodyText": "consider changing to package level access", "bodyHTML": "<p dir=\"auto\">consider changing to package level access</p>", "author": "teosarca", "createdAt": "2020-07-27T08:05:41Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\nindex 3f065f2bd6..2efc7dc0d9 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java\n", "chunk": "@@ -29,11 +29,11 @@ import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n \n-import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n \n @Value\n @Builder\n-public class CreateShipperTransportationRequest\n+class CreateShipperTransportationRequest\n {\n \t@NonNull\n \tOrgId orgId;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNzMzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460717330", "body": "why not ZonedDateTime?\r\n", "bodyText": "why not ZonedDateTime?", "bodyHTML": "<p dir=\"auto\">why not ZonedDateTime?</p>", "author": "teosarca", "createdAt": "2020-07-27T08:09:44Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.inoutcandidate.api;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.order.DeliveryRule;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class ApplyShipmentScheduleChangesRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tBPartnerLocationId bPartnerLocationIdOverride;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliverStockingUOM;\n+\n+\t@Nullable\n+\tList<CreateAttributeInstanceReq> attributes;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;", "originalCommit": "f4ed1ea62a1e4b285870c986d725682c09c9fe20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\nindex 4e568d290b..11b8c54464 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java\n", "chunk": "@@ -53,7 +53,7 @@ public class ApplyShipmentScheduleChangesRequest\n \tList<CreateAttributeInstanceReq> attributes;\n \n \t@Nullable\n-\tLocalDateTime deliveryDate;\n+\tZonedDateTime deliveryDate;\n \n \t@Nullable\n \tDeliveryRule deliveryRule;\n", "next_change": null}]}}, {"oid": "9c56f44fef5b4fc89497786e31fb3ccb214592f7", "url": "https://github.com/metasfresh/metasfresh/commit/9c56f44fef5b4fc89497786e31fb3ccb214592f7", "message": "requested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-27T14:23:25Z", "type": "commit"}, {"oid": "46145f0fb57d1d396997049317a242f897dbc224", "url": "https://github.com/metasfresh/metasfresh/commit/46145f0fb57d1d396997049317a242f897dbc224", "message": "Merge remote-tracking branch 'origin/gh7052' into gh7052", "committedDate": "2020-07-27T14:25:47Z", "type": "commit"}, {"oid": "49fdde20bb0772ea706aa897324d92d58914431f", "url": "https://github.com/metasfresh/metasfresh/commit/49fdde20bb0772ea706aa897324d92d58914431f", "message": "QA", "committedDate": "2020-07-28T11:32:03Z", "type": "commit"}, {"oid": "282a86270d54f94ec89145ae226b803592203fbf", "url": "https://github.com/metasfresh/metasfresh/commit/282a86270d54f94ec89145ae226b803592203fbf", "message": "fix compile error", "committedDate": "2020-07-29T05:58:08Z", "type": "commit"}, {"oid": "7c45fc7f2f48fcf2748aa17fe016f3daf939b144", "url": "https://github.com/metasfresh/metasfresh/commit/7c45fc7f2f48fcf2748aa17fe016f3daf939b144", "message": "small fixes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T09:31:37Z", "type": "commit"}, {"oid": "4e28c8291e3d2a74daf8da5a5e4b4496224e6af2", "url": "https://github.com/metasfresh/metasfresh/commit/4e28c8291e3d2a74daf8da5a5e4b4496224e6af2", "message": "small fixes 2\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T11:05:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjEzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366130", "body": "IMHO this method is not needed.\r\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "bodyHTML": "<p dir=\"auto\">IMHO this method is not needed.<br>\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.</p>", "author": "teosarca", "createdAt": "2020-07-28T07:12:11Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.shipping.model.I_M_ShipperTransportation;\n+import de.metas.shipping.model.ShipperTransportationId;\n+import lombok.NonNull;\n+import org.compiere.Adempiere;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.newInstance;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+@Repository\n+public class ShipperTransportationRepository\n+{\n+\tpublic static ShipperTransportationRepository get()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f2f565da7485115872f1142da3a0979f036c46f", "changed_code": [{"header": "diff --git a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\nindex adbccd3e15..77b010b220 100644\n--- a/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\n+++ b/backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java\n", "chunk": "@@ -36,15 +34,6 @@ import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n @Repository\n public class ShipperTransportationRepository\n {\n-\tpublic static ShipperTransportationRepository get()\n-\t{\n-\t\tif (Adempiere.isUnitTestMode())\n-\t\t{\n-\t\t\treturn new ShipperTransportationRepository();\n-\t\t}\n-\t\treturn SpringContextHolder.instance.getBean(ShipperTransportationRepository.class);\n-\t}\n-\n \tpublic ShipperTransportationId create(@NonNull final CreateShipperTransportationRequest request)\n \t{\n \t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjI2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366261", "body": "IMHO this method is not needed.\r\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "bodyHTML": "<p dir=\"auto\">IMHO this method is not needed.<br>\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.</p>", "author": "teosarca", "createdAt": "2020-07-28T07:12:30Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java", "diffHunk": "@@ -35,6 +36,15 @@\n @Repository\n public class BPartnerLocationInfoRepository\n {\n+\tpublic static BPartnerLocationInfoRepository get()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\nindex c6cfd8b58d..040312f0a1 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java\n", "chunk": "@@ -36,18 +34,16 @@ import static org.adempiere.model.InterfaceWrapperHelper.load;\n @Repository\n public class BPartnerLocationInfoRepository\n {\n-\tpublic static BPartnerLocationInfoRepository get()\n+\tprivate final IBPartnerDAO bpartnerDAO = Services.get(IBPartnerDAO.class);\n+\n+\tpublic BPartnerLocationInfo getByBPartnerLocationId(@NonNull final BPartnerLocationId bplocationId)\n \t{\n-\t\tif (Adempiere.isUnitTestMode())\n-\t\t{\n-\t\t\treturn new BPartnerLocationInfoRepository();\n-\t\t}\n-\t\treturn SpringContextHolder.instance.getBean(BPartnerLocationInfoRepository.class);\n+\t\tfinal I_C_BPartner_Location bpLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(bplocationId);\n+\t\treturn toBPartnerLocation(bpLocation);\n \t}\n \n-\tprivate BPartnerLocationInfo toBPartnerLocation(@NonNull final I_C_BPartner_Location bpartnerLocationRecord)\n+\tprivate static BPartnerLocationInfo toBPartnerLocation(@NonNull final I_C_BPartner_Location bpartnerLocationRecord)\n \t{\n-\n \t\treturn BPartnerLocationInfo.builder()\n \t\t\t\t.id(BPartnerLocationId.ofRepoId(BPartnerId.ofRepoId(bpartnerLocationRecord.getC_BPartner_ID()), bpartnerLocationRecord.getC_BPartner_Location_ID()))\n \t\t\t\t.bpartnerId(BPartnerId.ofRepoId(bpartnerLocationRecord.getC_BPartner_ID()))\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461368640", "body": "why not wrapping the whole thing in a try/catch block?", "bodyText": "why not wrapping the whole thing in a try/catch block?", "bodyHTML": "<p dir=\"auto\">why not wrapping the whole thing in a try/catch block?</p>", "author": "teosarca", "createdAt": "2020-07-28T07:17:10Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.rest_api.utils.JsonErrors;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n+\t\t\treturn ResponseEntity.badRequest()\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t}\n+\n+\t\trequest.getCreateShipmentInfoList()", "originalCommit": "46145f0fb57d1d396997049317a242f897dbc224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3ODkwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r462278906", "bodyText": "initially I had some logic for that, but after the latest changes it doesn't make sense anymore.", "author": "pvpurcarcosmin", "createdAt": "2020-07-29T13:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "49fdde20bb0772ea706aa897324d92d58914431f", "changed_code": [{"header": "diff --git a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\nindex 8bc43ea26c..f089ab8974 100644\n--- a/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n+++ b/backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java\n", "chunk": "@@ -65,38 +67,32 @@ public class ShipmentRestController\n \n \t\ttry\n \t\t{\n-\t\t\tshipmentService.validateRequest(request);\n+\t\t\tfinal InOutGenerateResult result = shipmentService.updateShipmentSchedulesAndGenerateShipments(request);\n+\n+\t\t\tfinal ImmutableList<JsonMetasfreshId> shipmentIds = extractShipmentIds(result);\n+\t\t\tfinal JsonCreateShipmentResponse jsonCreateShipmentResponse = JsonCreateShipmentResponse\n+\t\t\t\t\t.builder()\n+\t\t\t\t\t.createdShipmentIdList(shipmentIds)\n+\t\t\t\t\t.build();\n+\n+\t\t\tlog.debug(\"*** createShipments: Execution done! Created shipment ids: {}\", shipmentIds);\n+\n+\t\t\treturn ResponseEntity.ok(jsonCreateShipmentResponse);\n \t\t}\n-\t\tcatch (final Exception e)\n+\t\tcatch (final Exception ex)\n \t\t{\n \t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n \t\t\treturn ResponseEntity.badRequest()\n-\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(ex, adLanguage));\n \t\t}\n+\t}\n \n-\t\trequest.getCreateShipmentInfoList()\n-\t\t\t\t.stream()\n-\t\t\t\t.map(shipmentService::buildUpdateShipmentScheduleRequest)\n-\t\t\t\t.forEach(shipmentService::updateShipmentSchedule);\n-\n-\t\tfinal GenerateShipmentsRequest generateShipmentsRequest = shipmentService.buildGenerateShipmentsRequest(request);\n-\n-\t\tfinal InOutGenerateResult result = shipmentService.generateShipments(generateShipmentsRequest);\n-\n-\t\tfinal ImmutableList<JsonMetasfreshId> shipmentIds = result\n-\t\t\t\t.getInOuts()\n+\tprivate static ImmutableList<JsonMetasfreshId> extractShipmentIds(final InOutGenerateResult result)\n+\t{\n+\t\treturn result.getInOuts()\n \t\t\t\t.stream()\n \t\t\t\t.map(I_M_InOut::getM_InOut_ID)\n \t\t\t\t.map(JsonMetasfreshId::of)\n \t\t\t\t.collect(ImmutableList.toImmutableList());\n-\n-\t\tfinal JsonCreateShipmentResponse jsonCreateShipmentResponse = JsonCreateShipmentResponse\n-\t\t\t\t.builder()\n-\t\t\t\t.createdShipmentIdList(shipmentIds)\n-\t\t\t\t.build();\n-\n-\t\tlog.debug(\"*** createShipments: Execution done! Created shipment ids: {}\", shipmentIds);\n-\n-\t\treturn ResponseEntity.ok(jsonCreateShipmentResponse);\n \t}\n }\n", "next_change": null}]}}, {"oid": "9f2f565da7485115872f1142da3a0979f036c46f", "url": "https://github.com/metasfresh/metasfresh/commit/9f2f565da7485115872f1142da3a0979f036c46f", "message": "requested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T13:20:01Z", "type": "commit"}, {"oid": "508e816f856da122391b2dd8490fc8ce489be402", "url": "https://github.com/metasfresh/metasfresh/commit/508e816f856da122391b2dd8490fc8ce489be402", "message": "small fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T14:15:16Z", "type": "commit"}, {"oid": "4182393b619c66a7b2553f6c953a3c4c8dc04057", "url": "https://github.com/metasfresh/metasfresh/commit/4182393b619c66a7b2553f6c953a3c4c8dc04057", "message": "unit test fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7052", "committedDate": "2020-07-29T22:20:25Z", "type": "commit"}]}