{"pr_number": 10217, "pr_title": "Gh10197 2", "pr_author": "dragospodariu96", "pr_createdAt": "2020-11-11T17:16:00Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10217", "merge_commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "timeline": [{"oid": "dada0fe3da8e94c90a3cbb609f752a23404466e0", "url": "https://github.com/metasfresh/metasfresh/commit/dada0fe3da8e94c90a3cbb609f752a23404466e0", "message": "#10197\n - Initial commit", "committedDate": "2020-11-11T17:14:46Z", "type": "commit"}, {"oid": "6443ed249b8ef6c5e35aa3f2c6556f340783816b", "url": "https://github.com/metasfresh/metasfresh/commit/6443ed249b8ef6c5e35aa3f2c6556f340783816b", "message": "#10197\n - Fix test", "committedDate": "2020-11-12T07:58:44Z", "type": "commit"}, {"oid": "b288e8f5c26ee621ad7f20b994681bb2b134e210", "url": "https://github.com/metasfresh/metasfresh/commit/b288e8f5c26ee621ad7f20b994681bb2b134e210", "message": "#10197\n - Final Modifications.", "committedDate": "2020-11-12T16:32:25Z", "type": "commit"}, {"oid": "b07e6096e52ca0598af562d772bfde6a87deed08", "url": "https://github.com/metasfresh/metasfresh/commit/b07e6096e52ca0598af562d772bfde6a87deed08", "message": "#10197\n - Adjusted SqlForFetchingLookupById to take into consideration validation rules.", "committedDate": "2020-11-13T13:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MzEwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526783102", "body": "avoid manually changing the generated classes", "bodyText": "avoid manually changing the generated classes", "bodyHTML": "<p dir=\"auto\">avoid manually changing the generated classes</p>", "author": "teosarca", "createdAt": "2020-11-19T11:17:15Z", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java", "diffHunk": "@@ -1,11 +1,15 @@\n-/** Generated Model - DO NOT CHANGE */\n+/**\n+ * Generated Model - DO NOT CHANGE", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\nindex 0ce5b9c497..0ad3bd6e1a 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n", "chunk": "@@ -1,59 +1,32 @@\n-/**\n- * Generated Model - DO NOT CHANGE\n- */\n+// Generated Model - DO NOT CHANGE\n package org.compiere.model;\n \n+import javax.annotation.Nullable;\n import java.sql.ResultSet;\n import java.util.Properties;\n \n /**\n  * Generated Model for C_DocType\n  *\n- * @author Adempiere (generated)\n+ * @author metasfresh (generated)\n  */\n-@SuppressWarnings(\"javadoc\")\n public class X_C_DocType extends org.compiere.model.PO implements I_C_DocType, org.compiere.model.I_Persistent\n {\n \n-\t/**\n-\t *\n-\t */\n-\tprivate static final long serialVersionUID = -1772531968L;\n+\tprivate static final long serialVersionUID = 1116429568L;\n \n \t/**\n \t * Standard Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, int C_DocType_ID, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final int C_DocType_ID, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, C_DocType_ID, trxName);\n-\t\t/** if (C_DocType_ID == 0)\n-\t\t {\n-\t\t setC_DocType_ID (0);\n-\t\t setDocBaseType (null);\n-\t\t setDocumentCopies (0); // 1\n-\t\t setEntityType (null);\n-\t\t setGL_Category_ID (0);\n-\t\t setHasCharges (false);\n-\t\t setIsCopyDescriptionToDocument (true); // Y\n-\t\t setIsCreateCounter (true); // Y\n-\t\t setIsDefault (false);\n-\t\t setIsDefaultCounterDoc (false);\n-\t\t setIsDocNoControlled (true); // Y\n-\t\t setIsIndexed (false);\n-\t\t setIsInTransit (false);\n-\t\t setIsPickQAConfirm (false);\n-\t\t setIsShipConfirm (false);\n-\t\t setIsSOTrx (false);\n-\t\t setIsSplitWhenDifference (false); // N\n-\t\t setName (null);\n-\t\t setPrintName (null);\n-\t\t } */\n \t}\n \n \t/**\n \t * Load Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, ResultSet rs, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final ResultSet rs, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, rs, trxName);\n \t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\nindex 0ce5b9c497..0ad3bd6e1a 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n", "chunk": "@@ -1,59 +1,32 @@\n-/**\n- * Generated Model - DO NOT CHANGE\n- */\n+// Generated Model - DO NOT CHANGE\n package org.compiere.model;\n \n+import javax.annotation.Nullable;\n import java.sql.ResultSet;\n import java.util.Properties;\n \n /**\n  * Generated Model for C_DocType\n  *\n- * @author Adempiere (generated)\n+ * @author metasfresh (generated)\n  */\n-@SuppressWarnings(\"javadoc\")\n public class X_C_DocType extends org.compiere.model.PO implements I_C_DocType, org.compiere.model.I_Persistent\n {\n \n-\t/**\n-\t *\n-\t */\n-\tprivate static final long serialVersionUID = -1772531968L;\n+\tprivate static final long serialVersionUID = 1116429568L;\n \n \t/**\n \t * Standard Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, int C_DocType_ID, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final int C_DocType_ID, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, C_DocType_ID, trxName);\n-\t\t/** if (C_DocType_ID == 0)\n-\t\t {\n-\t\t setC_DocType_ID (0);\n-\t\t setDocBaseType (null);\n-\t\t setDocumentCopies (0); // 1\n-\t\t setEntityType (null);\n-\t\t setGL_Category_ID (0);\n-\t\t setHasCharges (false);\n-\t\t setIsCopyDescriptionToDocument (true); // Y\n-\t\t setIsCreateCounter (true); // Y\n-\t\t setIsDefault (false);\n-\t\t setIsDefaultCounterDoc (false);\n-\t\t setIsDocNoControlled (true); // Y\n-\t\t setIsIndexed (false);\n-\t\t setIsInTransit (false);\n-\t\t setIsPickQAConfirm (false);\n-\t\t setIsShipConfirm (false);\n-\t\t setIsSOTrx (false);\n-\t\t setIsSplitWhenDifference (false); // N\n-\t\t setName (null);\n-\t\t setPrintName (null);\n-\t\t } */\n \t}\n \n \t/**\n \t * Load Constructor\n \t */\n-\tpublic X_C_DocType(Properties ctx, ResultSet rs, String trxName)\n+\tpublic X_C_DocType(final Properties ctx, final ResultSet rs, @Nullable final String trxName)\n \t{\n \t\tsuper(ctx, rs, trxName);\n \t}\n", "next_change": {"commit": "4ecb66c90731a19ba3f6885d55056e615c090293", "changed_code": [{"header": "diff --git a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\nindex 0ad3bd6e1a..6174718ec8 100644\n--- a/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n+++ b/backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/X_C_DocType.java\n", "chunk": "@@ -1,39 +1,33 @@\n // Generated Model - DO NOT CHANGE\n package org.compiere.model;\n \n-import javax.annotation.Nullable;\n import java.sql.ResultSet;\n import java.util.Properties;\n+import javax.annotation.Nullable;\n \n-/**\n- * Generated Model for C_DocType\n- *\n- * @author metasfresh (generated)\n+/** Generated Model for C_DocType\n+ *  @author metasfresh (generated) \n  */\n-public class X_C_DocType extends org.compiere.model.PO implements I_C_DocType, org.compiere.model.I_Persistent\n+@SuppressWarnings(\"unused\")\n+public class X_C_DocType extends org.compiere.model.PO implements I_C_DocType, org.compiere.model.I_Persistent \n {\n \n-\tprivate static final long serialVersionUID = 1116429568L;\n+\tprivate static final long serialVersionUID = -1805973587L;\n \n-\t/**\n-\t * Standard Constructor\n-\t */\n-\tpublic X_C_DocType(final Properties ctx, final int C_DocType_ID, @Nullable final String trxName)\n-\t{\n-\t\tsuper(ctx, C_DocType_ID, trxName);\n-\t}\n+    /** Standard Constructor */\n+    public X_C_DocType (final Properties ctx, final int C_DocType_ID, @Nullable final String trxName)\n+    {\n+      super (ctx, C_DocType_ID, trxName);\n+    }\n \n-\t/**\n-\t * Load Constructor\n-\t */\n-\tpublic X_C_DocType(final Properties ctx, final ResultSet rs, @Nullable final String trxName)\n-\t{\n-\t\tsuper(ctx, rs, trxName);\n-\t}\n+    /** Load Constructor */\n+    public X_C_DocType (final Properties ctx, final ResultSet rs, @Nullable final String trxName)\n+    {\n+      super (ctx, rs, trxName);\n+    }\n \n-\t/**\n-\t * Load Meta Data\n-\t */\n+\n+\t/** Load Meta Data */\n \t@Override\n \tprotected org.compiere.model.POInfo initPO(final Properties ctx)\n \t{\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "7013ab1e89ca86b9f278f3bfc13846deee8391e1", "committedDate": "2021-01-24 13:12:31 +0200", "message": "Service repair feature (2nd increment) (#10512)"}, {"oid": "68b64caf5938fe809250e8c6e8cc65e086ab98bc", "committedDate": "2021-02-03 23:07:45 -0800", "message": "gh10566 (#10567)"}, {"oid": "79ee41207836639e474f712860605346ff3536e1", "committedDate": "2021-02-16 00:36:50 +0200", "message": "fix after merge from intensive_care_uat"}, {"oid": "53e03500dec29b05184b10f645066a25682add08", "committedDate": "2021-03-01 07:47:20 -0800", "message": "#gh10718 added Frame Agreement and Order Call doctypes for SO (#10719)"}, {"oid": "1690f1045d1d9da037a1049ded52467cddae9e2a", "committedDate": "2021-06-09 13:45:20 +0300", "message": "Invoice Candidate: exclude from commission flag (#11225)"}, {"oid": "350ded6bf42fda4507249b7d21555dae041650ab", "committedDate": "2021-06-22 21:57:21 +0200", "message": "DocType: Mediated Order (#11347)"}, {"oid": "fb4695c3cc4010ba8e8c091ef994b3d31f2af51c", "committedDate": "2021-07-24 11:36:49 +0300", "message": "Merge remote-tracking branch 'origin/tenacious_d_uat'"}, {"oid": "e743460616a78447b753c2c54a9591568ddf8d58", "committedDate": "2021-08-20 08:47:21 +0200", "message": "Smothen connecting to shopware (#11576)"}, {"oid": "7e600e448cd436cc6a5ae7a3d9900c6f7df09e28", "committedDate": "2021-11-10 10:32:46 +0200", "message": "Nachbelastung (Kreditoren) (#11963)"}, {"oid": "1c2372109aecf6e02ae885330ffc0f61e062cb31", "committedDate": "2021-11-12 11:16:33 +0200", "message": "Ic hf ac (#11972)"}, {"oid": "c1a0a40e80d35c5244e4f726efc5966bd3279109", "committedDate": "2021-11-19 12:46:28 +0100", "message": "Merge branch 'intensive_care_hotfix' into intensive_care_uat"}, {"oid": "6192426844fabbbf34498515b19ddc91283074e1", "committedDate": "2021-12-21 15:54:51 +0100", "message": "Nachbelastung (Kreditoren) (#11963)"}, {"oid": "ce2f55ab567639c26d76ba8d379b5ac11db56cf6", "committedDate": "2022-01-16 08:41:27 +0100", "message": "Merge branch 'pot_hole_uat' into master_integration"}, {"oid": "e2e50d29b9704ba9066035a282fe21c72e6e01e0", "committedDate": "2022-02-21 08:00:47 +0100", "message": "Tasty ham uat gh12520 (#12560)"}, {"oid": "ec831e98744f2e74f682e88e3131558621d20e53", "committedDate": "2022-02-25 16:29:50 +0200", "message": "Merge remote-tracking branch 'origin/tasty_ham_uat' into master_integration"}, {"oid": "31958d7b20387d64d63a848e13ab3f9157f36aeb", "committedDate": "2022-03-07 13:10:07 +0100", "message": "Call Order Contracts (#12605)"}, {"oid": "c9b65134d9fd5c507fc7e3c015eafa09bfc74143", "committedDate": "2022-03-29 18:29:12 +0200", "message": "Merge branch 'anxious_hippos_uat' into master_integration2"}, {"oid": "01346e1bf5c881e915c930778fa64ed5577aaadc", "committedDate": "2022-04-08 12:47:13 +0300", "message": "Merge intensive care uat (#12778)"}, {"oid": "dafa1e8c334b85bb5aad98fda897ddd1b5456caa", "committedDate": "2022-07-26 21:00:48 +0100", "message": "Gh13319 final productprice (#13336)"}, {"oid": "275c7eecf879a8d255eb422bf39055aaa69cf2a5", "committedDate": "2022-08-25 10:27:28 +0300", "message": "Cost Revaluation Accounting (#13493)"}, {"oid": "6748c364983a6bb65461801a51de1504dcbf81a3", "committedDate": "2022-08-26 05:07:08 -0700", "message": "Added Interim Invoice (#13438)"}, {"oid": "a51c30362b15576c60986c263fc5150c46d7a8ba", "committedDate": "2022-08-26 18:17:58 +0300", "message": "fix after merge"}, {"oid": "485a5549fd7aeb65a5b70d0358edfb726ec216cb", "committedDate": "2022-08-26 18:50:41 +0300", "message": "fix after merge"}, {"oid": "53fcfff2f074d13df81453da393e16faf06efc71", "committedDate": "2022-08-27 10:54:22 +0300", "message": "Merge remote-tracking branch 'origin/inner_silence_uat' into master_inner_silence_uat_teo"}, {"oid": "c91646c3c48566ee60a7c7414cbfa6480f12f6b7", "committedDate": "2022-08-27 10:54:58 +0300", "message": "fix after merge"}, {"oid": "ffa5f96f9ad60cb0f79827f59c1795200f5ba3a5", "committedDate": "2022-12-06 09:13:30 +0200", "message": "Vendor Invoice Preparation (#14086)"}, {"oid": "78d1b4babdeded674956e788280eb836a6333be1", "committedDate": "2022-12-23 06:23:20 -0800", "message": "Allow lotNo to be set automatically, based on sequence Number (#14214)"}, {"oid": "91ba131d9b799980f52934aec6aa6ba81db473cd", "committedDate": "2022-12-23 17:03:24 +0200", "message": "Merge remote-tracking branch 'origin/tasty_ham_uat' into master_integration_tasty_ham_uat_gh14201"}, {"oid": "ae6a6f89d8cff8621235015977e16a44075d2890", "committedDate": "2023-01-17 13:55:32 +0200", "message": "Consider C_Invoice_Acct when posting invoices and match invoices (#14363)"}, {"oid": "b49bf2c2021f189bec106b2dcaddf22a28b82808", "committedDate": "2023-01-18 15:02:30 +0100", "message": "Delivery Instructions (#14216)"}, {"oid": "9d514a7f3fce756ab21746cc2cc9807759100780", "committedDate": "2023-01-18 18:45:43 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "8fcdf75613240c9fabb0708390ebac64c081a9e1", "committedDate": "2023-01-23 17:06:32 +0200", "message": "Copy Cost Revaluation feature from master to adorable_badger_uat (#14405)"}, {"oid": "90b98c39da41a15dd40c6aba05508fe0b68a597f", "committedDate": "2023-01-25 14:45:28 +0200", "message": "group invoices and credit memos into a single document (#14378)"}, {"oid": "0b3ca40abd123d5490ba5731d4161e3681bcd807", "committedDate": "2023-01-25 15:35:51 +0200", "message": "Merge branch 'scary_plum_hotfix'"}, {"oid": "6e7d8070d3652cfbb57a17e9c8c4b3ac8e6ee3f2", "committedDate": "2023-02-08 17:10:19 +0100", "message": "deliveryplanning shortage overage (#14510)"}, {"oid": "b4cc7584280971dc1c6f141606218df5116963c5", "committedDate": "2023-02-09 11:47:53 +0100", "message": "Merge branch 'adorable_badger_uat' into master_integration_adorable_badger_uat_gh14492"}, {"oid": "a4da3e46fcc3b5e79df2ea1761a5306db25fe4d7", "committedDate": "2023-03-10 09:29:50 +0100", "message": "Correction Invoices (#14805)"}, {"oid": "7fecaf0d9b1ec1172c5e92e47d18102376fb4d60", "committedDate": "2023-03-10 09:32:57 +0100", "message": "Merge branch 'adorable_badger_uat' into master_integration_adorable_badger_uat_gh14755"}, {"oid": "830a9125839331019375271836bec56e1797808e", "committedDate": "2023-05-05 15:10:47 +0300", "message": "RAA Datenaustausch Wareneingang Pr\u00fcfling (#15232)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjU2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526792561", "body": "remove it and introduce and use `C_DocType.R_RequestType_ID`", "bodyText": "remove it and introduce and use C_DocType.R_RequestType_ID", "bodyHTML": "<p dir=\"auto\">remove it and introduce and use <code>C_DocType.R_RequestType_ID</code></p>", "author": "teosarca", "createdAt": "2020-11-19T11:25:24Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java", "diffHunk": "@@ -31,5 +31,7 @@\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n+\tRequestTypeId retrieveTestApplianceRequestTypeId();", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\nindex 5997ce2272..c0349f537a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n", "chunk": "@@ -31,7 +31,5 @@ public interface IRequestTypeDAO extends ISingletonService\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n-\tRequestTypeId retrieveTestApplianceRequestTypeId();\n-\n \tRequestTypeId retrieveDefaultRequestTypeIdOrFirstActive();\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\nindex 5997ce2272..c0349f537a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n", "chunk": "@@ -31,7 +31,5 @@ public interface IRequestTypeDAO extends ISingletonService\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n-\tRequestTypeId retrieveTestApplianceRequestTypeId();\n-\n \tRequestTypeId retrieveDefaultRequestTypeIdOrFirstActive();\n }\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\nindex c0349f537a..b9ad2a11ca 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n", "chunk": "@@ -31,5 +31,7 @@ public interface IRequestTypeDAO extends ISingletonService\n \n \tRequestTypeId retrieveCustomerRequestTypeId();\n \n+\tRequestTypeId retrieveOrgChangeRequestTypeId();\n+\n \tRequestTypeId retrieveDefaultRequestTypeIdOrFirstActive();\n }\n", "next_change": {"commit": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\nindex b9ad2a11ca..533c179f10 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/IRequestTypeDAO.java\n", "chunk": "@@ -33,5 +33,7 @@ public interface IRequestTypeDAO extends ISingletonService\n \n \tRequestTypeId retrieveOrgChangeRequestTypeId();\n \n+\tRequestTypeId retrieveBPartnerCreatedFromAnotherOrgRequestTypeId();\n+\n \tRequestTypeId retrieveDefaultRequestTypeIdOrFirstActive();\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}, {"oid": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "committedDate": "2021-10-14 12:09:09 +0300", "message": "Partner created from another org  (#11846)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzA4MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793081", "body": "IMHO not needed. You can extract it from `recordRef` when applies. see below.\r\n", "bodyText": "IMHO not needed. You can extract it from recordRef when applies. see below.", "bodyHTML": "<p dir=\"auto\">IMHO not needed. You can extract it from <code>recordRef</code> when applies. see below.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:26:15Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java", "diffHunk": "@@ -53,6 +52,8 @@\n \n \tTableRecordReference recordRef;\n \n+\tOrderId orderId;", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\nindex 282cba98dc..04e030d802 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n", "chunk": "@@ -52,8 +51,6 @@ public class RequestCandidate\n \n \tTableRecordReference recordRef;\n \n-\tOrderId orderId;\n-\n \t@NonNull\n \tZonedDateTime dateDelivered;\n \t@NonNull\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\nindex 282cba98dc..04e030d802 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/RequestCandidate.java\n", "chunk": "@@ -52,8 +51,6 @@ public class RequestCandidate\n \n \tTableRecordReference recordRef;\n \n-\tOrderId orderId;\n-\n \t@NonNull\n \tZonedDateTime dateDelivered;\n \t@NonNull\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzU5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793596", "body": "check if canddiate.getRecordRef().getTableName() equals C_Order => if yes, setC_Order_ID(recordRef's record_ID)\r\n", "bodyText": "check if canddiate.getRecordRef().getTableName() equals C_Order => if yes, setC_Order_ID(recordRef's record_ID)", "bodyHTML": "<p dir=\"auto\">check if canddiate.getRecordRef().getTableName() equals C_Order =&gt; if yes, setC_Order_ID(recordRef's record_ID)</p>", "author": "teosarca", "createdAt": "2020-11-19T11:27:09Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java", "diffHunk": "@@ -47,14 +46,15 @@\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-\n+;\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n \t\trequest.setM_Product_ID(ProductId.toRepoId(candidate.getProductId()));\n \t\trequest.setAD_Table_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getAD_Table_ID() : -1);\n \t\trequest.setRecord_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getRecord_ID() : -1);\n \t\trequest.setC_BPartner_ID(BPartnerId.toRepoId(candidate.getPartnerId()));\n+\t\trequest.setC_Order_ID(candidate.getOrderId() != null ? candidate.getOrderId().getRepoId() : 0);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 29988388c7..b0423bed1c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -46,7 +47,7 @@ public class RequestDAO implements IRequestDAO\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-;\n+\t\t;\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n", "next_change": null}, {"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 29988388c7..b0423bed1c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -54,7 +55,9 @@ public class RequestDAO implements IRequestDAO\n \t\trequest.setAD_Table_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getAD_Table_ID() : -1);\n \t\trequest.setRecord_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getRecord_ID() : -1);\n \t\trequest.setC_BPartner_ID(BPartnerId.toRepoId(candidate.getPartnerId()));\n-\t\trequest.setC_Order_ID(candidate.getOrderId() != null ? candidate.getOrderId().getRepoId() : 0);\n+\t\trequest.setC_Order_ID(candidate.getRecordRef() != null ?\n+\t\t\t\tcandidate.getRecordRef().getTableName().equals(I_C_Order.Table_Name) ? candidate.getRecordRef().getRecord_ID() : -1\n+\t\t\t\t: -1);\n \t\trequest.setAD_User_ID(UserId.toRepoId(candidate.getUserId()));\n \t\trequest.setR_RequestType_ID(candidate.getRequestTypeId().getRepoId());\n \t\trequest.setM_QualityNote_ID(QualityNoteId.toRepoId(candidate.getQualityNoteId()));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 29988388c7..b0423bed1c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -46,7 +47,7 @@ public class RequestDAO implements IRequestDAO\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-;\n+\t\t;\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n", "next_change": {"commit": "4ecb66c90731a19ba3f6885d55056e615c090293", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex b0423bed1c..1766d20341 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -43,11 +45,23 @@ import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n public class RequestDAO implements IRequestDAO\n {\n+\t@Override\n+\tpublic I_R_Request getById(@NonNull final RequestId id)\n+\t{\n+\t\treturn InterfaceWrapperHelper.load(id, I_R_Request.class);\n+\t}\n+\n+\t@Override\n+\tpublic void save(@NonNull final I_R_Request request)\n+\t{\n+\t\tInterfaceWrapperHelper.saveRecord(request);\n+\t}\n+\n \t@Override\n \tpublic I_R_Request createRequest(@NonNull final RequestCandidate candidate)\n \t{\n \t\tfinal I_R_Request request = newInstance(I_R_Request.class);\n-\t\t;\n+\n \t\trequest.setSummary(candidate.getSummary());\n \t\trequest.setConfidentialType(candidate.getConfidentialType());\n \t\trequest.setAD_Org_ID(candidate.getOrgId().getRepoId());\n", "next_change": null}]}}, {"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 29988388c7..b0423bed1c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -54,7 +55,9 @@ public class RequestDAO implements IRequestDAO\n \t\trequest.setAD_Table_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getAD_Table_ID() : -1);\n \t\trequest.setRecord_ID(candidate.getRecordRef() != null ? candidate.getRecordRef().getRecord_ID() : -1);\n \t\trequest.setC_BPartner_ID(BPartnerId.toRepoId(candidate.getPartnerId()));\n-\t\trequest.setC_Order_ID(candidate.getOrderId() != null ? candidate.getOrderId().getRepoId() : 0);\n+\t\trequest.setC_Order_ID(candidate.getRecordRef() != null ?\n+\t\t\t\tcandidate.getRecordRef().getTableName().equals(I_C_Order.Table_Name) ? candidate.getRecordRef().getRecord_ID() : -1\n+\t\t\t\t: -1);\n \t\trequest.setAD_User_ID(UserId.toRepoId(candidate.getUserId()));\n \t\trequest.setR_RequestType_ID(candidate.getRequestTypeId().getRepoId());\n \t\trequest.setM_QualityNote_ID(QualityNoteId.toRepoId(candidate.getQualityNoteId()));\n", "next_change": {"commit": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex b0423bed1c..f134548d8d 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -58,6 +59,9 @@ public class RequestDAO implements IRequestDAO\n \t\trequest.setC_Order_ID(candidate.getRecordRef() != null ?\n \t\t\t\tcandidate.getRecordRef().getTableName().equals(I_C_Order.Table_Name) ? candidate.getRecordRef().getRecord_ID() : -1\n \t\t\t\t: -1);\n+\t\trequest.setM_InOut_ID(candidate.getRecordRef() != null ?\n+\t\t\t\tcandidate.getRecordRef().getTableName().equals(I_M_InOut.Table_Name) ? candidate.getRecordRef().getRecord_ID() : -1\n+\t\t\t\t: -1);\n \t\trequest.setAD_User_ID(UserId.toRepoId(candidate.getUserId()));\n \t\trequest.setR_RequestType_ID(candidate.getRequestTypeId().getRepoId());\n \t\trequest.setM_QualityNote_ID(QualityNoteId.toRepoId(candidate.getQualityNoteId()));\n", "next_change": {"commit": "3c6f438d77443b252bd82f2165476e4cfce05947", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex f134548d8d..74d387e5f9 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -62,6 +63,8 @@ public class RequestDAO implements IRequestDAO\n \t\trequest.setM_InOut_ID(candidate.getRecordRef() != null ?\n \t\t\t\tcandidate.getRecordRef().getTableName().equals(I_M_InOut.Table_Name) ? candidate.getRecordRef().getRecord_ID() : -1\n \t\t\t\t: -1);\n+\n+\t\trequest.setDateTrx(SystemTime.asTimestamp());\n \t\trequest.setAD_User_ID(UserId.toRepoId(candidate.getUserId()));\n \t\trequest.setR_RequestType_ID(candidate.getRequestTypeId().getRepoId());\n \t\trequest.setM_QualityNote_ID(QualityNoteId.toRepoId(candidate.getQualityNoteId()));\n", "next_change": {"commit": "4ecb66c90731a19ba3f6885d55056e615c090293", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\nindex 74d387e5f9..1766d20341 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestDAO.java\n", "chunk": "@@ -71,7 +83,7 @@ public class RequestDAO implements IRequestDAO\n \t\trequest.setPerformanceType(candidate.getPerformanceType());\n \t\trequest.setDateDelivered(TimeUtil.asTimestamp(candidate.getDateDelivered()));\n \n-\t\tsaveRecord(request);\n+\t\tsave(request);\n \n \t\treturn request;\n \t}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "3c6f438d77443b252bd82f2165476e4cfce05947", "committedDate": "2020-12-11 09:18:03 +0200", "message": "#10377 Also setting request date (#10407)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5Mzk1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526793950", "body": "remove it, not needed. use `C_DocType.R_RequestType_ID`.", "bodyText": "remove it, not needed. use C_DocType.R_RequestType_ID.", "bodyHTML": "<p dir=\"auto\">remove it, not needed. use <code>C_DocType.R_RequestType_ID</code>.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:27:42Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java", "diffHunk": "@@ -41,6 +41,8 @@\n \tstatic final String InternalName_CustomerComplaint = \"A_CustomerComplaint\";\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n+\t@VisibleForTesting\n+\tstatic final String InternalName_TestAppliance = \"T_TestAppliance\";", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -41,8 +39,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \tstatic final String InternalName_CustomerComplaint = \"A_CustomerComplaint\";\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n-\t@VisibleForTesting\n-\tstatic final String InternalName_TestAppliance = \"T_TestAppliance\";\n \n \tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -41,8 +39,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \tstatic final String InternalName_CustomerComplaint = \"A_CustomerComplaint\";\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n-\t@VisibleForTesting\n-\tstatic final String InternalName_TestAppliance = \"T_TestAppliance\";\n \n \tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex 484bf27ef5..c3d88824f9 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -40,6 +40,8 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \t@VisibleForTesting\n \tstatic final String InternalName_VendorComplaint = \"B_VendorComplaint\";\n \n+\tstatic final String InternalName_OrgSwitch = \"S_OrgSwitch\";\n+\n \tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t@Override\n", "next_change": {"commit": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex c3d88824f9..0d1a5559eb 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -42,6 +42,9 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \n \tstatic final String InternalName_OrgSwitch = \"S_OrgSwitch\";\n \n+\tstatic final String InternalName_C_BPartner_CreatedFromAnotherOrg = \"C_BPartner_CreatedFromAnotherOrg\";\n+\n+\n \tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t@Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}, {"oid": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "committedDate": "2021-10-14 12:09:09 +0300", "message": "Partner created from another org  (#11846)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NDQ5Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526794493", "body": "remove it", "bodyText": "remove it", "bodyHTML": "<p dir=\"auto\">remove it</p>", "author": "teosarca", "createdAt": "2020-11-19T11:28:39Z", "path": "backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java", "diffHunk": "@@ -56,6 +58,12 @@ public RequestTypeId retrieveCustomerRequestTypeId()\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n+\t@Override\n+\tpublic RequestTypeId retrieveTestApplianceRequestTypeId()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -58,12 +54,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n-\t@Override\n-\tpublic RequestTypeId retrieveTestApplianceRequestTypeId()\n-\t{\n-\t\treturn retrieveRequestTypeIdByInternalName(InternalName_TestAppliance);\n-\t}\n-\n \tprivate RequestTypeId retrieveRequestTypeIdByInternalName(final String internalName)\n \t{\n \t\tfinal RequestTypeId requestTypeId = queryBL.createQueryBuilderOutOfTrx(I_R_RequestType.class)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex f13baa6d5d..484bf27ef5 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -58,12 +54,6 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n-\t@Override\n-\tpublic RequestTypeId retrieveTestApplianceRequestTypeId()\n-\t{\n-\t\treturn retrieveRequestTypeIdByInternalName(InternalName_TestAppliance);\n-\t}\n-\n \tprivate RequestTypeId retrieveRequestTypeIdByInternalName(final String internalName)\n \t{\n \t\tfinal RequestTypeId requestTypeId = queryBL.createQueryBuilderOutOfTrx(I_R_RequestType.class)\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex 484bf27ef5..c3d88824f9 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -54,6 +56,13 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \t\treturn retrieveRequestTypeIdByInternalName(InternalName_CustomerComplaint);\n \t}\n \n+\t@Override\n+\tpublic RequestTypeId retrieveOrgChangeRequestTypeId()\n+\t{\n+\t\treturn retrieveRequestTypeIdByInternalName(InternalName_OrgSwitch);\n+\n+\t}\n+\n \tprivate RequestTypeId retrieveRequestTypeIdByInternalName(final String internalName)\n \t{\n \t\tfinal RequestTypeId requestTypeId = queryBL.createQueryBuilderOutOfTrx(I_R_RequestType.class)\n", "next_change": {"commit": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\nindex c3d88824f9..0d1a5559eb 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/request/api/impl/RequestTypeDAO.java\n", "chunk": "@@ -63,6 +66,13 @@ public class RequestTypeDAO implements IRequestTypeDAO\n \n \t}\n \n+\t@Override\n+\tpublic RequestTypeId retrieveBPartnerCreatedFromAnotherOrgRequestTypeId()\n+\t{\n+\t\treturn retrieveRequestTypeIdByInternalName(InternalName_C_BPartner_CreatedFromAnotherOrg);\n+\n+\t}\n+\n \tprivate RequestTypeId retrieveRequestTypeIdByInternalName(final String internalName)\n \t{\n \t\tfinal RequestTypeId requestTypeId = queryBL.createQueryBuilderOutOfTrx(I_R_RequestType.class)\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}, {"oid": "22412d3ee2b4c14e773d32c4f9cc282e6efbaa00", "committedDate": "2021-10-14 12:09:09 +0300", "message": "Partner created from another org  (#11846)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NjQ4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526796482", "body": "remote this method. no need to register user notifications topics.", "bodyText": "remote this method. no need to register user notifications topics.", "bodyHTML": "<p dir=\"auto\">remote this method. no need to register user notifications topics.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:32:07Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.event.IEventBusFactory;\n+import de.metas.inout.event.InOutUserNotificationsProducer;\n+import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Init;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+import org.compiere.model.X_C_DocType;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\t@Init\n+\tpublic void onInit()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..9eada13fcc 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,35 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.document.IDocTypeDAO;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n", "next_change": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,35 +1,29 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n+\n+import java.util.Optional;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NjgzNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526796834", "body": "use/check `C_DocType.R_RequestType_ID` to decide if we are going to generate a request.\r\n", "bodyText": "use/check C_DocType.R_RequestType_ID to decide if we are going to generate a request.", "bodyHTML": "<p dir=\"auto\">use/check <code>C_DocType.R_RequestType_ID</code> to decide if we are going to generate a request.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:32:44Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.event.IEventBusFactory;\n+import de.metas.inout.event.InOutUserNotificationsProducer;\n+import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Init;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+import org.compiere.model.X_C_DocType;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\t@Init\n+\tpublic void onInit()\n+\t{\n+\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n+\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n+\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n+\t}\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..9eada13fcc 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,35 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.document.IDocTypeDAO;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n", "next_change": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex d168d5f488..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,35 +1,29 @@\n package de.metas.order.model.validator;\n \n-import de.metas.event.IEventBusFactory;\n-import de.metas.inout.event.InOutUserNotificationsProducer;\n-import de.metas.inout.event.ReturnInOutUserNotificationsProducer;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n-import org.adempiere.ad.modelvalidator.annotations.Init;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n-import org.compiere.model.X_C_DocType;\n+\n+import java.util.Optional;\n \n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\t@Init\n-\tpublic void onInit()\n-\t{\n-\t\t// Setup event bus topics on which swing client notification listener shall subscribe\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(InOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t\tServices.get(IEventBusFactory.class).addAvailableUserNotificationsTopic(ReturnInOutUserNotificationsProducer.EVENTBUS_TOPIC);\n-\t}\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tif (order.getC_DocTypeTarget_ID() == X_C_DocType.DOCTYPE_TEST_APPLIANCE)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n-\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order.getC_Order_ID());\n+\t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n \n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5ODM4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526798387", "body": "rename it to `createRequestFromOrder`\r\n", "bodyText": "rename it to createRequestFromOrder", "bodyHTML": "<p dir=\"auto\">rename it to <code>createRequestFromOrder</code></p>", "author": "teosarca", "createdAt": "2020-11-19T11:35:19Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java", "diffHunk": "@@ -41,13 +41,15 @@\n \t * <li>qualityNotice\n \t * <li>org\n \t * <li>linked salesrep of the org, etc.\n-\t * \n+\t * <p>\n \t * Note that the quantities are not relevant in the requests. Therefore, the qualityDiscountPercent is not even set in the request.\n \t * We can have requests with no quality notices, in case the base inout line was created with qualityDiscountPercent but with no quality notice.\n-\t * \n+\t *\n \t * @param line\n \t */\n \tI_R_Request createRequestFromInOutLine(I_M_InOutLine line);\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n+\n+\tI_R_Request createTestApplianceRequestFromOrder(I_C_Order order);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex d3a2d596d0..c1c119ee6a 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n", "chunk": "@@ -51,5 +51,5 @@ public interface IRequestBL extends ISingletonService\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n \n-\tI_R_Request createTestApplianceRequestFromOrder(I_C_Order order);\n+\tI_R_Request createRequestFromOrder(I_C_Order order);\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex d3a2d596d0..c1c119ee6a 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n", "chunk": "@@ -51,5 +51,5 @@ public interface IRequestBL extends ISingletonService\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n \n-\tI_R_Request createTestApplianceRequestFromOrder(I_C_Order order);\n+\tI_R_Request createRequestFromOrder(I_C_Order order);\n }\n", "next_change": {"commit": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex c1c119ee6a..26ec202c1c 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n", "chunk": "@@ -47,7 +47,7 @@ public interface IRequestBL extends ISingletonService\n \t *\n \t * @param line\n \t */\n-\tI_R_Request createRequestFromInOutLine(I_M_InOutLine line);\n+\tI_R_Request createRequestFromInOutLineWithQualityIssues(I_M_InOutLine line);\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n \n", "next_change": {"commit": "4ecb66c90731a19ba3f6885d55056e615c090293", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex 26ec202c1c..81f3ef7c92 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n", "chunk": "@@ -40,13 +48,12 @@ public interface IRequestBL extends ISingletonService\n \t * <li>dateDelivered\n \t * <li>qualityNotice\n \t * <li>org\n-\t * <li>linked salesrep of the org, etc.\n+\t * <li>linked sales rep of the org, etc.\n \t * <p>\n \t * Note that the quantities are not relevant in the requests. Therefore, the qualityDiscountPercent is not even set in the request.\n \t * We can have requests with no quality notices, in case the base inout line was created with qualityDiscountPercent but with no quality notice.\n-\t *\n-\t * @param line\n \t */\n+\t@Nullable\n \tI_R_Request createRequestFromInOutLineWithQualityIssues(I_M_InOutLine line);\n \n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\nindex 81f3ef7c92..ebd83173d1 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/IRequestBL.java\n", "chunk": "@@ -59,4 +59,6 @@ public interface IRequestBL extends ISingletonService\n \tI_R_Request createRequestFromDDOrderLine(I_DD_OrderLine line);\n \n \tI_R_Request createRequestFromOrder(I_C_Order order);\n+\n+\tI_R_Request createRequest(RequestCandidate requestCandidate);\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5ODk3NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526798974", "body": "get the request type from `C_DocType.R_RequestType_ID`.\r\n", "bodyText": "get the request type from C_DocType.R_RequestType_ID.", "bodyHTML": "<p dir=\"auto\">get the request type from <code>C_DocType.R_RequestType_ID</code>.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:36:11Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +167,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..7fcd7b063f 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -168,16 +169,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 7fcd7b063f..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -171,14 +173,14 @@ public class RequestBL implements IRequestBL\n \t@Override\n \tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n \t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -168,16 +171,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 9587cd91d4..8c78c9dd40 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -189,9 +207,9 @@ public class RequestBL implements IRequestBL\n \t\treturn createRequest(requestCandidate);\n \t}\n \n-\tprivate I_R_Request createRequest(final RequestCandidate requestCandidate)\n+\t@Override\n+\tpublic I_R_Request createRequest(final RequestCandidate requestCandidate)\n \t{\n-\t\tfinal IRequestDAO requestsRepo = Services.get(IRequestDAO.class);\n \t\treturn requestsRepo.createRequest(requestCandidate);\n \t}\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5OTQwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526799406", "body": "use I_C_Order as param (you already have it in caller method.\r\nAnnotate with `@NonNull`.\r\n", "bodyText": "use I_C_Order as param (you already have it in caller method.\nAnnotate with @NonNull.", "bodyHTML": "<p dir=\"auto\">use I_C_Order as param (you already have it in caller method.<br>\nAnnotate with <code>@NonNull</code>.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:36:53Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2ea598ff6462df0b2fe7ba2e031235598e526247", "committedDate": "2022-01-05 17:53:23 +0100", "message": "Improve retrieval performance of workpackage items for WP processors (#12267)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDA0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526800049", "body": "not needed", "bodyText": "not needed", "bodyHTML": "<p dir=\"auto\">not needed</p>", "author": "teosarca", "createdAt": "2020-11-19T11:38:00Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2ea598ff6462df0b2fe7ba2e031235598e526247", "committedDate": "2022-01-05 17:53:23 +0100", "message": "Improve retrieval performance of workpackage items for WP processors (#12267)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDczOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526800738", "body": "not needed", "bodyText": "not needed", "bodyHTML": "<p dir=\"auto\">not needed</p>", "author": "teosarca", "createdAt": "2020-11-19T11:39:19Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -36,27 +35,18 @@ import org.compiere.util.Env;\n \n import java.util.Properties;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.load;\n-\n public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n {\n-\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\tprivate final IRequestBL requestBL = Services.get(IRequestBL.class);\n \n \t/**\n \t * Schedule the request creation based on the given order id\n \t * <p>\n \t * The request will contain information taken from the order\n \t */\n-\tpublic static void createWorkpackage(final int orderId)\n+\tpublic static void createWorkpackage(final I_C_Order order)\n \t{\n-\t\tif (orderId == 0)\n-\t\t{\n-\t\t\t// no order to process\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n-\n \t\tSCHEDULER.schedule(order);\n \t}\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2ea598ff6462df0b2fe7ba2e031235598e526247", "committedDate": "2022-01-05 17:53:23 +0100", "message": "Improve retrieval performance of workpackage items for WP processors (#12267)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMjI3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526802271", "body": "extract those as fields", "bodyText": "extract those as fields", "bodyHTML": "<p dir=\"auto\">extract those as fields</p>", "author": "teosarca", "createdAt": "2020-11-19T11:41:56Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n+\n+\t\tSCHEDULER.schedule(order);\n+\t}\n+\n+\tprivate static final WorkpackagesOnCommitSchedulerTemplate<I_C_Order> SCHEDULER = new WorkpackagesOnCommitSchedulerTemplate<I_C_Order>(R_Request_CreateFromOrder_Async.class)\n+\t{\n+\t\t@Override\n+\t\tprotected boolean isEligibleForScheduling(final I_C_Order model)\n+\t\t{\n+\t\t\treturn model != null && model.getC_Order_ID() > 0;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Properties extractCtxFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn Env.getCtx();\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String extractTrxNameFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn ITrx.TRXNAME_ThreadInherited;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Object extractModelToEnqueueFromItem(final Collector collector, final I_C_Order item)\n+\t\t{\n+\t\t\treturn TableRecordReference.of(I_C_Order.Table_Name, item.getC_Order_ID());\n+\t\t}\n+\t};\n+\n+\t@Override\n+\tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n+\t{\n+\t\t// Services\n+\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -90,15 +80,9 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \t@Override\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n-\t\t// Services\n-\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n-\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n-\n-\t\t// retrieve the order\n-\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);\n-\n-\t\t// create a request based on the order's information.\n-\t\trequestBL.createTestApplianceRequestFromOrder(order);\n+\t\t// retrieve the order and generate requests\n+\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n \t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -90,15 +80,9 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \t@Override\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n-\t\t// Services\n-\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n-\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n-\n-\t\t// retrieve the order\n-\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);\n-\n-\t\t// create a request based on the order's information.\n-\t\trequestBL.createTestApplianceRequestFromOrder(order);\n+\t\t// retrieve the order and generate requests\n+\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n \t}\n", "next_change": {"commit": "2ea598ff6462df0b2fe7ba2e031235598e526247", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 77a4cb4495..e0fab6f4c9 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -81,7 +81,7 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n \t\t// retrieve the order and generate requests\n-\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\tqueueDAO.retrieveAllItems(workPackage, I_C_Order.class)\n \t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2ea598ff6462df0b2fe7ba2e031235598e526247", "committedDate": "2022-01-05 17:53:23 +0100", "message": "Improve retrieval performance of workpackage items for WP processors (#12267)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMjY4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526802684", "body": "use can get all orders and do a for to iterate them and create requests for each of them", "bodyText": "use can get all orders and do a for to iterate them and create requests for each of them", "bodyHTML": "<p dir=\"auto\">use can get all orders and do a for to iterate them and create requests for each of them</p>", "author": "teosarca", "createdAt": "2020-11-19T11:42:36Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.request.service.async.spi.impl;\n+\n+import de.metas.async.api.IQueueDAO;\n+import de.metas.async.model.I_C_Queue_WorkPackage;\n+import de.metas.async.spi.WorkpackageProcessorAdapter;\n+import de.metas.async.spi.WorkpackagesOnCommitSchedulerTemplate;\n+import de.metas.order.IOrderDAO;\n+import de.metas.request.api.IRequestBL;\n+import de.metas.util.Services;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.util.Env;\n+\n+import java.util.Properties;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.load;\n+\n+public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n+{\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\t/**\n+\t * Schedule the request creation based on the given order id\n+\t * <p>\n+\t * The request will contain information taken from the order\n+\t */\n+\tpublic static void createWorkpackage(final int orderId)\n+\t{\n+\t\tif (orderId == 0)\n+\t\t{\n+\t\t\t// no order to process\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_C_Order order = load(orderId, I_C_Order.class);\n+\n+\t\tSCHEDULER.schedule(order);\n+\t}\n+\n+\tprivate static final WorkpackagesOnCommitSchedulerTemplate<I_C_Order> SCHEDULER = new WorkpackagesOnCommitSchedulerTemplate<I_C_Order>(R_Request_CreateFromOrder_Async.class)\n+\t{\n+\t\t@Override\n+\t\tprotected boolean isEligibleForScheduling(final I_C_Order model)\n+\t\t{\n+\t\t\treturn model != null && model.getC_Order_ID() > 0;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Properties extractCtxFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn Env.getCtx();\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String extractTrxNameFromItem(final I_C_Order item)\n+\t\t{\n+\t\t\treturn ITrx.TRXNAME_ThreadInherited;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Object extractModelToEnqueueFromItem(final Collector collector, final I_C_Order item)\n+\t\t{\n+\t\t\treturn TableRecordReference.of(I_C_Order.Table_Name, item.getC_Order_ID());\n+\t\t}\n+\t};\n+\n+\t@Override\n+\tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n+\t{\n+\t\t// Services\n+\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n+\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n+\n+\t\t// retrieve the order\n+\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -90,15 +80,9 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \t@Override\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n-\t\t// Services\n-\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n-\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n-\n-\t\t// retrieve the order\n-\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);\n-\n-\t\t// create a request based on the order's information.\n-\t\trequestBL.createTestApplianceRequestFromOrder(order);\n+\t\t// retrieve the order and generate requests\n+\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n \t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 19412e194a..77a4cb4495 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -90,15 +80,9 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \t@Override\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n-\t\t// Services\n-\t\tfinal IQueueDAO queueDAO = Services.get(IQueueDAO.class);\n-\t\tfinal IRequestBL requestBL = Services.get(IRequestBL.class);\n-\n-\t\t// retrieve the order\n-\t\tfinal I_C_Order order = queueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName).get(0);\n-\n-\t\t// create a request based on the order's information.\n-\t\trequestBL.createTestApplianceRequestFromOrder(order);\n+\t\t// retrieve the order and generate requests\n+\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n \t}\n", "next_change": {"commit": "2ea598ff6462df0b2fe7ba2e031235598e526247", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\nindex 77a4cb4495..e0fab6f4c9 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/service/async/spi/impl/R_Request_CreateFromOrder_Async.java\n", "chunk": "@@ -81,7 +81,7 @@ public class R_Request_CreateFromOrder_Async extends WorkpackageProcessorAdapter\n \tpublic Result processWorkPackage(final I_C_Queue_WorkPackage workPackage, final String localTrxName)\n \t{\n \t\t// retrieve the order and generate requests\n-\t\tqueueDAO.retrieveItems(workPackage, I_C_Order.class, localTrxName)\n+\t\tqueueDAO.retrieveAllItems(workPackage, I_C_Order.class)\n \t\t\t\t.forEach(requestBL::createRequestFromOrder);\n \n \t\treturn Result.SUCCESS;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2ea598ff6462df0b2fe7ba2e031235598e526247", "committedDate": "2022-01-05 17:53:23 +0100", "message": "Improve retrieval performance of workpackage items for WP processors (#12267)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMzIxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526803218", "body": "fix/rename the test", "bodyText": "fix/rename the test", "bodyHTML": "<p dir=\"auto\">fix/rename the test</p>", "author": "teosarca", "createdAt": "2020-11-19T11:43:33Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java", "diffHunk": "@@ -115,6 +118,28 @@ public void createRequestForDDOrderLine()\n \n \t}\n \n+\t@Test\n+\tpublic void createTestApplianceRequestFromOrder()", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 80daa2a804..2b83f6ff43 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n", "chunk": "@@ -119,23 +123,24 @@ public class RequestBLTest\n \t}\n \n \t@Test\n-\tpublic void createTestApplianceRequestFromOrder()\n+\tpublic void createRequestFromOrder()\n \t{\n \t\tfinal I_C_Order order = createOrder();\n+\t\tfinal I_R_RequestType soRequestType = createRequestType(\"RequestType\");\n \n-\t\tfinal I_R_Request request = requestBL.createTestApplianceRequestFromOrder(order);\n+\t\tfinal I_R_Request request = requestBL.createRequestFromOrder(order);\n \n \t\tassertThat(request.getAD_Org_ID()).isEqualTo(order.getAD_Org_ID());\n-\t\tassertThat(request.getM_Product_ID()).isEqualTo(order.getM_Product_ID());\n-\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(requestTypeDAO.retrieveTestApplianceRequestTypeId());\n+\t\tassertThat(request.getM_Product_ID()).isEqualTo(-1);\n+\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(soRequestType.getR_RequestType_ID());\n \t\tassertThat(request.getAD_Table_ID()).isEqualTo(getTableId(I_C_Order.class));\n \t\tassertThat(request.getRecord_ID()).isEqualTo(order.getC_Order_ID());\n \t\tassertThat(request.getC_BPartner_ID()).isEqualTo(order.getC_BPartner_ID());\n \t\tassertThat(request.getAD_User_ID()).isEqualTo(order.getAD_User_ID());\n \t\tassertThat(request.getDateDelivered()).isEqualTo(order.getDatePromised());\n-\t\tassertThat(request.getSummary()).isEqualTo(order.getDescription());\n+\t\tassertThat(request.getSummary()).isEqualTo(\" \");\n \t\tassertThat(request.getConfidentialType()).isEqualTo(X_R_Request.CONFIDENTIALTYPE_Internal);\n-\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(0);\n+\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(-1);\n \t\tassertThat(request.getPerformanceType()).isNullOrEmpty();\n \n \t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 80daa2a804..1cc2461809 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n", "chunk": "@@ -119,23 +123,24 @@ public class RequestBLTest\n \t}\n \n \t@Test\n-\tpublic void createTestApplianceRequestFromOrder()\n+\tpublic void createRequestFromOrder()\n \t{\n \t\tfinal I_C_Order order = createOrder();\n+\t\tfinal I_R_RequestType soRequestType = createRequestType(\"RequestType\");\n \n-\t\tfinal I_R_Request request = requestBL.createTestApplianceRequestFromOrder(order);\n+\t\tfinal I_R_Request request = requestBL.createRequestFromOrder(order);\n \n \t\tassertThat(request.getAD_Org_ID()).isEqualTo(order.getAD_Org_ID());\n-\t\tassertThat(request.getM_Product_ID()).isEqualTo(order.getM_Product_ID());\n-\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(requestTypeDAO.retrieveTestApplianceRequestTypeId());\n+\t\tassertThat(request.getM_Product_ID()).isEqualTo(-1);\n+\t\tassertThat(request.getR_RequestType_ID()).isEqualTo(soRequestType.getR_RequestType_ID());\n \t\tassertThat(request.getAD_Table_ID()).isEqualTo(getTableId(I_C_Order.class));\n \t\tassertThat(request.getRecord_ID()).isEqualTo(order.getC_Order_ID());\n \t\tassertThat(request.getC_BPartner_ID()).isEqualTo(order.getC_BPartner_ID());\n \t\tassertThat(request.getAD_User_ID()).isEqualTo(order.getAD_User_ID());\n \t\tassertThat(request.getDateDelivered()).isEqualTo(order.getDatePromised());\n-\t\tassertThat(request.getSummary()).isEqualTo(order.getDescription());\n+\t\tassertThat(request.getSummary()).isEqualTo(\" \");\n \t\tassertThat(request.getConfidentialType()).isEqualTo(X_R_Request.CONFIDENTIALTYPE_Internal);\n-\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(0);\n+\t\tassertThat(request.getM_QualityNote_ID()).isLessThanOrEqualTo(-1);\n \t\tassertThat(request.getPerformanceType()).isNullOrEmpty();\n \n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "d067d00ba913ca806f1af5a63aa01205311187f5", "committedDate": "2021-03-05 06:22:36 +0200", "message": "webui login with token (#10763)"}, {"oid": "7822b10dc17ca86de0cc099beff7c90145e03132", "committedDate": "2021-11-01 13:23:25 +0200", "message": "mobile UI prototype [tasty_ham_uat branch] (#11739)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwODE1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526808153", "body": "pls revert this file. as discussed.\r\n", "bodyText": "pls revert this file. as discussed.", "bodyHTML": "<p dir=\"auto\">pls revert this file. as discussed.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:52:17Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java", "diffHunk": "@@ -64,6 +64,7 @@ public IStringExpression toStringExpression(@NonNull final String joinOnColumnNa\n \t{\n \t\treturn sql.resolvePartial(Evaluatees\n \t\t\t\t.mapBuilder()\n+\t\t\t\t.put(SQL_PARAM_FilterSql, joinOnColumnNameFQ)", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\nindex 8b73c79dac..c161e29e68 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n", "chunk": "@@ -64,7 +63,6 @@ public class SqlForFetchingLookupById\n \t{\n \t\treturn sql.resolvePartial(Evaluatees\n \t\t\t\t.mapBuilder()\n-\t\t\t\t.put(SQL_PARAM_FilterSql, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_KeyId, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_ShowInactive, SQL_PARAM_VALUE_ShowInactive_Yes)\n \t\t\t\t.build());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\nindex 8b73c79dac..c161e29e68 100644\n--- a/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n+++ b/backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/descriptor/sql/SqlForFetchingLookupById.java\n", "chunk": "@@ -64,7 +63,6 @@ public class SqlForFetchingLookupById\n \t{\n \t\treturn sql.resolvePartial(Evaluatees\n \t\t\t\t.mapBuilder()\n-\t\t\t\t.put(SQL_PARAM_FilterSql, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_KeyId, joinOnColumnNameFQ)\n \t\t\t\t.put(SQL_PARAM_ShowInactive, SQL_PARAM_VALUE_ShowInactive_Yes)\n \t\t\t\t.build());\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "7013ab1e89ca86b9f278f3bfc13846deee8391e1", "committedDate": "2021-01-24 13:12:31 +0200", "message": "Service repair feature (2nd increment) (#10512)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwOTY1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526809655", "body": "fallback to `<space>`. remove the TODO.\r\n", "bodyText": "fallback to <space>. remove the TODO.", "bodyHTML": "<p dir=\"auto\">fallback to <code>&lt;space&gt;</code>. remove the TODO.</p>", "author": "teosarca", "createdAt": "2020-11-19T11:54:52Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +167,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\n+\t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n+\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here", "originalCommit": "b07e6096e52ca0598af562d772bfde6a87deed08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..7fcd7b063f 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -168,16 +169,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 7fcd7b063f..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -171,14 +173,14 @@ public class RequestBL implements IRequestBL\n \t@Override\n \tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n \t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex a460e1a6c3..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -168,16 +171,16 @@ public class RequestBL implements IRequestBL\n \t}\n \n \t@Override\n-\tpublic I_R_Request createTestApplianceRequestFromOrder(@NonNull final I_C_Order order)\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal RequestTypeId requestTypeId = requestTypeDAO.retrieveTestApplianceRequestTypeId();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n-\t\t\t\t.summary(order.getDescription()) // TODO: Decide what to put here\n+\t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId)\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 9587cd91d4..8c78c9dd40 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -189,9 +207,9 @@ public class RequestBL implements IRequestBL\n \t\treturn createRequest(requestCandidate);\n \t}\n \n-\tprivate I_R_Request createRequest(final RequestCandidate requestCandidate)\n+\t@Override\n+\tpublic I_R_Request createRequest(final RequestCandidate requestCandidate)\n \t{\n-\t\tfinal IRequestDAO requestsRepo = Services.get(IRequestDAO.class);\n \t\treturn requestsRepo.createRequest(requestCandidate);\n \t}\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}]}, {"oid": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "url": "https://github.com/metasfresh/metasfresh/commit/3333acb2990759ae83b9f9c1a427c8c579f941d0", "message": "#10197\n - Implemented review notes.", "committedDate": "2020-11-19T15:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5MjYzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r526992635", "body": "use `> 0` instead of `!= 0`\r\n", "bodyText": "use > 0 instead of != 0", "bodyHTML": "<p dir=\"auto\">use <code>&gt; 0</code> instead of <code>!= 0</code></p>", "author": "teosarca", "createdAt": "2020-11-19T15:48:28Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.document.IDocTypeDAO;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n+\t\tif (docType.getR_RequestType_ID() != 0)", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNjg2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527006860", "body": "use order.getC_DocType_ID() in case of completed orders.\r\n", "bodyText": "use order.getC_DocType_ID() in case of completed orders.", "bodyHTML": "<p dir=\"auto\">use order.getC_DocType_ID() in case of completed orders.</p>", "author": "teosarca", "createdAt": "2020-11-19T16:06:02Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package de.metas.order.model.validator;\n+\n+import de.metas.document.IDocTypeDAO;\n+import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.compiere.model.I_C_DocType;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.ModelValidator;\n+\n+@Interceptor(I_C_Order.class)\n+public class C_Order\n+{\n+\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\n+\t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n+\tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\nindex 9eada13fcc..31499c73d6 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/model/validator/C_Order.java\n", "chunk": "@@ -1,25 +1,27 @@\n package de.metas.order.model.validator;\n \n-import de.metas.document.IDocTypeDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.request.RequestTypeId;\n import de.metas.request.service.async.spi.impl.R_Request_CreateFromOrder_Async;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.ad.modelvalidator.annotations.DocValidate;\n import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n-import org.compiere.model.I_C_DocType;\n import org.compiere.model.I_C_Order;\n import org.compiere.model.ModelValidator;\n \n+import java.util.Optional;\n+\n @Interceptor(I_C_Order.class)\n public class C_Order\n {\n-\tprivate final IDocTypeDAO docTypeDAO = Services.get(IDocTypeDAO.class);\n+\tprivate final IOrderBL orderBL = Services.get(IOrderBL.class);\n \n \t@DocValidate(timings = ModelValidator.TIMING_AFTER_COMPLETE)\n \tpublic void createRequest(@NonNull final de.metas.adempiere.model.I_C_Order order)\n \t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocTypeTarget_ID());\n-\t\tif (docType.getR_RequestType_ID() != 0)\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n+\t\tif (requestType.isPresent())\n \t\t{\n \t\t\tR_Request_CreateFromOrder_Async.createWorkpackage(order);\n \t\t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNzcwNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527007705", "body": "use order.getC_DocType_ID()\r\n", "bodyText": "use order.getC_DocType_ID()", "bodyHTML": "<p dir=\"auto\">use order.getC_DocType_ID()</p>", "author": "teosarca", "createdAt": "2020-11-19T16:07:13Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java", "diffHunk": "@@ -166,6 +168,25 @@ public I_R_Request createRequestFromDDOrderLine(@NonNull final I_DD_OrderLine dd\n \t\treturn createRequest(requestCandidate);\n \t}\n \n+\t@Override\n+\tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwOTEyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527009125", "bodyText": "and because we have 2 places with same issue... i suggest introducing a new method in OrderBL:\nOptional getRequestTypeForCreatingNewRequestsAfterComplete(I_C_Order order)", "author": "teosarca", "createdAt": "2020-11-19T16:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNzcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 7fcd7b063f..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -171,14 +173,14 @@ public class RequestBL implements IRequestBL\n \t@Override\n \tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n \t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 7fcd7b063f..9587cd91d4 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -171,14 +173,14 @@ public class RequestBL implements IRequestBL\n \t@Override\n \tpublic I_R_Request createRequestFromOrder(@NonNull final I_C_Order order)\n \t{\n-\t\tfinal int requestTypeId = docTypeDAO.getById(order.getC_DocTypeTarget_ID()).getR_RequestType_ID();\n+\t\tfinal Optional<RequestTypeId> requestType = orderBL.getRequestTypeForCreatingNewRequestsAfterComplete(order);\n \n \t\tfinal RequestCandidate requestCandidate = RequestCandidate.builder()\n \t\t\t\t.summary(order.getDescription() != null ? order.getDescription() : \" \")\n \t\t\t\t.confidentialType(X_R_Request.CONFIDENTIALTYPE_Internal)\n \t\t\t\t.orgId(OrgId.ofRepoId(order.getAD_Org_ID()))\n \t\t\t\t.recordRef(TableRecordReference.of(order))\n-\t\t\t\t.requestTypeId(requestTypeId > 0 ? RequestTypeId.ofRepoId(requestTypeId) : getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx())))\n+\t\t\t\t.requestTypeId(requestType.orElseGet(() -> getRequestTypeId(SOTrx.ofBoolean(order.isSOTrx()))))\n \t\t\t\t.partnerId(BPartnerId.ofRepoId(order.getC_BPartner_ID()))\n \t\t\t\t.userId(UserId.ofRepoIdOrNull(order.getAD_User_ID()))\n \t\t\t\t.dateDelivered(TimeUtil.asZonedDateTime(order.getDatePromised()))\n", "next_change": {"commit": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\nindex 9587cd91d4..8c78c9dd40 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/request/api/impl/RequestBL.java\n", "chunk": "@@ -189,9 +207,9 @@ public class RequestBL implements IRequestBL\n \t\treturn createRequest(requestCandidate);\n \t}\n \n-\tprivate I_R_Request createRequest(final RequestCandidate requestCandidate)\n+\t@Override\n+\tpublic I_R_Request createRequest(final RequestCandidate requestCandidate)\n \t{\n-\t\tfinal IRequestDAO requestsRepo = Services.get(IRequestDAO.class);\n \t\treturn requestsRepo.createRequest(requestCandidate);\n \t}\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "634a5506d090cbd90c9a76e1d32d4e602b5942b1", "committedDate": "2021-03-29 21:39:56 +0300", "message": "Gh10700 org switch (#10880)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxMTE1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527011152", "body": "... u will have to setC_DocType_ID here", "bodyText": "... u will have to setC_DocType_ID here", "bodyHTML": "<p dir=\"auto\">... u will have to setC_DocType_ID here</p>", "author": "teosarca", "createdAt": "2020-11-19T16:11:46Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java", "diffHunk": "@@ -131,6 +161,27 @@ private I_DD_Order createDDOrder()\n \t\treturn ddOrder;\n \t}\n \n+\tprivate I_C_Order createOrder()\n+\t{\n+\t\tfinal I_C_Order order = newInstance(I_C_Order.class);\n+\n+\t\torder.setIsSOTrx(true);\n+\t\torder.setC_BPartner_ID(createPartner(\"Partner 3\").getC_BPartner_ID());\n+\t\torder.setAD_User_ID(createUser(\"User 3\").getAD_User_ID());\n+\t\torder.setDatePromised(de.metas.common.util.time.SystemTime.asDayTimestamp());\n+\t\torder.setC_DocTypeTarget_ID(createDocType().getC_DocType_ID());", "originalCommit": "3333acb2990759ae83b9f9c1a427c8c579f941d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 2b83f6ff43..1cc2461809 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n", "chunk": "@@ -169,7 +169,7 @@ public class RequestBLTest\n \t\torder.setC_BPartner_ID(createPartner(\"Partner 3\").getC_BPartner_ID());\n \t\torder.setAD_User_ID(createUser(\"User 3\").getAD_User_ID());\n \t\torder.setDatePromised(de.metas.common.util.time.SystemTime.asDayTimestamp());\n-\t\torder.setC_DocTypeTarget_ID(createDocType().getC_DocType_ID());\n+\t\torder.setC_DocType_ID(createDocType().getC_DocType_ID());\n \t\tsave(order);\n \t\treturn order;\n \t}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\nindex 2b83f6ff43..1cc2461809 100644\n--- a/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n+++ b/backend/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/request/api/impl/RequestBLTest.java\n", "chunk": "@@ -169,7 +169,7 @@ public class RequestBLTest\n \t\torder.setC_BPartner_ID(createPartner(\"Partner 3\").getC_BPartner_ID());\n \t\torder.setAD_User_ID(createUser(\"User 3\").getAD_User_ID());\n \t\torder.setDatePromised(de.metas.common.util.time.SystemTime.asDayTimestamp());\n-\t\torder.setC_DocTypeTarget_ID(createDocType().getC_DocType_ID());\n+\t\torder.setC_DocType_ID(createDocType().getC_DocType_ID());\n \t\tsave(order);\n \t\treturn order;\n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "2396d3de42bea3c7de37f2fd944731c74a04aceb", "committedDate": "2020-12-08 16:00:48 +0200", "message": "#10377 Request creation from InOut (#10380)"}, {"oid": "4ecb66c90731a19ba3f6885d55056e615c090293", "committedDate": "2021-01-12 11:55:09 +0200", "message": "Service/Repair Feature (#10447)"}, {"oid": "d067d00ba913ca806f1af5a63aa01205311187f5", "committedDate": "2021-03-05 06:22:36 +0200", "message": "webui login with token (#10763)"}, {"oid": "7822b10dc17ca86de0cc099beff7c90145e03132", "committedDate": "2021-11-01 13:23:25 +0200", "message": "mobile UI prototype [tasty_ham_uat branch] (#11739)"}]}, {"oid": "d0195cf014036f51ca2db6c6b794d977d15a65af", "url": "https://github.com/metasfresh/metasfresh/commit/d0195cf014036f51ca2db6c6b794d977d15a65af", "message": "#10197\n - Implemented Review Notes", "committedDate": "2020-11-19T23:15:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzUzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527483533", "body": "pls use `<= 0`", "bodyText": "pls use <= 0", "bodyHTML": "<p dir=\"auto\">pls use <code>&lt;= 0</code></p>", "author": "teosarca", "createdAt": "2020-11-20T07:14:40Z", "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -1026,6 +1029,19 @@ public ProjectId getProjectIdOrNull(@NonNull final OrderLineId orderLineId)\n \t\treturn orderProjectId;\n \t}\n \n+\t@Override\n+\tpublic Optional<RequestTypeId> getRequestTypeForCreatingNewRequestsAfterComplete(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n+\n+\t\tif (docType.getR_RequestType_ID() == 0)", "originalCommit": "d0195cf014036f51ca2db6c6b794d977d15a65af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mzk1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10217#discussion_r527483951", "bodyText": "or even better, just return\nreturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));", "author": "teosarca", "createdAt": "2020-11-20T07:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "40e299f142b3b0902f197f1bf4197fb7129652b3", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex fddbed4ac6..7f8777ebe7 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1034,12 +1034,12 @@ public class OrderBL implements IOrderBL\n \t{\n \t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n \n-\t\tif (docType.getR_RequestType_ID() == 0)\n+\t\tif (docType.getR_RequestType_ID() <= 0)\n \t\t{\n \t\t\treturn Optional.empty();\n \t\t}\n \n-\t\treturn Optional.of(RequestTypeId.ofRepoId(docType.getR_RequestType_ID()));\n+\t\treturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));\n \t}\n \n \t@Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex fddbed4ac6..7f8777ebe7 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1034,12 +1034,12 @@ public class OrderBL implements IOrderBL\n \t{\n \t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n \n-\t\tif (docType.getR_RequestType_ID() == 0)\n+\t\tif (docType.getR_RequestType_ID() <= 0)\n \t\t{\n \t\t\treturn Optional.empty();\n \t\t}\n \n-\t\treturn Optional.of(RequestTypeId.ofRepoId(docType.getR_RequestType_ID()));\n+\t\treturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));\n \t}\n \n \t@Override\n", "next_change": {"commit": "13bcdbd2af652e442da6722a0ae9cb2f2be81ef0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 7f8777ebe7..eb765c1f6a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1029,19 +1027,6 @@ public class OrderBL implements IOrderBL\n \t\treturn orderProjectId;\n \t}\n \n-\t@Override\n-\tpublic Optional<RequestTypeId> getRequestTypeForCreatingNewRequestsAfterComplete(@NonNull final I_C_Order order)\n-\t{\n-\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n-\n-\t\tif (docType.getR_RequestType_ID() <= 0)\n-\t\t{\n-\t\t\treturn Optional.empty();\n-\t\t}\n-\n-\t\treturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));\n-\t}\n-\n \t@Override\n \tpublic ZoneId getTimeZone(@NonNull final I_C_Order order)\n \t{\n", "next_change": {"commit": "1eff7c406383029e4dd5e6a5968d57580211a37f", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex eb765c1f6a..2dfc2fcb61 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1027,6 +1030,19 @@ public class OrderBL implements IOrderBL\n \t\treturn orderProjectId;\n \t}\n \n+\t@Override\n+\tpublic Optional<RequestTypeId> getRequestTypeForCreatingNewRequestsAfterComplete(@NonNull final I_C_Order order)\n+\t{\n+\t\tfinal I_C_DocType docType = docTypeDAO.getById(order.getC_DocType_ID());\n+\n+\t\tif (docType.getR_RequestType_ID() <= 0)\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\treturn Optional.ofNullable(RequestTypeId.ofRepoIdOrNull(docType.getR_RequestType_ID()));\n+\t}\n+\n \t@Override\n \tpublic ZoneId getTimeZone(@NonNull final I_C_Order order)\n \t{\n", "next_change": {"commit": "8150ae9b599b9703fa80e4ea9a2d0655ec810a54", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 2dfc2fcb61..2540aad627 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1051,4 +1062,77 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n+\n+\t@Override\n+\tpublic void validateHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tif (!isHaddexOrder(order))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n+\n+\t\tif (!hasHaddexLine)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tvalidateHaddexDate(order);\n+\t}\n+\n+\t@Override\n+\tpublic void validateHaddexDate(final I_C_Order order)\n+\t{\n+\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n+\t\t\t\tChronoUnit.MONTHS.between(\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n+\t\t\t\t));\n+\n+\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n+\t\t{\n+\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tif (!order.isSOTrx())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\n+\t\tif (!partner.isHaddexCheck())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (partner.getDateHaddexCheck() == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n+\t{\n+\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n+\t\tif (months > 0)\n+\t\t{\n+\t\t\treturn months;\n+\t\t}\n+\t\treturn Integer.MAX_VALUE;\n+\t}\n }\n", "next_change": {"commit": "172a8795efcdc783c37d7d3be81b0321781bbd5b", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 2540aad627..5b5d2a2960 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1062,77 +1057,4 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n-\n-\t@Override\n-\tpublic void validateHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n-\n-\t\tif (!isHaddexOrder(order))\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n-\n-\t\tif (!hasHaddexLine)\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tvalidateHaddexDate(order);\n-\t}\n-\n-\t@Override\n-\tpublic void validateHaddexDate(final I_C_Order order)\n-\t{\n-\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n-\t\t\t\tChronoUnit.MONTHS.between(\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n-\t\t\t\t));\n-\n-\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n-\t\t{\n-\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tif (!order.isSOTrx())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\n-\t\tif (!partner.isHaddexCheck())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (partner.getDateHaddexCheck() == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\treturn true;\n-\t}\n-\n-\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n-\t{\n-\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n-\t\tif (months > 0)\n-\t\t{\n-\t\t\treturn months;\n-\t\t}\n-\t\treturn Integer.MAX_VALUE;\n-\t}\n }\n", "next_change": {"commit": "09a39dec5552fd49de80138f872dabc22440f4e8", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 5b5d2a2960..92df2665ae 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1057,4 +1076,77 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n+\n+\t@Override\n+\tpublic void validateHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tif (!isHaddexOrder(order))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n+\n+\t\tif (!hasHaddexLine)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tvalidateHaddexDate(order);\n+\t}\n+\n+\t@Override\n+\tpublic void validateHaddexDate(final I_C_Order order)\n+\t{\n+\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n+\t\t\t\tChronoUnit.MONTHS.between(\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n+\t\t\t\t));\n+\n+\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n+\t\t{\n+\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tif (!order.isSOTrx())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\n+\t\tif (!partner.isHaddexCheck())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (partner.getDateHaddexCheck() == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n+\t{\n+\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n+\t\tif (months > 0)\n+\t\t{\n+\t\t\treturn months;\n+\t\t}\n+\t\treturn Integer.MAX_VALUE;\n+\t}\n }\n", "next_change": {"commit": "ac243c51324921a3366b899b5980a8368b4151e7", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 92df2665ae..171000f1fc 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1076,77 +1057,4 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n-\n-\t@Override\n-\tpublic void validateHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n-\n-\t\tif (!isHaddexOrder(order))\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n-\n-\t\tif (!hasHaddexLine)\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tvalidateHaddexDate(order);\n-\t}\n-\n-\t@Override\n-\tpublic void validateHaddexDate(final I_C_Order order)\n-\t{\n-\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n-\t\t\t\tChronoUnit.MONTHS.between(\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n-\t\t\t\t));\n-\n-\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n-\t\t{\n-\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tif (!order.isSOTrx())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\n-\t\tif (!partner.isHaddexCheck())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (partner.getDateHaddexCheck() == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\treturn true;\n-\t}\n-\n-\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n-\t{\n-\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n-\t\tif (months > 0)\n-\t\t{\n-\t\t\treturn months;\n-\t\t}\n-\t\treturn Integer.MAX_VALUE;\n-\t}\n }\n", "next_change": {"commit": "cdb6ed82da5e62a8ca89863320b26ed373e9fd3e", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 171000f1fc..a5b25f18e3 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1057,4 +1076,77 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n+\n+\t@Override\n+\tpublic void validateHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tif (!isHaddexOrder(order))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n+\n+\t\tif (!hasHaddexLine)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tvalidateHaddexDate(order);\n+\t}\n+\n+\t@Override\n+\tpublic void validateHaddexDate(final I_C_Order order)\n+\t{\n+\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n+\t\t\t\tChronoUnit.MONTHS.between(\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n+\t\t\t\t));\n+\n+\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n+\t\t{\n+\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tif (!order.isSOTrx())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\n+\t\tif (!partner.isHaddexCheck())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (partner.getDateHaddexCheck() == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n+\t{\n+\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n+\t\tif (months > 0)\n+\t\t{\n+\t\t\treturn months;\n+\t\t}\n+\t\treturn Integer.MAX_VALUE;\n+\t}\n }\n", "next_change": {"commit": "b0f6c2df1960daef954db04987fd58d340dbf394", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex a5b25f18e3..4a40239f51 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1076,77 +1061,4 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n-\n-\t@Override\n-\tpublic void validateHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n-\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n-\n-\t\tif (!isHaddexOrder(order))\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n-\n-\t\tif (!hasHaddexLine)\n-\t\t{\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tvalidateHaddexDate(order);\n-\t}\n-\n-\t@Override\n-\tpublic void validateHaddexDate(final I_C_Order order)\n-\t{\n-\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n-\t\t\t\tChronoUnit.MONTHS.between(\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n-\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n-\t\t\t\t));\n-\n-\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n-\t\t{\n-\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isHaddexOrder(final I_C_Order order)\n-\t{\n-\t\tif (!order.isSOTrx())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n-\n-\t\tif (!partner.isHaddexCheck())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (partner.getDateHaddexCheck() == null)\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\treturn true;\n-\t}\n-\n-\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n-\t{\n-\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n-\t\tif (months > 0)\n-\t\t{\n-\t\t\treturn months;\n-\t\t}\n-\t\treturn Integer.MAX_VALUE;\n-\t}\n }\n", "next_change": {"commit": "d192109ca7d254a1aa69c5ce6391e631638633ca", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 4a40239f51..ef731cbde1 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1061,4 +1086,77 @@ public class OrderBL implements IOrderBL\n \t\tfinal OrgId orgId = OrgId.ofRepoIdOrAny(order.getAD_Org_ID());\n \t\treturn orgsRepo.getTimeZone(orgId);\n \t}\n+\n+\t@Override\n+\tpublic void validateHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tif (!isHaddexOrder(order))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tboolean hasHaddexLine = orderDAO.retrieveOrderLines(order)\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(lineId -> productBL.isHaddexProduct(ProductId.ofRepoId(lineId.getM_Product_ID())));\n+\n+\t\tif (!hasHaddexLine)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tvalidateHaddexDate(order);\n+\t}\n+\n+\t@Override\n+\tpublic void validateHaddexDate(final I_C_Order order)\n+\t{\n+\t\tfinal IBPartnerDAO partnerDAO = Services.get(IBPartnerDAO.class);\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\t\tfinal long differenceBetweenHaddexCheckDateAndPromisedDateInMonths = Math.abs(\n+\t\t\t\tChronoUnit.MONTHS.between(\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(partner.getDateHaddexCheck()),\n+\t\t\t\t\t\tTimeUtil.asZonedDateTime(order.getDatePromised())\n+\t\t\t\t));\n+\n+\t\tif (differenceBetweenHaddexCheckDateAndPromisedDateInMonths > getMaxHaddexAgeInMonths(order.getAD_Client_ID(), order.getAD_Org_ID()))\n+\t\t{\n+\t\t\tthrow new AdempiereException(MSG_HADDEX_CHECK_ERROR).markAsUserValidationError();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isHaddexOrder(final I_C_Order order)\n+\t{\n+\t\tif (!order.isSOTrx())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal org.compiere.model.I_C_BPartner partner = partnerDAO.getById(order.getC_BPartner_ID());\n+\n+\t\tif (!partner.isHaddexCheck())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (partner.getDateHaddexCheck() == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\tprivate int getMaxHaddexAgeInMonths(int clientID, int orgID)\n+\t{\n+\t\tfinal int months = sysConfigBL.getIntValue(SYS_CONFIG_MAX_HADDEX_AGE_IN_MONTHS, 24, clientID, orgID);\n+\t\tif (months > 0)\n+\t\t{\n+\t\t\treturn months;\n+\t\t}\n+\t\treturn Integer.MAX_VALUE;\n+\t}\n }\n", "next_change": {"commit": "350ded6bf42fda4507249b7d21555dae041650ab", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex ef731cbde1..feb9916824 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1159,4 +1191,12 @@ public class OrderBL implements IOrderBL\n \t\t}\n \t\treturn Integer.MAX_VALUE;\n \t}\n+\n+\tpublic void closeOrder(final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = getById(orderId);\n+\t\tdocumentBL.processEx(order, X_C_Order.DOCACTION_Close);\n+\n+\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n+\t}\n }\n", "next_change": {"commit": "e71284ae9fbfdc2f67d9446d14f6c699137c9f5e", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex feb9916824..4215dca41f 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1191,12 +1160,4 @@ public class OrderBL implements IOrderBL\n \t\t}\n \t\treturn Integer.MAX_VALUE;\n \t}\n-\n-\tpublic void closeOrder(final OrderId orderId)\n-\t{\n-\t\tfinal I_C_Order order = getById(orderId);\n-\t\tdocumentBL.processEx(order, X_C_Order.DOCACTION_Close);\n-\n-\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n-\t}\n }\n", "next_change": {"commit": "65429ac095386c635c8fc834bc7bddff6d923793", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 4215dca41f..06b50ed640 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1160,4 +1208,12 @@ public class OrderBL implements IOrderBL\n \t\t}\n \t\treturn Integer.MAX_VALUE;\n \t}\n+\n+\tpublic void closeOrder(final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = getById(orderId);\n+\t\tdocumentBL.processEx(order, X_C_Order.DOCACTION_Close);\n+\n+\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n+\t}\n }\n", "next_change": {"commit": "7822b10dc17ca86de0cc099beff7c90145e03132", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 06b50ed640..262b952bb8 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1216,4 +1189,10 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n }\n", "next_change": {"commit": "763e022b1b72d9cf9dc2eec8d4c21e8a26742beb", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 262b952bb8..8760351b1b 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1189,10 +1159,4 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n-\n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n-\t}\n }\n", "next_change": {"commit": "0085f61308d507bb9c1d22b89005cbdf8c9e4443", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 8760351b1b..70b533d296 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1159,4 +1151,10 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n }\n", "next_change": {"commit": "f8927aea5d01be037a42b2de3845463559513564", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 70b533d296..57c1ac7500 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1151,10 +1194,4 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n-\n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n-\t}\n }\n", "next_change": {"commit": "54e6ac26b8a08c684019502ed112e6e5a4bf68ff", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 57c1ac7500..1a4571b83b 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1194,4 +1187,10 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n }\n", "next_change": {"commit": "75f701d9fee358a1375150eba64b007d483895d9", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 1a4571b83b..562f824bb2 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1187,10 +1159,4 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n-\n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n-\t}\n }\n", "next_change": {"commit": "2572792829b00ae3ce896bacb25bd6dc53436f91", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 562f824bb2..6bf3818924 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1159,4 +1190,50 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n+\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n+\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n+\n+\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n+\t\tif (!Check.isEmpty(locationEmail))\n+\t\t{\n+\t\t\treturn locationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n+\n+\t\tif (orderContactId != null)\n+\t\t{\n+\t\t\tfinal I_AD_User contactRecord = bpartnerDAO.getContactById(orderContactId);\n+\n+\t\t\tfinal BPartnerLocationId contactLocationId = BPartnerLocationId.ofRepoIdOrNull(bpartnerId, contactRecord.getC_BPartner_Location_ID());\n+\t\t\tif (contactLocationId != null)\n+\t\t\t{\n+\t\t\t\tfinal I_C_BPartner_Location contactLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(contactLocationId);\n+\t\t\t\tfinal String contactLocationEmail = contactLocationRecord.getEMail();\n+\n+\t\t\t\tif (!Check.isEmpty(contactLocationEmail))\n+\t\t\t\t{\n+\t\t\t\t\treturn contactLocationEmail;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n+\n+\t\tif(bpartnerLocationId == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n+\n+\t\treturn billLocationRecord.getEMail();\n+\t}\n }\n", "next_change": {"commit": "10f2751785d1b624cc9fcc3bad5115f5768ec015", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 6bf3818924..2fa5df492c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1236,4 +1206,10 @@ public class OrderBL implements IOrderBL\n \n \t\treturn billLocationRecord.getEMail();\n \t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n }\n", "next_change": {"commit": "ebb76399b46596a637bc2d8ec62cd7e63232e8a0", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 2fa5df492c..93b6d77268 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1160,56 +1205,4 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n-\n-\t@Override\n-\t@Nullable\n-\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n-\t{\n-\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n-\n-\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n-\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n-\n-\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n-\t\tif (!Check.isEmpty(locationEmail))\n-\t\t{\n-\t\t\treturn locationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n-\n-\t\tif (orderContactId != null)\n-\t\t{\n-\t\t\tfinal I_AD_User contactRecord = bpartnerDAO.getContactById(orderContactId);\n-\n-\t\t\tfinal BPartnerLocationId contactLocationId = BPartnerLocationId.ofRepoIdOrNull(bpartnerId, contactRecord.getC_BPartner_Location_ID());\n-\t\t\tif (contactLocationId != null)\n-\t\t\t{\n-\t\t\t\tfinal I_C_BPartner_Location contactLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(contactLocationId);\n-\t\t\t\tfinal String contactLocationEmail = contactLocationRecord.getEMail();\n-\n-\t\t\t\tif (!Check.isEmpty(contactLocationEmail))\n-\t\t\t\t{\n-\t\t\t\t\treturn contactLocationEmail;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n-\n-\t\tif(bpartnerLocationId == null)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n-\n-\t\treturn billLocationRecord.getEMail();\n-\t}\n-\n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n-\t}\n }\n", "next_change": {"commit": "069fe16862562a05d2495223982b00db1578bd1a", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 93b6d77268..8da745d4b6 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1205,4 +1177,45 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n+\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n+\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n+\n+\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n+\t\tif (!Check.isEmpty(locationEmail))\n+\t\t{\n+\t\t\treturn locationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n+\n+\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n+\t\tif (!Check.isEmpty(contactLocationEmail))\n+\t\t{\n+\t\t\treturn contactLocationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n+\n+\t\tif(bpartnerLocationId == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n+\n+\t\treturn billLocationRecord.getEMail();\n+\t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n }\n", "next_change": {"commit": "275c7eecf879a8d255eb422bf39055aaa69cf2a5", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 8da745d4b6..fc2bc66004 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1178,41 +1157,6 @@ public class OrderBL implements IOrderBL\n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n \n-\t@Override\n-\t@Nullable\n-\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n-\t{\n-\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n-\n-\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n-\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n-\n-\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n-\t\tif (!Check.isEmpty(locationEmail))\n-\t\t{\n-\t\t\treturn locationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n-\n-\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n-\t\tif (!Check.isEmpty(contactLocationEmail))\n-\t\t{\n-\t\t\treturn contactLocationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n-\n-\t\tif(bpartnerLocationId == null)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n-\n-\t\treturn billLocationRecord.getEMail();\n-\t}\n-\n \t@Override\n \tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n \t{\n", "next_change": {"commit": "216efe82dc807cad451eaef9997724671ec91662", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex fc2bc66004..e71ab44957 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1157,6 +1179,41 @@ public class OrderBL implements IOrderBL\n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n+\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n+\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n+\n+\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n+\t\tif (!Check.isEmpty(locationEmail))\n+\t\t{\n+\t\t\treturn locationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n+\n+\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n+\t\tif (!Check.isEmpty(contactLocationEmail))\n+\t\t{\n+\t\t\treturn contactLocationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n+\n+\t\tif(bpartnerLocationId == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n+\n+\t\treturn billLocationRecord.getEMail();\n+\t}\n+\n \t@Override\n \tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n \t{\n", "next_change": {"commit": "c1dc205faef797755fd3a62a8b06af11f4f68eba", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex e71ab44957..9a06d9e2c1 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1179,44 +1197,11 @@ public class OrderBL implements IOrderBL\n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n \n-\t@Override\n-\t@Nullable\n-\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n+\t@NonNull\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n \t{\n-\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n-\n-\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n-\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n-\n-\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n-\t\tif (!Check.isEmpty(locationEmail))\n-\t\t{\n-\t\t\treturn locationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n-\n-\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n-\t\tif (!Check.isEmpty(contactLocationEmail))\n-\t\t{\n-\t\t\treturn contactLocationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n-\n-\t\tif(bpartnerLocationId == null)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n-\n-\t\treturn billLocationRecord.getEMail();\n-\t}\n+\t\tfinal I_C_Order order = getById(orderId);\n \n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n+\t\treturn DocStatus.ofCode(order.getDocStatus());\n \t}\n }\n", "next_change": {"commit": "ae6a6f89d8cff8621235015977e16a44075d2890", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 9a06d9e2c1..377d178b67 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1197,11 +1184,44 @@ public class OrderBL implements IOrderBL\n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n \n-\t@NonNull\n-\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t@Override\n+\t@Nullable\n+\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n \t{\n-\t\tfinal I_C_Order order = getById(orderId);\n+\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n+\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n+\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n \n-\t\treturn DocStatus.ofCode(order.getDocStatus());\n+\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n+\t\tif (!Check.isEmpty(locationEmail))\n+\t\t{\n+\t\t\treturn locationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n+\n+\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n+\t\tif (!Check.isEmpty(contactLocationEmail))\n+\t\t{\n+\t\t\treturn contactLocationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n+\n+\t\tif(bpartnerLocationId == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n+\n+\t\treturn billLocationRecord.getEMail();\n+\t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n \t}\n }\n", "next_change": {"commit": "b974471027cbfb11c0a311b82307ec64d9638560", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 377d178b67..41f6bafac7 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1224,4 +1224,10 @@ public class OrderBL implements IOrderBL\n \t{\n \t\treturn getById(orderId).getDocumentNo();\n \t}\n+\n+\t@Override\n+\tpublic void save(final I_C_Order order)\n+\t{\n+\t\torderDAO.save(order);\n+\t}\n }\n", "next_change": {"commit": "76a99d7ef2bd609a41d7148e8b39a618ab76c433", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 41f6bafac7..c47fb91a33 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1225,6 +1221,14 @@ public class OrderBL implements IOrderBL\n \t\treturn getById(orderId).getDocumentNo();\n \t}\n \n+\t@NonNull\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = getById(orderId);\n+\n+\t\treturn DocStatus.ofCode(order.getDocStatus());\n+\t}\n+\n \t@Override\n \tpublic void save(final I_C_Order order)\n \t{\n", "next_change": {"commit": "90b98c39da41a15dd40c6aba05508fe0b68a597f", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex c47fb91a33..5655021ee4 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1179,59 +1200,4 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n-\n-\t@Override\n-\t@Nullable\n-\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n-\t{\n-\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n-\n-\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n-\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n-\n-\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n-\t\tif (!Check.isEmpty(locationEmail))\n-\t\t{\n-\t\t\treturn locationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n-\n-\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n-\t\tif (!Check.isEmpty(contactLocationEmail))\n-\t\t{\n-\t\t\treturn contactLocationEmail;\n-\t\t}\n-\n-\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n-\n-\t\tif(bpartnerLocationId == null)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n-\n-\t\treturn billLocationRecord.getEMail();\n-\t}\n-\n-\t@Override\n-\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn getById(orderId).getDocumentNo();\n-\t}\n-\n-\t@NonNull\n-\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n-\t{\n-\t\tfinal I_C_Order order = getById(orderId);\n-\n-\t\treturn DocStatus.ofCode(order.getDocStatus());\n-\t}\n-\n-\t@Override\n-\tpublic void save(final I_C_Order order)\n-\t{\n-\t\torderDAO.save(order);\n-\t}\n }\n", "next_change": {"commit": "0b3ca40abd123d5490ba5731d4161e3681bcd807", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 5655021ee4..1dfe74bca6 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1200,4 +1174,59 @@ public class OrderBL implements IOrderBL\n \n \t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Order closed for C_Order_ID={}\", order.getC_Order_ID());\n \t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic String getLocationEmail(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = orderDAO.getById(orderId);\n+\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(order.getC_BPartner_ID());\n+\t\tfinal I_C_BPartner_Location bpartnerLocation = bpartnerDAO.getBPartnerLocationByIdInTrx(BPartnerLocationId.ofRepoId(bpartnerId, order.getC_BPartner_Location_ID()));\n+\n+\t\tfinal String locationEmail = bpartnerLocation.getEMail();\n+\t\tif (!Check.isEmpty(locationEmail))\n+\t\t{\n+\t\t\treturn locationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerContactId orderContactId = BPartnerContactId.ofRepoIdOrNull(bpartnerId, order.getAD_User_ID());\n+\n+\t\tfinal String contactLocationEmail = bpartnerDAO.getContactLocationEmail(orderContactId);\n+\t\tif (!Check.isEmpty(contactLocationEmail))\n+\t\t{\n+\t\t\treturn contactLocationEmail;\n+\t\t}\n+\n+\t\tfinal BPartnerLocationId bpartnerLocationId = BPartnerLocationId.ofRepoIdOrNull(order.getBill_BPartner_ID(), order.getBill_Location_ID());\n+\n+\t\tif(bpartnerLocationId == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal I_C_BPartner_Location billLocationRecord = bpartnerDAO.getBPartnerLocationByIdInTrx(bpartnerLocationId);\n+\n+\t\treturn billLocationRecord.getEMail();\n+\t}\n+\n+\t@Override\n+\tpublic String getDocumentNoById(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn getById(orderId).getDocumentNo();\n+\t}\n+\n+\t@NonNull\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Order order = getById(orderId);\n+\n+\t\treturn DocStatus.ofCode(order.getDocStatus());\n+\t}\n+\n+\t@Override\n+\tpublic void save(final I_C_Order order)\n+\t{\n+\t\torderDAO.save(order);\n+\t}\n }\n", "next_change": {"commit": "a40b7c19d6cb20f5f5cd5fa5872587d2829703db", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 1dfe74bca6..2cd2a1bcf6 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1216,17 +1226,15 @@ public class OrderBL implements IOrderBL\n \t\treturn getById(orderId).getDocumentNo();\n \t}\n \n-\t@NonNull\n-\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t@Override\n+\tpublic void save(final I_C_Order order)\n \t{\n-\t\tfinal I_C_Order order = getById(orderId);\n-\n-\t\treturn DocStatus.ofCode(order.getDocStatus());\n+\t\torderDAO.save(order);\n \t}\n \n \t@Override\n-\tpublic void save(final I_C_Order order)\n+\tpublic CurrencyId getCurrencyId(final OrderId orderId)\n \t{\n-\t\torderDAO.save(order);\n+\t\treturn CurrencyId.ofRepoId(getById(orderId).getC_Currency_ID());\n \t}\n }\n", "next_change": {"commit": "26a12de3d188f9031f8429796ccf2db4d0b57ebc", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 2cd2a1bcf6..02f1c7c7c6 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1237,4 +1238,11 @@ public class OrderBL implements IOrderBL\n \t{\n \t\treturn CurrencyId.ofRepoId(getById(orderId).getC_Currency_ID());\n \t}\n+\n+\t@Override\n+\tpublic Set<OrderAndLineId> getSOLineIdsByPOLineId(@NonNull OrderAndLineId purchaseOrderLineId)\n+\t{\n+\t\treturn orderDAO.getSOLineIdsByPOLineId(purchaseOrderLineId);\n+\t}\n+\n }\n", "next_change": {"commit": "2fa1580a58107bb0850c0220ff65fcf99e7d3a46", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 02f1c7c7c6..3a3e13e862 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1245,4 +1242,12 @@ public class OrderBL implements IOrderBL\n \t\treturn orderDAO.getSOLineIdsByPOLineId(purchaseOrderLineId);\n \t}\n \n+\t@Override\n+\tpublic void updateIsOnConsignmentFromLines(OrderId orderId)\n+\t{\n+\t\tfinal boolean isOnConsignment = orderDAO.hasIsOnConsignmentLines(orderId);\n+\t\tfinal I_C_Order order = getById(orderId);\n+\t\torder.setIsOnConsignment(isOnConsignment);\n+\t\tsave(order);\n+\t}\n }\n", "next_change": {"commit": "b4fa328af63783c54f6ef486be37059e163f013a", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 3a3e13e862..467443e496 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1250,4 +1253,31 @@ public class OrderBL implements IOrderBL\n \t\torder.setIsOnConsignment(isOnConsignment);\n \t\tsave(order);\n \t}\n+\n+\tpublic boolean isUseDefaultBillToLocationForBPartner(@NonNull final I_C_Order order)\n+\t{\n+\t\tif (!sysConfigBL.getBooleanValue(SYSCONFIG_USE_DEFAULT_BILL_TO_LOCATION_AS_ORDER_DEFAULT_LOCATION, false))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!order.isSOTrx())\n+\t\t{\n+\t\t\t//only sales orders are relevant\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!order.isDropShip())\n+\t\t{\n+\t\t\t//only dropShip orders are relevant\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (order.getC_BPartner_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n }\n", "next_change": {"commit": "d2982350f2a561c951a4a6c30da2fe378524fe29", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 467443e496..8a89d7cb02 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1280,4 +1288,10 @@ public class OrderBL implements IOrderBL\n \n \t\treturn true;\n \t}\n+\n+\t@Override\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn DocStatus.ofNullableCodeOrUnknown(getById(orderId).getDocStatus());\n+\t}\n }\n", "next_change": {"commit": "62263ddf889dfaf845b2ceba84a2d84233c9f46a", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 8a89d7cb02..158a784a9c 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1288,10 +1284,4 @@ public class OrderBL implements IOrderBL\n \n \t\treturn true;\n \t}\n-\n-\t@Override\n-\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn DocStatus.ofNullableCodeOrUnknown(getById(orderId).getDocStatus());\n-\t}\n }\n", "next_change": {"commit": "aea2799fb898bc316b3721eabf114bff5f5473ff", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 158a784a9c..891579731a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1284,4 +1282,10 @@ public class OrderBL implements IOrderBL\n \n \t\treturn true;\n \t}\n+\n+\t@Override\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn DocStatus.ofNullableCodeOrUnknown(getById(orderId).getDocStatus());\n+\t}\n }\n", "next_change": {"commit": "bb9777e58a7544880cd6689da59d252cd784a7aa", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex 891579731a..ca201ac76b 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1282,10 +1278,4 @@ public class OrderBL implements IOrderBL\n \n \t\treturn true;\n \t}\n-\n-\t@Override\n-\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n-\t{\n-\t\treturn DocStatus.ofNullableCodeOrUnknown(getById(orderId).getDocStatus());\n-\t}\n }\n", "next_change": {"commit": "9b64497706b00523b695ce337692ff578a49b674", "changed_code": [{"header": "diff --git a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\nindex ca201ac76b..356846872a 100644\n--- a/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n+++ b/backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java\n", "chunk": "@@ -1278,4 +1293,41 @@ public class OrderBL implements IOrderBL\n \n \t\treturn true;\n \t}\n+\n+\t@Override\n+\tpublic DocStatus getDocStatus(@NonNull final OrderId orderId)\n+\t{\n+\t\treturn DocStatus.ofNullableCodeOrUnknown(getById(orderId).getDocStatus());\n+\t}\n+\n+\t@Override\n+\tpublic I_C_OrderLine createOrderLine(final I_C_Order order)\n+\t{\n+\t\treturn orderLineBL.createOrderLine(order);\n+\t}\n+\n+\t@Override\n+\tpublic void setProductId(\n+\t\t\t@NonNull final org.compiere.model.I_C_OrderLine orderLine,\n+\t\t\t@NonNull final ProductId productId,\n+\t\t\tfinal boolean setUOM)\n+\t{\n+\t\torderLineBL.setProductId(orderLine, productId, setUOM);\n+\t}\n+\n+\t@Override\n+\tpublic CurrencyConversionContext getCurrencyConversionContext(final I_C_Order order)\n+\t{\n+\t\treturn currencyBL.createCurrencyConversionContext(\n+\t\t\t\torder.getDateOrdered().toInstant(),\n+\t\t\t\tCurrencyConversionTypeId.ofRepoIdOrNull(order.getC_ConversionType_ID()),\n+\t\t\t\tClientId.ofRepoId(order.getAD_Client_ID()),\n+\t\t\t\tOrgId.ofRepoId(order.getAD_Org_ID()));\n+\t}\n+\n+\t@Override\n+\tpublic void deleteLineById(final OrderAndLineId orderAndLineId)\n+\t{\n+\t\torderDAO.deleteByLineId(orderAndLineId);\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "d2a6365040138c6d1ae7615abca12e5a5eea80ae", "message": "Merge commit", "committedDate": null}, {"oid": "13bcdbd2af652e442da6722a0ae9cb2f2be81ef0", "committedDate": "2020-11-16 12:59:41 +0100", "message": "Bm uat temp (#10227)"}, {"oid": "1eff7c406383029e4dd5e6a5968d57580211a37f", "committedDate": "2020-11-20 12:19:12 +0200", "message": "Sales Order window: avoid setting a DocType is is not in the list that user can pick from (#10199)"}, {"oid": "8150ae9b599b9703fa80e4ea9a2d0655ec810a54", "committedDate": "2021-01-22 20:43:17 +0200", "message": "refactoring Haddex (#10548)"}, {"oid": "7013ab1e89ca86b9f278f3bfc13846deee8391e1", "committedDate": "2021-01-24 13:12:31 +0200", "message": "Service repair feature (2nd increment) (#10512)"}, {"oid": "68b64caf5938fe809250e8c6e8cc65e086ab98bc", "committedDate": "2021-02-03 23:07:45 -0800", "message": "gh10566 (#10567)"}, {"oid": "172a8795efcdc783c37d7d3be81b0321781bbd5b", "committedDate": "2021-02-16 12:47:32 +0200", "message": "hotfix OrderBL.setBill_User_ID (#10647)"}, {"oid": "09a39dec5552fd49de80138f872dabc22440f4e8", "committedDate": "2021-02-25 05:32:19 +0200", "message": "Merge remote-tracking branch 'origin/scary_plum_uat'"}, {"oid": "ac243c51324921a3366b899b5980a8368b4151e7", "committedDate": "2021-03-15 11:22:46 +0200", "message": "OrderBL: when fetching the Order PricingSystem use the order's BPartner. (#10810)"}, {"oid": "cdb6ed82da5e62a8ca89863320b26ed373e9fd3e", "committedDate": "2021-03-16 11:05:45 +0200", "message": "Merge remote-tracking branch 'origin/scary_plum_uat'"}, {"oid": "b0f6c2df1960daef954db04987fd58d340dbf394", "committedDate": "2021-03-19 08:16:13 +0100", "message": "When creating orders from OLcands and when settings sales rep in order (#10850)"}, {"oid": "d192109ca7d254a1aa69c5ce6391e631638633ca", "committedDate": "2021-03-25 15:12:28 +0100", "message": "Merge remote-tracking branch 'origin/blonde_monkey_hotfix' into blonde_monkey_uat"}, {"oid": "80729b1e5ea6e5678a675f6e28581ea0e13f9b7c", "committedDate": "2021-03-26 13:21:11 +0100", "message": "Merge branch 'blonde_monkey_uat' into master_integration"}, {"oid": "a221a3c2e2d4d40dda5322ec55d2d4da0174cb8b", "committedDate": "2021-05-16 21:25:01 +0200", "message": "get sales order cucumber test up and running"}, {"oid": "59700b367d73b48158ffc8516388791f8cc16961", "committedDate": "2021-06-17 23:04:17 -0700", "message": "#gh11130 Tax logic overhaul (#11235)"}, {"oid": "350ded6bf42fda4507249b7d21555dae041650ab", "committedDate": "2021-06-22 21:57:21 +0200", "message": "DocType: Mediated Order (#11347)"}, {"oid": "6fa9325bb216fcd3368d4a59a5c7928cafa5d814", "committedDate": "2021-06-24 20:34:20 +0200", "message": "fix mediated order org (#11377)"}, {"oid": "eafb66680eaf7ad8c6467c1aebe3691e89703266", "committedDate": "2021-06-30 17:00:58 +0200", "message": "Mediated order translation fix (#11421)"}, {"oid": "e05035d150c0a1520376eda6d0dac95b04f94bb4", "committedDate": "2021-07-07 09:21:49 +0200", "message": "Merge branch 'blonde_monkey_uat' into master_integration"}, {"oid": "dcfc89d3b8ae5d6d9e9856549f8419ae1b708889", "committedDate": "2021-07-09 22:17:42 +0300", "message": "Gh11436 translations and order model interceptors (#11482)"}, {"oid": "4b8b24aaf1060bb89eb84193270edf1c1f9db6a3", "committedDate": "2021-07-12 11:52:32 +0300", "message": "cleanup (#11483)"}, {"oid": "e71284ae9fbfdc2f67d9446d14f6c699137c9f5e", "committedDate": "2021-08-02 11:16:55 +0300", "message": "Persist and forward the current C_Location_ID (#11006)"}, {"oid": "40b66477bff7a35816e72f6fae26cae253523e0b", "committedDate": "2021-08-04 02:07:00 -0700", "message": "#gh11573: don't set a BPlocation that isn't marked as shipToDefault/shipTo (#11574)"}, {"oid": "65429ac095386c635c8fc834bc7bddff6d923793", "committedDate": "2021-08-18 08:57:13 +0200", "message": "Merge branch 'blonde_monkey_uat' into master_integration"}, {"oid": "6044dc286855e33c38fb8030912d54f17f42226d", "committedDate": "2021-09-03 10:41:41 +0300", "message": "BP Quick Input: assert price lists exist (#11684)"}, {"oid": "f26bab9c1903bbb5ca53b2410bee6247b0cf90bc", "committedDate": "2021-09-11 07:14:45 +0200", "message": "C_OrderLine.C_BPartner_Location_Value_ID (#11677)"}, {"oid": "9ab870a136998fe52d49ed90b6933e8c9197f4e0", "committedDate": "2021-09-27 14:03:24 +0300", "message": "#11778 Change Delivery Via Rule when Business Partner is changed  (#11787)"}, {"oid": "e3a3829213ab16065e145cbf320fd4ac66e02fce", "committedDate": "2021-09-28 10:28:37 +0200", "message": "Merge tag '5.172' into intensive_care_uat"}, {"oid": "d2a1c14a9193e48fa90610128d65a84d8dc50997", "committedDate": "2021-10-28 11:37:54 +0300", "message": "Master force update captured location (#11893)"}, {"oid": "40d31e5789e30fc977e91f1578f95535e886e4f1", "committedDate": "2021-10-28 10:50:48 +0200", "message": "Master force update captured location (#11893)"}, {"oid": "bb3a39382202d583b8fd3f233b0cd3f8fdd9ebef", "committedDate": "2021-10-28 11:06:22 +0200", "message": "Master force update captured location (#11893)"}, {"oid": "7822b10dc17ca86de0cc099beff7c90145e03132", "committedDate": "2021-11-01 13:23:25 +0200", "message": "mobile UI prototype [tasty_ham_uat branch] (#11739)"}, {"oid": "340d0f6696feae6c73858871311404909dd71e7a", "committedDate": "2021-11-04 07:58:48 +0100", "message": "Merge branch 'tasty_ham_uat' into master_integration"}, {"oid": "763e022b1b72d9cf9dc2eec8d4c21e8a26742beb", "committedDate": "2021-11-05 09:01:12 -0700", "message": "#11941 prefer locations with isShipToDefault/isBillToDefault when defaulting for an order (#11942)"}, {"oid": "0085f61308d507bb9c1d22b89005cbdf8c9e4443", "committedDate": "2021-11-08 11:18:26 +0100", "message": "#11941 prefer locations with isShipToDefault/isBillToDefault when defaulting for an order (#11942)"}, {"oid": "f8927aea5d01be037a42b2de3845463559513564", "committedDate": "2021-11-10 21:54:00 +0200", "message": "PO_InvoiceRule (#11970)"}, {"oid": "4d5cf64b5c03e1df1d085c93ca48c7ac094b874c", "committedDate": "2021-11-15 14:52:49 +0100", "message": "Merge tag '5.173' into mad_orange_uat"}, {"oid": "54e6ac26b8a08c684019502ed112e6e5a4bf68ff", "committedDate": "2021-11-21 20:18:16 +0100", "message": "Merge branch 'mad_orange_uat' into master_integration"}, {"oid": "a3821eb218da12999bc14dd54ef706c06e6d8ff5", "committedDate": "2021-11-21 20:37:48 +0100", "message": "Merge branch 'week_end_uat' into master_integration"}, {"oid": "aa9879f2f2cad153d2172984cc9eb5593adf7f3c", "committedDate": "2021-11-26 17:59:59 +0100", "message": "Gh12059 new columns bp quick input (#12061)"}, {"oid": "e7a22201dad1c7014b1d6628926f63005b77c68b", "committedDate": "2021-11-28 16:30:12 +0100", "message": "Merge branch 'master' into master_integration"}, {"oid": "8e9eb8fb9cb2638e374b358449beb61e511c837d", "committedDate": "2021-12-02 14:47:55 +0100", "message": "unrelated - avoid NPE"}, {"oid": "75f701d9fee358a1375150eba64b007d483895d9", "committedDate": "2022-02-01 09:27:12 +0200", "message": "#12409 Copy shipto partner and address for SO order line to PO orderline  (#12417)"}, {"oid": "885036f5dd5b4f8f016a992647d5536f578c3794", "committedDate": "2022-02-03 17:19:59 +0100", "message": "order's effective bill-contact - only fall back if consistent (#12466)"}, {"oid": "2572792829b00ae3ce896bacb25bd6dc53436f91", "committedDate": "2022-02-16 14:43:49 +0200", "message": "Order Email Propagation (#12501)"}, {"oid": "10f2751785d1b624cc9fcc3bad5115f5768ec015", "committedDate": "2022-03-23 09:18:12 +0200", "message": "Merge branch 'blonde_monkey_uat' into master_integration_bm_uat_220322"}, {"oid": "e26783720df2d1741afbf41cde5e5ff467d63d97", "committedDate": "2022-03-26 22:08:07 +0100", "message": "Merge branch 'cloned_cereal_uat' into master_integration2"}, {"oid": "97a7148cfef4a1333c996d46f0e09a91fdcd99e7", "committedDate": "2022-03-27 10:21:10 +0200", "message": "Merge branch 'scary_plum_uat' into master_integration2"}, {"oid": "6a01c6aeb776017293412a0f7f09aef6bc0cea05", "committedDate": "2022-05-18 17:35:44 +0300", "message": "Order.Email propagation (#12990) (#13002)"}, {"oid": "ebb76399b46596a637bc2d8ec62cd7e63232e8a0", "committedDate": "2022-06-15 17:49:28 +0300", "message": "#13118 Do not override QtyOrdered in C_Order when closing receipt schedule  (#13141)"}, {"oid": "069fe16862562a05d2495223982b00db1578bd1a", "committedDate": "2022-06-16 17:03:06 +0300", "message": "#13118 CP to master https://github.com/metasfresh/metasfresh/commit/ebb76399b46596a637bc2d8ec62cd7e63232e8a0#diff-c9c8d70cefbf3e6f555a943ef8b586deb2a5670147bde9528c3dfa3c5224737e"}, {"oid": "4e511e447904b7ffb8c49ccc550343a595b21c60", "committedDate": "2022-07-15 20:58:02 +0300", "message": "Release cp email (#13291)"}, {"oid": "275c7eecf879a8d255eb422bf39055aaa69cf2a5", "committedDate": "2022-08-25 10:27:28 +0300", "message": "Cost Revaluation Accounting (#13493)"}, {"oid": "216efe82dc807cad451eaef9997724671ec91662", "committedDate": "2022-08-25 17:49:23 +0300", "message": "Merge remote-tracking branch 'origin/inner_silence_uat' into master_inner_silence_uat_teo"}, {"oid": "c1dc205faef797755fd3a62a8b06af11f4f68eba", "committedDate": "2022-09-15 15:58:26 +0300", "message": "refs: https://github.com/metasfresh/metasfresh/issues/13580 inEffect invoice candidates"}, {"oid": "a1b038f33e65e67152bbd074153b81784f5bd89b", "committedDate": "2022-09-19 13:49:05 +0300", "message": "Merge branch 'mad_orange_uat' into master_mad_orange_uat_19092022"}, {"oid": "ae6a6f89d8cff8621235015977e16a44075d2890", "committedDate": "2023-01-17 13:55:32 +0200", "message": "Consider C_Invoice_Acct when posting invoices and match invoices (#14363)"}, {"oid": "b974471027cbfb11c0a311b82307ec64d9638560", "committedDate": "2023-01-24 15:16:51 +0200", "message": "FOREX (#14417)"}, {"oid": "76a99d7ef2bd609a41d7148e8b39a618ab76c433", "committedDate": "2023-01-24 15:31:20 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "90b98c39da41a15dd40c6aba05508fe0b68a597f", "committedDate": "2023-01-25 14:45:28 +0200", "message": "group invoices and credit memos into a single document (#14378)"}, {"oid": "0b3ca40abd123d5490ba5731d4161e3681bcd807", "committedDate": "2023-01-25 15:35:51 +0200", "message": "Merge branch 'scary_plum_hotfix'"}, {"oid": "a40b7c19d6cb20f5f5cd5fa5872587d2829703db", "committedDate": "2023-01-31 09:33:07 +0200", "message": "Delivery Planning: Generate Receipt / Shipment (#14450)"}, {"oid": "dbdcf9fe0588588418d442b057eb231b9b2b370d", "committedDate": "2023-02-01 17:14:31 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "26a12de3d188f9031f8429796ccf2db4d0b57ebc", "committedDate": "2023-02-01 17:20:25 +0200", "message": "Delivery Planning: Generate Shipment B2B (#14480)"}, {"oid": "7f1fbd5079e13e3d100c9bbc21f4833347653a66", "committedDate": "2023-02-01 17:26:26 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "2fa1580a58107bb0850c0220ff65fcf99e7d3a46", "committedDate": "2023-02-03 18:23:09 +0200", "message": "#14484 Implement Goods on consignment management (#14494)"}, {"oid": "018fbd9c4b1b760039d8db14153a52786d9b5192", "committedDate": "2023-02-06 12:25:05 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "b4fa328af63783c54f6ef486be37059e163f013a", "committedDate": "2023-02-23 15:56:45 +0200", "message": "Order Window Ivict adaptions (Billto Default, Drop Shipment) (#14646)"}, {"oid": "c866c89b20cd8d51e995adac94ef0fee8d7f8c94", "committedDate": "2023-02-23 17:29:45 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat' into master_adorable_badger_uat_merge_23022023"}, {"oid": "d2982350f2a561c951a4a6c30da2fe378524fe29", "committedDate": "2023-02-28 17:43:37 +0200", "message": "Order Costs (#14636)"}, {"oid": "7ba20322ae4ae9132f4bf08910f99ad5c5c9b28b", "committedDate": "2023-02-28 19:30:28 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "62263ddf889dfaf845b2ceba84a2d84233c9f46a", "committedDate": "2023-02-28 19:31:12 +0200", "message": "fix after merging adorable_badger_uat to master"}, {"oid": "aea2799fb898bc316b3721eabf114bff5f5473ff", "committedDate": "2023-03-02 17:16:16 +0200", "message": "refs: https://github.com/metasfresh/metasfresh/issues/14645 use billToDefault location as default location, no matter if SO is dropship or not"}, {"oid": "bb9777e58a7544880cd6689da59d252cd784a7aa", "committedDate": "2023-03-03 07:37:31 +0200", "message": "Merge branch 'adorable_badger_uat' into master_adorable_badger_uat_merge_03032023"}, {"oid": "9b64497706b00523b695ce337692ff578a49b674", "committedDate": "2023-03-14 14:24:16 +0200", "message": "Sales Order: add order costs as order line (#14853)"}, {"oid": "3cf8e4e9bdea9d9f3e8c21b19a03a20a22d1163e", "committedDate": "2023-03-14 14:30:43 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat'"}, {"oid": "404e6c47989afad90f8f9059a8c8f33c100ab2d8", "committedDate": "2023-03-17 16:58:34 +0200", "message": "Incoming delivery costs - Iteration 2 (#14918)"}, {"oid": "ea69778a1f57e893b1a7048d7b436bf932122f28", "committedDate": "2023-05-04 05:08:03 +0200", "message": "Merge remote-tracking branch 'origin/adorable_badger_uat' into metas-ts/master/merge-from/adorable_badger_uat"}]}, {"oid": "40e299f142b3b0902f197f1bf4197fb7129652b3", "url": "https://github.com/metasfresh/metasfresh/commit/40e299f142b3b0902f197f1bf4197fb7129652b3", "message": "#10197\n - Implemented review notes.", "committedDate": "2020-11-20T08:19:00Z", "type": "commit"}]}