{"pr_number": 9922, "pr_title": "handle returns", "pr_author": "pvpurcarcosmin", "pr_createdAt": "2020-09-10T11:03:45Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/9922", "timeline": [{"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "url": "https://github.com/metasfresh/metasfresh/commit/356f7e2b5c071451ff11bb06375c91de4efc35e0", "message": "handle returns\n\nrefs: https://github.com/metasfresh/metasfresh/issues/9920", "committedDate": "2020-09-10T10:49:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyODM2Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486328363", "body": "just a minor thing: i believe we should prefer ImmutableList and use immutable collections be default, unless we explicitly want them to be mutable", "bodyText": "just a minor thing: i believe we should prefer ImmutableList and use immutable collections be default, unless we explicitly want them to be mutable", "bodyHTML": "<p dir=\"auto\">just a minor thing: i believe we should prefer ImmutableList and use immutable collections be default, unless we explicitly want them to be mutable</p>", "author": "metas-ts", "createdAt": "2020-09-10T13:18:18Z", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/receipt/ReceiptRestController.java", "diffHunk": "@@ -84,17 +85,37 @@ public ResponseEntity createReceipts(@RequestBody final JsonCreateReceiptsReques\n \t\t}\n \t}\n \n+\tprivate JsonCreateReceiptsResponse createReceipts_0(@NonNull final JsonCreateReceiptsRequest jsonCreateReceiptsRequest)\n+\t{\n+\t\tfinal List<InOutId> createdReceiptIds = jsonCreateReceiptsRequest.getJsonCreateReceiptInfoList().isEmpty()\n+\t\t\t\t? ImmutableList.of()\n+\t\t\t\t: receiptService.updateReceiptCandidatesAndGenerateReceipts(jsonCreateReceiptsRequest);\n+\n+\t\tfinal List<InOutId> createdReturnIds = jsonCreateReceiptsRequest.getJsonCreateCustomerReturnInfoList().isEmpty()\n+\t\t\t\t? ImmutableList.of()\n+\t\t\t\t: customerReturnService.handleReturns(jsonCreateReceiptsRequest.getJsonCreateCustomerReturnInfoList());\n+\n+\t\treturn toJsonCreateReceiptsResponse(createdReceiptIds, createdReturnIds);\n+\t}\n+\n \t@NonNull\n-\tprivate JsonCreateReceiptsResponse toJsonCreateReceiptsResponse(@NonNull final List<InOutId> receiptIds)\n+\tprivate JsonCreateReceiptsResponse toJsonCreateReceiptsResponse(@NonNull final List<InOutId> receiptIds, @NonNull final List<InOutId> returnIds)\n \t{\n-\t\tfinal List<JsonMetasfreshId> jsonIds = receiptIds\n+\t\tfinal List<JsonMetasfreshId> jsonReceiptIds = receiptIds\n+\t\t\t\t.stream()\n+\t\t\t\t.map(InOutId::getRepoId)\n+\t\t\t\t.map(JsonMetasfreshId::of)\n+\t\t\t\t.collect(Collectors.toList());", "originalCommit": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486339630", "body": "```suggestion\r\n\tvoid setHUStatus(I_M_HU hu, IContextAware contextProvider, String huStatus);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);\n          \n          \n            \n            \tvoid setHUStatus(I_M_HU hu, IContextAware contextProvider, String huStatus);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">void</span> setHUStatus(<span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-c1\">I_M_HU</span> hu, <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">IContextAware</span> contextProvider,<span class=\"x x-first\"> </span><span class=\"pl-k x x-last\">final</span> <span class=\"pl-smi\">String</span> huStatus);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">void</span> setHUStatus(<span class=\"pl-c1\">I_M_HU</span> hu, <span class=\"pl-smi\">IContextAware</span> contextProvider, <span class=\"pl-smi\">String</span> huStatus);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "metas-ts", "createdAt": "2020-09-10T13:33:42Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/IHandlingUnitsBL.java", "diffHunk": "@@ -548,4 +545,6 @@ static I_M_HU_PI_Item_Product extractPIItemProductOrNull(final I_M_HU hu)\n \t}\n \n \tAttributesKey getStorageRelevantAttributesKey(@NonNull I_M_HU hu);\n+\n+\tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);", "originalCommit": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDE0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486340149", "bodyText": "..also, why not have this method in IHUStatusBL directly?", "author": "metas-ts", "createdAt": "2020-09-10T13:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyNzQ1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486927455", "bodyText": "mainly because I'm also persisting the HU after the status change, so I was thinking the Status API shouldn;t do that :-?", "author": "pvpurcarcosmin", "createdAt": "2020-09-11T09:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjE0MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486342141", "body": "eeee..is this really a repository though? maybe better call it sth like CustomerReturnInOutRecordFactory (...or sth shorter)", "bodyText": "eeee..is this really a repository though? maybe better call it sth like CustomerReturnInOutRecordFactory (...or sth shorter)", "bodyHTML": "<p dir=\"auto\">eeee..is this really a repository though? maybe better call it sth like CustomerReturnInOutRecordFactory (...or sth shorter)</p>", "author": "metas-ts", "createdAt": "2020-09-10T13:36:46Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inout/impl/CustomerReturnRepository.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.inout.impl;\n+\n+import de.metas.handlingunits.model.I_M_InOut;\n+import de.metas.handlingunits.model.I_M_InOutLine;\n+import de.metas.inout.IInOutDAO;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.compiere.model.X_M_InOut.MOVEMENTTYPE_CustomerReturns;\n+import static org.compiere.util.TimeUtil.asTimestamp;\n+\n+@Repository\n+public class CustomerReturnRepository", "originalCommit": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyODYwNA==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486928604", "bodyText": "true... will rename it", "author": "pvpurcarcosmin", "createdAt": "2020-09-11T09:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MTc0Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486351746", "body": "do we need this though? i thought we just created them?", "bodyText": "do we need this though? i thought we just created them?", "bodyHTML": "<p dir=\"auto\">do we need this though? i thought we just created them?</p>", "author": "metas-ts", "createdAt": "2020-09-10T13:45:24Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_InOut.java", "diffHunk": "@@ -291,9 +295,13 @@ public void generateHUsForCustomerReturn(final I_M_InOut customerReturn)\n \n \t\tfinal List<I_M_HU> existingHandlingUnits = Services.get(IHUInOutDAO.class).retrieveHandlingUnits(customerReturn);\n \n+\t\t// the handling units are already created\n \t\tif (!existingHandlingUnits.isEmpty())\n \t\t{\n-\t\t\t// the handling units are already created\n+\t\t\tfinal IContextAware contextProvider = InterfaceWrapperHelper.getContextAware(customerReturn);\n+\n+\t\t\t//make sure they all have status active\n+\t\t\texistingHandlingUnits.forEach(hu -> handlingUnitsBL.setHUStatus(hu, contextProvider, X_M_HU.HUSTATUS_Active));", "originalCommit": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyOTUyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486929524", "bodyText": "yep, as I'm creating them with status planning, and change it to active only when the document is completed.", "author": "pvpurcarcosmin", "createdAt": "2020-09-11T09:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MTc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1ODY2NA==", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486358664", "body": "teo proposed that we move this to a utility class, because it has no state and therefore doesn't really need to be a super-class..\r\npls coordinate with him to avaoid nasty conflicts", "bodyText": "teo proposed that we move this to a utility class, because it has no state and therefore doesn't really need to be a super-class..\npls coordinate with him to avaoid nasty conflicts", "bodyHTML": "<p dir=\"auto\">teo proposed that we move this to a utility class, because it has no state and therefore doesn't really need to be a super-class..<br>\npls coordinate with him to avaoid nasty conflicts</p>", "author": "metas-ts", "createdAt": "2020-09-10T13:51:33Z", "path": "misc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/XmlToJsonBaseProcessor.java", "diffHunk": "@@ -40,18 +40,15 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.function.BiFunction;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n public class XmlToJsonBaseProcessor", "originalCommit": "356f7e2b5c071451ff11bb06375c91de4efc35e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c3ed93f010670983494f89382d7e78e2e53d15a", "url": "https://github.com/metasfresh/metasfresh/commit/8c3ed93f010670983494f89382d7e78e2e53d15a", "message": "small ImmutableList refactor\nrefs: https://github.com/metasfresh/metasfresh/issues/9920", "committedDate": "2020-09-10T23:02:13Z", "type": "commit"}, {"oid": "73375d4ae376541f6a419512134073cd51300e1c", "url": "https://github.com/metasfresh/metasfresh/commit/73375d4ae376541f6a419512134073cd51300e1c", "message": "remove XmlToJsonBaseProcessor; introduce XmlToJsonProcessorUtil\nCP from https://github.com/metasfresh/metasfresh/commit/14fa80fa91831a9bb50126939f4944f3be1f33be", "committedDate": "2020-09-11T10:08:06Z", "type": "commit"}, {"oid": "3ef2d78c00da2e561d04a8c33e8ef2213553e987", "url": "https://github.com/metasfresh/metasfresh/commit/3ef2d78c00da2e561d04a8c33e8ef2213553e987", "message": "refactor after\nCP from https://github.com/metasfresh/metasfresh/commit/14fa80fa91831a9bb50126939f4944f3be1f33be", "committedDate": "2020-09-11T10:12:46Z", "type": "commit"}, {"oid": "e37f8d875d8714750d5de4e6560f64c45b3225ce", "url": "https://github.com/metasfresh/metasfresh/commit/e37f8d875d8714750d5de4e6560f64c45b3225ce", "message": "Merge branch 'blonde_monkey_uat' into gh9920-returns\n\n# Conflicts:\n#\tmisc/de-metas-common/de-metas-common-shipping/src/main/java/de/metas/common/receipt/JsonCreateReceiptsRequest.java\n#\tmisc/de-metas-common/de-metas-common-shipping/src/main/java/de/metas/common/receipt/JsonCreateReceiptsResponse.java\n#\tmisc/de-metas-common/de-metas-common-shipping/src/main/java/de/metas/common/shipment/JsonCreateShipmentRequest.java\n#\tmisc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/CommonUtil.java\n#\tmisc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/XmlToJsonProcessorUtil.java\n#\tmisc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/receipt/ReceiptXmlToJsonProcessor.java\n#\tmisc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/shipment/ShipmentXmlToJsonProcessor.java\n#\tmisc/services/camel/de-metas-camel-shipping/src/main/resources/shipping.properties", "committedDate": "2020-09-11T12:08:17Z", "type": "commit"}, {"oid": "a0d668c829d5ee57fc1275ff9bad9697dddd856c", "url": "https://github.com/metasfresh/metasfresh/commit/a0d668c829d5ee57fc1275ff9bad9697dddd856c", "message": "build fix\nrefs: https://github.com/metasfresh/metasfresh/issues/9877", "committedDate": "2020-09-11T14:03:27Z", "type": "commit"}, {"oid": "871a997504ebb16b6cff38c97668cdb940660972", "url": "https://github.com/metasfresh/metasfresh/commit/871a997504ebb16b6cff38c97668cdb940660972", "message": "build fix\nhttps://github.com/metasfresh/metasfresh/issues/9877", "committedDate": "2020-09-11T14:35:31Z", "type": "commit"}, {"oid": "de9fc93fa103cbfa012af42bffe155176bfb2e1c", "url": "https://github.com/metasfresh/metasfresh/commit/de9fc93fa103cbfa012af42bffe155176bfb2e1c", "message": "small change\nhttps://github.com/metasfresh/metasfresh/issues/9920", "committedDate": "2020-09-11T15:33:05Z", "type": "commit"}]}