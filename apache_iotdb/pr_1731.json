{"pr_number": 1731, "pr_title": "[IOTDB-870] change tags and attributes output to two columns with json values", "pr_author": "haimeiguo", "pr_createdAt": "2020-09-14T13:02:13Z", "pr_url": "https://github.com/apache/iotdb/pull/1731", "timeline": [{"oid": "130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "url": "https://github.com/apache/iotdb/commit/130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "message": "server/src/assembly/resources/conf/logback.xml", "committedDate": "2020-08-05T01:15:27Z", "type": "commit"}, {"oid": "a5c1684947a562dbbbd667c7046a1d13956d6334", "url": "https://github.com/apache/iotdb/commit/a5c1684947a562dbbbd667c7046a1d13956d6334", "message": "fix loginfo appender ref to FILEINFO", "committedDate": "2020-08-05T03:30:31Z", "type": "commit"}, {"oid": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "url": "https://github.com/apache/iotdb/commit/6c1f8c407e85f3f88537d18a72ba49234b16171e", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-14T13:00:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5NDQ2NA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r488594464", "body": "tags and attributes are better", "bodyText": "tags and attributes are better", "bodyHTML": "<p dir=\"auto\">tags and attributes are better</p>", "author": "qiaojialin", "createdAt": "2020-09-15T11:34:13Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -35,17 +35,19 @@\n   private String dataType;\n   private String encoding;\n   private String compressor;\n-  private Map<String, String> tagAndAttribute;\n+  private Map<String, String> tag;\n+  private Map<String, String> attribute;", "originalCommit": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODU3Nw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r488598577", "body": "tags and attributes?", "bodyText": "tags and attributes?", "bodyHTML": "<p dir=\"auto\">tags and attributes?</p>", "author": "qiaojialin", "createdAt": "2020-09-15T11:41:23Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -70,6 +70,8 @@ private IoTDBConstant() {\n   public static final String COLUMN_DEVICES = \"devices\";\n   public static final String COLUMN_COLUMN = \"column\";\n   public static final String COLUMN_COUNT = \"count\";\n+  public static final String COLUMN_TAG = \"tag\";\n+  public static final String COLUMN_ATTRIBUTE = \"attribute\";", "originalCommit": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24ce7f1a9ac976552a2e844efbc5cdcc5cf0a4f8", "url": "https://github.com/apache/iotdb/commit/24ce7f1a9ac976552a2e844efbc5cdcc5cf0a4f8", "message": "modified tags attributes names", "committedDate": "2020-09-16T11:29:43Z", "type": "commit"}, {"oid": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "url": "https://github.com/apache/iotdb/commit/478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "message": "modified tags attributes names", "committedDate": "2020-09-18T01:27:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk5OQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490696999", "body": "how about:\r\n```\r\n  Pair<Map<String, String>, Map<String, String>> pair = new Pair(Collections.emptyMap(),Collections.emptyMap());\r\n\r\n  if(tagFileOffset >= 0){\r\n     pair = tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\r\n  }\r\n\r\n  res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2], pair.left, pair.right);\r\n```", "bodyText": "how about:\n  Pair<Map<String, String>, Map<String, String>> pair = new Pair(Collections.emptyMap(),Collections.emptyMap());\n\n  if(tagFileOffset >= 0){\n     pair = tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n  }\n\n  res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2], pair.left, pair.right);", "bodyHTML": "<p dir=\"auto\">how about:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  Pair&lt;Map&lt;String, String&gt;, Map&lt;String, String&gt;&gt; pair = new Pair(Collections.emptyMap(),Collections.emptyMap());\n\n  if(tagFileOffset &gt;= 0){\n     pair = tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n  }\n\n  res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2], pair.left, pair.right);\n\"><pre><code>  Pair&lt;Map&lt;String, String&gt;, Map&lt;String, String&gt;&gt; pair = new Pair(Collections.emptyMap(),Collections.emptyMap());\n\n  if(tagFileOffset &gt;= 0){\n     pair = tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n  }\n\n  res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2], pair.left, pair.right);\n</code></pre></div>", "author": "liutaohua", "createdAt": "2020-09-18T04:36:27Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -994,14 +993,13 @@ private boolean match(PartialPath fullPath, String[] prefixNodes) {\n           if (tagFileOffset < 0) {\n             // no tags/attributes\n             res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], Collections.emptyMap()));\n+                ansString.right[3], ansString.right[4], Collections.emptyMap(), Collections.emptyMap()));\n           } else {\n             // has tags/attributes\n             Pair<Map<String, String>, Map<String, String>> pair =\n                 tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n-            pair.left.putAll(pair.right);\n             res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], pair.left));\n+                ansString.right[3], ansString.right[4], pair.left, pair.right));", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2NDI3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490764270", "bodyText": "edited. thank you :)", "author": "haimeiguo", "createdAt": "2020-09-18T07:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwMTE3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490701170", "body": "tags and attr are duplicate code, how about:\r\n```\r\nprivate void writeNullable(Map<String,String> param, OutputStream out){\r\n   \r\n    ReadWriteIOUtils.write(param != null, outputStream);\r\n    if (param != null) {\r\n      ReadWriteIOUtils.write(tags.size(), outputStream);\r\n      for (Entry<String, String> entry : param.entrySet()) {\r\n        ReadWriteIOUtils.write(entry.getKey(), outputStream);\r\n        ReadWriteIOUtils.write(entry.getValue(), outputStream);\r\n      }\r\n    }\r\n}\r\n```", "bodyText": "tags and attr are duplicate code, how about:\nprivate void writeNullable(Map<String,String> param, OutputStream out){\n   \n    ReadWriteIOUtils.write(param != null, outputStream);\n    if (param != null) {\n      ReadWriteIOUtils.write(tags.size(), outputStream);\n      for (Entry<String, String> entry : param.entrySet()) {\n        ReadWriteIOUtils.write(entry.getKey(), outputStream);\n        ReadWriteIOUtils.write(entry.getValue(), outputStream);\n      }\n    }\n}", "bodyHTML": "<p dir=\"auto\">tags and attr are duplicate code, how about:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private void writeNullable(Map&lt;String,String&gt; param, OutputStream out){\n   \n    ReadWriteIOUtils.write(param != null, outputStream);\n    if (param != null) {\n      ReadWriteIOUtils.write(tags.size(), outputStream);\n      for (Entry&lt;String, String&gt; entry : param.entrySet()) {\n        ReadWriteIOUtils.write(entry.getKey(), outputStream);\n        ReadWriteIOUtils.write(entry.getValue(), outputStream);\n      }\n    }\n}\n\"><pre><code>private void writeNullable(Map&lt;String,String&gt; param, OutputStream out){\n   \n    ReadWriteIOUtils.write(param != null, outputStream);\n    if (param != null) {\n      ReadWriteIOUtils.write(tags.size(), outputStream);\n      for (Entry&lt;String, String&gt; entry : param.entrySet()) {\n        ReadWriteIOUtils.write(entry.getKey(), outputStream);\n        ReadWriteIOUtils.write(entry.getValue(), outputStream);\n      }\n    }\n}\n</code></pre></div>", "author": "liutaohua", "createdAt": "2020-09-18T04:53:43Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -113,10 +119,21 @@ public void serialize(OutputStream outputStream) throws IOException {\n     ReadWriteIOUtils.write(encoding, outputStream);\n     ReadWriteIOUtils.write(compressor, outputStream);\n \n-    ReadWriteIOUtils.write(tagAndAttribute != null, outputStream); //flag\n-    if (tagAndAttribute != null) {\n-      ReadWriteIOUtils.write(tagAndAttribute.size(), outputStream);\n-      for (Entry<String, String> stringStringEntry : tagAndAttribute.entrySet()) {\n+    //flag for tag\n+    ReadWriteIOUtils.write(tags != null, outputStream);\n+    if (tags != null) {\n+      ReadWriteIOUtils.write(tags.size(), outputStream);\n+      for (Entry<String, String> stringStringEntry : tags.entrySet()) {\n+        ReadWriteIOUtils.write(stringStringEntry.getKey(), outputStream);\n+        ReadWriteIOUtils.write(stringStringEntry.getValue(), outputStream);\n+      }\n+    }\n+\n+    //flag for attribute\n+    ReadWriteIOUtils.write(attributes != null, outputStream);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwMzE1Nw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490703157", "body": "we have the enums of these strings, I suggest that we use the enums to serialize, u can find it in :\r\n```\r\npackage org.apache.iotdb.tsfile.file.metadata.enums;\r\n```", "bodyText": "we have the enums of these strings, I suggest that we use the enums to serialize, u can find it in :\npackage org.apache.iotdb.tsfile.file.metadata.enums;", "bodyHTML": "<p dir=\"auto\">we have the enums of these strings, I suggest that we use the enums to serialize, u can find it in :</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package org.apache.iotdb.tsfile.file.metadata.enums;\n\"><pre><code>package org.apache.iotdb.tsfile.file.metadata.enums;\n</code></pre></div>", "author": "liutaohua", "createdAt": "2020-09-18T05:01:01Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -134,13 +151,25 @@ public static ShowTimeSeriesResult deserialize(ByteBuffer buffer) {\n     result.encoding = ReadWriteIOUtils.readString(buffer);\n     result.compressor = ReadWriteIOUtils.readString(buffer);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwNjQ0Mg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490706442", "body": "duplicate code, how about:\r\n```\r\n  private static PartialPath[] resourcePaths = new PartialPath[]{new PartialPath(COLUMN_TIMESERIES, false), .....};\r\n  private static TSDataType[] resourceTypes = new TSDataType[]{TSDataType.TEXT, .....};\r\n\r\n  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes, List<ShowTimeSeriesResult> timeseriesList) {\r\n    Collections.addAll(paths,resourcePaths);\r\n    Collections.addAll(dataTypes,resourceTypes);\r\n    ......\r\n  }\r\n```", "bodyText": "duplicate code, how about:\n  private static PartialPath[] resourcePaths = new PartialPath[]{new PartialPath(COLUMN_TIMESERIES, false), .....};\n  private static TSDataType[] resourceTypes = new TSDataType[]{TSDataType.TEXT, .....};\n\n  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes, List<ShowTimeSeriesResult> timeseriesList) {\n    Collections.addAll(paths,resourcePaths);\n    Collections.addAll(dataTypes,resourceTypes);\n    ......\n  }", "bodyHTML": "<p dir=\"auto\">duplicate code, how about:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  private static PartialPath[] resourcePaths = new PartialPath[]{new PartialPath(COLUMN_TIMESERIES, false), .....};\n  private static TSDataType[] resourceTypes = new TSDataType[]{TSDataType.TEXT, .....};\n\n  public static void constructPathAndDataTypes(List&lt;PartialPath&gt; paths, List&lt;TSDataType&gt; dataTypes, List&lt;ShowTimeSeriesResult&gt; timeseriesList) {\n    Collections.addAll(paths,resourcePaths);\n    Collections.addAll(dataTypes,resourceTypes);\n    ......\n  }\n\"><pre><code>  private static PartialPath[] resourcePaths = new PartialPath[]{new PartialPath(COLUMN_TIMESERIES, false), .....};\n  private static TSDataType[] resourceTypes = new TSDataType[]{TSDataType.TEXT, .....};\n\n  public static void constructPathAndDataTypes(List&lt;PartialPath&gt; paths, List&lt;TSDataType&gt; dataTypes, List&lt;ShowTimeSeriesResult&gt; timeseriesList) {\n    Collections.addAll(paths,resourcePaths);\n    Collections.addAll(dataTypes,resourceTypes);\n    ......\n  }\n</code></pre></div>", "author": "liutaohua", "createdAt": "2020-09-18T05:13:54Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -127,12 +128,27 @@ public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDat\n     paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n     dataTypes.add(TSDataType.TEXT);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxMjM1Ng==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490712356", "body": "I don't think there's any need to check,  it's ok to show `null || spaces`, like :\r\n```\r\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\r\n|    timeseries|alias|storage group|dataType|encoding|compression|tags|attributes|\r\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\r\n|root.sg1.d1.s1| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\r\n|root.sg1.d1.s2| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\r\n|root.sg1.d1.s3| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\r\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\r\n\r\n```", "bodyText": "I don't think there's any need to check,  it's ok to show null || spaces, like :\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|    timeseries|alias|storage group|dataType|encoding|compression|tags|attributes|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.sg1.d1.s1| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s2| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s3| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+", "bodyHTML": "<p dir=\"auto\">I don't think there's any need to check,  it's ok to show <code>null || spaces</code>, like :</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|    timeseries|alias|storage group|dataType|encoding|compression|tags|attributes|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.sg1.d1.s1| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s2| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s3| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n\n\"><pre><code>+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|    timeseries|alias|storage group|dataType|encoding|compression|tags|attributes|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.sg1.d1.s1| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s2| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s3| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n\n</code></pre></div>", "author": "liutaohua", "createdAt": "2020-09-18T05:35:06Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -127,12 +128,27 @@ public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDat\n     paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n     dataTypes.add(TSDataType.TEXT);\n \n-    Set<String> tagAndAttributeName = new TreeSet<>();\n+    //check if timeseries result has tag or attribute\n+    boolean hasTag = false;\n+    boolean hasAttribute = false;\n     for (ShowTimeSeriesResult result : timeseriesList) {", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "url": "https://github.com/apache/iotdb/commit/6fefd2ddc9af6928f75c9aae8675d1936de513c4", "message": "removed redundant code", "committedDate": "2020-09-18T07:45:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMDc0MQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490810741", "body": "i think that too many type cast , how about used only in `serialize/deserialize`.", "bodyText": "i think that too many type cast , how about used only in serialize/deserialize.", "bodyHTML": "<p dir=\"auto\">i think that too many type cast , how about used only in <code>serialize/deserialize</code>.</p>", "author": "liutaohua", "createdAt": "2020-09-18T09:10:31Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -152,10 +142,11 @@ public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseries\n       updateRecord(record, result.getName());\n       updateRecord(record, result.getAlias());\n       updateRecord(record, result.getSgName());\n-      updateRecord(record, result.getDataType());\n-      updateRecord(record, result.getEncoding());\n-      updateRecord(record, result.getCompressor());\n-      updateRecord(record, result.getTagAndAttribute(), paths);\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMjA5MQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490812091", "body": "same ", "bodyText": "same", "bodyHTML": "<p dir=\"auto\">same</p>", "author": "liutaohua", "createdAt": "2020-09-18T09:13:10Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -166,26 +157,28 @@ public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseries\n     List<RowRecord> records = new ArrayList<>();\n     List<PartialPath> paths = new ArrayList<>();\n     List<TSDataType> dataTypes = new ArrayList<>();\n-    constructPathAndDataTypes(paths, dataTypes, timeseriesList);\n+    constructPathAndDataTypes(paths, dataTypes);\n     for (ShowTimeSeriesResult result : timeseriesList) {\n       RowRecord record = new RowRecord(0);\n       updateRecord(record, result.getName());\n       updateRecord(record, result.getAlias());\n       updateRecord(record, result.getSgName());\n-      updateRecord(record, result.getDataType());\n-      updateRecord(record, result.getEncoding());\n-      updateRecord(record, result.getCompressor());\n-      updateRecord(record, result.getTagAndAttribute(), paths);\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDc2NQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490814765", "body": "I think that `constructPath` and `updateRecord` behavior belongs to `Dataset`, how about move it to `ShowTimeseriesDataSet ` class?\r\n\r\nand next line ,  the `showTimeSeriesPlan` already exists in dataset...\r\n\r\n\r\n@qiaojialin  what do you think?", "bodyText": "I think that constructPath and updateRecord behavior belongs to Dataset, how about move it to ShowTimeseriesDataSet  class?\nand next line ,  the showTimeSeriesPlan already exists in dataset...\n@qiaojialin  what do you think?", "bodyHTML": "<p dir=\"auto\">I think that <code>constructPath</code> and <code>updateRecord</code> behavior belongs to <code>Dataset</code>, how about move it to <code>ShowTimeseriesDataSet </code> class?</p>\n<p dir=\"auto\">and next line ,  the <code>showTimeSeriesPlan</code> already exists in dataset...</p>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/qiaojialin/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/qiaojialin\">@qiaojialin</a>  what do you think?</p>", "author": "liutaohua", "createdAt": "2020-09-18T09:17:23Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -112,36 +122,16 @@ public static void filterQueryDataSource(QueryDataSource queryDataSource,\n     unseqResources.removeIf(fileFilter::fileNotSatisfy);\n   }\n \n-  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      List<ShowTimeSeriesResult> timeseriesList) {\n-    paths.add(new PartialPath(COLUMN_TIMESERIES, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_ALIAS, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_STORAGE_GROUP, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_DATATYPE, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_ENCODING, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n-    dataTypes.add(TSDataType.TEXT);\n-\n-    Set<String> tagAndAttributeName = new TreeSet<>();\n-    for (ShowTimeSeriesResult result : timeseriesList) {\n-      tagAndAttributeName.addAll(result.getTagAndAttribute().keySet());\n-    }\n-    for (String key : tagAndAttributeName) {\n-      paths.add(new PartialPath(key, false));\n-      dataTypes.add(TSDataType.TEXT);\n-    }\n+  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes) {\n+    Collections.addAll(paths, resourcePaths);\n+    Collections.addAll(dataTypes, resourceTypes);\n   }\n \n   public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseriesList,\n       ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n     List<PartialPath> paths = new ArrayList<>();\n     List<TSDataType> dataTypes = new ArrayList<>();\n-    constructPathAndDataTypes(paths, dataTypes, timeseriesList);\n+    constructPathAndDataTypes(paths, dataTypes);", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5MzE2NA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r491293164", "bodyText": "It seems that the constructPathAndDataTypes is only used for ShowTimeseries, so moving it to ShowTimeseriesDataSet is ok.", "author": "qiaojialin", "createdAt": "2020-09-19T06:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDc2NQ=="}], "type": "inlineReview"}, {"oid": "7adc3a1e9a438bdd6c0f25cbb9799300ddb3e349", "url": "https://github.com/apache/iotdb/commit/7adc3a1e9a438bdd6c0f25cbb9799300ddb3e349", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-18T12:56:48Z", "type": "commit"}, {"oid": "308390042c293ff82c1db959fcb8885409a80839", "url": "https://github.com/apache/iotdb/commit/308390042c293ff82c1db959fcb8885409a80839", "message": "modified tags attributes names", "committedDate": "2020-09-18T12:56:49Z", "type": "commit"}, {"oid": "03af9e1b76e607e636983c38f0a057aad2dc4a60", "url": "https://github.com/apache/iotdb/commit/03af9e1b76e607e636983c38f0a057aad2dc4a60", "message": "modified tags attributes names", "committedDate": "2020-09-18T12:56:49Z", "type": "commit"}, {"oid": "9741ae2c09d1d5e9fbe82b1b16376577dc52ae73", "url": "https://github.com/apache/iotdb/commit/9741ae2c09d1d5e9fbe82b1b16376577dc52ae73", "message": "removed redundant code", "committedDate": "2020-09-18T12:56:50Z", "type": "commit"}, {"oid": "786d8fe1cf58cbcfbfeee0e47ce4d3017eb673a9", "url": "https://github.com/apache/iotdb/commit/786d8fe1cf58cbcfbfeee0e47ce4d3017eb673a9", "message": "Merge branch 'master' of github.com:kelggu/incubator-iotdb into master_output_format_tags_attributes", "committedDate": "2020-09-21T02:15:49Z", "type": "commit"}, {"oid": "3b90764f69a8f94c27268faa2d80a351ff80cf8c", "url": "https://github.com/apache/iotdb/commit/3b90764f69a8f94c27268faa2d80a351ff80cf8c", "message": "Merge branch 'master_output_format_tags_attributes' of github.com:kelggu/incubator-iotdb into master_output_format_tags_attributes", "committedDate": "2020-09-21T02:16:58Z", "type": "commit"}, {"oid": "39926f0b2ab736514c0594eba674db0d78953de7", "url": "https://github.com/apache/iotdb/commit/39926f0b2ab736514c0594eba674db0d78953de7", "message": "moved constructPathAndDataTypes to ShowTimeseriesDataSet", "committedDate": "2020-09-21T06:30:43Z", "type": "commit"}, {"oid": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "url": "https://github.com/apache/iotdb/commit/6c1f8c407e85f3f88537d18a72ba49234b16171e", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-14T13:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MDgzMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r491860833", "body": "ShowTimeseriesData should play as a query processor. \r\nIt accepts a query plan and generates results.", "bodyText": "ShowTimeseriesData should play as a query processor.\nIt accepts a query plan and generates results.", "bodyHTML": "<p dir=\"auto\">ShowTimeseriesData should play as a query processor.<br>\nIt accepts a query plan and generates results.</p>", "author": "qiaojialin", "createdAt": "2020-09-21T08:13:11Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -566,7 +567,8 @@ private QueryDataSet processShowStorageGroup(ShowStorageGroupPlan showStorageGro\n   private QueryDataSet processShowTimeseries(ShowTimeSeriesPlan showTimeSeriesPlan,\n       QueryContext context) throws MetadataException {\n     List<ShowTimeSeriesResult> timeseriesList = showTimeseries(showTimeSeriesPlan, context);\n-    return QueryUtils.getQueryDataSet(timeseriesList, showTimeSeriesPlan, context);\n+    ShowTimeseriesDataSet showTimeSeriesDataSet = new ShowTimeseriesDataSet(showTimeSeriesPlan, context);\n+    return showTimeSeriesDataSet.getQueryDataSet(timeseriesList);", "originalCommit": "39926f0b2ab736514c0594eba674db0d78953de7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5793bc75705e532dde7ec3fabceafb339d6887a3", "url": "https://github.com/apache/iotdb/commit/5793bc75705e532dde7ec3fabceafb339d6887a3", "message": "edit", "committedDate": "2020-09-21T08:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NDMwNg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492644306", "body": "Change to a more meaningful name, like `tagAndAttributePair`", "bodyText": "Change to a more meaningful name, like tagAndAttributePair", "bodyHTML": "<p dir=\"auto\">Change to a more meaningful name, like <code>tagAndAttributePair</code></p>", "author": "liutaohua", "createdAt": "2020-09-22T10:56:18Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -937,12 +937,11 @@ public int getNodesCountInGivenLevel(PartialPath prefixPath, int level) throws M\n           try {\n             Pair<Map<String, String>, Map<String, String>> pair =", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NTk1OQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492645959", "body": "same", "bodyText": "same", "bodyHTML": "<p dir=\"auto\">same</p>", "author": "liutaohua", "createdAt": "2020-09-22T10:59:33Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1003,18 +1002,13 @@ private boolean match(PartialPath fullPath, String[] prefixNodes) {\n       for (Pair<PartialPath, String[]> ansString : ans) {\n         long tagFileOffset = Long.parseLong(ansString.right[5]);\n         try {\n-          if (tagFileOffset < 0) {\n-            // no tags/attributes\n-            res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], Collections.emptyMap()));\n-          } else {\n-            // has tags/attributes\n-            Pair<Map<String, String>, Map<String, String>> pair =\n-                tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n-            pair.left.putAll(pair.right);\n-            res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], pair.left));\n+          Pair<Map<String, String>, Map<String, String>> pair = new Pair<>(Collections.emptyMap(),Collections.emptyMap());", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NDYzNg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492654636", "body": "I think this method can be removed, or move it to `ShowTimeseriesDataSet`", "bodyText": "I think this method can be removed, or move it to ShowTimeseriesDataSet", "bodyHTML": "<p dir=\"auto\">I think this method can be removed, or move it to <code>ShowTimeseriesDataSet</code></p>", "author": "liutaohua", "createdAt": "2020-09-22T11:17:33Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -566,7 +567,7 @@ private QueryDataSet processShowStorageGroup(ShowStorageGroupPlan showStorageGro\n   private QueryDataSet processShowTimeseries(ShowTimeSeriesPlan showTimeSeriesPlan,\n       QueryContext context) throws MetadataException {\n     List<ShowTimeSeriesResult> timeseriesList = showTimeseries(showTimeSeriesPlan, context);\n-    return QueryUtils.getQueryDataSet(timeseriesList, showTimeSeriesPlan, context);\n+    return new ShowTimeseriesDataSet(showTimeSeriesPlan, context, timeseriesList);\n   }\n \n   protected List<ShowTimeSeriesResult> showTimeseries(ShowTimeSeriesPlan plan, QueryContext context)", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1MDkxMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493150913", "body": "i think that  it can be initialized in the `constructor`", "bodyText": "i think that  it can be initialized in the constructor", "bodyHTML": "<p dir=\"auto\">i think that  it can be initialized in the <code>constructor</code></p>", "author": "liutaohua", "createdAt": "2020-09-23T02:09:37Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1MzU3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493153570", "body": "duplicate code, `transferShowTimeSeriesResultToRecordList` and `getQueryDataSet `", "bodyText": "duplicate code, transferShowTimeSeriesResultToRecordList and getQueryDataSet", "bodyHTML": "<p dir=\"auto\">duplicate code, <code>transferShowTimeSeriesResultToRecordList</code> and <code>getQueryDataSet </code></p>", "author": "liutaohua", "createdAt": "2020-09-23T02:14:05Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3MDMzMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493170333", "body": "i think that this code can be optimizing:\r\n1. Take the data directly from the `MManager` and initialize it in the `constructor`\r\n2. if the total amount of data is less than the `fetchSize`, which means there is no more data, reducing the access to the `MManager`.\r\n\r\n> when hasLimit = false, limit was means fetchSize\r\n\r\n3. if `index == result.size()== fetchSize`, get data from `MManager` again.", "bodyText": "i think that this code can be optimizing:\n\nTake the data directly from the MManager and initialize it in the constructor\nif the total amount of data is less than the fetchSize, which means there is no more data, reducing the access to the MManager.\n\n\nwhen hasLimit = false, limit was means fetchSize\n\n\nif index == result.size()== fetchSize, get data from MManager again.", "bodyHTML": "<p dir=\"auto\">i think that this code can be optimizing:</p>\n<ol dir=\"auto\">\n<li>Take the data directly from the <code>MManager</code> and initialize it in the <code>constructor</code></li>\n<li>if the total amount of data is less than the <code>fetchSize</code>, which means there is no more data, reducing the access to the <code>MManager</code>.</li>\n</ol>\n<blockquote>\n<p dir=\"auto\">when hasLimit = false, limit was means fetchSize</p>\n</blockquote>\n<ol start=\"3\" dir=\"auto\">\n<li>if <code>index == result.size()== fetchSize</code>, get data from <code>MManager</code> again.</li>\n</ol>", "author": "liutaohua", "createdAt": "2020-09-23T03:08:18Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      putRecord(record);\n+    }\n+    return this;\n+  }\n+\n+  public List<RowRecord> transferShowTimeSeriesResultToRecordList(\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    List<RowRecord> records = new ArrayList<>();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      records.add(record);\n+    }\n+    return records;\n+  }\n+\n+  private void updateRecord(RowRecord record, Map<String, String> map) {\n+    String text = map.entrySet().stream()\n+        .map(e -> \"\\\"\" + e.getKey() + \"\\\"\" + \":\" + \"\\\"\" + e.getValue() + \"\\\"\")\n+        .collect(Collectors.joining(\",\"));\n+\n+    updateRecord(record, text.length() == 0 ? null : \"{\" + text + \"}\");\n+  }\n+\n+  private void updateRecord(RowRecord record, String s) {\n+    if (s == null) {\n+      record.addField(null);\n+      return;\n+    }\n+    Field field = new Field(TSDataType.TEXT);\n+    field.setBinaryV(new Binary(s));\n+    record.addField(field);\n   }\n \n   @Override\n   protected boolean hasNextWithoutConstraint() throws IOException {\n+    if (!hasSetRecord) {", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3MDg1Mw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493170853", "body": "`putRecord` method should also be modified to `private`", "bodyText": "putRecord method should also be modified to private", "bodyHTML": "<p dir=\"auto\"><code>putRecord</code> method should also be modified to <code>private</code></p>", "author": "liutaohua", "createdAt": "2020-09-23T03:10:36Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      putRecord(record);\n+    }\n+    return this;\n+  }\n+\n+  public List<RowRecord> transferShowTimeSeriesResultToRecordList(\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    List<RowRecord> records = new ArrayList<>();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      records.add(record);\n+    }\n+    return records;\n+  }\n+\n+  private void updateRecord(RowRecord record, Map<String, String> map) {\n+    String text = map.entrySet().stream()\n+        .map(e -> \"\\\"\" + e.getKey() + \"\\\"\" + \":\" + \"\\\"\" + e.getValue() + \"\\\"\")\n+        .collect(Collectors.joining(\",\"));\n+\n+    updateRecord(record, text.length() == 0 ? null : \"{\" + text + \"}\");\n+  }\n+\n+  private void updateRecord(RowRecord record, String s) {", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "567eb58998773ed2818cd6cea72827a3c612b105", "url": "https://github.com/apache/iotdb/commit/567eb58998773ed2818cd6cea72827a3c612b105", "message": "edit", "committedDate": "2020-09-23T06:21:46Z", "type": "commit"}, {"oid": "e5e8948b3a2439f5ad33aedfcc0ceb3d58ad1125", "url": "https://github.com/apache/iotdb/commit/e5e8948b3a2439f5ad33aedfcc0ceb3d58ad1125", "message": "move to ShowTimeseriesDataSet", "committedDate": "2020-09-23T07:46:50Z", "type": "forcePushed"}, {"oid": "7309a50567eba7f009c1b858899af4cf2e6479d1", "url": "https://github.com/apache/iotdb/commit/7309a50567eba7f009c1b858899af4cf2e6479d1", "message": "move to ShowTimeseriesDataSet", "committedDate": "2020-09-23T07:49:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyMzU0Mw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493323543", "body": "```suggestion\r\n  public static final String COLUMN_TAGS = \"tags\";\r\n  public static final String COLUMN_ATTRIBUTES = \"attributes\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String COLUMN_TAG = \"tags\";\n          \n          \n            \n              public static final String COLUMN_ATTRIBUTE = \"attributes\";\n          \n          \n            \n              public static final String COLUMN_TAGS = \"tags\";\n          \n          \n            \n              public static final String COLUMN_ATTRIBUTES = \"attributes\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">COLUMN_TAG</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tags<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">COLUMN_ATTRIBUTE</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attributes<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">COLUMN_TAGS</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tags<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">COLUMN_ATTRIBUTES</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attributes<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "HTHou", "createdAt": "2020-09-23T08:45:05Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -70,6 +70,8 @@ private IoTDBConstant() {\n   public static final String COLUMN_DEVICES = \"devices\";\n   public static final String COLUMN_COLUMN = \"column\";\n   public static final String COLUMN_COUNT = \"count\";\n+  public static final String COLUMN_TAG = \"tags\";\n+  public static final String COLUMN_ATTRIBUTE = \"attributes\";", "originalCommit": "7309a50567eba7f009c1b858899af4cf2e6479d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "url": "https://github.com/apache/iotdb/commit/1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "message": "move to ShowTimeseriesDataSet, changed name", "committedDate": "2020-09-23T09:11:28Z", "type": "commit"}, {"oid": "1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "url": "https://github.com/apache/iotdb/commit/1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "message": "move to ShowTimeseriesDataSet, changed name", "committedDate": "2020-09-23T09:11:28Z", "type": "forcePushed"}, {"oid": "2688e3cc814f62f7f8a05985c146c2cad9468b85", "url": "https://github.com/apache/iotdb/commit/2688e3cc814f62f7f8a05985c146c2cad9468b85", "message": "Merge branch 'master' into master_output_format_tags_attributes", "committedDate": "2020-09-24T08:29:26Z", "type": "commit"}]}