{"pr_number": 8702, "pr_title": "SAK-44495 use the kernel UserSortNameComparator", "pr_author": "ottenhoff", "pr_createdAt": "2020-10-16T20:35:15Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8702", "timeline": [{"oid": "f4219d9a7641a8b77271ccc0992b821ae860f5d6", "url": "https://github.com/sakaiproject/sakai/commit/f4219d9a7641a8b77271ccc0992b821ae860f5d6", "message": "SAK-44495 use the kernel UserSortNameComparator", "committedDate": "2020-10-16T20:33:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzg4MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508537881", "body": "avoid naming methods after JIRA issues and instead use a comment\r\ni.e. fullnameWithSpaces()", "bodyText": "avoid naming methods after JIRA issues and instead use a comment\ni.e. fullnameWithSpaces()", "bodyHTML": "<p dir=\"auto\">avoid naming methods after JIRA issues and instead use a comment<br>\ni.e. fullnameWithSpaces()</p>", "author": "ern", "createdAt": "2020-10-20T14:06:21Z", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void SAK21743() {", "originalCommit": "f4219d9a7641a8b77271ccc0992b821ae860f5d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzOTkxNQ==", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508539915", "bodyText": "feel free to edit and rename. branch is open to editing.", "author": "ottenhoff", "createdAt": "2020-10-20T14:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNjg3MA==", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508736870", "body": "```suggestion\r\n    public void fullnamesWithSpacesCompare() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void SAK21743() {\n          \n          \n            \n                public void fullnamesWithSpacesCompare() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-c1 x x-first x-last\">SAK21743</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">fullnamesWithSpacesCompare</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ern", "createdAt": "2020-10-20T18:11:24Z", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void SAK21743() {", "originalCommit": "f4219d9a7641a8b77271ccc0992b821ae860f5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7eb677b406b08535a68a4491f1465e4d38de1d9", "url": "https://github.com/sakaiproject/sakai/commit/e7eb677b406b08535a68a4491f1465e4d38de1d9", "message": "Update kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "committedDate": "2020-10-20T18:11:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzk4Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508737982", "body": "```suggestion\r\n        // Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \r\n        // is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t// Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n          \n          \n            \n                \t// is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.\n          \n          \n            \n                    // Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n          \n          \n            \n                    // is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first x-last\">\t</span><span class=\"pl-c\"><span class=\"pl-c\">//</span> Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first x-last\">\t</span><span class=\"pl-c\"><span class=\"pl-c\">//</span> is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first x-last\">    </span><span class=\"pl-c\"><span class=\"pl-c\">//</span> Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first x-last\">    </span><span class=\"pl-c\"><span class=\"pl-c\">//</span> is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ern", "createdAt": "2020-10-20T18:13:08Z", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void fullnamesWithSpacesCompare() {\n+    \t// Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n+    \t// is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.", "originalCommit": "e7eb677b406b08535a68a4491f1465e4d38de1d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d70be4c30df21bff77484ad0b98de466e46f9fd", "url": "https://github.com/sakaiproject/sakai/commit/5d70be4c30df21bff77484ad0b98de466e46f9fd", "message": "spacing", "committedDate": "2020-10-20T18:13:23Z", "type": "commit"}]}