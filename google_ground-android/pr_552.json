{"pr_number": 552, "pr_title": "[Feature] Add ability to delete features", "pr_author": "shobhitagarwal1612", "pr_createdAt": "2020-07-23T11:13:19Z", "pr_url": "https://github.com/google/ground-android/pull/552", "merge_commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "timeline": [{"oid": "aff6e8889f747367584fa1ada277b1dd1055c4f3", "url": "https://github.com/google/ground-android/commit/aff6e8889f747367584fa1ada277b1dd1055c4f3", "message": "Add unit test", "committedDate": "2020-07-23T11:53:51Z", "type": "forcePushed"}, {"oid": "1e58c77259e194e162f55dcfba6f2a4df8444899", "url": "https://github.com/google/ground-android/commit/1e58c77259e194e162f55dcfba6f2a4df8444899", "message": "Add unit test", "committedDate": "2020-07-23T12:02:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDIwMQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459420201", "body": "Naming nit: we may want to call this \"markFeatureForDeletion\" to distinguish it from our future state where we don't actually delete things, but rather mark them as \"deleted\". In that case there would be three states in the local DB, \"not deleted\", \"marked for deletion on remote\", and \"deleted\".", "bodyText": "Naming nit: we may want to call this \"markFeatureForDeletion\" to distinguish it from our future state where we don't actually delete things, but rather mark them as \"deleted\". In that case there would be three states in the local DB, \"not deleted\", \"marked for deletion on remote\", and \"deleted\".", "bodyHTML": "<p dir=\"auto\">Naming nit: we may want to call this \"markFeatureForDeletion\" to distinguish it from our future state where we don't actually delete things, but rather mark them as \"deleted\". In that case there would be three states in the local DB, \"not deleted\", \"marked for deletion on remote\", and \"deleted\".</p>", "author": "gino-m", "createdAt": "2020-07-23T12:44:40Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -387,17 +388,42 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureDeleted(\n+      FeatureEntity featureEntity, FeatureMutation mutation) {", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MjU2Mg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459592562", "bodyText": "Done c210b45", "author": "shobhitagarwal1612", "createdAt": "2020-07-23T16:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 58b25f1cf..f34861499 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -388,42 +401,17 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n-            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n-  private CompletableSource markFeatureDeleted(\n-      FeatureEntity featureEntity, FeatureMutation mutation) {\n-    return Single.just(featureEntity)\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n-        .flatMap(entity -> featureDao.update(entity))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n     return featureDao\n         .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n         .subscribeOn(schedulers.io());\n   }\n \n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n   private Completable enqueue(FeatureMutation mutation) {\n     return featureMutationDao\n         .insert(FeatureMutationEntity.fromMutation(mutation))\n", "next_change": {"commit": "87648003f4fbe26f58c36c24650b5d74e69b7d79", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex f34861499..d15067f4d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -401,17 +402,42 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureDeleted(\n+      FeatureEntity featureEntity, FeatureMutation mutation) {\n+    return Single.just(featureEntity)\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n+        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n+        .flatMap(entity -> featureDao.update(entity))\n+        .ignoreElement()\n+        .subscribeOn(schedulers.io());\n+  }\n+\n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n     return featureDao\n         .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n         .subscribeOn(schedulers.io());\n   }\n \n+  @Override\n+  public Completable deleteFeature(String featureId) {\n+    return featureDao\n+        .findById(featureId)\n+        .toSingle()\n+        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n+        .flatMapCompletable(entity -> featureDao.delete(entity))\n+        .subscribeOn(schedulers.io());\n+  }\n+\n   private Completable enqueue(FeatureMutation mutation) {\n     return featureMutationDao\n         .insert(FeatureMutationEntity.fromMutation(mutation))\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 58b25f1cf..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -391,21 +423,18 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case DELETE:\n         return featureDao\n             .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n             .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n-  private CompletableSource markFeatureDeleted(\n-      FeatureEntity featureEntity, FeatureMutation mutation) {\n-    return Single.just(featureEntity)\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+    return featureDao\n+        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n-        .flatMap(entity -> featureDao.update(entity))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex c7c4cb4de..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,581 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findOnceAndStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement();\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMTAwNg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459421006", "body": "Can this steam be simplified by starting it with the call to featureDao.update?", "bodyText": "Can this steam be simplified by starting it with the call to featureDao.update?", "bodyHTML": "<p dir=\"auto\">Can this steam be simplified by starting it with the call to featureDao.update?</p>", "author": "gino-m", "createdAt": "2020-07-23T12:45:58Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -387,17 +388,42 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureDeleted(\n+      FeatureEntity featureEntity, FeatureMutation mutation) {\n+    return Single.just(featureEntity)\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n+        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n+        .flatMap(entity -> featureDao.update(entity))", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MjEyNg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459592126", "bodyText": "Yep. Done 9a65f16", "author": "shobhitagarwal1612", "createdAt": "2020-07-23T16:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMTAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 58b25f1cf..f34861499 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -388,42 +401,17 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n-            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n-  private CompletableSource markFeatureDeleted(\n-      FeatureEntity featureEntity, FeatureMutation mutation) {\n-    return Single.just(featureEntity)\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n-        .flatMap(entity -> featureDao.update(entity))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n     return featureDao\n         .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n         .subscribeOn(schedulers.io());\n   }\n \n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n   private Completable enqueue(FeatureMutation mutation) {\n     return featureMutationDao\n         .insert(FeatureMutationEntity.fromMutation(mutation))\n", "next_change": {"commit": "87648003f4fbe26f58c36c24650b5d74e69b7d79", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex f34861499..d15067f4d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -401,17 +402,42 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureDeleted(\n+      FeatureEntity featureEntity, FeatureMutation mutation) {\n+    return Single.just(featureEntity)\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n+        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n+        .flatMap(entity -> featureDao.update(entity))\n+        .ignoreElement()\n+        .subscribeOn(schedulers.io());\n+  }\n+\n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n     return featureDao\n         .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n         .subscribeOn(schedulers.io());\n   }\n \n+  @Override\n+  public Completable deleteFeature(String featureId) {\n+    return featureDao\n+        .findById(featureId)\n+        .toSingle()\n+        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n+        .flatMapCompletable(entity -> featureDao.delete(entity))\n+        .subscribeOn(schedulers.io());\n+  }\n+\n   private Completable enqueue(FeatureMutation mutation) {\n     return featureMutationDao\n         .insert(FeatureMutationEntity.fromMutation(mutation))\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 58b25f1cf..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -391,21 +423,18 @@ public class RoomLocalDataStore implements LocalDataStore {\n       case DELETE:\n         return featureDao\n             .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureDeleted(entity, mutation))\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n             .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n-  private CompletableSource markFeatureDeleted(\n-      FeatureEntity featureEntity, FeatureMutation mutation) {\n-    return Single.just(featureEntity)\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+    return featureDao\n+        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .map(entity -> entity.toBuilder().setState(EntityState.DELETED).build())\n-        .flatMap(entity -> featureDao.update(entity))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex c7c4cb4de..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,581 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findOnceAndStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement();\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMjA2Ng==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459422066", "body": "Can you refer to the static constant here for state 1 instead? You should be able to concat it to the string with +.", "bodyText": "Can you refer to the static constant here for state 1 instead? You should be able to concat it to the string with +.", "bodyHTML": "<p dir=\"auto\">Can you refer to the static constant here for state 1 instead? You should be able to concat it to the string with +.</p>", "author": "gino-m", "createdAt": "2020-07-23T12:47:48Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java", "diffHunk": "@@ -26,7 +26,7 @@\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId\")\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = 1\")", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MTg4NQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459591885", "bodyText": "String concatenation can't be used. So, instead I passed the state value as a parameter.\n1d04039", "author": "shobhitagarwal1612", "createdAt": "2020-07-23T16:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMjA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 67177e31f..0a1799c81 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -26,7 +26,7 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = 1\")\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId\")\n   Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n", "next_change": {"commit": "e0af26e504c5bfddb15cfde1ec88a5da6b0bad5e", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 0a1799c81..67177e31f 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -26,7 +26,7 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId\")\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = 1\")\n   Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n", "next_change": {"commit": "1d0403954e77804fdb2cb712aaeed3cbf2cf0886", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 67177e31f..6ae43a037 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -26,8 +27,8 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = 1\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId);\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "f6591275c886c98ade2e3c5064b8594b1bc38356", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 6ae43a037..d2bb2c376 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -28,7 +28,7 @@ import java.util.List;\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n   @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId, EntityState state);\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 67177e31f..d2bb2c376 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -19,6 +19,7 @@ package com.google.android.gnd.persistence.local.room.dao;\n import androidx.room.Dao;\n import androidx.room.Query;\n import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n+import com.google.android.gnd.persistence.local.room.models.EntityState;\n import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n import java.util.List;\n", "next_change": {"commit": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex d2bb2c376..1e3066205 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n+  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "e7c98f653d0946175b7f2cc9cd75216ced830477", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nsimilarity index 59%\nrename from gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nrename to gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nindex 1e3066205..c91f33971 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\n", "chunk": "@@ -18,18 +18,18 @@ package com.google.android.gnd.persistence.local.room.dao;\n \n import androidx.room.Dao;\n import androidx.room.Query;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n+import com.google.android.gnd.persistence.local.room.entity.LocationOfInterestEntity;\n import com.google.android.gnd.persistence.local.room.models.EntityState;\n import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n import java.util.List;\n \n-/** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n+/** Provides low-level read/write operations of {@link LocationOfInterestEntity} to/from the local db. */\n @Dao\n-public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n+public interface LocationOfInterestDao extends BaseDao<LocationOfInterestEntity> {\n+  @Query(\"SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<LocationOfInterestEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n-  @Query(\"SELECT * FROM feature WHERE id = :id\")\n-  Maybe<FeatureEntity> findById(String id);\n+  @Query(\"SELECT * FROM location_of_interest WHERE id = :id\")\n+  Maybe<LocationOfInterestEntity> findById(String id);\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 67177e31f..d2bb2c376 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -26,8 +27,8 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = 1\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId);\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex d2bb2c376..1e3066205 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n+  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "e7c98f653d0946175b7f2cc9cd75216ced830477", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nsimilarity index 59%\nrename from gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nrename to gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nindex 1e3066205..c91f33971 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\n", "chunk": "@@ -18,18 +18,18 @@ package com.google.android.gnd.persistence.local.room.dao;\n \n import androidx.room.Dao;\n import androidx.room.Query;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n+import com.google.android.gnd.persistence.local.room.entity.LocationOfInterestEntity;\n import com.google.android.gnd.persistence.local.room.models.EntityState;\n import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n import java.util.List;\n \n-/** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n+/** Provides low-level read/write operations of {@link LocationOfInterestEntity} to/from the local db. */\n @Dao\n-public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n+public interface LocationOfInterestDao extends BaseDao<LocationOfInterestEntity> {\n+  @Query(\"SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<LocationOfInterestEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n-  @Query(\"SELECT * FROM feature WHERE id = :id\")\n-  Maybe<FeatureEntity> findById(String id);\n+  @Query(\"SELECT * FROM location_of_interest WHERE id = :id\")\n+  Maybe<LocationOfInterestEntity> findById(String id);\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "e7c98f653d0946175b7f2cc9cd75216ced830477", "committedDate": "2022-06-28 12:42:01 -0400", "message": "Refactor: rename Feature -> LocationOfInterest"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzODI2NQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459538265", "body": "Please add GitHub issue no to TODO, e.g. `TODO(#123).`", "bodyText": "Please add GitHub issue no to TODO, e.g. TODO(#123).", "bodyHTML": "<p dir=\"auto\">Please add GitHub issue no to TODO, e.g. <code>TODO(#123).</code></p>", "author": "gino-m", "createdAt": "2020-07-23T15:30:38Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java", "diffHunk": "@@ -35,7 +35,9 @@ public void addMutationToBatch(FeatureMutation mutation, User user, WriteBatch b\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO: Implement me!\n+        // TODO: Also delete all remote observations linked to this feature.", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex f718c67dc..fd3ee3aa1 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,9 +35,7 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO: Also delete all remote observations linked to this feature.\n-        //  This isn't needed for local db as removing feature automatically deletes them.\n-        delete(batch);\n+        // TODO: Implement me!\n         break;\n       default:\n         throw new IllegalArgumentException(\"Unknown mutation type \" + mutation.getType());\n", "next_change": {"commit": "4e49697b27de4c2ba3db48ed60337ec28bf271c2", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex fd3ee3aa1..b96f44676 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,7 +35,7 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO: Implement me!\n+        delete(batch);\n         break;\n       default:\n         throw new IllegalArgumentException(\"Unknown mutation type \" + mutation.getType());\n", "next_change": {"commit": "22e2122857a100077d9d7d7005b63d4064fd6e9e", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex b96f44676..f718c67dc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,6 +35,8 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n+        // TODO: Also delete all remote observations linked to this feature.\n+        //  This isn't needed for local db as removing feature automatically deletes them.\n         delete(batch);\n         break;\n       default:\n", "next_change": {"commit": "6022ed38affc9ab252f815e7dd43cb0bcacdaf84", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex f718c67dc..807887084 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,7 +35,7 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO: Also delete all remote observations linked to this feature.\n+        // TODO(#108): Also delete all remote observations linked to this feature.\n         //  This isn't needed for local db as removing feature automatically deletes them.\n         delete(batch);\n         break;\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex f718c67dc..807887084 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,7 +35,7 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO: Also delete all remote observations linked to this feature.\n+        // TODO(#108): Also delete all remote observations linked to this feature.\n         //  This isn't needed for local db as removing feature automatically deletes them.\n         delete(batch);\n         break;\n", "next_change": {"commit": "55caac093783ed8a843c027447dd31a4abad5158", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex 807887084..5b019e383 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,8 +35,8 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // TODO(#108): Also delete all remote observations linked to this feature.\n-        //  This isn't needed for local db as removing feature automatically deletes them.\n+        // The server is expected to do a cascading delete of all observations for the deleted\n+        // feature.\n         delete(batch);\n         break;\n       default:\n", "next_change": {"commit": "44aae31e91ed4dfda84b279d3892e6c1cee3e179", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nindex 5b019e383..3fd6bf7ed 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n", "chunk": "@@ -35,7 +35,7 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n         merge(FeatureMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n-        // The server is expected to do a cascading delete of all observations for the deleted\n+        // The server is expected to do a cascading delete of all submissions for the deleted\n         // feature.\n         delete(batch);\n         break;\n", "next_change": {"commit": "d4ee8067f94f5a23dd5f73286ee470f1292c2176", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/LocationOfInterestDocumentReference.java\nsimilarity index 85%\nrename from gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\nrename to gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/LocationOfInterestDocumentReference.java\nindex 3fd6bf7ed..6f4d16a88 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/FeatureDocumentReference.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/remote/firestore/schema/LocationOfInterestDocumentReference.java\n", "chunk": "@@ -32,11 +32,11 @@ public class FeatureDocumentReference extends FluentDocumentReference {\n     switch (mutation.getType()) {\n       case CREATE:\n       case UPDATE:\n-        merge(FeatureMutationConverter.toMap(mutation, user), batch);\n+        merge(LocationOfInterestMutationConverter.toMap(mutation, user), batch);\n         break;\n       case DELETE:\n         // The server is expected to do a cascading delete of all submissions for the deleted\n-        // feature.\n+        // locationOfInterest.\n         delete(batch);\n         break;\n       default:\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "44aae31e91ed4dfda84b279d3892e6c1cee3e179", "committedDate": "2022-06-21 17:40:49 +0000", "message": "Rename Observation -> Submission references in Firestore schema"}, {"oid": "d4ee8067f94f5a23dd5f73286ee470f1292c2176", "committedDate": "2022-06-28 23:35:50 +0530", "message": "Rename references of \"feature\" to \"locationOfInterest\" in firebase schema"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjAyNA==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459542024", "body": "The naming of this method is a bit misleading; it actually filters out delete mutations and applies them to the local db. To make this clearer, I think we could do something like the following:\r\n\r\n```\r\n  private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\r\n    return remoteDataStore\r\n        .applyMutations(mutations, user)\r\n        .andThen(localDataStore.finalizeMutations(mutations));\r\n  }\r\n```\r\n\r\nThen from `LocalDataStore.finalizePendingMutations`  we could `finalizeDeletions` and `removePending`, both in `LocalDataStore`. Wdyt?", "bodyText": "The naming of this method is a bit misleading; it actually filters out delete mutations and applies them to the local db. To make this clearer, I think we could do something like the following:\n  private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n    return remoteDataStore\n        .applyMutations(mutations, user)\n        .andThen(localDataStore.finalizeMutations(mutations));\n  }\n\nThen from LocalDataStore.finalizePendingMutations  we could finalizeDeletions and removePending, both in LocalDataStore. Wdyt?", "bodyHTML": "<p dir=\"auto\">The naming of this method is a bit misleading; it actually filters out delete mutations and applies them to the local db. To make this clearer, I think we could do something like the following:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  private Completable processMutations(ImmutableList&lt;Mutation&gt; mutations, User user) {\n    return remoteDataStore\n        .applyMutations(mutations, user)\n        .andThen(localDataStore.finalizeMutations(mutations));\n  }\"><pre><code>  private Completable processMutations(ImmutableList&lt;Mutation&gt; mutations, User user) {\n    return remoteDataStore\n        .applyMutations(mutations, user)\n        .andThen(localDataStore.finalizeMutations(mutations));\n  }\n</code></pre></div>\n<p dir=\"auto\">Then from <code>LocalDataStore.finalizePendingMutations</code>  we could <code>finalizeDeletions</code> and <code>removePending</code>, both in <code>LocalDataStore</code>. Wdyt?</p>", "author": "gino-m", "createdAt": "2020-07-23T15:35:58Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java", "diffHunk": "@@ -112,17 +113,26 @@ private Completable processMutations(ImmutableList<Mutation> mutations, String u\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n-        .andThen(deleteObservationIfRemovedRemotely(mutations))\n+        .andThen(deleteObservationOrFeature(mutations))\n         .andThen(localDataStore.removePendingMutations(mutations));\n   }\n \n   // TODO: If the remote sync fails, reset the state to DEFAULT.\n-  private Completable deleteObservationIfRemovedRemotely(ImmutableList<Mutation> mutations) {\n+  private Completable deleteObservationOrFeature(ImmutableList<Mutation> mutations) {", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MTM0NA==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459591344", "bodyText": "Thanks! This makes so much sense now\n05b7f5b", "author": "shobhitagarwal1612", "createdAt": "2020-07-23T16:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 4eda5f229..29a79a45a 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -113,26 +112,17 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n-        .andThen(deleteObservationOrFeature(mutations))\n+        .andThen(deleteObservationIfRemovedRemotely(mutations))\n         .andThen(localDataStore.removePendingMutations(mutations));\n   }\n \n   // TODO: If the remote sync fails, reset the state to DEFAULT.\n-  private Completable deleteObservationOrFeature(ImmutableList<Mutation> mutations) {\n+  private Completable deleteObservationIfRemovedRemotely(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return localDataStore.deleteObservation(\n-                    ((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return localDataStore.deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(\n-                    new IllegalArgumentException(\"Unknown type : \" + mutation));\n-              }\n-            });\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .map(mutation -> ((ObservationMutation) mutation).getObservationId())\n+        .flatMapCompletable(localDataStore::deleteObservation);\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": {"commit": "14eef0e9bbc7a91a5101c5afaa05ba9650bb7477", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 29a79a45a..2ab2b4ab7 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -120,9 +121,18 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   private Completable deleteObservationIfRemovedRemotely(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .filter(mutation -> mutation instanceof ObservationMutation)\n-        .map(mutation -> ((ObservationMutation) mutation).getObservationId())\n-        .flatMapCompletable(localDataStore::deleteObservation);\n+        .flatMapCompletable(\n+            mutation -> {\n+              if (mutation instanceof ObservationMutation) {\n+                return localDataStore.deleteObservation(\n+                    ((ObservationMutation) mutation).getObservationId());\n+              } else if (mutation instanceof FeatureMutation) {\n+                return localDataStore.deleteFeature(mutation.getFeatureId());\n+              } else {\n+                return Completable.error(\n+                    new IllegalArgumentException(\"Unknown type : \" + mutation));\n+              }\n+            });\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": {"commit": "05b7f5b622f80528f88bf12ec1f02c1f14678302", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 2ab2b4ab7..4b049cf74 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -113,26 +110,8 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n-        .andThen(deleteObservationIfRemovedRemotely(mutations))\n-        .andThen(localDataStore.removePendingMutations(mutations));\n-  }\n-\n-  // TODO: If the remote sync fails, reset the state to DEFAULT.\n-  private Completable deleteObservationIfRemovedRemotely(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return localDataStore.deleteObservation(\n-                    ((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return localDataStore.deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(\n-                    new IllegalArgumentException(\"Unknown type : \" + mutation));\n-              }\n-            });\n+        // TODO: If the remote sync fails, reset the state to DEFAULT.\n+        .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 4eda5f229..4b049cf74 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -113,26 +110,8 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n-        .andThen(deleteObservationOrFeature(mutations))\n-        .andThen(localDataStore.removePendingMutations(mutations));\n-  }\n-\n-  // TODO: If the remote sync fails, reset the state to DEFAULT.\n-  private Completable deleteObservationOrFeature(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return localDataStore.deleteObservation(\n-                    ((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return localDataStore.deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(\n-                    new IllegalArgumentException(\"Unknown type : \" + mutation));\n-              }\n-            });\n+        // TODO: If the remote sync fails, reset the state to DEFAULT.\n+        .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": {"commit": "4e5e498fb4cddb3f5a2bd227905d5d08c4b2908c", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 4b049cf74..fa261d35f 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -110,10 +127,54 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   private Completable processMutations(ImmutableList<Mutation> mutations, User user) {\n     return remoteDataStore\n         .applyMutations(mutations, user)\n+        .andThen(processPhotoFieldMutations(mutations))\n         // TODO: If the remote sync fails, reset the state to DEFAULT.\n         .andThen(localDataStore.finalizePendingMutations(mutations));\n   }\n \n+  /**\n+   * Filter all mutations containing observation mutations with changes to photo fields. Delete old\n+   * photo from remote storage and enqueue new photo for upload.\n+   */\n+  private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n+    return Observable.fromIterable(mutations)\n+        .filter(mutation -> mutation instanceof ObservationMutation)\n+        .cast(ObservationMutation.class)\n+        .flatMapCompletable(\n+            mutation ->\n+                Observable.fromIterable(mutation.getResponseDeltas())\n+                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n+                    .flatMapCompletable(\n+                        delta ->\n+                            enqueuePhotoUpload(delta.getNewResponse())\n+                                .andThen(deleteRemotePhoto(delta.getOriginalResponse()))));\n+  }\n+\n+  /** Enqueue photo for uploading to remote storage. */\n+  private Completable enqueuePhotoUpload(Optional<Response> response) {\n+    return Completable.create(\n+        emitter -> {\n+          response.ifPresent(\n+              r -> {\n+                String remotePath = response.get().toString();\n+                try {\n+                  File localFile = fileUtil.getLocalFileFromDestinationPath(remotePath);\n+                  photoSyncWorkManager.enqueueSyncWorker(localFile.getPath(), remotePath);\n+                } catch (FileNotFoundException e) {\n+                  emitter.onError(e);\n+                }\n+              });\n+          emitter.onComplete();\n+        });\n+  }\n+\n+  /** Removes remote file. */\n+  private Completable deleteRemotePhoto(Optional<Response> response) {\n+    return response\n+        .map(r -> storageManager.deleteRemotePhoto(r.toString()))\n+        .orElse(Completable.complete());\n+  }\n+\n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n       ImmutableList<Mutation> pendingMutations) {\n     return stream(pendingMutations)\n", "next_change": {"commit": "cdd23da09bf16496b8ab278653dfa90952308b55", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex fa261d35f..dea825d45 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -168,13 +165,6 @@ public class LocalMutationSyncWorker extends BaseWorker {\n         });\n   }\n \n-  /** Removes remote file. */\n-  private Completable deleteRemotePhoto(Optional<Response> response) {\n-    return response\n-        .map(r -> storageManager.deleteRemotePhoto(r.toString()))\n-        .orElse(Completable.complete());\n-  }\n-\n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n       ImmutableList<Mutation> pendingMutations) {\n     return stream(pendingMutations)\n", "next_change": {"commit": "f400433e24e0d6006fb4ed9a74012aa4fd47b089", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex dea825d45..c89720837 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -149,20 +149,18 @@ public class LocalMutationSyncWorker extends BaseWorker {\n \n   /** Enqueue photo for uploading to remote storage. */\n   private Completable enqueuePhotoUpload(Optional<Response> response) {\n-    return Completable.create(\n-        emitter -> {\n-          response.ifPresent(\n-              r -> {\n-                String remotePath = response.get().toString();\n-                try {\n-                  File localFile = fileUtil.getLocalFileFromDestinationPath(remotePath);\n-                  photoSyncWorkManager.enqueueSyncWorker(localFile.getPath(), remotePath);\n-                } catch (FileNotFoundException e) {\n-                  emitter.onError(e);\n-                }\n-              });\n-          emitter.onComplete();\n-        });\n+    return Completable.fromRunnable(\n+        () ->\n+            response.ifPresent(\n+                r -> {\n+                  try {\n+                    String remotePath = response.get().toString();\n+                    File localFile = fileUtil.getLocalFileFromDestinationPath(remotePath);\n+                    photoSyncWorkManager.enqueueSyncWorker(localFile.getPath(), remotePath);\n+                  } catch (FileNotFoundException e) {\n+                    throw new RuntimeException(e);\n+                  }\n+                }));\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": {"commit": "bff16b4585c46b432ca14b45cfc6601efe9df84a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex c89720837..58d7e0cd0 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -144,23 +134,13 @@ public class LocalMutationSyncWorker extends BaseWorker {\n             mutation ->\n                 Observable.fromIterable(mutation.getResponseDeltas())\n                     .filter(delta -> delta.getFieldType() == Type.PHOTO)\n-                    .flatMapCompletable(delta -> enqueuePhotoUpload(delta.getNewResponse())));\n-  }\n-\n-  /** Enqueue photo for uploading to remote storage. */\n-  private Completable enqueuePhotoUpload(Optional<Response> response) {\n-    return Completable.fromRunnable(\n-        () ->\n-            response.ifPresent(\n-                r -> {\n-                  try {\n-                    String remotePath = response.get().toString();\n-                    File localFile = fileUtil.getLocalFileFromDestinationPath(remotePath);\n-                    photoSyncWorkManager.enqueueSyncWorker(localFile.getPath(), remotePath);\n-                  } catch (FileNotFoundException e) {\n-                    throw new RuntimeException(e);\n-                  }\n-                }));\n+                    .map(ResponseDelta::getNewResponse)\n+                    .map(Optional::isPresent)\n+                    .map(Object::toString)\n+                    .flatMapCompletable(\n+                        remotePath ->\n+                            Completable.fromRunnable(\n+                                () -> photoSyncWorkManager.enqueueSyncWorker(remotePath))));\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": {"commit": "a478804e6c7aaba41a095d8cc19b26ab0d918d7f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\nindex 58d7e0cd0..97a8d4061 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/sync/LocalMutationSyncWorker.java\n", "chunk": "@@ -123,24 +121,18 @@ public class LocalMutationSyncWorker extends BaseWorker {\n   }\n \n   /**\n-   * Filter all mutations containing observation mutations with changes to photo fields and uploads\n+   * Filters all mutations containing observation mutations with changes to photo fields and uploads\n    * to remote storage.\n    */\n   private Completable processPhotoFieldMutations(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation instanceof ObservationMutation)\n-        .cast(ObservationMutation.class)\n+        .flatMapIterable(mutation -> ((ObservationMutation) mutation).getResponseDeltas())\n+        .filter(delta -> delta.getFieldType() == Type.PHOTO && delta.getNewResponse().isPresent())\n+        .map(delta -> delta.getNewResponse().get().toString())\n         .flatMapCompletable(\n-            mutation ->\n-                Observable.fromIterable(mutation.getResponseDeltas())\n-                    .filter(delta -> delta.getFieldType() == Type.PHOTO)\n-                    .map(ResponseDelta::getNewResponse)\n-                    .map(Optional::isPresent)\n-                    .map(Object::toString)\n-                    .flatMapCompletable(\n-                        remotePath ->\n-                            Completable.fromRunnable(\n-                                () -> photoSyncWorkManager.enqueueSyncWorker(remotePath))));\n+            remotePath ->\n+                Completable.fromRunnable(() -> photoSyncWorkManager.enqueueSyncWorker(remotePath)));\n   }\n \n   private Map<String, ImmutableList<Mutation>> groupByUserId(\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "4e5e498fb4cddb3f5a2bd227905d5d08c4b2908c", "committedDate": "2020-08-13 14:53:18 +0530", "message": "Process photo mutations in LocalMutationSyncWorker"}, {"oid": "cdd23da09bf16496b8ab278653dfa90952308b55", "committedDate": "2020-08-14 13:01:43 +0530", "message": "Do not remove remote files from client"}, {"oid": "f400433e24e0d6006fb4ed9a74012aa4fd47b089", "committedDate": "2020-08-14 13:17:17 +0530", "message": "Replace `create()` with `fromRunnable()`"}, {"oid": "bff16b4585c46b432ca14b45cfc6601efe9df84a", "committedDate": "2020-08-14 14:50:58 +0530", "message": "Cleanup"}, {"oid": "a478804e6c7aaba41a095d8cc19b26ab0d918d7f", "committedDate": "2020-08-14 20:40:14 +0530", "message": "Simplify RxChain"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "631c6d61b484b243cb7e6bbe8ced4c51e7f8ed5b", "committedDate": "2020-11-13 14:37:49 +0000", "message": "Revert cloud image changes. Address Shobhit's feedback"}, {"oid": "b156628706407d50d63ee3b04d95cc0aa1ee2237", "committedDate": "2020-11-16 15:32:08 +0000", "message": "Fix checkstyle"}, {"oid": "2c4f0933613658b984506978e79a4e301e737adc", "committedDate": "2021-08-10 21:02:52 +0530", "message": "Fix Worker/Manager classes"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NzM4Mg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459547382", "body": "With `autoDisposable()` used here, I believe it will scope the subscription to the entire lifecycle of the HomeScreenFragment. These will accumulate as long as the home screen remains open.\r\n\r\nTo fix this, you can create a `PublishProcessor deleteFeatureRequests` in the VM which you could populate with feature id on each deletion request. That stream would then be flatMapped to the actual feature deletion observable, the resulting stream exposed as a stream of SingleEvent that is subscribed to in one of the `create` methods of this class. Wdyt?", "bodyText": "With autoDisposable() used here, I believe it will scope the subscription to the entire lifecycle of the HomeScreenFragment. These will accumulate as long as the home screen remains open.\nTo fix this, you can create a PublishProcessor deleteFeatureRequests in the VM which you could populate with feature id on each deletion request. That stream would then be flatMapped to the actual feature deletion observable, the resulting stream exposed as a stream of SingleEvent that is subscribed to in one of the create methods of this class. Wdyt?", "bodyHTML": "<p dir=\"auto\">With <code>autoDisposable()</code> used here, I believe it will scope the subscription to the entire lifecycle of the HomeScreenFragment. These will accumulate as long as the home screen remains open.</p>\n<p dir=\"auto\">To fix this, you can create a <code>PublishProcessor deleteFeatureRequests</code> in the VM which you could populate with feature id on each deletion request. That stream would then be flatMapped to the actual feature deletion observable, the resulting stream exposed as a stream of SingleEvent that is subscribed to in one of the <code>create</code> methods of this class. Wdyt?</p>", "author": "gino-m", "createdAt": "2020-07-23T15:43:50Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java", "diffHunk": "@@ -232,10 +236,25 @@ private void closeDrawer() {\n   }\n \n   @Override\n-  public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n+  public void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\n     inflater.inflate(R.menu.feature_sheet_menu, menu);\n   }\n \n+  @Override\n+  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n+    switch (item.getItemId()) {\n+      case R.id.move_feature_menu_item:\n+        // TODO\n+        return false;\n+      case R.id.delete_feature_menu_item:\n+        // TODO: Re-position map to default location after successful deletion.\n+        viewModel.deleteActiveFeature().as(autoDisposable(this)).subscribe(this::hideBottomSheet);", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjkwMg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r460106902", "bodyText": "Done. Thanks", "author": "shobhitagarwal1612", "createdAt": "2020-07-24T14:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NzM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 493d02095..53b7ee290 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -236,25 +232,10 @@ public class HomeScreenFragment extends AbstractFragment\n   }\n \n   @Override\n-  public void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\n+  public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n     inflater.inflate(R.menu.feature_sheet_menu, menu);\n   }\n \n-  @Override\n-  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n-    switch (item.getItemId()) {\n-      case R.id.move_feature_menu_item:\n-        // TODO\n-        return false;\n-      case R.id.delete_feature_menu_item:\n-        // TODO: Re-position map to default location after successful deletion.\n-        viewModel.deleteActiveFeature().as(autoDisposable(this)).subscribe(this::hideBottomSheet);\n-        return true;\n-      default:\n-        return false;\n-    }\n-  }\n-\n   @Override\n   public void onStart() {\n     super.onStart();\n", "next_change": {"commit": "9e858ba67b77b65631d1ae96da5bcd16b116557f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 53b7ee290..92ba17257 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -232,10 +236,25 @@ public class HomeScreenFragment extends AbstractFragment\n   }\n \n   @Override\n-  public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n+  public void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\n     inflater.inflate(R.menu.feature_sheet_menu, menu);\n   }\n \n+  @Override\n+  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n+    switch (item.getItemId()) {\n+      case R.id.move_feature_menu_item:\n+        // TODO\n+        return false;\n+      case R.id.delete_feature_menu_item:\n+        // TODO: Re-position map to default location after successful deletion.\n+        viewModel.deleteActiveFeature().as(autoDisposable(this)).subscribe(() -> hideBottomSheet());\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n   @Override\n   public void onStart() {\n     super.onStart();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 493d02095..8cab2bf87 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -247,8 +255,7 @@ public class HomeScreenFragment extends AbstractFragment\n         // TODO\n         return false;\n       case R.id.delete_feature_menu_item:\n-        // TODO: Re-position map to default location after successful deletion.\n-        viewModel.deleteActiveFeature().as(autoDisposable(this)).subscribe(this::hideBottomSheet);\n+        viewModel.deleteFeature();\n         return true;\n       default:\n         return false;\n", "next_change": {"commit": "c2d70a24ce39f0ac7db489e61477e5e62e8b2b31", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 8cab2bf87..2606892bc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -252,7 +253,9 @@ public class HomeScreenFragment extends AbstractFragment\n   public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n     switch (item.getItemId()) {\n       case R.id.move_feature_menu_item:\n-        // TODO\n+        Toast.makeText(getContext(), \"Move feature\", Toast.LENGTH_SHORT).show();\n+        hideBottomSheet();\n+        mapContainerFragment.repositionFeature();\n         return false;\n       case R.id.delete_feature_menu_item:\n         viewModel.deleteFeature();\n", "next_change": {"commit": "e8571c946483dd219c957b4d727f01fff1bb45ce", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 2606892bc..33d13aab3 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -255,7 +255,7 @@ public class HomeScreenFragment extends AbstractFragment\n       case R.id.move_feature_menu_item:\n         Toast.makeText(getContext(), \"Move feature\", Toast.LENGTH_SHORT).show();\n         hideBottomSheet();\n-        mapContainerFragment.repositionFeature();\n+        mapContainerFragment.setRepositionMode();\n         return false;\n       case R.id.delete_feature_menu_item:\n         viewModel.deleteFeature();\n", "next_change": {"commit": "4434533d3a4c760d29cd8dbe201106e79e4aa496", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 33d13aab3..5dad173f6 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -253,9 +258,13 @@ public class HomeScreenFragment extends AbstractFragment\n   public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n     switch (item.getItemId()) {\n       case R.id.move_feature_menu_item:\n+        BottomSheetState state = viewModel.getBottomSheetState().getValue();\n+        if (state == null) {\n+          return false;\n+        }\n         Toast.makeText(getContext(), \"Move feature\", Toast.LENGTH_SHORT).show();\n         hideBottomSheet();\n-        mapContainerFragment.setRepositionMode();\n+        mapContainerFragment.setRepositionMode(state.getFeature());\n         return false;\n       case R.id.delete_feature_menu_item:\n         viewModel.deleteFeature();\n", "next_change": {"commit": "03c8f90711d5ddb32f64ab26ae475b1a8cdad172", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 5dad173f6..6d4a8d7a4 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -262,7 +266,6 @@ public class HomeScreenFragment extends AbstractFragment\n         if (state == null) {\n           return false;\n         }\n-        Toast.makeText(getContext(), \"Move feature\", Toast.LENGTH_SHORT).show();\n         hideBottomSheet();\n         mapContainerFragment.setRepositionMode(state.getFeature());\n         return false;\n", "next_change": {"commit": "a368765dc75cebdd5b6f8350c423c87488b3940d", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 6d4a8d7a4..109f44ebb 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -263,11 +264,10 @@ public class HomeScreenFragment extends AbstractFragment\n     switch (item.getItemId()) {\n       case R.id.move_feature_menu_item:\n         BottomSheetState state = viewModel.getBottomSheetState().getValue();\n-        if (state == null) {\n-          return false;\n+        if (state != null) {\n+          hideBottomSheet();\n+          mapContainerFragment.setRepositionMode(Optional.ofNullable(state.getFeature()));\n         }\n-        hideBottomSheet();\n-        mapContainerFragment.setRepositionMode(state.getFeature());\n         return false;\n       case R.id.delete_feature_menu_item:\n         viewModel.deleteFeature();\n", "next_change": {"commit": "4c08c156622f20b75efa70ffbbd112602c1ea2ee", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 109f44ebb..064c8576f 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -261,16 +262,20 @@ public class HomeScreenFragment extends AbstractFragment\n \n   @Override\n   public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n+    BottomSheetState state = viewModel.getBottomSheetState().getValue();\n+    if (state == null) {\n+      Timber.e(\"BottomSheetState is null\");\n+      return false;\n+    }\n+\n     switch (item.getItemId()) {\n       case R.id.move_feature_menu_item:\n-        BottomSheetState state = viewModel.getBottomSheetState().getValue();\n-        if (state != null) {\n-          hideBottomSheet();\n-          mapContainerFragment.setRepositionMode(Optional.ofNullable(state.getFeature()));\n-        }\n+        hideBottomSheet();\n+        mapContainerFragment.setRepositionMode(Optional.ofNullable(state.getFeature()));\n         return false;\n       case R.id.delete_feature_menu_item:\n-        viewModel.deleteFeature();\n+        hideBottomSheet();\n+        viewModel.deleteFeature(state.getFeature());\n         return true;\n       default:\n         return false;\n", "next_change": {"commit": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 064c8576f..8fcf2e5fc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -271,11 +292,16 @@ public class HomeScreenFragment extends AbstractFragment\n     switch (item.getItemId()) {\n       case R.id.move_feature_menu_item:\n         hideBottomSheet();\n-        mapContainerFragment.setRepositionMode(Optional.ofNullable(state.getFeature()));\n+        mapContainerFragment.setRepositionMode(state.getFeature());\n         return false;\n       case R.id.delete_feature_menu_item:\n         hideBottomSheet();\n-        viewModel.deleteFeature(state.getFeature());\n+        Optional<Feature> featureToDelete = state.getFeature();\n+        if (featureToDelete.isPresent()){\n+          viewModel.deleteFeature(featureToDelete.get());\n+        } else {\n+          Timber.e(\"Attempted to delete non-existent feature\");\n+        }\n         return true;\n       default:\n         return false;\n", "next_change": {"commit": "4266bc0de17bbeb526fb088d47942fd61fecf4cb", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 8fcf2e5fc..d2ae22334 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -297,7 +296,7 @@ public class HomeScreenFragment extends AbstractFragment\n       case R.id.delete_feature_menu_item:\n         hideBottomSheet();\n         Optional<Feature> featureToDelete = state.getFeature();\n-        if (featureToDelete.isPresent()){\n+        if (featureToDelete.isPresent()) {\n           viewModel.deleteFeature(featureToDelete.get());\n         } else {\n           Timber.e(\"Attempted to delete non-existent feature\");\n", "next_change": {"commit": "66b2e6103a5ad44439ce44d85c8419a2fc1dadbf", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex d2ae22334..e00ee276f 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -302,6 +323,9 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "fbbb5868c67d2d12dbe463426a371ac40a1d590c", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex e00ee276f..ffde7ca87 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -323,9 +317,6 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "9788ef2f15cdb049862c60e8bd92147fe7acb5d7", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex ffde7ca87..a04265e1f 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -317,6 +323,9 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "297bedeb681297d031187ec4cf6ba1fdc595ace0", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex a04265e1f..8ecb6ea9e 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -323,9 +316,6 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "79573663f318fb72fbb0145b758e3def5e84a0fd", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 8ecb6ea9e..50326d3c6 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -316,6 +324,9 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "930ea8625bc7cca792f3c0cd03eec49be2e9e511", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 50326d3c6..1c8217b16 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -324,9 +332,6 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "2911b4a7232562ec53ae6d4e579c4b222c45f1cc", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 1c8217b16..89fc311ff 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -332,6 +337,9 @@ public class HomeScreenFragment extends AbstractFragment\n           Timber.e(\"Attempted to delete non-existent feature\");\n         }\n         return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n       default:\n         return false;\n     }\n", "next_change": {"commit": "65b8fd7ca5a8daa429931f5fa04503623188f057", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 89fc311ff..6c3cd95c6 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -323,26 +320,24 @@ public class HomeScreenFragment extends AbstractFragment\n       return false;\n     }\n \n-    switch (item.getItemId()) {\n-      case R.id.move_feature_menu_item:\n-        hideBottomSheet();\n-        mapContainerFragment.setRepositionMode(state.getFeature());\n-        return false;\n-      case R.id.delete_feature_menu_item:\n-        hideBottomSheet();\n-        Optional<Feature> featureToDelete = state.getFeature();\n-        if (featureToDelete.isPresent()) {\n-          viewModel.deleteFeature(featureToDelete.get());\n-        } else {\n-          Timber.e(\"Attempted to delete non-existent feature\");\n-        }\n-        return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n-      default:\n-        return false;\n+    if (item.getItemId() == R.id.move_feature_menu_item) {\n+      hideBottomSheet();\n+      mapContainerFragment.setRepositionMode(state.getFeature());\n+    } else if (item.getItemId() == R.id.delete_feature_menu_item) {\n+      hideBottomSheet();\n+      Optional<Feature> featureToDelete = state.getFeature();\n+      if (featureToDelete.isPresent()) {\n+        viewModel.deleteFeature(featureToDelete.get());\n+      } else {\n+        Timber.e(\"Attempted to delete non-existent feature\");\n+      }\n+    } else if (item.getItemId() == R.id.feature_properties_menu_item) {\n+      showFeatureProperties();\n+    } else {\n+      return false;\n     }\n+\n+    return true;\n   }\n \n   @Override\n", "next_change": {"commit": "63414807f09c0bbfcb493c1abe25c46666f54140", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 6c3cd95c6..65c98e04b 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -320,24 +322,26 @@ public class HomeScreenFragment extends AbstractFragment\n       return false;\n     }\n \n-    if (item.getItemId() == R.id.move_feature_menu_item) {\n-      hideBottomSheet();\n-      mapContainerFragment.setRepositionMode(state.getFeature());\n-    } else if (item.getItemId() == R.id.delete_feature_menu_item) {\n-      hideBottomSheet();\n-      Optional<Feature> featureToDelete = state.getFeature();\n-      if (featureToDelete.isPresent()) {\n-        viewModel.deleteFeature(featureToDelete.get());\n-      } else {\n-        Timber.e(\"Attempted to delete non-existent feature\");\n-      }\n-    } else if (item.getItemId() == R.id.feature_properties_menu_item) {\n-      showFeatureProperties();\n-    } else {\n-      return false;\n+    switch (item.getItemId()) {\n+      case R.id.move_feature_menu_item:\n+        hideBottomSheet();\n+        mapContainerFragment.setRepositionMode(state.getFeature());\n+        return false;\n+      case R.id.delete_feature_menu_item:\n+        hideBottomSheet();\n+        Optional<Feature> featureToDelete = state.getFeature();\n+        if (featureToDelete.isPresent()) {\n+          viewModel.deleteFeature(featureToDelete.get());\n+        } else {\n+          Timber.e(\"Attempted to delete non-existent feature\");\n+        }\n+        return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n+      default:\n+        return false;\n     }\n-\n-    return true;\n   }\n \n   @Override\n", "next_change": {"commit": "93ac55fcc0a20af159fb6aaf4d9261aa1d72429c", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 65c98e04b..f8c0ed7a6 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -322,26 +328,24 @@ public class HomeScreenFragment extends AbstractFragment\n       return false;\n     }\n \n-    switch (item.getItemId()) {\n-      case R.id.move_feature_menu_item:\n-        hideBottomSheet();\n-        mapContainerFragment.setRepositionMode(state.getFeature());\n-        return false;\n-      case R.id.delete_feature_menu_item:\n-        hideBottomSheet();\n-        Optional<Feature> featureToDelete = state.getFeature();\n-        if (featureToDelete.isPresent()) {\n-          viewModel.deleteFeature(featureToDelete.get());\n-        } else {\n-          Timber.e(\"Attempted to delete non-existent feature\");\n-        }\n-        return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n-      default:\n-        return false;\n+    if (item.getItemId() == R.id.move_feature_menu_item) {\n+      hideBottomSheet();\n+      mapContainerFragment.setRepositionMode(state.getFeature());\n+    } else if (item.getItemId() == R.id.delete_feature_menu_item) {\n+      hideBottomSheet();\n+      Optional<Feature> featureToDelete = state.getFeature();\n+      if (featureToDelete.isPresent()) {\n+        viewModel.deleteFeature(featureToDelete.get());\n+      } else {\n+        Timber.e(\"Attempted to delete non-existent feature\");\n+      }\n+    } else if (item.getItemId() == R.id.feature_properties_menu_item) {\n+      showFeatureProperties();\n+    } else {\n+      return false;\n     }\n+\n+    return true;\n   }\n \n   @Override\n", "next_change": {"commit": "f098ba8aeac64ff3ba6ebddc5adbc5ab4e25f18b", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex f8c0ed7a6..ae2ec84ca 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -328,24 +322,44 @@ public class HomeScreenFragment extends AbstractFragment\n       return false;\n     }\n \n-    if (item.getItemId() == R.id.move_feature_menu_item) {\n-      hideBottomSheet();\n-      mapContainerFragment.setRepositionMode(state.getFeature());\n-    } else if (item.getItemId() == R.id.delete_feature_menu_item) {\n-      hideBottomSheet();\n-      Optional<Feature> featureToDelete = state.getFeature();\n-      if (featureToDelete.isPresent()) {\n-        viewModel.deleteFeature(featureToDelete.get());\n-      } else {\n-        Timber.e(\"Attempted to delete non-existent feature\");\n-      }\n-    } else if (item.getItemId() == R.id.feature_properties_menu_item) {\n-      showFeatureProperties();\n-    } else {\n-      return false;\n+    switch (item.getItemId()) {\n+      case R.id.move_feature_menu_item:\n+        hideBottomSheet();\n+        mapContainerFragment.setRepositionMode(state.getFeature());\n+        return false;\n+      case R.id.delete_feature_menu_item:\n+        Optional<Feature> featureToDelete = state.getFeature();\n+        if (featureToDelete.isPresent()) {\n+          new Builder(requireActivity())\n+              .setTitle(\n+                  getString(\n+                      R.string.feature_delete_confirmation_dialog_title,\n+                      featureHelper.getLabel(featureToDelete)))\n+              .setMessage(R.string.feature_delete_confirmation_dialog_message)\n+              .setPositiveButton(\n+                  R.string.delete_button_label,\n+                  (dialog, id) -> {\n+                    hideBottomSheet();\n+                    viewModel.deleteFeature(featureToDelete.get());\n+                  })\n+              .setNegativeButton(\n+                  R.string.cancel_button_label,\n+                  (dialog, id) -> {\n+                    // Do nothing.\n+                  })\n+              .create()\n+              .show();\n+        } else {\n+          hideBottomSheet();\n+          Timber.e(\"Attempted to delete non-existent feature\");\n+        }\n+        return true;\n+      case R.id.feature_properties_menu_item:\n+        showFeatureProperties();\n+        return true;\n+      default:\n+        return false;\n     }\n-\n-    return true;\n   }\n \n   @Override\n", "next_change": {"commit": "234b00cc31cccbb50ba88a6bed867ea2b4894c93", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex ae2ec84ca..31f6d0bf2 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -322,44 +325,24 @@ public class HomeScreenFragment extends AbstractFragment\n       return false;\n     }\n \n-    switch (item.getItemId()) {\n-      case R.id.move_feature_menu_item:\n-        hideBottomSheet();\n-        mapContainerFragment.setRepositionMode(state.getFeature());\n-        return false;\n-      case R.id.delete_feature_menu_item:\n-        Optional<Feature> featureToDelete = state.getFeature();\n-        if (featureToDelete.isPresent()) {\n-          new Builder(requireActivity())\n-              .setTitle(\n-                  getString(\n-                      R.string.feature_delete_confirmation_dialog_title,\n-                      featureHelper.getLabel(featureToDelete)))\n-              .setMessage(R.string.feature_delete_confirmation_dialog_message)\n-              .setPositiveButton(\n-                  R.string.delete_button_label,\n-                  (dialog, id) -> {\n-                    hideBottomSheet();\n-                    viewModel.deleteFeature(featureToDelete.get());\n-                  })\n-              .setNegativeButton(\n-                  R.string.cancel_button_label,\n-                  (dialog, id) -> {\n-                    // Do nothing.\n-                  })\n-              .create()\n-              .show();\n-        } else {\n-          hideBottomSheet();\n-          Timber.e(\"Attempted to delete non-existent feature\");\n-        }\n-        return true;\n-      case R.id.feature_properties_menu_item:\n-        showFeatureProperties();\n-        return true;\n-      default:\n-        return false;\n+    if (item.getItemId() == R.id.move_feature_menu_item) {\n+      hideBottomSheet();\n+      mapContainerFragment.setRepositionMode(state.getFeature());\n+    } else if (item.getItemId() == R.id.delete_feature_menu_item) {\n+      hideBottomSheet();\n+      Optional<Feature> featureToDelete = state.getFeature();\n+      if (featureToDelete.isPresent()) {\n+        viewModel.deleteFeature(featureToDelete.get());\n+      } else {\n+        Timber.e(\"Attempted to delete non-existent feature\");\n+      }\n+    } else if (item.getItemId() == R.id.feature_properties_menu_item) {\n+      showFeatureProperties();\n+    } else {\n+      return false;\n     }\n+\n+    return true;\n   }\n \n   @Override\n", "next_change": {"commit": "61a1c6d6b32e58576d38166db8e94fc87e3abea3", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 31f6d0bf2..3fdc4333c 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -349,8 +428,8 @@ public class HomeScreenFragment extends AbstractFragment\n   public void onStart() {\n     super.onStart();\n \n-    if (viewModel.shouldShowProjectSelectorOnStart()) {\n-      showProjectSelector();\n+    if (viewModel.shouldShowSurveySelectorOnStart()) {\n+      showSurveySelector();\n     }\n \n     viewModel.init();\n", "next_change": {"commit": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex 3fdc4333c..e7d85b98e 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -428,8 +451,8 @@ public class HomeScreenFragment extends AbstractFragment\n   public void onStart() {\n     super.onStart();\n \n-    if (viewModel.shouldShowSurveySelectorOnStart()) {\n-      showSurveySelector();\n+    if (viewModel.shouldShowProjectSelectorOnStart()) {\n+      showProjectSelector();\n     }\n \n     viewModel.init();\n", "next_change": {"commit": "9091867b7560086249baf50a1b4d1b4747c2a931", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex e7d85b98e..e12f72cf3 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -451,8 +421,8 @@ public class HomeScreenFragment extends AbstractFragment\n   public void onStart() {\n     super.onStart();\n \n-    if (viewModel.shouldShowProjectSelectorOnStart()) {\n-      showProjectSelector();\n+    if (viewModel.shouldShowSurveySelectorOnStart()) {\n+      showSurveySelector();\n     }\n \n     viewModel.init();\n", "next_change": {"commit": "59e5dff68073327b1c979dfb360cbb2d1240a038", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex e12f72cf3..eeb76c847 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -428,20 +379,6 @@ public class HomeScreenFragment extends AbstractFragment\n     viewModel.init();\n   }\n \n-  @Override\n-  public void onStop() {\n-    super.onStop();\n-\n-    if (featureDataTypeSelectorDialogFragment != null\n-        && featureDataTypeSelectorDialogFragment.isVisible()) {\n-      featureDataTypeSelectorDialogFragment.dismiss();\n-    }\n-\n-    if (polygonDrawingInfoDialogFragment != null && polygonDrawingInfoDialogFragment.isVisible()) {\n-      polygonDrawingInfoDialogFragment.dismiss();\n-    }\n-  }\n-\n   private int getCurrentDestinationId() {\n     NavDestination currentDestination = findNavController(this).getCurrentDestination();\n     return currentDestination == null ? -1 : currentDestination.getId();\n", "next_change": {"commit": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex eeb76c847..b7ce848cd 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -379,6 +435,20 @@ public class HomeScreenFragment extends AbstractFragment\n     viewModel.init();\n   }\n \n+  @Override\n+  public void onStop() {\n+    super.onStop();\n+\n+    if (featureDataTypeSelectorDialogFragment != null\n+        && featureDataTypeSelectorDialogFragment.isVisible()) {\n+      featureDataTypeSelectorDialogFragment.dismiss();\n+    }\n+\n+    if (polygonDrawingInfoDialogFragment != null && polygonDrawingInfoDialogFragment.isVisible()) {\n+      polygonDrawingInfoDialogFragment.dismiss();\n+    }\n+  }\n+\n   private int getCurrentDestinationId() {\n     NavDestination currentDestination = findNavController(this).getCurrentDestination();\n     return currentDestination == null ? -1 : currentDestination.getId();\n", "next_change": {"commit": "cc11b90b7f4c50ebbf02e436850ba9de43105371", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\nindex b7ce848cd..7d3845e77 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenFragment.java\n", "chunk": "@@ -435,20 +379,6 @@ public class HomeScreenFragment extends AbstractFragment\n     viewModel.init();\n   }\n \n-  @Override\n-  public void onStop() {\n-    super.onStop();\n-\n-    if (featureDataTypeSelectorDialogFragment != null\n-        && featureDataTypeSelectorDialogFragment.isVisible()) {\n-      featureDataTypeSelectorDialogFragment.dismiss();\n-    }\n-\n-    if (polygonDrawingInfoDialogFragment != null && polygonDrawingInfoDialogFragment.isVisible()) {\n-      polygonDrawingInfoDialogFragment.dismiss();\n-    }\n-  }\n-\n   private int getCurrentDestinationId() {\n     NavDestination currentDestination = findNavController(this).getCurrentDestination();\n     return currentDestination == null ? -1 : currentDestination.getId();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "d138fcfd9e7d2e30091202645a48497886c21428", "committedDate": "2020-09-22 17:08:14 +0100", "message": "Move authentication clases into auth package"}, {"oid": "7b4e8dd9bf0d05a1053f70176e6692e95f5f6e29", "committedDate": "2020-09-22 17:08:14 +0100", "message": "Attempt to remove Thread.sleep by disabling bottom sheet animations, adding RxIdler and adding databinding idling resource"}, {"oid": "bda7c8390058d9066613e9892ffc79f2fc1a20d8", "committedDate": "2020-09-22 17:08:15 +0100", "message": "Remove custom BottomSheetBehavior. Add back sleep. Tidy up code"}, {"oid": "c2d70a24ce39f0ac7db489e61477e5e62e8b2b31", "committedDate": "2020-10-08 18:59:12 +0530", "message": "Hook overflow menu item with reposition mode"}, {"oid": "e8571c946483dd219c957b4d727f01fff1bb45ce", "committedDate": "2020-10-12 10:56:44 +0530", "message": "Display confirmation dialog"}, {"oid": "4434533d3a4c760d29cd8dbe201106e79e4aa496", "committedDate": "2020-10-12 12:18:56 +0530", "message": "Hook confirmation dialog action with update request"}, {"oid": "03c8f90711d5ddb32f64ab26ae475b1a8cdad172", "committedDate": "2020-10-12 12:46:49 +0530", "message": "Update string resources"}, {"oid": "a368765dc75cebdd5b6f8350c423c87488b3940d", "committedDate": "2020-10-13 14:30:19 +0530", "message": "Replace null checks with Optional"}, {"oid": "f5a176e69d35d88bfb598be1234c4835314f6ad9", "committedDate": "2020-10-13 17:37:59 +0530", "message": "Simplify success message"}, {"oid": "4c08c156622f20b75efa70ffbbd112602c1ea2ee", "committedDate": "2020-10-15 15:09:51 +0530", "message": "Code cleanup"}, {"oid": "7e5981c21068992ecd07a25be1de089db87de02e", "committedDate": "2020-10-19 10:33:37 +0530", "message": "Replace disposeOnClear with LiveData for add feature requests"}, {"oid": "474cc65d43b3efddebac5f2fce7ead1b4ebcb11f", "committedDate": "2020-10-19 11:20:59 +0530", "message": "Update View and show error message to the user"}, {"oid": "266cd5dd970ed82f9a6d49a4d5ba951c5205477f", "committedDate": "2020-10-19 15:09:34 +0530", "message": "Add handler for default cases"}, {"oid": "6c219b3aed75f73100c1ec9234a47615477b63e9", "committedDate": "2020-11-01 22:35:14 +0530", "message": "Refactor HomeScreen"}, {"oid": "22e38338fb2cda43e9cd64f74ffed87f63fda8d0", "committedDate": "2020-11-01 22:47:55 +0530", "message": "Pass along throwable instead of parsing error message"}, {"oid": "5fbea2cdb17f8adacf87bd0c93dafc501a2d4f63", "committedDate": "2020-11-03 12:21:03 +0530", "message": "Log exception to timber and show static error message"}, {"oid": "fd48dbc5f4de61201c5fafcd728dddb90f27e783", "committedDate": "2020-11-03 12:26:18 +0530", "message": "Improve variable names to follow the convention"}, {"oid": "4335b5cf52dc81a50ce5d32a83b605a5d913f83b", "committedDate": "2020-11-03 12:50:17 +0530", "message": "Rename toSingle to toBooleanSingle, override it for nullable consumers and add javadoc"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "4266bc0de17bbeb526fb088d47942fd61fecf4cb", "committedDate": "2020-11-12 20:02:10 +0000", "message": "Fix checkstyle issues"}, {"oid": "964e7284ea6a97c5f0a1f8c5352e2715976fcfa5", "committedDate": "2020-11-25 17:02:52 +0200", "message": "Check for form in same context its used"}, {"oid": "b4abebf614fcceb29594e5f4e51b689bfcb77e47", "committedDate": "2020-12-15 23:11:20 +0530", "message": "Save state of MapContainerFragment"}, {"oid": "f3ac91d28c57a64a7c3a16c61eeddeb95be11cea", "committedDate": "2020-12-19 16:38:40 +0200", "message": "Simplify Navigator"}, {"oid": "83f4ecdf1298107c89951e1e5e17b8da4de17b3e", "committedDate": "2020-12-19 17:11:30 +0200", "message": "Make EphemeralPopups injectable"}, {"oid": "637bb7deeda5df5e606d5626a11ac10ea3590988", "committedDate": "2020-12-19 15:08:04 -0500", "message": "Merge branch 'master' into refactor-popups"}, {"oid": "3f2c7af36cbc67fd2a38d119a178e5dd8bd1bc42", "committedDate": "2020-12-21 11:08:15 +0000", "message": "WIP Map Fixes"}, {"oid": "3477afd7f36ee481fdce80a24b96670082efaa84", "committedDate": "2020-12-23 10:48:13 +0530", "message": "Fix new point can't be added bug"}, {"oid": "724419a7f2dd77ef2d53f4265acb5ff98a8201cc", "committedDate": "2020-12-24 22:51:26 +0530", "message": "Enable build version label"}, {"oid": "b9378982ce94559723548cd5844974ce70f2cc2a", "committedDate": "2020-12-24 23:12:16 +0530", "message": "Pass layers instead of project and check nullability"}, {"oid": "e53f63e3583df8755eb6033dcb26001c35b19956", "committedDate": "2020-12-26 19:34:19 +0200", "message": "Merge branch 'master' into issue#661"}, {"oid": "0d9e5b49fe80c0b82fa8a88033eecafb8b117f1d", "committedDate": "2020-12-30 01:15:40 +0530", "message": "TextView Internationalization"}, {"oid": "138db6ba0f0fd4ed833858e5eb4544e55b4d6d96", "committedDate": "2021-01-04 20:07:55 +0200", "message": "Clean up project activation observables"}, {"oid": "7c50d5622e8c1c591ac6770d55ff68962e4183b7", "committedDate": "2021-01-18 14:27:19 +0200", "message": "Create project selector once in onCreate"}, {"oid": "b982da4335f2d28c333985e0bc880d084324cfc1", "committedDate": "2021-05-18 19:53:33 -0400", "message": "Refactor call to show layer dialog"}, {"oid": "3f2c437882820237a0fa55c12a93dc3292351ab2", "committedDate": "2021-05-19 18:31:47 -0400", "message": "feat: disambiguate area clicks"}, {"oid": "982dfef7f6eaab5941ccfe6595987f592f66b533", "committedDate": "2021-05-25 15:57:41 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into disambig"}, {"oid": "f602ac89b4c69e5e0f04856c18978877083102af", "committedDate": "2021-05-25 18:42:34 -0400", "message": "chore: fix styling errors"}, {"oid": "6ecd4805e362d271e45762d3e19304e1ee66d60a", "committedDate": "2021-05-26 09:18:59 -0400", "message": "style: feature disambiguation code cleanup"}, {"oid": "36fa2baf54b10ad30b6b33e6b8a192fa4af978b2", "committedDate": "2021-05-26 12:43:33 -0400", "message": "style: clean up feature disambiguation code"}, {"oid": "66b2e6103a5ad44439ce44d85c8419a2fc1dadbf", "committedDate": "2021-06-03 19:34:35 -0400", "message": "Show properties imported from GeoJSON"}, {"oid": "fbbb5868c67d2d12dbe463426a371ac40a1d590c", "committedDate": "2021-06-05 17:50:43 -0400", "message": "Stop replaying add observation requests on config change"}, {"oid": "8f9e80be36be336314f797da1670695ff2743b3d", "committedDate": "2021-06-05 17:55:09 -0400", "message": "Stop replaying event streams"}, {"oid": "d482b0251b0dbc468e46a20baf9b7c89a99ce268", "committedDate": "2021-06-05 19:15:51 -0400", "message": "Replace Event and Action with observables"}, {"oid": "9788ef2f15cdb049862c60e8bd92147fe7acb5d7", "committedDate": "2021-06-05 19:46:02 -0400", "message": "Fix PMD error"}, {"oid": "297bedeb681297d031187ec4cf6ba1fdc595ace0", "committedDate": "2021-06-06 21:09:23 -0400", "message": "Inject feature selector fragment, fixes #858"}, {"oid": "c0e71216557f737a4d929d8fabc810ced7629a47", "committedDate": "2021-06-06 21:11:40 -0400", "message": "Minor rename"}, {"oid": "5c534882fa3aba257ea0ec5c9a8dea0339f0056f", "committedDate": "2021-06-06 21:15:37 -0400", "message": "Stop replaying feature selector requests"}, {"oid": "b5c8592152108ae81e6b2d2f1abd1dfe3108f1ea", "committedDate": "2021-06-06 21:33:39 -0400", "message": "Minor cleanup"}, {"oid": "28d802041a746b77f9bcabbe6b28954a612a6e3a", "committedDate": "2021-06-06 21:42:04 -0400", "message": "Set features before opening dialog"}, {"oid": "ab36852799671fc02c80308c3b4d96863d71a9ec", "committedDate": "2021-06-07 15:43:34 -0400", "message": "Rudimentary sync status UI"}, {"oid": "79573663f318fb72fbb0145b758e3def5e84a0fd", "committedDate": "2021-06-10 01:00:56 +0530", "message": "Merge branch 'master' into feature-properties"}, {"oid": "930ea8625bc7cca792f3c0cd03eec49be2e9e511", "committedDate": "2021-06-16 21:47:46 +0530", "message": "Hide \"move feature\" option for non-point features"}, {"oid": "4446041275da1845b63031d1a150539c10f77d4a", "committedDate": "2021-06-16 21:50:30 +0530", "message": "Remove redundant NotNull annotation"}, {"oid": "2911b4a7232562ec53ae6d4e579c4b222c45f1cc", "committedDate": "2021-06-17 14:22:15 -0400", "message": "Merge branch 'master' into feature-properties"}, {"oid": "385586396c9d7d066765722286c2e56ac6c26fb8", "committedDate": "2021-06-25 14:04:15 -0400", "message": "Merge branch 'master' into rotate-feature-selector"}, {"oid": "57faf3173b9eb185fa54d2d74a8cc365f9cfa888", "committedDate": "2021-06-25 16:19:59 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into sync-status"}, {"oid": "e854816afb01dc6f33c0f6fe4c9e67fff20aac6c", "committedDate": "2021-06-30 00:55:34 +0530", "message": "Fix error when adding a new feature."}, {"oid": "5912534ff739f3148613c85a950f91bf02db3187", "committedDate": "2021-06-30 20:11:14 +0530", "message": "Move subscribeOn to VM"}, {"oid": "5c1d17fb7d5ea691ae158eece8f6c8a75873e52d", "committedDate": "2021-07-04 16:33:01 +0530", "message": "Show contributor editable \"points\" layers only."}, {"oid": "02eb30f5331e0e329144797d9a25dd57f1d8150c", "committedDate": "2021-07-07 00:32:54 +0530", "message": "Rename"}, {"oid": "92acc92340f9007268a66bb5be6a7842aee0b4c3", "committedDate": "2021-07-07 00:55:34 +0530", "message": "Fix import order"}, {"oid": "4fadf84d4e2347f680f84dce71df23a24e9b275b", "committedDate": "2021-07-07 16:36:16 -0400", "message": "Merge branch 'master' into sync-status"}, {"oid": "d2e9812c395c74520713d69b9368867ead7d8704", "committedDate": "2021-07-10 12:19:53 +0530", "message": "Move options menu create/prepare to FeatureDetailsFragment"}, {"oid": "e19c76100aa7884f6685c7dc77ce003e9635e794", "committedDate": "2021-07-12 01:05:43 +0000", "message": "Merge branch 'master' of https://github.com/google/ground-android into rotate-feature-selector"}, {"oid": "876412cf2823113e6d93dc2a8ae2f4bc1a79ec51", "committedDate": "2021-07-12 09:04:45 +0530", "message": "Fixes NPE by converting manual binding with data binding"}, {"oid": "ca30b32bd9fda8de59e4f4486664f0af7647374f", "committedDate": "2021-07-14 22:11:49 +0530", "message": "Convert LiveData to Observables + Improve naming"}, {"oid": "d5aaabd246edfb4e753b13cad8228ba54e2ce334", "committedDate": "2021-07-15 09:50:18 +0530", "message": "Merge branch 'master' into issue_948"}, {"oid": "5ac093cb340b117b8f422ca3551079af585547b0", "committedDate": "2021-07-19 19:01:22 +0000", "message": "Merge branch 'master' of https://github.com/google/ground-android into rotate-feature-selector"}, {"oid": "8af14b306884caf43b55f717f1bb63c7b46d3aa1", "committedDate": "2021-07-19 20:20:20 +0000", "message": "Remove unused method"}, {"oid": "8aa5b930bc9919622892ec31292ec2d0eda15eb6", "committedDate": "2021-07-21 00:07:24 +0530", "message": "Added dialogs for Feature type and Polygon Info"}, {"oid": "41ed249e91038c4fd64d2bddc10a22ebe7693115", "committedDate": "2021-07-20 21:01:58 +0000", "message": "Fix add feature button regression"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "3cfdb945ac0bd7ab019ebaf6858c82244e149641", "committedDate": "2021-07-21 17:56:07 +0530", "message": "Fix remaining violations"}, {"oid": "f3f9a997e555cb856f9a4b36dd5c7e10b7ffd716", "committedDate": "2021-07-21 13:07:12 +0000", "message": "Merge branch 'master' into feature_polygon_drawing_drawing_ui"}, {"oid": "9d00ea7d86eb51a6940c3600cb4e15cb295ef9f8", "committedDate": "2021-07-21 19:34:57 +0530", "message": "Merge branch 'master' into spotbugs"}, {"oid": "387f99b57cf58e8c48311b8ec220def2f4da4e28", "committedDate": "2021-07-21 20:01:07 +0530", "message": "Merge branch 'master' into spotbugs"}, {"oid": "411e258b403f1e1264b0c7035df7d221e5bc869b", "committedDate": "2021-07-21 20:03:36 +0530", "message": "Fix incompatible merge changes"}, {"oid": "dfeb8dc91f76e91446720402ad14b076a78842ae", "committedDate": "2021-07-22 02:21:06 +0530", "message": "UI linked to viewmodel and fragments."}, {"oid": "8a6f11c4e03e5a39fbf907d1470452de4b74dbc0", "committedDate": "2021-07-24 13:26:27 +0530", "message": "Renamed variables and functions moved some functions to direct layout binding."}, {"oid": "65b8fd7ca5a8daa429931f5fa04503623188f057", "committedDate": "2021-08-07 09:28:18 +0530", "message": "Resource ID usage should be non-final"}, {"oid": "63414807f09c0bbfcb493c1abe25c46666f54140", "committedDate": "2021-08-10 23:38:45 +0530", "message": "Dialog fragment added for FeatureDataType and PolygonInfo."}, {"oid": "c2d1d8ea0137c21fa7ef508f9daddb4004d73711", "committedDate": "2021-08-11 12:12:43 +0530", "message": "Removed Commented lines."}, {"oid": "29b9553f76faaa849ccff0de367976b651b0b37e", "committedDate": "2021-08-12 14:32:42 +0530", "message": "Refactored PolygonDrawing."}, {"oid": "23d28b35c31f877953d2f409ad19b1c603e96a5e", "committedDate": "2021-08-13 23:34:54 +0530", "message": "Add UI and bind data"}, {"oid": "01f362d8833d4bf0138d9459f58f8d52dd467b27", "committedDate": "2021-08-13 15:55:32 -0700", "message": "Add confirmation dialogs for observation and feature DELETE action."}, {"oid": "fcd2f6a834f9768ba3c801e061d223e44f5774a3", "committedDate": "2021-08-14 09:18:08 +0530", "message": "Use data binding"}, {"oid": "7410e40374b51e1a2f0d14a8a790e6cefcab8af9", "committedDate": "2021-08-14 10:19:00 +0530", "message": "Bind data in xml"}, {"oid": "93ac55fcc0a20af159fb6aaf4d9261aa1d72429c", "committedDate": "2021-08-16 15:22:25 +0000", "message": "Merge branch 'master' into signed_in_user"}, {"oid": "f098ba8aeac64ff3ba6ebddc5adbc5ab4e25f18b", "committedDate": "2021-08-16 15:14:51 -0700", "message": "Merge branch 'master' into delete_dialog"}, {"oid": "666c2ba764eaf1081ae517e76e0314bacbb56e2f", "committedDate": "2021-08-17 11:45:31 +0530", "message": "MapContainerViewModel refactored removed code of PolygonDrawing. @Singleton added to MapProviderModule to fix error."}, {"oid": "234b00cc31cccbb50ba88a6bed867ea2b4894c93", "committedDate": "2021-08-18 07:04:02 +0530", "message": "MapContainerViewModel cleaned removed confirmButtonClicks and cancelButtonClicks and merged master."}, {"oid": "b53f98319fcaf292498688cbb483393f22116999", "committedDate": "2021-08-18 15:26:08 +0530", "message": "implemented check if the user can contribute to polygon or not if yes show dialog."}, {"oid": "17cfb97f028fc1e9a3604f55998c3184e137330a", "committedDate": "2021-08-18 14:53:18 +0000", "message": "Merge branch 'master' into feature_polygon_drawing_ui_polygon_linking"}, {"oid": "07ec6e620d0b9d3ce4e456572c46ade24f000ec2", "committedDate": "2021-08-20 14:10:29 +0530", "message": "fixed button visibility issue."}, {"oid": "39a5cc64a6d65d6058a53eb6420de8f4146a31f0", "committedDate": "2021-08-20 14:10:41 +0530", "message": "Merge remote-tracking branch 'origin/feature_polygon_drawing_ui_polygon_linking' into feature_polygon_drawing_ui_polygon_linking"}, {"oid": "9472065bbe279da659c97e659dffeb1a39906f44", "committedDate": "2021-08-25 06:55:49 +0530", "message": "PolygonFeatures saving into local db."}, {"oid": "d9052a975e301185740ef6bd4c7c096ed60be06e", "committedDate": "2021-09-01 07:45:07 +0530", "message": "Changed binding from int to boolean. Replaced Consumer with runnable."}, {"oid": "44bdeb3e5f83cf80fd359c22624b690727f6f9cc", "committedDate": "2021-09-01 07:59:07 +0530", "message": "Removed setSelectedLayer and setSelectedProject. Added startDrawingFlow to handle the work."}, {"oid": "10743f6cb589eb08b8b2b0f769efee269b248da4", "committedDate": "2021-09-01 20:58:51 +0530", "message": "Contributors check added for only point and polygon. Code formatted."}, {"oid": "026859793abd79c7b76519b695f4620f8a228c13", "committedDate": "2021-09-01 22:47:31 +0530", "message": "showAddFeatureDialog method updated with Switch Case. PMD issue fixed."}, {"oid": "397c817e852b2100595890c98f5d8e053b217a9b", "committedDate": "2021-09-02 11:48:38 +0530", "message": "Updated PolygonInfoDialog to only show once."}, {"oid": "79fd3a74640025c438dedb5670e76082264b89ec", "committedDate": "2021-09-02 22:12:04 +0530", "message": "Added PolygonDialogInfoRepository for handling the dialog shown state."}, {"oid": "86bfc659bda488ba64b9328882697d71e2c7f3ee", "committedDate": "2021-09-03 07:23:56 +0530", "message": "Removed PolygonDialogInfoRepository.java and FeatureRepository updated with LocalValueStore."}, {"oid": "9a8d62f9432cc831a00ad00864d7cf5821334d79", "committedDate": "2021-09-10 22:10:06 -0700", "message": "Merged from HEAD"}, {"oid": "a5348f15786c7d71311ea14a5e0b83fb2ea47774", "committedDate": "2021-11-15 15:13:07 -0500", "message": "Fix invalid format string"}, {"oid": "f82f4e52f171759bea696ee6ec075d2358f3701c", "committedDate": "2021-11-15 15:52:29 -0500", "message": "Improve log message"}, {"oid": "a2aab262a04d7e72cdcf1848745485ba66961dfe", "committedDate": "2021-11-15 16:00:10 -0500", "message": "Split args in lambda to improve readability"}, {"oid": "d009047870987ac82a728e2c5587b2a0b9ba251f", "committedDate": "2021-11-16 20:18:48 -0500", "message": "Fix PMD errors"}, {"oid": "0dac18ea575c725e5cd487330625b02b5e7d286b", "committedDate": "2021-11-17 11:47:32 -0500", "message": "Allow managers to add any feature type"}, {"oid": "1499c69ee19785c69bf689295748fb532fd0377b", "committedDate": "2021-11-17 11:49:55 -0500", "message": "Rename"}, {"oid": "83fd20b19355faa0e135d40e2dbf825ee3d622c6", "committedDate": "2021-11-17 11:51:56 -0500", "message": "Refactor handler"}, {"oid": "2422d86a28e14b63e7590c70ea27fa49b7b89122", "committedDate": "2021-11-17 11:52:19 -0500", "message": "Rename variables"}, {"oid": "0747ccb17492eb9d76f23730747af0ef3afff0e9", "committedDate": "2021-11-17 11:53:38 -0500", "message": "Rename method"}, {"oid": "d732d9be6cec47ace4fad70e6508cfc2a16a3358", "committedDate": "2021-11-17 11:58:09 -0500", "message": "Fix #1047"}, {"oid": "4feb2c19350a052ad56774193f51ab90965ea65c", "committedDate": "2021-11-17 11:58:50 -0500", "message": "Add TODO"}, {"oid": "e7a65894706598b6089c8503feb59db275e875ea", "committedDate": "2021-11-18 12:24:40 +0530", "message": "Add more tests for drawing complete and remove FeatureRepository"}, {"oid": "3f9cbbb799d9d7b84cd2b74df65ccc57d788dde5", "committedDate": "2021-11-25 22:28:04 +0530", "message": "Return PolygonFeature in the drawingCompleted subject"}, {"oid": "4d0d815d47f21b5c53f13d68474a92ca27f738f8", "committedDate": "2021-11-26 21:35:02 +0530", "message": "Merge DrawingCompleted and DefaultMapMode subjects into a single PolygonDrawingState"}, {"oid": "909309cdc4125c9943d6b016980405a4419e828e", "committedDate": "2021-11-28 01:37:45 +0530", "message": "Add default case"}, {"oid": "fac8e43662604fca11a46b86a6205d6d50b49d8d", "committedDate": "2021-12-03 16:37:25 +0530", "message": "Create static method for states"}, {"oid": "746deb213437df574c1e139551e358cd661db4b4", "committedDate": "2021-12-03 16:50:09 +0530", "message": "Fix setter for mode and rename REPOSITION to MOVE_POINT"}, {"oid": "e3b6eb16afba8d55a11a50d37a3c9dc7c8f48920", "committedDate": "2021-12-03 17:31:43 +0530", "message": "Rename to unsavedMapFeatures"}, {"oid": "57cd5b8a05a6e2a94448a92d1a2ada98158547cf", "committedDate": "2022-04-30 18:40:12 +0530", "message": "Create nav action for ProjectSelectorDialog"}, {"oid": "ec4eb34bf584c06fcf0220c05162c0f6b99f124d", "committedDate": "2022-04-30 18:40:12 +0530", "message": "Create nav action for FeatureSelectorFragment"}, {"oid": "9b58c6c59326d869d369d3d050cf217633934637", "committedDate": "2022-04-30 18:40:12 +0530", "message": "Check for current destination id before navigating to dialog"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "7bfb39c96efbb4581620b6ac296234aa05e75beb", "committedDate": "2022-05-25 22:52:59 +0530", "message": "Merge branch 'master' into dialog-component"}, {"oid": "7be0c9c8d0c28e450d3c0aa679ec3d4b2d6246b3", "committedDate": "2022-05-26 10:18:57 +0530", "message": "Apply formatting"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "378866fd1f971522875b85d7681aa67ea9bc4803", "committedDate": "2022-05-27 10:12:49 +0530", "message": "Rename ProjectSelectorDialogFragment and view model"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "61a1c6d6b32e58576d38166db8e94fc87e3abea3", "committedDate": "2022-05-27 21:54:31 +0530", "message": "Update remaining usages"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "9091867b7560086249baf50a1b4d1b4747c2a931", "committedDate": "2022-06-04 11:41:14 +0530", "message": "Remove \"+\" fab and related states from VM"}, {"oid": "59e5dff68073327b1c979dfb360cbb2d1240a038", "committedDate": "2022-06-04 19:54:43 +0530", "message": "Remove unused code"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "cc11b90b7f4c50ebbf02e436850ba9de43105371", "committedDate": "2022-06-06 23:48:00 +0530", "message": "Merge branch 'master' into remove-add-fab"}, {"oid": "0573f287d04143b79f7b1ba282f4b71899cb717b", "committedDate": "2022-06-24 15:32:17 +0000", "message": "Add DataCollectionFragment skeleton and temporary button for launching it"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NzcwNg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459547706", "body": "Why do we remove the current user here?", "bodyText": "Why do we remove the current user here?", "bodyHTML": "<p dir=\"auto\">Why do we remove the current user here?</p>", "author": "gino-m", "createdAt": "2020-07-23T15:44:18Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java", "diffHunk": "@@ -80,7 +78,7 @@\n             .switchMapSingle(\n                 newFeature ->\n                     featureRepository\n-                        .saveFeature(newFeature, authManager.getCurrentUser())\n+                        .saveFeature(newFeature)", "originalCommit": "1e58c77259e194e162f55dcfba6f2a4df8444899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzE5Mw==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459593193", "bodyText": "AuthenticationManager is now moved to FeatureRepository for simplicity.", "author": "shobhitagarwal1612", "createdAt": "2020-07-23T16:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NzcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex e803ebc8d..dc742c122 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -78,7 +80,7 @@ public class HomeScreenViewModel extends AbstractViewModel {\n             .switchMapSingle(\n                 newFeature ->\n                     featureRepository\n-                        .saveFeature(newFeature)\n+                        .saveFeature(newFeature, authManager.getCurrentUser())\n                         .toSingleDefault(newFeature)\n                         .doOnError(this::onAddFeatureError)\n                         .onErrorResumeNext(Single.never())) // Prevent from breaking upstream.\n", "next_change": {"commit": "04fc89217e9060c32551b32842c72df2ac75a661", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex dc742c122..e803ebc8d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -80,7 +78,7 @@ public class HomeScreenViewModel extends AbstractViewModel {\n             .switchMapSingle(\n                 newFeature ->\n                     featureRepository\n-                        .saveFeature(newFeature, authManager.getCurrentUser())\n+                        .saveFeature(newFeature)\n                         .toSingleDefault(newFeature)\n                         .doOnError(this::onAddFeatureError)\n                         .onErrorResumeNext(Single.never())) // Prevent from breaking upstream.\n", "next_change": {"commit": "f2661073119bcada83b6f3c21971f47a02ef99c9", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex e803ebc8d..09010e3a3 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -84,6 +90,19 @@ public class HomeScreenViewModel extends AbstractViewModel {\n                         .onErrorResumeNext(Single.never())) // Prevent from breaking upstream.\n             .observeOn(schedulers.ui())\n             .subscribe(this::onAddFeature));\n+\n+    deleteFeature =\n+        LiveDataReactiveStreams.fromPublisher(\n+            deleteFeatureRequests.switchMapSingle(\n+                __ -> deleteActiveFeature().toSingleDefault(true).onErrorReturnItem(false)));\n+  }\n+\n+  public LiveData<Boolean> getDeleteFeature() {\n+    return deleteFeature;\n+  }\n+\n+  public void deleteFeature() {\n+    deleteFeatureRequests.onNext(Nil.NIL);\n   }\n \n   private void onAddFeature(Feature feature) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "4c08c156622f20b75efa70ffbbd112602c1ea2ee", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex e803ebc8d..8019bb18a 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -73,17 +80,56 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     this.navigator = navigator;\n     this.addFeatureClicks = PublishSubject.create();\n \n+    // TODO: Replace disposeOnClear with Processor\n     disposeOnClear(\n         addFeatureClicks\n             .switchMapSingle(\n                 newFeature ->\n                     featureRepository\n-                        .saveFeature(newFeature)\n+                        .createFeature(newFeature)\n                         .toSingleDefault(newFeature)\n                         .doOnError(this::onAddFeatureError)\n                         .onErrorResumeNext(Single.never())) // Prevent from breaking upstream.\n             .observeOn(schedulers.ui())\n             .subscribe(this::onAddFeature));\n+\n+    deleteFeature =\n+        LiveDataReactiveStreams.fromPublisher(\n+            deleteFeatureRequests.switchMapSingle(\n+                feature ->\n+                    featureRepository\n+                        .deleteFeature(feature)\n+                        .toSingleDefault(true)\n+                        .onErrorReturnItem(false)));\n+\n+    updateFeature =\n+        LiveDataReactiveStreams.fromPublisher(\n+            updateFeatureRequests.switchMapSingle(\n+                updatedFeature ->\n+                    featureRepository\n+                        .updateFeature(updatedFeature)\n+                        .toSingleDefault(true)\n+                        .onErrorReturnItem(false)));\n+  }\n+\n+  public LiveData<Boolean> getUpdateFeature() {\n+    return updateFeature;\n+  }\n+\n+  public LiveData<Boolean> getDeleteFeature() {\n+    return deleteFeature;\n+  }\n+\n+  public void addFeature(Feature feature) {\n+    addFeatureClicks.onNext(feature);\n+  }\n+\n+  public void updateFeature(Feature feature) {\n+    updateFeatureRequests.onNext(feature);\n+  }\n+\n+  public void deleteFeature(Feature feature) {\n+    deleteFeatureRequests.onNext(feature);\n   }\n \n   private void onAddFeature(Feature feature) {\n", "next_change": {"commit": "7e5981c21068992ecd07a25be1de089db87de02e", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 8019bb18a..78d4d6a9d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -132,7 +129,7 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     deleteFeatureRequests.onNext(feature);\n   }\n \n-  private void onAddFeature(Feature feature) {\n+  public void onAddFeature(Feature feature) {\n     if (feature.getLayer().getForm().isPresent()) {\n       addNewObservation(feature);\n     }\n", "next_change": {"commit": "f51415305e04fdd78d469e15485e0e771e16120c", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 78d4d6a9d..25a187ee8 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -129,7 +137,7 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     deleteFeatureRequests.onNext(feature);\n   }\n \n-  public void onAddFeature(Feature feature) {\n+  private void onAddFeature(Feature feature) {\n     if (feature.getLayer().getForm().isPresent()) {\n       addNewObservation(feature);\n     }\n", "next_change": {"commit": "2167258b210a01cacfd66a614c0e419e734598c7", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 25a187ee8..e0815024b 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -137,7 +137,7 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     deleteFeatureRequests.onNext(feature);\n   }\n \n-  private void onAddFeature(Feature feature) {\n+  public void onAddFeature(Feature feature) {\n     if (feature.getLayer().getForm().isPresent()) {\n       addNewObservation(feature);\n     }\n", "next_change": {"commit": "6c219b3aed75f73100c1ec9234a47615477b63e9", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex e0815024b..e72d68f59 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -137,19 +155,6 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     deleteFeatureRequests.onNext(feature);\n   }\n \n-  public void onAddFeature(Feature feature) {\n-    if (feature.getLayer().getForm().isPresent()) {\n-      addNewObservation(feature);\n-    }\n-  }\n-\n-  private void addNewObservation(Feature feature) {\n-    String projectId = feature.getProject().getId();\n-    String featureId = feature.getId();\n-    String formId = feature.getLayer().getForm().get().getId();\n-    navigator.addObservation(projectId, featureId, formId);\n-  }\n-\n   public boolean shouldShowProjectSelectorOnStart() {\n     return projectRepository.getLastActiveProjectId().isEmpty();\n   }\n", "next_change": {"commit": "d482b0251b0dbc468e46a20baf9b7c89a99ce268", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex e72d68f59..33254562d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -159,19 +190,19 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return projectRepository.getLastActiveProjectId().isEmpty();\n   }\n \n-  public LiveData<Action> getOpenDrawerRequests() {\n+  public Flowable<Nil> getOpenDrawerRequests() {\n     return openDrawerRequests;\n   }\n \n   public void openNavDrawer() {\n-    openDrawerRequests.setValue(Action.create());\n+    openDrawerRequests.onNext(NIL);\n   }\n \n-  public LiveData<Loadable<Project>> getActiveProject() {\n-    return activeProject;\n+  public LiveData<Loadable<Project>> getProjectLoadingState() {\n+    return projectLoadingState;\n   }\n \n-  public LiveData<Event<Point>> getShowAddFeatureDialogRequests() {\n+  public Flowable<Point> getShowAddFeatureDialogRequests() {\n     return addFeatureDialogRequests;\n   }\n \n", "next_change": {"commit": "5a3465688d1ad7489466bcda1b21e4685837a2f3", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 33254562d..5aa155d7d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -190,19 +199,19 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return projectRepository.getLastActiveProjectId().isEmpty();\n   }\n \n-  public Flowable<Nil> getOpenDrawerRequests() {\n+  public LiveData<Action> getOpenDrawerRequests() {\n     return openDrawerRequests;\n   }\n \n   public void openNavDrawer() {\n-    openDrawerRequests.onNext(NIL);\n+    openDrawerRequests.setValue(Action.create());\n   }\n \n   public LiveData<Loadable<Project>> getProjectLoadingState() {\n     return projectLoadingState;\n   }\n \n-  public Flowable<Point> getShowAddFeatureDialogRequests() {\n+  public LiveData<Event<Point>> getShowAddFeatureDialogRequests() {\n     return addFeatureDialogRequests;\n   }\n \n", "next_change": {"commit": "5c534882fa3aba257ea0ec5c9a8dea0339f0056f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 5aa155d7d..61f884ff2 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -199,19 +186,19 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return projectRepository.getLastActiveProjectId().isEmpty();\n   }\n \n-  public LiveData<Action> getOpenDrawerRequests() {\n+  public Flowable<Nil> getOpenDrawerRequests() {\n     return openDrawerRequests;\n   }\n \n   public void openNavDrawer() {\n-    openDrawerRequests.setValue(Action.create());\n+    openDrawerRequests.onNext(NIL);\n   }\n \n   public LiveData<Loadable<Project>> getProjectLoadingState() {\n     return projectLoadingState;\n   }\n \n-  public LiveData<Event<Point>> getShowAddFeatureDialogRequests() {\n+  public Flowable<Point> getShowAddFeatureDialogRequests() {\n     return addFeatureDialogRequests;\n   }\n \n", "next_change": {"commit": "b5c8592152108ae81e6b2d2f1abd1dfe3108f1ea", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 61f884ff2..3fcab10fe 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -206,12 +206,11 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return bottomSheetState;\n   }\n \n-  // TODO: Remove extra indirection here?\n   public void onMarkerClick(MapPin marker) {\n     showBottomSheet(marker.getFeature());\n   }\n \n-  public void onFeatureSelection(Feature feature) {\n+  public void onFeatureSelected(Feature feature) {\n     showBottomSheet(feature);\n   }\n \n", "next_change": {"commit": "ab36852799671fc02c80308c3b4d96863d71a9ec", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 3fcab10fe..74e3f960b 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -206,11 +210,12 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return bottomSheetState;\n   }\n \n+  // TODO: Remove extra indirection here?\n   public void onMarkerClick(MapPin marker) {\n     showBottomSheet(marker.getFeature());\n   }\n \n-  public void onFeatureSelected(Feature feature) {\n+  public void onFeatureSelection(Feature feature) {\n     showBottomSheet(feature);\n   }\n \n", "next_change": {"commit": "e19c76100aa7884f6685c7dc77ce003e9635e794", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 74e3f960b..d14e928dc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -210,12 +207,11 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return bottomSheetState;\n   }\n \n-  // TODO: Remove extra indirection here?\n   public void onMarkerClick(MapPin marker) {\n     showBottomSheet(marker.getFeature());\n   }\n \n-  public void onFeatureSelection(Feature feature) {\n+  public void onFeatureSelected(Feature feature) {\n     showBottomSheet(feature);\n   }\n \n", "next_change": {"commit": "876412cf2823113e6d93dc2a8ae2f4bc1a79ec51", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex d14e928dc..b4b43127d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -199,19 +200,16 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return projectLoadingState;\n   }\n \n-  public Flowable<Point> getShowAddFeatureDialogRequests() {\n-    return addFeatureDialogRequests;\n-  }\n-\n   public LiveData<BottomSheetState> getBottomSheetState() {\n     return bottomSheetState;\n   }\n \n+  // TODO: Remove extra indirection here?\n   public void onMarkerClick(MapPin marker) {\n     showBottomSheet(marker.getFeature());\n   }\n \n-  public void onFeatureSelected(Feature feature) {\n+  public void onFeatureSelection(Feature feature) {\n     showBottomSheet(feature);\n   }\n \n", "next_change": {"commit": "5ac093cb340b117b8f422ca3551079af585547b0", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex b4b43127d..c5ea89ad0 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -204,12 +201,11 @@ public class HomeScreenViewModel extends AbstractViewModel {\n     return bottomSheetState;\n   }\n \n-  // TODO: Remove extra indirection here?\n   public void onMarkerClick(MapPin marker) {\n     showBottomSheet(marker.getFeature());\n   }\n \n-  public void onFeatureSelection(Feature feature) {\n+  public void onFeatureSelected(Feature feature) {\n     showBottomSheet(feature);\n   }\n \n", "next_change": {"commit": "a6b3d09d2257a36a6c55927bb289848156a2a46c", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex c5ea89ad0..0f1d43814 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -202,7 +252,9 @@ public class HomeScreenViewModel extends AbstractViewModel {\n   }\n \n   public void onMarkerClick(MapPin marker) {\n-    showBottomSheet(marker.getFeature());\n+    if (marker.getFeature() != null) {\n+      showBottomSheet(marker.getFeature());\n+    }\n   }\n \n   public void onFeatureSelected(Feature feature) {\n", "next_change": {"commit": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\nindex 0f1d43814..7e45aae4a 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/home/HomeScreenViewModel.java\n", "chunk": "@@ -263,16 +272,16 @@ public class HomeScreenViewModel extends AbstractViewModel {\n \n   private void showBottomSheet(Feature feature) {\n     Timber.d(\"showing bottom sheet\");\n-    isObservationButtonVisible.setValue(true);\n+    isSubmissionButtonVisible.setValue(true);\n     bottomSheetState.setValue(BottomSheetState.visible(feature));\n   }\n \n   public void onBottomSheetHidden() {\n     bottomSheetState.setValue(BottomSheetState.hidden());\n-    isObservationButtonVisible.setValue(false);\n+    isSubmissionButtonVisible.setValue(false);\n   }\n \n-  public void addObservation() {\n+  public void addSubmission() {\n     BottomSheetState state = bottomSheetState.getValue();\n     if (state == null) {\n       Timber.e(\"Missing bottomSheetState\");\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "7b4e8dd9bf0d05a1053f70176e6692e95f5f6e29", "committedDate": "2020-09-22 17:08:14 +0100", "message": "Attempt to remove Thread.sleep by disabling bottom sheet animations, adding RxIdler and adding databinding idling resource"}, {"oid": "a30a1bfaef71d69aa7c08b1fee77412c9b73ff78", "committedDate": "2020-09-22 17:08:14 +0100", "message": "Change postValue to setValue"}, {"oid": "4434533d3a4c760d29cd8dbe201106e79e4aa496", "committedDate": "2020-10-12 12:18:56 +0530", "message": "Hook confirmation dialog action with update request"}, {"oid": "87ca30a8e6eb8d1f8898dfe83d34a8046314b6e4", "committedDate": "2020-10-13 17:23:39 +0530", "message": "Replace iterator with completable"}, {"oid": "4c08c156622f20b75efa70ffbbd112602c1ea2ee", "committedDate": "2020-10-15 15:09:51 +0530", "message": "Code cleanup"}, {"oid": "c974a889533eee5c9edae39a7bb950fd31f2627d", "committedDate": "2020-10-16 00:43:50 +0530", "message": "Convert featureRepository to a local variable"}, {"oid": "7e5981c21068992ecd07a25be1de089db87de02e", "committedDate": "2020-10-19 10:33:37 +0530", "message": "Replace disposeOnClear with LiveData for add feature requests"}, {"oid": "2f91b9b8a9afd40d7368b20a8c0fe6569a7dc962", "committedDate": "2020-10-19 10:33:37 +0530", "message": "Remove schedulers dependency"}, {"oid": "1819f8084efe80a1f732243f00debf23f9265f4f", "committedDate": "2020-10-19 10:33:37 +0530", "message": "Remove TODO"}, {"oid": "93f878cd43d3ab35bb7038ac42d8ca866bdb429f", "committedDate": "2020-10-19 11:20:20 +0530", "message": "Simplify HomeScreenViewModel"}, {"oid": "f51415305e04fdd78d469e15485e0e771e16120c", "committedDate": "2020-10-26 23:08:19 +0530", "message": "Add liveData for controlling visibility of \"+\" FAB"}, {"oid": "83aaab3f8757ef72cb4b390213ca73e67365f3fe", "committedDate": "2020-10-26 23:29:03 +0530", "message": "Toggle visibility of add feature btn \"+\" based on no. of layers in active project"}, {"oid": "7d4262b2ee63e14cadb8230a2e0f749b99adf636", "committedDate": "2020-10-27 22:41:12 +0530", "message": "Simplify rx chain"}, {"oid": "7f43d2bd049c140911063a4bb2583088e8fa4088", "committedDate": "2020-10-29 18:01:21 +0530", "message": "Add TODO and move code related to btn visibility in a single method"}, {"oid": "53af0df000937c0117bb199e9756b3c55506ff16", "committedDate": "2020-10-29 22:14:02 +0530", "message": "Refactor: btn -> button"}, {"oid": "2167258b210a01cacfd66a614c0e419e734598c7", "committedDate": "2020-11-01 14:18:11 +0530", "message": "Merge branch 'master' into cleanup2"}, {"oid": "6c219b3aed75f73100c1ec9234a47615477b63e9", "committedDate": "2020-11-01 22:35:14 +0530", "message": "Refactor HomeScreen"}, {"oid": "22e38338fb2cda43e9cd64f74ffed87f63fda8d0", "committedDate": "2020-11-01 22:47:55 +0530", "message": "Pass along throwable instead of parsing error message"}, {"oid": "fd48dbc5f4de61201c5fafcd728dddb90f27e783", "committedDate": "2020-11-03 12:26:18 +0530", "message": "Improve variable names to follow the convention"}, {"oid": "4335b5cf52dc81a50ce5d32a83b605a5d913f83b", "committedDate": "2020-11-03 12:50:17 +0530", "message": "Rename toSingle to toBooleanSingle, override it for nullable consumers and add javadoc"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "f3ac91d28c57a64a7c3a16c61eeddeb95be11cea", "committedDate": "2020-12-19 16:38:40 +0200", "message": "Simplify Navigator"}, {"oid": "3477afd7f36ee481fdce80a24b96670082efaa84", "committedDate": "2020-12-23 10:48:13 +0530", "message": "Fix new point can't be added bug"}, {"oid": "5bf90c07e6408445a4ec4f15b12633ab0b6c7f29", "committedDate": "2020-12-24 10:18:16 +0530", "message": "Move instantiating features to FeatureRepository"}, {"oid": "138db6ba0f0fd4ed833858e5eb4544e55b4d6d96", "committedDate": "2021-01-04 20:07:55 +0200", "message": "Clean up project activation observables"}, {"oid": "e683a74a4e79e9690c03574edb7c4aa9d18a29c9", "committedDate": "2021-01-18 13:45:12 +0200", "message": "Fix build error"}, {"oid": "be02105192d5c3c523021f9302aa89507713d695", "committedDate": "2021-01-18 16:47:24 +0200", "message": "Create Processors inline and annotate"}, {"oid": "9f3d0d67e94c4373c31ab1708ac71df051a3e9f1", "committedDate": "2021-01-18 16:55:17 +0200", "message": "Create MutableLiveData inline and annotate"}, {"oid": "502981351f1c0a22acd82cf14030c98584a1ebf7", "committedDate": "2021-01-18 19:24:59 +0200", "message": "Move cleanup of TODOs"}, {"oid": "61e00d316d4caf8f8d4b5f19c7d56d452da07dc9", "committedDate": "2021-01-22 13:54:17 +0200", "message": "Merge branch 'master' into main-vm-cleanup"}, {"oid": "2f91903e4886f14c219704680605c00b9a77dc90", "committedDate": "2021-01-28 13:52:38 -0500", "message": "Merge branch 'master' of https://github.com/google/ground-android into init-subjects"}, {"oid": "9665bcf19d7bfd206f9ce69cd6cf675fa346e935", "committedDate": "2021-05-14 15:29:30 -0400", "message": "feat: Make geojson features selectable"}, {"oid": "023c5c8342e6125b87a109b1484369becf435baa", "committedDate": "2021-05-14 16:49:31 -0400", "message": "Reduce `showBottomSheet()` visibility"}, {"oid": "b982da4335f2d28c333985e0bc880d084324cfc1", "committedDate": "2021-05-18 19:53:33 -0400", "message": "Refactor call to show layer dialog"}, {"oid": "af059d511b19a227e8ba3428ffda32ef4a7908cf", "committedDate": "2021-05-18 22:06:42 -0400", "message": "Only allow adding features to allowed layers"}, {"oid": "3f2c437882820237a0fa55c12a93dc3292351ab2", "committedDate": "2021-05-19 18:31:47 -0400", "message": "feat: disambiguate area clicks"}, {"oid": "982dfef7f6eaab5941ccfe6595987f592f66b533", "committedDate": "2021-05-25 15:57:41 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into disambig"}, {"oid": "f602ac89b4c69e5e0f04856c18978877083102af", "committedDate": "2021-05-25 18:42:34 -0400", "message": "chore: fix styling errors"}, {"oid": "6ecd4805e362d271e45762d3e19304e1ee66d60a", "committedDate": "2021-05-26 09:18:59 -0400", "message": "style: feature disambiguation code cleanup"}, {"oid": "36fa2baf54b10ad30b6b33e6b8a192fa4af978b2", "committedDate": "2021-05-26 12:43:33 -0400", "message": "style: clean up feature disambiguation code"}, {"oid": "3b646eb209590c5313a6594a9bbe79b95ee91276", "committedDate": "2021-05-26 20:36:14 -0400", "message": "Hide add feature buttons if user can't contribute features"}, {"oid": "5d543422e1dd3243b49495bd680ab12a8f55ee66", "committedDate": "2021-05-26 20:39:21 -0400", "message": "Convert to View visibility int in layout"}, {"oid": "fbbb5868c67d2d12dbe463426a371ac40a1d590c", "committedDate": "2021-06-05 17:50:43 -0400", "message": "Stop replaying add observation requests on config change"}, {"oid": "8f9e80be36be336314f797da1670695ff2743b3d", "committedDate": "2021-06-05 17:55:09 -0400", "message": "Stop replaying event streams"}, {"oid": "d482b0251b0dbc468e46a20baf9b7c89a99ce268", "committedDate": "2021-06-05 19:15:51 -0400", "message": "Replace Event and Action with observables"}, {"oid": "5a3465688d1ad7489466bcda1b21e4685837a2f3", "committedDate": "2021-06-05 19:47:08 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into hide-add-feature-btn"}, {"oid": "48ee28f6e9c102e309428e3b792355f7fb700285", "committedDate": "2021-06-05 21:21:00 -0400", "message": "Add trace logging"}, {"oid": "3b88e11f6bf1194ed3822c5f656d934b3ccd2d72", "committedDate": "2021-06-05 22:29:46 -0400", "message": "More debug logging"}, {"oid": "5c534882fa3aba257ea0ec5c9a8dea0339f0056f", "committedDate": "2021-06-06 21:15:37 -0400", "message": "Stop replaying feature selector requests"}, {"oid": "b5c8592152108ae81e6b2d2f1abd1dfe3108f1ea", "committedDate": "2021-06-06 21:33:39 -0400", "message": "Minor cleanup"}, {"oid": "f63a92d61d3ee92c475e460341e56fcad1399cac", "committedDate": "2021-06-06 21:39:30 -0400", "message": "Only create feature selector when necessary"}, {"oid": "ab36852799671fc02c80308c3b4d96863d71a9ec", "committedDate": "2021-06-07 15:43:34 -0400", "message": "Rudimentary sync status UI"}, {"oid": "5912534ff739f3148613c85a950f91bf02db3187", "committedDate": "2021-06-30 20:11:14 +0530", "message": "Move subscribeOn to VM"}, {"oid": "16e9088f0cff56431bbd5558a2d2c5bdd7143a51", "committedDate": "2021-06-30 11:42:12 -0400", "message": "Remove extra log line"}, {"oid": "b674df5676345d4aa0d9ec74a5f038860b02ff58", "committedDate": "2021-07-04 16:20:12 +0530", "message": "Access current user via UserRepository"}, {"oid": "a8cc6763d06c2c9c9e77030a0d16353b475dcd09", "committedDate": "2021-07-04 16:24:13 +0530", "message": "Remove unused method and convert to lambda"}, {"oid": "5c1d17fb7d5ea691ae158eece8f6c8a75873e52d", "committedDate": "2021-07-04 16:33:01 +0530", "message": "Show contributor editable \"points\" layers only."}, {"oid": "02eb30f5331e0e329144797d9a25dd57f1d8150c", "committedDate": "2021-07-07 00:32:54 +0530", "message": "Rename"}, {"oid": "9de04e56528c8e6f59717cc7602da2b4d2fef063", "committedDate": "2021-07-07 00:56:04 +0530", "message": "Fix another import order"}, {"oid": "4fadf84d4e2347f680f84dce71df23a24e9b275b", "committedDate": "2021-07-07 16:36:16 -0400", "message": "Merge branch 'master' into sync-status"}, {"oid": "843f6bc253e2e42230b149f87933f2d5d0d2007d", "committedDate": "2021-07-07 18:17:45 -0400", "message": "Merge with upstream master"}, {"oid": "7f7c452d387a3bd26ec149148f4c38ccdf4c5a03", "committedDate": "2021-07-07 18:17:52 -0400", "message": "Merge remote-tracking branch 'origin/hide-add-feature-btn' into hide-add-feature-btn"}, {"oid": "c2cce0f773cec4fc1a4418ddfcfce24ddad3f35e", "committedDate": "2021-07-08 18:21:10 +0000", "message": "Merge with upstream master"}, {"oid": "4e86b962e7caa3a603f80bbd75bed48fef7a5ef0", "committedDate": "2021-07-11 22:41:56 +0000", "message": "Merge branch 'master' into hide-add-feature-btn"}, {"oid": "99a4221ce778c5c86dbf26b8fcf56bc402b1f0ae", "committedDate": "2021-07-11 22:55:56 +0000", "message": "Fix compile error"}, {"oid": "7d72667af1eb455da61c5c337ada07788e5a0ca2", "committedDate": "2021-07-11 22:59:39 +0000", "message": "Merge remote-tracking branch 'origin/hide-add-feature-btn' into hide-add-feature-btn"}, {"oid": "e19c76100aa7884f6685c7dc77ce003e9635e794", "committedDate": "2021-07-12 01:05:43 +0000", "message": "Merge branch 'master' of https://github.com/google/ground-android into rotate-feature-selector"}, {"oid": "876412cf2823113e6d93dc2a8ae2f4bc1a79ec51", "committedDate": "2021-07-12 09:04:45 +0530", "message": "Fixes NPE by converting manual binding with data binding"}, {"oid": "49271d018c7331cb1de1a2bdfd4d9c6634c238b3", "committedDate": "2021-07-17 23:11:00 +0530", "message": "Update API to provide FeatureMutation instead of Feature"}, {"oid": "a0eba34efdf4d5ae87839f8f91332bd3dd67b69e", "committedDate": "2021-07-17 23:25:57 +0530", "message": "Replace Maybe with Single when fetching feature from repository"}, {"oid": "5ac093cb340b117b8f422ca3551079af585547b0", "committedDate": "2021-07-19 19:01:22 +0000", "message": "Merge branch 'master' of https://github.com/google/ground-android into rotate-feature-selector"}, {"oid": "aee134fe97cf64de914a4ead3508f99eb1dbb05f", "committedDate": "2021-07-20 01:45:56 +0000", "message": "Fix race condition between showing add feature button and loading project"}, {"oid": "41ed249e91038c4fd64d2bddc10a22ebe7693115", "committedDate": "2021-07-20 21:01:58 +0000", "message": "Fix add feature button regression"}, {"oid": "eb472ae26cdc645267326398bd60dc2d1d22f16d", "committedDate": "2021-07-21 17:11:08 +0530", "message": "Merge branch 'master' into issue-80"}, {"oid": "cdef4682d1f8e090adb193b6790be24d6823cf56", "committedDate": "2021-07-21 13:59:49 +0000", "message": "Merge branch 'master' into issue-80"}, {"oid": "d02a8bcc584651008713927a20e77b315d45d3d4", "committedDate": "2021-07-21 19:48:11 +0530", "message": "Fix incompatible merge changes"}, {"oid": "dfeb8dc91f76e91446720402ad14b076a78842ae", "committedDate": "2021-07-22 02:21:06 +0530", "message": "UI linked to viewmodel and fragments."}, {"oid": "8a6f11c4e03e5a39fbf907d1470452de4b74dbc0", "committedDate": "2021-07-24 13:26:27 +0530", "message": "Renamed variables and functions moved some functions to direct layout binding."}, {"oid": "9472065bbe279da659c97e659dffeb1a39906f44", "committedDate": "2021-08-25 06:55:49 +0530", "message": "PolygonFeatures saving into local db."}, {"oid": "5efe58b0c4ba17900af690f09b027dc119b9b68c", "committedDate": "2021-10-28 10:12:24 +0530", "message": "Supply date instead of creating in FeatureRepository to avoid using PowerMock"}, {"oid": "d51df2834abfa55e6be315c63fca5de425f4d76e", "committedDate": "2021-11-16 19:38:07 -0500", "message": "Use layer ACLs to control add feature flow"}, {"oid": "d009047870987ac82a728e2c5587b2a0b9ba251f", "committedDate": "2021-11-16 20:18:48 -0500", "message": "Fix PMD errors"}, {"oid": "d732d9be6cec47ace4fad70e6508cfc2a16a3358", "committedDate": "2021-11-17 11:58:09 -0500", "message": "Fix #1047"}, {"oid": "a6b3d09d2257a36a6c55927bb289848156a2a46c", "committedDate": "2021-11-25 21:21:49 +0530", "message": "Make feature nullable in MapPin"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "6824bfaf8b2aeb292fa2cec6befb8f7826de4662", "committedDate": "2022-04-12 11:23:29 -0400", "message": "fix import orders"}, {"oid": "aaa9fd2bf5a1dde836c63f8b475a79131a8c5b71", "committedDate": "2022-04-13 10:05:24 +0530", "message": "Replace Optional<String> with String"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1a1ef30cea48444def5ce0aa7cd475c2a5d0a5ff", "committedDate": "2022-05-27 10:23:39 +0530", "message": "Rename ProjectRepository to SurveyRepository"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "61a1c6d6b32e58576d38166db8e94fc87e3abea3", "committedDate": "2022-05-27 21:54:31 +0530", "message": "Update remaining usages"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "9091867b7560086249baf50a1b4d1b4747c2a931", "committedDate": "2022-06-04 11:41:14 +0530", "message": "Remove \"+\" fab and related states from VM"}, {"oid": "ffc6468a762bcc270f25c6ce4387822db8bfd07c", "committedDate": "2022-06-04 12:25:09 +0530", "message": "Remove listener for survey change"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "cc11b90b7f4c50ebbf02e436850ba9de43105371", "committedDate": "2022-06-06 23:48:00 +0530", "message": "Merge branch 'master' into remove-add-fab"}, {"oid": "e8a308044baa469f8504c64b081bce1818aeabac", "committedDate": "2022-06-23 21:03:29 +0530", "message": "Rename references of \"layer\" to \"job\" in firebase schema"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"oid": "6c49e69b9aa24d77c240d1f49e40b510545ba3af", "url": "https://github.com/google/ground-android/commit/6c49e69b9aa24d77c240d1f49e40b510545ba3af", "message": "Fix theme for toolbar", "committedDate": "2020-07-23T15:47:35Z", "type": "commit"}, {"oid": "ff5a5b0f3c1749b02288ad8bfdd3aa361819f8e1", "url": "https://github.com/google/ground-android/commit/ff5a5b0f3c1749b02288ad8bfdd3aa361819f8e1", "message": "Add toBuilder() for converting entity to builder", "committedDate": "2020-07-23T15:47:35Z", "type": "commit"}, {"oid": "04fc89217e9060c32551b32842c72df2ac75a661", "url": "https://github.com/google/ground-android/commit/04fc89217e9060c32551b32842c72df2ac75a661", "message": "Add methods to repository for UI to interact with\n\n - Add deleteFeature() to FeatureRepository to enqueuing mutation\n - Move AuthenticationManager to FeatureRepository\n - Add method to HomeScreenViewModel to delete active feature", "committedDate": "2020-07-23T15:47:35Z", "type": "commit"}, {"oid": "87648003f4fbe26f58c36c24650b5d74e69b7d79", "url": "https://github.com/google/ground-android/commit/87648003f4fbe26f58c36c24650b5d74e69b7d79", "message": "Handle delete mutation when applying to local database", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "14eef0e9bbc7a91a5101c5afaa05ba9650bb7477", "url": "https://github.com/google/ground-android/commit/14eef0e9bbc7a91a5101c5afaa05ba9650bb7477", "message": "Handle delete mutation in LocalMutationSyncWorker", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "4e49697b27de4c2ba3db48ed60337ec28bf271c2", "url": "https://github.com/google/ground-android/commit/4e49697b27de4c2ba3db48ed60337ec28bf271c2", "message": "Handle delete type in FeatureDocumentReference", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "9e858ba67b77b65631d1ae96da5bcd16b116557f", "url": "https://github.com/google/ground-android/commit/9e858ba67b77b65631d1ae96da5bcd16b116557f", "message": "Hook UI to repository\n\n - On successful delete, hide the bottom sheet", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "e0af26e504c5bfddb15cfde1ec88a5da6b0bad5e", "url": "https://github.com/google/ground-android/commit/e0af26e504c5bfddb15cfde1ec88a5da6b0bad5e", "message": "Load only active features from local db", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "5ebf48c25c1013bdc9bc48b3ea0763786840f7fb", "url": "https://github.com/google/ground-android/commit/5ebf48c25c1013bdc9bc48b3ea0763786840f7fb", "message": "Unrelated changes to Project.xml by IDE", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "22e2122857a100077d9d7d7005b63d4064fd6e9e", "url": "https://github.com/google/ground-android/commit/22e2122857a100077d9d7d7005b63d4064fd6e9e", "message": "Add todo and update method names", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "11e4b6beaeacf71d408b132244754a3f3530ae8f", "url": "https://github.com/google/ground-android/commit/11e4b6beaeacf71d408b132244754a3f3530ae8f", "message": "Add unit test", "committedDate": "2020-07-23T15:47:36Z", "type": "commit"}, {"oid": "c210b452ac3acb7c96b734ea279495d77af68427", "url": "https://github.com/google/ground-android/commit/c210b452ac3acb7c96b734ea279495d77af68427", "message": "Rename method to mark*ForDeletion\n\nFrom Gino: This is to distinguish it from our future state where we don't actually delete things, but rather mark them as \"deleted\". In that case there would be three states in the local DB, \"not deleted\", \"marked for deletion on remote\", and \"deleted\".", "committedDate": "2020-07-23T15:51:30Z", "type": "commit"}, {"oid": "9a65f16d32b3e4d782a2321da425eb0b3e9da8ea", "url": "https://github.com/google/ground-android/commit/9a65f16d32b3e4d782a2321da425eb0b3e9da8ea", "message": "Simplify method by starting call with *Dao.update()", "committedDate": "2020-07-23T16:03:03Z", "type": "commit"}, {"oid": "1d0403954e77804fdb2cb712aaeed3cbf2cf0886", "url": "https://github.com/google/ground-android/commit/1d0403954e77804fdb2cb712aaeed3cbf2cf0886", "message": "Avoid using magic numbers for entity state.", "committedDate": "2020-07-23T16:12:45Z", "type": "commit"}, {"oid": "6022ed38affc9ab252f815e7dd43cb0bcacdaf84", "url": "https://github.com/google/ground-android/commit/6022ed38affc9ab252f815e7dd43cb0bcacdaf84", "message": "Add existing issue number next to TODO", "committedDate": "2020-07-23T16:14:10Z", "type": "commit"}, {"oid": "05b7f5b622f80528f88bf12ec1f02c1f14678302", "url": "https://github.com/google/ground-android/commit/05b7f5b622f80528f88bf12ec1f02c1f14678302", "message": "Refactor finalizing pending mutations", "committedDate": "2020-07-23T16:34:08Z", "type": "commit"}, {"oid": "05b7f5b622f80528f88bf12ec1f02c1f14678302", "url": "https://github.com/google/ground-android/commit/05b7f5b622f80528f88bf12ec1f02c1f14678302", "message": "Refactor finalizing pending mutations", "committedDate": "2020-07-23T16:34:08Z", "type": "forcePushed"}, {"oid": "ba945002a8895c2c45b14076219effe556ecbe09", "url": "https://github.com/google/ground-android/commit/ba945002a8895c2c45b14076219effe556ecbe09", "message": "Fix line length", "committedDate": "2020-07-23T17:07:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3Nzk1MQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459777951", "body": "`@Transaction` doesn't apply to Firebase, which uses it's own API (`db.runTransaction`) to batch writings. Please remove here and throughout.", "bodyText": "@Transaction doesn't apply to Firebase, which uses it's own API (db.runTransaction) to batch writings. Please remove here and throughout.", "bodyHTML": "<p dir=\"auto\"><code>@Transaction</code> doesn't apply to Firebase, which uses it's own API (<code>db.runTransaction</code>) to batch writings. Please remove here and throughout.</p>", "author": "gino-m", "createdAt": "2020-07-23T23:13:07Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -333,9 +335,29 @@ public Completable updateMutations(ImmutableList<Mutation> mutations) {\n         .collect(toImmutableList());\n   }\n \n-  @Transaction\n   @Override\n-  public Completable removePendingMutations(ImmutableList<Mutation> mutations) {\n+  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n+    return finalizeDeletions(mutations).andThen(removePending(mutations));\n+  }\n+\n+  @Transaction", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjk4NQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r460106985", "bodyText": "Done", "author": "shobhitagarwal1612", "createdAt": "2020-07-24T14:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3Nzk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3f1b66d218fa41f161fe6956becd31fa999ed79", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..1e5ea3541 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -340,7 +340,6 @@ public class RoomLocalDataStore implements LocalDataStore {\n     return finalizeDeletions(mutations).andThen(removePending(mutations));\n   }\n \n-  @Transaction\n   private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -340,7 +339,6 @@ public class RoomLocalDataStore implements LocalDataStore {\n     return finalizeDeletions(mutations).andThen(removePending(mutations));\n   }\n \n-  @Transaction\n   private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n", "next_change": {"commit": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex c7c4cb4de..6fbf52567 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -335,11 +339,12 @@ public class RoomLocalDataStore implements LocalDataStore {\n   }\n \n   @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n+  public Completable finalizePendingMutations(@Nullable ImmutableList<Mutation> mutations) {\n+    if (mutations == null) throw new NullPointerException(\"List of mutations can not be null\");\n     return finalizeDeletions(mutations).andThen(removePending(mutations));\n   }\n \n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n+  private Completable finalizeDeletions(@Nullable ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n         .flatMapCompletable(\n", "next_change": {"commit": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 6fbf52567..bbfcc5d20 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -340,7 +341,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n \n   @Override\n   public Completable finalizePendingMutations(@Nullable ImmutableList<Mutation> mutations) {\n-    if (mutations == null) throw new NullPointerException(\"List of mutations can not be null\");\n+    Preconditions.checkNotNull(mutations, \"List of mutations can not be null\");\n     return finalizeDeletions(mutations).andThen(removePending(mutations));\n   }\n \n", "next_change": {"commit": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex bbfcc5d20..d72a45204 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -341,7 +341,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n \n   @Override\n   public Completable finalizePendingMutations(@Nullable ImmutableList<Mutation> mutations) {\n-    Preconditions.checkNotNull(mutations, \"List of mutations can not be null\");\n+    checkNotNull(mutations, \"List of mutations can not be null\");\n     return finalizeDeletions(mutations).andThen(removePending(mutations));\n   }\n \n", "next_change": {"commit": "eb8364a94d496a1e8a8d8275006b7558ef017206", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex d72a45204..be57e9f3e 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -342,7 +404,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n   @Override\n   public Completable finalizePendingMutations(@Nullable ImmutableList<Mutation> mutations) {\n     checkNotNull(mutations, \"List of mutations can not be null\");\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n+    return finalizeDeletions(mutations).andThen(markComplete(mutations));\n   }\n \n   private Completable finalizeDeletions(@Nullable ImmutableList<Mutation> mutations) {\n", "next_change": {"commit": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex be57e9f3e..5e8713ccc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -402,12 +403,11 @@ public class RoomLocalDataStore implements LocalDataStore {\n   }\n \n   @Override\n-  public Completable finalizePendingMutations(@Nullable ImmutableList<Mutation> mutations) {\n-    checkNotNull(mutations, \"List of mutations can not be null\");\n+  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n     return finalizeDeletions(mutations).andThen(markComplete(mutations));\n   }\n \n-  private Completable finalizeDeletions(@Nullable ImmutableList<Mutation> mutations) {\n+  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n     return Observable.fromIterable(mutations)\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n         .flatMapCompletable(\n", "next_change": {"commit": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 5e8713ccc..7eccb4b75 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -412,8 +435,8 @@ public class RoomLocalDataStore implements LocalDataStore {\n         .filter(mutation -> mutation.getType() == Type.DELETE)\n         .flatMapCompletable(\n             mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n+              if (mutation instanceof SubmissionMutation) {\n+                return deleteSubmission(((SubmissionMutation) mutation).getSubmissionId());\n               } else if (mutation instanceof FeatureMutation) {\n                 return deleteFeature(mutation.getFeatureId());\n               } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODA3MQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459778071", "body": "Perhaps `Timber.t` would be more appropriate here (or remove altogether).", "bodyText": "Perhaps Timber.t would be more appropriate here (or remove altogether).", "bodyHTML": "<p dir=\"auto\">Perhaps <code>Timber.t</code> would be more appropriate here (or remove altogether).</p>", "author": "gino-m", "createdAt": "2020-07-23T23:13:35Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -401,17 +423,40 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+    return featureDao\n+        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwMDUxNA==", "url": "https://github.com/google/ground-android/pull/552#discussion_r460100514", "bodyText": "Timber.t doesn't exist. Were you referring to info level?", "author": "shobhitagarwal1612", "createdAt": "2020-07-24T14:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNDE1Nw==", "url": "https://github.com/google/ground-android/pull/552#discussion_r461204157", "bodyText": "Sorry, I didn't realize there wasn't a \"trace\" log level with Timber. Please disregard.", "author": "gino-m", "createdAt": "2020-07-27T22:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8fbcff7a38e0ed4e117a22f024b49e63c2057d29", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..6329a01b8 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,7 +430,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n", "next_change": {"commit": "9858e8e9ea1294b2619b219440c752bbac190761", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 6329a01b8..4f605c40d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -434,8 +434,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,12 +430,11 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex c7c4cb4de..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,581 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findOnceAndStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement();\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODIwMg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459778202", "body": "This can return `Completable` instead.", "bodyText": "This can return Completable instead.", "bodyHTML": "<p dir=\"auto\">This can return <code>Completable</code> instead.</p>", "author": "gino-m", "createdAt": "2020-07-23T23:14:02Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -401,17 +423,40 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fbcff7a38e0ed4e117a22f024b49e63c2057d29", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..6329a01b8 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,7 +430,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n", "next_change": {"commit": "9858e8e9ea1294b2619b219440c752bbac190761", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 6329a01b8..4f605c40d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -434,8 +434,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,12 +430,11 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex c7c4cb4de..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,581 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findOnceAndStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement();\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODIzMg==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459778232", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "gino-m", "createdAt": "2020-07-23T23:14:09Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -401,17 +423,40 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+    return featureDao\n+        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n+        .ignoreElement()\n+        .subscribeOn(schedulers.io());\n+  }\n+\n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n     return featureDao\n         .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n         .subscribeOn(schedulers.io());\n   }\n \n+  @Override\n+  public Completable deleteFeature(String featureId) {\n+    return featureDao\n+        .findById(featureId)\n+        .toSingle()\n+        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex 057c4f631..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,585 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.CompletableSource;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findByProjectIdStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  @Transaction\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  @Transaction\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODQ0MQ==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459778441", "body": "No need to change the `subscribeOn` thread inside private methods; it only needs to be done in the main entry point of each operation, the setting propagates to the rest of the stream.", "bodyText": "No need to change the subscribeOn thread inside private methods; it only needs to be done in the main entry point of each operation, the setting propagates to the rest of the stream.", "bodyHTML": "<p dir=\"auto\">No need to change the <code>subscribeOn</code> thread inside private methods; it only needs to be done in the main entry point of each operation, the setting propagates to the rest of the stream.</p>", "author": "gino-m", "createdAt": "2020-07-23T23:14:50Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -401,17 +423,40 @@ private Completable apply(FeatureMutation mutation) throws LocalDataStoreExcepti\n       case CREATE:\n         return getUser(mutation.getUserId())\n             .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n+      case DELETE:\n+        return featureDao\n+            .findById(mutation.getFeatureId())\n+            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n+            .subscribeOn(schedulers.io());\n       default:\n         throw LocalDataStoreException.unknownMutationType(mutation.getType());\n     }\n   }\n \n+  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+    return featureDao\n+        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n+        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n+        .ignoreElement()\n+        .subscribeOn(schedulers.io());", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fbcff7a38e0ed4e117a22f024b49e63c2057d29", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..6329a01b8 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,7 +430,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n", "next_change": {"commit": "9858e8e9ea1294b2619b219440c752bbac190761", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 6329a01b8..4f605c40d 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -434,8 +434,7 @@ public class RoomLocalDataStore implements LocalDataStore {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\nindex 057c4f631..c7c4cb4de 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n", "chunk": "@@ -433,12 +430,11 @@ public class RoomLocalDataStore implements LocalDataStore {\n     }\n   }\n \n-  private CompletableSource markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n+  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n     return featureDao\n         .update(entity.toBuilder().setState(EntityState.DELETED).build())\n         .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n+        .ignoreElement();\n   }\n \n   private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n", "next_change": {"commit": "59bf65cc4283c981ada934c9bc18b549371eda50", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\ndeleted file mode 100644\nindex c7c4cb4de..000000000\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java\n+++ /dev/null\n", "chunk": "@@ -1,581 +0,0 @@\n-/*\n- * Copyright 2019 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.android.gnd.persistence.local.room;\n-\n-import static com.google.android.gnd.util.ImmutableListCollector.toImmutableList;\n-import static com.google.android.gnd.util.ImmutableSetCollector.toImmutableSet;\n-import static java8.util.stream.StreamSupport.stream;\n-\n-import androidx.room.Transaction;\n-import com.google.android.gnd.model.AuditInfo;\n-import com.google.android.gnd.model.Mutation;\n-import com.google.android.gnd.model.Mutation.Type;\n-import com.google.android.gnd.model.Project;\n-import com.google.android.gnd.model.User;\n-import com.google.android.gnd.model.basemap.OfflineArea;\n-import com.google.android.gnd.model.basemap.tile.Tile;\n-import com.google.android.gnd.model.feature.Feature;\n-import com.google.android.gnd.model.feature.FeatureMutation;\n-import com.google.android.gnd.model.form.Element;\n-import com.google.android.gnd.model.form.Field;\n-import com.google.android.gnd.model.form.Form;\n-import com.google.android.gnd.model.form.MultipleChoice;\n-import com.google.android.gnd.model.form.Option;\n-import com.google.android.gnd.model.layer.Layer;\n-import com.google.android.gnd.model.observation.Observation;\n-import com.google.android.gnd.model.observation.ObservationMutation;\n-import com.google.android.gnd.persistence.local.LocalDataStore;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureDao;\n-import com.google.android.gnd.persistence.local.room.dao.FeatureMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.FieldDao;\n-import com.google.android.gnd.persistence.local.room.dao.FormDao;\n-import com.google.android.gnd.persistence.local.room.dao.LayerDao;\n-import com.google.android.gnd.persistence.local.room.dao.MultipleChoiceDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationDao;\n-import com.google.android.gnd.persistence.local.room.dao.ObservationMutationDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineAreaDao;\n-import com.google.android.gnd.persistence.local.room.dao.OfflineBaseMapSourceDao;\n-import com.google.android.gnd.persistence.local.room.dao.OptionDao;\n-import com.google.android.gnd.persistence.local.room.dao.ProjectDao;\n-import com.google.android.gnd.persistence.local.room.dao.TileDao;\n-import com.google.android.gnd.persistence.local.room.dao.UserDao;\n-import com.google.android.gnd.persistence.local.room.entity.AuditInfoEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FieldEntity;\n-import com.google.android.gnd.persistence.local.room.entity.FormEntity;\n-import com.google.android.gnd.persistence.local.room.entity.LayerEntity;\n-import com.google.android.gnd.persistence.local.room.entity.MultipleChoiceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ObservationMutationEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OfflineBaseMapSourceEntity;\n-import com.google.android.gnd.persistence.local.room.entity.OptionEntity;\n-import com.google.android.gnd.persistence.local.room.entity.ProjectEntity;\n-import com.google.android.gnd.persistence.local.room.entity.TileEntity;\n-import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n-import com.google.android.gnd.persistence.local.room.models.EntityState;\n-import com.google.android.gnd.persistence.local.room.models.TileEntityState;\n-import com.google.android.gnd.persistence.local.room.models.UserDetails;\n-import com.google.android.gnd.rx.Schedulers;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import io.reactivex.Completable;\n-import io.reactivex.Flowable;\n-import io.reactivex.Maybe;\n-import io.reactivex.Observable;\n-import io.reactivex.Single;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-import timber.log.Timber;\n-\n-/**\n- * Implementation of local data store using Room ORM. Room abstracts persistence between a local db\n- * and Java objects using a mix of inferred mappings based on Java field names and types, and custom\n- * annotations. Mappings are defined through the various Entity objects in the package and related\n- * embedded classes.\n- */\n-@Singleton\n-public class RoomLocalDataStore implements LocalDataStore {\n-\n-  @Inject OptionDao optionDao;\n-  @Inject MultipleChoiceDao multipleChoiceDao;\n-  @Inject FieldDao fieldDao;\n-  @Inject FormDao formDao;\n-  @Inject LayerDao layerDao;\n-  @Inject ProjectDao projectDao;\n-  @Inject FeatureDao featureDao;\n-  @Inject FeatureMutationDao featureMutationDao;\n-  @Inject ObservationDao observationDao;\n-  @Inject ObservationMutationDao observationMutationDao;\n-  @Inject TileDao tileDao;\n-  @Inject UserDao userDao;\n-  @Inject OfflineAreaDao offlineAreaDao;\n-  @Inject OfflineBaseMapSourceDao offlineBaseMapSourceDao;\n-  @Inject Schedulers schedulers;\n-\n-  @Inject\n-  RoomLocalDataStore() {}\n-\n-  private Completable insertOrUpdateOption(String fieldId, Option option) {\n-    return optionDao\n-        .insertOrUpdate(OptionEntity.fromOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateOptions(String fieldId, ImmutableList<Option> options) {\n-    return Observable.fromIterable(options)\n-        .flatMapCompletable(option -> insertOrUpdateOption(fieldId, option))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateMultipleChoice(String fieldId, MultipleChoice multipleChoice) {\n-    return multipleChoiceDao\n-        .insertOrUpdate(MultipleChoiceEntity.fromMultipleChoice(fieldId, multipleChoice))\n-        .andThen(insertOrUpdateOptions(fieldId, multipleChoice.getOptions()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateField(String formId, Element.Type elementType, Field field) {\n-    return fieldDao\n-        .insertOrUpdate(FieldEntity.fromField(formId, elementType, field))\n-        .andThen(\n-            Observable.just(field)\n-                .filter(__ -> field.getMultipleChoice() != null)\n-                .flatMapCompletable(\n-                    __ -> insertOrUpdateMultipleChoice(field.getId(), field.getMultipleChoice())))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateElements(String formId, ImmutableList<Element> elements) {\n-    return Observable.fromIterable(elements)\n-        .flatMapCompletable(\n-            element -> insertOrUpdateField(formId, element.getType(), element.getField()));\n-  }\n-\n-  private Completable insertOrUpdateForm(String layerId, Form form) {\n-    return formDao\n-        .insertOrUpdate(FormEntity.fromForm(layerId, form))\n-        .andThen(insertOrUpdateElements(form.getId(), form.getElements()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateForms(String layerId, List<Form> forms) {\n-    return Observable.fromIterable(forms)\n-        .flatMapCompletable(form -> insertOrUpdateForm(layerId, form));\n-  }\n-\n-  private Completable insertOrUpdateLayer(String projectId, Layer layer) {\n-    return layerDao\n-        .insertOrUpdate(LayerEntity.fromLayer(projectId, layer))\n-        .andThen(\n-            insertOrUpdateForms(\n-                layer.getId(), layer.getForm().map(Arrays::asList).orElseGet(ArrayList::new)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable insertOrUpdateLayers(String projectId, List<Layer> layers) {\n-    return Observable.fromIterable(layers)\n-        .flatMapCompletable(layer -> insertOrUpdateLayer(projectId, layer));\n-  }\n-\n-  private Completable insertOfflineBaseMapSources(Project project) {\n-    return Observable.fromIterable(project.getOfflineBaseMapSources())\n-        .flatMapCompletable(\n-            source ->\n-                offlineBaseMapSourceDao.insert(\n-                    OfflineBaseMapSourceEntity.fromModel(project.getId(), source)));\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable insertOrUpdateProject(Project project) {\n-    return projectDao\n-        .insertOrUpdate(ProjectEntity.fromProject(project))\n-        .andThen(layerDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOrUpdateLayers(project.getId(), project.getLayers()))\n-        .andThen(offlineBaseMapSourceDao.deleteByProjectId(project.getId()))\n-        .andThen(insertOfflineBaseMapSources(project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateUser(User user) {\n-    return userDao.insertOrUpdate(UserEntity.fromUser(user)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<User> getUser(String id) {\n-    return userDao\n-        .findById(id)\n-        .doOnError(e -> Timber.e(e, \"Error loading user from local db: %s\", id))\n-        // Fail with NoSuchElementException if not found.\n-        .toSingle()\n-        .map(UserEntity::toUser)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Project>> getProjects() {\n-    return projectDao\n-        .getAllProjects()\n-        .map(list -> stream(list).map(ProjectEntity::toProject).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Project> getProjectById(String id) {\n-    return projectDao.getProjectById(id).map(ProjectEntity::toProject).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteProject(Project project) {\n-    return projectDao.delete(ProjectEntity.fromProject(project)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(FeatureMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  // TODO(#127): Decouple from Project and pass in project id instead.\n-  @Override\n-  public Flowable<ImmutableSet<Feature>> getFeaturesOnceAndStream(Project project) {\n-    return featureDao\n-        .findOnceAndStream(project.getId(), EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(f -> FeatureEntity.toFeature(f, project))\n-                    .collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  // TODO(#127): Decouple from Project and remove project from args.\n-  @Override\n-  public Maybe<Feature> getFeature(Project project, String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .map(f -> FeatureEntity.toFeature(f, project))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Observation> getObservation(Feature feature, String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .map(obs -> ObservationEntity.toObservation(feature, obs))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Observation>> getObservations(Feature feature, String formId) {\n-    return observationDao\n-        .findByFeatureId(feature.getId(), formId, EntityState.DEFAULT)\n-        .map(\n-            list ->\n-                stream(list)\n-                    .map(obs -> ObservationEntity.toObservation(feature, obs))\n-                    .collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n-    return tileDao\n-        .findAllOnceAndStream()\n-        .map(list -> stream(list).map(TileEntity::toTile).collect(toImmutableSet()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Mutation>> getPendingMutations(String featureId) {\n-    return featureMutationDao\n-        .findByFeatureId(featureId)\n-        .flattenAsObservable(fms -> fms)\n-        .map(FeatureMutationEntity::toMutation)\n-        .cast(Mutation.class)\n-        .mergeWith(\n-            observationMutationDao\n-                .findByFeatureId(featureId)\n-                .flattenAsObservable(oms -> oms)\n-                .map(ObservationMutationEntity::toMutation)\n-                .cast(Mutation.class))\n-        .toList()\n-        .map(ImmutableList::copyOf)\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable updateMutations(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .updateAll(toFeatureMutationEntities(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .updateAll(toObservationMutationEntities(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private ImmutableList<ObservationMutationEntity> toObservationMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(ObservationMutation.filter(mutations))\n-        .map(ObservationMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  private ImmutableList<FeatureMutationEntity> toFeatureMutationEntities(\n-      ImmutableList<Mutation> mutations) {\n-    return stream(FeatureMutation.filter(mutations))\n-        .map(FeatureMutationEntity::fromMutation)\n-        .collect(toImmutableList());\n-  }\n-\n-  @Override\n-  public Completable finalizePendingMutations(ImmutableList<Mutation> mutations) {\n-    return finalizeDeletions(mutations).andThen(removePending(mutations));\n-  }\n-\n-  private Completable finalizeDeletions(ImmutableList<Mutation> mutations) {\n-    return Observable.fromIterable(mutations)\n-        .filter(mutation -> mutation.getType() == Type.DELETE)\n-        .flatMapCompletable(\n-            mutation -> {\n-              if (mutation instanceof ObservationMutation) {\n-                return deleteObservation(((ObservationMutation) mutation).getObservationId());\n-              } else if (mutation instanceof FeatureMutation) {\n-                return deleteFeature(mutation.getFeatureId());\n-              } else {\n-                return Completable.error(new RuntimeException(\"Unknown type : \" + mutation));\n-              }\n-            });\n-  }\n-\n-  private Completable removePending(ImmutableList<Mutation> mutations) {\n-    return featureMutationDao\n-        .deleteAll(FeatureMutation.ids(mutations))\n-        .andThen(\n-            observationMutationDao\n-                .deleteAll(ObservationMutation.ids(mutations))\n-                .subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeFeature(Feature feature) {\n-    // TODO(#109): Once we user can edit feature locally, apply pending mutations before saving.\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromFeature(feature))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable mergeObservation(Observation observation) {\n-    ObservationEntity observationEntity = ObservationEntity.fromObservation(observation);\n-    return observationMutationDao\n-        .findByObservationId(observation.getId())\n-        .flatMapCompletable(mutations -> mergeObservation(observationEntity, mutations))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable mergeObservation(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations) {\n-    if (mutations.isEmpty()) {\n-      return observationDao.insertOrUpdate(observation);\n-    }\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    return getUser(lastMutation.getUserId())\n-        .map(user -> applyMutations(observation, mutations, user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs));\n-  }\n-\n-  private ObservationEntity applyMutations(\n-      ObservationEntity observation, List<ObservationMutationEntity> mutations, User user) {\n-    ObservationMutationEntity lastMutation = mutations.get(mutations.size() - 1);\n-    long clientTimestamp = lastMutation.getClientTimestamp();\n-    Timber.v(\"Merging observation \" + this + \" with mutations \" + mutations);\n-    ObservationEntity.Builder builder = observation.toBuilder();\n-    // Merge changes to responses.\n-    for (ObservationMutationEntity mutation : mutations) {\n-      builder.applyMutation(mutation);\n-    }\n-    // Update modified user and time.\n-    AuditInfoEntity lastModified =\n-        AuditInfoEntity.builder()\n-            .setUser(UserDetails.fromUser(user))\n-            .setClientTimestamp(clientTimestamp)\n-            .build();\n-    builder.setLastModified(lastModified);\n-    Timber.v(\"Merged observation %s\", builder.build());\n-    return builder.build();\n-  }\n-\n-  private Completable apply(FeatureMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> insertOrUpdateFeature(mutation, user));\n-      case DELETE:\n-        return featureDao\n-            .findById(mutation.getFeatureId())\n-            .flatMapCompletable(entity -> markFeatureForDeletion(entity, mutation))\n-            .subscribeOn(schedulers.io());\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable markFeatureForDeletion(FeatureEntity entity, FeatureMutation mutation) {\n-    return featureDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking feature as deleted : %s\", mutation))\n-        .ignoreElement();\n-  }\n-\n-  private Completable insertOrUpdateFeature(FeatureMutation mutation, User user) {\n-    return featureDao\n-        .insertOrUpdate(FeatureEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteFeature(String featureId) {\n-    return featureDao\n-        .findById(featureId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local feature : %s\", featureId))\n-        .flatMapCompletable(entity -> featureDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(FeatureMutation mutation) {\n-    return featureMutationDao\n-        .insert(FeatureMutationEntity.fromMutation(mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Transaction\n-  @Override\n-  public Completable applyAndEnqueue(ObservationMutation mutation) {\n-    try {\n-      return apply(mutation).andThen(enqueue(mutation));\n-    } catch (LocalDataStoreException e) {\n-      return Completable.error(e);\n-    }\n-  }\n-\n-  /**\n-   * Applies mutation to observation in database or creates a new one.\n-   *\n-   * @return A Completable that emits an error if mutation type is \"UPDATE\" but entity does not *\n-   *     exist, or if type is \"CREATE\" and entity already exists.\n-   */\n-  public Completable apply(ObservationMutation mutation) throws LocalDataStoreException {\n-    switch (mutation.getType()) {\n-      case CREATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> createObservation(mutation, user));\n-      case UPDATE:\n-        return getUser(mutation.getUserId())\n-            .flatMapCompletable(user -> updateObservation(mutation, user));\n-      case DELETE:\n-        return observationDao\n-            .findById(mutation.getObservationId())\n-            .flatMapCompletable(entity -> markObservationForDeletion(entity, mutation));\n-      default:\n-        throw LocalDataStoreException.unknownMutationType(mutation.getType());\n-    }\n-  }\n-\n-  private Completable createObservation(ObservationMutation mutation, User user) {\n-    return observationDao\n-        .insert(ObservationEntity.fromMutation(mutation, AuditInfo.now(user)))\n-        .doOnSubscribe(__ -> Timber.v(\"Inserting observation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable updateObservation(ObservationMutation mutation, User user) {\n-    ObservationMutationEntity mutationEntity = ObservationMutationEntity.fromMutation(mutation);\n-    return observationDao\n-        .findById(mutation.getObservationId())\n-        .doOnSubscribe(__ -> Timber.v(\"Applying mutation: %s\", mutation))\n-        // Emit NoSuchElementException if not found.\n-        .toSingle()\n-        .map(obs -> applyMutations(obs, ImmutableList.of(mutationEntity), user))\n-        .flatMapCompletable(obs -> observationDao.insertOrUpdate(obs).subscribeOn(schedulers.io()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable markObservationForDeletion(\n-      ObservationEntity entity, ObservationMutation mutation) {\n-    return observationDao\n-        .update(entity.toBuilder().setState(EntityState.DELETED).build())\n-        .doOnSubscribe(__ -> Timber.d(\"Marking observation as deleted : %s\", mutation))\n-        .ignoreElement()\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable deleteObservation(String observationId) {\n-    return observationDao\n-        .findById(observationId)\n-        .toSingle()\n-        .doOnSubscribe(__ -> Timber.d(\"Deleting local observation : %s\", observationId))\n-        .flatMapCompletable(entity -> observationDao.delete(entity))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  private Completable enqueue(ObservationMutation mutation) {\n-    return observationMutationDao\n-        .insert(ObservationMutationEntity.fromMutation(mutation))\n-        .doOnSubscribe(__ -> Timber.v(\"Enqueuing mutation: %s\", mutation))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateTile(Tile tile) {\n-    return tileDao.insertOrUpdate(TileEntity.fromTile(tile)).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Maybe<Tile> getTile(String tileId) {\n-    return tileDao.findById(tileId).map(TileEntity::toTile).subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<ImmutableList<Tile>> getPendingTiles() {\n-    return tileDao\n-        .findByState(TileEntityState.PENDING.intValue())\n-        .map(ts -> stream(ts).map(TileEntity::toTile).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n-    return offlineAreaDao\n-        .insertOrUpdate(OfflineAreaEntity.fromArea(area))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Flowable<ImmutableList<OfflineArea>> getOfflineAreasOnceAndStream() {\n-    return offlineAreaDao\n-        .findAllOnceAndStream()\n-        .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n-        .subscribeOn(schedulers.io());\n-  }\n-\n-  @Override\n-  public Single<OfflineArea> getOfflineAreaById(String id) {\n-    return offlineAreaDao\n-        .findById(id)\n-        .map(OfflineAreaEntity::toArea)\n-        .toSingle()\n-        .subscribeOn(schedulers.io());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "faac45eb56af44ffd03ef537dc813fd7b5eb4bf7", "committedDate": "2020-09-01 11:11:02 -0400", "message": "Rename Tile -> TileSource"}, {"oid": "41caaefd31d1c06523535a24eda630823605c564", "committedDate": "2020-09-22 16:55:30 -0400", "message": "Update local data store to manage tile/area cross references"}, {"oid": "ac800a510cb68eb2724e96ad1d90991df74ce0a7", "committedDate": "2020-10-12 12:16:53 +0530", "message": "Add support for reposition to repository"}, {"oid": "bd0bfb2f866acd7c85604c74af57a782fecdfdd7", "committedDate": "2020-10-12 17:19:16 -0400", "message": "Manage tile/area references using reference counting"}, {"oid": "9ed2eed17a929c87375dcee97278719634ae06dd", "committedDate": "2020-10-12 17:37:11 -0400", "message": "Remove unused tile/area cross reference tables classes/methods"}, {"oid": "a990ccb27f376703350757f4983f735526b96176", "committedDate": "2020-10-13 16:36:26 -0400", "message": "Rename OfflineArea -> OfflineBaseMap"}, {"oid": "6db79f59caf5c1e0e476dfc9231f351eed814554", "committedDate": "2020-10-15 11:42:34 -0400", "message": "Merge branch 'master' of https://github.com/google/ground-android into delete-areas"}, {"oid": "226c329ad20be421cbc2ceec97ac25f9e052dc29", "committedDate": "2020-10-15 21:23:43 +0530", "message": "Merge branch 'master' into issue-109"}, {"oid": "b86a87ab45ecb164530b0e3e8f7cda2a5087e1c7", "committedDate": "2020-10-15 14:02:57 -0400", "message": "Readability fixes for the OfflineBaseMapRespository"}, {"oid": "9027ebe61a15c931e27ed575f17531f4554c6005", "committedDate": "2020-10-15 17:04:45 -0400", "message": "Merge branch 'master' into delete-areas"}, {"oid": "7bf8d74f07e78443bbb824d17c2ff1fc1fcda780", "committedDate": "2020-11-02 15:16:07 -0500", "message": "Use a custom query to update tile area counts"}, {"oid": "0b72c84631d3edb88752bbf97966e4f2c4ec33be", "committedDate": "2020-11-02 15:17:13 -0500", "message": "Merge branch 'delete-areas' of https://github.com/scolsen/ground-android into delete-areas"}, {"oid": "aaf0c83e9eed7502190539964bc3d1d27b748f60", "committedDate": "2020-11-04 17:01:10 -0500", "message": "Stylistic improvements to TileSource"}, {"oid": "b744cbe0445cee44d8b64cdd3ce9536e38652d30", "committedDate": "2020-11-12 19:57:30 +0000", "message": "Adding NullAway plugin for checking null handling"}, {"oid": "ecf6cebf406fec87ae82ccd1631c62363c8b3140", "committedDate": "2020-11-12 19:59:11 +0000", "message": "Replace null checks with Preconditions.checkNotNull"}, {"oid": "53bfbd29bccd5bcdf8f8ebc87271019b9be4982f", "committedDate": "2020-11-12 19:59:54 +0000", "message": "Statically import Preconditions.checkNotNull"}, {"oid": "e85b367eb6af64df15b71f195bcca5f85be34ee2", "committedDate": "2020-11-25 12:01:14 +0200", "message": "Ignore features with unknown layerId"}, {"oid": "f11554d6d68034ddea420a55a9576aa21b57b3df", "committedDate": "2020-11-25 12:56:45 +0200", "message": "Remove TODOs for obsolete #127"}, {"oid": "2c796d52275ca48c49aee7f76dc5541819d66251", "committedDate": "2020-11-25 07:39:10 -0500", "message": "Merge branch 'master' into pr-127-cleanup"}, {"oid": "7b75caa8c677ce6472edbb0ce4d88a464b0c2caf", "committedDate": "2020-11-25 16:53:58 +0200", "message": "Skip and log invalid Observations"}, {"oid": "22da5ef7e8c401cd83625e77b5fdec92b3db49b4", "committedDate": "2020-11-25 16:56:41 +0200", "message": "Skip and log invalid Features"}, {"oid": "80774f1aa6d51675cb3f34a2221426d92b387f4a", "committedDate": "2020-12-08 19:02:17 +0200", "message": "Merge branch 'master' of https://github.com/google/ground-android into fix-optional-get"}, {"oid": "3c78bee97b32f7cbd21a3a174afe877483818374", "committedDate": "2020-12-08 22:53:42 +0530", "message": "Timber.d -> Timber.e"}, {"oid": "55caac093783ed8a843c027447dd31a4abad5158", "committedDate": "2021-01-18 18:19:15 +0200", "message": "Clean up TODOs with bug numbers"}, {"oid": "831f2572b72dfb40b837728f538cdb4d883c7ae7", "committedDate": "2021-04-26 17:47:34 -0400", "message": "Ignore non-field elements"}, {"oid": "495c2ff5acf3b68156410539d99f691cd238ff1e", "committedDate": "2021-04-26 17:59:12 -0400", "message": "Use response map converter directly rather than via Room"}, {"oid": "70a8d08db80ed611d54c392168fd735ee8fb2739", "committedDate": "2021-04-26 18:07:19 -0400", "message": "Rename ResponseDeltasTypeConverter"}, {"oid": "0ac8f69e5c4561e6109de032b24a8db6cb594894", "committedDate": "2021-04-27 18:51:05 -0400", "message": "Attach Form to ObservationMutation"}, {"oid": "b8980c29bbebeb503661be72de82d055fcfd600e", "committedDate": "2021-04-28 10:47:42 -0400", "message": "Log internal db consistency issues as errors"}, {"oid": "14127643220c3ae3684612ebdac22c9f2e4ed2a6", "committedDate": "2021-04-28 10:58:15 -0400", "message": "Pass form and field definitions into local db response deserializers"}, {"oid": "e41ee3aa89671a60241b7f4fa7ee08bf5a89b08a", "committedDate": "2021-05-24 19:03:47 -0400", "message": "Set updated responses when applying mutations locally"}, {"oid": "673d6f7516d9aa891e55f653aadd256105c7a800", "committedDate": "2021-05-24 19:04:02 -0400", "message": "Fallback if observation not in local db on update"}, {"oid": "a265845b95e085ae60ed895bdfa4e6a4cc09870a", "committedDate": "2021-05-24 19:05:46 -0400", "message": "Refactor applying mutations"}, {"oid": "eb8364a94d496a1e8a8d8275006b7558ef017206", "committedDate": "2021-06-07 15:34:12 -0400", "message": "Add sync state to local data store"}, {"oid": "98e86b63af514170d51ede7f8785c5d550dec4bf", "committedDate": "2021-06-08 11:40:10 -0400", "message": "Sort sync status"}, {"oid": "b5636621a94503f7eb792f8246f4b26ac2322c25", "committedDate": "2021-07-09 21:38:56 +0000", "message": "Load mutations reactively from local data store"}, {"oid": "9b22c250c1dcdb9573ed10967d1fcbb973a6c018", "committedDate": "2021-07-21 17:51:44 +0530", "message": "Include some easy-to-fix rules and apply the fixes"}, {"oid": "d9ec1e1cb8bcd2f4a98fb9a46e2dbc22fb22dc77", "committedDate": "2021-11-15 10:14:35 -0500", "message": "refactor: rename OfflineBasemap -> OfflineArea"}, {"oid": "5f7db694be92576d2e694a3fc83feca7d2e246cf", "committedDate": "2021-11-15 12:31:17 -0500", "message": "refactor: rename OfflineBaseMapSource -> BaseMap"}, {"oid": "4c2f74ed87bdb870aa7d95a475c1183a7b3c9cf2", "committedDate": "2021-11-15 15:09:49 -0500", "message": "refactor: rename TileSource -> TileSet"}, {"oid": "350a55dfcf1b5075a8c8f30fd3a3a14ae1d7f552", "committedDate": "2022-01-12 18:05:45 -0500", "message": "Report non-fatal mutation sync errors to Crashlytics"}, {"oid": "d462f8f05d612473e2a8c8d12d82f96eb2c3842a", "committedDate": "2022-04-11 10:54:37 -0400", "message": "convert mutation model to kotlin"}, {"oid": "5f42ce64b029f8e9fecf4e41252d3fda44df956e", "committedDate": "2022-05-19 17:00:22 +0000", "message": "Rename Observation -> Submission and format files"}, {"oid": "be5fed8c3c1e9d9e81b82f115161be0c7d4c1154", "committedDate": "2022-05-20 13:58:55 +0000", "message": "Resolve build failure issues"}, {"oid": "7de1fb6a09f82a22782ec98ffff392e36248ef2e", "committedDate": "2022-05-20 14:17:09 +0000", "message": "Fix incorrect method naming"}, {"oid": "c44cfec5863355201b6b5ef2ffc12bb5305fa3af", "committedDate": "2022-05-20 16:07:11 +0000", "message": "Properly format files with google-java-format"}, {"oid": "716034bd600e53043f867ef266d6637786f8be0b", "committedDate": "2022-05-25 16:38:17 +0000", "message": "Rename Form -> Task"}, {"oid": "5faa9a54c3940859a1ea25035e44a05c163ec29b", "committedDate": "2022-05-27 10:01:02 +0530", "message": "Rename Project to Survey"}, {"oid": "1b12a5f191d5633d66c4d042a49dde65febc68e3", "committedDate": "2022-05-27 10:26:08 +0530", "message": "Update local db method names"}, {"oid": "619f197df91c2b919220e15984773d87e6a9f33e", "committedDate": "2022-05-27 10:32:37 +0530", "message": "Update dao class"}, {"oid": "5e7b179aa96ee2e9162a4704d2d01c8f9d73e19d", "committedDate": "2022-05-27 10:42:50 +0530", "message": "Update entity classes"}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "f264e50d4485d0f565422b03b5c24ff46b5249e8", "committedDate": "2022-05-27 17:19:51 +0000", "message": "Fix import order"}, {"oid": "d027498036403d7af99fa4033348912febd05a5a", "committedDate": "2022-05-27 17:39:06 +0000", "message": "Incorporte requested changes"}, {"oid": "5eefef1e8772f072fb82bfca6eabd6a5f9d878f1", "committedDate": "2022-06-04 20:03:15 +0530", "message": "Rename model Layer to Job"}, {"oid": "920c7fd5784d5c1e54792cd6292bbdeec13d41ce", "committedDate": "2022-06-04 20:27:43 +0530", "message": "Rename all remaining occurrences"}, {"oid": "f92fbe8962b865415fec1f8bfefd49d390b08d98", "committedDate": "2022-06-06 15:42:33 +0000", "message": "Merge changes from Master to FormToTask branch"}, {"oid": "d02c15788ddbc94eec6cfedee7dd07c5b29c7211", "committedDate": "2022-06-06 16:00:16 +0000", "message": "Merge changes from master"}, {"oid": "62a612d66bbb6a327c72251db39809f2692534ac", "committedDate": "2022-06-08 15:02:25 +0000", "message": "Rename Element -> Step"}, {"oid": "e7b68de72789e37e77154d8c71f10d3071839814", "committedDate": "2022-06-08 15:16:37 +0000", "message": "Fix import order"}, {"oid": "59bf65cc4283c981ada934c9bc18b549371eda50", "committedDate": "2022-06-24 23:30:24 +0530", "message": "Rename package to com.google.android.ground"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODgyNA==", "url": "https://github.com/google/ground-android/pull/552#discussion_r459778824", "body": "Using our convention in the Wiki, should should be called `findOnceAndStream` (or `findByProjectIdAndEntityStateOnceAndStream`, but that seems excessive).", "bodyText": "Using our convention in the Wiki, should should be called findOnceAndStream (or findByProjectIdAndEntityStateOnceAndStream, but that seems excessive).", "bodyHTML": "<p dir=\"auto\">Using our convention in the Wiki, should should be called <code>findOnceAndStream</code> (or <code>findByProjectIdAndEntityStateOnceAndStream</code>, but that seems excessive).</p>", "author": "gino-m", "createdAt": "2020-07-23T23:15:59Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java", "diffHunk": "@@ -19,15 +19,16 @@\n import androidx.room.Dao;\n import androidx.room.Query;\n import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n+import com.google.android.gnd.persistence.local.room.models.EntityState;\n import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n import java.util.List;\n \n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId);\n+  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId, EntityState state);", "originalCommit": "ba945002a8895c2c45b14076219effe556ecbe09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6591275c886c98ade2e3c5064b8594b1bc38356", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 6ae43a037..d2bb2c376 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -28,7 +28,7 @@ import java.util.List;\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n   @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId, EntityState state);\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex 6ae43a037..d2bb2c376 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -28,7 +28,7 @@ import java.util.List;\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n   @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findByProjectIdStream(String projectId, EntityState state);\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nindex d2bb2c376..1e3066205 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n", "chunk": "@@ -27,8 +27,8 @@ import java.util.List;\n /** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n @Dao\n public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE project_id = :projectId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String projectId, EntityState state);\n+  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n   @Query(\"SELECT * FROM feature WHERE id = :id\")\n   Maybe<FeatureEntity> findById(String id);\n", "next_change": {"commit": "e7c98f653d0946175b7f2cc9cd75216ced830477", "changed_code": [{"header": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nsimilarity index 59%\nrename from gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\nrename to gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\nindex 1e3066205..c91f33971 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/FeatureDao.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/LocationOfInterestDao.java\n", "chunk": "@@ -18,18 +18,18 @@ package com.google.android.gnd.persistence.local.room.dao;\n \n import androidx.room.Dao;\n import androidx.room.Query;\n-import com.google.android.gnd.persistence.local.room.entity.FeatureEntity;\n+import com.google.android.gnd.persistence.local.room.entity.LocationOfInterestEntity;\n import com.google.android.gnd.persistence.local.room.models.EntityState;\n import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n import java.util.List;\n \n-/** Provides low-level read/write operations of {@link FeatureEntity} to/from the local db. */\n+/** Provides low-level read/write operations of {@link LocationOfInterestEntity} to/from the local db. */\n @Dao\n-public interface FeatureDao extends BaseDao<FeatureEntity> {\n-  @Query(\"SELECT * FROM feature WHERE survey_id = :surveyId AND state = :state\")\n-  Flowable<List<FeatureEntity>> findOnceAndStream(String surveyId, EntityState state);\n+public interface LocationOfInterestDao extends BaseDao<LocationOfInterestEntity> {\n+  @Query(\"SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state\")\n+  Flowable<List<LocationOfInterestEntity>> findOnceAndStream(String surveyId, EntityState state);\n \n-  @Query(\"SELECT * FROM feature WHERE id = :id\")\n-  Maybe<FeatureEntity> findById(String id);\n+  @Query(\"SELECT * FROM location_of_interest WHERE id = :id\")\n+  Maybe<LocationOfInterestEntity> findById(String id);\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "12d59e5c6b49985da2179c15c59cb2ad8796597a", "message": "Merge commit", "committedDate": null}, {"oid": "39d3a4d50a30aac46e88856f93f09e90e14dd93f", "committedDate": "2022-05-27 10:53:16 +0530", "message": "Updates setters and getters in entity"}, {"oid": "e7c98f653d0946175b7f2cc9cd75216ced830477", "committedDate": "2022-06-28 12:42:01 -0400", "message": "Refactor: rename Feature -> LocationOfInterest"}]}, {"oid": "f2661073119bcada83b6f3c21971f47a02ef99c9", "url": "https://github.com/google/ground-android/commit/f2661073119bcada83b6f3c21971f47a02ef99c9", "message": "Avoid using autoDisposable() and replace with LiveData", "committedDate": "2020-07-24T14:45:10Z", "type": "commit"}, {"oid": "e3f1b66d218fa41f161fe6956becd31fa999ed79", "url": "https://github.com/google/ground-android/commit/e3f1b66d218fa41f161fe6956becd31fa999ed79", "message": "Remove annotation Transaction\n\nSince this doesn't apply to firebase, it's better not to include it", "committedDate": "2020-07-24T14:46:49Z", "type": "commit"}, {"oid": "8fbcff7a38e0ed4e117a22f024b49e63c2057d29", "url": "https://github.com/google/ground-android/commit/8fbcff7a38e0ed4e117a22f024b49e63c2057d29", "message": "Replace CompletableSource with Completable", "committedDate": "2020-07-24T14:49:56Z", "type": "commit"}, {"oid": "9858e8e9ea1294b2619b219440c752bbac190761", "url": "https://github.com/google/ground-android/commit/9858e8e9ea1294b2619b219440c752bbac190761", "message": "Remove unnecessary thread switching inside private methods", "committedDate": "2020-07-24T14:53:45Z", "type": "commit"}, {"oid": "f6591275c886c98ade2e3c5064b8594b1bc38356", "url": "https://github.com/google/ground-android/commit/f6591275c886c98ade2e3c5064b8594b1bc38356", "message": "Improve method name to follow naming conventions", "committedDate": "2020-07-24T14:57:25Z", "type": "commit"}]}